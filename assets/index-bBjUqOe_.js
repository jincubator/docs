const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/architecture-BIKgbEpW.js","assets/ZoomImage-CocgZgDB.js","assets/architecture-Cyo9IHxp.js"])))=>i.map(i=>d[i]);
function M3(t,a){for(var i=0;i<a.length;i++){const r=a[i];if(typeof r!="string"&&!Array.isArray(r)){for(const c in r)if(c!=="default"&&!(c in t)){const l=Object.getOwnPropertyDescriptor(r,c);l&&Object.defineProperty(t,c,l.get?l:{enumerable:!0,get:()=>r[c]})}}}return Object.freeze(Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}))}(function(){const a=document.createElement("link").relList;if(a&&a.supports&&a.supports("modulepreload"))return;for(const c of document.querySelectorAll('link[rel="modulepreload"]'))r(c);new MutationObserver(c=>{for(const l of c)if(l.type==="childList")for(const u of l.addedNodes)u.tagName==="LINK"&&u.rel==="modulepreload"&&r(u)}).observe(document,{childList:!0,subtree:!0});function i(c){const l={};return c.integrity&&(l.integrity=c.integrity),c.referrerPolicy&&(l.referrerPolicy=c.referrerPolicy),c.crossOrigin==="use-credentials"?l.credentials="include":c.crossOrigin==="anonymous"?l.credentials="omit":l.credentials="same-origin",l}function r(c){if(c.ep)return;c.ep=!0;const l=i(c);fetch(c.href,l)}})();function fs(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var Kl={exports:{}},Vn={};/**
 * @license React
 * react-jsx-runtime.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var WF;function ly(){if(WF)return Vn;WF=1;var t=Symbol.for("react.transitional.element"),a=Symbol.for("react.fragment");function i(r,c,l){var u=null;if(l!==void 0&&(u=""+l),c.key!==void 0&&(u=""+c.key),"key"in c){l={};for(var d in c)d!=="key"&&(l[d]=c[d])}else l=c;return c=l.ref,{$$typeof:t,type:r,key:u,ref:c!==void 0?c:null,props:l}}return Vn.Fragment=a,Vn.jsx=i,Vn.jsxs=i,Vn}var GF;function hy(){return GF||(GF=1,Kl.exports=ly()),Kl.exports}var g=hy();const uy=fs(g),dy=M3({__proto__:null,default:uy},[g]);var Zl={exports:{}},Un={},Xl={exports:{}},Yl={};/**
 * @license React
 * scheduler.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var KF;function Ay(){return KF||(KF=1,function(t){function a(O,W){var Q=O.length;O.push(W);e:for(;0<Q;){var X=Q-1>>>1,R=O[X];if(0<c(R,W))O[X]=W,O[Q]=R,Q=X;else break e}}function i(O){return O.length===0?null:O[0]}function r(O){if(O.length===0)return null;var W=O[0],Q=O.pop();if(Q!==W){O[0]=Q;e:for(var X=0,R=O.length,$=R>>>1;X<$;){var e2=2*(X+1)-1,a2=O[e2],A2=e2+1,k2=O[A2];if(0>c(a2,Q))A2<R&&0>c(k2,a2)?(O[X]=k2,O[A2]=Q,X=A2):(O[X]=a2,O[e2]=Q,X=e2);else if(A2<R&&0>c(k2,Q))O[X]=k2,O[A2]=Q,X=A2;else break e}}return W}function c(O,W){var Q=O.sortIndex-W.sortIndex;return Q!==0?Q:O.id-W.id}if(t.unstable_now=void 0,typeof performance=="object"&&typeof performance.now=="function"){var l=performance;t.unstable_now=function(){return l.now()}}else{var u=Date,d=u.now();t.unstable_now=function(){return u.now()-d}}var F=[],p=[],f=1,m=null,C=3,y=!1,w=!1,v=!1,D=!1,B=typeof setTimeout=="function"?setTimeout:null,S=typeof clearTimeout=="function"?clearTimeout:null,E=typeof setImmediate<"u"?setImmediate:null;function T(O){for(var W=i(p);W!==null;){if(W.callback===null)r(p);else if(W.startTime<=O)r(p),W.sortIndex=W.expirationTime,a(F,W);else break;W=i(p)}}function P(O){if(v=!1,T(O),!w)if(i(F)!==null)w=!0,x||(x=!0,s2());else{var W=i(p);W!==null&&d2(P,W.startTime-O)}}var x=!1,L=-1,z=5,U=-1;function n2(){return D?!0:!(t.unstable_now()-U<z)}function u2(){if(D=!1,x){var O=t.unstable_now();U=O;var W=!0;try{e:{w=!1,v&&(v=!1,S(L),L=-1),y=!0;var Q=C;try{t:{for(T(O),m=i(F);m!==null&&!(m.expirationTime>O&&n2());){var X=m.callback;if(typeof X=="function"){m.callback=null,C=m.priorityLevel;var R=X(m.expirationTime<=O);if(O=t.unstable_now(),typeof R=="function"){m.callback=R,T(O),W=!0;break t}m===i(F)&&r(F),T(O)}else r(F);m=i(F)}if(m!==null)W=!0;else{var $=i(p);$!==null&&d2(P,$.startTime-O),W=!1}}break e}finally{m=null,C=Q,y=!1}W=void 0}}finally{W?s2():x=!1}}}var s2;if(typeof E=="function")s2=function(){E(u2)};else if(typeof MessageChannel<"u"){var c2=new MessageChannel,G=c2.port2;c2.port1.onmessage=u2,s2=function(){G.postMessage(null)}}else s2=function(){B(u2,0)};function d2(O,W){L=B(function(){O(t.unstable_now())},W)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(O){O.callback=null},t.unstable_forceFrameRate=function(O){0>O||125<O?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):z=0<O?Math.floor(1e3/O):5},t.unstable_getCurrentPriorityLevel=function(){return C},t.unstable_next=function(O){switch(C){case 1:case 2:case 3:var W=3;break;default:W=C}var Q=C;C=W;try{return O()}finally{C=Q}},t.unstable_requestPaint=function(){D=!0},t.unstable_runWithPriority=function(O,W){switch(O){case 1:case 2:case 3:case 4:case 5:break;default:O=3}var Q=C;C=O;try{return W()}finally{C=Q}},t.unstable_scheduleCallback=function(O,W,Q){var X=t.unstable_now();switch(typeof Q=="object"&&Q!==null?(Q=Q.delay,Q=typeof Q=="number"&&0<Q?X+Q:X):Q=X,O){case 1:var R=-1;break;case 2:R=250;break;case 5:R=1073741823;break;case 4:R=1e4;break;default:R=5e3}return R=Q+R,O={id:f++,callback:W,priorityLevel:O,startTime:Q,expirationTime:R,sortIndex:-1},Q>X?(O.sortIndex=Q,a(p,O),i(F)===null&&O===i(p)&&(v?(S(L),L=-1):v=!0,d2(P,Q-X))):(O.sortIndex=R,a(F,O),w||y||(w=!0,x||(x=!0,s2()))),O},t.unstable_shouldYield=n2,t.unstable_wrapCallback=function(O){var W=C;return function(){var Q=C;C=W;try{return O.apply(this,arguments)}finally{C=Q}}}}(Yl)),Yl}var ZF;function py(){return ZF||(ZF=1,Xl.exports=Ay()),Xl.exports}var Jl={exports:{}},P2={};/**
 * @license React
 * react.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var XF;function Fy(){if(XF)return P2;XF=1;var t=Symbol.for("react.transitional.element"),a=Symbol.for("react.portal"),i=Symbol.for("react.fragment"),r=Symbol.for("react.strict_mode"),c=Symbol.for("react.profiler"),l=Symbol.for("react.consumer"),u=Symbol.for("react.context"),d=Symbol.for("react.forward_ref"),F=Symbol.for("react.suspense"),p=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),m=Symbol.iterator;function C(R){return R===null||typeof R!="object"?null:(R=m&&R[m]||R["@@iterator"],typeof R=="function"?R:null)}var y={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},w=Object.assign,v={};function D(R,$,e2){this.props=R,this.context=$,this.refs=v,this.updater=e2||y}D.prototype.isReactComponent={},D.prototype.setState=function(R,$){if(typeof R!="object"&&typeof R!="function"&&R!=null)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,R,$,"setState")},D.prototype.forceUpdate=function(R){this.updater.enqueueForceUpdate(this,R,"forceUpdate")};function B(){}B.prototype=D.prototype;function S(R,$,e2){this.props=R,this.context=$,this.refs=v,this.updater=e2||y}var E=S.prototype=new B;E.constructor=S,w(E,D.prototype),E.isPureReactComponent=!0;var T=Array.isArray,P={H:null,A:null,T:null,S:null,V:null},x=Object.prototype.hasOwnProperty;function L(R,$,e2,a2,A2,k2){return e2=k2.ref,{$$typeof:t,type:R,key:$,ref:e2!==void 0?e2:null,props:k2}}function z(R,$){return L(R.type,$,void 0,void 0,void 0,R.props)}function U(R){return typeof R=="object"&&R!==null&&R.$$typeof===t}function n2(R){var $={"=":"=0",":":"=2"};return"$"+R.replace(/[=:]/g,function(e2){return $[e2]})}var u2=/\/+/g;function s2(R,$){return typeof R=="object"&&R!==null&&R.key!=null?n2(""+R.key):$.toString(36)}function c2(){}function G(R){switch(R.status){case"fulfilled":return R.value;case"rejected":throw R.reason;default:switch(typeof R.status=="string"?R.then(c2,c2):(R.status="pending",R.then(function($){R.status==="pending"&&(R.status="fulfilled",R.value=$)},function($){R.status==="pending"&&(R.status="rejected",R.reason=$)})),R.status){case"fulfilled":return R.value;case"rejected":throw R.reason}}throw R}function d2(R,$,e2,a2,A2){var k2=typeof R;(k2==="undefined"||k2==="boolean")&&(R=null);var g2=!1;if(R===null)g2=!0;else switch(k2){case"bigint":case"string":case"number":g2=!0;break;case"object":switch(R.$$typeof){case t:case a:g2=!0;break;case f:return g2=R._init,d2(g2(R._payload),$,e2,a2,A2)}}if(g2)return A2=A2(R),g2=a2===""?"."+s2(R,0):a2,T(A2)?(e2="",g2!=null&&(e2=g2.replace(u2,"$&/")+"/"),d2(A2,$,e2,"",function(I2){return I2})):A2!=null&&(U(A2)&&(A2=z(A2,e2+(A2.key==null||R&&R.key===A2.key?"":(""+A2.key).replace(u2,"$&/")+"/")+g2)),$.push(A2)),1;g2=0;var K2=a2===""?".":a2+":";if(T(R))for(var E2=0;E2<R.length;E2++)a2=R[E2],k2=K2+s2(a2,E2),g2+=d2(a2,$,e2,k2,A2);else if(E2=C(R),typeof E2=="function")for(R=E2.call(R),E2=0;!(a2=R.next()).done;)a2=a2.value,k2=K2+s2(a2,E2++),g2+=d2(a2,$,e2,k2,A2);else if(k2==="object"){if(typeof R.then=="function")return d2(G(R),$,e2,a2,A2);throw $=String(R),Error("Objects are not valid as a React child (found: "+($==="[object Object]"?"object with keys {"+Object.keys(R).join(", ")+"}":$)+"). If you meant to render a collection of children, use an array instead.")}return g2}function O(R,$,e2){if(R==null)return R;var a2=[],A2=0;return d2(R,a2,"","",function(k2){return $.call(e2,k2,A2++)}),a2}function W(R){if(R._status===-1){var $=R._result;$=$(),$.then(function(e2){(R._status===0||R._status===-1)&&(R._status=1,R._result=e2)},function(e2){(R._status===0||R._status===-1)&&(R._status=2,R._result=e2)}),R._status===-1&&(R._status=0,R._result=$)}if(R._status===1)return R._result.default;throw R._result}var Q=typeof reportError=="function"?reportError:function(R){if(typeof window=="object"&&typeof window.ErrorEvent=="function"){var $=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:typeof R=="object"&&R!==null&&typeof R.message=="string"?String(R.message):String(R),error:R});if(!window.dispatchEvent($))return}else if(typeof process=="object"&&typeof process.emit=="function"){process.emit("uncaughtException",R);return}console.error(R)};function X(){}return P2.Children={map:O,forEach:function(R,$,e2){O(R,function(){$.apply(this,arguments)},e2)},count:function(R){var $=0;return O(R,function(){$++}),$},toArray:function(R){return O(R,function($){return $})||[]},only:function(R){if(!U(R))throw Error("React.Children.only expected to receive a single React element child.");return R}},P2.Component=D,P2.Fragment=i,P2.Profiler=c,P2.PureComponent=S,P2.StrictMode=r,P2.Suspense=F,P2.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=P,P2.__COMPILER_RUNTIME={__proto__:null,c:function(R){return P.H.useMemoCache(R)}},P2.cache=function(R){return function(){return R.apply(null,arguments)}},P2.cloneElement=function(R,$,e2){if(R==null)throw Error("The argument must be a React element, but you passed "+R+".");var a2=w({},R.props),A2=R.key,k2=void 0;if($!=null)for(g2 in $.ref!==void 0&&(k2=void 0),$.key!==void 0&&(A2=""+$.key),$)!x.call($,g2)||g2==="key"||g2==="__self"||g2==="__source"||g2==="ref"&&$.ref===void 0||(a2[g2]=$[g2]);var g2=arguments.length-2;if(g2===1)a2.children=e2;else if(1<g2){for(var K2=Array(g2),E2=0;E2<g2;E2++)K2[E2]=arguments[E2+2];a2.children=K2}return L(R.type,A2,void 0,void 0,k2,a2)},P2.createContext=function(R){return R={$$typeof:u,_currentValue:R,_currentValue2:R,_threadCount:0,Provider:null,Consumer:null},R.Provider=R,R.Consumer={$$typeof:l,_context:R},R},P2.createElement=function(R,$,e2){var a2,A2={},k2=null;if($!=null)for(a2 in $.key!==void 0&&(k2=""+$.key),$)x.call($,a2)&&a2!=="key"&&a2!=="__self"&&a2!=="__source"&&(A2[a2]=$[a2]);var g2=arguments.length-2;if(g2===1)A2.children=e2;else if(1<g2){for(var K2=Array(g2),E2=0;E2<g2;E2++)K2[E2]=arguments[E2+2];A2.children=K2}if(R&&R.defaultProps)for(a2 in g2=R.defaultProps,g2)A2[a2]===void 0&&(A2[a2]=g2[a2]);return L(R,k2,void 0,void 0,null,A2)},P2.createRef=function(){return{current:null}},P2.forwardRef=function(R){return{$$typeof:d,render:R}},P2.isValidElement=U,P2.lazy=function(R){return{$$typeof:f,_payload:{_status:-1,_result:R},_init:W}},P2.memo=function(R,$){return{$$typeof:p,type:R,compare:$===void 0?null:$}},P2.startTransition=function(R){var $=P.T,e2={};P.T=e2;try{var a2=R(),A2=P.S;A2!==null&&A2(e2,a2),typeof a2=="object"&&a2!==null&&typeof a2.then=="function"&&a2.then(X,Q)}catch(k2){Q(k2)}finally{P.T=$}},P2.unstable_useCacheRefresh=function(){return P.H.useCacheRefresh()},P2.use=function(R){return P.H.use(R)},P2.useActionState=function(R,$,e2){return P.H.useActionState(R,$,e2)},P2.useCallback=function(R,$){return P.H.useCallback(R,$)},P2.useContext=function(R){return P.H.useContext(R)},P2.useDebugValue=function(){},P2.useDeferredValue=function(R,$){return P.H.useDeferredValue(R,$)},P2.useEffect=function(R,$,e2){var a2=P.H;if(typeof e2=="function")throw Error("useEffect CRUD overload is not enabled in this build of React.");return a2.useEffect(R,$)},P2.useId=function(){return P.H.useId()},P2.useImperativeHandle=function(R,$,e2){return P.H.useImperativeHandle(R,$,e2)},P2.useInsertionEffect=function(R,$){return P.H.useInsertionEffect(R,$)},P2.useLayoutEffect=function(R,$){return P.H.useLayoutEffect(R,$)},P2.useMemo=function(R,$){return P.H.useMemo(R,$)},P2.useOptimistic=function(R,$){return P.H.useOptimistic(R,$)},P2.useReducer=function(R,$,e2){return P.H.useReducer(R,$,e2)},P2.useRef=function(R){return P.H.useRef(R)},P2.useState=function(R){return P.H.useState(R)},P2.useSyncExternalStore=function(R,$,e2){return P.H.useSyncExternalStore(R,$,e2)},P2.useTransition=function(){return P.H.useTransition()},P2.version="19.1.0",P2}var YF;function hu(){return YF||(YF=1,Jl.exports=Fy()),Jl.exports}var Ql={exports:{}},L0={};/**
 * @license React
 * react-dom.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var JF;function my(){if(JF)return L0;JF=1;var t=hu();function a(F){var p="https://react.dev/errors/"+F;if(1<arguments.length){p+="?args[]="+encodeURIComponent(arguments[1]);for(var f=2;f<arguments.length;f++)p+="&args[]="+encodeURIComponent(arguments[f])}return"Minified React error #"+F+"; visit "+p+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function i(){}var r={d:{f:i,r:function(){throw Error(a(522))},D:i,C:i,L:i,m:i,X:i,S:i,M:i},p:0,findDOMNode:null},c=Symbol.for("react.portal");function l(F,p,f){var m=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:c,key:m==null?null:""+m,children:F,containerInfo:p,implementation:f}}var u=t.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function d(F,p){if(F==="font")return"";if(typeof p=="string")return p==="use-credentials"?p:""}return L0.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=r,L0.createPortal=function(F,p){var f=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!p||p.nodeType!==1&&p.nodeType!==9&&p.nodeType!==11)throw Error(a(299));return l(F,p,null,f)},L0.flushSync=function(F){var p=u.T,f=r.p;try{if(u.T=null,r.p=2,F)return F()}finally{u.T=p,r.p=f,r.d.f()}},L0.preconnect=function(F,p){typeof F=="string"&&(p?(p=p.crossOrigin,p=typeof p=="string"?p==="use-credentials"?p:"":void 0):p=null,r.d.C(F,p))},L0.prefetchDNS=function(F){typeof F=="string"&&r.d.D(F)},L0.preinit=function(F,p){if(typeof F=="string"&&p&&typeof p.as=="string"){var f=p.as,m=d(f,p.crossOrigin),C=typeof p.integrity=="string"?p.integrity:void 0,y=typeof p.fetchPriority=="string"?p.fetchPriority:void 0;f==="style"?r.d.S(F,typeof p.precedence=="string"?p.precedence:void 0,{crossOrigin:m,integrity:C,fetchPriority:y}):f==="script"&&r.d.X(F,{crossOrigin:m,integrity:C,fetchPriority:y,nonce:typeof p.nonce=="string"?p.nonce:void 0})}},L0.preinitModule=function(F,p){if(typeof F=="string")if(typeof p=="object"&&p!==null){if(p.as==null||p.as==="script"){var f=d(p.as,p.crossOrigin);r.d.M(F,{crossOrigin:f,integrity:typeof p.integrity=="string"?p.integrity:void 0,nonce:typeof p.nonce=="string"?p.nonce:void 0})}}else p==null&&r.d.M(F)},L0.preload=function(F,p){if(typeof F=="string"&&typeof p=="object"&&p!==null&&typeof p.as=="string"){var f=p.as,m=d(f,p.crossOrigin);r.d.L(F,f,{crossOrigin:m,integrity:typeof p.integrity=="string"?p.integrity:void 0,nonce:typeof p.nonce=="string"?p.nonce:void 0,type:typeof p.type=="string"?p.type:void 0,fetchPriority:typeof p.fetchPriority=="string"?p.fetchPriority:void 0,referrerPolicy:typeof p.referrerPolicy=="string"?p.referrerPolicy:void 0,imageSrcSet:typeof p.imageSrcSet=="string"?p.imageSrcSet:void 0,imageSizes:typeof p.imageSizes=="string"?p.imageSizes:void 0,media:typeof p.media=="string"?p.media:void 0})}},L0.preloadModule=function(F,p){if(typeof F=="string")if(p){var f=d(p.as,p.crossOrigin);r.d.m(F,{as:typeof p.as=="string"&&p.as!=="script"?p.as:void 0,crossOrigin:f,integrity:typeof p.integrity=="string"?p.integrity:void 0})}else r.d.m(F)},L0.requestFormReset=function(F){r.d.r(F)},L0.unstable_batchedUpdates=function(F,p){return F(p)},L0.useFormState=function(F,p,f){return u.H.useFormState(F,p,f)},L0.useFormStatus=function(){return u.H.useHostTransitionStatus()},L0.version="19.1.0",L0}var QF;function L3(){if(QF)return Ql.exports;QF=1;function t(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(t)}catch(a){console.error(a)}}return t(),Ql.exports=my(),Ql.exports}/**
 * @license React
 * react-dom-client.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var $F;function gy(){if($F)return Un;$F=1;var t=py(),a=hu(),i=L3();function r(e){var o="https://react.dev/errors/"+e;if(1<arguments.length){o+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)o+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+o+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function c(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11)}function l(e){var o=e,n=e;if(e.alternate)for(;o.return;)o=o.return;else{e=o;do o=e,(o.flags&4098)!==0&&(n=o.return),e=o.return;while(e)}return o.tag===3?n:null}function u(e){if(e.tag===13){var o=e.memoizedState;if(o===null&&(e=e.alternate,e!==null&&(o=e.memoizedState)),o!==null)return o.dehydrated}return null}function d(e){if(l(e)!==e)throw Error(r(188))}function F(e){var o=e.alternate;if(!o){if(o=l(e),o===null)throw Error(r(188));return o!==e?null:e}for(var n=e,s=o;;){var h=n.return;if(h===null)break;var A=h.alternate;if(A===null){if(s=h.return,s!==null){n=s;continue}break}if(h.child===A.child){for(A=h.child;A;){if(A===n)return d(h),e;if(A===s)return d(h),o;A=A.sibling}throw Error(r(188))}if(n.return!==s.return)n=h,s=A;else{for(var k=!1,_=h.child;_;){if(_===n){k=!0,n=h,s=A;break}if(_===s){k=!0,s=h,n=A;break}_=_.sibling}if(!k){for(_=A.child;_;){if(_===n){k=!0,n=A,s=h;break}if(_===s){k=!0,s=A,n=h;break}_=_.sibling}if(!k)throw Error(r(189))}}if(n.alternate!==s)throw Error(r(190))}if(n.tag!==3)throw Error(r(188));return n.stateNode.current===n?e:o}function p(e){var o=e.tag;if(o===5||o===26||o===27||o===6)return e;for(e=e.child;e!==null;){if(o=p(e),o!==null)return o;e=e.sibling}return null}var f=Object.assign,m=Symbol.for("react.element"),C=Symbol.for("react.transitional.element"),y=Symbol.for("react.portal"),w=Symbol.for("react.fragment"),v=Symbol.for("react.strict_mode"),D=Symbol.for("react.profiler"),B=Symbol.for("react.provider"),S=Symbol.for("react.consumer"),E=Symbol.for("react.context"),T=Symbol.for("react.forward_ref"),P=Symbol.for("react.suspense"),x=Symbol.for("react.suspense_list"),L=Symbol.for("react.memo"),z=Symbol.for("react.lazy"),U=Symbol.for("react.activity"),n2=Symbol.for("react.memo_cache_sentinel"),u2=Symbol.iterator;function s2(e){return e===null||typeof e!="object"?null:(e=u2&&e[u2]||e["@@iterator"],typeof e=="function"?e:null)}var c2=Symbol.for("react.client.reference");function G(e){if(e==null)return null;if(typeof e=="function")return e.$$typeof===c2?null:e.displayName||e.name||null;if(typeof e=="string")return e;switch(e){case w:return"Fragment";case D:return"Profiler";case v:return"StrictMode";case P:return"Suspense";case x:return"SuspenseList";case U:return"Activity"}if(typeof e=="object")switch(e.$$typeof){case y:return"Portal";case E:return(e.displayName||"Context")+".Provider";case S:return(e._context.displayName||"Context")+".Consumer";case T:var o=e.render;return e=e.displayName,e||(e=o.displayName||o.name||"",e=e!==""?"ForwardRef("+e+")":"ForwardRef"),e;case L:return o=e.displayName||null,o!==null?o:G(e.type)||"Memo";case z:o=e._payload,e=e._init;try{return G(e(o))}catch{}}return null}var d2=Array.isArray,O=a.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,W=i.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,Q={pending:!1,data:null,method:null,action:null},X=[],R=-1;function $(e){return{current:e}}function e2(e){0>R||(e.current=X[R],X[R]=null,R--)}function a2(e,o){R++,X[R]=e.current,e.current=o}var A2=$(null),k2=$(null),g2=$(null),K2=$(null);function E2(e,o){switch(a2(g2,o),a2(k2,e),a2(A2,null),o.nodeType){case 9:case 11:e=(e=o.documentElement)&&(e=e.namespaceURI)?bF(e):0;break;default:if(e=o.tagName,o=o.namespaceURI)o=bF(o),e=CF(o,e);else switch(e){case"svg":e=1;break;case"math":e=2;break;default:e=0}}e2(A2),a2(A2,e)}function I2(){e2(A2),e2(k2),e2(g2)}function V2(e){e.memoizedState!==null&&a2(K2,e);var o=A2.current,n=CF(o,e.type);o!==n&&(a2(k2,e),a2(A2,n))}function h0(e){k2.current===e&&(e2(A2),e2(k2)),K2.current===e&&(e2(K2),On._currentValue=Q)}var I0=Object.prototype.hasOwnProperty,Se=t.unstable_scheduleCallback,q0=t.unstable_cancelCallback,Ua=t.unstable_shouldYield,qa=t.unstable_requestPaint,H0=t.unstable_now,Wa=t.unstable_getCurrentPriorityLevel,et=t.unstable_ImmediatePriority,gi=t.unstable_UserBlockingPriority,zo=t.unstable_NormalPriority,tt=t.unstable_LowPriority,kt=t.unstable_IdlePriority,fi=t.log,Ga=t.unstable_setDisableYieldValue,W0=null,s0=null;function xe(e){if(typeof fi=="function"&&Ga(e),s0&&typeof s0.setStrictMode=="function")try{s0.setStrictMode(W0,e)}catch{}}var S0=Math.clz32?Math.clz32:bi,Us=Math.log,He=Math.LN2;function bi(e){return e>>>=0,e===0?32:31-(Us(e)/He|0)|0}var no=256,io=4194304;function ot(e){var o=e&42;if(o!==0)return o;switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:return 128;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return e&4194048;case 4194304:case 8388608:case 16777216:case 33554432:return e&62914560;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return e}}function ro(e,o,n){var s=e.pendingLanes;if(s===0)return 0;var h=0,A=e.suspendedLanes,k=e.pingedLanes;e=e.warmLanes;var _=s&134217727;return _!==0?(s=_&~A,s!==0?h=ot(s):(k&=_,k!==0?h=ot(k):n||(n=_&~e,n!==0&&(h=ot(n))))):(_=s&~A,_!==0?h=ot(_):k!==0?h=ot(k):n||(n=s&~e,n!==0&&(h=ot(n)))),h===0?0:o!==0&&o!==h&&(o&A)===0&&(A=h&-h,n=o&-o,A>=n||A===32&&(n&4194048)!==0)?o:h}function ze(e,o){return(e.pendingLanes&~(e.suspendedLanes&~e.pingedLanes)&o)===0}function Ci(e,o){switch(e){case 1:case 2:case 4:case 8:case 64:return o+250;case 16:case 32:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return o+5e3;case 4194304:case 8388608:case 16777216:case 33554432:return-1;case 67108864:case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function jo(){var e=no;return no<<=1,(no&4194048)===0&&(no=256),e}function yi(){var e=io;return io<<=1,(io&62914560)===0&&(io=4194304),e}function Vo(e){for(var o=[],n=0;31>n;n++)o.push(e);return o}function so(e,o){e.pendingLanes|=o,o!==268435456&&(e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0)}function vi(e,o,n,s,h,A){var k=e.pendingLanes;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0,e.expiredLanes&=n,e.entangledLanes&=n,e.errorRecoveryDisabledLanes&=n,e.shellSuspendCounter=0;var _=e.entanglements,I=e.expirationTimes,q=e.hiddenUpdates;for(n=k&~n;0<n;){var t2=31-S0(n),i2=1<<t2;_[t2]=0,I[t2]=-1;var K=q[t2];if(K!==null)for(q[t2]=null,t2=0;t2<K.length;t2++){var Z=K[t2];Z!==null&&(Z.lane&=-536870913)}n&=~i2}s!==0&&co(e,s,0),A!==0&&h===0&&e.tag!==0&&(e.suspendedLanes|=A&~(k&~o))}function co(e,o,n){e.pendingLanes|=o,e.suspendedLanes&=~o;var s=31-S0(o);e.entangledLanes|=o,e.entanglements[s]=e.entanglements[s]|1073741824|n&4194090}function lo(e,o){var n=e.entangledLanes|=o;for(e=e.entanglements;n;){var s=31-S0(n),h=1<<s;h&o|e[s]&o&&(e[s]|=o),n&=~h}}function Ka(e){switch(e){case 2:e=1;break;case 8:e=4;break;case 32:e=16;break;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:e=128;break;case 268435456:e=134217728;break;default:e=0}return e}function Za(e){return e&=-e,2<e?8<e?(e&134217727)!==0?32:268435456:8:2}function M(){var e=W.p;return e!==0?e:(e=window.event,e===void 0?32:HF(e.type))}function j(e,o){var n=W.p;try{return W.p=e,o()}finally{W.p=n}}var Y=Math.random().toString(36).slice(2),r2="__reactFiber$"+Y,h2="__reactProps$"+Y,m2="__reactContainer$"+Y,b2="__reactEvents$"+Y,f2="__reactListeners$"+Y,v2="__reactHandles$"+Y,D2="__reactResources$"+Y,w2="__reactMarker$"+Y;function C2(e){delete e[r2],delete e[h2],delete e[b2],delete e[f2],delete e[v2]}function S2(e){var o=e[r2];if(o)return o;for(var n=e.parentNode;n;){if(o=n[m2]||n[r2]){if(n=o.alternate,o.child!==null||n!==null&&n.child!==null)for(e=kF(e);e!==null;){if(n=e[r2])return n;e=kF(e)}return o}e=n,n=e.parentNode}return null}function W2(e){if(e=e[r2]||e[m2]){var o=e.tag;if(o===5||o===6||o===13||o===26||o===27||o===3)return e}return null}function u0(e){var o=e.tag;if(o===5||o===26||o===27||o===6)return e.stateNode;throw Error(r(33))}function d0(e){var o=e[D2];return o||(o=e[D2]={hoistableStyles:new Map,hoistableScripts:new Map}),o}function R2(e){e[w2]=!0}var Y2=new Set,je={};function J0(e,o){z0(e,o),z0(e+"Capture",o)}function z0(e,o){for(je[e]=o,e=0;e<o.length;e++)Y2.add(o[e])}var he=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),Uo={},Dt={};function at(e){return I0.call(Dt,e)?!0:I0.call(Uo,e)?!1:he.test(e)?Dt[e]=!0:(Uo[e]=!0,!1)}function nt(e,o,n){if(at(o))if(n===null)e.removeAttribute(o);else{switch(typeof n){case"undefined":case"function":case"symbol":e.removeAttribute(o);return;case"boolean":var s=o.toLowerCase().slice(0,5);if(s!=="data-"&&s!=="aria-"){e.removeAttribute(o);return}}e.setAttribute(o,""+n)}}function it(e,o,n){if(n===null)e.removeAttribute(o);else{switch(typeof n){case"undefined":case"function":case"symbol":case"boolean":e.removeAttribute(o);return}e.setAttribute(o,""+n)}}function N2(e,o,n,s){if(s===null)e.removeAttribute(n);else{switch(typeof s){case"undefined":case"function":case"symbol":case"boolean":e.removeAttribute(n);return}e.setAttributeNS(o,n,""+s)}}var C0,ho;function ue(e){if(C0===void 0)try{throw Error()}catch(n){var o=n.stack.trim().match(/\n( *(at )?)/);C0=o&&o[1]||"",ho=-1<n.stack.indexOf(`
    at`)?" (<anonymous>)":-1<n.stack.indexOf("@")?"@unknown:0:0":""}return`
`+C0+e+ho}var c0=!1;function Bt(e,o){if(!e||c0)return"";c0=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var s={DetermineComponentFrameRoot:function(){try{if(o){var i2=function(){throw Error()};if(Object.defineProperty(i2.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(i2,[])}catch(Z){var K=Z}Reflect.construct(e,[],i2)}else{try{i2.call()}catch(Z){K=Z}e.call(i2.prototype)}}else{try{throw Error()}catch(Z){K=Z}(i2=e())&&typeof i2.catch=="function"&&i2.catch(function(){})}}catch(Z){if(Z&&K&&typeof Z.stack=="string")return[Z.stack,K.stack]}return[null,null]}};s.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var h=Object.getOwnPropertyDescriptor(s.DetermineComponentFrameRoot,"name");h&&h.configurable&&Object.defineProperty(s.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var A=s.DetermineComponentFrameRoot(),k=A[0],_=A[1];if(k&&_){var I=k.split(`
`),q=_.split(`
`);for(h=s=0;s<I.length&&!I[s].includes("DetermineComponentFrameRoot");)s++;for(;h<q.length&&!q[h].includes("DetermineComponentFrameRoot");)h++;if(s===I.length||h===q.length)for(s=I.length-1,h=q.length-1;1<=s&&0<=h&&I[s]!==q[h];)h--;for(;1<=s&&0<=h;s--,h--)if(I[s]!==q[h]){if(s!==1||h!==1)do if(s--,h--,0>h||I[s]!==q[h]){var t2=`
`+I[s].replace(" at new "," at ");return e.displayName&&t2.includes("<anonymous>")&&(t2=t2.replace("<anonymous>",e.displayName)),t2}while(1<=s&&0<=h);break}}}finally{c0=!1,Error.prepareStackTrace=n}return(n=e?e.displayName||e.name:"")?ue(n):""}function wi(e){switch(e.tag){case 26:case 27:case 5:return ue(e.type);case 16:return ue("Lazy");case 13:return ue("Suspense");case 19:return ue("SuspenseList");case 0:case 15:return Bt(e.type,!1);case 11:return Bt(e.type.render,!1);case 1:return Bt(e.type,!0);case 31:return ue("Activity");default:return""}}function ki(e){try{var o="";do o+=wi(e),e=e.return;while(e);return o}catch(n){return`
Error generating stack: `+n.message+`
`+n.stack}}function de(e){switch(typeof e){case"bigint":case"boolean":case"number":case"string":case"undefined":return e;case"object":return e;default:return""}}function pd(e){var o=e.type;return(e=e.nodeName)&&e.toLowerCase()==="input"&&(o==="checkbox"||o==="radio")}function nC(e){var o=pd(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,o),s=""+e[o];if(!e.hasOwnProperty(o)&&typeof n<"u"&&typeof n.get=="function"&&typeof n.set=="function"){var h=n.get,A=n.set;return Object.defineProperty(e,o,{configurable:!0,get:function(){return h.call(this)},set:function(k){s=""+k,A.call(this,k)}}),Object.defineProperty(e,o,{enumerable:n.enumerable}),{getValue:function(){return s},setValue:function(k){s=""+k},stopTracking:function(){e._valueTracker=null,delete e[o]}}}}function Di(e){e._valueTracker||(e._valueTracker=nC(e))}function Fd(e){if(!e)return!1;var o=e._valueTracker;if(!o)return!0;var n=o.getValue(),s="";return e&&(s=pd(e)?e.checked?"true":"false":e.value),e=s,e!==n?(o.setValue(e),!0):!1}function Bi(e){if(e=e||(typeof document<"u"?document:void 0),typeof e>"u")return null;try{return e.activeElement||e.body}catch{return e.body}}var iC=/[\n"\\]/g;function Ae(e){return e.replace(iC,function(o){return"\\"+o.charCodeAt(0).toString(16)+" "})}function qs(e,o,n,s,h,A,k,_){e.name="",k!=null&&typeof k!="function"&&typeof k!="symbol"&&typeof k!="boolean"?e.type=k:e.removeAttribute("type"),o!=null?k==="number"?(o===0&&e.value===""||e.value!=o)&&(e.value=""+de(o)):e.value!==""+de(o)&&(e.value=""+de(o)):k!=="submit"&&k!=="reset"||e.removeAttribute("value"),o!=null?Ws(e,k,de(o)):n!=null?Ws(e,k,de(n)):s!=null&&e.removeAttribute("value"),h==null&&A!=null&&(e.defaultChecked=!!A),h!=null&&(e.checked=h&&typeof h!="function"&&typeof h!="symbol"),_!=null&&typeof _!="function"&&typeof _!="symbol"&&typeof _!="boolean"?e.name=""+de(_):e.removeAttribute("name")}function md(e,o,n,s,h,A,k,_){if(A!=null&&typeof A!="function"&&typeof A!="symbol"&&typeof A!="boolean"&&(e.type=A),o!=null||n!=null){if(!(A!=="submit"&&A!=="reset"||o!=null))return;n=n!=null?""+de(n):"",o=o!=null?""+de(o):n,_||o===e.value||(e.value=o),e.defaultValue=o}s=s??h,s=typeof s!="function"&&typeof s!="symbol"&&!!s,e.checked=_?e.checked:!!s,e.defaultChecked=!!s,k!=null&&typeof k!="function"&&typeof k!="symbol"&&typeof k!="boolean"&&(e.name=k)}function Ws(e,o,n){o==="number"&&Bi(e.ownerDocument)===e||e.defaultValue===""+n||(e.defaultValue=""+n)}function qo(e,o,n,s){if(e=e.options,o){o={};for(var h=0;h<n.length;h++)o["$"+n[h]]=!0;for(n=0;n<e.length;n++)h=o.hasOwnProperty("$"+e[n].value),e[n].selected!==h&&(e[n].selected=h),h&&s&&(e[n].defaultSelected=!0)}else{for(n=""+de(n),o=null,h=0;h<e.length;h++){if(e[h].value===n){e[h].selected=!0,s&&(e[h].defaultSelected=!0);return}o!==null||e[h].disabled||(o=e[h])}o!==null&&(o.selected=!0)}}function gd(e,o,n){if(o!=null&&(o=""+de(o),o!==e.value&&(e.value=o),n==null)){e.defaultValue!==o&&(e.defaultValue=o);return}e.defaultValue=n!=null?""+de(n):""}function fd(e,o,n,s){if(o==null){if(s!=null){if(n!=null)throw Error(r(92));if(d2(s)){if(1<s.length)throw Error(r(93));s=s[0]}n=s}n==null&&(n=""),o=n}n=de(o),e.defaultValue=n,s=e.textContent,s===n&&s!==""&&s!==null&&(e.value=s)}function Wo(e,o){if(o){var n=e.firstChild;if(n&&n===e.lastChild&&n.nodeType===3){n.nodeValue=o;return}}e.textContent=o}var rC=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));function bd(e,o,n){var s=o.indexOf("--")===0;n==null||typeof n=="boolean"||n===""?s?e.setProperty(o,""):o==="float"?e.cssFloat="":e[o]="":s?e.setProperty(o,n):typeof n!="number"||n===0||rC.has(o)?o==="float"?e.cssFloat=n:e[o]=(""+n).trim():e[o]=n+"px"}function Cd(e,o,n){if(o!=null&&typeof o!="object")throw Error(r(62));if(e=e.style,n!=null){for(var s in n)!n.hasOwnProperty(s)||o!=null&&o.hasOwnProperty(s)||(s.indexOf("--")===0?e.setProperty(s,""):s==="float"?e.cssFloat="":e[s]="");for(var h in o)s=o[h],o.hasOwnProperty(h)&&n[h]!==s&&bd(e,h,s)}else for(var A in o)o.hasOwnProperty(A)&&bd(e,A,o[A])}function Gs(e){if(e.indexOf("-")===-1)return!1;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var sC=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),cC=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;function Ei(e){return cC.test(""+e)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":e}var Ks=null;function Zs(e){return e=e.target||e.srcElement||window,e.correspondingUseElement&&(e=e.correspondingUseElement),e.nodeType===3?e.parentNode:e}var Go=null,Ko=null;function yd(e){var o=W2(e);if(o&&(e=o.stateNode)){var n=e[h2]||null;e:switch(e=o.stateNode,o.type){case"input":if(qs(e,n.value,n.defaultValue,n.defaultValue,n.checked,n.defaultChecked,n.type,n.name),o=n.name,n.type==="radio"&&o!=null){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll('input[name="'+Ae(""+o)+'"][type="radio"]'),o=0;o<n.length;o++){var s=n[o];if(s!==e&&s.form===e.form){var h=s[h2]||null;if(!h)throw Error(r(90));qs(s,h.value,h.defaultValue,h.defaultValue,h.checked,h.defaultChecked,h.type,h.name)}}for(o=0;o<n.length;o++)s=n[o],s.form===e.form&&Fd(s)}break e;case"textarea":gd(e,n.value,n.defaultValue);break e;case"select":o=n.value,o!=null&&qo(e,!!n.multiple,o,!1)}}}var Xs=!1;function vd(e,o,n){if(Xs)return e(o,n);Xs=!0;try{var s=e(o);return s}finally{if(Xs=!1,(Go!==null||Ko!==null)&&(dr(),Go&&(o=Go,e=Ko,Ko=Go=null,yd(o),e)))for(o=0;o<e.length;o++)yd(e[o])}}function Xa(e,o){var n=e.stateNode;if(n===null)return null;var s=n[h2]||null;if(s===null)return null;n=s[o];e:switch(o){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(s=!s.disabled)||(e=e.type,s=!(e==="button"||e==="input"||e==="select"||e==="textarea")),e=!s;break e;default:e=!1}if(e)return null;if(n&&typeof n!="function")throw Error(r(231,o,typeof n));return n}var rt=!(typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"),Ys=!1;if(rt)try{var Ya={};Object.defineProperty(Ya,"passive",{get:function(){Ys=!0}}),window.addEventListener("test",Ya,Ya),window.removeEventListener("test",Ya,Ya)}catch{Ys=!1}var Et=null,Js=null,_i=null;function wd(){if(_i)return _i;var e,o=Js,n=o.length,s,h="value"in Et?Et.value:Et.textContent,A=h.length;for(e=0;e<n&&o[e]===h[e];e++);var k=n-e;for(s=1;s<=k&&o[n-s]===h[A-s];s++);return _i=h.slice(e,1<s?1-s:void 0)}function Si(e){var o=e.keyCode;return"charCode"in e?(e=e.charCode,e===0&&o===13&&(e=13)):e=o,e===10&&(e=13),32<=e||e===13?e:0}function xi(){return!0}function kd(){return!1}function G0(e){function o(n,s,h,A,k){this._reactName=n,this._targetInst=h,this.type=s,this.nativeEvent=A,this.target=k,this.currentTarget=null;for(var _ in e)e.hasOwnProperty(_)&&(n=e[_],this[_]=n?n(A):A[_]);return this.isDefaultPrevented=(A.defaultPrevented!=null?A.defaultPrevented:A.returnValue===!1)?xi:kd,this.isPropagationStopped=kd,this}return f(o.prototype,{preventDefault:function(){this.defaultPrevented=!0;var n=this.nativeEvent;n&&(n.preventDefault?n.preventDefault():typeof n.returnValue!="unknown"&&(n.returnValue=!1),this.isDefaultPrevented=xi)},stopPropagation:function(){var n=this.nativeEvent;n&&(n.stopPropagation?n.stopPropagation():typeof n.cancelBubble!="unknown"&&(n.cancelBubble=!0),this.isPropagationStopped=xi)},persist:function(){},isPersistent:xi}),o}var uo={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Ti=G0(uo),Ja=f({},uo,{view:0,detail:0}),lC=G0(Ja),Qs,$s,Qa,Ri=f({},Ja,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:tc,button:0,buttons:0,relatedTarget:function(e){return e.relatedTarget===void 0?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Qa&&(Qa&&e.type==="mousemove"?(Qs=e.screenX-Qa.screenX,$s=e.screenY-Qa.screenY):$s=Qs=0,Qa=e),Qs)},movementY:function(e){return"movementY"in e?e.movementY:$s}}),Dd=G0(Ri),hC=f({},Ri,{dataTransfer:0}),uC=G0(hC),dC=f({},Ja,{relatedTarget:0}),ec=G0(dC),AC=f({},uo,{animationName:0,elapsedTime:0,pseudoElement:0}),pC=G0(AC),FC=f({},uo,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),mC=G0(FC),gC=f({},uo,{data:0}),Bd=G0(gC),fC={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},bC={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},CC={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function yC(e){var o=this.nativeEvent;return o.getModifierState?o.getModifierState(e):(e=CC[e])?!!o[e]:!1}function tc(){return yC}var vC=f({},Ja,{key:function(e){if(e.key){var o=fC[e.key]||e.key;if(o!=="Unidentified")return o}return e.type==="keypress"?(e=Si(e),e===13?"Enter":String.fromCharCode(e)):e.type==="keydown"||e.type==="keyup"?bC[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:tc,charCode:function(e){return e.type==="keypress"?Si(e):0},keyCode:function(e){return e.type==="keydown"||e.type==="keyup"?e.keyCode:0},which:function(e){return e.type==="keypress"?Si(e):e.type==="keydown"||e.type==="keyup"?e.keyCode:0}}),wC=G0(vC),kC=f({},Ri,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Ed=G0(kC),DC=f({},Ja,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:tc}),BC=G0(DC),EC=f({},uo,{propertyName:0,elapsedTime:0,pseudoElement:0}),_C=G0(EC),SC=f({},Ri,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),xC=G0(SC),TC=f({},uo,{newState:0,oldState:0}),RC=G0(TC),PC=[9,13,27,32],oc=rt&&"CompositionEvent"in window,$a=null;rt&&"documentMode"in document&&($a=document.documentMode);var IC=rt&&"TextEvent"in window&&!$a,_d=rt&&(!oc||$a&&8<$a&&11>=$a),Sd=" ",xd=!1;function Td(e,o){switch(e){case"keyup":return PC.indexOf(o.keyCode)!==-1;case"keydown":return o.keyCode!==229;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Rd(e){return e=e.detail,typeof e=="object"&&"data"in e?e.data:null}var Zo=!1;function MC(e,o){switch(e){case"compositionend":return Rd(o);case"keypress":return o.which!==32?null:(xd=!0,Sd);case"textInput":return e=o.data,e===Sd&&xd?null:e;default:return null}}function LC(e,o){if(Zo)return e==="compositionend"||!oc&&Td(e,o)?(e=wd(),_i=Js=Et=null,Zo=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(o.ctrlKey||o.altKey||o.metaKey)||o.ctrlKey&&o.altKey){if(o.char&&1<o.char.length)return o.char;if(o.which)return String.fromCharCode(o.which)}return null;case"compositionend":return _d&&o.locale!=="ko"?null:o.data;default:return null}}var OC={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Pd(e){var o=e&&e.nodeName&&e.nodeName.toLowerCase();return o==="input"?!!OC[e.type]:o==="textarea"}function Id(e,o,n,s){Go?Ko?Ko.push(s):Ko=[s]:Go=s,o=fr(o,"onChange"),0<o.length&&(n=new Ti("onChange","change",null,n,s),e.push({event:n,listeners:o}))}var en=null,tn=null;function NC(e){pF(e,0)}function Pi(e){var o=u0(e);if(Fd(o))return e}function Md(e,o){if(e==="change")return o}var Ld=!1;if(rt){var ac;if(rt){var nc="oninput"in document;if(!nc){var Od=document.createElement("div");Od.setAttribute("oninput","return;"),nc=typeof Od.oninput=="function"}ac=nc}else ac=!1;Ld=ac&&(!document.documentMode||9<document.documentMode)}function Nd(){en&&(en.detachEvent("onpropertychange",Hd),tn=en=null)}function Hd(e){if(e.propertyName==="value"&&Pi(tn)){var o=[];Id(o,tn,e,Zs(e)),vd(NC,o)}}function HC(e,o,n){e==="focusin"?(Nd(),en=o,tn=n,en.attachEvent("onpropertychange",Hd)):e==="focusout"&&Nd()}function zC(e){if(e==="selectionchange"||e==="keyup"||e==="keydown")return Pi(tn)}function jC(e,o){if(e==="click")return Pi(o)}function VC(e,o){if(e==="input"||e==="change")return Pi(o)}function UC(e,o){return e===o&&(e!==0||1/e===1/o)||e!==e&&o!==o}var Q0=typeof Object.is=="function"?Object.is:UC;function on(e,o){if(Q0(e,o))return!0;if(typeof e!="object"||e===null||typeof o!="object"||o===null)return!1;var n=Object.keys(e),s=Object.keys(o);if(n.length!==s.length)return!1;for(s=0;s<n.length;s++){var h=n[s];if(!I0.call(o,h)||!Q0(e[h],o[h]))return!1}return!0}function zd(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function jd(e,o){var n=zd(e);e=0;for(var s;n;){if(n.nodeType===3){if(s=e+n.textContent.length,e<=o&&s>=o)return{node:n,offset:o-e};e=s}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=zd(n)}}function Vd(e,o){return e&&o?e===o?!0:e&&e.nodeType===3?!1:o&&o.nodeType===3?Vd(e,o.parentNode):"contains"in e?e.contains(o):e.compareDocumentPosition?!!(e.compareDocumentPosition(o)&16):!1:!1}function Ud(e){e=e!=null&&e.ownerDocument!=null&&e.ownerDocument.defaultView!=null?e.ownerDocument.defaultView:window;for(var o=Bi(e.document);o instanceof e.HTMLIFrameElement;){try{var n=typeof o.contentWindow.location.href=="string"}catch{n=!1}if(n)e=o.contentWindow;else break;o=Bi(e.document)}return o}function ic(e){var o=e&&e.nodeName&&e.nodeName.toLowerCase();return o&&(o==="input"&&(e.type==="text"||e.type==="search"||e.type==="tel"||e.type==="url"||e.type==="password")||o==="textarea"||e.contentEditable==="true")}var qC=rt&&"documentMode"in document&&11>=document.documentMode,Xo=null,rc=null,an=null,sc=!1;function qd(e,o,n){var s=n.window===n?n.document:n.nodeType===9?n:n.ownerDocument;sc||Xo==null||Xo!==Bi(s)||(s=Xo,"selectionStart"in s&&ic(s)?s={start:s.selectionStart,end:s.selectionEnd}:(s=(s.ownerDocument&&s.ownerDocument.defaultView||window).getSelection(),s={anchorNode:s.anchorNode,anchorOffset:s.anchorOffset,focusNode:s.focusNode,focusOffset:s.focusOffset}),an&&on(an,s)||(an=s,s=fr(rc,"onSelect"),0<s.length&&(o=new Ti("onSelect","select",null,o,n),e.push({event:o,listeners:s}),o.target=Xo)))}function Ao(e,o){var n={};return n[e.toLowerCase()]=o.toLowerCase(),n["Webkit"+e]="webkit"+o,n["Moz"+e]="moz"+o,n}var Yo={animationend:Ao("Animation","AnimationEnd"),animationiteration:Ao("Animation","AnimationIteration"),animationstart:Ao("Animation","AnimationStart"),transitionrun:Ao("Transition","TransitionRun"),transitionstart:Ao("Transition","TransitionStart"),transitioncancel:Ao("Transition","TransitionCancel"),transitionend:Ao("Transition","TransitionEnd")},cc={},Wd={};rt&&(Wd=document.createElement("div").style,"AnimationEvent"in window||(delete Yo.animationend.animation,delete Yo.animationiteration.animation,delete Yo.animationstart.animation),"TransitionEvent"in window||delete Yo.transitionend.transition);function po(e){if(cc[e])return cc[e];if(!Yo[e])return e;var o=Yo[e],n;for(n in o)if(o.hasOwnProperty(n)&&n in Wd)return cc[e]=o[n];return e}var Gd=po("animationend"),Kd=po("animationiteration"),Zd=po("animationstart"),WC=po("transitionrun"),GC=po("transitionstart"),KC=po("transitioncancel"),Xd=po("transitionend"),Yd=new Map,lc="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");lc.push("scrollEnd");function Te(e,o){Yd.set(e,o),J0(o,[e])}var Jd=new WeakMap;function pe(e,o){if(typeof e=="object"&&e!==null){var n=Jd.get(e);return n!==void 0?n:(o={value:e,source:o,stack:ki(o)},Jd.set(e,o),o)}return{value:e,source:o,stack:ki(o)}}var Fe=[],Jo=0,hc=0;function Ii(){for(var e=Jo,o=hc=Jo=0;o<e;){var n=Fe[o];Fe[o++]=null;var s=Fe[o];Fe[o++]=null;var h=Fe[o];Fe[o++]=null;var A=Fe[o];if(Fe[o++]=null,s!==null&&h!==null){var k=s.pending;k===null?h.next=h:(h.next=k.next,k.next=h),s.pending=h}A!==0&&Qd(n,h,A)}}function Mi(e,o,n,s){Fe[Jo++]=e,Fe[Jo++]=o,Fe[Jo++]=n,Fe[Jo++]=s,hc|=s,e.lanes|=s,e=e.alternate,e!==null&&(e.lanes|=s)}function uc(e,o,n,s){return Mi(e,o,n,s),Li(e)}function Qo(e,o){return Mi(e,null,null,o),Li(e)}function Qd(e,o,n){e.lanes|=n;var s=e.alternate;s!==null&&(s.lanes|=n);for(var h=!1,A=e.return;A!==null;)A.childLanes|=n,s=A.alternate,s!==null&&(s.childLanes|=n),A.tag===22&&(e=A.stateNode,e===null||e._visibility&1||(h=!0)),e=A,A=A.return;return e.tag===3?(A=e.stateNode,h&&o!==null&&(h=31-S0(n),e=A.hiddenUpdates,s=e[h],s===null?e[h]=[o]:s.push(o),o.lane=n|536870912),A):null}function Li(e){if(50<Sn)throw Sn=0,gl=null,Error(r(185));for(var o=e.return;o!==null;)e=o,o=e.return;return e.tag===3?e.stateNode:null}var $o={};function ZC(e,o,n,s){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=o,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=s,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function $0(e,o,n,s){return new ZC(e,o,n,s)}function dc(e){return e=e.prototype,!(!e||!e.isReactComponent)}function st(e,o){var n=e.alternate;return n===null?(n=$0(e.tag,o,e.key,e.mode),n.elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=o,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=e.flags&65011712,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,o=e.dependencies,n.dependencies=o===null?null:{lanes:o.lanes,firstContext:o.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n.refCleanup=e.refCleanup,n}function $d(e,o){e.flags&=65011714;var n=e.alternate;return n===null?(e.childLanes=0,e.lanes=o,e.child=null,e.subtreeFlags=0,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null):(e.childLanes=n.childLanes,e.lanes=n.lanes,e.child=n.child,e.subtreeFlags=0,e.deletions=null,e.memoizedProps=n.memoizedProps,e.memoizedState=n.memoizedState,e.updateQueue=n.updateQueue,e.type=n.type,o=n.dependencies,e.dependencies=o===null?null:{lanes:o.lanes,firstContext:o.firstContext}),e}function Oi(e,o,n,s,h,A){var k=0;if(s=e,typeof e=="function")dc(e)&&(k=1);else if(typeof e=="string")k=Y6(e,n,A2.current)?26:e==="html"||e==="head"||e==="body"?27:5;else e:switch(e){case U:return e=$0(31,n,o,h),e.elementType=U,e.lanes=A,e;case w:return Fo(n.children,h,A,o);case v:k=8,h|=24;break;case D:return e=$0(12,n,o,h|2),e.elementType=D,e.lanes=A,e;case P:return e=$0(13,n,o,h),e.elementType=P,e.lanes=A,e;case x:return e=$0(19,n,o,h),e.elementType=x,e.lanes=A,e;default:if(typeof e=="object"&&e!==null)switch(e.$$typeof){case B:case E:k=10;break e;case S:k=9;break e;case T:k=11;break e;case L:k=14;break e;case z:k=16,s=null;break e}k=29,n=Error(r(130,e===null?"null":typeof e,"")),s=null}return o=$0(k,n,o,h),o.elementType=e,o.type=s,o.lanes=A,o}function Fo(e,o,n,s){return e=$0(7,e,s,o),e.lanes=n,e}function Ac(e,o,n){return e=$0(6,e,null,o),e.lanes=n,e}function pc(e,o,n){return o=$0(4,e.children!==null?e.children:[],e.key,o),o.lanes=n,o.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},o}var ea=[],ta=0,Ni=null,Hi=0,me=[],ge=0,mo=null,ct=1,lt="";function go(e,o){ea[ta++]=Hi,ea[ta++]=Ni,Ni=e,Hi=o}function eA(e,o,n){me[ge++]=ct,me[ge++]=lt,me[ge++]=mo,mo=e;var s=ct;e=lt;var h=32-S0(s)-1;s&=~(1<<h),n+=1;var A=32-S0(o)+h;if(30<A){var k=h-h%5;A=(s&(1<<k)-1).toString(32),s>>=k,h-=k,ct=1<<32-S0(o)+h|n<<h|s,lt=A+e}else ct=1<<A|n<<h|s,lt=e}function Fc(e){e.return!==null&&(go(e,1),eA(e,1,0))}function mc(e){for(;e===Ni;)Ni=ea[--ta],ea[ta]=null,Hi=ea[--ta],ea[ta]=null;for(;e===mo;)mo=me[--ge],me[ge]=null,lt=me[--ge],me[ge]=null,ct=me[--ge],me[ge]=null}var j0=null,A0=null,G2=!1,fo=null,Ve=!1,gc=Error(r(519));function bo(e){var o=Error(r(418,""));throw sn(pe(o,e)),gc}function tA(e){var o=e.stateNode,n=e.type,s=e.memoizedProps;switch(o[r2]=e,o[h2]=s,n){case"dialog":j2("cancel",o),j2("close",o);break;case"iframe":case"object":case"embed":j2("load",o);break;case"video":case"audio":for(n=0;n<Tn.length;n++)j2(Tn[n],o);break;case"source":j2("error",o);break;case"img":case"image":case"link":j2("error",o),j2("load",o);break;case"details":j2("toggle",o);break;case"input":j2("invalid",o),md(o,s.value,s.defaultValue,s.checked,s.defaultChecked,s.type,s.name,!0),Di(o);break;case"select":j2("invalid",o);break;case"textarea":j2("invalid",o),fd(o,s.value,s.defaultValue,s.children),Di(o)}n=s.children,typeof n!="string"&&typeof n!="number"&&typeof n!="bigint"||o.textContent===""+n||s.suppressHydrationWarning===!0||fF(o.textContent,n)?(s.popover!=null&&(j2("beforetoggle",o),j2("toggle",o)),s.onScroll!=null&&j2("scroll",o),s.onScrollEnd!=null&&j2("scrollend",o),s.onClick!=null&&(o.onclick=br),o=!0):o=!1,o||bo(e)}function oA(e){for(j0=e.return;j0;)switch(j0.tag){case 5:case 13:Ve=!1;return;case 27:case 3:Ve=!0;return;default:j0=j0.return}}function nn(e){if(e!==j0)return!1;if(!G2)return oA(e),G2=!0,!1;var o=e.tag,n;if((n=o!==3&&o!==27)&&((n=o===5)&&(n=e.type,n=!(n!=="form"&&n!=="button")||Pl(e.type,e.memoizedProps)),n=!n),n&&A0&&bo(e),oA(e),o===13){if(e=e.memoizedState,e=e!==null?e.dehydrated:null,!e)throw Error(r(317));e:{for(e=e.nextSibling,o=0;e;){if(e.nodeType===8)if(n=e.data,n==="/$"){if(o===0){A0=Pe(e.nextSibling);break e}o--}else n!=="$"&&n!=="$!"&&n!=="$?"||o++;e=e.nextSibling}A0=null}}else o===27?(o=A0,Ut(e.type)?(e=Ol,Ol=null,A0=e):A0=o):A0=j0?Pe(e.stateNode.nextSibling):null;return!0}function rn(){A0=j0=null,G2=!1}function aA(){var e=fo;return e!==null&&(X0===null?X0=e:X0.push.apply(X0,e),fo=null),e}function sn(e){fo===null?fo=[e]:fo.push(e)}var fc=$(null),Co=null,ht=null;function _t(e,o,n){a2(fc,o._currentValue),o._currentValue=n}function ut(e){e._currentValue=fc.current,e2(fc)}function bc(e,o,n){for(;e!==null;){var s=e.alternate;if((e.childLanes&o)!==o?(e.childLanes|=o,s!==null&&(s.childLanes|=o)):s!==null&&(s.childLanes&o)!==o&&(s.childLanes|=o),e===n)break;e=e.return}}function Cc(e,o,n,s){var h=e.child;for(h!==null&&(h.return=e);h!==null;){var A=h.dependencies;if(A!==null){var k=h.child;A=A.firstContext;e:for(;A!==null;){var _=A;A=h;for(var I=0;I<o.length;I++)if(_.context===o[I]){A.lanes|=n,_=A.alternate,_!==null&&(_.lanes|=n),bc(A.return,n,e),s||(k=null);break e}A=_.next}}else if(h.tag===18){if(k=h.return,k===null)throw Error(r(341));k.lanes|=n,A=k.alternate,A!==null&&(A.lanes|=n),bc(k,n,e),k=null}else k=h.child;if(k!==null)k.return=h;else for(k=h;k!==null;){if(k===e){k=null;break}if(h=k.sibling,h!==null){h.return=k.return,k=h;break}k=k.return}h=k}}function cn(e,o,n,s){e=null;for(var h=o,A=!1;h!==null;){if(!A){if((h.flags&524288)!==0)A=!0;else if((h.flags&262144)!==0)break}if(h.tag===10){var k=h.alternate;if(k===null)throw Error(r(387));if(k=k.memoizedProps,k!==null){var _=h.type;Q0(h.pendingProps.value,k.value)||(e!==null?e.push(_):e=[_])}}else if(h===K2.current){if(k=h.alternate,k===null)throw Error(r(387));k.memoizedState.memoizedState!==h.memoizedState.memoizedState&&(e!==null?e.push(On):e=[On])}h=h.return}e!==null&&Cc(o,e,n,s),o.flags|=262144}function zi(e){for(e=e.firstContext;e!==null;){if(!Q0(e.context._currentValue,e.memoizedValue))return!0;e=e.next}return!1}function yo(e){Co=e,ht=null,e=e.dependencies,e!==null&&(e.firstContext=null)}function M0(e){return nA(Co,e)}function ji(e,o){return Co===null&&yo(e),nA(e,o)}function nA(e,o){var n=o._currentValue;if(o={context:o,memoizedValue:n,next:null},ht===null){if(e===null)throw Error(r(308));ht=o,e.dependencies={lanes:0,firstContext:o},e.flags|=524288}else ht=ht.next=o;return n}var XC=typeof AbortController<"u"?AbortController:function(){var e=[],o=this.signal={aborted:!1,addEventListener:function(n,s){e.push(s)}};this.abort=function(){o.aborted=!0,e.forEach(function(n){return n()})}},YC=t.unstable_scheduleCallback,JC=t.unstable_NormalPriority,w0={$$typeof:E,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function yc(){return{controller:new XC,data:new Map,refCount:0}}function ln(e){e.refCount--,e.refCount===0&&YC(JC,function(){e.controller.abort()})}var hn=null,vc=0,oa=0,aa=null;function QC(e,o){if(hn===null){var n=hn=[];vc=0,oa=kl(),aa={status:"pending",value:void 0,then:function(s){n.push(s)}}}return vc++,o.then(iA,iA),o}function iA(){if(--vc===0&&hn!==null){aa!==null&&(aa.status="fulfilled");var e=hn;hn=null,oa=0,aa=null;for(var o=0;o<e.length;o++)(0,e[o])()}}function $C(e,o){var n=[],s={status:"pending",value:null,reason:null,then:function(h){n.push(h)}};return e.then(function(){s.status="fulfilled",s.value=o;for(var h=0;h<n.length;h++)(0,n[h])(o)},function(h){for(s.status="rejected",s.reason=h,h=0;h<n.length;h++)(0,n[h])(void 0)}),s}var rA=O.S;O.S=function(e,o){typeof o=="object"&&o!==null&&typeof o.then=="function"&&QC(e,o),rA!==null&&rA(e,o)};var vo=$(null);function wc(){var e=vo.current;return e!==null?e:t0.pooledCache}function Vi(e,o){o===null?a2(vo,vo.current):a2(vo,o.pool)}function sA(){var e=wc();return e===null?null:{parent:w0._currentValue,pool:e}}var un=Error(r(460)),cA=Error(r(474)),Ui=Error(r(542)),kc={then:function(){}};function lA(e){return e=e.status,e==="fulfilled"||e==="rejected"}function qi(){}function hA(e,o,n){switch(n=e[n],n===void 0?e.push(o):n!==o&&(o.then(qi,qi),o=n),o.status){case"fulfilled":return o.value;case"rejected":throw e=o.reason,dA(e),e;default:if(typeof o.status=="string")o.then(qi,qi);else{if(e=t0,e!==null&&100<e.shellSuspendCounter)throw Error(r(482));e=o,e.status="pending",e.then(function(s){if(o.status==="pending"){var h=o;h.status="fulfilled",h.value=s}},function(s){if(o.status==="pending"){var h=o;h.status="rejected",h.reason=s}})}switch(o.status){case"fulfilled":return o.value;case"rejected":throw e=o.reason,dA(e),e}throw dn=o,un}}var dn=null;function uA(){if(dn===null)throw Error(r(459));var e=dn;return dn=null,e}function dA(e){if(e===un||e===Ui)throw Error(r(483))}var St=!1;function Dc(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function Bc(e,o){e=e.updateQueue,o.updateQueue===e&&(o.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,callbacks:null})}function xt(e){return{lane:e,tag:0,payload:null,callback:null,next:null}}function Tt(e,o,n){var s=e.updateQueue;if(s===null)return null;if(s=s.shared,(Z2&2)!==0){var h=s.pending;return h===null?o.next=o:(o.next=h.next,h.next=o),s.pending=o,o=Li(e),Qd(e,null,n),o}return Mi(e,s,o,n),Li(e)}function An(e,o,n){if(o=o.updateQueue,o!==null&&(o=o.shared,(n&4194048)!==0)){var s=o.lanes;s&=e.pendingLanes,n|=s,o.lanes=n,lo(e,n)}}function Ec(e,o){var n=e.updateQueue,s=e.alternate;if(s!==null&&(s=s.updateQueue,n===s)){var h=null,A=null;if(n=n.firstBaseUpdate,n!==null){do{var k={lane:n.lane,tag:n.tag,payload:n.payload,callback:null,next:null};A===null?h=A=k:A=A.next=k,n=n.next}while(n!==null);A===null?h=A=o:A=A.next=o}else h=A=o;n={baseState:s.baseState,firstBaseUpdate:h,lastBaseUpdate:A,shared:s.shared,callbacks:s.callbacks},e.updateQueue=n;return}e=n.lastBaseUpdate,e===null?n.firstBaseUpdate=o:e.next=o,n.lastBaseUpdate=o}var _c=!1;function pn(){if(_c){var e=aa;if(e!==null)throw e}}function Fn(e,o,n,s){_c=!1;var h=e.updateQueue;St=!1;var A=h.firstBaseUpdate,k=h.lastBaseUpdate,_=h.shared.pending;if(_!==null){h.shared.pending=null;var I=_,q=I.next;I.next=null,k===null?A=q:k.next=q,k=I;var t2=e.alternate;t2!==null&&(t2=t2.updateQueue,_=t2.lastBaseUpdate,_!==k&&(_===null?t2.firstBaseUpdate=q:_.next=q,t2.lastBaseUpdate=I))}if(A!==null){var i2=h.baseState;k=0,t2=q=I=null,_=A;do{var K=_.lane&-536870913,Z=K!==_.lane;if(Z?(U2&K)===K:(s&K)===K){K!==0&&K===oa&&(_c=!0),t2!==null&&(t2=t2.next={lane:0,tag:_.tag,payload:_.payload,callback:null,next:null});e:{var x2=e,B2=_;K=o;var $2=n;switch(B2.tag){case 1:if(x2=B2.payload,typeof x2=="function"){i2=x2.call($2,i2,K);break e}i2=x2;break e;case 3:x2.flags=x2.flags&-65537|128;case 0:if(x2=B2.payload,K=typeof x2=="function"?x2.call($2,i2,K):x2,K==null)break e;i2=f({},i2,K);break e;case 2:St=!0}}K=_.callback,K!==null&&(e.flags|=64,Z&&(e.flags|=8192),Z=h.callbacks,Z===null?h.callbacks=[K]:Z.push(K))}else Z={lane:K,tag:_.tag,payload:_.payload,callback:_.callback,next:null},t2===null?(q=t2=Z,I=i2):t2=t2.next=Z,k|=K;if(_=_.next,_===null){if(_=h.shared.pending,_===null)break;Z=_,_=Z.next,Z.next=null,h.lastBaseUpdate=Z,h.shared.pending=null}}while(!0);t2===null&&(I=i2),h.baseState=I,h.firstBaseUpdate=q,h.lastBaseUpdate=t2,A===null&&(h.shared.lanes=0),Ht|=k,e.lanes=k,e.memoizedState=i2}}function AA(e,o){if(typeof e!="function")throw Error(r(191,e));e.call(o)}function pA(e,o){var n=e.callbacks;if(n!==null)for(e.callbacks=null,e=0;e<n.length;e++)AA(n[e],o)}var na=$(null),Wi=$(0);function FA(e,o){e=ft,a2(Wi,e),a2(na,o),ft=e|o.baseLanes}function Sc(){a2(Wi,ft),a2(na,na.current)}function xc(){ft=Wi.current,e2(na),e2(Wi)}var Rt=0,M2=null,J2=null,y0=null,Gi=!1,ia=!1,wo=!1,Ki=0,mn=0,ra=null,e6=0;function g0(){throw Error(r(321))}function Tc(e,o){if(o===null)return!1;for(var n=0;n<o.length&&n<e.length;n++)if(!Q0(e[n],o[n]))return!1;return!0}function Rc(e,o,n,s,h,A){return Rt=A,M2=o,o.memoizedState=null,o.updateQueue=null,o.lanes=0,O.H=e===null||e.memoizedState===null?QA:$A,wo=!1,A=n(s,h),wo=!1,ia&&(A=gA(o,n,s,h)),mA(e),A}function mA(e){O.H=$i;var o=J2!==null&&J2.next!==null;if(Rt=0,y0=J2=M2=null,Gi=!1,mn=0,ra=null,o)throw Error(r(300));e===null||D0||(e=e.dependencies,e!==null&&zi(e)&&(D0=!0))}function gA(e,o,n,s){M2=e;var h=0;do{if(ia&&(ra=null),mn=0,ia=!1,25<=h)throw Error(r(301));if(h+=1,y0=J2=null,e.updateQueue!=null){var A=e.updateQueue;A.lastEffect=null,A.events=null,A.stores=null,A.memoCache!=null&&(A.memoCache.index=0)}O.H=s6,A=o(n,s)}while(ia);return A}function t6(){var e=O.H,o=e.useState()[0];return o=typeof o.then=="function"?gn(o):o,e=e.useState()[0],(J2!==null?J2.memoizedState:null)!==e&&(M2.flags|=1024),o}function Pc(){var e=Ki!==0;return Ki=0,e}function Ic(e,o,n){o.updateQueue=e.updateQueue,o.flags&=-2053,e.lanes&=~n}function Mc(e){if(Gi){for(e=e.memoizedState;e!==null;){var o=e.queue;o!==null&&(o.pending=null),e=e.next}Gi=!1}Rt=0,y0=J2=M2=null,ia=!1,mn=Ki=0,ra=null}function K0(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return y0===null?M2.memoizedState=y0=e:y0=y0.next=e,y0}function v0(){if(J2===null){var e=M2.alternate;e=e!==null?e.memoizedState:null}else e=J2.next;var o=y0===null?M2.memoizedState:y0.next;if(o!==null)y0=o,J2=e;else{if(e===null)throw M2.alternate===null?Error(r(467)):Error(r(310));J2=e,e={memoizedState:J2.memoizedState,baseState:J2.baseState,baseQueue:J2.baseQueue,queue:J2.queue,next:null},y0===null?M2.memoizedState=y0=e:y0=y0.next=e}return y0}function Lc(){return{lastEffect:null,events:null,stores:null,memoCache:null}}function gn(e){var o=mn;return mn+=1,ra===null&&(ra=[]),e=hA(ra,e,o),o=M2,(y0===null?o.memoizedState:y0.next)===null&&(o=o.alternate,O.H=o===null||o.memoizedState===null?QA:$A),e}function Zi(e){if(e!==null&&typeof e=="object"){if(typeof e.then=="function")return gn(e);if(e.$$typeof===E)return M0(e)}throw Error(r(438,String(e)))}function Oc(e){var o=null,n=M2.updateQueue;if(n!==null&&(o=n.memoCache),o==null){var s=M2.alternate;s!==null&&(s=s.updateQueue,s!==null&&(s=s.memoCache,s!=null&&(o={data:s.data.map(function(h){return h.slice()}),index:0})))}if(o==null&&(o={data:[],index:0}),n===null&&(n=Lc(),M2.updateQueue=n),n.memoCache=o,n=o.data[o.index],n===void 0)for(n=o.data[o.index]=Array(e),s=0;s<e;s++)n[s]=n2;return o.index++,n}function dt(e,o){return typeof o=="function"?o(e):o}function Xi(e){var o=v0();return Nc(o,J2,e)}function Nc(e,o,n){var s=e.queue;if(s===null)throw Error(r(311));s.lastRenderedReducer=n;var h=e.baseQueue,A=s.pending;if(A!==null){if(h!==null){var k=h.next;h.next=A.next,A.next=k}o.baseQueue=h=A,s.pending=null}if(A=e.baseState,h===null)e.memoizedState=A;else{o=h.next;var _=k=null,I=null,q=o,t2=!1;do{var i2=q.lane&-536870913;if(i2!==q.lane?(U2&i2)===i2:(Rt&i2)===i2){var K=q.revertLane;if(K===0)I!==null&&(I=I.next={lane:0,revertLane:0,action:q.action,hasEagerState:q.hasEagerState,eagerState:q.eagerState,next:null}),i2===oa&&(t2=!0);else if((Rt&K)===K){q=q.next,K===oa&&(t2=!0);continue}else i2={lane:0,revertLane:q.revertLane,action:q.action,hasEagerState:q.hasEagerState,eagerState:q.eagerState,next:null},I===null?(_=I=i2,k=A):I=I.next=i2,M2.lanes|=K,Ht|=K;i2=q.action,wo&&n(A,i2),A=q.hasEagerState?q.eagerState:n(A,i2)}else K={lane:i2,revertLane:q.revertLane,action:q.action,hasEagerState:q.hasEagerState,eagerState:q.eagerState,next:null},I===null?(_=I=K,k=A):I=I.next=K,M2.lanes|=i2,Ht|=i2;q=q.next}while(q!==null&&q!==o);if(I===null?k=A:I.next=_,!Q0(A,e.memoizedState)&&(D0=!0,t2&&(n=aa,n!==null)))throw n;e.memoizedState=A,e.baseState=k,e.baseQueue=I,s.lastRenderedState=A}return h===null&&(s.lanes=0),[e.memoizedState,s.dispatch]}function Hc(e){var o=v0(),n=o.queue;if(n===null)throw Error(r(311));n.lastRenderedReducer=e;var s=n.dispatch,h=n.pending,A=o.memoizedState;if(h!==null){n.pending=null;var k=h=h.next;do A=e(A,k.action),k=k.next;while(k!==h);Q0(A,o.memoizedState)||(D0=!0),o.memoizedState=A,o.baseQueue===null&&(o.baseState=A),n.lastRenderedState=A}return[A,s]}function fA(e,o,n){var s=M2,h=v0(),A=G2;if(A){if(n===void 0)throw Error(r(407));n=n()}else n=o();var k=!Q0((J2||h).memoizedState,n);k&&(h.memoizedState=n,D0=!0),h=h.queue;var _=yA.bind(null,s,h,e);if(fn(2048,8,_,[e]),h.getSnapshot!==o||k||y0!==null&&y0.memoizedState.tag&1){if(s.flags|=2048,sa(9,Yi(),CA.bind(null,s,h,n,o),null),t0===null)throw Error(r(349));A||(Rt&124)!==0||bA(s,o,n)}return n}function bA(e,o,n){e.flags|=16384,e={getSnapshot:o,value:n},o=M2.updateQueue,o===null?(o=Lc(),M2.updateQueue=o,o.stores=[e]):(n=o.stores,n===null?o.stores=[e]:n.push(e))}function CA(e,o,n,s){o.value=n,o.getSnapshot=s,vA(o)&&wA(e)}function yA(e,o,n){return n(function(){vA(o)&&wA(e)})}function vA(e){var o=e.getSnapshot;e=e.value;try{var n=o();return!Q0(e,n)}catch{return!0}}function wA(e){var o=Qo(e,2);o!==null&&ne(o,e,2)}function zc(e){var o=K0();if(typeof e=="function"){var n=e;if(e=n(),wo){xe(!0);try{n()}finally{xe(!1)}}}return o.memoizedState=o.baseState=e,o.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:dt,lastRenderedState:e},o}function kA(e,o,n,s){return e.baseState=n,Nc(e,J2,typeof s=="function"?s:dt)}function o6(e,o,n,s,h){if(Qi(e))throw Error(r(485));if(e=o.action,e!==null){var A={payload:h,action:e,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(k){A.listeners.push(k)}};O.T!==null?n(!0):A.isTransition=!1,s(A),n=o.pending,n===null?(A.next=o.pending=A,DA(o,A)):(A.next=n.next,o.pending=n.next=A)}}function DA(e,o){var n=o.action,s=o.payload,h=e.state;if(o.isTransition){var A=O.T,k={};O.T=k;try{var _=n(h,s),I=O.S;I!==null&&I(k,_),BA(e,o,_)}catch(q){jc(e,o,q)}finally{O.T=A}}else try{A=n(h,s),BA(e,o,A)}catch(q){jc(e,o,q)}}function BA(e,o,n){n!==null&&typeof n=="object"&&typeof n.then=="function"?n.then(function(s){EA(e,o,s)},function(s){return jc(e,o,s)}):EA(e,o,n)}function EA(e,o,n){o.status="fulfilled",o.value=n,_A(o),e.state=n,o=e.pending,o!==null&&(n=o.next,n===o?e.pending=null:(n=n.next,o.next=n,DA(e,n)))}function jc(e,o,n){var s=e.pending;if(e.pending=null,s!==null){s=s.next;do o.status="rejected",o.reason=n,_A(o),o=o.next;while(o!==s)}e.action=null}function _A(e){e=e.listeners;for(var o=0;o<e.length;o++)(0,e[o])()}function SA(e,o){return o}function xA(e,o){if(G2){var n=t0.formState;if(n!==null){e:{var s=M2;if(G2){if(A0){t:{for(var h=A0,A=Ve;h.nodeType!==8;){if(!A){h=null;break t}if(h=Pe(h.nextSibling),h===null){h=null;break t}}A=h.data,h=A==="F!"||A==="F"?h:null}if(h){A0=Pe(h.nextSibling),s=h.data==="F!";break e}}bo(s)}s=!1}s&&(o=n[0])}}return n=K0(),n.memoizedState=n.baseState=o,s={pending:null,lanes:0,dispatch:null,lastRenderedReducer:SA,lastRenderedState:o},n.queue=s,n=XA.bind(null,M2,s),s.dispatch=n,s=zc(!1),A=Gc.bind(null,M2,!1,s.queue),s=K0(),h={state:o,dispatch:null,action:e,pending:null},s.queue=h,n=o6.bind(null,M2,h,A,n),h.dispatch=n,s.memoizedState=e,[o,n,!1]}function TA(e){var o=v0();return RA(o,J2,e)}function RA(e,o,n){if(o=Nc(e,o,SA)[0],e=Xi(dt)[0],typeof o=="object"&&o!==null&&typeof o.then=="function")try{var s=gn(o)}catch(k){throw k===un?Ui:k}else s=o;o=v0();var h=o.queue,A=h.dispatch;return n!==o.memoizedState&&(M2.flags|=2048,sa(9,Yi(),a6.bind(null,h,n),null)),[s,A,e]}function a6(e,o){e.action=o}function PA(e){var o=v0(),n=J2;if(n!==null)return RA(o,n,e);v0(),o=o.memoizedState,n=v0();var s=n.queue.dispatch;return n.memoizedState=e,[o,s,!1]}function sa(e,o,n,s){return e={tag:e,create:n,deps:s,inst:o,next:null},o=M2.updateQueue,o===null&&(o=Lc(),M2.updateQueue=o),n=o.lastEffect,n===null?o.lastEffect=e.next=e:(s=n.next,n.next=e,e.next=s,o.lastEffect=e),e}function Yi(){return{destroy:void 0,resource:void 0}}function IA(){return v0().memoizedState}function Ji(e,o,n,s){var h=K0();s=s===void 0?null:s,M2.flags|=e,h.memoizedState=sa(1|o,Yi(),n,s)}function fn(e,o,n,s){var h=v0();s=s===void 0?null:s;var A=h.memoizedState.inst;J2!==null&&s!==null&&Tc(s,J2.memoizedState.deps)?h.memoizedState=sa(o,A,n,s):(M2.flags|=e,h.memoizedState=sa(1|o,A,n,s))}function MA(e,o){Ji(8390656,8,e,o)}function LA(e,o){fn(2048,8,e,o)}function OA(e,o){return fn(4,2,e,o)}function NA(e,o){return fn(4,4,e,o)}function HA(e,o){if(typeof o=="function"){e=e();var n=o(e);return function(){typeof n=="function"?n():o(null)}}if(o!=null)return e=e(),o.current=e,function(){o.current=null}}function zA(e,o,n){n=n!=null?n.concat([e]):null,fn(4,4,HA.bind(null,o,e),n)}function Vc(){}function jA(e,o){var n=v0();o=o===void 0?null:o;var s=n.memoizedState;return o!==null&&Tc(o,s[1])?s[0]:(n.memoizedState=[e,o],e)}function VA(e,o){var n=v0();o=o===void 0?null:o;var s=n.memoizedState;if(o!==null&&Tc(o,s[1]))return s[0];if(s=e(),wo){xe(!0);try{e()}finally{xe(!1)}}return n.memoizedState=[s,o],s}function Uc(e,o,n){return n===void 0||(Rt&1073741824)!==0?e.memoizedState=o:(e.memoizedState=n,e=Wp(),M2.lanes|=e,Ht|=e,n)}function UA(e,o,n,s){return Q0(n,o)?n:na.current!==null?(e=Uc(e,n,s),Q0(e,o)||(D0=!0),e):(Rt&42)===0?(D0=!0,e.memoizedState=n):(e=Wp(),M2.lanes|=e,Ht|=e,o)}function qA(e,o,n,s,h){var A=W.p;W.p=A!==0&&8>A?A:8;var k=O.T,_={};O.T=_,Gc(e,!1,o,n);try{var I=h(),q=O.S;if(q!==null&&q(_,I),I!==null&&typeof I=="object"&&typeof I.then=="function"){var t2=$C(I,s);bn(e,o,t2,ae(e))}else bn(e,o,s,ae(e))}catch(i2){bn(e,o,{then:function(){},status:"rejected",reason:i2},ae())}finally{W.p=A,O.T=k}}function n6(){}function qc(e,o,n,s){if(e.tag!==5)throw Error(r(476));var h=WA(e).queue;qA(e,h,o,Q,n===null?n6:function(){return GA(e),n(s)})}function WA(e){var o=e.memoizedState;if(o!==null)return o;o={memoizedState:Q,baseState:Q,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:dt,lastRenderedState:Q},next:null};var n={};return o.next={memoizedState:n,baseState:n,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:dt,lastRenderedState:n},next:null},e.memoizedState=o,e=e.alternate,e!==null&&(e.memoizedState=o),o}function GA(e){var o=WA(e).next.queue;bn(e,o,{},ae())}function Wc(){return M0(On)}function KA(){return v0().memoizedState}function ZA(){return v0().memoizedState}function i6(e){for(var o=e.return;o!==null;){switch(o.tag){case 24:case 3:var n=ae();e=xt(n);var s=Tt(o,e,n);s!==null&&(ne(s,o,n),An(s,o,n)),o={cache:yc()},e.payload=o;return}o=o.return}}function r6(e,o,n){var s=ae();n={lane:s,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null},Qi(e)?YA(o,n):(n=uc(e,o,n,s),n!==null&&(ne(n,e,s),JA(n,o,s)))}function XA(e,o,n){var s=ae();bn(e,o,n,s)}function bn(e,o,n,s){var h={lane:s,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null};if(Qi(e))YA(o,h);else{var A=e.alternate;if(e.lanes===0&&(A===null||A.lanes===0)&&(A=o.lastRenderedReducer,A!==null))try{var k=o.lastRenderedState,_=A(k,n);if(h.hasEagerState=!0,h.eagerState=_,Q0(_,k))return Mi(e,o,h,0),t0===null&&Ii(),!1}catch{}finally{}if(n=uc(e,o,h,s),n!==null)return ne(n,e,s),JA(n,o,s),!0}return!1}function Gc(e,o,n,s){if(s={lane:2,revertLane:kl(),action:s,hasEagerState:!1,eagerState:null,next:null},Qi(e)){if(o)throw Error(r(479))}else o=uc(e,n,s,2),o!==null&&ne(o,e,2)}function Qi(e){var o=e.alternate;return e===M2||o!==null&&o===M2}function YA(e,o){ia=Gi=!0;var n=e.pending;n===null?o.next=o:(o.next=n.next,n.next=o),e.pending=o}function JA(e,o,n){if((n&4194048)!==0){var s=o.lanes;s&=e.pendingLanes,n|=s,o.lanes=n,lo(e,n)}}var $i={readContext:M0,use:Zi,useCallback:g0,useContext:g0,useEffect:g0,useImperativeHandle:g0,useLayoutEffect:g0,useInsertionEffect:g0,useMemo:g0,useReducer:g0,useRef:g0,useState:g0,useDebugValue:g0,useDeferredValue:g0,useTransition:g0,useSyncExternalStore:g0,useId:g0,useHostTransitionStatus:g0,useFormState:g0,useActionState:g0,useOptimistic:g0,useMemoCache:g0,useCacheRefresh:g0},QA={readContext:M0,use:Zi,useCallback:function(e,o){return K0().memoizedState=[e,o===void 0?null:o],e},useContext:M0,useEffect:MA,useImperativeHandle:function(e,o,n){n=n!=null?n.concat([e]):null,Ji(4194308,4,HA.bind(null,o,e),n)},useLayoutEffect:function(e,o){return Ji(4194308,4,e,o)},useInsertionEffect:function(e,o){Ji(4,2,e,o)},useMemo:function(e,o){var n=K0();o=o===void 0?null:o;var s=e();if(wo){xe(!0);try{e()}finally{xe(!1)}}return n.memoizedState=[s,o],s},useReducer:function(e,o,n){var s=K0();if(n!==void 0){var h=n(o);if(wo){xe(!0);try{n(o)}finally{xe(!1)}}}else h=o;return s.memoizedState=s.baseState=h,e={pending:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:h},s.queue=e,e=e.dispatch=r6.bind(null,M2,e),[s.memoizedState,e]},useRef:function(e){var o=K0();return e={current:e},o.memoizedState=e},useState:function(e){e=zc(e);var o=e.queue,n=XA.bind(null,M2,o);return o.dispatch=n,[e.memoizedState,n]},useDebugValue:Vc,useDeferredValue:function(e,o){var n=K0();return Uc(n,e,o)},useTransition:function(){var e=zc(!1);return e=qA.bind(null,M2,e.queue,!0,!1),K0().memoizedState=e,[!1,e]},useSyncExternalStore:function(e,o,n){var s=M2,h=K0();if(G2){if(n===void 0)throw Error(r(407));n=n()}else{if(n=o(),t0===null)throw Error(r(349));(U2&124)!==0||bA(s,o,n)}h.memoizedState=n;var A={value:n,getSnapshot:o};return h.queue=A,MA(yA.bind(null,s,A,e),[e]),s.flags|=2048,sa(9,Yi(),CA.bind(null,s,A,n,o),null),n},useId:function(){var e=K0(),o=t0.identifierPrefix;if(G2){var n=lt,s=ct;n=(s&~(1<<32-S0(s)-1)).toString(32)+n,o="«"+o+"R"+n,n=Ki++,0<n&&(o+="H"+n.toString(32)),o+="»"}else n=e6++,o="«"+o+"r"+n.toString(32)+"»";return e.memoizedState=o},useHostTransitionStatus:Wc,useFormState:xA,useActionState:xA,useOptimistic:function(e){var o=K0();o.memoizedState=o.baseState=e;var n={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return o.queue=n,o=Gc.bind(null,M2,!0,n),n.dispatch=o,[e,o]},useMemoCache:Oc,useCacheRefresh:function(){return K0().memoizedState=i6.bind(null,M2)}},$A={readContext:M0,use:Zi,useCallback:jA,useContext:M0,useEffect:LA,useImperativeHandle:zA,useInsertionEffect:OA,useLayoutEffect:NA,useMemo:VA,useReducer:Xi,useRef:IA,useState:function(){return Xi(dt)},useDebugValue:Vc,useDeferredValue:function(e,o){var n=v0();return UA(n,J2.memoizedState,e,o)},useTransition:function(){var e=Xi(dt)[0],o=v0().memoizedState;return[typeof e=="boolean"?e:gn(e),o]},useSyncExternalStore:fA,useId:KA,useHostTransitionStatus:Wc,useFormState:TA,useActionState:TA,useOptimistic:function(e,o){var n=v0();return kA(n,J2,e,o)},useMemoCache:Oc,useCacheRefresh:ZA},s6={readContext:M0,use:Zi,useCallback:jA,useContext:M0,useEffect:LA,useImperativeHandle:zA,useInsertionEffect:OA,useLayoutEffect:NA,useMemo:VA,useReducer:Hc,useRef:IA,useState:function(){return Hc(dt)},useDebugValue:Vc,useDeferredValue:function(e,o){var n=v0();return J2===null?Uc(n,e,o):UA(n,J2.memoizedState,e,o)},useTransition:function(){var e=Hc(dt)[0],o=v0().memoizedState;return[typeof e=="boolean"?e:gn(e),o]},useSyncExternalStore:fA,useId:KA,useHostTransitionStatus:Wc,useFormState:PA,useActionState:PA,useOptimistic:function(e,o){var n=v0();return J2!==null?kA(n,J2,e,o):(n.baseState=e,[e,n.queue.dispatch])},useMemoCache:Oc,useCacheRefresh:ZA},ca=null,Cn=0;function er(e){var o=Cn;return Cn+=1,ca===null&&(ca=[]),hA(ca,e,o)}function yn(e,o){o=o.props.ref,e.ref=o!==void 0?o:null}function tr(e,o){throw o.$$typeof===m?Error(r(525)):(e=Object.prototype.toString.call(o),Error(r(31,e==="[object Object]"?"object with keys {"+Object.keys(o).join(", ")+"}":e)))}function ep(e){var o=e._init;return o(e._payload)}function tp(e){function o(H,N){if(e){var V=H.deletions;V===null?(H.deletions=[N],H.flags|=16):V.push(N)}}function n(H,N){if(!e)return null;for(;N!==null;)o(H,N),N=N.sibling;return null}function s(H){for(var N=new Map;H!==null;)H.key!==null?N.set(H.key,H):N.set(H.index,H),H=H.sibling;return N}function h(H,N){return H=st(H,N),H.index=0,H.sibling=null,H}function A(H,N,V){return H.index=V,e?(V=H.alternate,V!==null?(V=V.index,V<N?(H.flags|=67108866,N):V):(H.flags|=67108866,N)):(H.flags|=1048576,N)}function k(H){return e&&H.alternate===null&&(H.flags|=67108866),H}function _(H,N,V,o2){return N===null||N.tag!==6?(N=Ac(V,H.mode,o2),N.return=H,N):(N=h(N,V),N.return=H,N)}function I(H,N,V,o2){var p2=V.type;return p2===w?t2(H,N,V.props.children,o2,V.key):N!==null&&(N.elementType===p2||typeof p2=="object"&&p2!==null&&p2.$$typeof===z&&ep(p2)===N.type)?(N=h(N,V.props),yn(N,V),N.return=H,N):(N=Oi(V.type,V.key,V.props,null,H.mode,o2),yn(N,V),N.return=H,N)}function q(H,N,V,o2){return N===null||N.tag!==4||N.stateNode.containerInfo!==V.containerInfo||N.stateNode.implementation!==V.implementation?(N=pc(V,H.mode,o2),N.return=H,N):(N=h(N,V.children||[]),N.return=H,N)}function t2(H,N,V,o2,p2){return N===null||N.tag!==7?(N=Fo(V,H.mode,o2,p2),N.return=H,N):(N=h(N,V),N.return=H,N)}function i2(H,N,V){if(typeof N=="string"&&N!==""||typeof N=="number"||typeof N=="bigint")return N=Ac(""+N,H.mode,V),N.return=H,N;if(typeof N=="object"&&N!==null){switch(N.$$typeof){case C:return V=Oi(N.type,N.key,N.props,null,H.mode,V),yn(V,N),V.return=H,V;case y:return N=pc(N,H.mode,V),N.return=H,N;case z:var o2=N._init;return N=o2(N._payload),i2(H,N,V)}if(d2(N)||s2(N))return N=Fo(N,H.mode,V,null),N.return=H,N;if(typeof N.then=="function")return i2(H,er(N),V);if(N.$$typeof===E)return i2(H,ji(H,N),V);tr(H,N)}return null}function K(H,N,V,o2){var p2=N!==null?N.key:null;if(typeof V=="string"&&V!==""||typeof V=="number"||typeof V=="bigint")return p2!==null?null:_(H,N,""+V,o2);if(typeof V=="object"&&V!==null){switch(V.$$typeof){case C:return V.key===p2?I(H,N,V,o2):null;case y:return V.key===p2?q(H,N,V,o2):null;case z:return p2=V._init,V=p2(V._payload),K(H,N,V,o2)}if(d2(V)||s2(V))return p2!==null?null:t2(H,N,V,o2,null);if(typeof V.then=="function")return K(H,N,er(V),o2);if(V.$$typeof===E)return K(H,N,ji(H,V),o2);tr(H,V)}return null}function Z(H,N,V,o2,p2){if(typeof o2=="string"&&o2!==""||typeof o2=="number"||typeof o2=="bigint")return H=H.get(V)||null,_(N,H,""+o2,p2);if(typeof o2=="object"&&o2!==null){switch(o2.$$typeof){case C:return H=H.get(o2.key===null?V:o2.key)||null,I(N,H,o2,p2);case y:return H=H.get(o2.key===null?V:o2.key)||null,q(N,H,o2,p2);case z:var H2=o2._init;return o2=H2(o2._payload),Z(H,N,V,o2,p2)}if(d2(o2)||s2(o2))return H=H.get(V)||null,t2(N,H,o2,p2,null);if(typeof o2.then=="function")return Z(H,N,V,er(o2),p2);if(o2.$$typeof===E)return Z(H,N,V,ji(N,o2),p2);tr(N,o2)}return null}function x2(H,N,V,o2){for(var p2=null,H2=null,y2=N,_2=N=0,E0=null;y2!==null&&_2<V.length;_2++){y2.index>_2?(E0=y2,y2=null):E0=y2.sibling;var q2=K(H,y2,V[_2],o2);if(q2===null){y2===null&&(y2=E0);break}e&&y2&&q2.alternate===null&&o(H,y2),N=A(q2,N,_2),H2===null?p2=q2:H2.sibling=q2,H2=q2,y2=E0}if(_2===V.length)return n(H,y2),G2&&go(H,_2),p2;if(y2===null){for(;_2<V.length;_2++)y2=i2(H,V[_2],o2),y2!==null&&(N=A(y2,N,_2),H2===null?p2=y2:H2.sibling=y2,H2=y2);return G2&&go(H,_2),p2}for(y2=s(y2);_2<V.length;_2++)E0=Z(y2,H,_2,V[_2],o2),E0!==null&&(e&&E0.alternate!==null&&y2.delete(E0.key===null?_2:E0.key),N=A(E0,N,_2),H2===null?p2=E0:H2.sibling=E0,H2=E0);return e&&y2.forEach(function(Zt){return o(H,Zt)}),G2&&go(H,_2),p2}function B2(H,N,V,o2){if(V==null)throw Error(r(151));for(var p2=null,H2=null,y2=N,_2=N=0,E0=null,q2=V.next();y2!==null&&!q2.done;_2++,q2=V.next()){y2.index>_2?(E0=y2,y2=null):E0=y2.sibling;var Zt=K(H,y2,q2.value,o2);if(Zt===null){y2===null&&(y2=E0);break}e&&y2&&Zt.alternate===null&&o(H,y2),N=A(Zt,N,_2),H2===null?p2=Zt:H2.sibling=Zt,H2=Zt,y2=E0}if(q2.done)return n(H,y2),G2&&go(H,_2),p2;if(y2===null){for(;!q2.done;_2++,q2=V.next())q2=i2(H,q2.value,o2),q2!==null&&(N=A(q2,N,_2),H2===null?p2=q2:H2.sibling=q2,H2=q2);return G2&&go(H,_2),p2}for(y2=s(y2);!q2.done;_2++,q2=V.next())q2=Z(y2,H,_2,q2.value,o2),q2!==null&&(e&&q2.alternate!==null&&y2.delete(q2.key===null?_2:q2.key),N=A(q2,N,_2),H2===null?p2=q2:H2.sibling=q2,H2=q2);return e&&y2.forEach(function(cy){return o(H,cy)}),G2&&go(H,_2),p2}function $2(H,N,V,o2){if(typeof V=="object"&&V!==null&&V.type===w&&V.key===null&&(V=V.props.children),typeof V=="object"&&V!==null){switch(V.$$typeof){case C:e:{for(var p2=V.key;N!==null;){if(N.key===p2){if(p2=V.type,p2===w){if(N.tag===7){n(H,N.sibling),o2=h(N,V.props.children),o2.return=H,H=o2;break e}}else if(N.elementType===p2||typeof p2=="object"&&p2!==null&&p2.$$typeof===z&&ep(p2)===N.type){n(H,N.sibling),o2=h(N,V.props),yn(o2,V),o2.return=H,H=o2;break e}n(H,N);break}else o(H,N);N=N.sibling}V.type===w?(o2=Fo(V.props.children,H.mode,o2,V.key),o2.return=H,H=o2):(o2=Oi(V.type,V.key,V.props,null,H.mode,o2),yn(o2,V),o2.return=H,H=o2)}return k(H);case y:e:{for(p2=V.key;N!==null;){if(N.key===p2)if(N.tag===4&&N.stateNode.containerInfo===V.containerInfo&&N.stateNode.implementation===V.implementation){n(H,N.sibling),o2=h(N,V.children||[]),o2.return=H,H=o2;break e}else{n(H,N);break}else o(H,N);N=N.sibling}o2=pc(V,H.mode,o2),o2.return=H,H=o2}return k(H);case z:return p2=V._init,V=p2(V._payload),$2(H,N,V,o2)}if(d2(V))return x2(H,N,V,o2);if(s2(V)){if(p2=s2(V),typeof p2!="function")throw Error(r(150));return V=p2.call(V),B2(H,N,V,o2)}if(typeof V.then=="function")return $2(H,N,er(V),o2);if(V.$$typeof===E)return $2(H,N,ji(H,V),o2);tr(H,V)}return typeof V=="string"&&V!==""||typeof V=="number"||typeof V=="bigint"?(V=""+V,N!==null&&N.tag===6?(n(H,N.sibling),o2=h(N,V),o2.return=H,H=o2):(n(H,N),o2=Ac(V,H.mode,o2),o2.return=H,H=o2),k(H)):n(H,N)}return function(H,N,V,o2){try{Cn=0;var p2=$2(H,N,V,o2);return ca=null,p2}catch(y2){if(y2===un||y2===Ui)throw y2;var H2=$0(29,y2,null,H.mode);return H2.lanes=o2,H2.return=H,H2}finally{}}}var la=tp(!0),op=tp(!1),fe=$(null),Ue=null;function Pt(e){var o=e.alternate;a2(k0,k0.current&1),a2(fe,e),Ue===null&&(o===null||na.current!==null||o.memoizedState!==null)&&(Ue=e)}function ap(e){if(e.tag===22){if(a2(k0,k0.current),a2(fe,e),Ue===null){var o=e.alternate;o!==null&&o.memoizedState!==null&&(Ue=e)}}else It()}function It(){a2(k0,k0.current),a2(fe,fe.current)}function At(e){e2(fe),Ue===e&&(Ue=null),e2(k0)}var k0=$(0);function or(e){for(var o=e;o!==null;){if(o.tag===13){var n=o.memoizedState;if(n!==null&&(n=n.dehydrated,n===null||n.data==="$?"||Ll(n)))return o}else if(o.tag===19&&o.memoizedProps.revealOrder!==void 0){if((o.flags&128)!==0)return o}else if(o.child!==null){o.child.return=o,o=o.child;continue}if(o===e)break;for(;o.sibling===null;){if(o.return===null||o.return===e)return null;o=o.return}o.sibling.return=o.return,o=o.sibling}return null}function Kc(e,o,n,s){o=e.memoizedState,n=n(s,o),n=n==null?o:f({},o,n),e.memoizedState=n,e.lanes===0&&(e.updateQueue.baseState=n)}var Zc={enqueueSetState:function(e,o,n){e=e._reactInternals;var s=ae(),h=xt(s);h.payload=o,n!=null&&(h.callback=n),o=Tt(e,h,s),o!==null&&(ne(o,e,s),An(o,e,s))},enqueueReplaceState:function(e,o,n){e=e._reactInternals;var s=ae(),h=xt(s);h.tag=1,h.payload=o,n!=null&&(h.callback=n),o=Tt(e,h,s),o!==null&&(ne(o,e,s),An(o,e,s))},enqueueForceUpdate:function(e,o){e=e._reactInternals;var n=ae(),s=xt(n);s.tag=2,o!=null&&(s.callback=o),o=Tt(e,s,n),o!==null&&(ne(o,e,n),An(o,e,n))}};function np(e,o,n,s,h,A,k){return e=e.stateNode,typeof e.shouldComponentUpdate=="function"?e.shouldComponentUpdate(s,A,k):o.prototype&&o.prototype.isPureReactComponent?!on(n,s)||!on(h,A):!0}function ip(e,o,n,s){e=o.state,typeof o.componentWillReceiveProps=="function"&&o.componentWillReceiveProps(n,s),typeof o.UNSAFE_componentWillReceiveProps=="function"&&o.UNSAFE_componentWillReceiveProps(n,s),o.state!==e&&Zc.enqueueReplaceState(o,o.state,null)}function ko(e,o){var n=o;if("ref"in o){n={};for(var s in o)s!=="ref"&&(n[s]=o[s])}if(e=e.defaultProps){n===o&&(n=f({},n));for(var h in e)n[h]===void 0&&(n[h]=e[h])}return n}var ar=typeof reportError=="function"?reportError:function(e){if(typeof window=="object"&&typeof window.ErrorEvent=="function"){var o=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:typeof e=="object"&&e!==null&&typeof e.message=="string"?String(e.message):String(e),error:e});if(!window.dispatchEvent(o))return}else if(typeof process=="object"&&typeof process.emit=="function"){process.emit("uncaughtException",e);return}console.error(e)};function rp(e){ar(e)}function sp(e){console.error(e)}function cp(e){ar(e)}function nr(e,o){try{var n=e.onUncaughtError;n(o.value,{componentStack:o.stack})}catch(s){setTimeout(function(){throw s})}}function lp(e,o,n){try{var s=e.onCaughtError;s(n.value,{componentStack:n.stack,errorBoundary:o.tag===1?o.stateNode:null})}catch(h){setTimeout(function(){throw h})}}function Xc(e,o,n){return n=xt(n),n.tag=3,n.payload={element:null},n.callback=function(){nr(e,o)},n}function hp(e){return e=xt(e),e.tag=3,e}function up(e,o,n,s){var h=n.type.getDerivedStateFromError;if(typeof h=="function"){var A=s.value;e.payload=function(){return h(A)},e.callback=function(){lp(o,n,s)}}var k=n.stateNode;k!==null&&typeof k.componentDidCatch=="function"&&(e.callback=function(){lp(o,n,s),typeof h!="function"&&(zt===null?zt=new Set([this]):zt.add(this));var _=s.stack;this.componentDidCatch(s.value,{componentStack:_!==null?_:""})})}function c6(e,o,n,s,h){if(n.flags|=32768,s!==null&&typeof s=="object"&&typeof s.then=="function"){if(o=n.alternate,o!==null&&cn(o,n,h,!0),n=fe.current,n!==null){switch(n.tag){case 13:return Ue===null?bl():n.alternate===null&&p0===0&&(p0=3),n.flags&=-257,n.flags|=65536,n.lanes=h,s===kc?n.flags|=16384:(o=n.updateQueue,o===null?n.updateQueue=new Set([s]):o.add(s),yl(e,s,h)),!1;case 22:return n.flags|=65536,s===kc?n.flags|=16384:(o=n.updateQueue,o===null?(o={transitions:null,markerInstances:null,retryQueue:new Set([s])},n.updateQueue=o):(n=o.retryQueue,n===null?o.retryQueue=new Set([s]):n.add(s)),yl(e,s,h)),!1}throw Error(r(435,n.tag))}return yl(e,s,h),bl(),!1}if(G2)return o=fe.current,o!==null?((o.flags&65536)===0&&(o.flags|=256),o.flags|=65536,o.lanes=h,s!==gc&&(e=Error(r(422),{cause:s}),sn(pe(e,n)))):(s!==gc&&(o=Error(r(423),{cause:s}),sn(pe(o,n))),e=e.current.alternate,e.flags|=65536,h&=-h,e.lanes|=h,s=pe(s,n),h=Xc(e.stateNode,s,h),Ec(e,h),p0!==4&&(p0=2)),!1;var A=Error(r(520),{cause:s});if(A=pe(A,n),_n===null?_n=[A]:_n.push(A),p0!==4&&(p0=2),o===null)return!0;s=pe(s,n),n=o;do{switch(n.tag){case 3:return n.flags|=65536,e=h&-h,n.lanes|=e,e=Xc(n.stateNode,s,e),Ec(n,e),!1;case 1:if(o=n.type,A=n.stateNode,(n.flags&128)===0&&(typeof o.getDerivedStateFromError=="function"||A!==null&&typeof A.componentDidCatch=="function"&&(zt===null||!zt.has(A))))return n.flags|=65536,h&=-h,n.lanes|=h,h=hp(h),up(h,e,n,s),Ec(n,h),!1}n=n.return}while(n!==null);return!1}var dp=Error(r(461)),D0=!1;function x0(e,o,n,s){o.child=e===null?op(o,null,n,s):la(o,e.child,n,s)}function Ap(e,o,n,s,h){n=n.render;var A=o.ref;if("ref"in s){var k={};for(var _ in s)_!=="ref"&&(k[_]=s[_])}else k=s;return yo(o),s=Rc(e,o,n,k,A,h),_=Pc(),e!==null&&!D0?(Ic(e,o,h),pt(e,o,h)):(G2&&_&&Fc(o),o.flags|=1,x0(e,o,s,h),o.child)}function pp(e,o,n,s,h){if(e===null){var A=n.type;return typeof A=="function"&&!dc(A)&&A.defaultProps===void 0&&n.compare===null?(o.tag=15,o.type=A,Fp(e,o,A,s,h)):(e=Oi(n.type,null,s,o,o.mode,h),e.ref=o.ref,e.return=o,o.child=e)}if(A=e.child,!al(e,h)){var k=A.memoizedProps;if(n=n.compare,n=n!==null?n:on,n(k,s)&&e.ref===o.ref)return pt(e,o,h)}return o.flags|=1,e=st(A,s),e.ref=o.ref,e.return=o,o.child=e}function Fp(e,o,n,s,h){if(e!==null){var A=e.memoizedProps;if(on(A,s)&&e.ref===o.ref)if(D0=!1,o.pendingProps=s=A,al(e,h))(e.flags&131072)!==0&&(D0=!0);else return o.lanes=e.lanes,pt(e,o,h)}return Yc(e,o,n,s,h)}function mp(e,o,n){var s=o.pendingProps,h=s.children,A=e!==null?e.memoizedState:null;if(s.mode==="hidden"){if((o.flags&128)!==0){if(s=A!==null?A.baseLanes|n:n,e!==null){for(h=o.child=e.child,A=0;h!==null;)A=A|h.lanes|h.childLanes,h=h.sibling;o.childLanes=A&~s}else o.childLanes=0,o.child=null;return gp(e,o,s,n)}if((n&536870912)!==0)o.memoizedState={baseLanes:0,cachePool:null},e!==null&&Vi(o,A!==null?A.cachePool:null),A!==null?FA(o,A):Sc(),ap(o);else return o.lanes=o.childLanes=536870912,gp(e,o,A!==null?A.baseLanes|n:n,n)}else A!==null?(Vi(o,A.cachePool),FA(o,A),It(),o.memoizedState=null):(e!==null&&Vi(o,null),Sc(),It());return x0(e,o,h,n),o.child}function gp(e,o,n,s){var h=wc();return h=h===null?null:{parent:w0._currentValue,pool:h},o.memoizedState={baseLanes:n,cachePool:h},e!==null&&Vi(o,null),Sc(),ap(o),e!==null&&cn(e,o,s,!0),null}function ir(e,o){var n=o.ref;if(n===null)e!==null&&e.ref!==null&&(o.flags|=4194816);else{if(typeof n!="function"&&typeof n!="object")throw Error(r(284));(e===null||e.ref!==n)&&(o.flags|=4194816)}}function Yc(e,o,n,s,h){return yo(o),n=Rc(e,o,n,s,void 0,h),s=Pc(),e!==null&&!D0?(Ic(e,o,h),pt(e,o,h)):(G2&&s&&Fc(o),o.flags|=1,x0(e,o,n,h),o.child)}function fp(e,o,n,s,h,A){return yo(o),o.updateQueue=null,n=gA(o,s,n,h),mA(e),s=Pc(),e!==null&&!D0?(Ic(e,o,A),pt(e,o,A)):(G2&&s&&Fc(o),o.flags|=1,x0(e,o,n,A),o.child)}function bp(e,o,n,s,h){if(yo(o),o.stateNode===null){var A=$o,k=n.contextType;typeof k=="object"&&k!==null&&(A=M0(k)),A=new n(s,A),o.memoizedState=A.state!==null&&A.state!==void 0?A.state:null,A.updater=Zc,o.stateNode=A,A._reactInternals=o,A=o.stateNode,A.props=s,A.state=o.memoizedState,A.refs={},Dc(o),k=n.contextType,A.context=typeof k=="object"&&k!==null?M0(k):$o,A.state=o.memoizedState,k=n.getDerivedStateFromProps,typeof k=="function"&&(Kc(o,n,k,s),A.state=o.memoizedState),typeof n.getDerivedStateFromProps=="function"||typeof A.getSnapshotBeforeUpdate=="function"||typeof A.UNSAFE_componentWillMount!="function"&&typeof A.componentWillMount!="function"||(k=A.state,typeof A.componentWillMount=="function"&&A.componentWillMount(),typeof A.UNSAFE_componentWillMount=="function"&&A.UNSAFE_componentWillMount(),k!==A.state&&Zc.enqueueReplaceState(A,A.state,null),Fn(o,s,A,h),pn(),A.state=o.memoizedState),typeof A.componentDidMount=="function"&&(o.flags|=4194308),s=!0}else if(e===null){A=o.stateNode;var _=o.memoizedProps,I=ko(n,_);A.props=I;var q=A.context,t2=n.contextType;k=$o,typeof t2=="object"&&t2!==null&&(k=M0(t2));var i2=n.getDerivedStateFromProps;t2=typeof i2=="function"||typeof A.getSnapshotBeforeUpdate=="function",_=o.pendingProps!==_,t2||typeof A.UNSAFE_componentWillReceiveProps!="function"&&typeof A.componentWillReceiveProps!="function"||(_||q!==k)&&ip(o,A,s,k),St=!1;var K=o.memoizedState;A.state=K,Fn(o,s,A,h),pn(),q=o.memoizedState,_||K!==q||St?(typeof i2=="function"&&(Kc(o,n,i2,s),q=o.memoizedState),(I=St||np(o,n,I,s,K,q,k))?(t2||typeof A.UNSAFE_componentWillMount!="function"&&typeof A.componentWillMount!="function"||(typeof A.componentWillMount=="function"&&A.componentWillMount(),typeof A.UNSAFE_componentWillMount=="function"&&A.UNSAFE_componentWillMount()),typeof A.componentDidMount=="function"&&(o.flags|=4194308)):(typeof A.componentDidMount=="function"&&(o.flags|=4194308),o.memoizedProps=s,o.memoizedState=q),A.props=s,A.state=q,A.context=k,s=I):(typeof A.componentDidMount=="function"&&(o.flags|=4194308),s=!1)}else{A=o.stateNode,Bc(e,o),k=o.memoizedProps,t2=ko(n,k),A.props=t2,i2=o.pendingProps,K=A.context,q=n.contextType,I=$o,typeof q=="object"&&q!==null&&(I=M0(q)),_=n.getDerivedStateFromProps,(q=typeof _=="function"||typeof A.getSnapshotBeforeUpdate=="function")||typeof A.UNSAFE_componentWillReceiveProps!="function"&&typeof A.componentWillReceiveProps!="function"||(k!==i2||K!==I)&&ip(o,A,s,I),St=!1,K=o.memoizedState,A.state=K,Fn(o,s,A,h),pn();var Z=o.memoizedState;k!==i2||K!==Z||St||e!==null&&e.dependencies!==null&&zi(e.dependencies)?(typeof _=="function"&&(Kc(o,n,_,s),Z=o.memoizedState),(t2=St||np(o,n,t2,s,K,Z,I)||e!==null&&e.dependencies!==null&&zi(e.dependencies))?(q||typeof A.UNSAFE_componentWillUpdate!="function"&&typeof A.componentWillUpdate!="function"||(typeof A.componentWillUpdate=="function"&&A.componentWillUpdate(s,Z,I),typeof A.UNSAFE_componentWillUpdate=="function"&&A.UNSAFE_componentWillUpdate(s,Z,I)),typeof A.componentDidUpdate=="function"&&(o.flags|=4),typeof A.getSnapshotBeforeUpdate=="function"&&(o.flags|=1024)):(typeof A.componentDidUpdate!="function"||k===e.memoizedProps&&K===e.memoizedState||(o.flags|=4),typeof A.getSnapshotBeforeUpdate!="function"||k===e.memoizedProps&&K===e.memoizedState||(o.flags|=1024),o.memoizedProps=s,o.memoizedState=Z),A.props=s,A.state=Z,A.context=I,s=t2):(typeof A.componentDidUpdate!="function"||k===e.memoizedProps&&K===e.memoizedState||(o.flags|=4),typeof A.getSnapshotBeforeUpdate!="function"||k===e.memoizedProps&&K===e.memoizedState||(o.flags|=1024),s=!1)}return A=s,ir(e,o),s=(o.flags&128)!==0,A||s?(A=o.stateNode,n=s&&typeof n.getDerivedStateFromError!="function"?null:A.render(),o.flags|=1,e!==null&&s?(o.child=la(o,e.child,null,h),o.child=la(o,null,n,h)):x0(e,o,n,h),o.memoizedState=A.state,e=o.child):e=pt(e,o,h),e}function Cp(e,o,n,s){return rn(),o.flags|=256,x0(e,o,n,s),o.child}var Jc={dehydrated:null,treeContext:null,retryLane:0,hydrationErrors:null};function Qc(e){return{baseLanes:e,cachePool:sA()}}function $c(e,o,n){return e=e!==null?e.childLanes&~n:0,o&&(e|=be),e}function yp(e,o,n){var s=o.pendingProps,h=!1,A=(o.flags&128)!==0,k;if((k=A)||(k=e!==null&&e.memoizedState===null?!1:(k0.current&2)!==0),k&&(h=!0,o.flags&=-129),k=(o.flags&32)!==0,o.flags&=-33,e===null){if(G2){if(h?Pt(o):It(),G2){var _=A0,I;if(I=_){e:{for(I=_,_=Ve;I.nodeType!==8;){if(!_){_=null;break e}if(I=Pe(I.nextSibling),I===null){_=null;break e}}_=I}_!==null?(o.memoizedState={dehydrated:_,treeContext:mo!==null?{id:ct,overflow:lt}:null,retryLane:536870912,hydrationErrors:null},I=$0(18,null,null,0),I.stateNode=_,I.return=o,o.child=I,j0=o,A0=null,I=!0):I=!1}I||bo(o)}if(_=o.memoizedState,_!==null&&(_=_.dehydrated,_!==null))return Ll(_)?o.lanes=32:o.lanes=536870912,null;At(o)}return _=s.children,s=s.fallback,h?(It(),h=o.mode,_=rr({mode:"hidden",children:_},h),s=Fo(s,h,n,null),_.return=o,s.return=o,_.sibling=s,o.child=_,h=o.child,h.memoizedState=Qc(n),h.childLanes=$c(e,k,n),o.memoizedState=Jc,s):(Pt(o),el(o,_))}if(I=e.memoizedState,I!==null&&(_=I.dehydrated,_!==null)){if(A)o.flags&256?(Pt(o),o.flags&=-257,o=tl(e,o,n)):o.memoizedState!==null?(It(),o.child=e.child,o.flags|=128,o=null):(It(),h=s.fallback,_=o.mode,s=rr({mode:"visible",children:s.children},_),h=Fo(h,_,n,null),h.flags|=2,s.return=o,h.return=o,s.sibling=h,o.child=s,la(o,e.child,null,n),s=o.child,s.memoizedState=Qc(n),s.childLanes=$c(e,k,n),o.memoizedState=Jc,o=h);else if(Pt(o),Ll(_)){if(k=_.nextSibling&&_.nextSibling.dataset,k)var q=k.dgst;k=q,s=Error(r(419)),s.stack="",s.digest=k,sn({value:s,source:null,stack:null}),o=tl(e,o,n)}else if(D0||cn(e,o,n,!1),k=(n&e.childLanes)!==0,D0||k){if(k=t0,k!==null&&(s=n&-n,s=(s&42)!==0?1:Ka(s),s=(s&(k.suspendedLanes|n))!==0?0:s,s!==0&&s!==I.retryLane))throw I.retryLane=s,Qo(e,s),ne(k,e,s),dp;_.data==="$?"||bl(),o=tl(e,o,n)}else _.data==="$?"?(o.flags|=192,o.child=e.child,o=null):(e=I.treeContext,A0=Pe(_.nextSibling),j0=o,G2=!0,fo=null,Ve=!1,e!==null&&(me[ge++]=ct,me[ge++]=lt,me[ge++]=mo,ct=e.id,lt=e.overflow,mo=o),o=el(o,s.children),o.flags|=4096);return o}return h?(It(),h=s.fallback,_=o.mode,I=e.child,q=I.sibling,s=st(I,{mode:"hidden",children:s.children}),s.subtreeFlags=I.subtreeFlags&65011712,q!==null?h=st(q,h):(h=Fo(h,_,n,null),h.flags|=2),h.return=o,s.return=o,s.sibling=h,o.child=s,s=h,h=o.child,_=e.child.memoizedState,_===null?_=Qc(n):(I=_.cachePool,I!==null?(q=w0._currentValue,I=I.parent!==q?{parent:q,pool:q}:I):I=sA(),_={baseLanes:_.baseLanes|n,cachePool:I}),h.memoizedState=_,h.childLanes=$c(e,k,n),o.memoizedState=Jc,s):(Pt(o),n=e.child,e=n.sibling,n=st(n,{mode:"visible",children:s.children}),n.return=o,n.sibling=null,e!==null&&(k=o.deletions,k===null?(o.deletions=[e],o.flags|=16):k.push(e)),o.child=n,o.memoizedState=null,n)}function el(e,o){return o=rr({mode:"visible",children:o},e.mode),o.return=e,e.child=o}function rr(e,o){return e=$0(22,e,null,o),e.lanes=0,e.stateNode={_visibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null},e}function tl(e,o,n){return la(o,e.child,null,n),e=el(o,o.pendingProps.children),e.flags|=2,o.memoizedState=null,e}function vp(e,o,n){e.lanes|=o;var s=e.alternate;s!==null&&(s.lanes|=o),bc(e.return,o,n)}function ol(e,o,n,s,h){var A=e.memoizedState;A===null?e.memoizedState={isBackwards:o,rendering:null,renderingStartTime:0,last:s,tail:n,tailMode:h}:(A.isBackwards=o,A.rendering=null,A.renderingStartTime=0,A.last=s,A.tail=n,A.tailMode=h)}function wp(e,o,n){var s=o.pendingProps,h=s.revealOrder,A=s.tail;if(x0(e,o,s.children,n),s=k0.current,(s&2)!==0)s=s&1|2,o.flags|=128;else{if(e!==null&&(e.flags&128)!==0)e:for(e=o.child;e!==null;){if(e.tag===13)e.memoizedState!==null&&vp(e,n,o);else if(e.tag===19)vp(e,n,o);else if(e.child!==null){e.child.return=e,e=e.child;continue}if(e===o)break e;for(;e.sibling===null;){if(e.return===null||e.return===o)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}s&=1}switch(a2(k0,s),h){case"forwards":for(n=o.child,h=null;n!==null;)e=n.alternate,e!==null&&or(e)===null&&(h=n),n=n.sibling;n=h,n===null?(h=o.child,o.child=null):(h=n.sibling,n.sibling=null),ol(o,!1,h,n,A);break;case"backwards":for(n=null,h=o.child,o.child=null;h!==null;){if(e=h.alternate,e!==null&&or(e)===null){o.child=h;break}e=h.sibling,h.sibling=n,n=h,h=e}ol(o,!0,n,null,A);break;case"together":ol(o,!1,null,null,void 0);break;default:o.memoizedState=null}return o.child}function pt(e,o,n){if(e!==null&&(o.dependencies=e.dependencies),Ht|=o.lanes,(n&o.childLanes)===0)if(e!==null){if(cn(e,o,n,!1),(n&o.childLanes)===0)return null}else return null;if(e!==null&&o.child!==e.child)throw Error(r(153));if(o.child!==null){for(e=o.child,n=st(e,e.pendingProps),o.child=n,n.return=o;e.sibling!==null;)e=e.sibling,n=n.sibling=st(e,e.pendingProps),n.return=o;n.sibling=null}return o.child}function al(e,o){return(e.lanes&o)!==0?!0:(e=e.dependencies,!!(e!==null&&zi(e)))}function l6(e,o,n){switch(o.tag){case 3:E2(o,o.stateNode.containerInfo),_t(o,w0,e.memoizedState.cache),rn();break;case 27:case 5:V2(o);break;case 4:E2(o,o.stateNode.containerInfo);break;case 10:_t(o,o.type,o.memoizedProps.value);break;case 13:var s=o.memoizedState;if(s!==null)return s.dehydrated!==null?(Pt(o),o.flags|=128,null):(n&o.child.childLanes)!==0?yp(e,o,n):(Pt(o),e=pt(e,o,n),e!==null?e.sibling:null);Pt(o);break;case 19:var h=(e.flags&128)!==0;if(s=(n&o.childLanes)!==0,s||(cn(e,o,n,!1),s=(n&o.childLanes)!==0),h){if(s)return wp(e,o,n);o.flags|=128}if(h=o.memoizedState,h!==null&&(h.rendering=null,h.tail=null,h.lastEffect=null),a2(k0,k0.current),s)break;return null;case 22:case 23:return o.lanes=0,mp(e,o,n);case 24:_t(o,w0,e.memoizedState.cache)}return pt(e,o,n)}function kp(e,o,n){if(e!==null)if(e.memoizedProps!==o.pendingProps)D0=!0;else{if(!al(e,n)&&(o.flags&128)===0)return D0=!1,l6(e,o,n);D0=(e.flags&131072)!==0}else D0=!1,G2&&(o.flags&1048576)!==0&&eA(o,Hi,o.index);switch(o.lanes=0,o.tag){case 16:e:{e=o.pendingProps;var s=o.elementType,h=s._init;if(s=h(s._payload),o.type=s,typeof s=="function")dc(s)?(e=ko(s,e),o.tag=1,o=bp(null,o,s,e,n)):(o.tag=0,o=Yc(null,o,s,e,n));else{if(s!=null){if(h=s.$$typeof,h===T){o.tag=11,o=Ap(null,o,s,e,n);break e}else if(h===L){o.tag=14,o=pp(null,o,s,e,n);break e}}throw o=G(s)||s,Error(r(306,o,""))}}return o;case 0:return Yc(e,o,o.type,o.pendingProps,n);case 1:return s=o.type,h=ko(s,o.pendingProps),bp(e,o,s,h,n);case 3:e:{if(E2(o,o.stateNode.containerInfo),e===null)throw Error(r(387));s=o.pendingProps;var A=o.memoizedState;h=A.element,Bc(e,o),Fn(o,s,null,n);var k=o.memoizedState;if(s=k.cache,_t(o,w0,s),s!==A.cache&&Cc(o,[w0],n,!0),pn(),s=k.element,A.isDehydrated)if(A={element:s,isDehydrated:!1,cache:k.cache},o.updateQueue.baseState=A,o.memoizedState=A,o.flags&256){o=Cp(e,o,s,n);break e}else if(s!==h){h=pe(Error(r(424)),o),sn(h),o=Cp(e,o,s,n);break e}else{switch(e=o.stateNode.containerInfo,e.nodeType){case 9:e=e.body;break;default:e=e.nodeName==="HTML"?e.ownerDocument.body:e}for(A0=Pe(e.firstChild),j0=o,G2=!0,fo=null,Ve=!0,n=op(o,null,s,n),o.child=n;n;)n.flags=n.flags&-3|4096,n=n.sibling}else{if(rn(),s===h){o=pt(e,o,n);break e}x0(e,o,s,n)}o=o.child}return o;case 26:return ir(e,o),e===null?(n=_F(o.type,null,o.pendingProps,null))?o.memoizedState=n:G2||(n=o.type,e=o.pendingProps,s=Cr(g2.current).createElement(n),s[r2]=o,s[h2]=e,R0(s,n,e),R2(s),o.stateNode=s):o.memoizedState=_F(o.type,e.memoizedProps,o.pendingProps,e.memoizedState),null;case 27:return V2(o),e===null&&G2&&(s=o.stateNode=DF(o.type,o.pendingProps,g2.current),j0=o,Ve=!0,h=A0,Ut(o.type)?(Ol=h,A0=Pe(s.firstChild)):A0=h),x0(e,o,o.pendingProps.children,n),ir(e,o),e===null&&(o.flags|=4194304),o.child;case 5:return e===null&&G2&&((h=s=A0)&&(s=O6(s,o.type,o.pendingProps,Ve),s!==null?(o.stateNode=s,j0=o,A0=Pe(s.firstChild),Ve=!1,h=!0):h=!1),h||bo(o)),V2(o),h=o.type,A=o.pendingProps,k=e!==null?e.memoizedProps:null,s=A.children,Pl(h,A)?s=null:k!==null&&Pl(h,k)&&(o.flags|=32),o.memoizedState!==null&&(h=Rc(e,o,t6,null,null,n),On._currentValue=h),ir(e,o),x0(e,o,s,n),o.child;case 6:return e===null&&G2&&((e=n=A0)&&(n=N6(n,o.pendingProps,Ve),n!==null?(o.stateNode=n,j0=o,A0=null,e=!0):e=!1),e||bo(o)),null;case 13:return yp(e,o,n);case 4:return E2(o,o.stateNode.containerInfo),s=o.pendingProps,e===null?o.child=la(o,null,s,n):x0(e,o,s,n),o.child;case 11:return Ap(e,o,o.type,o.pendingProps,n);case 7:return x0(e,o,o.pendingProps,n),o.child;case 8:return x0(e,o,o.pendingProps.children,n),o.child;case 12:return x0(e,o,o.pendingProps.children,n),o.child;case 10:return s=o.pendingProps,_t(o,o.type,s.value),x0(e,o,s.children,n),o.child;case 9:return h=o.type._context,s=o.pendingProps.children,yo(o),h=M0(h),s=s(h),o.flags|=1,x0(e,o,s,n),o.child;case 14:return pp(e,o,o.type,o.pendingProps,n);case 15:return Fp(e,o,o.type,o.pendingProps,n);case 19:return wp(e,o,n);case 31:return s=o.pendingProps,n=o.mode,s={mode:s.mode,children:s.children},e===null?(n=rr(s,n),n.ref=o.ref,o.child=n,n.return=o,o=n):(n=st(e.child,s),n.ref=o.ref,o.child=n,n.return=o,o=n),o;case 22:return mp(e,o,n);case 24:return yo(o),s=M0(w0),e===null?(h=wc(),h===null&&(h=t0,A=yc(),h.pooledCache=A,A.refCount++,A!==null&&(h.pooledCacheLanes|=n),h=A),o.memoizedState={parent:s,cache:h},Dc(o),_t(o,w0,h)):((e.lanes&n)!==0&&(Bc(e,o),Fn(o,null,null,n),pn()),h=e.memoizedState,A=o.memoizedState,h.parent!==s?(h={parent:s,cache:s},o.memoizedState=h,o.lanes===0&&(o.memoizedState=o.updateQueue.baseState=h),_t(o,w0,s)):(s=A.cache,_t(o,w0,s),s!==h.cache&&Cc(o,[w0],n,!0))),x0(e,o,o.pendingProps.children,n),o.child;case 29:throw o.pendingProps}throw Error(r(156,o.tag))}function Ft(e){e.flags|=4}function Dp(e,o){if(o.type!=="stylesheet"||(o.state.loading&4)!==0)e.flags&=-16777217;else if(e.flags|=16777216,!PF(o)){if(o=fe.current,o!==null&&((U2&4194048)===U2?Ue!==null:(U2&62914560)!==U2&&(U2&536870912)===0||o!==Ue))throw dn=kc,cA;e.flags|=8192}}function sr(e,o){o!==null&&(e.flags|=4),e.flags&16384&&(o=e.tag!==22?yi():536870912,e.lanes|=o,Aa|=o)}function vn(e,o){if(!G2)switch(e.tailMode){case"hidden":o=e.tail;for(var n=null;o!==null;)o.alternate!==null&&(n=o),o=o.sibling;n===null?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var s=null;n!==null;)n.alternate!==null&&(s=n),n=n.sibling;s===null?o||e.tail===null?e.tail=null:e.tail.sibling=null:s.sibling=null}}function l0(e){var o=e.alternate!==null&&e.alternate.child===e.child,n=0,s=0;if(o)for(var h=e.child;h!==null;)n|=h.lanes|h.childLanes,s|=h.subtreeFlags&65011712,s|=h.flags&65011712,h.return=e,h=h.sibling;else for(h=e.child;h!==null;)n|=h.lanes|h.childLanes,s|=h.subtreeFlags,s|=h.flags,h.return=e,h=h.sibling;return e.subtreeFlags|=s,e.childLanes=n,o}function h6(e,o,n){var s=o.pendingProps;switch(mc(o),o.tag){case 31:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return l0(o),null;case 1:return l0(o),null;case 3:return n=o.stateNode,s=null,e!==null&&(s=e.memoizedState.cache),o.memoizedState.cache!==s&&(o.flags|=2048),ut(w0),I2(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),(e===null||e.child===null)&&(nn(o)?Ft(o):e===null||e.memoizedState.isDehydrated&&(o.flags&256)===0||(o.flags|=1024,aA())),l0(o),null;case 26:return n=o.memoizedState,e===null?(Ft(o),n!==null?(l0(o),Dp(o,n)):(l0(o),o.flags&=-16777217)):n?n!==e.memoizedState?(Ft(o),l0(o),Dp(o,n)):(l0(o),o.flags&=-16777217):(e.memoizedProps!==s&&Ft(o),l0(o),o.flags&=-16777217),null;case 27:h0(o),n=g2.current;var h=o.type;if(e!==null&&o.stateNode!=null)e.memoizedProps!==s&&Ft(o);else{if(!s){if(o.stateNode===null)throw Error(r(166));return l0(o),null}e=A2.current,nn(o)?tA(o):(e=DF(h,s,n),o.stateNode=e,Ft(o))}return l0(o),null;case 5:if(h0(o),n=o.type,e!==null&&o.stateNode!=null)e.memoizedProps!==s&&Ft(o);else{if(!s){if(o.stateNode===null)throw Error(r(166));return l0(o),null}if(e=A2.current,nn(o))tA(o);else{switch(h=Cr(g2.current),e){case 1:e=h.createElementNS("http://www.w3.org/2000/svg",n);break;case 2:e=h.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;default:switch(n){case"svg":e=h.createElementNS("http://www.w3.org/2000/svg",n);break;case"math":e=h.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;case"script":e=h.createElement("div"),e.innerHTML="<script><\/script>",e=e.removeChild(e.firstChild);break;case"select":e=typeof s.is=="string"?h.createElement("select",{is:s.is}):h.createElement("select"),s.multiple?e.multiple=!0:s.size&&(e.size=s.size);break;default:e=typeof s.is=="string"?h.createElement(n,{is:s.is}):h.createElement(n)}}e[r2]=o,e[h2]=s;e:for(h=o.child;h!==null;){if(h.tag===5||h.tag===6)e.appendChild(h.stateNode);else if(h.tag!==4&&h.tag!==27&&h.child!==null){h.child.return=h,h=h.child;continue}if(h===o)break e;for(;h.sibling===null;){if(h.return===null||h.return===o)break e;h=h.return}h.sibling.return=h.return,h=h.sibling}o.stateNode=e;e:switch(R0(e,n,s),n){case"button":case"input":case"select":case"textarea":e=!!s.autoFocus;break e;case"img":e=!0;break e;default:e=!1}e&&Ft(o)}}return l0(o),o.flags&=-16777217,null;case 6:if(e&&o.stateNode!=null)e.memoizedProps!==s&&Ft(o);else{if(typeof s!="string"&&o.stateNode===null)throw Error(r(166));if(e=g2.current,nn(o)){if(e=o.stateNode,n=o.memoizedProps,s=null,h=j0,h!==null)switch(h.tag){case 27:case 5:s=h.memoizedProps}e[r2]=o,e=!!(e.nodeValue===n||s!==null&&s.suppressHydrationWarning===!0||fF(e.nodeValue,n)),e||bo(o)}else e=Cr(e).createTextNode(s),e[r2]=o,o.stateNode=e}return l0(o),null;case 13:if(s=o.memoizedState,e===null||e.memoizedState!==null&&e.memoizedState.dehydrated!==null){if(h=nn(o),s!==null&&s.dehydrated!==null){if(e===null){if(!h)throw Error(r(318));if(h=o.memoizedState,h=h!==null?h.dehydrated:null,!h)throw Error(r(317));h[r2]=o}else rn(),(o.flags&128)===0&&(o.memoizedState=null),o.flags|=4;l0(o),h=!1}else h=aA(),e!==null&&e.memoizedState!==null&&(e.memoizedState.hydrationErrors=h),h=!0;if(!h)return o.flags&256?(At(o),o):(At(o),null)}if(At(o),(o.flags&128)!==0)return o.lanes=n,o;if(n=s!==null,e=e!==null&&e.memoizedState!==null,n){s=o.child,h=null,s.alternate!==null&&s.alternate.memoizedState!==null&&s.alternate.memoizedState.cachePool!==null&&(h=s.alternate.memoizedState.cachePool.pool);var A=null;s.memoizedState!==null&&s.memoizedState.cachePool!==null&&(A=s.memoizedState.cachePool.pool),A!==h&&(s.flags|=2048)}return n!==e&&n&&(o.child.flags|=8192),sr(o,o.updateQueue),l0(o),null;case 4:return I2(),e===null&&_l(o.stateNode.containerInfo),l0(o),null;case 10:return ut(o.type),l0(o),null;case 19:if(e2(k0),h=o.memoizedState,h===null)return l0(o),null;if(s=(o.flags&128)!==0,A=h.rendering,A===null)if(s)vn(h,!1);else{if(p0!==0||e!==null&&(e.flags&128)!==0)for(e=o.child;e!==null;){if(A=or(e),A!==null){for(o.flags|=128,vn(h,!1),e=A.updateQueue,o.updateQueue=e,sr(o,e),o.subtreeFlags=0,e=n,n=o.child;n!==null;)$d(n,e),n=n.sibling;return a2(k0,k0.current&1|2),o.child}e=e.sibling}h.tail!==null&&H0()>hr&&(o.flags|=128,s=!0,vn(h,!1),o.lanes=4194304)}else{if(!s)if(e=or(A),e!==null){if(o.flags|=128,s=!0,e=e.updateQueue,o.updateQueue=e,sr(o,e),vn(h,!0),h.tail===null&&h.tailMode==="hidden"&&!A.alternate&&!G2)return l0(o),null}else 2*H0()-h.renderingStartTime>hr&&n!==536870912&&(o.flags|=128,s=!0,vn(h,!1),o.lanes=4194304);h.isBackwards?(A.sibling=o.child,o.child=A):(e=h.last,e!==null?e.sibling=A:o.child=A,h.last=A)}return h.tail!==null?(o=h.tail,h.rendering=o,h.tail=o.sibling,h.renderingStartTime=H0(),o.sibling=null,e=k0.current,a2(k0,s?e&1|2:e&1),o):(l0(o),null);case 22:case 23:return At(o),xc(),s=o.memoizedState!==null,e!==null?e.memoizedState!==null!==s&&(o.flags|=8192):s&&(o.flags|=8192),s?(n&536870912)!==0&&(o.flags&128)===0&&(l0(o),o.subtreeFlags&6&&(o.flags|=8192)):l0(o),n=o.updateQueue,n!==null&&sr(o,n.retryQueue),n=null,e!==null&&e.memoizedState!==null&&e.memoizedState.cachePool!==null&&(n=e.memoizedState.cachePool.pool),s=null,o.memoizedState!==null&&o.memoizedState.cachePool!==null&&(s=o.memoizedState.cachePool.pool),s!==n&&(o.flags|=2048),e!==null&&e2(vo),null;case 24:return n=null,e!==null&&(n=e.memoizedState.cache),o.memoizedState.cache!==n&&(o.flags|=2048),ut(w0),l0(o),null;case 25:return null;case 30:return null}throw Error(r(156,o.tag))}function u6(e,o){switch(mc(o),o.tag){case 1:return e=o.flags,e&65536?(o.flags=e&-65537|128,o):null;case 3:return ut(w0),I2(),e=o.flags,(e&65536)!==0&&(e&128)===0?(o.flags=e&-65537|128,o):null;case 26:case 27:case 5:return h0(o),null;case 13:if(At(o),e=o.memoizedState,e!==null&&e.dehydrated!==null){if(o.alternate===null)throw Error(r(340));rn()}return e=o.flags,e&65536?(o.flags=e&-65537|128,o):null;case 19:return e2(k0),null;case 4:return I2(),null;case 10:return ut(o.type),null;case 22:case 23:return At(o),xc(),e!==null&&e2(vo),e=o.flags,e&65536?(o.flags=e&-65537|128,o):null;case 24:return ut(w0),null;case 25:return null;default:return null}}function Bp(e,o){switch(mc(o),o.tag){case 3:ut(w0),I2();break;case 26:case 27:case 5:h0(o);break;case 4:I2();break;case 13:At(o);break;case 19:e2(k0);break;case 10:ut(o.type);break;case 22:case 23:At(o),xc(),e!==null&&e2(vo);break;case 24:ut(w0)}}function wn(e,o){try{var n=o.updateQueue,s=n!==null?n.lastEffect:null;if(s!==null){var h=s.next;n=h;do{if((n.tag&e)===e){s=void 0;var A=n.create,k=n.inst;s=A(),k.destroy=s}n=n.next}while(n!==h)}}catch(_){e0(o,o.return,_)}}function Mt(e,o,n){try{var s=o.updateQueue,h=s!==null?s.lastEffect:null;if(h!==null){var A=h.next;s=A;do{if((s.tag&e)===e){var k=s.inst,_=k.destroy;if(_!==void 0){k.destroy=void 0,h=o;var I=n,q=_;try{q()}catch(t2){e0(h,I,t2)}}}s=s.next}while(s!==A)}}catch(t2){e0(o,o.return,t2)}}function Ep(e){var o=e.updateQueue;if(o!==null){var n=e.stateNode;try{pA(o,n)}catch(s){e0(e,e.return,s)}}}function _p(e,o,n){n.props=ko(e.type,e.memoizedProps),n.state=e.memoizedState;try{n.componentWillUnmount()}catch(s){e0(e,o,s)}}function kn(e,o){try{var n=e.ref;if(n!==null){switch(e.tag){case 26:case 27:case 5:var s=e.stateNode;break;case 30:s=e.stateNode;break;default:s=e.stateNode}typeof n=="function"?e.refCleanup=n(s):n.current=s}}catch(h){e0(e,o,h)}}function qe(e,o){var n=e.ref,s=e.refCleanup;if(n!==null)if(typeof s=="function")try{s()}catch(h){e0(e,o,h)}finally{e.refCleanup=null,e=e.alternate,e!=null&&(e.refCleanup=null)}else if(typeof n=="function")try{n(null)}catch(h){e0(e,o,h)}else n.current=null}function Sp(e){var o=e.type,n=e.memoizedProps,s=e.stateNode;try{e:switch(o){case"button":case"input":case"select":case"textarea":n.autoFocus&&s.focus();break e;case"img":n.src?s.src=n.src:n.srcSet&&(s.srcset=n.srcSet)}}catch(h){e0(e,e.return,h)}}function nl(e,o,n){try{var s=e.stateNode;R6(s,e.type,n,o),s[h2]=o}catch(h){e0(e,e.return,h)}}function xp(e){return e.tag===5||e.tag===3||e.tag===26||e.tag===27&&Ut(e.type)||e.tag===4}function il(e){e:for(;;){for(;e.sibling===null;){if(e.return===null||xp(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;e.tag!==5&&e.tag!==6&&e.tag!==18;){if(e.tag===27&&Ut(e.type)||e.flags&2||e.child===null||e.tag===4)continue e;e.child.return=e,e=e.child}if(!(e.flags&2))return e.stateNode}}function rl(e,o,n){var s=e.tag;if(s===5||s===6)e=e.stateNode,o?(n.nodeType===9?n.body:n.nodeName==="HTML"?n.ownerDocument.body:n).insertBefore(e,o):(o=n.nodeType===9?n.body:n.nodeName==="HTML"?n.ownerDocument.body:n,o.appendChild(e),n=n._reactRootContainer,n!=null||o.onclick!==null||(o.onclick=br));else if(s!==4&&(s===27&&Ut(e.type)&&(n=e.stateNode,o=null),e=e.child,e!==null))for(rl(e,o,n),e=e.sibling;e!==null;)rl(e,o,n),e=e.sibling}function cr(e,o,n){var s=e.tag;if(s===5||s===6)e=e.stateNode,o?n.insertBefore(e,o):n.appendChild(e);else if(s!==4&&(s===27&&Ut(e.type)&&(n=e.stateNode),e=e.child,e!==null))for(cr(e,o,n),e=e.sibling;e!==null;)cr(e,o,n),e=e.sibling}function Tp(e){var o=e.stateNode,n=e.memoizedProps;try{for(var s=e.type,h=o.attributes;h.length;)o.removeAttributeNode(h[0]);R0(o,s,n),o[r2]=e,o[h2]=n}catch(A){e0(e,e.return,A)}}var mt=!1,f0=!1,sl=!1,Rp=typeof WeakSet=="function"?WeakSet:Set,B0=null;function d6(e,o){if(e=e.containerInfo,Tl=Br,e=Ud(e),ic(e)){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{n=(n=e.ownerDocument)&&n.defaultView||window;var s=n.getSelection&&n.getSelection();if(s&&s.rangeCount!==0){n=s.anchorNode;var h=s.anchorOffset,A=s.focusNode;s=s.focusOffset;try{n.nodeType,A.nodeType}catch{n=null;break e}var k=0,_=-1,I=-1,q=0,t2=0,i2=e,K=null;t:for(;;){for(var Z;i2!==n||h!==0&&i2.nodeType!==3||(_=k+h),i2!==A||s!==0&&i2.nodeType!==3||(I=k+s),i2.nodeType===3&&(k+=i2.nodeValue.length),(Z=i2.firstChild)!==null;)K=i2,i2=Z;for(;;){if(i2===e)break t;if(K===n&&++q===h&&(_=k),K===A&&++t2===s&&(I=k),(Z=i2.nextSibling)!==null)break;i2=K,K=i2.parentNode}i2=Z}n=_===-1||I===-1?null:{start:_,end:I}}else n=null}n=n||{start:0,end:0}}else n=null;for(Rl={focusedElem:e,selectionRange:n},Br=!1,B0=o;B0!==null;)if(o=B0,e=o.child,(o.subtreeFlags&1024)!==0&&e!==null)e.return=o,B0=e;else for(;B0!==null;){switch(o=B0,A=o.alternate,e=o.flags,o.tag){case 0:break;case 11:case 15:break;case 1:if((e&1024)!==0&&A!==null){e=void 0,n=o,h=A.memoizedProps,A=A.memoizedState,s=n.stateNode;try{var x2=ko(n.type,h,n.elementType===n.type);e=s.getSnapshotBeforeUpdate(x2,A),s.__reactInternalSnapshotBeforeUpdate=e}catch(B2){e0(n,n.return,B2)}}break;case 3:if((e&1024)!==0){if(e=o.stateNode.containerInfo,n=e.nodeType,n===9)Ml(e);else if(n===1)switch(e.nodeName){case"HEAD":case"HTML":case"BODY":Ml(e);break;default:e.textContent=""}}break;case 5:case 26:case 27:case 6:case 4:case 17:break;default:if((e&1024)!==0)throw Error(r(163))}if(e=o.sibling,e!==null){e.return=o.return,B0=e;break}B0=o.return}}function Pp(e,o,n){var s=n.flags;switch(n.tag){case 0:case 11:case 15:Lt(e,n),s&4&&wn(5,n);break;case 1:if(Lt(e,n),s&4)if(e=n.stateNode,o===null)try{e.componentDidMount()}catch(k){e0(n,n.return,k)}else{var h=ko(n.type,o.memoizedProps);o=o.memoizedState;try{e.componentDidUpdate(h,o,e.__reactInternalSnapshotBeforeUpdate)}catch(k){e0(n,n.return,k)}}s&64&&Ep(n),s&512&&kn(n,n.return);break;case 3:if(Lt(e,n),s&64&&(e=n.updateQueue,e!==null)){if(o=null,n.child!==null)switch(n.child.tag){case 27:case 5:o=n.child.stateNode;break;case 1:o=n.child.stateNode}try{pA(e,o)}catch(k){e0(n,n.return,k)}}break;case 27:o===null&&s&4&&Tp(n);case 26:case 5:Lt(e,n),o===null&&s&4&&Sp(n),s&512&&kn(n,n.return);break;case 12:Lt(e,n);break;case 13:Lt(e,n),s&4&&Lp(e,n),s&64&&(e=n.memoizedState,e!==null&&(e=e.dehydrated,e!==null&&(n=y6.bind(null,n),H6(e,n))));break;case 22:if(s=n.memoizedState!==null||mt,!s){o=o!==null&&o.memoizedState!==null||f0,h=mt;var A=f0;mt=s,(f0=o)&&!A?Ot(e,n,(n.subtreeFlags&8772)!==0):Lt(e,n),mt=h,f0=A}break;case 30:break;default:Lt(e,n)}}function Ip(e){var o=e.alternate;o!==null&&(e.alternate=null,Ip(o)),e.child=null,e.deletions=null,e.sibling=null,e.tag===5&&(o=e.stateNode,o!==null&&C2(o)),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}var r0=null,Z0=!1;function gt(e,o,n){for(n=n.child;n!==null;)Mp(e,o,n),n=n.sibling}function Mp(e,o,n){if(s0&&typeof s0.onCommitFiberUnmount=="function")try{s0.onCommitFiberUnmount(W0,n)}catch{}switch(n.tag){case 26:f0||qe(n,o),gt(e,o,n),n.memoizedState?n.memoizedState.count--:n.stateNode&&(n=n.stateNode,n.parentNode.removeChild(n));break;case 27:f0||qe(n,o);var s=r0,h=Z0;Ut(n.type)&&(r0=n.stateNode,Z0=!1),gt(e,o,n),Pn(n.stateNode),r0=s,Z0=h;break;case 5:f0||qe(n,o);case 6:if(s=r0,h=Z0,r0=null,gt(e,o,n),r0=s,Z0=h,r0!==null)if(Z0)try{(r0.nodeType===9?r0.body:r0.nodeName==="HTML"?r0.ownerDocument.body:r0).removeChild(n.stateNode)}catch(A){e0(n,o,A)}else try{r0.removeChild(n.stateNode)}catch(A){e0(n,o,A)}break;case 18:r0!==null&&(Z0?(e=r0,wF(e.nodeType===9?e.body:e.nodeName==="HTML"?e.ownerDocument.body:e,n.stateNode),jn(e)):wF(r0,n.stateNode));break;case 4:s=r0,h=Z0,r0=n.stateNode.containerInfo,Z0=!0,gt(e,o,n),r0=s,Z0=h;break;case 0:case 11:case 14:case 15:f0||Mt(2,n,o),f0||Mt(4,n,o),gt(e,o,n);break;case 1:f0||(qe(n,o),s=n.stateNode,typeof s.componentWillUnmount=="function"&&_p(n,o,s)),gt(e,o,n);break;case 21:gt(e,o,n);break;case 22:f0=(s=f0)||n.memoizedState!==null,gt(e,o,n),f0=s;break;default:gt(e,o,n)}}function Lp(e,o){if(o.memoizedState===null&&(e=o.alternate,e!==null&&(e=e.memoizedState,e!==null&&(e=e.dehydrated,e!==null))))try{jn(e)}catch(n){e0(o,o.return,n)}}function A6(e){switch(e.tag){case 13:case 19:var o=e.stateNode;return o===null&&(o=e.stateNode=new Rp),o;case 22:return e=e.stateNode,o=e._retryCache,o===null&&(o=e._retryCache=new Rp),o;default:throw Error(r(435,e.tag))}}function cl(e,o){var n=A6(e);o.forEach(function(s){var h=v6.bind(null,e,s);n.has(s)||(n.add(s),s.then(h,h))})}function ee(e,o){var n=o.deletions;if(n!==null)for(var s=0;s<n.length;s++){var h=n[s],A=e,k=o,_=k;e:for(;_!==null;){switch(_.tag){case 27:if(Ut(_.type)){r0=_.stateNode,Z0=!1;break e}break;case 5:r0=_.stateNode,Z0=!1;break e;case 3:case 4:r0=_.stateNode.containerInfo,Z0=!0;break e}_=_.return}if(r0===null)throw Error(r(160));Mp(A,k,h),r0=null,Z0=!1,A=h.alternate,A!==null&&(A.return=null),h.return=null}if(o.subtreeFlags&13878)for(o=o.child;o!==null;)Op(o,e),o=o.sibling}var Re=null;function Op(e,o){var n=e.alternate,s=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:ee(o,e),te(e),s&4&&(Mt(3,e,e.return),wn(3,e),Mt(5,e,e.return));break;case 1:ee(o,e),te(e),s&512&&(f0||n===null||qe(n,n.return)),s&64&&mt&&(e=e.updateQueue,e!==null&&(s=e.callbacks,s!==null&&(n=e.shared.hiddenCallbacks,e.shared.hiddenCallbacks=n===null?s:n.concat(s))));break;case 26:var h=Re;if(ee(o,e),te(e),s&512&&(f0||n===null||qe(n,n.return)),s&4){var A=n!==null?n.memoizedState:null;if(s=e.memoizedState,n===null)if(s===null)if(e.stateNode===null){e:{s=e.type,n=e.memoizedProps,h=h.ownerDocument||h;t:switch(s){case"title":A=h.getElementsByTagName("title")[0],(!A||A[w2]||A[r2]||A.namespaceURI==="http://www.w3.org/2000/svg"||A.hasAttribute("itemprop"))&&(A=h.createElement(s),h.head.insertBefore(A,h.querySelector("head > title"))),R0(A,s,n),A[r2]=e,R2(A),s=A;break e;case"link":var k=TF("link","href",h).get(s+(n.href||""));if(k){for(var _=0;_<k.length;_++)if(A=k[_],A.getAttribute("href")===(n.href==null||n.href===""?null:n.href)&&A.getAttribute("rel")===(n.rel==null?null:n.rel)&&A.getAttribute("title")===(n.title==null?null:n.title)&&A.getAttribute("crossorigin")===(n.crossOrigin==null?null:n.crossOrigin)){k.splice(_,1);break t}}A=h.createElement(s),R0(A,s,n),h.head.appendChild(A);break;case"meta":if(k=TF("meta","content",h).get(s+(n.content||""))){for(_=0;_<k.length;_++)if(A=k[_],A.getAttribute("content")===(n.content==null?null:""+n.content)&&A.getAttribute("name")===(n.name==null?null:n.name)&&A.getAttribute("property")===(n.property==null?null:n.property)&&A.getAttribute("http-equiv")===(n.httpEquiv==null?null:n.httpEquiv)&&A.getAttribute("charset")===(n.charSet==null?null:n.charSet)){k.splice(_,1);break t}}A=h.createElement(s),R0(A,s,n),h.head.appendChild(A);break;default:throw Error(r(468,s))}A[r2]=e,R2(A),s=A}e.stateNode=s}else RF(h,e.type,e.stateNode);else e.stateNode=xF(h,s,e.memoizedProps);else A!==s?(A===null?n.stateNode!==null&&(n=n.stateNode,n.parentNode.removeChild(n)):A.count--,s===null?RF(h,e.type,e.stateNode):xF(h,s,e.memoizedProps)):s===null&&e.stateNode!==null&&nl(e,e.memoizedProps,n.memoizedProps)}break;case 27:ee(o,e),te(e),s&512&&(f0||n===null||qe(n,n.return)),n!==null&&s&4&&nl(e,e.memoizedProps,n.memoizedProps);break;case 5:if(ee(o,e),te(e),s&512&&(f0||n===null||qe(n,n.return)),e.flags&32){h=e.stateNode;try{Wo(h,"")}catch(Z){e0(e,e.return,Z)}}s&4&&e.stateNode!=null&&(h=e.memoizedProps,nl(e,h,n!==null?n.memoizedProps:h)),s&1024&&(sl=!0);break;case 6:if(ee(o,e),te(e),s&4){if(e.stateNode===null)throw Error(r(162));s=e.memoizedProps,n=e.stateNode;try{n.nodeValue=s}catch(Z){e0(e,e.return,Z)}}break;case 3:if(wr=null,h=Re,Re=yr(o.containerInfo),ee(o,e),Re=h,te(e),s&4&&n!==null&&n.memoizedState.isDehydrated)try{jn(o.containerInfo)}catch(Z){e0(e,e.return,Z)}sl&&(sl=!1,Np(e));break;case 4:s=Re,Re=yr(e.stateNode.containerInfo),ee(o,e),te(e),Re=s;break;case 12:ee(o,e),te(e);break;case 13:ee(o,e),te(e),e.child.flags&8192&&e.memoizedState!==null!=(n!==null&&n.memoizedState!==null)&&(pl=H0()),s&4&&(s=e.updateQueue,s!==null&&(e.updateQueue=null,cl(e,s)));break;case 22:h=e.memoizedState!==null;var I=n!==null&&n.memoizedState!==null,q=mt,t2=f0;if(mt=q||h,f0=t2||I,ee(o,e),f0=t2,mt=q,te(e),s&8192)e:for(o=e.stateNode,o._visibility=h?o._visibility&-2:o._visibility|1,h&&(n===null||I||mt||f0||Do(e)),n=null,o=e;;){if(o.tag===5||o.tag===26){if(n===null){I=n=o;try{if(A=I.stateNode,h)k=A.style,typeof k.setProperty=="function"?k.setProperty("display","none","important"):k.display="none";else{_=I.stateNode;var i2=I.memoizedProps.style,K=i2!=null&&i2.hasOwnProperty("display")?i2.display:null;_.style.display=K==null||typeof K=="boolean"?"":(""+K).trim()}}catch(Z){e0(I,I.return,Z)}}}else if(o.tag===6){if(n===null){I=o;try{I.stateNode.nodeValue=h?"":I.memoizedProps}catch(Z){e0(I,I.return,Z)}}}else if((o.tag!==22&&o.tag!==23||o.memoizedState===null||o===e)&&o.child!==null){o.child.return=o,o=o.child;continue}if(o===e)break e;for(;o.sibling===null;){if(o.return===null||o.return===e)break e;n===o&&(n=null),o=o.return}n===o&&(n=null),o.sibling.return=o.return,o=o.sibling}s&4&&(s=e.updateQueue,s!==null&&(n=s.retryQueue,n!==null&&(s.retryQueue=null,cl(e,n))));break;case 19:ee(o,e),te(e),s&4&&(s=e.updateQueue,s!==null&&(e.updateQueue=null,cl(e,s)));break;case 30:break;case 21:break;default:ee(o,e),te(e)}}function te(e){var o=e.flags;if(o&2){try{for(var n,s=e.return;s!==null;){if(xp(s)){n=s;break}s=s.return}if(n==null)throw Error(r(160));switch(n.tag){case 27:var h=n.stateNode,A=il(e);cr(e,A,h);break;case 5:var k=n.stateNode;n.flags&32&&(Wo(k,""),n.flags&=-33);var _=il(e);cr(e,_,k);break;case 3:case 4:var I=n.stateNode.containerInfo,q=il(e);rl(e,q,I);break;default:throw Error(r(161))}}catch(t2){e0(e,e.return,t2)}e.flags&=-3}o&4096&&(e.flags&=-4097)}function Np(e){if(e.subtreeFlags&1024)for(e=e.child;e!==null;){var o=e;Np(o),o.tag===5&&o.flags&1024&&o.stateNode.reset(),e=e.sibling}}function Lt(e,o){if(o.subtreeFlags&8772)for(o=o.child;o!==null;)Pp(e,o.alternate,o),o=o.sibling}function Do(e){for(e=e.child;e!==null;){var o=e;switch(o.tag){case 0:case 11:case 14:case 15:Mt(4,o,o.return),Do(o);break;case 1:qe(o,o.return);var n=o.stateNode;typeof n.componentWillUnmount=="function"&&_p(o,o.return,n),Do(o);break;case 27:Pn(o.stateNode);case 26:case 5:qe(o,o.return),Do(o);break;case 22:o.memoizedState===null&&Do(o);break;case 30:Do(o);break;default:Do(o)}e=e.sibling}}function Ot(e,o,n){for(n=n&&(o.subtreeFlags&8772)!==0,o=o.child;o!==null;){var s=o.alternate,h=e,A=o,k=A.flags;switch(A.tag){case 0:case 11:case 15:Ot(h,A,n),wn(4,A);break;case 1:if(Ot(h,A,n),s=A,h=s.stateNode,typeof h.componentDidMount=="function")try{h.componentDidMount()}catch(q){e0(s,s.return,q)}if(s=A,h=s.updateQueue,h!==null){var _=s.stateNode;try{var I=h.shared.hiddenCallbacks;if(I!==null)for(h.shared.hiddenCallbacks=null,h=0;h<I.length;h++)AA(I[h],_)}catch(q){e0(s,s.return,q)}}n&&k&64&&Ep(A),kn(A,A.return);break;case 27:Tp(A);case 26:case 5:Ot(h,A,n),n&&s===null&&k&4&&Sp(A),kn(A,A.return);break;case 12:Ot(h,A,n);break;case 13:Ot(h,A,n),n&&k&4&&Lp(h,A);break;case 22:A.memoizedState===null&&Ot(h,A,n),kn(A,A.return);break;case 30:break;default:Ot(h,A,n)}o=o.sibling}}function ll(e,o){var n=null;e!==null&&e.memoizedState!==null&&e.memoizedState.cachePool!==null&&(n=e.memoizedState.cachePool.pool),e=null,o.memoizedState!==null&&o.memoizedState.cachePool!==null&&(e=o.memoizedState.cachePool.pool),e!==n&&(e!=null&&e.refCount++,n!=null&&ln(n))}function hl(e,o){e=null,o.alternate!==null&&(e=o.alternate.memoizedState.cache),o=o.memoizedState.cache,o!==e&&(o.refCount++,e!=null&&ln(e))}function We(e,o,n,s){if(o.subtreeFlags&10256)for(o=o.child;o!==null;)Hp(e,o,n,s),o=o.sibling}function Hp(e,o,n,s){var h=o.flags;switch(o.tag){case 0:case 11:case 15:We(e,o,n,s),h&2048&&wn(9,o);break;case 1:We(e,o,n,s);break;case 3:We(e,o,n,s),h&2048&&(e=null,o.alternate!==null&&(e=o.alternate.memoizedState.cache),o=o.memoizedState.cache,o!==e&&(o.refCount++,e!=null&&ln(e)));break;case 12:if(h&2048){We(e,o,n,s),e=o.stateNode;try{var A=o.memoizedProps,k=A.id,_=A.onPostCommit;typeof _=="function"&&_(k,o.alternate===null?"mount":"update",e.passiveEffectDuration,-0)}catch(I){e0(o,o.return,I)}}else We(e,o,n,s);break;case 13:We(e,o,n,s);break;case 23:break;case 22:A=o.stateNode,k=o.alternate,o.memoizedState!==null?A._visibility&2?We(e,o,n,s):Dn(e,o):A._visibility&2?We(e,o,n,s):(A._visibility|=2,ha(e,o,n,s,(o.subtreeFlags&10256)!==0)),h&2048&&ll(k,o);break;case 24:We(e,o,n,s),h&2048&&hl(o.alternate,o);break;default:We(e,o,n,s)}}function ha(e,o,n,s,h){for(h=h&&(o.subtreeFlags&10256)!==0,o=o.child;o!==null;){var A=e,k=o,_=n,I=s,q=k.flags;switch(k.tag){case 0:case 11:case 15:ha(A,k,_,I,h),wn(8,k);break;case 23:break;case 22:var t2=k.stateNode;k.memoizedState!==null?t2._visibility&2?ha(A,k,_,I,h):Dn(A,k):(t2._visibility|=2,ha(A,k,_,I,h)),h&&q&2048&&ll(k.alternate,k);break;case 24:ha(A,k,_,I,h),h&&q&2048&&hl(k.alternate,k);break;default:ha(A,k,_,I,h)}o=o.sibling}}function Dn(e,o){if(o.subtreeFlags&10256)for(o=o.child;o!==null;){var n=e,s=o,h=s.flags;switch(s.tag){case 22:Dn(n,s),h&2048&&ll(s.alternate,s);break;case 24:Dn(n,s),h&2048&&hl(s.alternate,s);break;default:Dn(n,s)}o=o.sibling}}var Bn=8192;function ua(e){if(e.subtreeFlags&Bn)for(e=e.child;e!==null;)zp(e),e=e.sibling}function zp(e){switch(e.tag){case 26:ua(e),e.flags&Bn&&e.memoizedState!==null&&Q6(Re,e.memoizedState,e.memoizedProps);break;case 5:ua(e);break;case 3:case 4:var o=Re;Re=yr(e.stateNode.containerInfo),ua(e),Re=o;break;case 22:e.memoizedState===null&&(o=e.alternate,o!==null&&o.memoizedState!==null?(o=Bn,Bn=16777216,ua(e),Bn=o):ua(e));break;default:ua(e)}}function jp(e){var o=e.alternate;if(o!==null&&(e=o.child,e!==null)){o.child=null;do o=e.sibling,e.sibling=null,e=o;while(e!==null)}}function En(e){var o=e.deletions;if((e.flags&16)!==0){if(o!==null)for(var n=0;n<o.length;n++){var s=o[n];B0=s,Up(s,e)}jp(e)}if(e.subtreeFlags&10256)for(e=e.child;e!==null;)Vp(e),e=e.sibling}function Vp(e){switch(e.tag){case 0:case 11:case 15:En(e),e.flags&2048&&Mt(9,e,e.return);break;case 3:En(e);break;case 12:En(e);break;case 22:var o=e.stateNode;e.memoizedState!==null&&o._visibility&2&&(e.return===null||e.return.tag!==13)?(o._visibility&=-3,lr(e)):En(e);break;default:En(e)}}function lr(e){var o=e.deletions;if((e.flags&16)!==0){if(o!==null)for(var n=0;n<o.length;n++){var s=o[n];B0=s,Up(s,e)}jp(e)}for(e=e.child;e!==null;){switch(o=e,o.tag){case 0:case 11:case 15:Mt(8,o,o.return),lr(o);break;case 22:n=o.stateNode,n._visibility&2&&(n._visibility&=-3,lr(o));break;default:lr(o)}e=e.sibling}}function Up(e,o){for(;B0!==null;){var n=B0;switch(n.tag){case 0:case 11:case 15:Mt(8,n,o);break;case 23:case 22:if(n.memoizedState!==null&&n.memoizedState.cachePool!==null){var s=n.memoizedState.cachePool.pool;s!=null&&s.refCount++}break;case 24:ln(n.memoizedState.cache)}if(s=n.child,s!==null)s.return=n,B0=s;else e:for(n=e;B0!==null;){s=B0;var h=s.sibling,A=s.return;if(Ip(s),s===n){B0=null;break e}if(h!==null){h.return=A,B0=h;break e}B0=A}}}var p6={getCacheForType:function(e){var o=M0(w0),n=o.data.get(e);return n===void 0&&(n=e(),o.data.set(e,n)),n}},F6=typeof WeakMap=="function"?WeakMap:Map,Z2=0,t0=null,z2=null,U2=0,X2=0,oe=null,Nt=!1,da=!1,ul=!1,ft=0,p0=0,Ht=0,Bo=0,dl=0,be=0,Aa=0,_n=null,X0=null,Al=!1,pl=0,hr=1/0,ur=null,zt=null,T0=0,jt=null,pa=null,Fa=0,Fl=0,ml=null,qp=null,Sn=0,gl=null;function ae(){if((Z2&2)!==0&&U2!==0)return U2&-U2;if(O.T!==null){var e=oa;return e!==0?e:kl()}return M()}function Wp(){be===0&&(be=(U2&536870912)===0||G2?jo():536870912);var e=fe.current;return e!==null&&(e.flags|=32),be}function ne(e,o,n){(e===t0&&(X2===2||X2===9)||e.cancelPendingCommit!==null)&&(ma(e,0),Vt(e,U2,be,!1)),so(e,n),((Z2&2)===0||e!==t0)&&(e===t0&&((Z2&2)===0&&(Bo|=n),p0===4&&Vt(e,U2,be,!1)),Ge(e))}function Gp(e,o,n){if((Z2&6)!==0)throw Error(r(327));var s=!n&&(o&124)===0&&(o&e.expiredLanes)===0||ze(e,o),h=s?f6(e,o):Cl(e,o,!0),A=s;do{if(h===0){da&&!s&&Vt(e,o,0,!1);break}else{if(n=e.current.alternate,A&&!m6(n)){h=Cl(e,o,!1),A=!1;continue}if(h===2){if(A=o,e.errorRecoveryDisabledLanes&A)var k=0;else k=e.pendingLanes&-536870913,k=k!==0?k:k&536870912?536870912:0;if(k!==0){o=k;e:{var _=e;h=_n;var I=_.current.memoizedState.isDehydrated;if(I&&(ma(_,k).flags|=256),k=Cl(_,k,!1),k!==2){if(ul&&!I){_.errorRecoveryDisabledLanes|=A,Bo|=A,h=4;break e}A=X0,X0=h,A!==null&&(X0===null?X0=A:X0.push.apply(X0,A))}h=k}if(A=!1,h!==2)continue}}if(h===1){ma(e,0),Vt(e,o,0,!0);break}e:{switch(s=e,A=h,A){case 0:case 1:throw Error(r(345));case 4:if((o&4194048)!==o)break;case 6:Vt(s,o,be,!Nt);break e;case 2:X0=null;break;case 3:case 5:break;default:throw Error(r(329))}if((o&62914560)===o&&(h=pl+300-H0(),10<h)){if(Vt(s,o,be,!Nt),ro(s,0,!0)!==0)break e;s.timeoutHandle=yF(Kp.bind(null,s,n,X0,ur,Al,o,be,Bo,Aa,Nt,A,2,-0,0),h);break e}Kp(s,n,X0,ur,Al,o,be,Bo,Aa,Nt,A,0,-0,0)}}break}while(!0);Ge(e)}function Kp(e,o,n,s,h,A,k,_,I,q,t2,i2,K,Z){if(e.timeoutHandle=-1,i2=o.subtreeFlags,(i2&8192||(i2&16785408)===16785408)&&(Ln={stylesheets:null,count:0,unsuspend:J6},zp(o),i2=$6(),i2!==null)){e.cancelPendingCommit=i2(eF.bind(null,e,o,A,n,s,h,k,_,I,t2,1,K,Z)),Vt(e,A,k,!q);return}eF(e,o,A,n,s,h,k,_,I)}function m6(e){for(var o=e;;){var n=o.tag;if((n===0||n===11||n===15)&&o.flags&16384&&(n=o.updateQueue,n!==null&&(n=n.stores,n!==null)))for(var s=0;s<n.length;s++){var h=n[s],A=h.getSnapshot;h=h.value;try{if(!Q0(A(),h))return!1}catch{return!1}}if(n=o.child,o.subtreeFlags&16384&&n!==null)n.return=o,o=n;else{if(o===e)break;for(;o.sibling===null;){if(o.return===null||o.return===e)return!0;o=o.return}o.sibling.return=o.return,o=o.sibling}}return!0}function Vt(e,o,n,s){o&=~dl,o&=~Bo,e.suspendedLanes|=o,e.pingedLanes&=~o,s&&(e.warmLanes|=o),s=e.expirationTimes;for(var h=o;0<h;){var A=31-S0(h),k=1<<A;s[A]=-1,h&=~k}n!==0&&co(e,n,o)}function dr(){return(Z2&6)===0?(xn(0),!1):!0}function fl(){if(z2!==null){if(X2===0)var e=z2.return;else e=z2,ht=Co=null,Mc(e),ca=null,Cn=0,e=z2;for(;e!==null;)Bp(e.alternate,e),e=e.return;z2=null}}function ma(e,o){var n=e.timeoutHandle;n!==-1&&(e.timeoutHandle=-1,I6(n)),n=e.cancelPendingCommit,n!==null&&(e.cancelPendingCommit=null,n()),fl(),t0=e,z2=n=st(e.current,null),U2=o,X2=0,oe=null,Nt=!1,da=ze(e,o),ul=!1,Aa=be=dl=Bo=Ht=p0=0,X0=_n=null,Al=!1,(o&8)!==0&&(o|=o&32);var s=e.entangledLanes;if(s!==0)for(e=e.entanglements,s&=o;0<s;){var h=31-S0(s),A=1<<h;o|=e[h],s&=~A}return ft=o,Ii(),n}function Zp(e,o){M2=null,O.H=$i,o===un||o===Ui?(o=uA(),X2=3):o===cA?(o=uA(),X2=4):X2=o===dp?8:o!==null&&typeof o=="object"&&typeof o.then=="function"?6:1,oe=o,z2===null&&(p0=1,nr(e,pe(o,e.current)))}function Xp(){var e=O.H;return O.H=$i,e===null?$i:e}function Yp(){var e=O.A;return O.A=p6,e}function bl(){p0=4,Nt||(U2&4194048)!==U2&&fe.current!==null||(da=!0),(Ht&134217727)===0&&(Bo&134217727)===0||t0===null||Vt(t0,U2,be,!1)}function Cl(e,o,n){var s=Z2;Z2|=2;var h=Xp(),A=Yp();(t0!==e||U2!==o)&&(ur=null,ma(e,o)),o=!1;var k=p0;e:do try{if(X2!==0&&z2!==null){var _=z2,I=oe;switch(X2){case 8:fl(),k=6;break e;case 3:case 2:case 9:case 6:fe.current===null&&(o=!0);var q=X2;if(X2=0,oe=null,ga(e,_,I,q),n&&da){k=0;break e}break;default:q=X2,X2=0,oe=null,ga(e,_,I,q)}}g6(),k=p0;break}catch(t2){Zp(e,t2)}while(!0);return o&&e.shellSuspendCounter++,ht=Co=null,Z2=s,O.H=h,O.A=A,z2===null&&(t0=null,U2=0,Ii()),k}function g6(){for(;z2!==null;)Jp(z2)}function f6(e,o){var n=Z2;Z2|=2;var s=Xp(),h=Yp();t0!==e||U2!==o?(ur=null,hr=H0()+500,ma(e,o)):da=ze(e,o);e:do try{if(X2!==0&&z2!==null){o=z2;var A=oe;t:switch(X2){case 1:X2=0,oe=null,ga(e,o,A,1);break;case 2:case 9:if(lA(A)){X2=0,oe=null,Qp(o);break}o=function(){X2!==2&&X2!==9||t0!==e||(X2=7),Ge(e)},A.then(o,o);break e;case 3:X2=7;break e;case 4:X2=5;break e;case 7:lA(A)?(X2=0,oe=null,Qp(o)):(X2=0,oe=null,ga(e,o,A,7));break;case 5:var k=null;switch(z2.tag){case 26:k=z2.memoizedState;case 5:case 27:var _=z2;if(!k||PF(k)){X2=0,oe=null;var I=_.sibling;if(I!==null)z2=I;else{var q=_.return;q!==null?(z2=q,Ar(q)):z2=null}break t}}X2=0,oe=null,ga(e,o,A,5);break;case 6:X2=0,oe=null,ga(e,o,A,6);break;case 8:fl(),p0=6;break e;default:throw Error(r(462))}}b6();break}catch(t2){Zp(e,t2)}while(!0);return ht=Co=null,O.H=s,O.A=h,Z2=n,z2!==null?0:(t0=null,U2=0,Ii(),p0)}function b6(){for(;z2!==null&&!Ua();)Jp(z2)}function Jp(e){var o=kp(e.alternate,e,ft);e.memoizedProps=e.pendingProps,o===null?Ar(e):z2=o}function Qp(e){var o=e,n=o.alternate;switch(o.tag){case 15:case 0:o=fp(n,o,o.pendingProps,o.type,void 0,U2);break;case 11:o=fp(n,o,o.pendingProps,o.type.render,o.ref,U2);break;case 5:Mc(o);default:Bp(n,o),o=z2=$d(o,ft),o=kp(n,o,ft)}e.memoizedProps=e.pendingProps,o===null?Ar(e):z2=o}function ga(e,o,n,s){ht=Co=null,Mc(o),ca=null,Cn=0;var h=o.return;try{if(c6(e,h,o,n,U2)){p0=1,nr(e,pe(n,e.current)),z2=null;return}}catch(A){if(h!==null)throw z2=h,A;p0=1,nr(e,pe(n,e.current)),z2=null;return}o.flags&32768?(G2||s===1?e=!0:da||(U2&536870912)!==0?e=!1:(Nt=e=!0,(s===2||s===9||s===3||s===6)&&(s=fe.current,s!==null&&s.tag===13&&(s.flags|=16384))),$p(o,e)):Ar(o)}function Ar(e){var o=e;do{if((o.flags&32768)!==0){$p(o,Nt);return}e=o.return;var n=h6(o.alternate,o,ft);if(n!==null){z2=n;return}if(o=o.sibling,o!==null){z2=o;return}z2=o=e}while(o!==null);p0===0&&(p0=5)}function $p(e,o){do{var n=u6(e.alternate,e);if(n!==null){n.flags&=32767,z2=n;return}if(n=e.return,n!==null&&(n.flags|=32768,n.subtreeFlags=0,n.deletions=null),!o&&(e=e.sibling,e!==null)){z2=e;return}z2=e=n}while(e!==null);p0=6,z2=null}function eF(e,o,n,s,h,A,k,_,I){e.cancelPendingCommit=null;do pr();while(T0!==0);if((Z2&6)!==0)throw Error(r(327));if(o!==null){if(o===e.current)throw Error(r(177));if(A=o.lanes|o.childLanes,A|=hc,vi(e,n,A,k,_,I),e===t0&&(z2=t0=null,U2=0),pa=o,jt=e,Fa=n,Fl=A,ml=h,qp=s,(o.subtreeFlags&10256)!==0||(o.flags&10256)!==0?(e.callbackNode=null,e.callbackPriority=0,w6(zo,function(){return iF(),null})):(e.callbackNode=null,e.callbackPriority=0),s=(o.flags&13878)!==0,(o.subtreeFlags&13878)!==0||s){s=O.T,O.T=null,h=W.p,W.p=2,k=Z2,Z2|=4;try{d6(e,o,n)}finally{Z2=k,W.p=h,O.T=s}}T0=1,tF(),oF(),aF()}}function tF(){if(T0===1){T0=0;var e=jt,o=pa,n=(o.flags&13878)!==0;if((o.subtreeFlags&13878)!==0||n){n=O.T,O.T=null;var s=W.p;W.p=2;var h=Z2;Z2|=4;try{Op(o,e);var A=Rl,k=Ud(e.containerInfo),_=A.focusedElem,I=A.selectionRange;if(k!==_&&_&&_.ownerDocument&&Vd(_.ownerDocument.documentElement,_)){if(I!==null&&ic(_)){var q=I.start,t2=I.end;if(t2===void 0&&(t2=q),"selectionStart"in _)_.selectionStart=q,_.selectionEnd=Math.min(t2,_.value.length);else{var i2=_.ownerDocument||document,K=i2&&i2.defaultView||window;if(K.getSelection){var Z=K.getSelection(),x2=_.textContent.length,B2=Math.min(I.start,x2),$2=I.end===void 0?B2:Math.min(I.end,x2);!Z.extend&&B2>$2&&(k=$2,$2=B2,B2=k);var H=jd(_,B2),N=jd(_,$2);if(H&&N&&(Z.rangeCount!==1||Z.anchorNode!==H.node||Z.anchorOffset!==H.offset||Z.focusNode!==N.node||Z.focusOffset!==N.offset)){var V=i2.createRange();V.setStart(H.node,H.offset),Z.removeAllRanges(),B2>$2?(Z.addRange(V),Z.extend(N.node,N.offset)):(V.setEnd(N.node,N.offset),Z.addRange(V))}}}}for(i2=[],Z=_;Z=Z.parentNode;)Z.nodeType===1&&i2.push({element:Z,left:Z.scrollLeft,top:Z.scrollTop});for(typeof _.focus=="function"&&_.focus(),_=0;_<i2.length;_++){var o2=i2[_];o2.element.scrollLeft=o2.left,o2.element.scrollTop=o2.top}}Br=!!Tl,Rl=Tl=null}finally{Z2=h,W.p=s,O.T=n}}e.current=o,T0=2}}function oF(){if(T0===2){T0=0;var e=jt,o=pa,n=(o.flags&8772)!==0;if((o.subtreeFlags&8772)!==0||n){n=O.T,O.T=null;var s=W.p;W.p=2;var h=Z2;Z2|=4;try{Pp(e,o.alternate,o)}finally{Z2=h,W.p=s,O.T=n}}T0=3}}function aF(){if(T0===4||T0===3){T0=0,qa();var e=jt,o=pa,n=Fa,s=qp;(o.subtreeFlags&10256)!==0||(o.flags&10256)!==0?T0=5:(T0=0,pa=jt=null,nF(e,e.pendingLanes));var h=e.pendingLanes;if(h===0&&(zt=null),Za(n),o=o.stateNode,s0&&typeof s0.onCommitFiberRoot=="function")try{s0.onCommitFiberRoot(W0,o,void 0,(o.current.flags&128)===128)}catch{}if(s!==null){o=O.T,h=W.p,W.p=2,O.T=null;try{for(var A=e.onRecoverableError,k=0;k<s.length;k++){var _=s[k];A(_.value,{componentStack:_.stack})}}finally{O.T=o,W.p=h}}(Fa&3)!==0&&pr(),Ge(e),h=e.pendingLanes,(n&4194090)!==0&&(h&42)!==0?e===gl?Sn++:(Sn=0,gl=e):Sn=0,xn(0)}}function nF(e,o){(e.pooledCacheLanes&=o)===0&&(o=e.pooledCache,o!=null&&(e.pooledCache=null,ln(o)))}function pr(e){return tF(),oF(),aF(),iF()}function iF(){if(T0!==5)return!1;var e=jt,o=Fl;Fl=0;var n=Za(Fa),s=O.T,h=W.p;try{W.p=32>n?32:n,O.T=null,n=ml,ml=null;var A=jt,k=Fa;if(T0=0,pa=jt=null,Fa=0,(Z2&6)!==0)throw Error(r(331));var _=Z2;if(Z2|=4,Vp(A.current),Hp(A,A.current,k,n),Z2=_,xn(0,!1),s0&&typeof s0.onPostCommitFiberRoot=="function")try{s0.onPostCommitFiberRoot(W0,A)}catch{}return!0}finally{W.p=h,O.T=s,nF(e,o)}}function rF(e,o,n){o=pe(n,o),o=Xc(e.stateNode,o,2),e=Tt(e,o,2),e!==null&&(so(e,2),Ge(e))}function e0(e,o,n){if(e.tag===3)rF(e,e,n);else for(;o!==null;){if(o.tag===3){rF(o,e,n);break}else if(o.tag===1){var s=o.stateNode;if(typeof o.type.getDerivedStateFromError=="function"||typeof s.componentDidCatch=="function"&&(zt===null||!zt.has(s))){e=pe(n,e),n=hp(2),s=Tt(o,n,2),s!==null&&(up(n,s,o,e),so(s,2),Ge(s));break}}o=o.return}}function yl(e,o,n){var s=e.pingCache;if(s===null){s=e.pingCache=new F6;var h=new Set;s.set(o,h)}else h=s.get(o),h===void 0&&(h=new Set,s.set(o,h));h.has(n)||(ul=!0,h.add(n),e=C6.bind(null,e,o,n),o.then(e,e))}function C6(e,o,n){var s=e.pingCache;s!==null&&s.delete(o),e.pingedLanes|=e.suspendedLanes&n,e.warmLanes&=~n,t0===e&&(U2&n)===n&&(p0===4||p0===3&&(U2&62914560)===U2&&300>H0()-pl?(Z2&2)===0&&ma(e,0):dl|=n,Aa===U2&&(Aa=0)),Ge(e)}function sF(e,o){o===0&&(o=yi()),e=Qo(e,o),e!==null&&(so(e,o),Ge(e))}function y6(e){var o=e.memoizedState,n=0;o!==null&&(n=o.retryLane),sF(e,n)}function v6(e,o){var n=0;switch(e.tag){case 13:var s=e.stateNode,h=e.memoizedState;h!==null&&(n=h.retryLane);break;case 19:s=e.stateNode;break;case 22:s=e.stateNode._retryCache;break;default:throw Error(r(314))}s!==null&&s.delete(o),sF(e,n)}function w6(e,o){return Se(e,o)}var Fr=null,fa=null,vl=!1,mr=!1,wl=!1,Eo=0;function Ge(e){e!==fa&&e.next===null&&(fa===null?Fr=fa=e:fa=fa.next=e),mr=!0,vl||(vl=!0,D6())}function xn(e,o){if(!wl&&mr){wl=!0;do for(var n=!1,s=Fr;s!==null;){if(e!==0){var h=s.pendingLanes;if(h===0)var A=0;else{var k=s.suspendedLanes,_=s.pingedLanes;A=(1<<31-S0(42|e)+1)-1,A&=h&~(k&~_),A=A&201326741?A&201326741|1:A?A|2:0}A!==0&&(n=!0,uF(s,A))}else A=U2,A=ro(s,s===t0?A:0,s.cancelPendingCommit!==null||s.timeoutHandle!==-1),(A&3)===0||ze(s,A)||(n=!0,uF(s,A));s=s.next}while(n);wl=!1}}function k6(){cF()}function cF(){mr=vl=!1;var e=0;Eo!==0&&(P6()&&(e=Eo),Eo=0);for(var o=H0(),n=null,s=Fr;s!==null;){var h=s.next,A=lF(s,o);A===0?(s.next=null,n===null?Fr=h:n.next=h,h===null&&(fa=n)):(n=s,(e!==0||(A&3)!==0)&&(mr=!0)),s=h}xn(e)}function lF(e,o){for(var n=e.suspendedLanes,s=e.pingedLanes,h=e.expirationTimes,A=e.pendingLanes&-62914561;0<A;){var k=31-S0(A),_=1<<k,I=h[k];I===-1?((_&n)===0||(_&s)!==0)&&(h[k]=Ci(_,o)):I<=o&&(e.expiredLanes|=_),A&=~_}if(o=t0,n=U2,n=ro(e,e===o?n:0,e.cancelPendingCommit!==null||e.timeoutHandle!==-1),s=e.callbackNode,n===0||e===o&&(X2===2||X2===9)||e.cancelPendingCommit!==null)return s!==null&&s!==null&&q0(s),e.callbackNode=null,e.callbackPriority=0;if((n&3)===0||ze(e,n)){if(o=n&-n,o===e.callbackPriority)return o;switch(s!==null&&q0(s),Za(n)){case 2:case 8:n=gi;break;case 32:n=zo;break;case 268435456:n=kt;break;default:n=zo}return s=hF.bind(null,e),n=Se(n,s),e.callbackPriority=o,e.callbackNode=n,o}return s!==null&&s!==null&&q0(s),e.callbackPriority=2,e.callbackNode=null,2}function hF(e,o){if(T0!==0&&T0!==5)return e.callbackNode=null,e.callbackPriority=0,null;var n=e.callbackNode;if(pr()&&e.callbackNode!==n)return null;var s=U2;return s=ro(e,e===t0?s:0,e.cancelPendingCommit!==null||e.timeoutHandle!==-1),s===0?null:(Gp(e,s,o),lF(e,H0()),e.callbackNode!=null&&e.callbackNode===n?hF.bind(null,e):null)}function uF(e,o){if(pr())return null;Gp(e,o,!0)}function D6(){M6(function(){(Z2&6)!==0?Se(et,k6):cF()})}function kl(){return Eo===0&&(Eo=jo()),Eo}function dF(e){return e==null||typeof e=="symbol"||typeof e=="boolean"?null:typeof e=="function"?e:Ei(""+e)}function AF(e,o){var n=o.ownerDocument.createElement("input");return n.name=o.name,n.value=o.value,e.id&&n.setAttribute("form",e.id),o.parentNode.insertBefore(n,o),e=new FormData(e),n.parentNode.removeChild(n),e}function B6(e,o,n,s,h){if(o==="submit"&&n&&n.stateNode===h){var A=dF((h[h2]||null).action),k=s.submitter;k&&(o=(o=k[h2]||null)?dF(o.formAction):k.getAttribute("formAction"),o!==null&&(A=o,k=null));var _=new Ti("action","action",null,s,h);e.push({event:_,listeners:[{instance:null,listener:function(){if(s.defaultPrevented){if(Eo!==0){var I=k?AF(h,k):new FormData(h);qc(n,{pending:!0,data:I,method:h.method,action:A},null,I)}}else typeof A=="function"&&(_.preventDefault(),I=k?AF(h,k):new FormData(h),qc(n,{pending:!0,data:I,method:h.method,action:A},A,I))},currentTarget:h}]})}}for(var Dl=0;Dl<lc.length;Dl++){var Bl=lc[Dl],E6=Bl.toLowerCase(),_6=Bl[0].toUpperCase()+Bl.slice(1);Te(E6,"on"+_6)}Te(Gd,"onAnimationEnd"),Te(Kd,"onAnimationIteration"),Te(Zd,"onAnimationStart"),Te("dblclick","onDoubleClick"),Te("focusin","onFocus"),Te("focusout","onBlur"),Te(WC,"onTransitionRun"),Te(GC,"onTransitionStart"),Te(KC,"onTransitionCancel"),Te(Xd,"onTransitionEnd"),z0("onMouseEnter",["mouseout","mouseover"]),z0("onMouseLeave",["mouseout","mouseover"]),z0("onPointerEnter",["pointerout","pointerover"]),z0("onPointerLeave",["pointerout","pointerover"]),J0("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),J0("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),J0("onBeforeInput",["compositionend","keypress","textInput","paste"]),J0("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),J0("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),J0("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Tn="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),S6=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(Tn));function pF(e,o){o=(o&4)!==0;for(var n=0;n<e.length;n++){var s=e[n],h=s.event;s=s.listeners;e:{var A=void 0;if(o)for(var k=s.length-1;0<=k;k--){var _=s[k],I=_.instance,q=_.currentTarget;if(_=_.listener,I!==A&&h.isPropagationStopped())break e;A=_,h.currentTarget=q;try{A(h)}catch(t2){ar(t2)}h.currentTarget=null,A=I}else for(k=0;k<s.length;k++){if(_=s[k],I=_.instance,q=_.currentTarget,_=_.listener,I!==A&&h.isPropagationStopped())break e;A=_,h.currentTarget=q;try{A(h)}catch(t2){ar(t2)}h.currentTarget=null,A=I}}}}function j2(e,o){var n=o[b2];n===void 0&&(n=o[b2]=new Set);var s=e+"__bubble";n.has(s)||(FF(o,e,2,!1),n.add(s))}function El(e,o,n){var s=0;o&&(s|=4),FF(n,e,s,o)}var gr="_reactListening"+Math.random().toString(36).slice(2);function _l(e){if(!e[gr]){e[gr]=!0,Y2.forEach(function(n){n!=="selectionchange"&&(S6.has(n)||El(n,!1,e),El(n,!0,e))});var o=e.nodeType===9?e:e.ownerDocument;o===null||o[gr]||(o[gr]=!0,El("selectionchange",!1,o))}}function FF(e,o,n,s){switch(HF(o)){case 2:var h=oy;break;case 8:h=ay;break;default:h=Vl}n=h.bind(null,o,n,e),h=void 0,!Ys||o!=="touchstart"&&o!=="touchmove"&&o!=="wheel"||(h=!0),s?h!==void 0?e.addEventListener(o,n,{capture:!0,passive:h}):e.addEventListener(o,n,!0):h!==void 0?e.addEventListener(o,n,{passive:h}):e.addEventListener(o,n,!1)}function Sl(e,o,n,s,h){var A=s;if((o&1)===0&&(o&2)===0&&s!==null)e:for(;;){if(s===null)return;var k=s.tag;if(k===3||k===4){var _=s.stateNode.containerInfo;if(_===h)break;if(k===4)for(k=s.return;k!==null;){var I=k.tag;if((I===3||I===4)&&k.stateNode.containerInfo===h)return;k=k.return}for(;_!==null;){if(k=S2(_),k===null)return;if(I=k.tag,I===5||I===6||I===26||I===27){s=A=k;continue e}_=_.parentNode}}s=s.return}vd(function(){var q=A,t2=Zs(n),i2=[];e:{var K=Yd.get(e);if(K!==void 0){var Z=Ti,x2=e;switch(e){case"keypress":if(Si(n)===0)break e;case"keydown":case"keyup":Z=wC;break;case"focusin":x2="focus",Z=ec;break;case"focusout":x2="blur",Z=ec;break;case"beforeblur":case"afterblur":Z=ec;break;case"click":if(n.button===2)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":Z=Dd;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":Z=uC;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":Z=BC;break;case Gd:case Kd:case Zd:Z=pC;break;case Xd:Z=_C;break;case"scroll":case"scrollend":Z=lC;break;case"wheel":Z=xC;break;case"copy":case"cut":case"paste":Z=mC;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":Z=Ed;break;case"toggle":case"beforetoggle":Z=RC}var B2=(o&4)!==0,$2=!B2&&(e==="scroll"||e==="scrollend"),H=B2?K!==null?K+"Capture":null:K;B2=[];for(var N=q,V;N!==null;){var o2=N;if(V=o2.stateNode,o2=o2.tag,o2!==5&&o2!==26&&o2!==27||V===null||H===null||(o2=Xa(N,H),o2!=null&&B2.push(Rn(N,o2,V))),$2)break;N=N.return}0<B2.length&&(K=new Z(K,x2,null,n,t2),i2.push({event:K,listeners:B2}))}}if((o&7)===0){e:{if(K=e==="mouseover"||e==="pointerover",Z=e==="mouseout"||e==="pointerout",K&&n!==Ks&&(x2=n.relatedTarget||n.fromElement)&&(S2(x2)||x2[m2]))break e;if((Z||K)&&(K=t2.window===t2?t2:(K=t2.ownerDocument)?K.defaultView||K.parentWindow:window,Z?(x2=n.relatedTarget||n.toElement,Z=q,x2=x2?S2(x2):null,x2!==null&&($2=l(x2),B2=x2.tag,x2!==$2||B2!==5&&B2!==27&&B2!==6)&&(x2=null)):(Z=null,x2=q),Z!==x2)){if(B2=Dd,o2="onMouseLeave",H="onMouseEnter",N="mouse",(e==="pointerout"||e==="pointerover")&&(B2=Ed,o2="onPointerLeave",H="onPointerEnter",N="pointer"),$2=Z==null?K:u0(Z),V=x2==null?K:u0(x2),K=new B2(o2,N+"leave",Z,n,t2),K.target=$2,K.relatedTarget=V,o2=null,S2(t2)===q&&(B2=new B2(H,N+"enter",x2,n,t2),B2.target=V,B2.relatedTarget=$2,o2=B2),$2=o2,Z&&x2)t:{for(B2=Z,H=x2,N=0,V=B2;V;V=ba(V))N++;for(V=0,o2=H;o2;o2=ba(o2))V++;for(;0<N-V;)B2=ba(B2),N--;for(;0<V-N;)H=ba(H),V--;for(;N--;){if(B2===H||H!==null&&B2===H.alternate)break t;B2=ba(B2),H=ba(H)}B2=null}else B2=null;Z!==null&&mF(i2,K,Z,B2,!1),x2!==null&&$2!==null&&mF(i2,$2,x2,B2,!0)}}e:{if(K=q?u0(q):window,Z=K.nodeName&&K.nodeName.toLowerCase(),Z==="select"||Z==="input"&&K.type==="file")var p2=Md;else if(Pd(K))if(Ld)p2=VC;else{p2=zC;var H2=HC}else Z=K.nodeName,!Z||Z.toLowerCase()!=="input"||K.type!=="checkbox"&&K.type!=="radio"?q&&Gs(q.elementType)&&(p2=Md):p2=jC;if(p2&&(p2=p2(e,q))){Id(i2,p2,n,t2);break e}H2&&H2(e,K,q),e==="focusout"&&q&&K.type==="number"&&q.memoizedProps.value!=null&&Ws(K,"number",K.value)}switch(H2=q?u0(q):window,e){case"focusin":(Pd(H2)||H2.contentEditable==="true")&&(Xo=H2,rc=q,an=null);break;case"focusout":an=rc=Xo=null;break;case"mousedown":sc=!0;break;case"contextmenu":case"mouseup":case"dragend":sc=!1,qd(i2,n,t2);break;case"selectionchange":if(qC)break;case"keydown":case"keyup":qd(i2,n,t2)}var y2;if(oc)e:{switch(e){case"compositionstart":var _2="onCompositionStart";break e;case"compositionend":_2="onCompositionEnd";break e;case"compositionupdate":_2="onCompositionUpdate";break e}_2=void 0}else Zo?Td(e,n)&&(_2="onCompositionEnd"):e==="keydown"&&n.keyCode===229&&(_2="onCompositionStart");_2&&(_d&&n.locale!=="ko"&&(Zo||_2!=="onCompositionStart"?_2==="onCompositionEnd"&&Zo&&(y2=wd()):(Et=t2,Js="value"in Et?Et.value:Et.textContent,Zo=!0)),H2=fr(q,_2),0<H2.length&&(_2=new Bd(_2,e,null,n,t2),i2.push({event:_2,listeners:H2}),y2?_2.data=y2:(y2=Rd(n),y2!==null&&(_2.data=y2)))),(y2=IC?MC(e,n):LC(e,n))&&(_2=fr(q,"onBeforeInput"),0<_2.length&&(H2=new Bd("onBeforeInput","beforeinput",null,n,t2),i2.push({event:H2,listeners:_2}),H2.data=y2)),B6(i2,e,q,n,t2)}pF(i2,o)})}function Rn(e,o,n){return{instance:e,listener:o,currentTarget:n}}function fr(e,o){for(var n=o+"Capture",s=[];e!==null;){var h=e,A=h.stateNode;if(h=h.tag,h!==5&&h!==26&&h!==27||A===null||(h=Xa(e,n),h!=null&&s.unshift(Rn(e,h,A)),h=Xa(e,o),h!=null&&s.push(Rn(e,h,A))),e.tag===3)return s;e=e.return}return[]}function ba(e){if(e===null)return null;do e=e.return;while(e&&e.tag!==5&&e.tag!==27);return e||null}function mF(e,o,n,s,h){for(var A=o._reactName,k=[];n!==null&&n!==s;){var _=n,I=_.alternate,q=_.stateNode;if(_=_.tag,I!==null&&I===s)break;_!==5&&_!==26&&_!==27||q===null||(I=q,h?(q=Xa(n,A),q!=null&&k.unshift(Rn(n,q,I))):h||(q=Xa(n,A),q!=null&&k.push(Rn(n,q,I)))),n=n.return}k.length!==0&&e.push({event:o,listeners:k})}var x6=/\r\n?/g,T6=/\u0000|\uFFFD/g;function gF(e){return(typeof e=="string"?e:""+e).replace(x6,`
`).replace(T6,"")}function fF(e,o){return o=gF(o),gF(e)===o}function br(){}function Q2(e,o,n,s,h,A){switch(n){case"children":typeof s=="string"?o==="body"||o==="textarea"&&s===""||Wo(e,s):(typeof s=="number"||typeof s=="bigint")&&o!=="body"&&Wo(e,""+s);break;case"className":it(e,"class",s);break;case"tabIndex":it(e,"tabindex",s);break;case"dir":case"role":case"viewBox":case"width":case"height":it(e,n,s);break;case"style":Cd(e,s,A);break;case"data":if(o!=="object"){it(e,"data",s);break}case"src":case"href":if(s===""&&(o!=="a"||n!=="href")){e.removeAttribute(n);break}if(s==null||typeof s=="function"||typeof s=="symbol"||typeof s=="boolean"){e.removeAttribute(n);break}s=Ei(""+s),e.setAttribute(n,s);break;case"action":case"formAction":if(typeof s=="function"){e.setAttribute(n,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}else typeof A=="function"&&(n==="formAction"?(o!=="input"&&Q2(e,o,"name",h.name,h,null),Q2(e,o,"formEncType",h.formEncType,h,null),Q2(e,o,"formMethod",h.formMethod,h,null),Q2(e,o,"formTarget",h.formTarget,h,null)):(Q2(e,o,"encType",h.encType,h,null),Q2(e,o,"method",h.method,h,null),Q2(e,o,"target",h.target,h,null)));if(s==null||typeof s=="symbol"||typeof s=="boolean"){e.removeAttribute(n);break}s=Ei(""+s),e.setAttribute(n,s);break;case"onClick":s!=null&&(e.onclick=br);break;case"onScroll":s!=null&&j2("scroll",e);break;case"onScrollEnd":s!=null&&j2("scrollend",e);break;case"dangerouslySetInnerHTML":if(s!=null){if(typeof s!="object"||!("__html"in s))throw Error(r(61));if(n=s.__html,n!=null){if(h.children!=null)throw Error(r(60));e.innerHTML=n}}break;case"multiple":e.multiple=s&&typeof s!="function"&&typeof s!="symbol";break;case"muted":e.muted=s&&typeof s!="function"&&typeof s!="symbol";break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":break;case"autoFocus":break;case"xlinkHref":if(s==null||typeof s=="function"||typeof s=="boolean"||typeof s=="symbol"){e.removeAttribute("xlink:href");break}n=Ei(""+s),e.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",n);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":s!=null&&typeof s!="function"&&typeof s!="symbol"?e.setAttribute(n,""+s):e.removeAttribute(n);break;case"inert":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":s&&typeof s!="function"&&typeof s!="symbol"?e.setAttribute(n,""):e.removeAttribute(n);break;case"capture":case"download":s===!0?e.setAttribute(n,""):s!==!1&&s!=null&&typeof s!="function"&&typeof s!="symbol"?e.setAttribute(n,s):e.removeAttribute(n);break;case"cols":case"rows":case"size":case"span":s!=null&&typeof s!="function"&&typeof s!="symbol"&&!isNaN(s)&&1<=s?e.setAttribute(n,s):e.removeAttribute(n);break;case"rowSpan":case"start":s==null||typeof s=="function"||typeof s=="symbol"||isNaN(s)?e.removeAttribute(n):e.setAttribute(n,s);break;case"popover":j2("beforetoggle",e),j2("toggle",e),nt(e,"popover",s);break;case"xlinkActuate":N2(e,"http://www.w3.org/1999/xlink","xlink:actuate",s);break;case"xlinkArcrole":N2(e,"http://www.w3.org/1999/xlink","xlink:arcrole",s);break;case"xlinkRole":N2(e,"http://www.w3.org/1999/xlink","xlink:role",s);break;case"xlinkShow":N2(e,"http://www.w3.org/1999/xlink","xlink:show",s);break;case"xlinkTitle":N2(e,"http://www.w3.org/1999/xlink","xlink:title",s);break;case"xlinkType":N2(e,"http://www.w3.org/1999/xlink","xlink:type",s);break;case"xmlBase":N2(e,"http://www.w3.org/XML/1998/namespace","xml:base",s);break;case"xmlLang":N2(e,"http://www.w3.org/XML/1998/namespace","xml:lang",s);break;case"xmlSpace":N2(e,"http://www.w3.org/XML/1998/namespace","xml:space",s);break;case"is":nt(e,"is",s);break;case"innerText":case"textContent":break;default:(!(2<n.length)||n[0]!=="o"&&n[0]!=="O"||n[1]!=="n"&&n[1]!=="N")&&(n=sC.get(n)||n,nt(e,n,s))}}function xl(e,o,n,s,h,A){switch(n){case"style":Cd(e,s,A);break;case"dangerouslySetInnerHTML":if(s!=null){if(typeof s!="object"||!("__html"in s))throw Error(r(61));if(n=s.__html,n!=null){if(h.children!=null)throw Error(r(60));e.innerHTML=n}}break;case"children":typeof s=="string"?Wo(e,s):(typeof s=="number"||typeof s=="bigint")&&Wo(e,""+s);break;case"onScroll":s!=null&&j2("scroll",e);break;case"onScrollEnd":s!=null&&j2("scrollend",e);break;case"onClick":s!=null&&(e.onclick=br);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":break;case"innerText":case"textContent":break;default:if(!je.hasOwnProperty(n))e:{if(n[0]==="o"&&n[1]==="n"&&(h=n.endsWith("Capture"),o=n.slice(2,h?n.length-7:void 0),A=e[h2]||null,A=A!=null?A[n]:null,typeof A=="function"&&e.removeEventListener(o,A,h),typeof s=="function")){typeof A!="function"&&A!==null&&(n in e?e[n]=null:e.hasAttribute(n)&&e.removeAttribute(n)),e.addEventListener(o,s,h);break e}n in e?e[n]=s:s===!0?e.setAttribute(n,""):nt(e,n,s)}}}function R0(e,o,n){switch(o){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":j2("error",e),j2("load",e);var s=!1,h=!1,A;for(A in n)if(n.hasOwnProperty(A)){var k=n[A];if(k!=null)switch(A){case"src":s=!0;break;case"srcSet":h=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(r(137,o));default:Q2(e,o,A,k,n,null)}}h&&Q2(e,o,"srcSet",n.srcSet,n,null),s&&Q2(e,o,"src",n.src,n,null);return;case"input":j2("invalid",e);var _=A=k=h=null,I=null,q=null;for(s in n)if(n.hasOwnProperty(s)){var t2=n[s];if(t2!=null)switch(s){case"name":h=t2;break;case"type":k=t2;break;case"checked":I=t2;break;case"defaultChecked":q=t2;break;case"value":A=t2;break;case"defaultValue":_=t2;break;case"children":case"dangerouslySetInnerHTML":if(t2!=null)throw Error(r(137,o));break;default:Q2(e,o,s,t2,n,null)}}md(e,A,_,I,q,k,h,!1),Di(e);return;case"select":j2("invalid",e),s=k=A=null;for(h in n)if(n.hasOwnProperty(h)&&(_=n[h],_!=null))switch(h){case"value":A=_;break;case"defaultValue":k=_;break;case"multiple":s=_;default:Q2(e,o,h,_,n,null)}o=A,n=k,e.multiple=!!s,o!=null?qo(e,!!s,o,!1):n!=null&&qo(e,!!s,n,!0);return;case"textarea":j2("invalid",e),A=h=s=null;for(k in n)if(n.hasOwnProperty(k)&&(_=n[k],_!=null))switch(k){case"value":s=_;break;case"defaultValue":h=_;break;case"children":A=_;break;case"dangerouslySetInnerHTML":if(_!=null)throw Error(r(91));break;default:Q2(e,o,k,_,n,null)}fd(e,s,h,A),Di(e);return;case"option":for(I in n)if(n.hasOwnProperty(I)&&(s=n[I],s!=null))switch(I){case"selected":e.selected=s&&typeof s!="function"&&typeof s!="symbol";break;default:Q2(e,o,I,s,n,null)}return;case"dialog":j2("beforetoggle",e),j2("toggle",e),j2("cancel",e),j2("close",e);break;case"iframe":case"object":j2("load",e);break;case"video":case"audio":for(s=0;s<Tn.length;s++)j2(Tn[s],e);break;case"image":j2("error",e),j2("load",e);break;case"details":j2("toggle",e);break;case"embed":case"source":case"link":j2("error",e),j2("load",e);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(q in n)if(n.hasOwnProperty(q)&&(s=n[q],s!=null))switch(q){case"children":case"dangerouslySetInnerHTML":throw Error(r(137,o));default:Q2(e,o,q,s,n,null)}return;default:if(Gs(o)){for(t2 in n)n.hasOwnProperty(t2)&&(s=n[t2],s!==void 0&&xl(e,o,t2,s,n,void 0));return}}for(_ in n)n.hasOwnProperty(_)&&(s=n[_],s!=null&&Q2(e,o,_,s,n,null))}function R6(e,o,n,s){switch(o){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var h=null,A=null,k=null,_=null,I=null,q=null,t2=null;for(Z in n){var i2=n[Z];if(n.hasOwnProperty(Z)&&i2!=null)switch(Z){case"checked":break;case"value":break;case"defaultValue":I=i2;default:s.hasOwnProperty(Z)||Q2(e,o,Z,null,s,i2)}}for(var K in s){var Z=s[K];if(i2=n[K],s.hasOwnProperty(K)&&(Z!=null||i2!=null))switch(K){case"type":A=Z;break;case"name":h=Z;break;case"checked":q=Z;break;case"defaultChecked":t2=Z;break;case"value":k=Z;break;case"defaultValue":_=Z;break;case"children":case"dangerouslySetInnerHTML":if(Z!=null)throw Error(r(137,o));break;default:Z!==i2&&Q2(e,o,K,Z,s,i2)}}qs(e,k,_,I,q,t2,A,h);return;case"select":Z=k=_=K=null;for(A in n)if(I=n[A],n.hasOwnProperty(A)&&I!=null)switch(A){case"value":break;case"multiple":Z=I;default:s.hasOwnProperty(A)||Q2(e,o,A,null,s,I)}for(h in s)if(A=s[h],I=n[h],s.hasOwnProperty(h)&&(A!=null||I!=null))switch(h){case"value":K=A;break;case"defaultValue":_=A;break;case"multiple":k=A;default:A!==I&&Q2(e,o,h,A,s,I)}o=_,n=k,s=Z,K!=null?qo(e,!!n,K,!1):!!s!=!!n&&(o!=null?qo(e,!!n,o,!0):qo(e,!!n,n?[]:"",!1));return;case"textarea":Z=K=null;for(_ in n)if(h=n[_],n.hasOwnProperty(_)&&h!=null&&!s.hasOwnProperty(_))switch(_){case"value":break;case"children":break;default:Q2(e,o,_,null,s,h)}for(k in s)if(h=s[k],A=n[k],s.hasOwnProperty(k)&&(h!=null||A!=null))switch(k){case"value":K=h;break;case"defaultValue":Z=h;break;case"children":break;case"dangerouslySetInnerHTML":if(h!=null)throw Error(r(91));break;default:h!==A&&Q2(e,o,k,h,s,A)}gd(e,K,Z);return;case"option":for(var x2 in n)if(K=n[x2],n.hasOwnProperty(x2)&&K!=null&&!s.hasOwnProperty(x2))switch(x2){case"selected":e.selected=!1;break;default:Q2(e,o,x2,null,s,K)}for(I in s)if(K=s[I],Z=n[I],s.hasOwnProperty(I)&&K!==Z&&(K!=null||Z!=null))switch(I){case"selected":e.selected=K&&typeof K!="function"&&typeof K!="symbol";break;default:Q2(e,o,I,K,s,Z)}return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var B2 in n)K=n[B2],n.hasOwnProperty(B2)&&K!=null&&!s.hasOwnProperty(B2)&&Q2(e,o,B2,null,s,K);for(q in s)if(K=s[q],Z=n[q],s.hasOwnProperty(q)&&K!==Z&&(K!=null||Z!=null))switch(q){case"children":case"dangerouslySetInnerHTML":if(K!=null)throw Error(r(137,o));break;default:Q2(e,o,q,K,s,Z)}return;default:if(Gs(o)){for(var $2 in n)K=n[$2],n.hasOwnProperty($2)&&K!==void 0&&!s.hasOwnProperty($2)&&xl(e,o,$2,void 0,s,K);for(t2 in s)K=s[t2],Z=n[t2],!s.hasOwnProperty(t2)||K===Z||K===void 0&&Z===void 0||xl(e,o,t2,K,s,Z);return}}for(var H in n)K=n[H],n.hasOwnProperty(H)&&K!=null&&!s.hasOwnProperty(H)&&Q2(e,o,H,null,s,K);for(i2 in s)K=s[i2],Z=n[i2],!s.hasOwnProperty(i2)||K===Z||K==null&&Z==null||Q2(e,o,i2,K,s,Z)}var Tl=null,Rl=null;function Cr(e){return e.nodeType===9?e:e.ownerDocument}function bF(e){switch(e){case"http://www.w3.org/2000/svg":return 1;case"http://www.w3.org/1998/Math/MathML":return 2;default:return 0}}function CF(e,o){if(e===0)switch(o){case"svg":return 1;case"math":return 2;default:return 0}return e===1&&o==="foreignObject"?0:e}function Pl(e,o){return e==="textarea"||e==="noscript"||typeof o.children=="string"||typeof o.children=="number"||typeof o.children=="bigint"||typeof o.dangerouslySetInnerHTML=="object"&&o.dangerouslySetInnerHTML!==null&&o.dangerouslySetInnerHTML.__html!=null}var Il=null;function P6(){var e=window.event;return e&&e.type==="popstate"?e===Il?!1:(Il=e,!0):(Il=null,!1)}var yF=typeof setTimeout=="function"?setTimeout:void 0,I6=typeof clearTimeout=="function"?clearTimeout:void 0,vF=typeof Promise=="function"?Promise:void 0,M6=typeof queueMicrotask=="function"?queueMicrotask:typeof vF<"u"?function(e){return vF.resolve(null).then(e).catch(L6)}:yF;function L6(e){setTimeout(function(){throw e})}function Ut(e){return e==="head"}function wF(e,o){var n=o,s=0,h=0;do{var A=n.nextSibling;if(e.removeChild(n),A&&A.nodeType===8)if(n=A.data,n==="/$"){if(0<s&&8>s){n=s;var k=e.ownerDocument;if(n&1&&Pn(k.documentElement),n&2&&Pn(k.body),n&4)for(n=k.head,Pn(n),k=n.firstChild;k;){var _=k.nextSibling,I=k.nodeName;k[w2]||I==="SCRIPT"||I==="STYLE"||I==="LINK"&&k.rel.toLowerCase()==="stylesheet"||n.removeChild(k),k=_}}if(h===0){e.removeChild(A),jn(o);return}h--}else n==="$"||n==="$?"||n==="$!"?h++:s=n.charCodeAt(0)-48;else s=0;n=A}while(n);jn(o)}function Ml(e){var o=e.firstChild;for(o&&o.nodeType===10&&(o=o.nextSibling);o;){var n=o;switch(o=o.nextSibling,n.nodeName){case"HTML":case"HEAD":case"BODY":Ml(n),C2(n);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if(n.rel.toLowerCase()==="stylesheet")continue}e.removeChild(n)}}function O6(e,o,n,s){for(;e.nodeType===1;){var h=n;if(e.nodeName.toLowerCase()!==o.toLowerCase()){if(!s&&(e.nodeName!=="INPUT"||e.type!=="hidden"))break}else if(s){if(!e[w2])switch(o){case"meta":if(!e.hasAttribute("itemprop"))break;return e;case"link":if(A=e.getAttribute("rel"),A==="stylesheet"&&e.hasAttribute("data-precedence"))break;if(A!==h.rel||e.getAttribute("href")!==(h.href==null||h.href===""?null:h.href)||e.getAttribute("crossorigin")!==(h.crossOrigin==null?null:h.crossOrigin)||e.getAttribute("title")!==(h.title==null?null:h.title))break;return e;case"style":if(e.hasAttribute("data-precedence"))break;return e;case"script":if(A=e.getAttribute("src"),(A!==(h.src==null?null:h.src)||e.getAttribute("type")!==(h.type==null?null:h.type)||e.getAttribute("crossorigin")!==(h.crossOrigin==null?null:h.crossOrigin))&&A&&e.hasAttribute("async")&&!e.hasAttribute("itemprop"))break;return e;default:return e}}else if(o==="input"&&e.type==="hidden"){var A=h.name==null?null:""+h.name;if(h.type==="hidden"&&e.getAttribute("name")===A)return e}else return e;if(e=Pe(e.nextSibling),e===null)break}return null}function N6(e,o,n){if(o==="")return null;for(;e.nodeType!==3;)if((e.nodeType!==1||e.nodeName!=="INPUT"||e.type!=="hidden")&&!n||(e=Pe(e.nextSibling),e===null))return null;return e}function Ll(e){return e.data==="$!"||e.data==="$?"&&e.ownerDocument.readyState==="complete"}function H6(e,o){var n=e.ownerDocument;if(e.data!=="$?"||n.readyState==="complete")o();else{var s=function(){o(),n.removeEventListener("DOMContentLoaded",s)};n.addEventListener("DOMContentLoaded",s),e._reactRetry=s}}function Pe(e){for(;e!=null;e=e.nextSibling){var o=e.nodeType;if(o===1||o===3)break;if(o===8){if(o=e.data,o==="$"||o==="$!"||o==="$?"||o==="F!"||o==="F")break;if(o==="/$")return null}}return e}var Ol=null;function kF(e){e=e.previousSibling;for(var o=0;e;){if(e.nodeType===8){var n=e.data;if(n==="$"||n==="$!"||n==="$?"){if(o===0)return e;o--}else n==="/$"&&o++}e=e.previousSibling}return null}function DF(e,o,n){switch(o=Cr(n),e){case"html":if(e=o.documentElement,!e)throw Error(r(452));return e;case"head":if(e=o.head,!e)throw Error(r(453));return e;case"body":if(e=o.body,!e)throw Error(r(454));return e;default:throw Error(r(451))}}function Pn(e){for(var o=e.attributes;o.length;)e.removeAttributeNode(o[0]);C2(e)}var Ce=new Map,BF=new Set;function yr(e){return typeof e.getRootNode=="function"?e.getRootNode():e.nodeType===9?e:e.ownerDocument}var bt=W.d;W.d={f:z6,r:j6,D:V6,C:U6,L:q6,m:W6,X:K6,S:G6,M:Z6};function z6(){var e=bt.f(),o=dr();return e||o}function j6(e){var o=W2(e);o!==null&&o.tag===5&&o.type==="form"?GA(o):bt.r(e)}var Ca=typeof document>"u"?null:document;function EF(e,o,n){var s=Ca;if(s&&typeof o=="string"&&o){var h=Ae(o);h='link[rel="'+e+'"][href="'+h+'"]',typeof n=="string"&&(h+='[crossorigin="'+n+'"]'),BF.has(h)||(BF.add(h),e={rel:e,crossOrigin:n,href:o},s.querySelector(h)===null&&(o=s.createElement("link"),R0(o,"link",e),R2(o),s.head.appendChild(o)))}}function V6(e){bt.D(e),EF("dns-prefetch",e,null)}function U6(e,o){bt.C(e,o),EF("preconnect",e,o)}function q6(e,o,n){bt.L(e,o,n);var s=Ca;if(s&&e&&o){var h='link[rel="preload"][as="'+Ae(o)+'"]';o==="image"&&n&&n.imageSrcSet?(h+='[imagesrcset="'+Ae(n.imageSrcSet)+'"]',typeof n.imageSizes=="string"&&(h+='[imagesizes="'+Ae(n.imageSizes)+'"]')):h+='[href="'+Ae(e)+'"]';var A=h;switch(o){case"style":A=ya(e);break;case"script":A=va(e)}Ce.has(A)||(e=f({rel:"preload",href:o==="image"&&n&&n.imageSrcSet?void 0:e,as:o},n),Ce.set(A,e),s.querySelector(h)!==null||o==="style"&&s.querySelector(In(A))||o==="script"&&s.querySelector(Mn(A))||(o=s.createElement("link"),R0(o,"link",e),R2(o),s.head.appendChild(o)))}}function W6(e,o){bt.m(e,o);var n=Ca;if(n&&e){var s=o&&typeof o.as=="string"?o.as:"script",h='link[rel="modulepreload"][as="'+Ae(s)+'"][href="'+Ae(e)+'"]',A=h;switch(s){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":A=va(e)}if(!Ce.has(A)&&(e=f({rel:"modulepreload",href:e},o),Ce.set(A,e),n.querySelector(h)===null)){switch(s){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(n.querySelector(Mn(A)))return}s=n.createElement("link"),R0(s,"link",e),R2(s),n.head.appendChild(s)}}}function G6(e,o,n){bt.S(e,o,n);var s=Ca;if(s&&e){var h=d0(s).hoistableStyles,A=ya(e);o=o||"default";var k=h.get(A);if(!k){var _={loading:0,preload:null};if(k=s.querySelector(In(A)))_.loading=5;else{e=f({rel:"stylesheet",href:e,"data-precedence":o},n),(n=Ce.get(A))&&Nl(e,n);var I=k=s.createElement("link");R2(I),R0(I,"link",e),I._p=new Promise(function(q,t2){I.onload=q,I.onerror=t2}),I.addEventListener("load",function(){_.loading|=1}),I.addEventListener("error",function(){_.loading|=2}),_.loading|=4,vr(k,o,s)}k={type:"stylesheet",instance:k,count:1,state:_},h.set(A,k)}}}function K6(e,o){bt.X(e,o);var n=Ca;if(n&&e){var s=d0(n).hoistableScripts,h=va(e),A=s.get(h);A||(A=n.querySelector(Mn(h)),A||(e=f({src:e,async:!0},o),(o=Ce.get(h))&&Hl(e,o),A=n.createElement("script"),R2(A),R0(A,"link",e),n.head.appendChild(A)),A={type:"script",instance:A,count:1,state:null},s.set(h,A))}}function Z6(e,o){bt.M(e,o);var n=Ca;if(n&&e){var s=d0(n).hoistableScripts,h=va(e),A=s.get(h);A||(A=n.querySelector(Mn(h)),A||(e=f({src:e,async:!0,type:"module"},o),(o=Ce.get(h))&&Hl(e,o),A=n.createElement("script"),R2(A),R0(A,"link",e),n.head.appendChild(A)),A={type:"script",instance:A,count:1,state:null},s.set(h,A))}}function _F(e,o,n,s){var h=(h=g2.current)?yr(h):null;if(!h)throw Error(r(446));switch(e){case"meta":case"title":return null;case"style":return typeof n.precedence=="string"&&typeof n.href=="string"?(o=ya(n.href),n=d0(h).hoistableStyles,s=n.get(o),s||(s={type:"style",instance:null,count:0,state:null},n.set(o,s)),s):{type:"void",instance:null,count:0,state:null};case"link":if(n.rel==="stylesheet"&&typeof n.href=="string"&&typeof n.precedence=="string"){e=ya(n.href);var A=d0(h).hoistableStyles,k=A.get(e);if(k||(h=h.ownerDocument||h,k={type:"stylesheet",instance:null,count:0,state:{loading:0,preload:null}},A.set(e,k),(A=h.querySelector(In(e)))&&!A._p&&(k.instance=A,k.state.loading=5),Ce.has(e)||(n={rel:"preload",as:"style",href:n.href,crossOrigin:n.crossOrigin,integrity:n.integrity,media:n.media,hrefLang:n.hrefLang,referrerPolicy:n.referrerPolicy},Ce.set(e,n),A||X6(h,e,n,k.state))),o&&s===null)throw Error(r(528,""));return k}if(o&&s!==null)throw Error(r(529,""));return null;case"script":return o=n.async,n=n.src,typeof n=="string"&&o&&typeof o!="function"&&typeof o!="symbol"?(o=va(n),n=d0(h).hoistableScripts,s=n.get(o),s||(s={type:"script",instance:null,count:0,state:null},n.set(o,s)),s):{type:"void",instance:null,count:0,state:null};default:throw Error(r(444,e))}}function ya(e){return'href="'+Ae(e)+'"'}function In(e){return'link[rel="stylesheet"]['+e+"]"}function SF(e){return f({},e,{"data-precedence":e.precedence,precedence:null})}function X6(e,o,n,s){e.querySelector('link[rel="preload"][as="style"]['+o+"]")?s.loading=1:(o=e.createElement("link"),s.preload=o,o.addEventListener("load",function(){return s.loading|=1}),o.addEventListener("error",function(){return s.loading|=2}),R0(o,"link",n),R2(o),e.head.appendChild(o))}function va(e){return'[src="'+Ae(e)+'"]'}function Mn(e){return"script[async]"+e}function xF(e,o,n){if(o.count++,o.instance===null)switch(o.type){case"style":var s=e.querySelector('style[data-href~="'+Ae(n.href)+'"]');if(s)return o.instance=s,R2(s),s;var h=f({},n,{"data-href":n.href,"data-precedence":n.precedence,href:null,precedence:null});return s=(e.ownerDocument||e).createElement("style"),R2(s),R0(s,"style",h),vr(s,n.precedence,e),o.instance=s;case"stylesheet":h=ya(n.href);var A=e.querySelector(In(h));if(A)return o.state.loading|=4,o.instance=A,R2(A),A;s=SF(n),(h=Ce.get(h))&&Nl(s,h),A=(e.ownerDocument||e).createElement("link"),R2(A);var k=A;return k._p=new Promise(function(_,I){k.onload=_,k.onerror=I}),R0(A,"link",s),o.state.loading|=4,vr(A,n.precedence,e),o.instance=A;case"script":return A=va(n.src),(h=e.querySelector(Mn(A)))?(o.instance=h,R2(h),h):(s=n,(h=Ce.get(A))&&(s=f({},n),Hl(s,h)),e=e.ownerDocument||e,h=e.createElement("script"),R2(h),R0(h,"link",s),e.head.appendChild(h),o.instance=h);case"void":return null;default:throw Error(r(443,o.type))}else o.type==="stylesheet"&&(o.state.loading&4)===0&&(s=o.instance,o.state.loading|=4,vr(s,n.precedence,e));return o.instance}function vr(e,o,n){for(var s=n.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),h=s.length?s[s.length-1]:null,A=h,k=0;k<s.length;k++){var _=s[k];if(_.dataset.precedence===o)A=_;else if(A!==h)break}A?A.parentNode.insertBefore(e,A.nextSibling):(o=n.nodeType===9?n.head:n,o.insertBefore(e,o.firstChild))}function Nl(e,o){e.crossOrigin==null&&(e.crossOrigin=o.crossOrigin),e.referrerPolicy==null&&(e.referrerPolicy=o.referrerPolicy),e.title==null&&(e.title=o.title)}function Hl(e,o){e.crossOrigin==null&&(e.crossOrigin=o.crossOrigin),e.referrerPolicy==null&&(e.referrerPolicy=o.referrerPolicy),e.integrity==null&&(e.integrity=o.integrity)}var wr=null;function TF(e,o,n){if(wr===null){var s=new Map,h=wr=new Map;h.set(n,s)}else h=wr,s=h.get(n),s||(s=new Map,h.set(n,s));if(s.has(e))return s;for(s.set(e,null),n=n.getElementsByTagName(e),h=0;h<n.length;h++){var A=n[h];if(!(A[w2]||A[r2]||e==="link"&&A.getAttribute("rel")==="stylesheet")&&A.namespaceURI!=="http://www.w3.org/2000/svg"){var k=A.getAttribute(o)||"";k=e+k;var _=s.get(k);_?_.push(A):s.set(k,[A])}}return s}function RF(e,o,n){e=e.ownerDocument||e,e.head.insertBefore(n,o==="title"?e.querySelector("head > title"):null)}function Y6(e,o,n){if(n===1||o.itemProp!=null)return!1;switch(e){case"meta":case"title":return!0;case"style":if(typeof o.precedence!="string"||typeof o.href!="string"||o.href==="")break;return!0;case"link":if(typeof o.rel!="string"||typeof o.href!="string"||o.href===""||o.onLoad||o.onError)break;switch(o.rel){case"stylesheet":return e=o.disabled,typeof o.precedence=="string"&&e==null;default:return!0}case"script":if(o.async&&typeof o.async!="function"&&typeof o.async!="symbol"&&!o.onLoad&&!o.onError&&o.src&&typeof o.src=="string")return!0}return!1}function PF(e){return!(e.type==="stylesheet"&&(e.state.loading&3)===0)}var Ln=null;function J6(){}function Q6(e,o,n){if(Ln===null)throw Error(r(475));var s=Ln;if(o.type==="stylesheet"&&(typeof n.media!="string"||matchMedia(n.media).matches!==!1)&&(o.state.loading&4)===0){if(o.instance===null){var h=ya(n.href),A=e.querySelector(In(h));if(A){e=A._p,e!==null&&typeof e=="object"&&typeof e.then=="function"&&(s.count++,s=kr.bind(s),e.then(s,s)),o.state.loading|=4,o.instance=A,R2(A);return}A=e.ownerDocument||e,n=SF(n),(h=Ce.get(h))&&Nl(n,h),A=A.createElement("link"),R2(A);var k=A;k._p=new Promise(function(_,I){k.onload=_,k.onerror=I}),R0(A,"link",n),o.instance=A}s.stylesheets===null&&(s.stylesheets=new Map),s.stylesheets.set(o,e),(e=o.state.preload)&&(o.state.loading&3)===0&&(s.count++,o=kr.bind(s),e.addEventListener("load",o),e.addEventListener("error",o))}}function $6(){if(Ln===null)throw Error(r(475));var e=Ln;return e.stylesheets&&e.count===0&&zl(e,e.stylesheets),0<e.count?function(o){var n=setTimeout(function(){if(e.stylesheets&&zl(e,e.stylesheets),e.unsuspend){var s=e.unsuspend;e.unsuspend=null,s()}},6e4);return e.unsuspend=o,function(){e.unsuspend=null,clearTimeout(n)}}:null}function kr(){if(this.count--,this.count===0){if(this.stylesheets)zl(this,this.stylesheets);else if(this.unsuspend){var e=this.unsuspend;this.unsuspend=null,e()}}}var Dr=null;function zl(e,o){e.stylesheets=null,e.unsuspend!==null&&(e.count++,Dr=new Map,o.forEach(ey,e),Dr=null,kr.call(e))}function ey(e,o){if(!(o.state.loading&4)){var n=Dr.get(e);if(n)var s=n.get(null);else{n=new Map,Dr.set(e,n);for(var h=e.querySelectorAll("link[data-precedence],style[data-precedence]"),A=0;A<h.length;A++){var k=h[A];(k.nodeName==="LINK"||k.getAttribute("media")!=="not all")&&(n.set(k.dataset.precedence,k),s=k)}s&&n.set(null,s)}h=o.instance,k=h.getAttribute("data-precedence"),A=n.get(k)||s,A===s&&n.set(null,h),n.set(k,h),this.count++,s=kr.bind(this),h.addEventListener("load",s),h.addEventListener("error",s),A?A.parentNode.insertBefore(h,A.nextSibling):(e=e.nodeType===9?e.head:e,e.insertBefore(h,e.firstChild)),o.state.loading|=4}}var On={$$typeof:E,Provider:null,Consumer:null,_currentValue:Q,_currentValue2:Q,_threadCount:0};function ty(e,o,n,s,h,A,k,_){this.tag=1,this.containerInfo=e,this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=Vo(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Vo(0),this.hiddenUpdates=Vo(null),this.identifierPrefix=s,this.onUncaughtError=h,this.onCaughtError=A,this.onRecoverableError=k,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=_,this.incompleteTransitions=new Map}function IF(e,o,n,s,h,A,k,_,I,q,t2,i2){return e=new ty(e,o,n,k,_,I,q,i2),o=1,A===!0&&(o|=24),A=$0(3,null,null,o),e.current=A,A.stateNode=e,o=yc(),o.refCount++,e.pooledCache=o,o.refCount++,A.memoizedState={element:s,isDehydrated:n,cache:o},Dc(A),e}function MF(e){return e?(e=$o,e):$o}function LF(e,o,n,s,h,A){h=MF(h),s.context===null?s.context=h:s.pendingContext=h,s=xt(o),s.payload={element:n},A=A===void 0?null:A,A!==null&&(s.callback=A),n=Tt(e,s,o),n!==null&&(ne(n,e,o),An(n,e,o))}function OF(e,o){if(e=e.memoizedState,e!==null&&e.dehydrated!==null){var n=e.retryLane;e.retryLane=n!==0&&n<o?n:o}}function jl(e,o){OF(e,o),(e=e.alternate)&&OF(e,o)}function NF(e){if(e.tag===13){var o=Qo(e,67108864);o!==null&&ne(o,e,67108864),jl(e,67108864)}}var Br=!0;function oy(e,o,n,s){var h=O.T;O.T=null;var A=W.p;try{W.p=2,Vl(e,o,n,s)}finally{W.p=A,O.T=h}}function ay(e,o,n,s){var h=O.T;O.T=null;var A=W.p;try{W.p=8,Vl(e,o,n,s)}finally{W.p=A,O.T=h}}function Vl(e,o,n,s){if(Br){var h=Ul(s);if(h===null)Sl(e,o,s,Er,n),zF(e,s);else if(iy(h,e,o,n,s))s.stopPropagation();else if(zF(e,s),o&4&&-1<ny.indexOf(e)){for(;h!==null;){var A=W2(h);if(A!==null)switch(A.tag){case 3:if(A=A.stateNode,A.current.memoizedState.isDehydrated){var k=ot(A.pendingLanes);if(k!==0){var _=A;for(_.pendingLanes|=2,_.entangledLanes|=2;k;){var I=1<<31-S0(k);_.entanglements[1]|=I,k&=~I}Ge(A),(Z2&6)===0&&(hr=H0()+500,xn(0))}}break;case 13:_=Qo(A,2),_!==null&&ne(_,A,2),dr(),jl(A,2)}if(A=Ul(s),A===null&&Sl(e,o,s,Er,n),A===h)break;h=A}h!==null&&s.stopPropagation()}else Sl(e,o,s,null,n)}}function Ul(e){return e=Zs(e),ql(e)}var Er=null;function ql(e){if(Er=null,e=S2(e),e!==null){var o=l(e);if(o===null)e=null;else{var n=o.tag;if(n===13){if(e=u(o),e!==null)return e;e=null}else if(n===3){if(o.stateNode.current.memoizedState.isDehydrated)return o.tag===3?o.stateNode.containerInfo:null;e=null}else o!==e&&(e=null)}}return Er=e,null}function HF(e){switch(e){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 2;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 8;case"message":switch(Wa()){case et:return 2;case gi:return 8;case zo:case tt:return 32;case kt:return 268435456;default:return 32}default:return 32}}var Wl=!1,qt=null,Wt=null,Gt=null,Nn=new Map,Hn=new Map,Kt=[],ny="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");function zF(e,o){switch(e){case"focusin":case"focusout":qt=null;break;case"dragenter":case"dragleave":Wt=null;break;case"mouseover":case"mouseout":Gt=null;break;case"pointerover":case"pointerout":Nn.delete(o.pointerId);break;case"gotpointercapture":case"lostpointercapture":Hn.delete(o.pointerId)}}function zn(e,o,n,s,h,A){return e===null||e.nativeEvent!==A?(e={blockedOn:o,domEventName:n,eventSystemFlags:s,nativeEvent:A,targetContainers:[h]},o!==null&&(o=W2(o),o!==null&&NF(o)),e):(e.eventSystemFlags|=s,o=e.targetContainers,h!==null&&o.indexOf(h)===-1&&o.push(h),e)}function iy(e,o,n,s,h){switch(o){case"focusin":return qt=zn(qt,e,o,n,s,h),!0;case"dragenter":return Wt=zn(Wt,e,o,n,s,h),!0;case"mouseover":return Gt=zn(Gt,e,o,n,s,h),!0;case"pointerover":var A=h.pointerId;return Nn.set(A,zn(Nn.get(A)||null,e,o,n,s,h)),!0;case"gotpointercapture":return A=h.pointerId,Hn.set(A,zn(Hn.get(A)||null,e,o,n,s,h)),!0}return!1}function jF(e){var o=S2(e.target);if(o!==null){var n=l(o);if(n!==null){if(o=n.tag,o===13){if(o=u(n),o!==null){e.blockedOn=o,j(e.priority,function(){if(n.tag===13){var s=ae();s=Ka(s);var h=Qo(n,s);h!==null&&ne(h,n,s),jl(n,s)}});return}}else if(o===3&&n.stateNode.current.memoizedState.isDehydrated){e.blockedOn=n.tag===3?n.stateNode.containerInfo:null;return}}}e.blockedOn=null}function _r(e){if(e.blockedOn!==null)return!1;for(var o=e.targetContainers;0<o.length;){var n=Ul(e.nativeEvent);if(n===null){n=e.nativeEvent;var s=new n.constructor(n.type,n);Ks=s,n.target.dispatchEvent(s),Ks=null}else return o=W2(n),o!==null&&NF(o),e.blockedOn=n,!1;o.shift()}return!0}function VF(e,o,n){_r(e)&&n.delete(o)}function ry(){Wl=!1,qt!==null&&_r(qt)&&(qt=null),Wt!==null&&_r(Wt)&&(Wt=null),Gt!==null&&_r(Gt)&&(Gt=null),Nn.forEach(VF),Hn.forEach(VF)}function Sr(e,o){e.blockedOn===o&&(e.blockedOn=null,Wl||(Wl=!0,t.unstable_scheduleCallback(t.unstable_NormalPriority,ry)))}var xr=null;function UF(e){xr!==e&&(xr=e,t.unstable_scheduleCallback(t.unstable_NormalPriority,function(){xr===e&&(xr=null);for(var o=0;o<e.length;o+=3){var n=e[o],s=e[o+1],h=e[o+2];if(typeof s!="function"){if(ql(s||n)===null)continue;break}var A=W2(n);A!==null&&(e.splice(o,3),o-=3,qc(A,{pending:!0,data:h,method:n.method,action:s},s,h))}}))}function jn(e){function o(I){return Sr(I,e)}qt!==null&&Sr(qt,e),Wt!==null&&Sr(Wt,e),Gt!==null&&Sr(Gt,e),Nn.forEach(o),Hn.forEach(o);for(var n=0;n<Kt.length;n++){var s=Kt[n];s.blockedOn===e&&(s.blockedOn=null)}for(;0<Kt.length&&(n=Kt[0],n.blockedOn===null);)jF(n),n.blockedOn===null&&Kt.shift();if(n=(e.ownerDocument||e).$$reactFormReplay,n!=null)for(s=0;s<n.length;s+=3){var h=n[s],A=n[s+1],k=h[h2]||null;if(typeof A=="function")k||UF(n);else if(k){var _=null;if(A&&A.hasAttribute("formAction")){if(h=A,k=A[h2]||null)_=k.formAction;else if(ql(h)!==null)continue}else _=k.action;typeof _=="function"?n[s+1]=_:(n.splice(s,3),s-=3),UF(n)}}}function Gl(e){this._internalRoot=e}Tr.prototype.render=Gl.prototype.render=function(e){var o=this._internalRoot;if(o===null)throw Error(r(409));var n=o.current,s=ae();LF(n,s,e,o,null,null)},Tr.prototype.unmount=Gl.prototype.unmount=function(){var e=this._internalRoot;if(e!==null){this._internalRoot=null;var o=e.containerInfo;LF(e.current,2,null,e,null,null),dr(),o[m2]=null}};function Tr(e){this._internalRoot=e}Tr.prototype.unstable_scheduleHydration=function(e){if(e){var o=M();e={blockedOn:null,target:e,priority:o};for(var n=0;n<Kt.length&&o!==0&&o<Kt[n].priority;n++);Kt.splice(n,0,e),n===0&&jF(e)}};var qF=a.version;if(qF!=="19.1.0")throw Error(r(527,qF,"19.1.0"));W.findDOMNode=function(e){var o=e._reactInternals;if(o===void 0)throw typeof e.render=="function"?Error(r(188)):(e=Object.keys(e).join(","),Error(r(268,e)));return e=F(o),e=e!==null?p(e):null,e=e===null?null:e.stateNode,e};var sy={bundleType:0,version:"19.1.0",rendererPackageName:"react-dom",currentDispatcherRef:O,reconcilerVersion:"19.1.0"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"){var Rr=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Rr.isDisabled&&Rr.supportsFiber)try{W0=Rr.inject(sy),s0=Rr}catch{}}return Un.createRoot=function(e,o){if(!c(e))throw Error(r(299));var n=!1,s="",h=rp,A=sp,k=cp,_=null;return o!=null&&(o.unstable_strictMode===!0&&(n=!0),o.identifierPrefix!==void 0&&(s=o.identifierPrefix),o.onUncaughtError!==void 0&&(h=o.onUncaughtError),o.onCaughtError!==void 0&&(A=o.onCaughtError),o.onRecoverableError!==void 0&&(k=o.onRecoverableError),o.unstable_transitionCallbacks!==void 0&&(_=o.unstable_transitionCallbacks)),o=IF(e,1,!1,null,null,n,s,h,A,k,_,null),e[m2]=o.current,_l(e),new Gl(o)},Un.hydrateRoot=function(e,o,n){if(!c(e))throw Error(r(299));var s=!1,h="",A=rp,k=sp,_=cp,I=null,q=null;return n!=null&&(n.unstable_strictMode===!0&&(s=!0),n.identifierPrefix!==void 0&&(h=n.identifierPrefix),n.onUncaughtError!==void 0&&(A=n.onUncaughtError),n.onCaughtError!==void 0&&(k=n.onCaughtError),n.onRecoverableError!==void 0&&(_=n.onRecoverableError),n.unstable_transitionCallbacks!==void 0&&(I=n.unstable_transitionCallbacks),n.formState!==void 0&&(q=n.formState)),o=IF(e,1,!0,o,n??null,s,h,A,k,_,I,q),o.context=MF(null),n=o.current,s=ae(),s=Ka(s),h=xt(s),h.callback=null,Tt(n,h,s),n=s,o.current.lanes=n,so(o,n),Ge(o),e[m2]=o.current,_l(e),new Tr(o)},Un.version="19.1.0",Un}var em;function fy(){if(em)return Zl.exports;em=1;function t(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(t)}catch(a){console.error(a)}}return t(),Zl.exports=gy(),Zl.exports}var by=fy(),b=hu();const a0=fs(b),bs=M3({__proto__:null,default:a0},[b]);/**
 * react-router v7.7.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */var O3=t=>{throw TypeError(t)},Cy=(t,a,i)=>a.has(t)||O3("Cannot "+i),$l=(t,a,i)=>(Cy(t,a,"read from private field"),i?i.call(t):a.get(t)),yy=(t,a,i)=>a.has(t)?O3("Cannot add the same private member more than once"):a instanceof WeakSet?a.add(t):a.set(t,i),tm="popstate";function vy(t={}){function a(r,c){let{pathname:l,search:u,hash:d}=r.location;return $n("",{pathname:l,search:u,hash:d},c.state&&c.state.usr||null,c.state&&c.state.key||"default")}function i(r,c){return typeof c=="string"?c:Jt(c)}return ky(a,i,null,t)}function O2(t,a){if(t===!1||t===null||typeof t>"u")throw new Error(a)}function F0(t,a){if(!t){typeof console<"u"&&console.warn(a);try{throw new Error(a)}catch{}}}function wy(){return Math.random().toString(36).substring(2,10)}function om(t,a){return{usr:t.state,key:t.key,idx:a}}function $n(t,a,i=null,r){return{pathname:typeof t=="string"?t:t.pathname,search:"",hash:"",...typeof a=="string"?eo(a):a,state:i,key:a&&a.key||r||wy()}}function Jt({pathname:t="/",search:a="",hash:i=""}){return a&&a!=="?"&&(t+=a.charAt(0)==="?"?a:"?"+a),i&&i!=="#"&&(t+=i.charAt(0)==="#"?i:"#"+i),t}function eo(t){let a={};if(t){let i=t.indexOf("#");i>=0&&(a.hash=t.substring(i),t=t.substring(0,i));let r=t.indexOf("?");r>=0&&(a.search=t.substring(r),t=t.substring(0,r)),t&&(a.pathname=t)}return a}function ky(t,a,i,r={}){let{window:c=document.defaultView,v5Compat:l=!1}=r,u=c.history,d="POP",F=null,p=f();p==null&&(p=0,u.replaceState({...u.state,idx:p},""));function f(){return(u.state||{idx:null}).idx}function m(){d="POP";let D=f(),B=D==null?null:D-p;p=D,F&&F({action:d,location:v.location,delta:B})}function C(D,B){d="PUSH";let S=$n(v.location,D,B);p=f()+1;let E=om(S,p),T=v.createHref(S);try{u.pushState(E,"",T)}catch(P){if(P instanceof DOMException&&P.name==="DataCloneError")throw P;c.location.assign(T)}l&&F&&F({action:d,location:v.location,delta:1})}function y(D,B){d="REPLACE";let S=$n(v.location,D,B);p=f();let E=om(S,p),T=v.createHref(S);u.replaceState(E,"",T),l&&F&&F({action:d,location:v.location,delta:0})}function w(D){return N3(D)}let v={get action(){return d},get location(){return t(c,u)},listen(D){if(F)throw new Error("A history only accepts one active listener");return c.addEventListener(tm,m),F=D,()=>{c.removeEventListener(tm,m),F=null}},createHref(D){return a(c,D)},createURL:w,encodeLocation(D){let B=w(D);return{pathname:B.pathname,search:B.search,hash:B.hash}},push:C,replace:y,go(D){return u.go(D)}};return v}function N3(t,a=!1){let i="http://localhost";typeof window<"u"&&(i=window.location.origin!=="null"?window.location.origin:window.location.href),O2(i,"No window.location.(origin|href) available to create URL");let r=typeof t=="string"?t:Jt(t);return r=r.replace(/ $/,"%20"),!a&&r.startsWith("//")&&(r=i+r),new URL(r,i)}var Zn,am=class{constructor(t){if(yy(this,Zn,new Map),t)for(let[a,i]of t)this.set(a,i)}get(t){if($l(this,Zn).has(t))return $l(this,Zn).get(t);if(t.defaultValue!==void 0)return t.defaultValue;throw new Error("No value found for context")}set(t,a){$l(this,Zn).set(t,a)}};Zn=new WeakMap;var Dy=new Set(["lazy","caseSensitive","path","id","index","children"]);function By(t){return Dy.has(t)}var Ey=new Set(["lazy","caseSensitive","path","id","index","unstable_middleware","children"]);function _y(t){return Ey.has(t)}function Sy(t){return t.index===!0}function ei(t,a,i=[],r={},c=!1){return t.map((l,u)=>{let d=[...i,String(u)],F=typeof l.id=="string"?l.id:d.join("-");if(O2(l.index!==!0||!l.children,"Cannot specify children on an index route"),O2(c||!r[F],`Found a route id collision on id "${F}".  Route id's must be globally unique within Data Router usages`),Sy(l)){let p={...l,...a(l),id:F};return r[F]=p,p}else{let p={...l,...a(l),id:F,children:void 0};return r[F]=p,l.children&&(p.children=ei(l.children,a,d,r,c)),p}})}function Ct(t,a,i="/"){return Xr(t,a,i,!1)}function Xr(t,a,i,r){let c=typeof a=="string"?eo(a):a,l=le(c.pathname||"/",i);if(l==null)return null;let u=z3(t);xy(u);let d=null;for(let F=0;d==null&&F<u.length;++F){let p=V3(l);d=Hy(u[F],p,r)}return d}function H3(t,a){let{route:i,pathname:r,params:c}=t;return{id:i.id,pathname:r,params:c,data:a[i.id],handle:i.handle}}function z3(t,a=[],i=[],r=""){let c=(l,u,d)=>{let F={relativePath:d===void 0?l.path||"":d,caseSensitive:l.caseSensitive===!0,childrenIndex:u,route:l};F.relativePath.startsWith("/")&&(O2(F.relativePath.startsWith(r),`Absolute route path "${F.relativePath}" nested under path "${r}" is not valid. An absolute child route path must start with the combined path of all its parent routes.`),F.relativePath=F.relativePath.slice(r.length));let p=Xe([r,F.relativePath]),f=i.concat(F);l.children&&l.children.length>0&&(O2(l.index!==!0,`Index routes must not have child routes. Please remove all child routes from route path "${p}".`),z3(l.children,a,f,p)),!(l.path==null&&!l.index)&&a.push({path:p,score:Oy(p,l.index),routesMeta:f})};return t.forEach((l,u)=>{var d;if(l.path===""||!((d=l.path)!=null&&d.includes("?")))c(l,u);else for(let F of j3(l.path))c(l,u,F)}),a}function j3(t){let a=t.split("/");if(a.length===0)return[];let[i,...r]=a,c=i.endsWith("?"),l=i.replace(/\?$/,"");if(r.length===0)return c?[l,""]:[l];let u=j3(r.join("/")),d=[];return d.push(...u.map(F=>F===""?l:[l,F].join("/"))),c&&d.push(...u),d.map(F=>t.startsWith("/")&&F===""?"/":F)}function xy(t){t.sort((a,i)=>a.score!==i.score?i.score-a.score:Ny(a.routesMeta.map(r=>r.childrenIndex),i.routesMeta.map(r=>r.childrenIndex)))}var Ty=/^:[\w-]+$/,Ry=3,Py=2,Iy=1,My=10,Ly=-2,nm=t=>t==="*";function Oy(t,a){let i=t.split("/"),r=i.length;return i.some(nm)&&(r+=Ly),a&&(r+=Py),i.filter(c=>!nm(c)).reduce((c,l)=>c+(Ty.test(l)?Ry:l===""?Iy:My),r)}function Ny(t,a){return t.length===a.length&&t.slice(0,-1).every((r,c)=>r===a[c])?t[t.length-1]-a[a.length-1]:0}function Hy(t,a,i=!1){let{routesMeta:r}=t,c={},l="/",u=[];for(let d=0;d<r.length;++d){let F=r[d],p=d===r.length-1,f=l==="/"?a:a.slice(l.length)||"/",m=xo({path:F.relativePath,caseSensitive:F.caseSensitive,end:p},f),C=F.route;if(!m&&p&&i&&!r[r.length-1].route.index&&(m=xo({path:F.relativePath,caseSensitive:F.caseSensitive,end:!1},f)),!m)return null;Object.assign(c,m.params),u.push({params:c,pathname:Xe([l,m.pathname]),pathnameBase:qy(Xe([l,m.pathnameBase])),route:C}),m.pathnameBase!=="/"&&(l=Xe([l,m.pathnameBase]))}return u}function xo(t,a){typeof t=="string"&&(t={path:t,caseSensitive:!1,end:!0});let[i,r]=zy(t.path,t.caseSensitive,t.end),c=a.match(i);if(!c)return null;let l=c[0],u=l.replace(/(.)\/+$/,"$1"),d=c.slice(1);return{params:r.reduce((p,{paramName:f,isOptional:m},C)=>{if(f==="*"){let w=d[C]||"";u=l.slice(0,l.length-w.length).replace(/(.)\/+$/,"$1")}const y=d[C];return m&&!y?p[f]=void 0:p[f]=(y||"").replace(/%2F/g,"/"),p},{}),pathname:l,pathnameBase:u,pattern:t}}function zy(t,a=!1,i=!0){F0(t==="*"||!t.endsWith("*")||t.endsWith("/*"),`Route path "${t}" will be treated as if it were "${t.replace(/\*$/,"/*")}" because the \`*\` character must always follow a \`/\` in the pattern. To get rid of this warning, please change the route path to "${t.replace(/\*$/,"/*")}".`);let r=[],c="^"+t.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,(u,d,F)=>(r.push({paramName:d,isOptional:F!=null}),F?"/?([^\\/]+)?":"/([^\\/]+)"));return t.endsWith("*")?(r.push({paramName:"*"}),c+=t==="*"||t==="/*"?"(.*)$":"(?:\\/(.+)|\\/*)$"):i?c+="\\/*$":t!==""&&t!=="/"&&(c+="(?:(?=\\/|$))"),[new RegExp(c,a?void 0:"i"),r]}function V3(t){try{return t.split("/").map(a=>decodeURIComponent(a).replace(/\//g,"%2F")).join("/")}catch(a){return F0(!1,`The URL path "${t}" could not be decoded because it is a malformed URL segment. This is probably due to a bad percent encoding (${a}).`),t}}function le(t,a){if(a==="/")return t;if(!t.toLowerCase().startsWith(a.toLowerCase()))return null;let i=a.endsWith("/")?a.length-1:a.length,r=t.charAt(i);return r&&r!=="/"?null:t.slice(i)||"/"}function jy({basename:t,pathname:a}){return a==="/"?t:Xe([t,a])}function Vy(t,a="/"){let{pathname:i,search:r="",hash:c=""}=typeof t=="string"?eo(t):t;return{pathname:i?i.startsWith("/")?i:Uy(i,a):a,search:Wy(r),hash:Gy(c)}}function Uy(t,a){let i=a.replace(/\/+$/,"").split("/");return t.split("/").forEach(c=>{c===".."?i.length>1&&i.pop():c!=="."&&i.push(c)}),i.length>1?i.join("/"):"/"}function eh(t,a,i,r){return`Cannot include a '${t}' character in a manually specified \`to.${a}\` field [${JSON.stringify(r)}].  Please separate it out to the \`to.${i}\` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.`}function U3(t){return t.filter((a,i)=>i===0||a.route.path&&a.route.path.length>0)}function uu(t){let a=U3(t);return a.map((i,r)=>r===a.length-1?i.pathname:i.pathnameBase)}function du(t,a,i,r=!1){let c;typeof t=="string"?c=eo(t):(c={...t},O2(!c.pathname||!c.pathname.includes("?"),eh("?","pathname","search",c)),O2(!c.pathname||!c.pathname.includes("#"),eh("#","pathname","hash",c)),O2(!c.search||!c.search.includes("#"),eh("#","search","hash",c)));let l=t===""||c.pathname==="",u=l?"/":c.pathname,d;if(u==null)d=i;else{let m=a.length-1;if(!r&&u.startsWith("..")){let C=u.split("/");for(;C[0]==="..";)C.shift(),m-=1;c.pathname=C.join("/")}d=m>=0?a[m]:"/"}let F=Vy(c,d),p=u&&u!=="/"&&u.endsWith("/"),f=(l||u===".")&&i.endsWith("/");return!F.pathname.endsWith("/")&&(p||f)&&(F.pathname+="/"),F}var Xe=t=>t.join("/").replace(/\/\/+/g,"/"),qy=t=>t.replace(/\/+$/,"").replace(/^\/*/,"/"),Wy=t=>!t||t==="?"?"":t.startsWith("?")?t:"?"+t,Gy=t=>!t||t==="#"?"":t.startsWith("#")?t:"#"+t,ns=class{constructor(t,a,i,r=!1){this.status=t,this.statusText=a||"",this.internal=r,i instanceof Error?(this.data=i.toString(),this.error=i):this.data=i}};function ti(t){return t!=null&&typeof t.status=="number"&&typeof t.statusText=="string"&&typeof t.internal=="boolean"&&"data"in t}var q3=["POST","PUT","PATCH","DELETE"],Ky=new Set(q3),Zy=["GET",...q3],Xy=new Set(Zy),Yy=new Set([301,302,303,307,308]),Jy=new Set([307,308]),th={state:"idle",location:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},Qy={state:"idle",data:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},qn={state:"unblocked",proceed:void 0,reset:void 0,location:void 0},$y=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,Au=t=>$y.test(t),ev=t=>({hasErrorBoundary:!!t.hasErrorBoundary}),W3="remix-router-transitions",G3=Symbol("ResetLoaderData");function tv(t){const a=t.window?t.window:typeof window<"u"?window:void 0,i=typeof a<"u"&&typeof a.document<"u"&&typeof a.document.createElement<"u";O2(t.routes.length>0,"You must provide a non-empty routes array to createRouter");let r=t.hydrationRouteProperties||[],c=t.mapRouteProperties||ev,l={},u=ei(t.routes,c,void 0,l),d,F=t.basename||"/",p=t.dataStrategy||rv,f={unstable_middleware:!1,...t.future},m=null,C=new Set,y=null,w=null,v=null,D=t.hydrationData!=null,B=Ct(u,t.history.location,F),S=!1,E=null,T;if(B==null&&!t.patchRoutesOnNavigation){let M=ye(404,{pathname:t.history.location.pathname}),{matches:j,route:Y}=mm(u);T=!0,B=j,E={[Y.id]:M}}else if(B&&!t.hydrationData&&co(B,u,t.history.location.pathname).active&&(B=null),B)if(B.some(M=>M.route.lazy))T=!1;else if(!B.some(M=>M.route.loader))T=!0;else{let M=t.hydrationData?t.hydrationData.loaderData:null,j=t.hydrationData?t.hydrationData.errors:null;if(j){let Y=B.findIndex(r2=>j[r2.route.id]!==void 0);T=B.slice(0,Y+1).every(r2=>!Ph(r2.route,M,j))}else T=B.every(Y=>!Ph(Y.route,M,j))}else{T=!1,B=[];let M=co(null,u,t.history.location.pathname);M.active&&M.matches&&(S=!0,B=M.matches)}let P,x={historyAction:t.history.action,location:t.history.location,matches:B,initialized:T,navigation:th,restoreScrollPosition:t.hydrationData!=null?!1:null,preventScrollReset:!1,revalidation:"idle",loaderData:t.hydrationData&&t.hydrationData.loaderData||{},actionData:t.hydrationData&&t.hydrationData.actionData||null,errors:t.hydrationData&&t.hydrationData.errors||E,fetchers:new Map,blockers:new Map},L="POP",z=!1,U,n2=!1,u2=new Map,s2=null,c2=!1,G=!1,d2=new Set,O=new Map,W=0,Q=-1,X=new Map,R=new Set,$=new Map,e2=new Map,a2=new Set,A2=new Map,k2,g2=null;function K2(){if(m=t.history.listen(({action:M,location:j,delta:Y})=>{if(k2){k2(),k2=void 0;return}F0(A2.size===0||Y!=null,"You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");let r2=Ci({currentLocation:x.location,nextLocation:j,historyAction:M});if(r2&&Y!=null){let h2=new Promise(m2=>{k2=m2});t.history.go(Y*-1),ze(r2,{state:"blocked",location:j,proceed(){ze(r2,{state:"proceeding",proceed:void 0,reset:void 0,location:j}),h2.then(()=>t.history.go(Y))},reset(){let m2=new Map(x.blockers);m2.set(r2,qn),V2({blockers:m2})}});return}return q0(M,j)}),i){gv(a,u2);let M=()=>fv(a,u2);a.addEventListener("pagehide",M),s2=()=>a.removeEventListener("pagehide",M)}return x.initialized||q0("POP",x.location,{initialHydration:!0}),P}function E2(){m&&m(),s2&&s2(),C.clear(),U&&U.abort(),x.fetchers.forEach((M,j)=>S0(j)),x.blockers.forEach((M,j)=>ro(j))}function I2(M){return C.add(M),()=>C.delete(M)}function V2(M,j={}){M.matches&&(M.matches=M.matches.map(h2=>{let m2=l[h2.route.id],b2=h2.route;return b2.element!==m2.element||b2.errorElement!==m2.errorElement||b2.hydrateFallbackElement!==m2.hydrateFallbackElement?{...h2,route:m2}:h2})),x={...x,...M};let Y=[],r2=[];x.fetchers.forEach((h2,m2)=>{h2.state==="idle"&&(a2.has(m2)?Y.push(m2):r2.push(m2))}),a2.forEach(h2=>{!x.fetchers.has(h2)&&!O.has(h2)&&Y.push(h2)}),[...C].forEach(h2=>h2(x,{deletedFetchers:Y,viewTransitionOpts:j.viewTransitionOpts,flushSync:j.flushSync===!0})),Y.forEach(h2=>S0(h2)),r2.forEach(h2=>x.fetchers.delete(h2))}function h0(M,j,{flushSync:Y}={}){var w2,C2;let r2=x.actionData!=null&&x.navigation.formMethod!=null&&Y0(x.navigation.formMethod)&&x.navigation.state==="loading"&&((w2=M.state)==null?void 0:w2._isRedirect)!==!0,h2;j.actionData?Object.keys(j.actionData).length>0?h2=j.actionData:h2=null:r2?h2=x.actionData:h2=null;let m2=j.loaderData?pm(x.loaderData,j.loaderData,j.matches||[],j.errors):x.loaderData,b2=x.blockers;b2.size>0&&(b2=new Map(b2),b2.forEach((S2,W2)=>b2.set(W2,qn)));let f2=c2?!1:vi(M,j.matches||x.matches),v2=z===!0||x.navigation.formMethod!=null&&Y0(x.navigation.formMethod)&&((C2=M.state)==null?void 0:C2._isRedirect)!==!0;d&&(u=d,d=void 0),c2||L==="POP"||(L==="PUSH"?t.history.push(M,M.state):L==="REPLACE"&&t.history.replace(M,M.state));let D2;if(L==="POP"){let S2=u2.get(x.location.pathname);S2&&S2.has(M.pathname)?D2={currentLocation:x.location,nextLocation:M}:u2.has(M.pathname)&&(D2={currentLocation:M,nextLocation:x.location})}else if(n2){let S2=u2.get(x.location.pathname);S2?S2.add(M.pathname):(S2=new Set([M.pathname]),u2.set(x.location.pathname,S2)),D2={currentLocation:x.location,nextLocation:M}}V2({...j,actionData:h2,loaderData:m2,historyAction:L,location:M,initialized:!0,navigation:th,revalidation:"idle",restoreScrollPosition:f2,preventScrollReset:v2,blockers:b2},{viewTransitionOpts:D2,flushSync:Y===!0}),L="POP",z=!1,n2=!1,c2=!1,G=!1,g2==null||g2.resolve(),g2=null}async function I0(M,j){if(typeof M=="number"){t.history.go(M);return}let Y=Rh(x.location,x.matches,F,M,j==null?void 0:j.fromRouteId,j==null?void 0:j.relative),{path:r2,submission:h2,error:m2}=im(!1,Y,j),b2=x.location,f2=$n(x.location,r2,j&&j.state);f2={...f2,...t.history.encodeLocation(f2)};let v2=j&&j.replace!=null?j.replace:void 0,D2="PUSH";v2===!0?D2="REPLACE":v2===!1||h2!=null&&Y0(h2.formMethod)&&h2.formAction===x.location.pathname+x.location.search&&(D2="REPLACE");let w2=j&&"preventScrollReset"in j?j.preventScrollReset===!0:void 0,C2=(j&&j.flushSync)===!0,S2=Ci({currentLocation:b2,nextLocation:f2,historyAction:D2});if(S2){ze(S2,{state:"blocked",location:f2,proceed(){ze(S2,{state:"proceeding",proceed:void 0,reset:void 0,location:f2}),I0(M,j)},reset(){let W2=new Map(x.blockers);W2.set(S2,qn),V2({blockers:W2})}});return}await q0(D2,f2,{submission:h2,pendingError:m2,preventScrollReset:w2,replace:j&&j.replace,enableViewTransition:j&&j.viewTransition,flushSync:C2})}function Se(){g2||(g2=bv()),Ga(),V2({revalidation:"loading"});let M=g2.promise;return x.navigation.state==="submitting"?M:x.navigation.state==="idle"?(q0(x.historyAction,x.location,{startUninterruptedRevalidation:!0}),M):(q0(L||x.historyAction,x.navigation.location,{overrideNavigation:x.navigation,enableViewTransition:n2===!0}),M)}async function q0(M,j,Y){U&&U.abort(),U=null,L=M,c2=(Y&&Y.startUninterruptedRevalidation)===!0,so(x.location,x.matches),z=(Y&&Y.preventScrollReset)===!0,n2=(Y&&Y.enableViewTransition)===!0;let r2=d||u,h2=Y&&Y.overrideNavigation,m2=Y!=null&&Y.initialHydration&&x.matches&&x.matches.length>0&&!S?x.matches:Ct(r2,j,F),b2=(Y&&Y.flushSync)===!0;if(m2&&x.initialized&&!G&&dv(x.location,j)&&!(Y&&Y.submission&&Y0(Y.submission.formMethod))){h0(j,{matches:m2},{flushSync:b2});return}let f2=co(m2,r2,j.pathname);if(f2.active&&f2.matches&&(m2=f2.matches),!m2){let{error:d0,notFoundMatches:R2,route:Y2}=jo(j.pathname);h0(j,{matches:R2,loaderData:{},errors:{[Y2.id]:d0}},{flushSync:b2});return}U=new AbortController;let v2=Ea(t.history,j,U.signal,Y&&Y.submission),D2=new am(t.unstable_getContext?await t.unstable_getContext():void 0),w2;if(Y&&Y.pendingError)w2=[_o(m2).route.id,{type:"error",error:Y.pendingError}];else if(Y&&Y.submission&&Y0(Y.submission.formMethod)){let d0=await Ua(v2,j,Y.submission,m2,D2,f2.active,Y&&Y.initialHydration===!0,{replace:Y.replace,flushSync:b2});if(d0.shortCircuited)return;if(d0.pendingActionResult){let[R2,Y2]=d0.pendingActionResult;if(re(Y2)&&ti(Y2.error)&&Y2.error.status===404){U=null,h0(j,{matches:d0.matches,loaderData:{},errors:{[R2]:Y2.error}});return}}m2=d0.matches||m2,w2=d0.pendingActionResult,h2=oh(j,Y.submission),b2=!1,f2.active=!1,v2=Ea(t.history,v2.url,v2.signal)}let{shortCircuited:C2,matches:S2,loaderData:W2,errors:u0}=await qa(v2,j,m2,D2,f2.active,h2,Y&&Y.submission,Y&&Y.fetcherSubmission,Y&&Y.replace,Y&&Y.initialHydration===!0,b2,w2);C2||(U=null,h0(j,{matches:S2||m2,...Fm(w2),loaderData:W2,errors:u0}))}async function Ua(M,j,Y,r2,h2,m2,b2,f2={}){Ga();let v2=Fv(j,Y);if(V2({navigation:v2},{flushSync:f2.flushSync===!0}),m2){let C2=await lo(r2,j.pathname,M.signal);if(C2.type==="aborted")return{shortCircuited:!0};if(C2.type==="error"){let S2=_o(C2.partialMatches).route.id;return{matches:C2.partialMatches,pendingActionResult:[S2,{type:"error",error:C2.error}]}}else if(C2.matches)r2=C2.matches;else{let{notFoundMatches:S2,error:W2,route:u0}=jo(j.pathname);return{matches:S2,pendingActionResult:[u0.id,{type:"error",error:W2}]}}}let D2,w2=Yr(r2,j);if(!w2.route.action&&!w2.route.lazy)D2={type:"error",error:ye(405,{method:M.method,pathname:j.pathname,routeId:w2.route.id})};else{let C2=Sa(c,l,M,r2,w2,b2?[]:r,h2),S2=await kt(M,C2,h2,null);if(D2=S2[w2.route.id],!D2){for(let W2 of r2)if(S2[W2.route.id]){D2=S2[W2.route.id];break}}if(M.signal.aborted)return{shortCircuited:!0}}if(So(D2)){let C2;return f2&&f2.replace!=null?C2=f2.replace:C2=um(D2.response.headers.get("Location"),new URL(M.url),F)===x.location.pathname+x.location.search,await tt(M,D2,!0,{submission:Y,replace:C2}),{shortCircuited:!0}}if(re(D2)){let C2=_o(r2,w2.route.id);return(f2&&f2.replace)!==!0&&(L="PUSH"),{matches:r2,pendingActionResult:[C2.route.id,D2,w2.route.id]}}return{matches:r2,pendingActionResult:[w2.route.id,D2]}}async function qa(M,j,Y,r2,h2,m2,b2,f2,v2,D2,w2,C2){let S2=m2||oh(j,b2),W2=b2||f2||fm(S2),u0=!c2&&!D2;if(h2){if(u0){let C0=H0(C2);V2({navigation:S2,...C0!==void 0?{actionData:C0}:{}},{flushSync:w2})}let N2=await lo(Y,j.pathname,M.signal);if(N2.type==="aborted")return{shortCircuited:!0};if(N2.type==="error"){let C0=_o(N2.partialMatches).route.id;return{matches:N2.partialMatches,loaderData:{},errors:{[C0]:N2.error}}}else if(N2.matches)Y=N2.matches;else{let{error:C0,notFoundMatches:ho,route:ue}=jo(j.pathname);return{matches:ho,loaderData:{},errors:{[ue.id]:C0}}}}let d0=d||u,{dsMatches:R2,revalidatingFetchers:Y2}=rm(M,r2,c,l,t.history,x,Y,W2,j,D2?[]:r,D2===!0,G,d2,a2,$,R,d0,F,t.patchRoutesOnNavigation!=null,C2);if(Q=++W,!t.dataStrategy&&!R2.some(N2=>N2.shouldLoad)&&Y2.length===0){let N2=no();return h0(j,{matches:Y,loaderData:{},errors:C2&&re(C2[1])?{[C2[0]]:C2[1].error}:null,...Fm(C2),...N2?{fetchers:new Map(x.fetchers)}:{}},{flushSync:w2}),{shortCircuited:!0}}if(u0){let N2={};if(!h2){N2.navigation=S2;let C0=H0(C2);C0!==void 0&&(N2.actionData=C0)}Y2.length>0&&(N2.fetchers=Wa(Y2)),V2(N2,{flushSync:w2})}Y2.forEach(N2=>{He(N2.key),N2.controller&&O.set(N2.key,N2.controller)});let je=()=>Y2.forEach(N2=>He(N2.key));U&&U.signal.addEventListener("abort",je);let{loaderResults:J0,fetcherResults:z0}=await fi(R2,Y2,M,r2);if(M.signal.aborted)return{shortCircuited:!0};U&&U.signal.removeEventListener("abort",je),Y2.forEach(N2=>O.delete(N2.key));let he=Pr(J0);if(he)return await tt(M,he.result,!0,{replace:v2}),{shortCircuited:!0};if(he=Pr(z0),he)return R.add(he.key),await tt(M,he.result,!0,{replace:v2}),{shortCircuited:!0};let{loaderData:Uo,errors:Dt}=Am(x,Y,J0,C2,Y2,z0);D2&&x.errors&&(Dt={...x.errors,...Dt});let at=no(),nt=io(Q),it=at||nt||Y2.length>0;return{matches:Y,loaderData:Uo,errors:Dt,...it?{fetchers:new Map(x.fetchers)}:{}}}function H0(M){if(M&&!re(M[1]))return{[M[0]]:M[1].data};if(x.actionData)return Object.keys(x.actionData).length===0?null:x.actionData}function Wa(M){return M.forEach(j=>{let Y=x.fetchers.get(j.key),r2=Wn(void 0,Y?Y.data:void 0);x.fetchers.set(j.key,r2)}),new Map(x.fetchers)}async function et(M,j,Y,r2){He(M);let h2=(r2&&r2.flushSync)===!0,m2=d||u,b2=Rh(x.location,x.matches,F,Y,j,r2==null?void 0:r2.relative),f2=Ct(m2,b2,F),v2=co(f2,m2,b2);if(v2.active&&v2.matches&&(f2=v2.matches),!f2){s0(M,j,ye(404,{pathname:b2}),{flushSync:h2});return}let{path:D2,submission:w2,error:C2}=im(!0,b2,r2);if(C2){s0(M,j,C2,{flushSync:h2});return}let S2=new am(t.unstable_getContext?await t.unstable_getContext():void 0),W2=(r2&&r2.preventScrollReset)===!0;if(w2&&Y0(w2.formMethod)){await gi(M,j,D2,f2,S2,v2.active,h2,W2,w2);return}$.set(M,{routeId:j,path:D2}),await zo(M,j,D2,f2,S2,v2.active,h2,W2,w2)}async function gi(M,j,Y,r2,h2,m2,b2,f2,v2){Ga(),$.delete(M);let D2=x.fetchers.get(M);W0(M,mv(v2,D2),{flushSync:b2});let w2=new AbortController,C2=Ea(t.history,Y,w2.signal,v2);if(m2){let c0=await lo(r2,new URL(C2.url).pathname,C2.signal,M);if(c0.type==="aborted")return;if(c0.type==="error"){s0(M,j,c0.error,{flushSync:b2});return}else if(c0.matches)r2=c0.matches;else{s0(M,j,ye(404,{pathname:Y}),{flushSync:b2});return}}let S2=Yr(r2,Y);if(!S2.route.action&&!S2.route.lazy){let c0=ye(405,{method:v2.formMethod,pathname:Y,routeId:j});s0(M,j,c0,{flushSync:b2});return}O.set(M,w2);let W2=W,u0=Sa(c,l,C2,r2,S2,r,h2),R2=(await kt(C2,u0,h2,M))[S2.route.id];if(C2.signal.aborted){O.get(M)===w2&&O.delete(M);return}if(a2.has(M)){if(So(R2)||re(R2)){W0(M,Xt(void 0));return}}else{if(So(R2))if(O.delete(M),Q>W2){W0(M,Xt(void 0));return}else return R.add(M),W0(M,Wn(v2)),tt(C2,R2,!1,{fetcherSubmission:v2,preventScrollReset:f2});if(re(R2)){s0(M,j,R2.error);return}}let Y2=x.navigation.location||x.location,je=Ea(t.history,Y2,w2.signal),J0=d||u,z0=x.navigation.state!=="idle"?Ct(J0,x.navigation.location,F):x.matches;O2(z0,"Didn't find any matches after fetcher action");let he=++W;X.set(M,he);let Uo=Wn(v2,R2.data);x.fetchers.set(M,Uo);let{dsMatches:Dt,revalidatingFetchers:at}=rm(je,h2,c,l,t.history,x,z0,v2,Y2,r,!1,G,d2,a2,$,R,J0,F,t.patchRoutesOnNavigation!=null,[S2.route.id,R2]);at.filter(c0=>c0.key!==M).forEach(c0=>{let Bt=c0.key,wi=x.fetchers.get(Bt),ki=Wn(void 0,wi?wi.data:void 0);x.fetchers.set(Bt,ki),He(Bt),c0.controller&&O.set(Bt,c0.controller)}),V2({fetchers:new Map(x.fetchers)});let nt=()=>at.forEach(c0=>He(c0.key));w2.signal.addEventListener("abort",nt);let{loaderResults:it,fetcherResults:N2}=await fi(Dt,at,je,h2);if(w2.signal.aborted)return;if(w2.signal.removeEventListener("abort",nt),X.delete(M),O.delete(M),at.forEach(c0=>O.delete(c0.key)),x.fetchers.has(M)){let c0=Xt(R2.data);x.fetchers.set(M,c0)}let C0=Pr(it);if(C0)return tt(je,C0.result,!1,{preventScrollReset:f2});if(C0=Pr(N2),C0)return R.add(C0.key),tt(je,C0.result,!1,{preventScrollReset:f2});let{loaderData:ho,errors:ue}=Am(x,z0,it,void 0,at,N2);io(he),x.navigation.state==="loading"&&he>Q?(O2(L,"Expected pending action"),U&&U.abort(),h0(x.navigation.location,{matches:z0,loaderData:ho,errors:ue,fetchers:new Map(x.fetchers)})):(V2({errors:ue,loaderData:pm(x.loaderData,ho,z0,ue),fetchers:new Map(x.fetchers)}),G=!1)}async function zo(M,j,Y,r2,h2,m2,b2,f2,v2){let D2=x.fetchers.get(M);W0(M,Wn(v2,D2?D2.data:void 0),{flushSync:b2});let w2=new AbortController,C2=Ea(t.history,Y,w2.signal);if(m2){let Y2=await lo(r2,new URL(C2.url).pathname,C2.signal,M);if(Y2.type==="aborted")return;if(Y2.type==="error"){s0(M,j,Y2.error,{flushSync:b2});return}else if(Y2.matches)r2=Y2.matches;else{s0(M,j,ye(404,{pathname:Y}),{flushSync:b2});return}}let S2=Yr(r2,Y);O.set(M,w2);let W2=W,u0=Sa(c,l,C2,r2,S2,r,h2),R2=(await kt(C2,u0,h2,M))[S2.route.id];if(O.get(M)===w2&&O.delete(M),!C2.signal.aborted){if(a2.has(M)){W0(M,Xt(void 0));return}if(So(R2))if(Q>W2){W0(M,Xt(void 0));return}else{R.add(M),await tt(C2,R2,!1,{preventScrollReset:f2});return}if(re(R2)){s0(M,j,R2.error);return}W0(M,Xt(R2.data))}}async function tt(M,j,Y,{submission:r2,fetcherSubmission:h2,preventScrollReset:m2,replace:b2}={}){j.response.headers.has("X-Remix-Revalidate")&&(G=!0);let f2=j.response.headers.get("Location");O2(f2,"Expected a Location header on the redirect Response"),f2=um(f2,new URL(M.url),F);let v2=$n(x.location,f2,{_isRedirect:!0});if(i){let u0=!1;if(j.response.headers.has("X-Remix-Reload-Document"))u0=!0;else if(Au(f2)){const d0=N3(f2,!0);u0=d0.origin!==a.location.origin||le(d0.pathname,F)==null}if(u0){b2?a.location.replace(f2):a.location.assign(f2);return}}U=null;let D2=b2===!0||j.response.headers.has("X-Remix-Replace")?"REPLACE":"PUSH",{formMethod:w2,formAction:C2,formEncType:S2}=x.navigation;!r2&&!h2&&w2&&C2&&S2&&(r2=fm(x.navigation));let W2=r2||h2;if(Jy.has(j.response.status)&&W2&&Y0(W2.formMethod))await q0(D2,v2,{submission:{...W2,formAction:f2},preventScrollReset:m2||z,enableViewTransition:Y?n2:void 0});else{let u0=oh(v2,r2);await q0(D2,v2,{overrideNavigation:u0,fetcherSubmission:h2,preventScrollReset:m2||z,enableViewTransition:Y?n2:void 0})}}async function kt(M,j,Y,r2){let h2,m2={};try{h2=await sv(p,M,j,r2,Y,!1)}catch(b2){return j.filter(f2=>f2.shouldLoad).forEach(f2=>{m2[f2.route.id]={type:"error",error:b2}}),m2}if(M.signal.aborted)return m2;for(let[b2,f2]of Object.entries(h2))if(Av(f2)){let v2=f2.result;m2[b2]={type:"redirect",response:hv(v2,M,b2,j,F)}}else m2[b2]=await lv(f2);return m2}async function fi(M,j,Y,r2){let h2=kt(Y,M,r2,null),m2=Promise.all(j.map(async v2=>{if(v2.matches&&v2.match&&v2.request&&v2.controller){let w2=(await kt(v2.request,v2.matches,r2,v2.key))[v2.match.route.id];return{[v2.key]:w2}}else return Promise.resolve({[v2.key]:{type:"error",error:ye(404,{pathname:v2.path})}})})),b2=await h2,f2=(await m2).reduce((v2,D2)=>Object.assign(v2,D2),{});return{loaderResults:b2,fetcherResults:f2}}function Ga(){G=!0,$.forEach((M,j)=>{O.has(j)&&d2.add(j),He(j)})}function W0(M,j,Y={}){x.fetchers.set(M,j),V2({fetchers:new Map(x.fetchers)},{flushSync:(Y&&Y.flushSync)===!0})}function s0(M,j,Y,r2={}){let h2=_o(x.matches,j);S0(M),V2({errors:{[h2.route.id]:Y},fetchers:new Map(x.fetchers)},{flushSync:(r2&&r2.flushSync)===!0})}function xe(M){return e2.set(M,(e2.get(M)||0)+1),a2.has(M)&&a2.delete(M),x.fetchers.get(M)||Qy}function S0(M){let j=x.fetchers.get(M);O.has(M)&&!(j&&j.state==="loading"&&X.has(M))&&He(M),$.delete(M),X.delete(M),R.delete(M),a2.delete(M),d2.delete(M),x.fetchers.delete(M)}function Us(M){let j=(e2.get(M)||0)-1;j<=0?(e2.delete(M),a2.add(M)):e2.set(M,j),V2({fetchers:new Map(x.fetchers)})}function He(M){let j=O.get(M);j&&(j.abort(),O.delete(M))}function bi(M){for(let j of M){let Y=xe(j),r2=Xt(Y.data);x.fetchers.set(j,r2)}}function no(){let M=[],j=!1;for(let Y of R){let r2=x.fetchers.get(Y);O2(r2,`Expected fetcher: ${Y}`),r2.state==="loading"&&(R.delete(Y),M.push(Y),j=!0)}return bi(M),j}function io(M){let j=[];for(let[Y,r2]of X)if(r2<M){let h2=x.fetchers.get(Y);O2(h2,`Expected fetcher: ${Y}`),h2.state==="loading"&&(He(Y),X.delete(Y),j.push(Y))}return bi(j),j.length>0}function ot(M,j){let Y=x.blockers.get(M)||qn;return A2.get(M)!==j&&A2.set(M,j),Y}function ro(M){x.blockers.delete(M),A2.delete(M)}function ze(M,j){let Y=x.blockers.get(M)||qn;O2(Y.state==="unblocked"&&j.state==="blocked"||Y.state==="blocked"&&j.state==="blocked"||Y.state==="blocked"&&j.state==="proceeding"||Y.state==="blocked"&&j.state==="unblocked"||Y.state==="proceeding"&&j.state==="unblocked",`Invalid blocker state transition: ${Y.state} -> ${j.state}`);let r2=new Map(x.blockers);r2.set(M,j),V2({blockers:r2})}function Ci({currentLocation:M,nextLocation:j,historyAction:Y}){if(A2.size===0)return;A2.size>1&&F0(!1,"A router only supports one blocker at a time");let r2=Array.from(A2.entries()),[h2,m2]=r2[r2.length-1],b2=x.blockers.get(h2);if(!(b2&&b2.state==="proceeding")&&m2({currentLocation:M,nextLocation:j,historyAction:Y}))return h2}function jo(M){let j=ye(404,{pathname:M}),Y=d||u,{matches:r2,route:h2}=mm(Y);return{notFoundMatches:r2,route:h2,error:j}}function yi(M,j,Y){if(y=M,v=j,w=Y||null,!D&&x.navigation===th){D=!0;let r2=vi(x.location,x.matches);r2!=null&&V2({restoreScrollPosition:r2})}return()=>{y=null,v=null,w=null}}function Vo(M,j){return w&&w(M,j.map(r2=>H3(r2,x.loaderData)))||M.key}function so(M,j){if(y&&v){let Y=Vo(M,j);y[Y]=v()}}function vi(M,j){if(y){let Y=Vo(M,j),r2=y[Y];if(typeof r2=="number")return r2}return null}function co(M,j,Y){if(t.patchRoutesOnNavigation)if(M){if(Object.keys(M[0].params).length>0)return{active:!0,matches:Xr(j,Y,F,!0)}}else return{active:!0,matches:Xr(j,Y,F,!0)||[]};return{active:!1,matches:null}}async function lo(M,j,Y,r2){if(!t.patchRoutesOnNavigation)return{type:"success",matches:M};let h2=M;for(;;){let m2=d==null,b2=d||u,f2=l;try{await t.patchRoutesOnNavigation({signal:Y,path:j,matches:h2,fetcherKey:r2,patch:(w2,C2)=>{Y.aborted||sm(w2,C2,b2,f2,c,!1)}})}catch(w2){return{type:"error",error:w2,partialMatches:h2}}finally{m2&&!Y.aborted&&(u=[...u])}if(Y.aborted)return{type:"aborted"};let v2=Ct(b2,j,F);if(v2)return{type:"success",matches:v2};let D2=Xr(b2,j,F,!0);if(!D2||h2.length===D2.length&&h2.every((w2,C2)=>w2.route.id===D2[C2].route.id))return{type:"success",matches:null};h2=D2}}function Ka(M){l={},d=ei(M,c,void 0,l)}function Za(M,j,Y=!1){let r2=d==null;sm(M,j,d||u,l,c,Y),r2&&(u=[...u],V2({}))}return P={get basename(){return F},get future(){return f},get state(){return x},get routes(){return u},get window(){return a},initialize:K2,subscribe:I2,enableScrollRestoration:yi,navigate:I0,fetch:et,revalidate:Se,createHref:M=>t.history.createHref(M),encodeLocation:M=>t.history.encodeLocation(M),getFetcher:xe,deleteFetcher:Us,dispose:E2,getBlocker:ot,deleteBlocker:ro,patchRoutes:Za,_internalFetchControllers:O,_internalSetRoutes:Ka,_internalSetStateDoNotUseOrYouWillBreakYourApp(M){V2(M)}},P}function ov(t){return t!=null&&("formData"in t&&t.formData!=null||"body"in t&&t.body!==void 0)}function Rh(t,a,i,r,c,l){let u,d;if(c){u=[];for(let p of a)if(u.push(p),p.route.id===c){d=p;break}}else u=a,d=a[a.length-1];let F=du(r||".",uu(u),le(t.pathname,i)||t.pathname,l==="path");if(r==null&&(F.search=t.search,F.hash=t.hash),(r==null||r===""||r===".")&&d){let p=pu(F.search);if(d.route.index&&!p)F.search=F.search?F.search.replace(/^\?/,"?index&"):"?index";else if(!d.route.index&&p){let f=new URLSearchParams(F.search),m=f.getAll("index");f.delete("index"),m.filter(y=>y).forEach(y=>f.append("index",y));let C=f.toString();F.search=C?`?${C}`:""}}return i!=="/"&&(F.pathname=jy({basename:i,pathname:F.pathname})),Jt(F)}function im(t,a,i){if(!i||!ov(i))return{path:a};if(i.formMethod&&!pv(i.formMethod))return{path:a,error:ye(405,{method:i.formMethod})};let r=()=>({path:a,error:ye(400,{type:"invalid-body"})}),l=(i.formMethod||"get").toUpperCase(),u=Q3(a);if(i.body!==void 0){if(i.formEncType==="text/plain"){if(!Y0(l))return r();let m=typeof i.body=="string"?i.body:i.body instanceof FormData||i.body instanceof URLSearchParams?Array.from(i.body.entries()).reduce((C,[y,w])=>`${C}${y}=${w}
`,""):String(i.body);return{path:a,submission:{formMethod:l,formAction:u,formEncType:i.formEncType,formData:void 0,json:void 0,text:m}}}else if(i.formEncType==="application/json"){if(!Y0(l))return r();try{let m=typeof i.body=="string"?JSON.parse(i.body):i.body;return{path:a,submission:{formMethod:l,formAction:u,formEncType:i.formEncType,formData:void 0,json:m,text:void 0}}}catch{return r()}}}O2(typeof FormData=="function","FormData is not available in this environment");let d,F;if(i.formData)d=Mh(i.formData),F=i.formData;else if(i.body instanceof FormData)d=Mh(i.body),F=i.body;else if(i.body instanceof URLSearchParams)d=i.body,F=dm(d);else if(i.body==null)d=new URLSearchParams,F=new FormData;else try{d=new URLSearchParams(i.body),F=dm(d)}catch{return r()}let p={formMethod:l,formAction:u,formEncType:i&&i.formEncType||"application/x-www-form-urlencoded",formData:F,json:void 0,text:void 0};if(Y0(p.formMethod))return{path:a,submission:p};let f=eo(a);return t&&f.search&&pu(f.search)&&d.append("index",""),f.search=`?${d}`,{path:Jt(f),submission:p}}function rm(t,a,i,r,c,l,u,d,F,p,f,m,C,y,w,v,D,B,S,E){var c2;let T=E?re(E[1])?E[1].error:E[1].data:void 0,P=c.createURL(l.location),x=c.createURL(F),L;if(f&&l.errors){let G=Object.keys(l.errors)[0];L=u.findIndex(d2=>d2.route.id===G)}else if(E&&re(E[1])){let G=E[0];L=u.findIndex(d2=>d2.route.id===G)-1}let z=E?E[1].statusCode:void 0,U=z&&z>=400,n2={currentUrl:P,currentParams:((c2=l.matches[0])==null?void 0:c2.params)||{},nextUrl:x,nextParams:u[0].params,...d,actionResult:T,actionStatus:z},u2=u.map((G,d2)=>{let{route:O}=G,W=null;if(L!=null&&d2>L?W=!1:O.lazy?W=!0:O.loader==null?W=!1:f?W=Ph(O,l.loaderData,l.errors):av(l.loaderData,l.matches[d2],G)&&(W=!0),W!==null)return Ih(i,r,t,G,p,a,W);let Q=U?!1:m||P.pathname+P.search===x.pathname+x.search||P.search!==x.search||nv(l.matches[d2],G),X={...n2,defaultShouldRevalidate:Q},R=is(G,X);return Ih(i,r,t,G,p,a,R,X)}),s2=[];return w.forEach((G,d2)=>{if(f||!u.some(a2=>a2.route.id===G.routeId)||y.has(d2))return;let O=l.fetchers.get(d2),W=O&&O.state!=="idle"&&O.data===void 0,Q=Ct(D,G.path,B);if(!Q){if(S&&W)return;s2.push({key:d2,routeId:G.routeId,path:G.path,matches:null,match:null,request:null,controller:null});return}if(v.has(d2))return;let X=Yr(Q,G.path),R=new AbortController,$=Ea(c,G.path,R.signal),e2=null;if(C.has(d2))C.delete(d2),e2=Sa(i,r,$,Q,X,p,a);else if(W)m&&(e2=Sa(i,r,$,Q,X,p,a));else{let a2={...n2,defaultShouldRevalidate:U?!1:m};is(X,a2)&&(e2=Sa(i,r,$,Q,X,p,a,a2))}e2&&s2.push({key:d2,routeId:G.routeId,path:G.path,matches:e2,match:X,request:$,controller:R})}),{dsMatches:u2,revalidatingFetchers:s2}}function Ph(t,a,i){if(t.lazy)return!0;if(!t.loader)return!1;let r=a!=null&&t.id in a,c=i!=null&&i[t.id]!==void 0;return!r&&c?!1:typeof t.loader=="function"&&t.loader.hydrate===!0?!0:!r&&!c}function av(t,a,i){let r=!a||i.route.id!==a.route.id,c=!t.hasOwnProperty(i.route.id);return r||c}function nv(t,a){let i=t.route.path;return t.pathname!==a.pathname||i!=null&&i.endsWith("*")&&t.params["*"]!==a.params["*"]}function is(t,a){if(t.route.shouldRevalidate){let i=t.route.shouldRevalidate(a);if(typeof i=="boolean")return i}return a.defaultShouldRevalidate}function sm(t,a,i,r,c,l){let u;if(t){let p=r[t];O2(p,`No route found to patch children into: routeId = ${t}`),p.children||(p.children=[]),u=p.children}else u=i;let d=[],F=[];if(a.forEach(p=>{let f=u.find(m=>K3(p,m));f?F.push({existingRoute:f,newRoute:p}):d.push(p)}),d.length>0){let p=ei(d,c,[t||"_","patch",String((u==null?void 0:u.length)||"0")],r);u.push(...p)}if(l&&F.length>0)for(let p=0;p<F.length;p++){let{existingRoute:f,newRoute:m}=F[p],C=f,[y]=ei([m],c,[],{},!0);Object.assign(C,{element:y.element?y.element:C.element,errorElement:y.errorElement?y.errorElement:C.errorElement,hydrateFallbackElement:y.hydrateFallbackElement?y.hydrateFallbackElement:C.hydrateFallbackElement})}}function K3(t,a){return"id"in t&&"id"in a&&t.id===a.id?!0:t.index===a.index&&t.path===a.path&&t.caseSensitive===a.caseSensitive?(!t.children||t.children.length===0)&&(!a.children||a.children.length===0)?!0:t.children.every((i,r)=>{var c;return(c=a.children)==null?void 0:c.some(l=>K3(i,l))}):!1}var cm=new WeakMap,Z3=({key:t,route:a,manifest:i,mapRouteProperties:r})=>{let c=i[a.id];if(O2(c,"No route found in manifest"),!c.lazy||typeof c.lazy!="object")return;let l=c.lazy[t];if(!l)return;let u=cm.get(c);u||(u={},cm.set(c,u));let d=u[t];if(d)return d;let F=(async()=>{let p=By(t),m=c[t]!==void 0&&t!=="hasErrorBoundary";if(p)F0(!p,"Route property "+t+" is not a supported lazy route property. This property will be ignored."),u[t]=Promise.resolve();else if(m)F0(!1,`Route "${c.id}" has a static property "${t}" defined. The lazy property will be ignored.`);else{let C=await l();C!=null&&(Object.assign(c,{[t]:C}),Object.assign(c,r(c)))}typeof c.lazy=="object"&&(c.lazy[t]=void 0,Object.values(c.lazy).every(C=>C===void 0)&&(c.lazy=void 0))})();return u[t]=F,F},lm=new WeakMap;function iv(t,a,i,r,c){let l=i[t.id];if(O2(l,"No route found in manifest"),!t.lazy)return{lazyRoutePromise:void 0,lazyHandlerPromise:void 0};if(typeof t.lazy=="function"){let f=lm.get(l);if(f)return{lazyRoutePromise:f,lazyHandlerPromise:f};let m=(async()=>{O2(typeof t.lazy=="function","No lazy route function found");let C=await t.lazy(),y={};for(let w in C){let v=C[w];if(v===void 0)continue;let D=_y(w),S=l[w]!==void 0&&w!=="hasErrorBoundary";D?F0(!D,"Route property "+w+" is not a supported property to be returned from a lazy route function. This property will be ignored."):S?F0(!S,`Route "${l.id}" has a static property "${w}" defined but its lazy function is also returning a value for this property. The lazy route property "${w}" will be ignored.`):y[w]=v}Object.assign(l,y),Object.assign(l,{...r(l),lazy:void 0})})();return lm.set(l,m),m.catch(()=>{}),{lazyRoutePromise:m,lazyHandlerPromise:m}}let u=Object.keys(t.lazy),d=[],F;for(let f of u){if(c&&c.includes(f))continue;let m=Z3({key:f,route:t,manifest:i,mapRouteProperties:r});m&&(d.push(m),f===a&&(F=m))}let p=d.length>0?Promise.all(d).then(()=>{}):void 0;return p==null||p.catch(()=>{}),F==null||F.catch(()=>{}),{lazyRoutePromise:p,lazyHandlerPromise:F}}async function hm(t){let a=t.matches.filter(c=>c.shouldLoad),i={};return(await Promise.all(a.map(c=>c.resolve()))).forEach((c,l)=>{i[a[l].route.id]=c}),i}async function rv(t){return t.matches.some(a=>a.route.unstable_middleware)?X3(t,!1,()=>hm(t),(a,i)=>({[i]:{type:"error",result:a}})):hm(t)}async function X3(t,a,i,r){let{matches:c,request:l,params:u,context:d}=t,F={handlerResult:void 0};try{let p=c.flatMap(m=>m.route.unstable_middleware?m.route.unstable_middleware.map(C=>[m.route.id,C]):[]),f=await Y3({request:l,params:u,context:d},p,a,F,i);return a?f:F.handlerResult}catch(p){if(!F.middlewareError)throw p;let f=await r(F.middlewareError.error,F.middlewareError.routeId);return F.handlerResult?Object.assign(F.handlerResult,f):f}}async function Y3(t,a,i,r,c,l=0){let{request:u}=t;if(u.signal.aborted)throw u.signal.reason?u.signal.reason:new Error(`Request aborted without an \`AbortSignal.reason\`: ${u.method} ${u.url}`);let d=a[l];if(!d)return r.handlerResult=await c(),r.handlerResult;let[F,p]=d,f=!1,m,C=async()=>{if(f)throw new Error("You may only call `next()` once per middleware");f=!0,await Y3(t,a,i,r,c,l+1)};try{let y=await p({request:t.request,params:t.params,context:t.context},C);return f?y===void 0?m:y:C()}catch(y){throw r.middlewareError?r.middlewareError.error!==y&&(r.middlewareError={routeId:F,error:y}):r.middlewareError={routeId:F,error:y},y}}function J3(t,a,i,r,c){let l=Z3({key:"unstable_middleware",route:r.route,manifest:a,mapRouteProperties:t}),u=iv(r.route,Y0(i.method)?"action":"loader",a,t,c);return{middleware:l,route:u.lazyRoutePromise,handler:u.lazyHandlerPromise}}function Ih(t,a,i,r,c,l,u,d=null){let F=!1,p=J3(t,a,i,r,c);return{...r,_lazyPromises:p,shouldLoad:u,unstable_shouldRevalidateArgs:d,unstable_shouldCallHandler(f){return F=!0,d?typeof f=="boolean"?is(r,{...d,defaultShouldRevalidate:f}):is(r,d):u},resolve(f){return F||u||f&&!Y0(i.method)&&(r.route.lazy||r.route.loader)?cv({request:i,match:r,lazyHandlerPromise:p==null?void 0:p.handler,lazyRoutePromise:p==null?void 0:p.route,handlerOverride:f,scopedContext:l}):Promise.resolve({type:"data",result:void 0})}}}function Sa(t,a,i,r,c,l,u,d=null){return r.map(F=>F.route.id!==c.route.id?{...F,shouldLoad:!1,unstable_shouldRevalidateArgs:d,unstable_shouldCallHandler:()=>!1,_lazyPromises:J3(t,a,i,F,l),resolve:()=>Promise.resolve({type:"data",result:void 0})}:Ih(t,a,i,F,l,u,!0,d))}async function sv(t,a,i,r,c,l){i.some(p=>{var f;return(f=p._lazyPromises)==null?void 0:f.middleware})&&await Promise.all(i.map(p=>{var f;return(f=p._lazyPromises)==null?void 0:f.middleware}));let u={request:a,params:i[0].params,context:c,matches:i},F=await t({...u,fetcherKey:r,unstable_runClientMiddleware:p=>{let f=u;return X3(f,!1,()=>p({...f,fetcherKey:r,unstable_runClientMiddleware:()=>{throw new Error("Cannot call `unstable_runClientMiddleware()` from within an `unstable_runClientMiddleware` handler")}}),(m,C)=>({[C]:{type:"error",result:m}}))}});try{await Promise.all(i.flatMap(p=>{var f,m;return[(f=p._lazyPromises)==null?void 0:f.handler,(m=p._lazyPromises)==null?void 0:m.route]}))}catch{}return F}async function cv({request:t,match:a,lazyHandlerPromise:i,lazyRoutePromise:r,handlerOverride:c,scopedContext:l}){let u,d,F=Y0(t.method),p=F?"action":"loader",f=m=>{let C,y=new Promise((D,B)=>C=B);d=()=>C(),t.signal.addEventListener("abort",d);let w=D=>typeof m!="function"?Promise.reject(new Error(`You cannot call the handler for a route which defines a boolean "${p}" [routeId: ${a.route.id}]`)):m({request:t,params:a.params,context:l},...D!==void 0?[D]:[]),v=(async()=>{try{return{type:"data",result:await(c?c(B=>w(B)):w())}}catch(D){return{type:"error",result:D}}})();return Promise.race([v,y])};try{let m=F?a.route.action:a.route.loader;if(i||r)if(m){let C,[y]=await Promise.all([f(m).catch(w=>{C=w}),i,r]);if(C!==void 0)throw C;u=y}else{await i;let C=F?a.route.action:a.route.loader;if(C)[u]=await Promise.all([f(C),r]);else if(p==="action"){let y=new URL(t.url),w=y.pathname+y.search;throw ye(405,{method:t.method,pathname:w,routeId:a.route.id})}else return{type:"data",result:void 0}}else if(m)u=await f(m);else{let C=new URL(t.url),y=C.pathname+C.search;throw ye(404,{pathname:y})}}catch(m){return{type:"error",result:m}}finally{d&&t.signal.removeEventListener("abort",d)}return u}async function lv(t){var r,c,l,u,d,F;let{result:a,type:i}=t;if($3(a)){let p;try{let f=a.headers.get("Content-Type");f&&/\bapplication\/json\b/.test(f)?a.body==null?p=null:p=await a.json():p=await a.text()}catch(f){return{type:"error",error:f}}return i==="error"?{type:"error",error:new ns(a.status,a.statusText,p),statusCode:a.status,headers:a.headers}:{type:"data",data:p,statusCode:a.status,headers:a.headers}}return i==="error"?gm(a)?a.data instanceof Error?{type:"error",error:a.data,statusCode:(r=a.init)==null?void 0:r.status,headers:(c=a.init)!=null&&c.headers?new Headers(a.init.headers):void 0}:{type:"error",error:new ns(((l=a.init)==null?void 0:l.status)||500,void 0,a.data),statusCode:ti(a)?a.status:void 0,headers:(u=a.init)!=null&&u.headers?new Headers(a.init.headers):void 0}:{type:"error",error:a,statusCode:ti(a)?a.status:void 0}:gm(a)?{type:"data",data:a.data,statusCode:(d=a.init)==null?void 0:d.status,headers:(F=a.init)!=null&&F.headers?new Headers(a.init.headers):void 0}:{type:"data",data:a}}function hv(t,a,i,r,c){let l=t.headers.get("Location");if(O2(l,"Redirects returned/thrown from loaders/actions must have a Location header"),!Au(l)){let u=r.slice(0,r.findIndex(d=>d.route.id===i)+1);l=Rh(new URL(a.url),u,c,l),t.headers.set("Location",l)}return t}function um(t,a,i){if(Au(t)){let r=t,c=r.startsWith("//")?new URL(a.protocol+r):new URL(r),l=le(c.pathname,i)!=null;if(c.origin===a.origin&&l)return c.pathname+c.search+c.hash}return t}function Ea(t,a,i,r){let c=t.createURL(Q3(a)).toString(),l={signal:i};if(r&&Y0(r.formMethod)){let{formMethod:u,formEncType:d}=r;l.method=u.toUpperCase(),d==="application/json"?(l.headers=new Headers({"Content-Type":d}),l.body=JSON.stringify(r.json)):d==="text/plain"?l.body=r.text:d==="application/x-www-form-urlencoded"&&r.formData?l.body=Mh(r.formData):l.body=r.formData}return new Request(c,l)}function Mh(t){let a=new URLSearchParams;for(let[i,r]of t.entries())a.append(i,typeof r=="string"?r:r.name);return a}function dm(t){let a=new FormData;for(let[i,r]of t.entries())a.append(i,r);return a}function uv(t,a,i,r=!1,c=!1){let l={},u=null,d,F=!1,p={},f=i&&re(i[1])?i[1].error:void 0;return t.forEach(m=>{if(!(m.route.id in a))return;let C=m.route.id,y=a[C];if(O2(!So(y),"Cannot handle redirect results in processLoaderData"),re(y)){let w=y.error;if(f!==void 0&&(w=f,f=void 0),u=u||{},c)u[C]=w;else{let v=_o(t,C);u[v.route.id]==null&&(u[v.route.id]=w)}r||(l[C]=G3),F||(F=!0,d=ti(y.error)?y.error.status:500),y.headers&&(p[C]=y.headers)}else l[C]=y.data,y.statusCode&&y.statusCode!==200&&!F&&(d=y.statusCode),y.headers&&(p[C]=y.headers)}),f!==void 0&&i&&(u={[i[0]]:f},i[2]&&(l[i[2]]=void 0)),{loaderData:l,errors:u,statusCode:d||200,loaderHeaders:p}}function Am(t,a,i,r,c,l){let{loaderData:u,errors:d}=uv(a,i,r);return c.filter(F=>!F.matches||F.matches.some(p=>p.shouldLoad)).forEach(F=>{let{key:p,match:f,controller:m}=F,C=l[p];if(O2(C,"Did not find corresponding fetcher result"),!(m&&m.signal.aborted))if(re(C)){let y=_o(t.matches,f==null?void 0:f.route.id);d&&d[y.route.id]||(d={...d,[y.route.id]:C.error}),t.fetchers.delete(p)}else if(So(C))O2(!1,"Unhandled fetcher revalidation redirect");else{let y=Xt(C.data);t.fetchers.set(p,y)}}),{loaderData:u,errors:d}}function pm(t,a,i,r){let c=Object.entries(a).filter(([,l])=>l!==G3).reduce((l,[u,d])=>(l[u]=d,l),{});for(let l of i){let u=l.route.id;if(!a.hasOwnProperty(u)&&t.hasOwnProperty(u)&&l.route.loader&&(c[u]=t[u]),r&&r.hasOwnProperty(u))break}return c}function Fm(t){return t?re(t[1])?{actionData:{}}:{actionData:{[t[0]]:t[1].data}}:{}}function _o(t,a){return(a?t.slice(0,t.findIndex(r=>r.route.id===a)+1):[...t]).reverse().find(r=>r.route.hasErrorBoundary===!0)||t[0]}function mm(t){let a=t.length===1?t[0]:t.find(i=>i.index||!i.path||i.path==="/")||{id:"__shim-error-route__"};return{matches:[{params:{},pathname:"",pathnameBase:"",route:a}],route:a}}function ye(t,{pathname:a,routeId:i,method:r,type:c,message:l}={}){let u="Unknown Server Error",d="Unknown @remix-run/router error";return t===400?(u="Bad Request",r&&a&&i?d=`You made a ${r} request to "${a}" but did not provide a \`loader\` for route "${i}", so there is no way to handle the request.`:c==="invalid-body"&&(d="Unable to encode submission body")):t===403?(u="Forbidden",d=`Route "${i}" does not match URL "${a}"`):t===404?(u="Not Found",d=`No route matches URL "${a}"`):t===405&&(u="Method Not Allowed",r&&a&&i?d=`You made a ${r.toUpperCase()} request to "${a}" but did not provide an \`action\` for route "${i}", so there is no way to handle the request.`:r&&(d=`Invalid request method "${r.toUpperCase()}"`)),new ns(t||500,u,new Error(d),!0)}function Pr(t){let a=Object.entries(t);for(let i=a.length-1;i>=0;i--){let[r,c]=a[i];if(So(c))return{key:r,result:c}}}function Q3(t){let a=typeof t=="string"?eo(t):t;return Jt({...a,hash:""})}function dv(t,a){return t.pathname!==a.pathname||t.search!==a.search?!1:t.hash===""?a.hash!=="":t.hash===a.hash?!0:a.hash!==""}function Av(t){return $3(t.result)&&Yy.has(t.result.status)}function re(t){return t.type==="error"}function So(t){return(t&&t.type)==="redirect"}function gm(t){return typeof t=="object"&&t!=null&&"type"in t&&"data"in t&&"init"in t&&t.type==="DataWithResponseInit"}function $3(t){return t!=null&&typeof t.status=="number"&&typeof t.statusText=="string"&&typeof t.headers=="object"&&typeof t.body<"u"}function pv(t){return Xy.has(t.toUpperCase())}function Y0(t){return Ky.has(t.toUpperCase())}function pu(t){return new URLSearchParams(t).getAll("index").some(a=>a==="")}function Yr(t,a){let i=typeof a=="string"?eo(a).search:a.search;if(t[t.length-1].route.index&&pu(i||""))return t[t.length-1];let r=U3(t);return r[r.length-1]}function fm(t){let{formMethod:a,formAction:i,formEncType:r,text:c,formData:l,json:u}=t;if(!(!a||!i||!r)){if(c!=null)return{formMethod:a,formAction:i,formEncType:r,formData:void 0,json:void 0,text:c};if(l!=null)return{formMethod:a,formAction:i,formEncType:r,formData:l,json:void 0,text:void 0};if(u!==void 0)return{formMethod:a,formAction:i,formEncType:r,formData:void 0,json:u,text:void 0}}}function oh(t,a){return a?{state:"loading",location:t,formMethod:a.formMethod,formAction:a.formAction,formEncType:a.formEncType,formData:a.formData,json:a.json,text:a.text}:{state:"loading",location:t,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0}}function Fv(t,a){return{state:"submitting",location:t,formMethod:a.formMethod,formAction:a.formAction,formEncType:a.formEncType,formData:a.formData,json:a.json,text:a.text}}function Wn(t,a){return t?{state:"loading",formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text,data:a}:{state:"loading",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:a}}function mv(t,a){return{state:"submitting",formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text,data:a?a.data:void 0}}function Xt(t){return{state:"idle",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:t}}function gv(t,a){try{let i=t.sessionStorage.getItem(W3);if(i){let r=JSON.parse(i);for(let[c,l]of Object.entries(r||{}))l&&Array.isArray(l)&&a.set(c,new Set(l||[]))}}catch{}}function fv(t,a){if(a.size>0){let i={};for(let[r,c]of a)i[r]=[...c];try{t.sessionStorage.setItem(W3,JSON.stringify(i))}catch(r){F0(!1,`Failed to save applied view transitions in sessionStorage (${r}).`)}}}function bv(){let t,a,i=new Promise((r,c)=>{t=async l=>{r(l);try{await i}catch{}},a=async l=>{c(l);try{await i}catch{}}});return{promise:i,resolve:t,reject:a}}var Mo=b.createContext(null);Mo.displayName="DataRouter";var Oa=b.createContext(null);Oa.displayName="DataRouterState";b.createContext(!1);var Fu=b.createContext({isTransitioning:!1});Fu.displayName="ViewTransition";var eg=b.createContext(new Map);eg.displayName="Fetchers";var Cv=b.createContext(null);Cv.displayName="Await";var Ee=b.createContext(null);Ee.displayName="Navigation";var Cs=b.createContext(null);Cs.displayName="Location";var wt=b.createContext({outlet:null,matches:[],isDataRoute:!1});wt.displayName="Route";var mu=b.createContext(null);mu.displayName="RouteError";function yv(t,{relative:a}={}){O2(Na(),"useHref() may be used only in the context of a <Router> component.");let{basename:i,navigator:r}=b.useContext(Ee),{hash:c,pathname:l,search:u}=ri(t,{relative:a}),d=l;return i!=="/"&&(d=l==="/"?i:Xe([i,l])),r.createHref({pathname:d,search:u,hash:c})}function Na(){return b.useContext(Cs)!=null}function i0(){return O2(Na(),"useLocation() may be used only in the context of a <Router> component."),b.useContext(Cs).location}function vv(t){O2(Na(),"useMatch() may be used only in the context of a <Router> component.");let{pathname:a}=i0();return b.useMemo(()=>xo(t,V3(a)),[a,t])}var tg="You should call navigate() in a React.useEffect(), not when your component is first rendered.";function og(t){b.useContext(Ee).static||b.useLayoutEffect(t)}function gu(){let{isDataRoute:t}=b.useContext(wt);return t?Mv():wv()}function wv(){O2(Na(),"useNavigate() may be used only in the context of a <Router> component.");let t=b.useContext(Mo),{basename:a,navigator:i}=b.useContext(Ee),{matches:r}=b.useContext(wt),{pathname:c}=i0(),l=JSON.stringify(uu(r)),u=b.useRef(!1);return og(()=>{u.current=!0}),b.useCallback((F,p={})=>{if(F0(u.current,tg),!u.current)return;if(typeof F=="number"){i.go(F);return}let f=du(F,JSON.parse(l),c,p.relative==="path");t==null&&a!=="/"&&(f.pathname=f.pathname==="/"?a:Xe([a,f.pathname])),(p.replace?i.replace:i.push)(f,p.state,p)},[a,i,l,c,t])}b.createContext(null);function ri(t,{relative:a}={}){let{matches:i}=b.useContext(wt),{pathname:r}=i0(),c=JSON.stringify(uu(i));return b.useMemo(()=>du(t,JSON.parse(c),r,a==="path"),[t,c,r,a])}function kv(t,a,i,r){O2(Na(),"useRoutes() may be used only in the context of a <Router> component.");let{navigator:c}=b.useContext(Ee),{matches:l}=b.useContext(wt),u=l[l.length-1],d=u?u.params:{},F=u?u.pathname:"/",p=u?u.pathnameBase:"/",f=u&&u.route;{let B=f&&f.path||"";ng(F,!f||B.endsWith("*")||B.endsWith("*?"),`You rendered descendant <Routes> (or called \`useRoutes()\`) at "${F}" (under <Route path="${B}">) but the parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.

Please change the parent <Route path="${B}"> to <Route path="${B==="/"?"*":`${B}/*`}">.`)}let m=i0(),C;C=m;let y=C.pathname||"/",w=y;if(p!=="/"){let B=p.replace(/^\//,"").split("/");w="/"+y.replace(/^\//,"").split("/").slice(B.length).join("/")}let v=Ct(t,{pathname:w});return F0(f||v!=null,`No routes matched location "${C.pathname}${C.search}${C.hash}" `),F0(v==null||v[v.length-1].route.element!==void 0||v[v.length-1].route.Component!==void 0||v[v.length-1].route.lazy!==void 0,`Matched leaf route at location "${C.pathname}${C.search}${C.hash}" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.`),Sv(v&&v.map(B=>Object.assign({},B,{params:Object.assign({},d,B.params),pathname:Xe([p,c.encodeLocation?c.encodeLocation(B.pathname).pathname:B.pathname]),pathnameBase:B.pathnameBase==="/"?p:Xe([p,c.encodeLocation?c.encodeLocation(B.pathnameBase).pathname:B.pathnameBase])})),l,i,r)}function Dv(){let t=Iv(),a=ti(t)?`${t.status} ${t.statusText}`:t instanceof Error?t.message:JSON.stringify(t),i=t instanceof Error?t.stack:null,r="rgba(200,200,200, 0.5)",c={padding:"0.5rem",backgroundColor:r},l={padding:"2px 4px",backgroundColor:r},u=null;return console.error("Error handled by React Router default ErrorBoundary:",t),u=b.createElement(b.Fragment,null,b.createElement("p",null,"💿 Hey developer 👋"),b.createElement("p",null,"You can provide a way better UX than this when your app throws errors by providing your own ",b.createElement("code",{style:l},"ErrorBoundary")," or"," ",b.createElement("code",{style:l},"errorElement")," prop on your route.")),b.createElement(b.Fragment,null,b.createElement("h2",null,"Unexpected Application Error!"),b.createElement("h3",{style:{fontStyle:"italic"}},a),i?b.createElement("pre",{style:c},i):null,u)}var Bv=b.createElement(Dv,null),Ev=class extends b.Component{constructor(t){super(t),this.state={location:t.location,revalidation:t.revalidation,error:t.error}}static getDerivedStateFromError(t){return{error:t}}static getDerivedStateFromProps(t,a){return a.location!==t.location||a.revalidation!=="idle"&&t.revalidation==="idle"?{error:t.error,location:t.location,revalidation:t.revalidation}:{error:t.error!==void 0?t.error:a.error,location:a.location,revalidation:t.revalidation||a.revalidation}}componentDidCatch(t,a){console.error("React Router caught the following error during render",t,a)}render(){return this.state.error!==void 0?b.createElement(wt.Provider,{value:this.props.routeContext},b.createElement(mu.Provider,{value:this.state.error,children:this.props.component})):this.props.children}};function _v({routeContext:t,match:a,children:i}){let r=b.useContext(Mo);return r&&r.static&&r.staticContext&&(a.route.errorElement||a.route.ErrorBoundary)&&(r.staticContext._deepestRenderedBoundaryId=a.route.id),b.createElement(wt.Provider,{value:t},i)}function Sv(t,a=[],i=null,r=null){if(t==null){if(!i)return null;if(i.errors)t=i.matches;else if(a.length===0&&!i.initialized&&i.matches.length>0)t=i.matches;else return null}let c=t,l=i==null?void 0:i.errors;if(l!=null){let F=c.findIndex(p=>p.route.id&&(l==null?void 0:l[p.route.id])!==void 0);O2(F>=0,`Could not find a matching route for errors on route IDs: ${Object.keys(l).join(",")}`),c=c.slice(0,Math.min(c.length,F+1))}let u=!1,d=-1;if(i)for(let F=0;F<c.length;F++){let p=c[F];if((p.route.HydrateFallback||p.route.hydrateFallbackElement)&&(d=F),p.route.id){let{loaderData:f,errors:m}=i,C=p.route.loader&&!f.hasOwnProperty(p.route.id)&&(!m||m[p.route.id]===void 0);if(p.route.lazy||C){u=!0,d>=0?c=c.slice(0,d+1):c=[c[0]];break}}}return c.reduceRight((F,p,f)=>{let m,C=!1,y=null,w=null;i&&(m=l&&p.route.id?l[p.route.id]:void 0,y=p.route.errorElement||Bv,u&&(d<0&&f===0?(ng("route-fallback",!1,"No `HydrateFallback` element provided to render during initial hydration"),C=!0,w=null):d===f&&(C=!0,w=p.route.hydrateFallbackElement||null)));let v=a.concat(c.slice(0,f+1)),D=()=>{let B;return m?B=y:C?B=w:p.route.Component?B=b.createElement(p.route.Component,null):p.route.element?B=p.route.element:B=F,b.createElement(_v,{match:p,routeContext:{outlet:F,matches:v,isDataRoute:i!=null},children:B})};return i&&(p.route.ErrorBoundary||p.route.errorElement||f===0)?b.createElement(Ev,{location:i.location,revalidation:i.revalidation,component:y,error:m,children:D(),routeContext:{outlet:null,matches:v,isDataRoute:!0}}):D()},null)}function fu(t){return`${t} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`}function xv(t){let a=b.useContext(Mo);return O2(a,fu(t)),a}function bu(t){let a=b.useContext(Oa);return O2(a,fu(t)),a}function Tv(t){let a=b.useContext(wt);return O2(a,fu(t)),a}function Cu(t){let a=Tv(t),i=a.matches[a.matches.length-1];return O2(i.route.id,`${t} can only be used on routes that contain a unique "id"`),i.route.id}function Rv(){return Cu("useRouteId")}function Pv(){return bu("useNavigation").navigation}function ag(){let{matches:t,loaderData:a}=bu("useMatches");return b.useMemo(()=>t.map(i=>H3(i,a)),[t,a])}function Iv(){var r;let t=b.useContext(mu),a=bu("useRouteError"),i=Cu("useRouteError");return t!==void 0?t:(r=a.errors)==null?void 0:r[i]}function Mv(){let{router:t}=xv("useNavigate"),a=Cu("useNavigate"),i=b.useRef(!1);return og(()=>{i.current=!0}),b.useCallback(async(c,l={})=>{F0(i.current,tg),i.current&&(typeof c=="number"?t.navigate(c):await t.navigate(c,{fromRouteId:a,...l}))},[t,a])}var bm={};function ng(t,a,i){!a&&!bm[t]&&(bm[t]=!0,F0(!1,i))}var Cm={};function ym(t,a){!t&&!Cm[a]&&(Cm[a]=!0,console.warn(a))}function Lv(t){let a={hasErrorBoundary:t.hasErrorBoundary||t.ErrorBoundary!=null||t.errorElement!=null};return t.Component&&(t.element&&F0(!1,"You should not include both `Component` and `element` on your route - `Component` will be used."),Object.assign(a,{element:b.createElement(t.Component),Component:void 0})),t.HydrateFallback&&(t.hydrateFallbackElement&&F0(!1,"You should not include both `HydrateFallback` and `hydrateFallbackElement` on your route - `HydrateFallback` will be used."),Object.assign(a,{hydrateFallbackElement:b.createElement(t.HydrateFallback),HydrateFallback:void 0})),t.ErrorBoundary&&(t.errorElement&&F0(!1,"You should not include both `ErrorBoundary` and `errorElement` on your route - `ErrorBoundary` will be used."),Object.assign(a,{errorElement:b.createElement(t.ErrorBoundary),ErrorBoundary:void 0})),a}var Ov=["HydrateFallback","hydrateFallbackElement"],Nv=class{constructor(){this.status="pending",this.promise=new Promise((t,a)=>{this.resolve=i=>{this.status==="pending"&&(this.status="resolved",t(i))},this.reject=i=>{this.status==="pending"&&(this.status="rejected",a(i))}})}};function Hv({router:t,flushSync:a}){let[i,r]=b.useState(t.state),[c,l]=b.useState(),[u,d]=b.useState({isTransitioning:!1}),[F,p]=b.useState(),[f,m]=b.useState(),[C,y]=b.useState(),w=b.useRef(new Map),v=b.useCallback((E,{deletedFetchers:T,flushSync:P,viewTransitionOpts:x})=>{E.fetchers.forEach((z,U)=>{z.data!==void 0&&w.current.set(U,z.data)}),T.forEach(z=>w.current.delete(z)),ym(P===!1||a!=null,'You provided the `flushSync` option to a router update, but you are not using the `<RouterProvider>` from `react-router/dom` so `ReactDOM.flushSync()` is unavailable.  Please update your app to `import { RouterProvider } from "react-router/dom"` and ensure you have `react-dom` installed as a dependency to use the `flushSync` option.');let L=t.window!=null&&t.window.document!=null&&typeof t.window.document.startViewTransition=="function";if(ym(x==null||L,"You provided the `viewTransition` option to a router update, but you do not appear to be running in a DOM environment as `window.startViewTransition` is not available."),!x||!L){a&&P?a(()=>r(E)):b.startTransition(()=>r(E));return}if(a&&P){a(()=>{f&&(F&&F.resolve(),f.skipTransition()),d({isTransitioning:!0,flushSync:!0,currentLocation:x.currentLocation,nextLocation:x.nextLocation})});let z=t.window.document.startViewTransition(()=>{a(()=>r(E))});z.finished.finally(()=>{a(()=>{p(void 0),m(void 0),l(void 0),d({isTransitioning:!1})})}),a(()=>m(z));return}f?(F&&F.resolve(),f.skipTransition(),y({state:E,currentLocation:x.currentLocation,nextLocation:x.nextLocation})):(l(E),d({isTransitioning:!0,flushSync:!1,currentLocation:x.currentLocation,nextLocation:x.nextLocation}))},[t.window,a,f,F]);b.useLayoutEffect(()=>t.subscribe(v),[t,v]),b.useEffect(()=>{u.isTransitioning&&!u.flushSync&&p(new Nv)},[u]),b.useEffect(()=>{if(F&&c&&t.window){let E=c,T=F.promise,P=t.window.document.startViewTransition(async()=>{b.startTransition(()=>r(E)),await T});P.finished.finally(()=>{p(void 0),m(void 0),l(void 0),d({isTransitioning:!1})}),m(P)}},[c,F,t.window]),b.useEffect(()=>{F&&c&&i.location.key===c.location.key&&F.resolve()},[F,f,i.location,c]),b.useEffect(()=>{!u.isTransitioning&&C&&(l(C.state),d({isTransitioning:!0,flushSync:!1,currentLocation:C.currentLocation,nextLocation:C.nextLocation}),y(void 0))},[u.isTransitioning,C]);let D=b.useMemo(()=>({createHref:t.createHref,encodeLocation:t.encodeLocation,go:E=>t.navigate(E),push:(E,T,P)=>t.navigate(E,{state:T,preventScrollReset:P==null?void 0:P.preventScrollReset}),replace:(E,T,P)=>t.navigate(E,{replace:!0,state:T,preventScrollReset:P==null?void 0:P.preventScrollReset})}),[t]),B=t.basename||"/",S=b.useMemo(()=>({router:t,navigator:D,static:!1,basename:B}),[t,D,B]);return b.createElement(b.Fragment,null,b.createElement(Mo.Provider,{value:S},b.createElement(Oa.Provider,{value:i},b.createElement(eg.Provider,{value:w.current},b.createElement(Fu.Provider,{value:u},b.createElement(Vv,{basename:B,location:i.location,navigationType:i.historyAction,navigator:D},b.createElement(zv,{routes:t.routes,future:t.future,state:i})))))),null)}var zv=b.memo(jv);function jv({routes:t,future:a,state:i}){return kv(t,void 0,i,a)}function Vv({basename:t="/",children:a=null,location:i,navigationType:r="POP",navigator:c,static:l=!1}){O2(!Na(),"You cannot render a <Router> inside another <Router>. You should never have more than one in your app.");let u=t.replace(/^\/*/,"/"),d=b.useMemo(()=>({basename:u,navigator:c,static:l,future:{}}),[u,c,l]);typeof i=="string"&&(i=eo(i));let{pathname:F="/",search:p="",hash:f="",state:m=null,key:C="default"}=i,y=b.useMemo(()=>{let w=le(F,u);return w==null?null:{location:{pathname:w,search:p,hash:f,state:m,key:C},navigationType:r}},[u,F,p,f,m,C,r]);return F0(y!=null,`<Router basename="${u}"> is not able to match the URL "${F}${p}${f}" because it does not start with the basename, so the <Router> won't render anything.`),y==null?null:b.createElement(Ee.Provider,{value:d},b.createElement(Cs.Provider,{children:a,value:y}))}var Jr="get",Qr="application/x-www-form-urlencoded";function ys(t){return t!=null&&typeof t.tagName=="string"}function Uv(t){return ys(t)&&t.tagName.toLowerCase()==="button"}function qv(t){return ys(t)&&t.tagName.toLowerCase()==="form"}function Wv(t){return ys(t)&&t.tagName.toLowerCase()==="input"}function Gv(t){return!!(t.metaKey||t.altKey||t.ctrlKey||t.shiftKey)}function Kv(t,a){return t.button===0&&(!a||a==="_self")&&!Gv(t)}var Ir=null;function Zv(){if(Ir===null)try{new FormData(document.createElement("form"),0),Ir=!1}catch{Ir=!0}return Ir}var Xv=new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);function ah(t){return t!=null&&!Xv.has(t)?(F0(!1,`"${t}" is not a valid \`encType\` for \`<Form>\`/\`<fetcher.Form>\` and will default to "${Qr}"`),null):t}function Yv(t,a){let i,r,c,l,u;if(qv(t)){let d=t.getAttribute("action");r=d?le(d,a):null,i=t.getAttribute("method")||Jr,c=ah(t.getAttribute("enctype"))||Qr,l=new FormData(t)}else if(Uv(t)||Wv(t)&&(t.type==="submit"||t.type==="image")){let d=t.form;if(d==null)throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');let F=t.getAttribute("formaction")||d.getAttribute("action");if(r=F?le(F,a):null,i=t.getAttribute("formmethod")||d.getAttribute("method")||Jr,c=ah(t.getAttribute("formenctype"))||ah(d.getAttribute("enctype"))||Qr,l=new FormData(d,t),!Zv()){let{name:p,type:f,value:m}=t;if(f==="image"){let C=p?`${p}.`:"";l.append(`${C}x`,"0"),l.append(`${C}y`,"0")}else p&&l.append(p,m)}}else{if(ys(t))throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');i=Jr,r=null,c=Qr,u=t}return l&&c==="text/plain"&&(u=l,l=void 0),{action:r,method:i.toLowerCase(),encType:c,formData:l,body:u}}Object.getOwnPropertyNames(Object.prototype).sort().join("\0");function yu(t,a){if(t===!1||t===null||typeof t>"u")throw new Error(a)}function Jv(t,a,i){let r=typeof t=="string"?new URL(t,typeof window>"u"?"server://singlefetch/":window.location.origin):t;return r.pathname==="/"?r.pathname=`_root.${i}`:a&&le(r.pathname,a)==="/"?r.pathname=`${a.replace(/\/$/,"")}/_root.${i}`:r.pathname=`${r.pathname.replace(/\/$/,"")}.${i}`,r}async function Qv(t,a){if(t.id in a)return a[t.id];try{let i=await import(t.module);return a[t.id]=i,i}catch(i){return console.error(`Error loading route module \`${t.module}\`, reloading page...`),console.error(i),window.__reactRouterContext&&window.__reactRouterContext.isSpaMode,window.location.reload(),new Promise(()=>{})}}function $v(t){return t==null?!1:t.href==null?t.rel==="preload"&&typeof t.imageSrcSet=="string"&&typeof t.imageSizes=="string":typeof t.rel=="string"&&typeof t.href=="string"}async function ew(t,a,i){let r=await Promise.all(t.map(async c=>{let l=a.routes[c.route.id];if(l){let u=await Qv(l,i);return u.links?u.links():[]}return[]}));return nw(r.flat(1).filter($v).filter(c=>c.rel==="stylesheet"||c.rel==="preload").map(c=>c.rel==="stylesheet"?{...c,rel:"prefetch",as:"style"}:{...c,rel:"prefetch"}))}function vm(t,a,i,r,c,l){let u=(F,p)=>i[p]?F.route.id!==i[p].route.id:!0,d=(F,p)=>{var f;return i[p].pathname!==F.pathname||((f=i[p].route.path)==null?void 0:f.endsWith("*"))&&i[p].params["*"]!==F.params["*"]};return l==="assets"?a.filter((F,p)=>u(F,p)||d(F,p)):l==="data"?a.filter((F,p)=>{var m;let f=r.routes[F.route.id];if(!f||!f.hasLoader)return!1;if(u(F,p)||d(F,p))return!0;if(F.route.shouldRevalidate){let C=F.route.shouldRevalidate({currentUrl:new URL(c.pathname+c.search+c.hash,window.origin),currentParams:((m=i[0])==null?void 0:m.params)||{},nextUrl:new URL(t,window.origin),nextParams:F.params,defaultShouldRevalidate:!0});if(typeof C=="boolean")return C}return!0}):[]}function tw(t,a,{includeHydrateFallback:i}={}){return ow(t.map(r=>{let c=a.routes[r.route.id];if(!c)return[];let l=[c.module];return c.clientActionModule&&(l=l.concat(c.clientActionModule)),c.clientLoaderModule&&(l=l.concat(c.clientLoaderModule)),i&&c.hydrateFallbackModule&&(l=l.concat(c.hydrateFallbackModule)),c.imports&&(l=l.concat(c.imports)),l}).flat(1))}function ow(t){return[...new Set(t)]}function aw(t){let a={},i=Object.keys(t).sort();for(let r of i)a[r]=t[r];return a}function nw(t,a){let i=new Set;return new Set(a),t.reduce((r,c)=>{let l=JSON.stringify(aw(c));return i.has(l)||(i.add(l),r.push({key:l,link:c})),r},[])}function ig(){let t=b.useContext(Mo);return yu(t,"You must render this element inside a <DataRouterContext.Provider> element"),t}function iw(){let t=b.useContext(Oa);return yu(t,"You must render this element inside a <DataRouterStateContext.Provider> element"),t}var vs=b.createContext(void 0);vs.displayName="FrameworkContext";function rg(){let t=b.useContext(vs);return yu(t,"You must render this element inside a <HydratedRouter> element"),t}function rw(t,a){let i=b.useContext(vs),[r,c]=b.useState(!1),[l,u]=b.useState(!1),{onFocus:d,onBlur:F,onMouseEnter:p,onMouseLeave:f,onTouchStart:m}=a,C=b.useRef(null);b.useEffect(()=>{if(t==="render"&&u(!0),t==="viewport"){let v=B=>{B.forEach(S=>{u(S.isIntersecting)})},D=new IntersectionObserver(v,{threshold:.5});return C.current&&D.observe(C.current),()=>{D.disconnect()}}},[t]),b.useEffect(()=>{if(r){let v=setTimeout(()=>{u(!0)},100);return()=>{clearTimeout(v)}}},[r]);let y=()=>{c(!0)},w=()=>{c(!1),u(!1)};return i?t!=="intent"?[l,C,{}]:[l,C,{onFocus:Gn(d,y),onBlur:Gn(F,w),onMouseEnter:Gn(p,y),onMouseLeave:Gn(f,w),onTouchStart:Gn(m,y)}]:[!1,C,{}]}function Gn(t,a){return i=>{t&&t(i),i.defaultPrevented||a(i)}}function sw({page:t,...a}){let{router:i}=ig(),r=b.useMemo(()=>Ct(i.routes,t,i.basename),[i.routes,t,i.basename]);return r?b.createElement(lw,{page:t,matches:r,...a}):null}function cw(t){let{manifest:a,routeModules:i}=rg(),[r,c]=b.useState([]);return b.useEffect(()=>{let l=!1;return ew(t,a,i).then(u=>{l||c(u)}),()=>{l=!0}},[t,a,i]),r}function lw({page:t,matches:a,...i}){let r=i0(),{manifest:c,routeModules:l}=rg(),{basename:u}=ig(),{loaderData:d,matches:F}=iw(),p=b.useMemo(()=>vm(t,a,F,c,r,"data"),[t,a,F,c,r]),f=b.useMemo(()=>vm(t,a,F,c,r,"assets"),[t,a,F,c,r]),m=b.useMemo(()=>{if(t===r.pathname+r.search+r.hash)return[];let w=new Set,v=!1;if(a.forEach(B=>{var E;let S=c.routes[B.route.id];!S||!S.hasLoader||(!p.some(T=>T.route.id===B.route.id)&&B.route.id in d&&((E=l[B.route.id])!=null&&E.shouldRevalidate)||S.hasClientLoader?v=!0:w.add(B.route.id))}),w.size===0)return[];let D=Jv(t,u,"data");return v&&w.size>0&&D.searchParams.set("_routes",a.filter(B=>w.has(B.route.id)).map(B=>B.route.id).join(",")),[D.pathname+D.search]},[u,d,r,c,p,a,t,l]),C=b.useMemo(()=>tw(f,c),[f,c]),y=cw(f);return b.createElement(b.Fragment,null,m.map(w=>b.createElement("link",{key:w,rel:"prefetch",as:"fetch",href:w,...i})),C.map(w=>b.createElement("link",{key:w,rel:"modulepreload",href:w,...i})),y.map(({key:w,link:v})=>b.createElement("link",{key:w,...v})))}function hw(...t){return a=>{t.forEach(i=>{typeof i=="function"?i(a):i!=null&&(i.current=a)})}}var sg=typeof window<"u"&&typeof window.document<"u"&&typeof window.document.createElement<"u";try{sg&&(window.__reactRouterVersion="7.7.0")}catch{}function uw(t,a){return tv({basename:a==null?void 0:a.basename,unstable_getContext:a==null?void 0:a.unstable_getContext,future:a==null?void 0:a.future,history:vy({window:a==null?void 0:a.window}),hydrationData:(a==null?void 0:a.hydrationData)||dw(),routes:t,mapRouteProperties:Lv,hydrationRouteProperties:Ov,dataStrategy:a==null?void 0:a.dataStrategy,patchRoutesOnNavigation:a==null?void 0:a.patchRoutesOnNavigation,window:a==null?void 0:a.window}).initialize()}function dw(){let t=window==null?void 0:window.__staticRouterHydrationData;return t&&t.errors&&(t={...t,errors:Aw(t.errors)}),t}function Aw(t){if(!t)return null;let a=Object.entries(t),i={};for(let[r,c]of a)if(c&&c.__type==="RouteErrorResponse")i[r]=new ns(c.status,c.statusText,c.data,c.internal===!0);else if(c&&c.__type==="Error"){if(c.__subType){let l=window[c.__subType];if(typeof l=="function")try{let u=new l(c.message);u.stack="",i[r]=u}catch{}}if(i[r]==null){let l=new Error(c.message);l.stack="",i[r]=l}}else i[r]=c;return i}var cg=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,Ha=b.forwardRef(function({onClick:a,discover:i="render",prefetch:r="none",relative:c,reloadDocument:l,replace:u,state:d,target:F,to:p,preventScrollReset:f,viewTransition:m,...C},y){let{basename:w}=b.useContext(Ee),v=typeof p=="string"&&cg.test(p),D,B=!1;if(typeof p=="string"&&v&&(D=p,sg))try{let U=new URL(window.location.href),n2=p.startsWith("//")?new URL(U.protocol+p):new URL(p),u2=le(n2.pathname,w);n2.origin===U.origin&&u2!=null?p=u2+n2.search+n2.hash:B=!0}catch{F0(!1,`<Link to="${p}"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.`)}let S=yv(p,{relative:c}),[E,T,P]=rw(r,C),x=gw(p,{replace:u,state:d,target:F,preventScrollReset:f,relative:c,viewTransition:m});function L(U){a&&a(U),U.defaultPrevented||x(U)}let z=b.createElement("a",{...C,...P,href:D||S,onClick:B||l?a:L,ref:hw(y,T),target:F,"data-discover":!v&&i==="render"?"true":void 0});return E&&!v?b.createElement(b.Fragment,null,z,b.createElement(sw,{page:S})):z});Ha.displayName="Link";var pw=b.forwardRef(function({"aria-current":a="page",caseSensitive:i=!1,className:r="",end:c=!1,style:l,to:u,viewTransition:d,children:F,...p},f){let m=ri(u,{relative:p.relative}),C=i0(),y=b.useContext(Oa),{navigator:w,basename:v}=b.useContext(Ee),D=y!=null&&kw(m)&&d===!0,B=w.encodeLocation?w.encodeLocation(m).pathname:m.pathname,S=C.pathname,E=y&&y.navigation&&y.navigation.location?y.navigation.location.pathname:null;i||(S=S.toLowerCase(),E=E?E.toLowerCase():null,B=B.toLowerCase()),E&&v&&(E=le(E,v)||E);const T=B!=="/"&&B.endsWith("/")?B.length-1:B.length;let P=S===B||!c&&S.startsWith(B)&&S.charAt(T)==="/",x=E!=null&&(E===B||!c&&E.startsWith(B)&&E.charAt(B.length)==="/"),L={isActive:P,isPending:x,isTransitioning:D},z=P?a:void 0,U;typeof r=="function"?U=r(L):U=[r,P?"active":null,x?"pending":null,D?"transitioning":null].filter(Boolean).join(" ");let n2=typeof l=="function"?l(L):l;return b.createElement(Ha,{...p,"aria-current":z,className:U,ref:f,style:n2,to:u,viewTransition:d},typeof F=="function"?F(L):F)});pw.displayName="NavLink";var Fw=b.forwardRef(({discover:t="render",fetcherKey:a,navigate:i,reloadDocument:r,replace:c,state:l,method:u=Jr,action:d,onSubmit:F,relative:p,preventScrollReset:f,viewTransition:m,...C},y)=>{let w=Cw(),v=yw(d,{relative:p}),D=u.toLowerCase()==="get"?"get":"post",B=typeof d=="string"&&cg.test(d),S=E=>{if(F&&F(E),E.defaultPrevented)return;E.preventDefault();let T=E.nativeEvent.submitter,P=(T==null?void 0:T.getAttribute("formmethod"))||u;w(T||E.currentTarget,{fetcherKey:a,method:P,navigate:i,replace:c,state:l,relative:p,preventScrollReset:f,viewTransition:m})};return b.createElement("form",{ref:y,method:D,action:v,onSubmit:r?F:S,...C,"data-discover":!B&&t==="render"?"true":void 0})});Fw.displayName="Form";function lg({getKey:t,storageKey:a,...i}){let r=b.useContext(vs),{basename:c}=b.useContext(Ee),l=i0(),u=ag();vw({getKey:t,storageKey:a});let d=b.useMemo(()=>{if(!r||!t)return null;let p=Oh(l,u,c,t);return p!==l.key?p:null},[]);if(!r||r.isSpaMode)return null;let F=((p,f)=>{if(!window.history.state||!window.history.state.key){let m=Math.random().toString(32).slice(2);window.history.replaceState({key:m},"")}try{let C=JSON.parse(sessionStorage.getItem(p)||"{}")[f||window.history.state.key];typeof C=="number"&&window.scrollTo(0,C)}catch(m){console.error(m),sessionStorage.removeItem(p)}}).toString();return b.createElement("script",{...i,suppressHydrationWarning:!0,dangerouslySetInnerHTML:{__html:`(${F})(${JSON.stringify(a||Lh)}, ${JSON.stringify(d)})`}})}lg.displayName="ScrollRestoration";function hg(t){return`${t} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`}function vu(t){let a=b.useContext(Mo);return O2(a,hg(t)),a}function mw(t){let a=b.useContext(Oa);return O2(a,hg(t)),a}function gw(t,{target:a,replace:i,state:r,preventScrollReset:c,relative:l,viewTransition:u}={}){let d=gu(),F=i0(),p=ri(t,{relative:l});return b.useCallback(f=>{if(Kv(f,a)){f.preventDefault();let m=i!==void 0?i:Jt(F)===Jt(p);d(t,{replace:m,state:r,preventScrollReset:c,relative:l,viewTransition:u})}},[F,d,p,i,r,a,t,c,l,u])}var fw=0,bw=()=>`__${String(++fw)}__`;function Cw(){let{router:t}=vu("useSubmit"),{basename:a}=b.useContext(Ee),i=Rv();return b.useCallback(async(r,c={})=>{let{action:l,method:u,encType:d,formData:F,body:p}=Yv(r,a);if(c.navigate===!1){let f=c.fetcherKey||bw();await t.fetch(f,i,c.action||l,{preventScrollReset:c.preventScrollReset,formData:F,body:p,formMethod:c.method||u,formEncType:c.encType||d,flushSync:c.flushSync})}else await t.navigate(c.action||l,{preventScrollReset:c.preventScrollReset,formData:F,body:p,formMethod:c.method||u,formEncType:c.encType||d,replace:c.replace,state:c.state,fromRouteId:i,flushSync:c.flushSync,viewTransition:c.viewTransition})},[t,a,i])}function yw(t,{relative:a}={}){let{basename:i}=b.useContext(Ee),r=b.useContext(wt);O2(r,"useFormAction must be used inside a RouteContext");let[c]=r.matches.slice(-1),l={...ri(t||".",{relative:a})},u=i0();if(t==null){l.search=u.search;let d=new URLSearchParams(l.search),F=d.getAll("index");if(F.some(f=>f==="")){d.delete("index"),F.filter(m=>m).forEach(m=>d.append("index",m));let f=d.toString();l.search=f?`?${f}`:""}}return(!t||t===".")&&c.route.index&&(l.search=l.search?l.search.replace(/^\?/,"?index&"):"?index"),i!=="/"&&(l.pathname=l.pathname==="/"?i:Xe([i,l.pathname])),Jt(l)}var Lh="react-router-scroll-positions",Mr={};function Oh(t,a,i,r){let c=null;return r&&(i!=="/"?c=r({...t,pathname:le(t.pathname,i)||t.pathname},a):c=r(t,a)),c==null&&(c=t.key),c}function vw({getKey:t,storageKey:a}={}){let{router:i}=vu("useScrollRestoration"),{restoreScrollPosition:r,preventScrollReset:c}=mw("useScrollRestoration"),{basename:l}=b.useContext(Ee),u=i0(),d=ag(),F=Pv();b.useEffect(()=>(window.history.scrollRestoration="manual",()=>{window.history.scrollRestoration="auto"}),[]),ww(b.useCallback(()=>{if(F.state==="idle"){let p=Oh(u,d,l,t);Mr[p]=window.scrollY}try{sessionStorage.setItem(a||Lh,JSON.stringify(Mr))}catch(p){F0(!1,`Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (${p}).`)}window.history.scrollRestoration="auto"},[F.state,t,l,u,d,a])),typeof document<"u"&&(b.useLayoutEffect(()=>{try{let p=sessionStorage.getItem(a||Lh);p&&(Mr=JSON.parse(p))}catch{}},[a]),b.useLayoutEffect(()=>{let p=i==null?void 0:i.enableScrollRestoration(Mr,()=>window.scrollY,t?(f,m)=>Oh(f,m,l,t):void 0);return()=>p&&p()},[i,l,t]),b.useLayoutEffect(()=>{if(r!==!1){if(typeof r=="number"){window.scrollTo(0,r);return}try{if(u.hash){let p=document.getElementById(decodeURIComponent(u.hash.slice(1)));if(p){p.scrollIntoView();return}}}catch{F0(!1,`"${u.hash.slice(1)}" is not a decodable element ID. The view will not scroll to it.`)}c!==!0&&window.scrollTo(0,0)}},[u,r,c]))}function ww(t,a){let{capture:i}={};b.useEffect(()=>{let r=i!=null?{capture:i}:void 0;return window.addEventListener("pagehide",t,r),()=>{window.removeEventListener("pagehide",t,r)}},[t,i])}function kw(t,a={}){let i=b.useContext(Fu);O2(i!=null,"`useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  Did you accidentally import `RouterProvider` from `react-router`?");let{basename:r}=vu("useViewTransitionState"),c=ri(t,{relative:a.relative});if(!i.isTransitioning)return!1;let l=le(i.currentLocation.pathname,r)||i.currentLocation.pathname,u=le(i.nextLocation.pathname,r)||i.nextLocation.pathname;return xo(c.pathname,u)!=null||xo(c.pathname,l)!=null}var wu=L3();const ug=fs(wu);function Nh(t){return Array.isArray(t)?t.map(Nh):typeof t=="object"&&t!==null?Object.keys(t).reduce((a,i)=>(a[i]=Nh(t[i]),a),{}):typeof t=="string"&&t.includes("_vocs-fn_")?new Function(`return ${t.slice(9)}`)():t}const dg=Nh({aiCta:!0,blogDir:"./pages/blog",ogImageUrl:"https://vocs.dev/api/og?logo=%logo&title=%title&description=%description",rootDir:"docs",title:"Jincubator",titleTemplate:"%s – Jincubator",description:"Research focused on Intent BasedSolving, Arbitrage and Market Making",iconUrl:"/images/jincubator.png",logoUrl:"/images/jincubator.png",baseUrl:"/",markdown:{remarkPlugins:[`_vocs-fn_function remarkMath(options) {
  // @ts-expect-error: TS is wrong about \`this\`.
  // eslint-disable-next-line unicorn/no-this-assignment
  const self = /** @type {Processor} */ (this)
  const settings = options || emptyOptions
  const data = self.data()

  const micromarkExtensions =
    data.micromarkExtensions || (data.micromarkExtensions = [])
  const fromMarkdownExtensions =
    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])
  const toMarkdownExtensions =
    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])

  micromarkExtensions.push(math(settings))
  fromMarkdownExtensions.push(mathFromMarkdown())
  toMarkdownExtensions.push(mathToMarkdown(settings))
}`,`_vocs-fn_(options) => {
    const render = createMermaidRenderer(options);
    return function transformer(ast, file) {
        const instances = [];
        visitParents(ast, { type: 'code', lang: 'mermaid' }, (node, ancestors) => {
            instances.push([...ancestors, node]);
        });
        // Nothing to do. No need to start a browser in this case.
        if (!instances.length) {
            return;
        }
        return render(instances.map((ancestors) => ancestors.at(-1).value), options).then((results) => {
            for (const [i, ancestors] of instances.entries()) {
                const result = results[i];
                const node = ancestors.at(-1);
                const parent = ancestors.at(-2);
                const nodeIndex = parent.children.indexOf(node);
                if (result.status === 'fulfilled') {
                    const { svg } = result.value;
                    const hChildren = fromHtmlIsomorphic(svg, { fragment: true }).children;
                    parent.children[nodeIndex] = {
                        type: 'paragraph',
                        children: [{ type: 'html', value: svg }],
                        data: { hChildren }
                    };
                }
                else if (options?.errorFallback) {
                    const fallback = options.errorFallback(node, result.reason, file);
                    if (fallback) {
                        parent.children[nodeIndex] = fallback;
                    }
                    else {
                        parent.children.splice(nodeIndex, 1);
                    }
                }
                else {
                    const message = file.message(result.reason, {
                        ruleId: 'remark-mermaidjs',
                        source: 'remark-mermaidjs',
                        ancestors
                    });
                    message.fatal = true;
                    message.url = 'https://github.com/remcohaszing/remark-mermaidjs';
                    throw message;
                }
            }
        });
    };
}`],rehypePlugins:[`_vocs-fn_function (options) {
    /**
     * Transform.
     *
     * @param {Root} tree
     *   Tree.
     * @param {VFile} file
     *   File.
     * @returns {undefined}
     *   Nothing.
     */
    return function (tree, file) {
      const renderer = createRenderer(options || emptyOptions)
      let found = false
      /** @type {Element | Root} */
      let context = tree

      visitParents(tree, 'element', function (element, parents) {
        const classes = Array.isArray(element.properties.className)
          ? element.properties.className
          : emptyClasses
        // This class can be generated from markdown with \` \`\`\`math \`.
        const languageMath = classes.includes('language-math')
        // This class is used by \`remark-math\` for flow math (block, \`$$\\nmath\\n$$\`).
        const mathDisplay = classes.includes('math-display')
        // This class is used by \`remark-math\` for text math (inline, \`$math$\`).
        const mathInline = classes.includes('math-inline')
        let display = mathDisplay

        // Find \`<head>\`.
        if (element.tagName === 'head') {
          context = element
        }

        // Any class is fine.
        if (!languageMath && !mathDisplay && !mathInline) {
          return
        }

        let parent = parents[parents.length - 1]
        let scope = element

        // If this was generated with \` \`\`\`math \`, replace the \`<pre>\` and use
        // display.
        if (
          element.tagName === 'code' &&
          languageMath &&
          parent &&
          parent.type === 'element' &&
          parent.tagName === 'pre'
        ) {
          scope = parent
          parent = parents[parents.length - 2]
          display = true
        }

        /* c8 ignore next -- verbose to test. */
        if (!parent) return

        if (!found && renderer.register) renderer.register()
        found = true

        const text = toText(scope, {whitespace: 'pre'})
        /** @type {Array<ElementContent> | undefined} */
        let result

        try {
          result = renderer.render(text, {display})
        } catch (error) {
          const cause = /** @type {Error} */ (error)

          file.message('Could not render math with mathjax', {
            ancestors: [...parents, element],
            cause,
            place: element.position,
            ruleId: 'mathjax-error',
            source: 'rehype-mathjax'
          })

          result = [
            {
              type: 'element',
              tagName: 'span',
              properties: {
                className: ['mathjax-error'],
                style: 'color:#cc0000',
                title: String(cause)
              },
              children: [{type: 'text', value: text}]
            }
          ]
        }

        const index = parent.children.indexOf(scope)
        parent.children.splice(index, 1, ...result)
        return SKIP
      })

      if (found) {
        if (renderer.styleSheet) context.children.push(renderer.styleSheet())
        if (renderer.unregister) renderer.unregister()
      }
    }
  }`],code:{themes:{dark:"github-dark-dimmed",light:"github-light"}}},topNav:[{text:"Research",link:"/research/intro",id:64,items:[]},{text:"Proposals",link:"/proposals/intro",id:65,items:[]},{text:"Product",link:"/product/intro",id:66,items:[]},{text:"Partnerships",link:"/partnerships/intro",id:67,items:[]}],sidebar:{"/research":[{text:"Research",link:"/research/intro"},{text:"Solving and Arbitrage (2025)",items:[{text:"High Performance Route Evaluation",link:"/research/solving/solving"},{text:"No Liquidity Solving (Tycho 1inch)",link:"/research/solving/tycho1inchNOL"},{text:"Near Contract Development (1inch Contracts)",link:"/research/solving/near"},{text:"Liquidity Management with ERC-6909 Vault",link:"/research/Intents/protocol"},{text:"Uniswap V4 - Intent Management Hook",link:"/research/solving/intent-management-hook"}]},{text:"Layer 1 Platforms (2022/2023)",collapsed:!1,items:[{text:"Layer 1 Intro",link:"/research/chains/intro"},{text:"Avalanche",link:"/research/chains/avalanche"},{text:"Binance Smart Chain",link:"/research/chains/binance"},{text:"Cosmos",link:"/research/chains/cosmos"},{text:"Ethereum 1.0",link:"/research/chains/ethereum-1-0"},{text:"Ethereum",link:"/research/chains/ethereum"},{text:"NEAR",link:"/research/chains/NEAR"},{text:"Harmony",link:"/research/chains/harmony"},{text:"Polkadot",link:"/research/chains/polkadot"},{text:"Polygon",link:"/research/chains/polygon"}]},{text:"Code Reviews (2022/2023)",items:[{text:"Code Review Intro",link:"/research/code/intro"},{text:"Horizon Bridge",link:"/research/code/horizon"},{text:"Ethereum Near Bridge",link:"/research/code/ethereum-near"},{text:"Ethereum",link:"/research/code/ethereum"}]},{text:"Cross Chain Bridges (2022/2023)",items:[{text:"Bridging Intro",link:"/research/bridge/intro"},{text:"Cosmos IBC",link:"/research/bridge/cosmos-ibc"},{text:"Harmony Horizon",link:"/research/bridge/harmony-horizon"},{text:"Isomorph",link:"/research/bridge/isomorph"},{text:"Near Rainbow Bridge",link:"/research/bridge/near-rainbow"},{text:"Polymer Labs",link:"/research/bridge/polymerlabs"},{text:"Snowbridge",link:"/research/bridge/snowbridge"},{text:"Succint",link:"/research/bridge/succinct"}]},{text:"Zero Knowledge (2022/2023)",items:[{text:"Zero Knowledge Intro",link:"/research/zk/intro"},{text:"ZK Proof of Stake",link:"/research/zk/zkpos"},{text:"zk-Snarks",link:"/research/zk/zksnarks"},{text:"Axiom",link:"/research/zk/axiom"}]},{text:"Primitives (2022/2023)",items:[{text:"Primitives Intro",link:"/research/primitives/intro"},{text:"Fraud Proofs",link:"/research/primitives/fraud-proofs"},{text:"Light Clients",link:"/research/primitives/light-clients"},{text:"Cryptogaphic Primitives",link:"/research/primitives/primitives"},{text:"Weak Subjectivity",link:"/research/primitives/weak-subjectivity"},{text:"Signature Schemes",link:"/research/primitives/signatures"}]}],"/proposals":[{text:"Grant Proposals",items:[{text:"Tycho Atomic Arbitrage (2025)",link:"/proposals/atomic-arbitrage"},{text:"Sunrise Protocol (2020)",link:"/proposals/sunrise"}]},{text:"Coding Events",items:[{text:"Unite Defi (2025)",link:"/proposals/Unite"},{text:"Uniswap Hook Incubator 5 (2025)",link:"/proposals/UHI5"},{text:"Harmony Hackathon 2021",link:"/proposals/Harmony"}]}],"/product":[{text:"Product",link:"/product/intro"},{text:"High Performance Solving",items:[{text:"Overview",link:"/product/solving/overview"},{text:"FlashHook - Uniswap v4 Design",link:"/product/solving/flash-hook"},{text:"Resource Management - Compact Design",link:"/product/solving/liquidity-management"}]},{text:"Previous Work",items:[{text:"Rainbow Bridge Research (Harmony 2022)",link:"/product/previous/2023-02-23-rainbow-costs"},{text:"Draft EAVE Whitepaper",link:"/product/previous/2021-12-01-eave-defi"},{text:"Kanga Protocol Whitepaper",link:"/product/previous/2021-05-01-kanga"},{text:"EAVE Parachain Design",link:"/product/previous/2021-04-01-eave-parachain"},{text:"Lessons Learned from Devcon5",link:"/product/previous/2019-10-16-devcon5"},{text:"Project-X Technical White Paper",link:"/product/previous/2018-07-17-projectx"}]}],"/partnerships":[{text:"Partnerships",link:"/partnerships/intro"}]},socials:[{icon:"github",link:"https://github.com/jincubator",label:"GitHub",type:"github"},{icon:"x",link:"https://twitter.com/jincubatorX",label:"X (Twitter)",type:"x"},{icon:"telegram",link:"https://t.me/jincubator",label:"Telegram",type:"telegram"}],basePath:"",font:{},theme:{},vite:{}}),Dw="modulepreload",Bw=function(t){return"/"+t},wm={},J=function(a,i,r){let c=Promise.resolve();if(i&&i.length>0){let u=function(p){return Promise.all(p.map(f=>Promise.resolve(f).then(m=>({status:"fulfilled",value:m}),m=>({status:"rejected",reason:m}))))};document.getElementsByTagName("link");const d=document.querySelector("meta[property=csp-nonce]"),F=(d==null?void 0:d.nonce)||(d==null?void 0:d.getAttribute("nonce"));c=u(i.map(p=>{if(p=Bw(p),p in wm)return;wm[p]=!0;const f=p.endsWith(".css"),m=f?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${p}"]${m}`))return;const C=document.createElement("link");if(C.rel=f?"stylesheet":Dw,f||(C.as="script"),C.crossOrigin="",C.href=p,F&&C.setAttribute("nonce",F),document.head.appendChild(C),f)return new Promise((y,w)=>{C.addEventListener("load",y),C.addEventListener("error",()=>w(new Error(`Unable to preload CSS for ${p}`)))})}))}function l(u){const d=new Event("vite:preloadError",{cancelable:!0});if(d.payload=u,window.dispatchEvent(d),!d.defaultPrevented)throw u}return c.then(u=>{for(const d of u||[])d.status==="rejected"&&l(d.reason);return a().catch(l)})},Ag=b.createContext(dg);function pg(){return dg}function Ew({children:t,config:a}){const[i,r]=b.useState(()=>a||pg());return b.useEffect(()=>{},[]),b.useEffect(()=>{},[i]),g.jsx(Ag.Provider,{value:i,children:t})}function m0(){return b.useContext(Ag)}const ku=[{lazy:()=>J(()=>import("./index-CBNVtdA3.js"),[]),path:"/",type:"mdx",filePath:"index.mdx",content:"---%0Alayout%3A%20landing%0A---%0A%0Aimport%20%7B%20HomePage%20%7D%20from%20%22vocs%2Fcomponents%22%3B%0A%0A%3CHomePage.Root%3E%0A%20%20%3CHomePage.Logo%3E.%2Fpublic%2Fjincubator.png%20%3C%2FHomePage.Logo%3E%0A%20%20%3CHomePage.Tagline%3EJincubator%3C%2FHomePage.Tagline%3E%0A%20%20%3CHomePage.Description%3E%0A%20%20%20%20Research%20focused%20on%20intent%20based%20solving%2C%20arbitrage%20and%20market%20making%0A%20%20%3C%2FHomePage.Description%3E%0A%20%20%3CHomePage.Buttons%3E%0A%20%20%20%20%3CHomePage.Button%20href%3D%22%2Fresearch%2Fintro%22%20variant%3D%22accent%22%3E%0A%20%20%20%20%20%20Jincubator%20Overview%0A%20%20%20%20%3C%2FHomePage.Button%3E%0A%20%20%20%20%3CHomePage.Button%20href%3D%22https%3A%2F%2Fgithub.com%2Fjincubator%22%3E%0A%20%20%20%20%20%20GitHub%0A%20%20%20%20%3C%2FHomePage.Button%3E%0A%20%20%20%20%3CHomePage.Button%20href%3D%22https%3A%2F%2Fjohnwhitton.com%22%3E%0A%20%20%20%20%20%20John%20Whitton%0A%20%20%20%20%3C%2FHomePage.Button%3E%0A%20%20%3C%2FHomePage.Buttons%3E%0A%3C%2FHomePage.Root%3E%0A",lastUpdatedAt:1753887188e3},{lazy:()=>J(()=>import("./overview-CNXz7HhY.js"),[]),path:"/overview",type:"mdx",filePath:"overview.mdx",content:"",lastUpdatedAt:175385797e4},{lazy:()=>J(()=>import("./overview-CNXz7HhY.js"),[]),path:"/overview.html",type:"mdx",filePath:"overview.mdx",content:"",lastUpdatedAt:175385797e4},{lazy:()=>J(()=>import("./intro-VIkMIAwT.js"),[]),path:"/partnerships/intro",type:"mdx",filePath:"partnerships/intro.mdx",content:"%3Cdiv%20align%3D%22center%22%3E%0A%20%20%3Ch1%20align%3D%22center%22%3EJincubator%20Partnerships%3C%2Fh1%3E%0A%20%20%3Cp%20align%3D%22center%22%3EHow%20to%20Collaborate%20with%20Jincubator%3C%2Fp%3E%0A%3C%2Fdiv%3E%0A%0A%23%23%20Overview%0A%0AJincubator%20is%20a%20research%20incubator.%0A%0AAt%20of%20August%202025%20the%20research%20is%20lead%20by%20%5BJohn%20Whitton%5D(https%3A%2F%2Fjohnwhitton.com)%20with%20collaboration%20from%20organizations%20such%20as%20Uniswap%20and%20Harmony.%20This%20work%20has%20been%20self%20funded%20with%20limited%20funds%20being%20received%20from%20Hackathon%20prizes.%0A%0AIf%20you%20are%20interested%20in%20collaborating%20with%20Jincubator%2C%20please%20reach%20out%20to%20%5Bteam%40jincubator.com%5D(mailto%3Ateam%40jincubator.com)%20or%20directly%20to%20%5Bjohn%40johnwhitton.com%5D(mailto%3Ajohn%40johnwhitton.com)%0A%0A%23%23%20Goals%0A%0AJincubator%20goals%20are%20as%20follows%0A%0A-%20Continue%20to%20develop%20research%20and%20engineering%20skills%20by%20researching%20and%20building%20on%20the%20cutting%20edge%20products%20and%20protocols.%0A-%20Contribute%20research%2C%20design%20and%20technical%20solutions%20to%20the%20Crypto%20industry%0A-%20Productize%20research%20into%20DeFi%20protocols%20or%20infrastructure.%0A%0A%23%23%20Collaborate%0A%0AHere%20are%20some%20ways%20to%20Partner%20with%20Jincubator%0A%0A%23%23%23%20Funding%20through%20Bounties%20or%20Grants%0A%0ARather%20than%20seeking%20angel%20funding%20or%20raising%20through%20a%20Token%20Generation%20Event.%20We%20have%20been%20building%20and%20iterating%20to%20ensure%20product%20fit%20and%20are%20now%20looking%20for%20funding%20via%20grants%20or%20bounties%20to%20continue%20this%20work.%20Preferred%20grants%20would%20come%20from%20technical%20providers%20such%20as%20Tycho%20and%20Uniswap%2C%201inch%20which%20we%20are%20building%20on.%20Solvers%2C%20Blockchains%20and%20Protocols%20looking%20to%20integrate%20with%20Tycho%20would%20be%20ideal%20partners.%0A%0AWe%20are%20currently%20building%20on%20Tycho%20and%20looking%20at%20continuing%20work%20on%20arbitrage%2C%20developing%20Solvers(Fillers)%20for%20CompactX%2C%20UniswapX%2C%20CowSwap%20and%201Inch.%0A%0AThe%20potential%20areas%20which%20we%20are%20looking%20to%20incorporate%20into%20a%20revenue%20positive%20platform%20include%0A%0A%23%23%23%23%20No%20Liquidity%20Solving%0A%0AAn%20opinionated%20architecture%2C%20built%20on%20Tycho%2C%20for%20an%20intent%20based%20solving%20protocol%20which%20facilitates%20single%20and%20multichain%20solving%20of%20intents.%20Intents%20can%20be%20solved%20on%20a%20single%20chain%20without%20provisioning%20up%20front%20capital%20as%20we%20arbiters%20can%20confirm%20mandates%20have%20been%20met%20by%20solvers%20at%20execution%20time%2C%20thus%20solvers%20may%20use%20the%20Swapper's%20locked%20funds%20for%20execution.%20For%20a%20demo%20of%20this%20please%20see%20%5BNo%20Liquidity%20Solving%20(Tycho%201inch)%5D(%2Fresearch%2Fsolving%2Ftycho1inchNOL).%0A%0A%23%23%23%23%20Solver%0A%0ABuilding%20out%20Tycho%20based%20Solvers%20starting%20with%20the%20following%20protocols%0A%0A-%20CompactX%3A%20An%20expansive%20locking%20system%20from%20%5Bthe-compact%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fthe-compact%2F).%20We%20have%20incorporated%20Mandates%20and%20Solver%20Payloads%20to%20allow%20Intents%20to%20be%20solved%20on%20a%20single%20chain%20without%20provisioning%20up%20front%20capital%20as%20arbiters%20can%20confirm%20mandates%20have%20been%20met%20by%20solvers%20at%20execution%20time%2C%20thus%20solvers%20may%20use%20the%20swappers%20locked%20funds%20for%20execution.%20_As%20of%20July%2025th%20the%20%5Bthe-compact%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fthe-compact%2F)%20we%20are%20developing%20on%20has%20been%20forked%20from%20%5BUniswap%20the-compact%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Fthe-compact%2Ftree%2Fv1)%20v1%20branch%20which%20has%20not%20as%20yet%20been%20deployed._%0A-%20UniswapX%3A%20John%20attended%20Uniswap's%20Hook%20Incubator%20course%20and%20has%20been%20in%20touch%20with%20Alumni%20as%20he%20build%20in%20this%20area.%20He%20plans%20to%20start%20work%20on%20a%20UniswapX%20Solver%20in%20August.%0A-%20COWswap%3A%20John%20hasdone%20some%20original%20evaluation%20of%20COWswap%20Solving%2C%20building%20and%20running%20a%20COWSwap%20Solver%20locally%20built%20from%20the%20%5Bservices%5D(https%3A%2F%2Fgithub.com%2Fcowprotocol%2Fservices)%20repository.%0A-%201Inch%3A%20John%20spent%20the%20week%20of%20July%2028th%20working%20on%20the%20%5BExpanding%20Limit%20Order%20track%5D(https%3A%2F%2Fethglobal.com%2Fevents%2Funite%2Fprizes).%20With%20the%20goal%20and%20improving%20knowledge%20of%201inch%20limit%20order%20protocol.%20For%20a%20demo%20of%20this%20please%20see%20%5BNo%20Liquidity%20Solving%20(Tycho%201inch)%5D(%2Fresearch%2Fsolving%2Ftycho1inchNOL).%0A%0A%23%23%23%23%20Arbitrage%0A%0AJohn%20has%20begun%20development%20of%20an%20Arbitrage%20bot.%20It%20uses%20Tycho's%20indexing%20simulation%20and%20execution%20modules.%20It%20uses%20a%20variation%20of%20the%20%5BBellman%20Ford%20Algorithm%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBellman%25E2%2580%2593Ford_algorithm)%20to%20find%20revenue%20positive%20arbitrage%20cycles.%20It%20aligns%20with%20the%20foundational%20requirement%20for%20an%20atomic%20arbitrage%20solver%20as%20specified%20in%20%5BTycho%20Application%20Proposal%204%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-x%2Fblob%2Fmain%2FTAP-4.md)%20once%20this%20foundation%20is%20in%20place%20the%20infrastructure%20can%20be%20expanded%20into%20Cross%20Chain%20Arbitrage%20and%20Market%20Making.%20You%20can%20see%20the%20design%20proposal%20%5Bhere%5D(%23TODO).%0A%0A%23%23%23%23%20Previous%20Grant%20applications%0A%0A-%20%5BTycho%20Atomic%20Arbitrage%5D(https%3A%2F%2Fhackmd.io%2F%40jincubator%2Fatomic-arbitrage)%3A%20An%20arbitrage%20bot%20built%20on%20Tycho's%20indexing%20simulation%20and%20execution%20modules.%20It%20uses%20a%20variation%20of%20the%20%5BBellman%20Ford%20Algorithm%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBellman%25E2%2580%2593Ford_algorithm)%20to%20find%20revenue%20positive%20arbitrage%20cycles.%0A-%20%5BSunrise%20Protocol%20(Polkadot%202020)%5D(https%3A%2F%2Fhackmd.io%2F%40jincubator%2Fsunrise)%3A%20Sunrise%20was%20building%20a%20decentralized%20protocol%20on%20a%20dedicated%20Polkadot%20parachain.%0A%0A%23%23%23%20Consulting%0A%0ACurrently%2C%20%5BJohn%20Whitton%5D(https%3A%2F%2Fjohnwhitton.com)%20is%20interested%20in%20consulting%20in%20the%20following%20areas.%0A%0A%23%23%23%23%20DEX%20Integrations%0A%0AJohn%20is%20familiar%20with%20the%20key%20Tycho%20Repositories%20(Indexing%2C%20Simulation%2C%20Execution%20and%20the%20SDK)%20and%20am%20experienced%20in%20Protocol%20Design%20(Soldity)%20and%20Service%20Development(Rust).%20John%20also%20run%20consulting%20firms%20and%20managed%20teams%20of%20engineers.%20He%20would%20enjoy%20partnering%20with%20Protocols%20and%20Platforms%20which%20want%20to%20integrate%20with%20Tycho.%0A%0A%23%23%23%23%20Chain%20Integrations%20and%20Rollup%20Providers%0A%0ASimilar%20to%20above%20John%20has%20done%20extensive%20research%20on%20%5BChains%2C%20consensus%20designs%20and%20building%20Rollouts%5D(%2Fresearch%2Fchains%2Fintro).%20He%20would%20enjoy%20partnering%20with%20Tycho%20to%20help%20bring%20on%20additional%20chains.%20Also%20building%20out%20Proof%20of%20Concepts%20for%20Protocls%20thinking%20about%20launching%20their%20own%20chain%20with%20RollUp%20providers%20such%20as%20%5BCaldera%5D(https%3A%2F%2Fcaldera.xyz%2F)%0A%0A%23%23%23%23%20Infrastructure%20Partnerships%0A%0AJohn%20has%20lead%20teams%20building%20out%20Layer%201%20platforms%20and%20DeFi%20protocols%20and%20worked%20as%20an%20Ecosystem%20Architect.%20He%20is%20also%20familiar%20with%20researching%20partner%20technologies.%20John%20did%20some%20initial%20work%20with%20EigenLayers%20%5Bdev-kit-cli%5D(https%3A%2F%2Fgithub.com%2FLayr-Labs%2Fdevkit-cli)%20and%20%5Brust%20integration%5D(https%3A%2F%2Fgithub.com%2FLayr-Labs%2Fhello-world-avs%3Ftab%3Dreadme-ov-file%23quick-start-rust).%0A",lastUpdatedAt:175869572e4},{lazy:()=>J(()=>import("./intro-VIkMIAwT.js"),[]),path:"/partnerships/intro.html",type:"mdx",filePath:"partnerships/intro.mdx",content:"%3Cdiv%20align%3D%22center%22%3E%0A%20%20%3Ch1%20align%3D%22center%22%3EJincubator%20Partnerships%3C%2Fh1%3E%0A%20%20%3Cp%20align%3D%22center%22%3EHow%20to%20Collaborate%20with%20Jincubator%3C%2Fp%3E%0A%3C%2Fdiv%3E%0A%0A%23%23%20Overview%0A%0AJincubator%20is%20a%20research%20incubator.%0A%0AAt%20of%20August%202025%20the%20research%20is%20lead%20by%20%5BJohn%20Whitton%5D(https%3A%2F%2Fjohnwhitton.com)%20with%20collaboration%20from%20organizations%20such%20as%20Uniswap%20and%20Harmony.%20This%20work%20has%20been%20self%20funded%20with%20limited%20funds%20being%20received%20from%20Hackathon%20prizes.%0A%0AIf%20you%20are%20interested%20in%20collaborating%20with%20Jincubator%2C%20please%20reach%20out%20to%20%5Bteam%40jincubator.com%5D(mailto%3Ateam%40jincubator.com)%20or%20directly%20to%20%5Bjohn%40johnwhitton.com%5D(mailto%3Ajohn%40johnwhitton.com)%0A%0A%23%23%20Goals%0A%0AJincubator%20goals%20are%20as%20follows%0A%0A-%20Continue%20to%20develop%20research%20and%20engineering%20skills%20by%20researching%20and%20building%20on%20the%20cutting%20edge%20products%20and%20protocols.%0A-%20Contribute%20research%2C%20design%20and%20technical%20solutions%20to%20the%20Crypto%20industry%0A-%20Productize%20research%20into%20DeFi%20protocols%20or%20infrastructure.%0A%0A%23%23%20Collaborate%0A%0AHere%20are%20some%20ways%20to%20Partner%20with%20Jincubator%0A%0A%23%23%23%20Funding%20through%20Bounties%20or%20Grants%0A%0ARather%20than%20seeking%20angel%20funding%20or%20raising%20through%20a%20Token%20Generation%20Event.%20We%20have%20been%20building%20and%20iterating%20to%20ensure%20product%20fit%20and%20are%20now%20looking%20for%20funding%20via%20grants%20or%20bounties%20to%20continue%20this%20work.%20Preferred%20grants%20would%20come%20from%20technical%20providers%20such%20as%20Tycho%20and%20Uniswap%2C%201inch%20which%20we%20are%20building%20on.%20Solvers%2C%20Blockchains%20and%20Protocols%20looking%20to%20integrate%20with%20Tycho%20would%20be%20ideal%20partners.%0A%0AWe%20are%20currently%20building%20on%20Tycho%20and%20looking%20at%20continuing%20work%20on%20arbitrage%2C%20developing%20Solvers(Fillers)%20for%20CompactX%2C%20UniswapX%2C%20CowSwap%20and%201Inch.%0A%0AThe%20potential%20areas%20which%20we%20are%20looking%20to%20incorporate%20into%20a%20revenue%20positive%20platform%20include%0A%0A%23%23%23%23%20No%20Liquidity%20Solving%0A%0AAn%20opinionated%20architecture%2C%20built%20on%20Tycho%2C%20for%20an%20intent%20based%20solving%20protocol%20which%20facilitates%20single%20and%20multichain%20solving%20of%20intents.%20Intents%20can%20be%20solved%20on%20a%20single%20chain%20without%20provisioning%20up%20front%20capital%20as%20we%20arbiters%20can%20confirm%20mandates%20have%20been%20met%20by%20solvers%20at%20execution%20time%2C%20thus%20solvers%20may%20use%20the%20Swapper's%20locked%20funds%20for%20execution.%20For%20a%20demo%20of%20this%20please%20see%20%5BNo%20Liquidity%20Solving%20(Tycho%201inch)%5D(%2Fresearch%2Fsolving%2Ftycho1inchNOL).%0A%0A%23%23%23%23%20Solver%0A%0ABuilding%20out%20Tycho%20based%20Solvers%20starting%20with%20the%20following%20protocols%0A%0A-%20CompactX%3A%20An%20expansive%20locking%20system%20from%20%5Bthe-compact%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fthe-compact%2F).%20We%20have%20incorporated%20Mandates%20and%20Solver%20Payloads%20to%20allow%20Intents%20to%20be%20solved%20on%20a%20single%20chain%20without%20provisioning%20up%20front%20capital%20as%20arbiters%20can%20confirm%20mandates%20have%20been%20met%20by%20solvers%20at%20execution%20time%2C%20thus%20solvers%20may%20use%20the%20swappers%20locked%20funds%20for%20execution.%20_As%20of%20July%2025th%20the%20%5Bthe-compact%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fthe-compact%2F)%20we%20are%20developing%20on%20has%20been%20forked%20from%20%5BUniswap%20the-compact%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Fthe-compact%2Ftree%2Fv1)%20v1%20branch%20which%20has%20not%20as%20yet%20been%20deployed._%0A-%20UniswapX%3A%20John%20attended%20Uniswap's%20Hook%20Incubator%20course%20and%20has%20been%20in%20touch%20with%20Alumni%20as%20he%20build%20in%20this%20area.%20He%20plans%20to%20start%20work%20on%20a%20UniswapX%20Solver%20in%20August.%0A-%20COWswap%3A%20John%20hasdone%20some%20original%20evaluation%20of%20COWswap%20Solving%2C%20building%20and%20running%20a%20COWSwap%20Solver%20locally%20built%20from%20the%20%5Bservices%5D(https%3A%2F%2Fgithub.com%2Fcowprotocol%2Fservices)%20repository.%0A-%201Inch%3A%20John%20spent%20the%20week%20of%20July%2028th%20working%20on%20the%20%5BExpanding%20Limit%20Order%20track%5D(https%3A%2F%2Fethglobal.com%2Fevents%2Funite%2Fprizes).%20With%20the%20goal%20and%20improving%20knowledge%20of%201inch%20limit%20order%20protocol.%20For%20a%20demo%20of%20this%20please%20see%20%5BNo%20Liquidity%20Solving%20(Tycho%201inch)%5D(%2Fresearch%2Fsolving%2Ftycho1inchNOL).%0A%0A%23%23%23%23%20Arbitrage%0A%0AJohn%20has%20begun%20development%20of%20an%20Arbitrage%20bot.%20It%20uses%20Tycho's%20indexing%20simulation%20and%20execution%20modules.%20It%20uses%20a%20variation%20of%20the%20%5BBellman%20Ford%20Algorithm%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBellman%25E2%2580%2593Ford_algorithm)%20to%20find%20revenue%20positive%20arbitrage%20cycles.%20It%20aligns%20with%20the%20foundational%20requirement%20for%20an%20atomic%20arbitrage%20solver%20as%20specified%20in%20%5BTycho%20Application%20Proposal%204%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-x%2Fblob%2Fmain%2FTAP-4.md)%20once%20this%20foundation%20is%20in%20place%20the%20infrastructure%20can%20be%20expanded%20into%20Cross%20Chain%20Arbitrage%20and%20Market%20Making.%20You%20can%20see%20the%20design%20proposal%20%5Bhere%5D(%23TODO).%0A%0A%23%23%23%23%20Previous%20Grant%20applications%0A%0A-%20%5BTycho%20Atomic%20Arbitrage%5D(https%3A%2F%2Fhackmd.io%2F%40jincubator%2Fatomic-arbitrage)%3A%20An%20arbitrage%20bot%20built%20on%20Tycho's%20indexing%20simulation%20and%20execution%20modules.%20It%20uses%20a%20variation%20of%20the%20%5BBellman%20Ford%20Algorithm%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBellman%25E2%2580%2593Ford_algorithm)%20to%20find%20revenue%20positive%20arbitrage%20cycles.%0A-%20%5BSunrise%20Protocol%20(Polkadot%202020)%5D(https%3A%2F%2Fhackmd.io%2F%40jincubator%2Fsunrise)%3A%20Sunrise%20was%20building%20a%20decentralized%20protocol%20on%20a%20dedicated%20Polkadot%20parachain.%0A%0A%23%23%23%20Consulting%0A%0ACurrently%2C%20%5BJohn%20Whitton%5D(https%3A%2F%2Fjohnwhitton.com)%20is%20interested%20in%20consulting%20in%20the%20following%20areas.%0A%0A%23%23%23%23%20DEX%20Integrations%0A%0AJohn%20is%20familiar%20with%20the%20key%20Tycho%20Repositories%20(Indexing%2C%20Simulation%2C%20Execution%20and%20the%20SDK)%20and%20am%20experienced%20in%20Protocol%20Design%20(Soldity)%20and%20Service%20Development(Rust).%20John%20also%20run%20consulting%20firms%20and%20managed%20teams%20of%20engineers.%20He%20would%20enjoy%20partnering%20with%20Protocols%20and%20Platforms%20which%20want%20to%20integrate%20with%20Tycho.%0A%0A%23%23%23%23%20Chain%20Integrations%20and%20Rollup%20Providers%0A%0ASimilar%20to%20above%20John%20has%20done%20extensive%20research%20on%20%5BChains%2C%20consensus%20designs%20and%20building%20Rollouts%5D(%2Fresearch%2Fchains%2Fintro).%20He%20would%20enjoy%20partnering%20with%20Tycho%20to%20help%20bring%20on%20additional%20chains.%20Also%20building%20out%20Proof%20of%20Concepts%20for%20Protocls%20thinking%20about%20launching%20their%20own%20chain%20with%20RollUp%20providers%20such%20as%20%5BCaldera%5D(https%3A%2F%2Fcaldera.xyz%2F)%0A%0A%23%23%23%23%20Infrastructure%20Partnerships%0A%0AJohn%20has%20lead%20teams%20building%20out%20Layer%201%20platforms%20and%20DeFi%20protocols%20and%20worked%20as%20an%20Ecosystem%20Architect.%20He%20is%20also%20familiar%20with%20researching%20partner%20technologies.%20John%20did%20some%20initial%20work%20with%20EigenLayers%20%5Bdev-kit-cli%5D(https%3A%2F%2Fgithub.com%2FLayr-Labs%2Fdevkit-cli)%20and%20%5Brust%20integration%5D(https%3A%2F%2Fgithub.com%2FLayr-Labs%2Fhello-world-avs%3Ftab%3Dreadme-ov-file%23quick-start-rust).%0A",lastUpdatedAt:175869572e4},{lazy:()=>J(()=>import("./intro-B9vFtEPM.js"),[]),path:"/product/intro",type:"mdx",filePath:"product/intro.mdx",content:"%3Cdiv%20align%3D%22center%22%3E%0A%20%20%3Ch1%20align%3D%22center%22%3EProduct%20Incubations%3C%2Fh1%3E%0A%20%20%3Cp%20align%3D%22center%22%3E%0A%20%20%20%20Various%20Product%20papers%20on%20Parachains%2C%20Bridges%2C%20DEX%20and%20Infrastructure.%0A%20%20%3C%2Fp%3E%0A%3C%2Fdiv%3E%0A%0AThe%20articles%20on%20this%20site%2C%20relates%20to%20the%20research%20done%20and%20products%20built%20with%20varying%20degrees%20of%20success.%0ASome%20won%20prizes%20in%20hackathons%2C%20others%20had%20seed%20funding%20commitments%20but%20did%20not%20launch.%0AThe%20majority%20of%20the%20research%20and%20design%20here%20lead%20to%20permanent%20roles%20with%20organizations%20building%20in%20the%20same%20space.%0AFor%20deeper%20research%20on%20solving%2C%20arbitrage%2C%20bridging%2C%20zero%20knowledge%20and%20chain%20consensus%20and%20signing%20see%20%5Bresearch%5D(%2Fresearch%2Fintro.mdx).%0AThis%20section%20is%20where%20that%20research%20was%20brought%20together%20to%20form%20an%20idea%20of%20a%20platform.%0A",lastUpdatedAt:void 0},{lazy:()=>J(()=>import("./intro-B9vFtEPM.js"),[]),path:"/product/intro.html",type:"mdx",filePath:"product/intro.mdx",content:"%3Cdiv%20align%3D%22center%22%3E%0A%20%20%3Ch1%20align%3D%22center%22%3EProduct%20Incubations%3C%2Fh1%3E%0A%20%20%3Cp%20align%3D%22center%22%3E%0A%20%20%20%20Various%20Product%20papers%20on%20Parachains%2C%20Bridges%2C%20DEX%20and%20Infrastructure.%0A%20%20%3C%2Fp%3E%0A%3C%2Fdiv%3E%0A%0AThe%20articles%20on%20this%20site%2C%20relates%20to%20the%20research%20done%20and%20products%20built%20with%20varying%20degrees%20of%20success.%0ASome%20won%20prizes%20in%20hackathons%2C%20others%20had%20seed%20funding%20commitments%20but%20did%20not%20launch.%0AThe%20majority%20of%20the%20research%20and%20design%20here%20lead%20to%20permanent%20roles%20with%20organizations%20building%20in%20the%20same%20space.%0AFor%20deeper%20research%20on%20solving%2C%20arbitrage%2C%20bridging%2C%20zero%20knowledge%20and%20chain%20consensus%20and%20signing%20see%20%5Bresearch%5D(%2Fresearch%2Fintro.mdx).%0AThis%20section%20is%20where%20that%20research%20was%20brought%20together%20to%20form%20an%20idea%20of%20a%20platform.%0A",lastUpdatedAt:void 0},{lazy:()=>J(()=>import("./Harmony--B3kp566.js"),[]),path:"/proposals/Harmony",type:"mdx",filePath:"proposals/Harmony.mdx",content:"%23%20Kanga%20Finance%3A%20Harmony%20Hackathon%202021%0A%0A%23%23%20Overview%0A%0A%5Bkanga.finance%5D(https%3A%2F%2Fkanga.finance%2F)%20is%20a%20Dex%20implementation%20inspired%20by%20Sushi%20and%20proof%20of%20concept%20integration%20with%20one-wallet.%20(%5Bgithub%5D(https%3A%2F%2Fgithub.com%2Fkangafinance)).%20Winner%20of%20%2430%2C000%20in%20prizes%20from%20%5BHarmony%20Hackathon%5D(https%3A%2F%2Fbounties.gitcoin.co%2Fhackathon%2Fharmony-defi%2Fonboard).%0A%0A%3Cobject%0A%20%20data%3D%22%2Fimages%2FHarmony-Hackathon-Prizes.pdf%22%0A%20%20width%3D%221000%22%0A%20%20height%3D%221000%22%0A%20%20type%3D%22application%2Fpdf%22%0A%2F%3E%0A",lastUpdatedAt:1757298265e3},{lazy:()=>J(()=>import("./Harmony--B3kp566.js"),[]),path:"/proposals/Harmony.html",type:"mdx",filePath:"proposals/Harmony.mdx",content:"%23%20Kanga%20Finance%3A%20Harmony%20Hackathon%202021%0A%0A%23%23%20Overview%0A%0A%5Bkanga.finance%5D(https%3A%2F%2Fkanga.finance%2F)%20is%20a%20Dex%20implementation%20inspired%20by%20Sushi%20and%20proof%20of%20concept%20integration%20with%20one-wallet.%20(%5Bgithub%5D(https%3A%2F%2Fgithub.com%2Fkangafinance)).%20Winner%20of%20%2430%2C000%20in%20prizes%20from%20%5BHarmony%20Hackathon%5D(https%3A%2F%2Fbounties.gitcoin.co%2Fhackathon%2Fharmony-defi%2Fonboard).%0A%0A%3Cobject%0A%20%20data%3D%22%2Fimages%2FHarmony-Hackathon-Prizes.pdf%22%0A%20%20width%3D%221000%22%0A%20%20height%3D%221000%22%0A%20%20type%3D%22application%2Fpdf%22%0A%2F%3E%0A",lastUpdatedAt:1757298265e3},{lazy:()=>J(()=>import("./UHI5-CiN17rQq.js"),[]),path:"/proposals/UHI5",type:"mdx",filePath:"proposals/UHI5.mdx",content:"%23%20IntentSwap%20Hook%3A%20Uniswap%20Hook%20Incubator%205%20(2025)%0A%0A%23%23%20Overview%0A%0AProject%20in%20%5BUHI%20Hook%20Directory%5D(https%3A%2F%2Fbouncy-print-988.notion.site%2Fhook-directory)%20is%20%5Bhere%5D(https%3A%2F%2Fbouncy-print-988.notion.site%2FJincubator-21f5f0444abe81f3b186ced3c4a77ff4).%0A%0AJincubator%20IntentSwapHook%20allows%20swaps%20to%20be%20created%20with%20a%20delay%20period%20before%20execution%2C%20enabling%20solvers%20to%20find%20a%20more%20efficient%20trade%20and%20provide%20higher-return%20tokens%20to%20the%20swapper.%0A%0A%23%23%20How%20did%20you%20integrate%20our%20partners%2C%20if%20any%3F%0A%0AFor%20the%20UHI5%20project.%20The%20focus%20was%20on%20the%20IntentSwapHook%3B%20partner%20integration%20is%20planned%20for%20subsequent%20phases%2C%20and%20I%20will%20reach%20out%20to%20each%20partner%20with%20detailed%20implementation%20plans.%20Please%20see%20https%3A%2F%2Fdeck.jincubator.com%20for%20high-level%20integration%20overviews%20with%20EigenLayer%2C%20Circle%2C%20Across%2C%20Ink%2C%20and%20Flaunch.%0A%0A%23%23%20What%20are%20the%20key%20links%20to%20share%3F%20(Ex.%20demo%20video%2C%20GitHub%2C%20deck)%0A%0AGithub%3A%20https%3A%2F%2Fgithub.com%2Fjincubator%2Fuhi5-protocol%0A%0ASlides%3A%20https%3A%2F%2Fuhi5-deck.jincubator.com%2F%0A%0AProject%20Link%3A%20https%3A%2F%2Fjincubator.com%2F%0A%0ADemo%20Video%3A%20https%3A%2F%2Fuhi5-demo.jincubator.com%2F%0A%0A%23%23%20Problem%20%2F%20Background%3A%20What%20inspired%20the%20idea%3F%20What%20problems%20are%20you%20solving%3F%0A%0ALiquidity%20Fragmentation%20and%20Capital%20Efficiency%20are%20two%20of%20the%20largest%20problems%20as%20we%20roll%20out%20more%20protocols%20and%20blockchains.%20This%20is%20addressed%20by%20two%20approaches%20that%20work%20together%20in%20unison.%20Intent-based%20swaps%20using%20solvers%20and%20Chain%20Abstraction%20using%20Cross-chain%20Intents%20(ERC-7683)%2C%20enabling%20the%20seamless%20flow%20of%20funds%20between%20chains.%0A%0A%23%23%20Impact%3A%20What%20makes%20this%20project%20unique%3F%20What%20impact%20will%20this%20make%3F%0A%0AThis%20project%20lays%20the%20foundation%20for%20any%20pool%20to%20provide%20a%20better%20return%20for%20swappers%20and%20more%20capital%20efficiency%20for%20Liquidity%20Providers.%20It%20achieves%20this%20by%20creating%20a%20hook%20that%20allows%20swaps%20to%20be%20created%20with%20a%20delay%20period%20before%20execution%2C%20enabling%20solvers%20to%20find%20a%20more%20efficient%20trade%20and%20provide%20higher-return%20tokens%20to%20the%20swapper.%0A%0AThis%20is%20part%20of%20a%20broader%20technical%20landscape%20design%20to%20be%20built%20on%204%20key%20components%0A%0A1.%20IntentSwap%20Hook%20-%20A%20hook%20allowing%20swaps%20to%20be%20created%20with%20a%20delay%20period%20before%20execution%2C%20enabling%20solvers%20to%20find%20a%20more%20efficient%20trade%2C%20giving%20higher%20return%20tokens%20to%20the%20swapper.%0A2.%20Liquidity%20Indexing%20-%20Comprehensive%20liquidity%20indexing%20tooling%20allowing%20for%0A%20%20%20a.%20Indexing%20of%20all%20Protocols%0A%20%20%20b.%20Simulating%20swaps%20over%20all%20protocols%20in%20milliseconds%20to%20find%20the%20best%20trading%20route%0A%20%20%20c.%20Execution%20of%20swaps%20via%20a%20unified%20interface%0A3.%20Intent%20execution%20framework%20that%20enables%20the%20trade%20execution%20across%20multiple%20protocols.%0A4.%20Liquidity%20rebalancing%20and%20settlement%20tools%20enabling%20liquidity%20providers%20to%20rebalance%20their%20portfolios%20across%20both%20yield-earning%20protocols%2C%20assets%2C%20and%20chains.%0A%0ANote%3A%20Currently%20there%20is%20no%20front%20end%20but%20docs%20can%20be%20found%20at%20https%3A%2F%2Fjincubator.com%0A%0A%23%23%20Challenges%3A%20What%20was%20challenging%20about%20building%20this%20project%3F%0A%0AThe%20solutions%20space%20is%20quite%20large%2C%20making%20prioritizing%20which%20components%20to%20build%20for%20this%20project%20challenging.%20As%20such%2C%20sponsor%20integrations%20were%20deprioritized%20and%20have%20only%20a%20high-level%20specification%20rather%20than%20a%20working%20proof%20of%20concept.%0A%0ASecondly%2C%20this%20space%20is%20rapidly%20evolving%20with%20new%20tooling%20and%20solutions%20becoming%20available.%20Specifically%2C%20Intent%20execution%20frameworks%20like%20Uniswap's%20the-compact%20and%20Liquidity%20Indexing%20solutions%2C%20such%20as%20Tycho%E2%80%99s%20SDK%2C%20are%20still%20under%20development%20and%0A%0A%23%23%20Team%3A%20Who%20is%20on%20the%20team%3F%20What%20are%20their%20backgrounds%3F%0A%0ADevelopment%20is%20being%20lead%20by%20John%20Whitton%2C%20below%20are%20some%20handy%20links%20about%20him.%0A%0A-%20%5Bgithub%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton)%3A%20Johns%20github%20profile%0A-%20%5Bjohnwhitton.com%5D(https%3A%2F%2Fjohnwhitton.com%2F)%3A%20All%20about%20John%2C%20his%20work%2C%20writing%2C%20research%20etc.%0A-%20%5BMy%20Resume%5D(https%3A%2F%2Fresume.johnwhitton.com%2F)%3A%20One-page%20resume%20in%20pdf%20format.%0A-%20%5BOverview%5D(https%3A%2F%2Foverview.johnwhitton.com%2F)%3A%20A%20little%20infographic%20of%20John's%20history%0A-%20%5BWriting%5D(https%3A%2F%2Fjohnwhitton.com%2Fposts.html)%C2%A0and%C2%A0%5BResearch%5D(https%3A%2F%2Fjohnwhitton.com%2Fresearch.html)%3A%20Some%20writing%20and%20research%20John%20has%20done%20(a%20little%20outdated)%0A-%20%5BUniswap%20v4%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fuhi5-exercises)%3A%20Completed%20exercises%20and%20references%20for%20the%20Uniswap%20Hook%20Incubator%0A",lastUpdatedAt:1757298265e3},{lazy:()=>J(()=>import("./UHI5-CiN17rQq.js"),[]),path:"/proposals/UHI5.html",type:"mdx",filePath:"proposals/UHI5.mdx",content:"%23%20IntentSwap%20Hook%3A%20Uniswap%20Hook%20Incubator%205%20(2025)%0A%0A%23%23%20Overview%0A%0AProject%20in%20%5BUHI%20Hook%20Directory%5D(https%3A%2F%2Fbouncy-print-988.notion.site%2Fhook-directory)%20is%20%5Bhere%5D(https%3A%2F%2Fbouncy-print-988.notion.site%2FJincubator-21f5f0444abe81f3b186ced3c4a77ff4).%0A%0AJincubator%20IntentSwapHook%20allows%20swaps%20to%20be%20created%20with%20a%20delay%20period%20before%20execution%2C%20enabling%20solvers%20to%20find%20a%20more%20efficient%20trade%20and%20provide%20higher-return%20tokens%20to%20the%20swapper.%0A%0A%23%23%20How%20did%20you%20integrate%20our%20partners%2C%20if%20any%3F%0A%0AFor%20the%20UHI5%20project.%20The%20focus%20was%20on%20the%20IntentSwapHook%3B%20partner%20integration%20is%20planned%20for%20subsequent%20phases%2C%20and%20I%20will%20reach%20out%20to%20each%20partner%20with%20detailed%20implementation%20plans.%20Please%20see%20https%3A%2F%2Fdeck.jincubator.com%20for%20high-level%20integration%20overviews%20with%20EigenLayer%2C%20Circle%2C%20Across%2C%20Ink%2C%20and%20Flaunch.%0A%0A%23%23%20What%20are%20the%20key%20links%20to%20share%3F%20(Ex.%20demo%20video%2C%20GitHub%2C%20deck)%0A%0AGithub%3A%20https%3A%2F%2Fgithub.com%2Fjincubator%2Fuhi5-protocol%0A%0ASlides%3A%20https%3A%2F%2Fuhi5-deck.jincubator.com%2F%0A%0AProject%20Link%3A%20https%3A%2F%2Fjincubator.com%2F%0A%0ADemo%20Video%3A%20https%3A%2F%2Fuhi5-demo.jincubator.com%2F%0A%0A%23%23%20Problem%20%2F%20Background%3A%20What%20inspired%20the%20idea%3F%20What%20problems%20are%20you%20solving%3F%0A%0ALiquidity%20Fragmentation%20and%20Capital%20Efficiency%20are%20two%20of%20the%20largest%20problems%20as%20we%20roll%20out%20more%20protocols%20and%20blockchains.%20This%20is%20addressed%20by%20two%20approaches%20that%20work%20together%20in%20unison.%20Intent-based%20swaps%20using%20solvers%20and%20Chain%20Abstraction%20using%20Cross-chain%20Intents%20(ERC-7683)%2C%20enabling%20the%20seamless%20flow%20of%20funds%20between%20chains.%0A%0A%23%23%20Impact%3A%20What%20makes%20this%20project%20unique%3F%20What%20impact%20will%20this%20make%3F%0A%0AThis%20project%20lays%20the%20foundation%20for%20any%20pool%20to%20provide%20a%20better%20return%20for%20swappers%20and%20more%20capital%20efficiency%20for%20Liquidity%20Providers.%20It%20achieves%20this%20by%20creating%20a%20hook%20that%20allows%20swaps%20to%20be%20created%20with%20a%20delay%20period%20before%20execution%2C%20enabling%20solvers%20to%20find%20a%20more%20efficient%20trade%20and%20provide%20higher-return%20tokens%20to%20the%20swapper.%0A%0AThis%20is%20part%20of%20a%20broader%20technical%20landscape%20design%20to%20be%20built%20on%204%20key%20components%0A%0A1.%20IntentSwap%20Hook%20-%20A%20hook%20allowing%20swaps%20to%20be%20created%20with%20a%20delay%20period%20before%20execution%2C%20enabling%20solvers%20to%20find%20a%20more%20efficient%20trade%2C%20giving%20higher%20return%20tokens%20to%20the%20swapper.%0A2.%20Liquidity%20Indexing%20-%20Comprehensive%20liquidity%20indexing%20tooling%20allowing%20for%0A%20%20%20a.%20Indexing%20of%20all%20Protocols%0A%20%20%20b.%20Simulating%20swaps%20over%20all%20protocols%20in%20milliseconds%20to%20find%20the%20best%20trading%20route%0A%20%20%20c.%20Execution%20of%20swaps%20via%20a%20unified%20interface%0A3.%20Intent%20execution%20framework%20that%20enables%20the%20trade%20execution%20across%20multiple%20protocols.%0A4.%20Liquidity%20rebalancing%20and%20settlement%20tools%20enabling%20liquidity%20providers%20to%20rebalance%20their%20portfolios%20across%20both%20yield-earning%20protocols%2C%20assets%2C%20and%20chains.%0A%0ANote%3A%20Currently%20there%20is%20no%20front%20end%20but%20docs%20can%20be%20found%20at%20https%3A%2F%2Fjincubator.com%0A%0A%23%23%20Challenges%3A%20What%20was%20challenging%20about%20building%20this%20project%3F%0A%0AThe%20solutions%20space%20is%20quite%20large%2C%20making%20prioritizing%20which%20components%20to%20build%20for%20this%20project%20challenging.%20As%20such%2C%20sponsor%20integrations%20were%20deprioritized%20and%20have%20only%20a%20high-level%20specification%20rather%20than%20a%20working%20proof%20of%20concept.%0A%0ASecondly%2C%20this%20space%20is%20rapidly%20evolving%20with%20new%20tooling%20and%20solutions%20becoming%20available.%20Specifically%2C%20Intent%20execution%20frameworks%20like%20Uniswap's%20the-compact%20and%20Liquidity%20Indexing%20solutions%2C%20such%20as%20Tycho%E2%80%99s%20SDK%2C%20are%20still%20under%20development%20and%0A%0A%23%23%20Team%3A%20Who%20is%20on%20the%20team%3F%20What%20are%20their%20backgrounds%3F%0A%0ADevelopment%20is%20being%20lead%20by%20John%20Whitton%2C%20below%20are%20some%20handy%20links%20about%20him.%0A%0A-%20%5Bgithub%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton)%3A%20Johns%20github%20profile%0A-%20%5Bjohnwhitton.com%5D(https%3A%2F%2Fjohnwhitton.com%2F)%3A%20All%20about%20John%2C%20his%20work%2C%20writing%2C%20research%20etc.%0A-%20%5BMy%20Resume%5D(https%3A%2F%2Fresume.johnwhitton.com%2F)%3A%20One-page%20resume%20in%20pdf%20format.%0A-%20%5BOverview%5D(https%3A%2F%2Foverview.johnwhitton.com%2F)%3A%20A%20little%20infographic%20of%20John's%20history%0A-%20%5BWriting%5D(https%3A%2F%2Fjohnwhitton.com%2Fposts.html)%C2%A0and%C2%A0%5BResearch%5D(https%3A%2F%2Fjohnwhitton.com%2Fresearch.html)%3A%20Some%20writing%20and%20research%20John%20has%20done%20(a%20little%20outdated)%0A-%20%5BUniswap%20v4%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fuhi5-exercises)%3A%20Completed%20exercises%20and%20references%20for%20the%20Uniswap%20Hook%20Incubator%0A",lastUpdatedAt:1757298265e3},{lazy:()=>J(()=>import("./Unite-DRLZkPkE.js"),[]),path:"/proposals/Unite",type:"mdx",filePath:"proposals/Unite.mdx",content:"%23%20Jincubator%20Limit%20Order%20Protocol%3A%20Unite%20Defi%20(2025)%0A%0A%23%20Unite%20Defi%202025%20Jincubator%201inch%20Tycho%20NoLiquidity%20Swap%0A%0A%23%23%20Jincubator%20Unite%20Defi%20Overview%0A%0A%5BJincbuator%5D(https%3A%2F%2Fjincubator.com)%20is%20a%20research%20and%20development%20lab%20focusing%20on%20Solving%2C%20Arbitrage%20and%20Capital%20Efficient%0A%0A%23%23%20No%20Liquidity%20Solving%20Walkthrough%0A%0A%3Ciframe%0A%20%20src%3D%22https%3A%2F%2Fwww.loom.com%2Fembed%2Fc59e1a9eb2064d4a855cabab3941a514%22%0A%20%20frameborder%3D%220%22%0A%20%20allowfullscreen%0A%20%20allow%3D%22autoplay%3B%20encrypted-media%22%0A%20%20style%3D%7B%7B%0A%20%20%20%20width%3A%20%22100%25%22%2C%0A%20%20%20%20height%3A%20%22500px%22%2C%0A%20%20%20%20borderRadius%3A%20%2212px%22%2C%0A%20%20%7D%7D%0A%2F%3E%0A%0AThe%20following%20Actions%20are%20Taken%0A%0A1.%20Mary%20has%20one%20ETH%0A2.%20Chainlink%20Oracle%20has%201ETH%20%3D%202000DAI%0A3.%20Mary%20creates%20a%20an%20order%201ETH%20for%202000DAI%0A4.%20Tabatha%20using%20Tycho%20finds%20Uniswap%20V2%20will%20swap%201ETH%20for%202018DAI%0A5.%20Tabatha%20Takes%20the%20Order%0A6.%20Order%20Settles%0A%0A**Additional%20Notes**%0A%0A-%20%5C*This%20uses%20a%20modified%20version%20of%201inch%20Limit%20Order%20Protocol%20which%20allows%20TychoSwapExecutor%20to%20settle%20the%20Makers%20Funds%0A-%20%5C*%5C*Mary%20approves%201ETH%20to%20be%20used%20by%20Limit-Order-Protocol%20(and%20Tycho%20Swap%20Router)%0A-%20%5C*%5C*Mary%E2%80%99s%201ETH%20is%20used%20for%20the%20swap%20-%20No%20Liquidity%20is%20provided%20by%20Tabatha%20-%20Transaction%20reverts%20if%20%3C%202000%20DAI%20is%20returned%0A-%20%5C*%5C*%5C*Taking%20and%20Settling%20the%20order%20is%20an%20atomic%20transaction%20integrating%20TychoSwapExecutor.sol%20as%20a%20TakerInteraction%20in%20LimitOrderProtocol.sol%0A%0A%7C%20Action%20%7C%20Mary%20Maker%20%7C%20Limit%20Order%20Protocol%20%7C%20Tabatha%20Tycho%20Taker%20%7C%20Jincubator%20Protocol%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Tycho%20SimulationrderCalculator.sol%20integrates%20price%20oracles%20for%20creating%20spread%20ordersycho%20Indexing%20and%20Simulation%20(Off%20Chain%20Price%20Discovery)%20%20%20%20%20%7C%0A%7C%205%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%7C%202018DAI%5C*%5C*%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20TychoExecutor.sol%20executes%20the%20trade%20on%20UniswapV3%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20TychoRouter%20is%20called%20by%20TychoSwapRouter%20to%20execute%20the%20trade%20%7C%0A%7C%206%20%20%20%20%20%20%7C%20200DAI%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%2018DAI%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20LimitOrderProtocol.sol%20sends%20Mary%202000%20DAI%20from%20Tabatha%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20%20%20%20%20%20%20%20%7C%0A%0A%23%23%20Jincubator%20Limit%20Order%20Protocol%0A%0AThis%20protocol%20implements%20four%20key%20enhancements%20to%20the%20%5B1inch%20Limit%20Order%20Protocol%5D(https%3A%2F%2Fgithub.com%2F1inch%2Flimit-order-protocol)%3A%0A%0A1.%20**Enhanced%20Swap%20Execution**%3A%20%5BTychoSwapExecutor.sol%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fprotocol%2Ftree%2Fmain%2Fsrc%2FTychoSwapExecutor.sol)%20integrates%20%5BTycho%20Execution%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-execution)%20to%20enable%20complex%20swaps%20across%20multiple%20DEXs%20without%20upfront%20liquidity%0A2.%20**Stop%20Loss%20and%20Profit%20Taking%20Orders**%3A%20%5BOracleIntegration.sol%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fprotocol%2Ftree%2Fmain%2Fsrc%2FOracleCalculator.sol)%20Oracle-based%20(starting%20with%20chainlink)%20pricing%20calculator%20for%20advanced%20order%20strategies%0A3.%20**Treasury%20Management**%3A%20%5BRebalancerInteraction.sol%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fprotocol%2Ftree%2Fmain%2Fsrc%2FRebalancerInteraction.sol)%20enables%20makers%20and%20takers%20to%20immediately%20balance%20their%20funds%20to%20a%20treasury%20(and%20moving%20forward%20more%20advanced%20asset%20management%20strategies).%0A4.%20**Resource%20Management**%3A%20%5BCompactInteraction.sol%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fprotocol%2Ftree%2Fmain%2Fsrc%2FCompactInteraction.sol)%20integrates%20the%20%5B1inch%20Limit%20Order%20Protocol%5D(https%3A%2F%2Fgithub.com%2F1inch%2Flimit-order-protocol)%20with%20%5BThe%20Compact%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fthe-compact)%20for%20%5BERC-6909%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-6909)%20support%20and%20moving%20forward%20integration%20with%20additional%20cross%20chain%20intent%20standards%20such%20as%20%5BERC-7683%5D(https%3A%2F%2Fwww.erc7683.org%2F)%20leveraging%20%5BMandates%20and%20Solver%20Payloads%5D(https%3A%2F%2Fwww.jincubator.com%2Fresearch%2Fsolving%2Fprotocol)%20and%20%5BAdvanced%20Resource%20Locking%5D(https%3A%2F%2Fwww.jincubator.com%2Fresearch%2Fsolving%2Fresources).%0A%0A%23%23%23%20Enhanced%20Swap%20Execution%0A%0AWe%20integrate%20with%20Tycho's%20indexing%2C%20simulation%20and%20execution%20via%20a%20TcyhoSwapExecutor%20which%20allows%20Solvers%20to%20provide%20a%20payload%20with%20complex%20routing%20solutions%20across%20multiple%20liquidity%20protocols.%20The%20design%20for%20United%20Defi%20allows%20the%20taker%20to%20submit%20a%20Payload%20with%20Call%20Data%20which%20will%20be%20executed%20as%20part%20of%20the%20TakerInteraction%20flow.%20This%20allows%2C%20if%20permitted%20by%20the%20maker%2C%20the%20solver%20to%20use%20the%20takers%20tokens%20and%20execute%20the%20trade%20without%20providing%20any%20upfront%20capital.%0A%0A%23%23%23%20Stop%20Loss%20and%20Profit%20Taking%20Orders%0A%0AThe%20OracleCalculator%20extension%20is%20a%20powerful%20addition%20to%20the%201inch%20Limit%20Order%20Protocol%20that%20enables%20dynamic%20pricing%20based%20on%20Chainlink%20oracle%20data.%20This%20extension%20allows%20orders%20to%20be%20filled%20at%20prices%20that%20are%20calculated%20on-chain%20using%20real-time%20oracle%20feeds%2C%20making%20it%20possible%20to%20create%20orders%20that%20automatically%20adjust%20to%20market%20conditions.%0A%0A%23%23%23%20Treasury%20Management%0A%0AImplemented%20as%20an%20IPostInteraction%20the%20RebalancerInteraction%20contract%20allows%20both%20makers%20and%20takers%20to%20instantly%20move%20their%20funds%20to%20their%20Treasury%20of%20choice.%0A%0A%23%23%23%20Resource%20Management%0A%0AWe%20Implemented%20integration%20with%20an%20ERC-6909%20compliant%20locking%20mechanism%20enabling%20advanced%20resource%20management%20capabilities%20and%20laying%20the%20foundation%20to%20extend%20the%201inch%20Limit%20Order%20Protocol%20to%20open%20standards%20such%20as%20ERC-7683.%0A%0A%23%23%20NEAR%20FUSION%2B%20Smart%20Contract%20Development%0A%0ANEAR%20Fusion%2B%20is%20a%20comprehensive%20DeFi%20protocol%20that%20migrates%201inch's%20proven%20Limit%20Order%20Protocol%20and%20Cross-Chain%20Swap%20functionality%20to%20the%20NEAR%20blockchain.%20The%20system%20provides%20two%20primary%20capabilities%3A%20advanced%20limit%20order%20trading%20with%20partial%20fills%20and%20extensible%20features%2C%20and%20atomic%20cross-chain%20swaps%20secured%20by%20time-locked%20escrow%20contracts.%0A%0A%23%23%20Implementation%20Limit%20Order%20Protocol%0A%0A%23%23%23%20Core%20Components%0A%0A-%20**Compact**%3A%20ERC-6909%20enabled%20Chainlink%20calculator%20for%20price%20discovery%0A-%20**ResourceManager**%3A%20Manages%20resource%20locks%20for%20ERC-6909%20integration%0A-%20**TychoSwapExecutor**%3A%20Executes%20complex%20swaps%20using%20Tycho%20Execution%0A-%20**CompactInteraction**%3A%20Post-interaction%20handler%20for%20resource%20allocation%0A-%20**RebalancerInteraction**%3A%20Treasury%20management%20and%20portfolio%20rebalancing%0A-%20**OracleCalculator**%3A%20Price%20oracle%20integration%20for%20advanced%20order%20strategies%0A%0A%23%23%23%20Key%20Features%0A%0A-%20**Resource%20Locking**%3A%20ERC-6909%20compliant%20resource%20management%0A-%20**Multi-DEX%20Execution**%3A%20Cross-platform%20swap%20execution%20via%20Tycho%0A-%20**Advanced%20Order%20Types**%3A%20Stop-loss%20and%20take-profit%20orders%0A-%20**Treasury%20Management**%3A%20Automated%20portfolio%20rebalancing%0A-%20**Oracle%20Integration**%3A%20Chainlink%20price%20feeds%20for%20accurate%20pricing%0A%0A%23%23%23%20Key%20Technology%20Enhancements%0A%0A-%20Solidity%20based%20tests%20including%20a%20migration%20from%20%60OrderUtils.js%60%20to%20solidity%20based%20%5BOrderUtils%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fprotocol%2Ftree%2Fmain%2Ftest%2Futils%2ForderUtils%2FREADME_OrderUtils.md)%0A-%20Solidity%20%60%5E0.8.30%60%20compatibility%20provided%20by%20creating%20an%20interface%20%5BILimitOrderProtocol.sol%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fprotocol%2Ftree%2Fmain%2Fsrc%2Finterfaces%2F1inch%2FILimitOrderProtocol.sol)%20and%20introducing%20%5BLimitOrderProtocolManager%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fprotocol%2Ftree%2Fmain%2Ftest%2Fhelpers%2FLimitOrderProtocolManager.sol)%20for%20testing.%0A%0A%23%23%23%20Architecture%0A%0A!%5BArchitecture%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FByIAaIhwel.png)%0A%0A%23%23%23%20Interactions%0A%0A!%5BInteractions%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FB1XQRU3wex.png)%0A%0A%23%23%20Enhanced%20Swap%20Execution%0A%0A%23%23%23%20Tycho%20Execution%20Flow%0A%0A!%5BTychoFlow%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FHyRf1vnwgl.png)%0A%0A%23%23%23%20Tycho%20Components%0A%0A!%5BTychoComponents%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FHkytJP3Plg.png)%0A%0A%23%23%23%20Actors%0A%0A1.%20Maker%0A%20%20%201.%20Creates%20orders%20specifying%20the%20spread%20price%20they%20are%20looking%20for%20(currently%20using%20chainlink%20Oracle)%0A2.%20Solver%20Service%0A%20%20%201.%20Monitors%201inch%20Intents%20created%0A%20%20%202.%20Monitors%20Liquidity%20Positions%20on%20Chain%20using%20Tycho-indexer%0A%20%20%203.%20Simulates%20Solves%20for%20Orders%20(to%20see%20if%20profitable)%0A%20%20%204.%20Calls%20Resolver%20Contract%20to%20execute%20the%20Swap%0A%20%20%20%20%20%201.%20Solver%20Payload%20-%20encoded%20to%20call%20TychoResolver%20a%20modified%20version%20of%20Tycho%20Execution%0A%20%20%205.%20Calls%20Order%20Fill%20passing%0A%20%20%20%20%20%201.%20target%3A%20TychoResolver%20address%0A%20%20%20%20%20%202.%20interaction%3A%20SolverPayload%0A3.%20Resolver%20Contract%20(modified%20version%20combining%20ResolverCrossChain%20and%20Tycho%20Dispatcher)%0A%20%20%201.%20Called%20by%20LimitOrderProtocol%20as%20part%20of%20Order.fill%0A%20%20%202.%20Executes%20swap%20using%20Makers%20Tokens%0A%20%20%203.%20Provides%20TakerToken%20to%20Relayer%20to%20pass%20back%20to%20Taker%0A%20%20%204.%20Transfers%20excess%20maker%20(or%20taker)%20tokens%20to%20Treasury%0A%0A%23%23%23%20Implementation%20Approach%0A%0A%20%20%20%201.%20TychoFillPredicate.sol%20(Predicate)%3A%20copied%20from%20OracleCalculator.sol%0A%20%20%20%202.%20TychoFillInteraction.sol%20%3A%20copied%20from%20RebalancerInteraction.sol%0A%20%20%20%203.%20TychoResolver.sol%3A%20Copied%20from%20ResolverCrossChain.sol%20and%20Dispatcher.sol%0A%20%20%20%204.%20Tests%20copied%20from%20RebalancerInteraction.t.sol%20and%20enhanced%20with%0A%20%20%20%20%20%20%201.%20Creation%20of%20Swap%20(MakerTokens%20to%20TakerTokens)%20similar%20to%0A%20%20%20%20%20%20%202.%20Call%20of%20Fill%20Contract%20passing%0A%20%20%20%20%20%20%20%20%20%201.%20target%3A%20TychoResolver%20address%0A%20%20%20%20%20%20%20%20%20%202.%20interaction%3A%20SolverPayload%0A%20%20%20%20%20%20%203.%20Checking%20of%20Treasurer%20Balances%20after%20swap%20is%20executed%0A%0A%23%23%23%20Flow%0A%0A%23%23%23%23%20Interactions%0A%0AInteractions%20are%20callbacks%20that%20enable%20the%20execution%20of%20arbitrary%20code%2C%20which%20is%20provided%20by%20the%20maker%E2%80%99s%20order%20or%20taker%E2%80%99s%20fill%20execution.%0A%0AThe%20order%20execution%20logic%20includes%20several%20steps%20that%20also%20involve%20interaction%20calls%3A%0A%0A1.%20Validate%20the%20order%0A2.%20**Call%20the%20maker's%20pre-interaction**%0A3.%20Transfer%20the%20maker's%20asset%20to%20the%20taker%0A4.%20**Call%20the%20taker's%20interaction**%0A5.%20Transfer%20the%20taker's%20asset%20to%20the%20maker%0A6.%20**Call%20the%20maker's%20post-interaction**%0A7.%20Emit%20the%20OrderFilled%20event%0A%0ACalls%20are%20executed%20in%20the%20context%20of%20the%20limit%20order%20protocol.%20The%20target%20contract%20should%20implement%20the%20%60IPreInteraction%60%20or%20%60IPostInteraction%60%20interfaces%20for%20the%20maker's%20pre-%20and%20post-interactions%20and%20the%20%60ITakerInteraction%60%20interface%20for%20the%20taker's%20interaction.%20These%20interfaces%20declare%20the%20single%20callback%20function%20for%20maker%20and%20taker%20interactions%2C%20respectively.%0A%0AHere%20is%20how%20the%20maker%E2%80%99s%20pre-%20%26%20post-%20interactions%20and%20the%20taker%E2%80%99s%20interaction%20are%20defined%20in%20the%20interfaces%3A%0A%0A%60%60%60solidity%0A%2F%2FMaker's%20pre-interaction%0Afunction%20preInteraction(%0A%20%20%20%20%20%20%20%20IOrderMixin.Order%20calldata%20order%2C%0A%20%20%20%20%20%20%20%20bytes32%20orderHash%2C%0A%20%20%20%20%20%20%20%20address%20taker%2C%0A%20%20%20%20%20%20%20%20uint256%20makingAmount%2C%0A%20%20%20%20%20%20%20%20uint256%20takingAmount%2C%0A%20%20%20%20%20%20%20%20uint256%20remainingMakingAmount%2C%0A%20%20%20%20%20%20%20%20bytes%20calldata%20extraData%0A%20%20%20%20)%20external%3B%0A%0A%2F%2FMaker's%20post-interaction%0Afunction%20postInteraction(%0A%20%20%20%20%20%20%20%20IOrderMixin.Order%20calldata%20order%2C%0A%20%20%20%20%20%20%20%20bytes32%20orderHash%2C%0A%20%20%20%20%20%20%20%20address%20taker%2C%0A%20%20%20%20%20%20%20%20uint256%20makingAmount%2C%0A%20%20%20%20%20%20%20%20uint256%20takingAmount%2C%0A%20%20%20%20%20%20%20%20uint256%20remainingMakingAmount%2C%0A%20%20%20%20%20%20%20%20bytes%20calldata%20extraData%0A%20%20%20%20)%20external%3B%0A%0A%2F%2FTaker's%20interaction%0Afunction%20takerInteraction(%0A%20%20%20%20%20%20%20%20IOrderMixin.Order%20calldata%20order%2C%0A%20%20%20%20%20%20%20%20bytes32%20orderHash%2C%0A%20%20%20%20%20%20%20%20address%20taker%2C%0A%20%20%20%20%20%20%20%20uint256%20makingAmount%2C%0A%20%20%20%20%20%20%20%20uint256%20takingAmount%2C%0A%20%20%20%20%20%20%20%20uint256%20remainingMakingAmount%2C%0A%20%20%20%20%20%20%20%20bytes%20calldata%20extraData%0A%20%20%20%20)%20external%20returns(uint256%20offeredTakingAmount)%3B%0A%60%60%60%0A%0A-%20Resolver%20Contract%20executes%20calls%20to%20Tycho%20Dispatcher%20or%20Router%0A-%20Three%20functions%0A%20%20-%20preInteraction%3A%20used%20in%20OracleCalculator%20(to%20ensure%20price%20before%20swap)%0A%20%20-%20takerInteraction%20used%20in%20SwapExecutor%20to%20Execute%20Swap%20by%20Taker%0A%20%20-%20postInteraction%20used%20in%20Rebalancer%20to%20Send%20Funds%20to%20Treasury%0A%0A%23%23%23%20Design%20Questions%0A%0A1.%20**Interface%20Compatibility**%3A%0A%20%20%20-%20How%20will%20the%20TychoResolver%20interface%20be%20defined%20to%20ensure%20compatibility%20with%20the%20LimitOrderProtocol%20bytecode%20deployment%20approach%3F%0A%20%20%20-%20Should%20we%20create%20a%20custom%20interface%20for%20TychoResolver%20or%20use%20the%20concrete%20type%20like%20the%20working%20project%3F%0A%0A2.%20**Predicate%20Logic**%3A%0A%20%20%20-%20What%20predicate%20logic%20will%20TychoFill.sol%20use%3F%20Will%20it%20be%20similar%20to%20OracleCalculator.sol%20with%20price%20comparisons%3F%0A%20%20%20-%20How%20will%20the%20predicate%20determine%20when%20a%20solve%20is%20profitable%20vs.%20when%20it%20should%20execute%3F%0A%0A3.%20**Solver%20Payload%20Structure**%3A%0A%20%20%20-%20What%20data%20structure%20will%20the%20SolverPayload%20contain%3F%20Will%20it%20include%20target%20addresses%2C%20amounts%2C%20and%20execution%20parameters%3F%0A%20%20%20-%20How%20will%20the%20payload%20be%20encoded%2Fdecoded%20between%20the%20Solver%20Service%20and%20TychoResolver%3F%0A%0A4.%20**Treasury%20Integration**%3A%0A%20%20%20-%20How%20will%20excess%20tokens%20be%20calculated%20and%20transferred%20to%20Treasury%3F%0A%20%20%20-%20What%20mechanism%20will%20prevent%20MEV%20attacks%20on%20the%20treasury%20transfers%3F%0A%0A5.%20**Error%20Handling**%3A%0A%20%20%20-%20How%20will%20failed%20solves%20be%20handled%3F%20Will%20orders%20be%20cancelled%20or%20retried%3F%0A%20%20%20-%20What%20happens%20if%20the%20TychoResolver%20execution%20fails%20during%20the%20order%20fill%3F%0A%0A6.%20**Gas%20Optimization**%3A%0A%20%20%20-%20How%20will%20the%20solver%20service%20optimize%20gas%20costs%20across%20multiple%20orders%3F%0A%20%20%20-%20Will%20batch%20processing%20be%20implemented%20for%20multiple%20orders%3F%0A%0A7.%20**Oracle%20Integration**%3A%0A%20%20%20-%20Will%20TychoFill%20use%20the%20same%20Chainlink%20oracle%20approach%20as%20OracleCalculator%20%3F%0A%20%20%20-%20How%20will%20price%20feeds%20be%20validated%20and%20updated%3F%0A%0A8.%20**Cross-Chain%20Considerations**%3A%0A%20%20%20-%20How%20will%20the%20ResolverCrossChain%20functionality%20be%20integrated%20with%20Tycho%20Dispatcher%3F%0A%20%20%20-%20What%20bridge%20mechanisms%20will%20be%20used%20for%20cross-chain%20swaps%3F%0A%0A%23%23%23%20Implementation%20Plan%0A%0A1.%20**Phase%201%3A%20Core%20Contract%20Development**%0A%20%20%20-%20Create%20%60TychoFill.sol%60%20based%20on%20%60OracleCalculator.sol%60%0A%20%20%20%20%20-%20Implement%20predicate%20logic%20for%20profitable%20solve%20detection%0A%20%20%20%20%20-%20Add%20Tycho-specific%20price%20calculation%20methods%0A%20%20%20%20%20-%20Ensure%20interface%20compatibility%20with%20LimitOrderProtocol%0A%0A%20%20%20-%20Create%20%60TychoFillInteraction.sol%60%20based%20on%20%60RebalancerInteraction.sol%60%0A%20%20%20%20%20-%20Implement%20post-interaction%20logic%20for%20treasury%20transfers%0A%20%20%20%20%20-%20Add%20balance%20validation%20and%20excess%20token%20calculation%0A%20%20%20%20%20-%20Integrate%20with%20TychoResolver%20for%20swap%20execution%0A%0A2.%20**Phase%202%3A%20Resolver%20Contract%20Development**%0A%20%20%20-%20Create%20%60TychoResolver.sol%60%20combining%20ResolverCrossChain%20and%20Dispatcher%20functionality%0A%20%20%20%20%20-%20Implement%20swap%20execution%20using%20maker%20tokens%0A%20%20%20%20%20-%20Add%20taker%20token%20provision%20for%20relayer%0A%20%20%20%20%20-%20Integrate%20treasury%20transfer%20logic%0A%20%20%20%20%20-%20Ensure%20proper%20error%20handling%20and%20revert%20conditions%0A%0A3.%20**Phase%203%3A%20Testing%20Framework**%0A%20%20%20-%20Create%20comprehensive%20test%20suite%20based%20on%20%60RebalancerInteraction.t.sol%60%0A%20%20%20%20%20-%20Test%20order%20creation%20with%20Tycho-specific%20predicates%0A%20%20%20%20%20-%20Test%20solver%20payload%20encoding%2Fdecoding%0A%20%20%20%20%20-%20Test%20treasury%20balance%20validation%0A%20%20%20%20%20-%20Test%20cross-chain%20swap%20scenarios%0A%20%20%20%20%20-%20Test%20error%20conditions%20and%20edge%20cases%0A%0A4.%20**Phase%204%3A%20Integration%20Testing**%0A%20%20%20-%20Test%20end-to-end%20flow%20from%20order%20creation%20to%20execution%0A%20%20%20-%20Validate%20predicate%20execution%20with%20bytecode%20deployment%0A%20%20%20-%20Test%20solver%20service%20integration%20with%20Tycho-indexer%0A%20%20%20-%20Verify%20treasury%20transfers%20and%20balance%20calculations%0A%0A5.%20**Phase%205%3A%20Optimization%20and%20Security**%0A%20%20%20-%20Implement%20gas%20optimization%20strategies%0A%20%20%20-%20Add%20comprehensive%20error%20handling%0A%20%20%20-%20Implement%20MEV%20protection%20mechanisms%0A%20%20%20-%20Add%20monitoring%20and%20logging%20capabilities%0A%0A6.%20**Phase%206%3A%20Deployment%20and%20Monitoring**%0A%20%20%20-%20Deploy%20contracts%20with%20proper%20bytecode%20generation%0A%20%20%20-%20Set%20up%20monitoring%20for%20solver%20service%0A%20%20%20-%20Implement%20alerting%20for%20failed%20solves%0A%20%20%20-%20Add%20analytics%20for%20treasury%20performance%0A%0A%23%23%20Stop%20Loss%20and%20Profit%20Taking%20Orders%0A%0A%23%23%23%20Oracle%20Example%20Order%0A%0A!%5BOracleExampleOrder%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FByKclv3Del.png)%0A%0A%23%23%23%20Oracle%20Order%20Integration%0A%0A!%5BOracleIntegration%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2Fry6slPnvxg.png)%0A%0A%23%23%23%20Overview%0A%0AThe%20OracleCalculator%20extension%20is%20a%20powerful%20addition%20to%20the%201inch%20Limit%20Order%20Protocol%20that%20enables%20dynamic%20pricing%20based%20on%20Chainlink%20oracle%20data.%20This%20extension%20allows%20orders%20to%20be%20filled%20at%20prices%20that%20are%20calculated%20on-chain%20using%20real-time%20oracle%20feeds%2C%20making%20it%20possible%20to%20create%20orders%20that%20automatically%20adjust%20to%20market%20conditions.%0A%0A%23%23%23%201.%20What%20the%20OracleCalculator%20Extension%20Does%0A%0AThe%20OracleCalculator%20extension%20serves%20as%20an%20%60IAmountGetter%60%20implementation%20that%3A%0A%0A-%20**Calculates%20dynamic%20exchange%20rates**%20using%20Chainlink%20oracle%20data%0A-%20**Supports%20both%20single%20and%20double%20oracle%20pricing**%20for%20different%20token%20pairs%0A-%20**Applies%20configurable%20spreads**%20to%20provide%20maker%2Ftaker%20incentives%0A-%20**Handles%20inverse%20pricing**%20for%20tokens%20quoted%20in%20different%20base%20currencies%0A-%20**Validates%20oracle%20freshness**%20to%20ensure%20price%20data%20is%20current%20(within%204%20hours)%0A-%20**Integrates%20with%20predicates**%20for%20conditional%20order%20execution%0A%0A%23%23%23%23%20Key%20Features%3A%0A%0A1.%20**Single%20Oracle%20Pricing**%3A%20Uses%20one%20oracle%20to%20price%20a%20token%20relative%20to%20ETH%20or%20USD%0A2.%20**Double%20Oracle%20Pricing**%3A%20Uses%20two%20oracles%20to%20price%20custom%20token%20pairs%20(e.g.%2C%20INCH%2FDAI)%0A3.%20**Spread%20Application**%3A%20Applies%20maker%20and%20taker%20spreads%20to%20create%20profitable%20order%20books%0A4.%20**Inverse%20Flag%20Support**%3A%20Handles%20cases%20where%20oracle%20prices%20need%20to%20be%20inverted%0A5.%20**Oracle%20Freshness%20Check**%3A%20Ensures%20oracle%20data%20is%20not%20stale%20(within%204%20hours%20TTL)%0A%0A%23%23%23%202.%20Types%20of%20Orders%20That%20Can%20Be%20Created%0A%0A%23%23%23%23%20A.%20Single%20Oracle%20Orders%0A%0AOrders%20that%20use%20one%20Chainlink%20oracle%20to%20price%20a%20token%20relative%20to%20ETH%20or%20USD%3A%0A%0A-%20**ETH%20%E2%86%92%20DAI**%3A%20Using%20DAI%2FETH%20oracle%0A-%20**DAI%20%E2%86%92%20ETH**%3A%20Using%20DAI%2FETH%20oracle%20with%20inverse%20flag%0A-%20**WETH%20%E2%86%92%20USDC**%3A%20Using%20USDC%2FETH%20oracle%0A-%20**USDC%20%E2%86%92%20WETH**%3A%20Using%20USDC%2FETH%20oracle%20with%20inverse%20flag%0A%0A%23%23%23%23%20B.%20Double%20Oracle%20Orders%0A%0AOrders%20that%20use%20two%20oracles%20to%20price%20custom%20token%20pairs%3A%0A%0A-%20**INCH%20%E2%86%92%20DAI**%3A%20Using%20INCH%2FETH%20and%20DAI%2FETH%20oracles%0A-%20**DAI%20%E2%86%92%20INCH**%3A%20Using%20DAI%2FETH%20and%20INCH%2FETH%20oracles%0A-%20**Custom%20Token%20Pairs**%3A%20Any%20combination%20of%20tokens%20with%20available%20oracles%0A%0A%23%23%23%23%20C.%20Conditional%20Orders%20(Predicates)%0A%0AOrders%20that%20only%20execute%20under%20specific%20oracle%20conditions%3A%0A%0A-%20**Stop-Loss%20Orders**%3A%20Execute%20only%20when%20price%20falls%20below%20threshold%0A-%20**Take-Profit%20Orders**%3A%20Execute%20only%20when%20price%20rises%20above%20threshold%0A-%20**Range%20Orders**%3A%20Execute%20only%20within%20specific%20price%20ranges%0A%0A%23%23%23%203.%20Fields%20Passed%20to%20the%20Extension%20and%20How%20They%20Are%20Populated%0A%0A%23%23%23%23%20Extension%20Data%20Structure%0A%0AThe%20extension%20data%20is%20passed%20as%20%60bytes%20calldata%20extraData%60%20to%20the%20%60getMakingAmount%60%20and%20%60getTakingAmount%60%20functions%3A%0A%0A%60%60%60solidity%0Afunction%20getMakingAmount(%0A%20%20%20%20IOrderMixin.Order%20calldata%20order%2C%0A%20%20%20%20bytes%20calldata%20extension%2C%0A%20%20%20%20bytes32%20orderHash%2C%0A%20%20%20%20address%20taker%2C%0A%20%20%20%20uint256%20takingAmount%2C%0A%20%20%20%20uint256%20remainingMakingAmount%2C%0A%20%20%20%20bytes%20calldata%20extraData%20%20%2F%2F%20%E2%86%90%20Extension%20data%20here%0A)%20external%20view%20returns%20(uint256)%0A%60%60%60%0A%0A%23%23%23%23%20Single%20Oracle%20Data%20Format%0A%0AFor%20single%20oracle%20pricing%2C%20the%20%60extraData%60%20contains%3A%0A%0A%60%60%60%0A%5B1%20byte%20flags%5D%5B20%20bytes%20oracle%20address%5D%5B32%20bytes%20spread%5D%0A%60%60%60%0A%0A**Flags%20Byte%3A**%0A%0A-%20Bit%207%20(0x80)%3A%20Inverse%20flag%20-%20if%20set%2C%20invert%20the%20oracle%20price%0A-%20Bit%206%20(0x40)%3A%20Double%20price%20flag%20-%20if%20set%2C%20use%20double%20oracle%20mode%0A-%20Bits%200-5%3A%20Reserved%0A%0A**Example%3A**%0A%0A%60%60%60solidity%0A%2F%2F%20DAI%2FETH%20oracle%20at%200x1234...%20with%200.99%20spread%2C%20no%20inverse%0Abytes%20memory%20data%20%3D%20abi.encodePacked(%0A%20%20%20%20bytes1(0x00)%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20flags%3A%20no%20inverse%2C%20no%20double%20price%0A%20%20%20%20address(daiOracle)%2C%20%20%20%20%20%20%2F%2F%20oracle%20address%0A%20%20%20%20uint256(990000000)%20%20%20%20%20%20%20%2F%2F%20spread%3A%200.99%20(990000000%20%2F%201e9)%0A)%3B%0A%60%60%60%0A%0A%23%23%23%23%20Double%20Oracle%20Data%20Format%0A%0AFor%20double%20oracle%20pricing%2C%20the%20%60extraData%60%20contains%3A%0A%0A%60%60%60%0A%5B1%20byte%20flags%5D%5B20%20bytes%20oracle1%5D%5B20%20bytes%20oracle2%5D%5B32%20bytes%20decimalsScale%5D%5B32%20bytes%20spread%5D%0A%60%60%60%0A%0A**Example%3A**%0A%0A%60%60%60solidity%0A%2F%2F%20INCH%2FDAI%20pricing%20using%20INCH%2FETH%20and%20DAI%2FETH%20oracles%0Abytes%20memory%20data%20%3D%20abi.encodePacked(%0A%20%20%20%20bytes1(0x40)%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20flags%3A%20double%20price%20mode%0A%20%20%20%20address(inchOracle)%2C%20%20%20%20%20%2F%2F%20oracle1%3A%20INCH%2FETH%0A%20%20%20%20address(daiOracle)%2C%20%20%20%20%20%20%2F%2F%20oracle2%3A%20DAI%2FETH%0A%20%20%20%20int256(0)%2C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20decimalsScale%3A%20no%20adjustment%0A%20%20%20%20uint256(1010000000)%20%20%20%20%20%2F%2F%20spread%3A%201.01%20(1010000000%20%2F%201e9)%0A)%3B%0A%60%60%60%0A%0A%23%23%23%23%20How%20Fields%20Are%20Populated%0A%0A1.%20**Oracle%20Addresses**%3A%20Retrieved%20from%20Chainlink's%20oracle%20registry%20or%20deployment%0A2.%20**Spreads**%3A%20Calculated%20based%20on%20desired%20maker%2Ftaker%20incentives%20(typically%200.99%20for%20maker%2C%201.01%20for%20taker)%0A3.%20**Flags**%3A%20Set%20based%20on%20pricing%20requirements%20(inverse%20needed%2C%20double%20oracle%20needed)%0A4.%20**Decimals%20Scale**%3A%20Used%20to%20adjust%20for%20different%20oracle%20decimal%20precisions%0A%0A%23%23%23%204.%20Test%20Case%20Walkthrough%0A%0A%23%23%23%23%20Test%20Case%201%3A%20ETH%20%E2%86%92%20DAI%20Chainlink%20Order%0A%0A**Scenario**%3A%20Maker%20wants%20to%20sell%201%20ETH%20for%20DAI%20at%20oracle%20price%20with%20spreads%0A%0A**Order%20Details%3A**%0A%0A-%20Maker%3A%20makerAddr%0A-%20Taker%3A%20takerAddr%0A-%20Maker%20Asset%3A%20WETH%20(1%20ether)%0A-%20Taker%20Asset%3A%20DAI%20(4000%20ether)%0A-%20Oracle%3A%20DAI%2FETH%20at%200.00025%20ETH%20per%20DAI%20(1%20ETH%20%3D%204000%20DAI)%0A%0A**Extension%20Data%3A**%0A%0A%60%60%60solidity%0A%2F%2F%20Making%20amount%20data%20(maker%20spread%3A%200.99)%0Abytes%20memory%20makingAmountData%20%3D%20abi.encodePacked(%0A%20%20%20%20chainlinkCalcAddress%2C%20%20%20%20%2F%2F%20Calculator%20address%0A%20%20%20%20bytes1(0x00)%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20No%20inverse%20flag%0A%20%20%20%20oracleAddress%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20DAI%20oracle%0A%20%20%20%20uint256(990000000)%20%20%20%20%20%20%20%2F%2F%200.99%20spread%0A)%3B%0A%0A%2F%2F%20Taking%20amount%20data%20(taker%20spread%3A%201.01)%0Abytes%20memory%20takingAmountData%20%3D%20abi.encodePacked(%0A%20%20%20%20chainlinkCalcAddress%2C%20%20%20%20%2F%2F%20Calculator%20address%0A%20%20%20%20bytes1(0x80)%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Inverse%20flag%20set%0A%20%20%20%20oracleAddress%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20DAI%20oracle%0A%20%20%20%20uint256(1010000000)%20%20%20%20%20%2F%2F%201.01%20spread%0A)%3B%0A%60%60%60%0A%0A**Execution%20Flow%3A**%0A%0A1.%20Taker%20calls%20%60fillOrderArgs%60%20with%204000%20DAI%0A2.%20Protocol%20calls%20%60getTakingAmount%60%20with%204000%20DAI%0A3.%20Calculator%20applies%201.01%20spread%3A%204000%20%5C*%201.01%20%3D%204040%20DAI%0A4.%20Protocol%20calls%20%60getMakingAmount%60%20with%204040%20DAI%0A5.%20Calculator%20applies%200.99%20spread%3A%204040%20%5C*%200.99%20%2F%204000%20%3D%200.99%20ETH%0A6.%20Order%20executes%3A%20taker%20receives%200.99%20ETH%2C%20maker%20receives%204000%20DAI%0A%0A**Result**%3A%20Taker%20pays%204000%20DAI%2C%20receives%200.99%20ETH%20(effective%20rate%3A%201%20ETH%20%3D%204040.4%20DAI)%0A%0A%23%23%23%23%20Test%20Case%202%3A%20DAI%20%E2%86%92%20ETH%20Chainlink%20Order%0A%0A**Scenario**%3A%20Maker%20wants%20to%20sell%204000%20DAI%20for%20ETH%20at%20oracle%20price%0A%0A**Order%20Details%3A**%0A%0A-%20Maker%3A%20makerAddr%0A-%20Taker%3A%20takerAddr%0A-%20Maker%20Asset%3A%20DAI%20(4000%20ether)%0A-%20Taker%20Asset%3A%20WETH%20(1%20ether)%0A-%20Oracle%3A%20DAI%2FETH%20at%200.00025%20ETH%20per%20DAI%0A%0A**Extension%20Data%3A**%0A%0A%60%60%60solidity%0A%2F%2F%20Making%20amount%20data%20(inverse%20%2B%20maker%20spread)%0Abytes%20memory%20makingAmountData%20%3D%20abi.encodePacked(%0A%20%20%20%20chainlinkCalcAddress%2C%0A%20%20%20%20bytes1(0x80)%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Inverse%20flag%0A%20%20%20%20oracleAddress%2C%0A%20%20%20%20uint256(990000000)%20%20%20%20%20%20%20%2F%2F%200.99%20spread%0A)%3B%0A%0A%2F%2F%20Taking%20amount%20data%20(no%20inverse%20%2B%20taker%20spread)%0Abytes%20memory%20takingAmountData%20%3D%20abi.encodePacked(%0A%20%20%20%20chainlinkCalcAddress%2C%0A%20%20%20%20bytes1(0x00)%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20No%20inverse%20flag%0A%20%20%20%20oracleAddress%2C%0A%20%20%20%20uint256(1010000000)%20%20%20%20%20%2F%2F%201.01%20spread%0A)%3B%0A%60%60%60%0A%0A**Execution%20Flow%3A**%0A%0A1.%20Taker%20calls%20with%20%60makingAmount%60%20flag%20set%20to%20true%0A2.%20Protocol%20calls%20%60getMakingAmount%60%20with%204000%20DAI%0A3.%20Calculator%20applies%20inverse%20%2B%200.99%20spread%3A%204000%20%5C*%200.99%20%2F%204000%20%3D%200.99%20ETH%0A4.%20Protocol%20calls%20%60getTakingAmount%60%20with%200.99%20ETH%0A5.%20Calculator%20applies%201.01%20spread%3A%200.99%20%5C*%201.01%20%3D%201.01%20ETH%0A6.%20Order%20executes%3A%20taker%20receives%204000%20DAI%2C%20maker%20receives%201.01%20ETH%0A%0A**Result**%3A%20Taker%20pays%201.01%20ETH%2C%20receives%204000%20DAI%20(effective%20rate%3A%201%20ETH%20%3D%203960.4%20DAI)%0A%0A%23%23%23%23%20Test%20Case%203%3A%20INCH%20%E2%86%92%20DAI%20Double%20Oracle%20Order%0A%0A**Scenario**%3A%20Maker%20wants%20to%20sell%20100%20INCH%20for%20DAI%20using%20double%20oracle%20pricing%0A%0A**Order%20Details%3A**%0A%0A-%20Maker%3A%20makerAddr%0A-%20Taker%3A%20takerAddr%0A-%20Maker%20Asset%3A%20INCH%20(100%20ether)%0A-%20Taker%20Asset%3A%20DAI%20(632%20ether)%0A-%20Oracles%3A%20INCH%2FETH%20(0.0001577615249227853%20ETH)%20and%20DAI%2FETH%20(0.00025%20ETH)%0A%0A**Extension%20Data%3A**%0A%0A%60%60%60solidity%0A%2F%2F%20Making%20amount%20data%20(double%20oracle%20%2B%20maker%20spread)%0Abytes%20memory%20makingAmountData%20%3D%20abi.encodePacked(%0A%20%20%20%20chainlinkCalcAddress%2C%0A%20%20%20%20bytes1(0x40)%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Double%20price%20flag%0A%20%20%20%20address(daiOracle)%2C%20%20%20%20%20%20%2F%2F%20Oracle1%3A%20DAI%2FETH%0A%20%20%20%20address(inchOracle)%2C%20%20%20%20%20%2F%2F%20Oracle2%3A%20INCH%2FETH%0A%20%20%20%20int256(0)%2C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20No%20decimals%20adjustment%0A%20%20%20%20uint256(990000000)%20%20%20%20%20%20%20%2F%2F%200.99%20spread%0A)%3B%0A%0A%2F%2F%20Taking%20amount%20data%20(double%20oracle%20%2B%20taker%20spread)%0Abytes%20memory%20takingAmountData%20%3D%20abi.encodePacked(%0A%20%20%20%20chainlinkCalcAddress%2C%0A%20%20%20%20bytes1(0x40)%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Double%20price%20flag%0A%20%20%20%20address(inchOracle)%2C%20%20%20%20%20%2F%2F%20Oracle1%3A%20INCH%2FETH%0A%20%20%20%20address(daiOracle)%2C%20%20%20%20%20%20%2F%2F%20Oracle2%3A%20DAI%2FETH%0A%20%20%20%20int256(0)%2C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20No%20decimals%20adjustment%0A%20%20%20%20uint256(1010000000)%20%20%20%20%20%2F%2F%201.01%20spread%0A)%3B%0A%60%60%60%0A%0A**Execution%20Flow%3A**%0A%0A1.%20Taker%20calls%20with%20%60makingAmount%60%20flag%20set%20to%20true%0A2.%20Protocol%20calls%20%60getMakingAmount%60%20with%20100%20INCH%0A3.%20Calculator%20applies%20double%20oracle%20calculation%3A%0A%20%20%20-%20INCH%20price%20in%20ETH%3A%200.0001577615249227853%0A%20%20%20-%20DAI%20price%20in%20ETH%3A%200.00025%0A%20%20%20-%20INCH%2FDAI%20rate%3A%200.0001577615249227853%20%2F%200.00025%20%3D%200.631046%0A%20%20%20-%20With%200.99%20spread%3A%20100%20_%200.631046%20_%200.99%20%3D%2062.47%20DAI%0A4.%20Protocol%20calls%20%60getTakingAmount%60%20with%2062.47%20DAI%0A5.%20Calculator%20applies%20inverse%20calculation%20with%201.01%20spread%0A6.%20Order%20executes%20with%20calculated%20amounts%0A%0A**Result**%3A%20Complex%20pricing%20based%20on%20two%20oracle%20feeds%20with%20spread%20adjustments%0A%0A%23%23%23%23%20Test%20Case%204%3A%20Stop-Loss%20Order%20with%20Predicate%0A%0A**Scenario**%3A%20Maker%20wants%20to%20sell%20INCH%20for%20DAI%20only%20if%20INCH%2FDAI%20price%20falls%20below%206.32%0A%0A**Order%20Details%3A**%0A%0A-%20Maker%3A%20makerAddr%0A-%20Taker%3A%20takerAddr%0A-%20Maker%20Asset%3A%20INCH%20(100%20ether)%0A-%20Taker%20Asset%3A%20DAI%20(631%20ether)%0A-%20Predicate%3A%20INCH%2FDAI%20price%20%3C%206.32%0A%0A**Predicate%20Construction%3A**%0A%0A%60%60%60solidity%0A%2F%2F%20Build%20price%20call%20for%20predicate%0Abytes%20memory%20priceCall%20%3D%20abi.encodeWithSelector(%0A%20%20%20%20OracleCalculator%20.doublePrice.selector%2C%0A%20%20%20%20inchOracle%2C%20%20%20%20%2F%2F%20INCH%2FETH%20oracle%0A%20%20%20%20daiOracle%2C%20%20%20%20%20%2F%2F%20DAI%2FETH%20oracle%0A%20%20%20%20int256(0)%2C%20%20%20%20%20%2F%2F%20No%20decimals%20adjustment%0A%20%20%20%201%20ether%20%20%20%20%20%20%20%20%2F%2F%20Base%20amount%0A)%3B%0A%0A%2F%2F%20Build%20predicate%20call%0Abytes%20memory%20predicate%20%3D%20abi.encodeWithSelector(%0A%20%20%20%20swap.lt.selector%2C%20%20%20%20%20%20%20%20%2F%2F%20Less%20than%20comparison%0A%20%20%20%206.32%20ether%2C%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Threshold%3A%206.32%0A%20%20%20%20abi.encodeWithSelector(%0A%20%20%20%20%20%20%20%20swap.arbitraryStaticCall.selector%2C%0A%20%20%20%20%20%20%20%20address(oracleCalculator%20)%2C%0A%20%20%20%20%20%20%20%20priceCall%0A%20%20%20%20)%0A)%3B%0A%60%60%60%0A%0A**Execution%20Flow%3A**%0A%0A1.%20Order%20fill%20is%20attempted%0A2.%20Protocol%20evaluates%20predicate%20before%20execution%0A3.%20Predicate%20calls%20%60OracleCalculator%20.doublePrice()%60%20with%20oracle%20data%0A4.%20Calculated%20INCH%2FDAI%20price%20is%20compared%20to%206.32%20threshold%0A5.%20If%20price%20%3C%206.32%3A%20order%20executes%20normally%0A6.%20If%20price%20%E2%89%A5%206.32%3A%20order%20reverts%20with%20predicate%20failure%0A%0A**Result**%3A%20Order%20only%20executes%20when%20INCH%2FDAI%20price%20is%20below%20the%20specified%20threshold%0A%0A%23%23%23%23%20Test%20Case%205%3A%20Simple%20Order%20Without%20Extension%0A%0A**Scenario**%3A%20Basic%20order%20without%20any%20Chainlink%20integration%0A%0A**Order%20Details%3A**%0A%0A-%20Maker%3A%20makerAddr%0A-%20Taker%3A%20takerAddr%0A-%20Maker%20Asset%3A%20WETH%20(1%20ether)%0A-%20Taker%20Asset%3A%20DAI%20(4000%20ether)%0A-%20No%20extensions%20or%20predicates%0A%0A**Execution%20Flow%3A**%0A%0A1.%20Taker%20calls%20%60fillOrderArgs%60%20with%204000%20DAI%0A2.%20No%20extension%20data%20provided%0A3.%20Protocol%20uses%20default%20proportional%20calculation%0A4.%20Order%20executes%20at%20fixed%201%3A4000%20ratio%0A%0A**Result**%3A%20Simple%20fixed-rate%20order%20execution%20without%20dynamic%20pricing%0A%0A%23%23%23%20Key%20Implementation%20Details%0A%0A%23%23%23%23%20Oracle%20Freshness%20Check%0A%0A%60%60%60solidity%0Aif%20(updatedAt%20%2B%20_ORACLE_TTL%20%3C%20block.timestamp)%20revert%20StaleOraclePrice()%3B%0A%60%60%60%0A%0A-%20Ensures%20oracle%20data%20is%20not%20older%20than%204%20hours%0A-%20Prevents%20execution%20with%20stale%20price%20data%0A%0A%23%23%23%23%20Spread%20Application%0A%0A%60%60%60solidity%0Areturn%20spread%20*%20amount%20*%20latestAnswer.toUint256()%20%2F%20(10%20**%20oracle.decimals())%20%2F%20_SPREAD_DENOMINATOR%3B%0A%60%60%60%0A%0A-%20Spreads%20are%20applied%20as%20multipliers%20(e.g.%2C%20990000000%20%3D%200.99)%0A-%20%60_SPREAD_DENOMINATOR%20%3D%201e9%60%20for%209-decimal%20precision%0A%0A%23%23%23%23%20Double%20Oracle%20Calculation%0A%0A%60%60%60solidity%0Aresult%20%3D%20amount%20*%20latestAnswer1.toUint256()%3B%0Aif%20(decimalsScale%20%3E%200)%20%7B%0A%20%20%20%20result%20*%3D%2010%20**%20decimalsScale.toUint256()%3B%0A%7D%20else%20if%20(decimalsScale%20%3C%200)%20%7B%0A%20%20%20%20result%20%2F%3D%2010%20**%20(-decimalsScale).toUint256()%3B%0A%7D%0Aresult%20%2F%3D%20latestAnswer2.toUint256()%3B%0A%60%60%60%0A%0A-%20Calculates%20cross-oracle%20pricing%20for%20custom%20token%20pairs%0A-%20Handles%20decimal%20precision%20adjustments%20between%20oracles%0A%0AThis%20extension%20enables%20sophisticated%20DeFi%20applications%20that%20can%20automatically%20adjust%20to%20market%20conditions%20while%20providing%20liquidity%20providers%20with%20profitable%20spreads.%0A%0A%23%23%20Treasury%20Management%0A%0A%23%23%23%20Treasury%20Management%20Flow%0A%0A!%5BTreasuryInteraction%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FBkDBWwhDee.png)%0A%0A%23%23%23%20Rebalancer%20Requirements%0A%0A1.%20Create%20an%20Interaction%20Contract%20called%20RebalancerInteraction.sol%20(in%20the%20src%20directory)%0A2.%20Create%20a%20test%20contract%20called%20RebalancerInteraction.t.sol%20(in%20the%20test%20directory)%0A3.%20In%20RebalancerInteraction.t.sol%0A%20%20%201.%20Create%20test%20scenarios%20the%20same%20as%20in%20OracleCalculator%20.t.sol%0A%20%20%202.%20Add%20to%20that%20an%20Interaction%20using%20RebalancerInteraction.sol%20which%0A%20%20%20%20%20%201.%20Takes%20the%20output%20tokens%20the%20taker%20receives%0A%20%20%20%20%20%202.%20Transfers%20them%20to%20a%20third%20wallet%20(addr3)%20which%20is%20a%20treasurer%0A%20%20%20%20%20%203.%20If%20the%20transfer%20fails%20reject%20the%20order.%0A%0A%23%23%23%20Rebalancer%20Implementation%0A%0AThe%20Rebalancer%20implementation%20has%20been%20successfully%20completed%20with%20the%20following%20components%3A%0A%0A%23%23%23%201.%20RebalancerInteraction.sol%20(src%20directory)%0A%0A**Purpose**%3A%20Post-interaction%20contract%20that%20transfers%20output%20tokens%20to%20a%20treasurer%20wallet%20after%20successful%20order%20execution.%0A%0A**Key%20Features**%3A%0A%0A-%20Implements%20%60IPostInteraction%60%20interface%20for%20Limit%20Order%20Protocol%20integration%0A-%20Transfers%20the%20taker's%20received%20tokens%20(maker%20asset)%20to%20a%20designated%20treasurer%20address%0A-%20Uses%20%60SafeERC20%60%20for%20secure%20token%20transfers%20with%20proper%20error%20handling%0A-%20Reverts%20the%20entire%20order%20if%20transfer%20fails%2C%20ensuring%20atomic%20execution%0A-%20Emits%20%60TokensTransferredToTreasurer%60%20events%20for%20successful%20transfers%0A-%20Validates%20treasurer%20address%20in%20constructor%20to%20prevent%20zero%20address%20usage%0A%0A**Core%20Functionality**%3A%0A%0A%60%60%60solidity%0Afunction%20postInteraction(%0A%20%20%20%20IOrderMixin.Order%20calldata%20order%2C%0A%20%20%20%20bytes32%20orderHash%2C%0A%20%20%20%20address%20taker%2C%0A%20%20%20%20uint256%20makingAmount%2C%0A%20%20%20%20uint256%20takingAmount%2C%0A%20%20%20%20uint256%20remainingMakingAmount%2C%0A%20%20%20%20bytes%20calldata%20extraData%0A)%20external%20override%20%7B%0A%20%20%20%20address%20outputToken%20%3D%20order.makerAsset%3B%0A%20%20%20%20uint256%20outputAmount%20%3D%20makingAmount%3B%0A%0A%20%20%20%20try%20IERC20(outputToken).safeTransferFrom(taker%2C%20treasurer%2C%20outputAmount)%20%7B%0A%20%20%20%20%20%20%20%20emit%20TokensTransferredToTreasurer(outputToken%2C%20taker%2C%20treasurer%2C%20outputAmount)%3B%0A%20%20%20%20%7D%20catch%20%7B%0A%20%20%20%20%20%20%20%20revert%20TransferFailed()%3B%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A%23%23%23%202.%20RebalancerInteraction.t.sol%20(test%20directory)%0A%0A**Purpose**%3A%20Comprehensive%20test%20suite%20that%20replicates%20all%20OracleCalculator%20scenarios%20with%20added%20treasurer%20functionality.%0A%0A**Test%20Coverage**%3A%0A%0A-%20**Single%20Oracle%20Orders**%3A%20ETH%E2%86%92DAI%2C%20DAI%E2%86%92ETH%20with%20treasurer%20receiving%20output%20tokens%0A-%20**Double%20Oracle%20Orders**%3A%20INCH%E2%86%92DAI%20with%20complex%20pricing%20and%20treasurer%20transfer%0A-%20**Conditional%20Orders**%3A%20Stop-loss%20orders%20with%20predicate%20validation%20and%20treasurer%20transfer%0A-%20**Simple%20Orders**%3A%20Basic%20orders%20without%20Chainlink%20but%20with%20treasurer%20transfer%0A-%20**Failure%20Scenarios**%3A%20Tests%20unauthorized%20transfers%20that%20should%20revert%0A%0A**Test%20Scenarios%20Implemented**%3A%0A%0A1.%20%60test_eth_to_dai_chainlink_order_with_rebalancer()%60%20-%20Single%20oracle%20ETH%E2%86%92DAI%0A2.%20%60test_dai_to_eth_chainlink_order_with_rebalancer()%60%20-%20Single%20oracle%20DAI%E2%86%92ETH%20with%20inverse%0A3.%20%60test_dai_to_1inch_chainlink_order_takingAmountData_with_rebalancer()%60%20-%20Double%20oracle%20INCH%E2%86%92DAI%0A4.%20%60test_dai_to_1inch_chainlink_order_makingAmountData_with_rebalancer()%60%20-%20Double%20oracle%20with%20making%20amount%0A5.%20%60test_dai_to_1inch_stop_loss_order_with_rebalancer()%60%20-%20Conditional%20order%20with%20predicate%0A6.%20%60test_dai_to_1inch_stop_loss_order_predicate_invalid_with_rebalancer()%60%20-%20Invalid%20predicate%20test%0A7.%20%60test_eth_to_dai_stop_loss_order_with_rebalancer()%60%20-%20ETH%E2%86%92DAI%20with%20stop-loss%0A8.%20%60test_simple_order_without_extension_with_rebalancer()%60%20-%20Basic%20order%20with%20treasurer%0A9.%20%60test_simple_order_with_different_amounts_with_rebalancer()%60%20-%20Partial%20amounts%0A10.%20%60test_rebalancer_transfer_failure()%60%20-%20Failure%20scenario%20testing%0A%0A%23%23%23%203.%20Key%20Implementation%20Details%0A%0A%23%23%23%23%20**Post-Interaction%20Integration**%0A%0A-%20Each%20test%20includes%20%60buildPostInteractionCalldata(address(rebalancerInteraction))%60%0A-%20Post-interaction%20data%20is%20added%20to%20order%20extensions%20via%20%60PostInteractionData%60%0A-%20Treasurer%20(addr3)%20receives%20the%20output%20tokens%20after%20successful%20order%20execution%0A%0A%23%23%23%23%20**Transfer%20Logic**%0A%0A-%20**Takes%20output%20tokens**%3A%20The%20tokens%20the%20taker%20receives%20(maker%20asset%20from%20the%20order)%0A-%20**Transfers%20to%20treasurer**%3A%20Moves%20tokens%20to%20addr3%20(treasurer%20wallet)%20using%20%60safeTransferFrom%60%0A-%20**Rejects%20order%20on%20failure**%3A%20If%20transfer%20fails%2C%20entire%20order%20reverts%20with%20%60TransferFailed%60%20error%0A%0A%23%23%23%23%20**Test%20Verification**%0A%0AEach%20test%20verifies%3A%0A%0A1.%20**Order%20executes%20successfully**%20with%20Chainlink%20pricing%20(where%20applicable)%0A2.%20**Treasurer%20receives%20tokens**%3A%20%60assertEq(token.balanceOf(addr3)%2C%20expectedAmount)%60%0A3.%20**All%20balances%20are%20correct**%20for%20maker%2C%20taker%2C%20and%20treasurer%0A4.%20**Failure%20scenarios%20revert**%20when%20transfers%20are%20unauthorized%0A%0A%23%23%23%23%20**Error%20Handling**%0A%0A-%20**TransferFailed**%3A%20Reverts%20entire%20order%20if%20%60safeTransferFrom%60%20fails%0A-%20**InvalidTreasurer**%3A%20Prevents%20deployment%20with%20zero%20address%20treasurer%0A-%20**Predicate%20failures**%3A%20Orders%20with%20invalid%20predicates%20revert%20before%20interaction%0A%0A%23%23%23%204.%20Integration%20with%20Limit%20Order%20Protocol%0A%0AThe%20implementation%20seamlessly%20integrates%20with%20the%20existing%20Limit%20Order%20Protocol%3A%0A%0A-%20**Extension%20System**%3A%20Uses%20%60PostInteractionData%60%20extension%20for%20post-execution%20callbacks%0A-%20**Order%20Flow**%3A%20Maintains%20existing%20order%20execution%20flow%20while%20adding%20treasurer%20transfer%0A-%20**Atomic%20Execution**%3A%20Ensures%20either%20complete%20success%20(order%20%2B%20transfer)%20or%20complete%20failure%0A-%20**Event%20Emission**%3A%20Provides%20transparency%20through%20%60TokensTransferredToTreasurer%60%20events%0A%0A%23%23%23%205.%20Security%20Considerations%0A%0A-%20**SafeERC20**%3A%20Uses%20OpenZeppelin's%20SafeERC20%20for%20secure%20token%20transfers%0A-%20**Try-Catch**%3A%20Graceful%20error%20handling%20prevents%20partial%20state%20changes%0A-%20**Address%20Validation**%3A%20Constructor%20validates%20treasurer%20address%0A-%20**Atomic%20Operations**%3A%20Order%20reverts%20entirely%20if%20transfer%20fails%0A-%20**Authorization**%3A%20Relies%20on%20existing%20token%20approval%20mechanisms%0A%0A%23%23%23%206.%20Use%20Cases%0A%0AThis%20implementation%20enables%3A%0A%0A-%20**Automated%20Treasury%20Management**%3A%20Automatic%20transfer%20of%20trading%20profits%20to%20treasury%0A-%20**Risk%20Management**%3A%20Centralized%20control%20of%20trading%20outputs%0A-%20**Compliance**%3A%20Regulatory%20requirements%20for%20fund%20segregation%0A-%20**Portfolio%20Rebalancing**%3A%20Systematic%20reallocation%20of%20trading%20proceeds%0A%0AThe%20Rebalancer%20implementation%20successfully%20meets%20all%20requirements%20from%20the%20specification%20and%20provides%20a%20robust%2C%20secure%2C%20and%20comprehensive%20solution%20for%20automated%20treasury%20management%20in%20limit%20order%20trading.%0A%0A%23%23%23%20Test%20Results%0A%0A**10%20out%20of%2010%20tests%20passing%20(100%25%20success%20rate)**%0A%0A%23%23%23%23%20%E2%9C%85%20**All%20Tests%20Passing%3A**%0A%0A1.%20%60test_eth_to_dai_chainlink_order_with_rebalancer()%60%20-%20Single%20oracle%20ETH%E2%86%92DAI%0A2.%20%60test_dai_to_eth_chainlink_order_with_rebalancer()%60%20-%20Single%20oracle%20DAI%E2%86%92ETH%20with%20inverse%0A3.%20%60test_eth_to_dai_stop_loss_order_with_rebalancer()%60%20-%20Stop-loss%20with%20predicate%0A4.%20%60test_simple_order_without_extension_with_rebalancer()%60%20-%20Basic%20order%20without%20extensions%0A5.%20%60test_simple_order_with_different_amounts_with_rebalancer()%60%20-%20Different%20order%20amounts%0A6.%20%60test_rebalancer_transfer_failure()%60%20-%20Transfer%20failure%20handling%0A7.%20%60test_dai_to_1inch_stop_loss_order_predicate_invalid_with_rebalancer()%60%20-%20Invalid%20predicate%0A8.%20%60test_dai_to_1inch_chainlink_order_makingAmountData_with_rebalancer()%60%20-%20Double%20oracle%20with%20making%20amount%0A9.%20%60test_dai_to_1inch_chainlink_order_takingAmountData_with_rebalancer()%60%20-%20Double%20oracle%20with%20taking%20amount%0A10.%20%60test_dai_to_1inch_stop_loss_order_with_rebalancer()%60%20-%20Complex%20double%20oracle%20with%20stop-loss%20predicate%0A%0A%23%23%23%23%20%F0%9F%8E%AF%20**Core%20Functionality%20Verified%3A**%0A%0A-%20%E2%9C%85%20Post-interaction%20transfers%20tokens%20to%20treasurer%0A-%20%E2%9C%85%20Proper%20token%20approvals%20and%20transfers%0A-%20%E2%9C%85%20Balance%20verification%20accounting%20for%20treasurer%20transfers%0A-%20%E2%9C%85%20Error%20handling%20with%20transfer%20failures%0A-%20%E2%9C%85%20Atomic%20execution%20(orders%20either%20complete%20fully%20or%20revert%20entirely)%0A-%20%E2%9C%85%20Support%20for%20multiple%20token%20types%20(WETH%2C%20DAI%2C%20INCH)%0A-%20%E2%9C%85%20Complex%20oracle-based%20pricing%20scenarios%0A%0A%23%23%20Resource%20Management%0A%0A%23%23%23%20Resource%20Management%20Architecture%0A%0A!%5BResourceArchitecture%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FS12jGDhPge.png)%0A%0A%23%23%23%20Resource%20Management%20Components%0A%0A!%5BResourceComponents%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FHJ-pzD3Peg.png)%0A%0A%23%23%23%20Requirements%0A%0A1.%20Read%20lib%5Cthe-compact%5CREADME.md%20(open%20in%20editor)%20to%20understand%20how%20the%20compact%20works%0A2.%20We%20are%20looking%20to%20create%20an%20end%20to%20end%20flow%20where%0A%20%20%201.%20We%20register%20a%20new%20contract%20ResourceManager.sol%20as%20a%20ResourceManager%0A%20%20%202.%20We%20Register%20ChainLinkCompactInteraction.sol%20as%20the%20Arbiter%0A%20%20%203.%20The%20Maker%20(the%20Swapper%20in%20compact%20terms%20signs%20permission%20for%20their%20tokens%20(or%20ETH)%20to%20be%20stored%20in%20the-compact%20as%20ERC-6909)%0A%20%20%204.%20ChainLinkCompact.sol%20checks%20that%20the%20we%20have%20a%20ResourceLock%20for%20the%20amount%20required.%0A%20%20%205.%20ChainLinkCompact%20then%20executes%20the%20trade%20using%20the%20same%20logic%20that%20was%20in%20ChainLinkCalculator%20and%20creates%20a%20resource%20lock%20for%20their%20(tokens%2FETH)%0A%20%20%206.%20ChainLinkCompactInteraction%20is%20copied%20from%20RebalancerInteraction%20it%20takes%20the%20output%20tokens%20provided%20by%20the%20Taker%20and%0A%20%20%207.%20If%20they%20are%20%3E%3D%20TakerAmount%20then%20it%20calls%20the%20ResourceManager%20to%20lock%20the%20funds%0A%20%20%208.%20It%20then%20does%20the%20token%20transfer%20to%20the%20treasurer%20the%20same%20as%20it%20was%20done%20in%20the%20original%20RebalancerInteraction%0A%0A%23%23%23%20Design%20Questions%0A%0A1.%20**Resource%20Manager%20Registration**%3A%20How%20should%20we%20register%20the%20LimitOrderProtocol%20as%20a%20ResourceManager%20in%20The%20Compact%3F%20Should%20it%20be%20a%20separate%20contract%20or%20integrated%20directly%3F%0A%20%20%201.%20Answer%3A%20We%20are%20registering%20it%20as%20a%20separate%20contract%20let's%20call%20it%20ResourceManager.sol%20and%20this%20contract%20will%20be%20called%20by%20ChainLinkCompact%20to%20lock%20the%20resources%20before%20calling%20the%20swap%20on%20LimitOrderProtocl%0A%0A2.%20**Arbiter%20Implementation**%3A%20Should%20ChainLinkCompactInteraction.sol%20be%20a%20standalone%20arbiter%20or%20integrated%20with%20existing%20ChainLinkCalculator%20logic%3F%0A%20%20%201.%20Answer%3A%20It%20should%20be%20Standalone%20ChainLinkCalculator%20and%20RebalancerInteraction%20remain%20unchanged%0A%0A3.%20**Token%20Locking%20Strategy**%3A%20Should%20makers%20lock%20their%20entire%20balance%20upfront%20or%20lock%20tokens%20dynamically%20when%20orders%20are%20matched%3F%0A%20%20%201.%20Answer%3A%20Initially%20Lock%20their%20whole%20balance%0A%0A4.%20**Resource%20Lock%20Scope**%3A%20Should%20resource%20locks%20be%20chain-specific%20or%20multichain%20for%20cross-chain%20order%20execution%3F%0A%20%20%201.%20Answer%3A%20Chain-specific%0A%0A5.%20**Allocator%20Selection**%3A%20Which%20allocator%20should%20we%20use%20for%20the%20resource%20locks%3F%20Should%20we%20create%20a%20custom%20allocator%20or%20use%20existing%20ones%20like%20Smallocator%2FAutocator%3F%0A%20%20%201.%20Answer%3A%20Create%20a%20custom%20Allocator%20based%20on%20Autocator(which%20is%20used%20for%20End%20User%20signing%20which%20is%20the%20Maker%20in%20our%20case)%0A%20%20%202.%20The%20logic%20for%20calling%20this%20should%20be%20in%20ChainLinkCompact.t.sol%0A%20%20%203.%20Moving%20forward%20we%20will%20also%20create%20a%20custom%20Smallocator%20used%20when%20smart%20contract%20call%20this%0A%0A6.%20**EIP-712%20Signature%20Structure**%3A%20How%20should%20we%20structure%20the%20EIP-712%20signatures%20for%20the%20compact%20agreements%3F%20Should%20we%20include%20mandate%20data%20for%20additional%20conditions%3F%0A%20%20%201.%20Answer%3A%20For%20Phase%201%20we%20do%20not%20need%20to%20add%20mandate%20data%20or%20Solver%20Payloads%20we%20will%20incorporate%20those%20in%20a%20later%20phase%0A%0A7.%20**Fallback%20Mechanisms**%3A%20What%20should%20happen%20if%20the%20arbiter%20fails%20to%20process%20a%20claim%3F%20Should%20we%20implement%20emissary%20fallbacks%3F%0A%20%20%201.%20If%20an%20arbiter%20fails%20to%20process%20the%20claim%20the%20swap%20should%20revert%0A%0A8.%20**Gas%20Optimization**%3A%20How%20can%20we%20optimize%20gas%20usage%20for%20the%20ERC-6909%20integration%2C%20especially%20for%20batch%20operations%3F%0A%20%20%201.%20We%20will%20optimize%20gas%20in%20phase%202%0A%0A9.%20**Error%20Handling**%3A%20How%20should%20we%20handle%20cases%20where%20resource%20locks%20are%20insufficient%20or%20expired%3F%0A%20%20%201.%20We%20revert%20the%20transaction%20with%20custom%20errors%20stating%20the%20reason%20for%20the%20failure%0A%0A10.%20**Integration%20Points**%3A%20Should%20the%20ERC-6909%20functionality%20be%20optional%20(opt-in)%20or%20mandatory%20for%20all%20orders%3F%0A%20%20%20%201.%20Optional%20set%20by%20a%20boolean%20ERC-6909%20flag%20for%20now%0A%20%20%20%202.%20Later%20this%20may%20move%20to%20an%20enum%20with%20additional%20swap%20types%0A%0A%23%23%23%20Implementation%0A%0A%23%23%23%23%20Phase%201%3A%20Core%20Contract%20Development%0A%0A1.%20**Create%20ResourceManager.sol**%20-%20New%20contract%0A%20%20%20-%20Register%20as%20ResourceManager%20in%20The%20Compact%0A%20%20%20-%20Handle%20resource%20lock%20creation%20and%20management%20for%20makers%0A%20%20%20-%20Implement%20allocator%20integration%20for%20order%20validation%0A%20%20%20-%20Called%20by%20ChainLinkCompact%20to%20lock%20resources%20before%20swap%20execution%0A%0A2.%20**Create%20ChainLinkCompact.sol**%20-%20Copy%20from%20ChainLinkCalculator.sol%0A%20%20%20-%20Add%20ERC-6909%20flag%20for%20optional%20functionality%0A%20%20%20-%20Integrate%20with%20The%20Compact%20for%20resource%20lock%20verification%0A%20%20%20-%20Add%20ERC-6909%20token%20validation%20before%20order%20execution%0A%20%20%20-%20Call%20ResourceManager.sol%20to%20lock%20resources%20before%20LimitOrderProtocol%20execution%0A%20%20%20-%20Implement%20custom%20error%20handling%20for%20insufficient%2Fexpired%20locks%0A%0A3.%20**Create%20ChainLinkCompactInteraction.sol**%20-%20Copy%20from%20RebalancerInteraction.sol%0A%20%20%20-%20Implement%20IArbiter%20interface%20for%20The%20Compact%0A%20%20%20-%20Add%20resource%20lock%20creation%20for%20taker's%20output%20tokens%0A%20%20%20-%20Maintain%20treasurer%20transfer%20functionality%0A%20%20%20-%20Add%20EIP-712%20signature%20verification%20for%20compact%20agreements%0A%20%20%20-%20Revert%20entire%20transaction%20if%20arbiter%20fails%20to%20process%20claim%0A%0A4.%20**Create%20Custom%20Allocator**%20-%20Based%20on%20Autocator%0A%20%20%20-%20Implement%20IAllocator%20interface%0A%20%20%20-%20Handle%20end-user%20(Maker)%20signing%20authorization%0A%20%20%20-%20Add%20nonce%20management%20for%20compact%20claims%0A%20%20%20-%20Implement%20claim%20authorization%20logic%0A%20%20%20-%20Logic%20for%20calling%20this%20should%20be%20in%20ChainLinkCompact.t.sol%0A%0A%23%23%23%23%20Phase%202%3A%20Integration%20%26%20Testing%0A%0A5.%20**Compact%20Registration%20System**%0A%20%20%20-%20Implement%20EIP-712%20signature%20generation%20for%20makers%20(no%20mandate%20data%20for%20Phase%201)%0A%20%20%20-%20Create%20compact%20registration%20functions%0A%20%20%20-%20Add%20chain-specific%20resource%20lock%20scope%0A%20%20%20-%20Implement%20upfront%20token%20locking%20strategy%0A%0A6.%20**Testing%20Suite**%0A%20%20%20-%20Unit%20tests%20for%20each%20contract%0A%20%20%20-%20Integration%20tests%20for%20end-to-end%20flow%0A%20%20%20-%20Test%20ERC-6909%20flag%20functionality%0A%20%20%20-%20Test%20custom%20error%20handling%20scenarios%0A%0A%23%23%23%23%20Phase%203%3A%20Advanced%20Features%0A%0A7.%20**Gas%20Optimization**%0A%20%20%20-%20Optimize%20gas%20usage%20for%20ERC-6909%20integration%0A%20%20%20-%20Implement%20batch%20operations%20optimization%0A%20%20%20-%20Profile%20and%20optimize%20critical%20paths%0A%0A8.%20**Enhanced%20Features**%0A%20%20%20-%20Add%20mandate%20data%20structure%20for%20order%20conditions%0A%20%20%20-%20Implement%20multichain%20support%0A%20%20%20-%20Create%20custom%20Smallocator%20for%20smart%20contract%20calls%0A%20%20%20-%20Add%20emissary%20fallback%20mechanisms%0A%20%20%20-%20Implement%20enum%20for%20additional%20swap%20types%20beyond%20boolean%20flag%0A%0A%23%23%23%20Technical%20Architecture%0A%0A**Core%20Flow%3A**%0A%0A1.%20Maker%20deposits%20tokens%20into%20The%20Compact%20(creates%20ERC-6909%20resource%20lock)%0A2.%20Maker%20signs%20EIP-712%20compact%20agreement%20with%20arbiter%20(ChainLinkCompactInteraction)%0A3.%20Order%20is%20posted%20to%20LimitOrderProtocol%20with%20ERC-6909%20extension%0A4.%20Taker%20fills%20order%20through%20ChainLinkCompact.sol%0A5.%20ChainLinkCompactInteraction%20processes%20claim%3A%0A%20%20%20-%20Verifies%20resource%20lock%20availability%0A%20%20%20-%20Executes%20trade%20using%20ChainLinkCalculator%20logic%0A%20%20%20-%20Creates%20new%20resource%20lock%20for%20taker's%20output%20tokens%0A%20%20%20-%20Transfers%20tokens%20to%20treasurer%0A%20%20%20-%20Calls%20ResourceManager%20to%20lock%20funds%0A%0A**Key%20Interfaces%3A**%0A%0A-%20%60ITheCompact%60%20-%20For%20resource%20lock%20management%0A-%20%60IAllocator%60%20-%20For%20claim%20authorization%0A-%20%60IArbiter%60%20-%20For%20claim%20processing%0A-%20%60IEmissary%60%20-%20For%20fallback%20verification%0A%0A**Data%20Structures%3A**%0A%0A-%20%60Compact%60%20-%20EIP-712%20payload%20for%20single%20resource%20lock%0A-%20%60BatchCompact%60%20-%20EIP-712%20payload%20for%20multiple%20resource%20locks%0A-%20%60Mandate%60%20-%20Witness%20data%20for%20order%20conditions%0A-%20%60Claim%60%20-%20Claim%20payload%20for%20processing%0A%0A%23%23%23%20Future%20Test%20Enhancements%0A%0AFor%20ERC-6909%20integration%2C%20additional%20test%20categories%20will%20be%20needed%3A%0A%0A1.%20**ERC-6909%20Resource%20Lock%20Tests**%0A%20%20%20-%20Resource%20lock%20creation%20and%20validation%0A%20%20%20-%20Insufficient%20lock%20handling%0A%20%20%20-%20Lock%20expiration%20scenarios%0A%0A2.%20**Compact%20Integration%20Tests**%0A%20%20%20-%20EIP-712%20signature%20verification%0A%20%20%20-%20Compact%20agreement%20validation%0A%20%20%20-%20Arbiter%20claim%20processing%0A%0A3.%20**Resource%20Manager%20Tests**%0A%20%20%20-%20Lock%20management%20functionality%0A%20%20%20-%20Allocator%20integration%0A%20%20%20-%20Error%20handling%20for%20resource%20conflicts%0A%0A4.%20**End-to-End%20Flow%20Tests**%0A%20%20%20-%20Complete%20maker-to-taker%20flow%0A%20%20%20-%20Treasurer%20integration%0A%20%20%20-%20Cross-contract%20interaction%20validation%0A%0A%23%23%20NEAR%20FUSION%2B%20Smart%20Contract%20Development%0A%0A%23%23%23%20NEAR%20Smart%20Contract%20Architecture%0A%0A!%5BNEARArchitecture%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FHydB7D3Pxe.png)%0A%0A%23%23%23%20NEAR%20Limit%20Order%20Protocol%20Contracts%0A%0A!%5BNEARLimitOrder%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FHkg8QPnvee.png)%0A%0A%23%23%23%20NEAR%20Escrow%20Smart%20Contracts%0A%0A!%5BNEAR%20Escrow%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FS1tqDDhvgg.png)%0A%0A%23%23%23%20Overview%0A%0ANEAR%20Fusion%2B%20is%20a%20comprehensive%20DeFi%20protocol%20that%20migrates%201inch's%20Limit%20Order%20Protocol%20and%20Cross-Chain%20Swap%20functionality%20to%20the%20NEAR%20blockchain.%20This%20project%20implements%20advanced%20trading%20features%20including%20limit%20orders%2C%20cross-chain%20atomic%20swaps%2C%20and%20sophisticated%20escrow%20mechanisms.%0A%0A%23%23%23%20Architecture%0A%0AThe%20protocol%20consists%20of%20several%20interconnected%20smart%20contracts%20that%20work%20together%20to%20provide%20a%20complete%20DeFi%20trading%20experience%3A%0A%0A%23%23%23%23%20Core%20Components%0A%0A1.%20**Limit%20Order%20Protocol**%20-%20Handles%20limit%20order%20creation%2C%20execution%2C%20and%20management%0A2.%20**Cross-Chain%20Swap**%20-%20Enables%20atomic%20swaps%20across%20different%20blockchains%0A3.%20**Escrow%20System**%20-%20Manages%20secure%20fund%20escrow%20for%20cross-chain%20operations%0A4.%20**Fee%20Management**%20-%20Handles%20fee%20collection%20and%20distribution%0A5.%20**Merkle%20Validation**%20-%20Provides%20proof%20validation%20for%20complex%20order%20structures%0A%0A%23%23%23%23%20Contract%20Structure%0A%0A%60%60%60%0Asrc%2F%0A%E2%94%9C%E2%94%80%E2%94%80%20limit-order-protocol%2F%20%20%20%20%20%23%20Main%20limit%20order%20functionality%0A%E2%94%9C%E2%94%80%E2%94%80%20cross-chain-swap%2F%20%20%20%20%20%20%20%20%20%23%20Cross-chain%20atomic%20swap%20implementation%0A%E2%94%9C%E2%94%80%E2%94%80%20base-escrow-factory%2F%20%20%20%20%20%20%23%20Advanced%20escrow%20factory%20with%20Merkle%20validation%0A%E2%94%9C%E2%94%80%E2%94%80%20escrow-factory%2F%20%20%20%20%20%20%20%20%20%20%20%23%20Standard%20escrow%20factory%0A%E2%94%9C%E2%94%80%E2%94%80%20escrow-src%2F%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20Source%20chain%20escrow%20contract%0A%E2%94%9C%E2%94%80%E2%94%80%20escrow-dst%2F%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20Destination%20chain%20escrow%20contract%0A%E2%94%9C%E2%94%80%E2%94%80%20fee-taker%2F%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20Fee%20collection%20and%20management%0A%E2%94%94%E2%94%80%E2%94%80%20merkle-storage-invalidator%2F%20%23%20Merkle%20proof%20validation%0A%60%60%60%0A%0A%23%23%23%20Key%20Features%0A%0A-%20**Limit%20Orders**%3A%20Advanced%20limit%20order%20protocol%20with%20partial%20fills%20and%20multiple%20execution%20strategies%0A-%20**Cross-Chain%20Swaps**%3A%20Atomic%20swaps%20between%20different%20blockchains%20with%20time-locked%20escrows%0A-%20**Merkle%20Proofs**%3A%20Efficient%20validation%20for%20complex%20order%20structures%0A-%20**Fee%20Management**%3A%20Flexible%20fee%20collection%20and%20distribution%20mechanisms%0A-%20**Security**%3A%20Comprehensive%20validation%20and%20timelock%20mechanisms%0A%0A%23%23%23%20Documentation%20Sections%0A%0A-%20%5BArchitecture%20Overview%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.architecture.md)%0A-%20%5BContract%20Documentation%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.contracts%2F)%0A%20%20-%20%5BLimit%20Order%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.contracts%2Flimit-order-protocol.md)%0A%20%20-%20%5BCross-Chain%20Swap%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.contracts%2Fcross-chain-swap.md)%0A%20%20-%20%5BEscrow%20System%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.contracts%2Fescrow-system.md)%0A%20%20-%20%5BFee%20Taker%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.contracts%2Ffee-taker.md)%0A%20%20-%20%5BMerkle%20Storage%20Invalidator%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.contracts%2Fmerkle-storage-invalidator.md)%0A-%20%5BIntegration%20Guide%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.integration.md)%0A-%20%5BSecurity%20Considerations%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.security.md)%0A-%20%5BAPI%20Reference%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.api-reference.md)%0A-%20%5BDeployment%20Guide%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.deployment.md)%0A%0A%23%23%23%20Quick%20Start%0A%0A1.%20**Build%20Contracts**%3A%20%60cargo%20near%20build%60%0A2.%20**Run%20Tests**%3A%20%60cargo%20test%60%0A3.%20**Deploy**%3A%20Use%20the%20deployment%20scripts%20in%20%60deployment-scripts%2F%60%0A%0A%23%23%23%20Development%0A%0A-%20**Rust%20Version**%3A%20See%20%60rust-toolchain.toml%60%0A-%20**NEAR%20SDK**%3A%20v5.15.1%0A-%20**Testing**%3A%20Integration%20tests%20in%20%60integration-tests%2F%60%0A%0A%23%23%23%20Contributing%0A%0APlease%20refer%20to%20the%20main%20%5BREADME.md%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fblob%2Fmain%2FREADME.md)%20for%20development%20setup%20and%20contribution%20guidelines.%0A",lastUpdatedAt:1757298265e3},{lazy:()=>J(()=>import("./Unite-DRLZkPkE.js"),[]),path:"/proposals/Unite.html",type:"mdx",filePath:"proposals/Unite.mdx",content:"%23%20Jincubator%20Limit%20Order%20Protocol%3A%20Unite%20Defi%20(2025)%0A%0A%23%20Unite%20Defi%202025%20Jincubator%201inch%20Tycho%20NoLiquidity%20Swap%0A%0A%23%23%20Jincubator%20Unite%20Defi%20Overview%0A%0A%5BJincbuator%5D(https%3A%2F%2Fjincubator.com)%20is%20a%20research%20and%20development%20lab%20focusing%20on%20Solving%2C%20Arbitrage%20and%20Capital%20Efficient%0A%0A%23%23%20No%20Liquidity%20Solving%20Walkthrough%0A%0A%3Ciframe%0A%20%20src%3D%22https%3A%2F%2Fwww.loom.com%2Fembed%2Fc59e1a9eb2064d4a855cabab3941a514%22%0A%20%20frameborder%3D%220%22%0A%20%20allowfullscreen%0A%20%20allow%3D%22autoplay%3B%20encrypted-media%22%0A%20%20style%3D%7B%7B%0A%20%20%20%20width%3A%20%22100%25%22%2C%0A%20%20%20%20height%3A%20%22500px%22%2C%0A%20%20%20%20borderRadius%3A%20%2212px%22%2C%0A%20%20%7D%7D%0A%2F%3E%0A%0AThe%20following%20Actions%20are%20Taken%0A%0A1.%20Mary%20has%20one%20ETH%0A2.%20Chainlink%20Oracle%20has%201ETH%20%3D%202000DAI%0A3.%20Mary%20creates%20a%20an%20order%201ETH%20for%202000DAI%0A4.%20Tabatha%20using%20Tycho%20finds%20Uniswap%20V2%20will%20swap%201ETH%20for%202018DAI%0A5.%20Tabatha%20Takes%20the%20Order%0A6.%20Order%20Settles%0A%0A**Additional%20Notes**%0A%0A-%20%5C*This%20uses%20a%20modified%20version%20of%201inch%20Limit%20Order%20Protocol%20which%20allows%20TychoSwapExecutor%20to%20settle%20the%20Makers%20Funds%0A-%20%5C*%5C*Mary%20approves%201ETH%20to%20be%20used%20by%20Limit-Order-Protocol%20(and%20Tycho%20Swap%20Router)%0A-%20%5C*%5C*Mary%E2%80%99s%201ETH%20is%20used%20for%20the%20swap%20-%20No%20Liquidity%20is%20provided%20by%20Tabatha%20-%20Transaction%20reverts%20if%20%3C%202000%20DAI%20is%20returned%0A-%20%5C*%5C*%5C*Taking%20and%20Settling%20the%20order%20is%20an%20atomic%20transaction%20integrating%20TychoSwapExecutor.sol%20as%20a%20TakerInteraction%20in%20LimitOrderProtocol.sol%0A%0A%7C%20Action%20%7C%20Mary%20Maker%20%7C%20Limit%20Order%20Protocol%20%7C%20Tabatha%20Tycho%20Taker%20%7C%20Jincubator%20Protocol%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Tycho%20SimulationrderCalculator.sol%20integrates%20price%20oracles%20for%20creating%20spread%20orders%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%204%20%20%20%20%20%20%7C%201ETH%20%20%20%20%20%20%20%7C%20_1ETH%5C*_%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Tycho%20Indexing%20and%20Simulation%20(Off%20Chain%20Price%20Discovery)%20%20%20%20%20%7C%0A%7C%205%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%7C%202018DAI%5C*%5C*%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20TychoExecutor.sol%20executes%20the%20trade%20on%20UniswapV3%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20TychoRouter%20is%20called%20by%20TychoSwapRouter%20to%20execute%20the%20trade%20%7C%0A%7C%206%20%20%20%20%20%20%7C%20200DAI%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%2018DAI%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20LimitOrderProtocol.sol%20sends%20Mary%202000%20DAI%20from%20Tabatha%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20%20%20%20%20%20%20%20%7C%0A%0A%23%23%20Jincubator%20Limit%20Order%20Protocol%0A%0AThis%20protocol%20implements%20four%20key%20enhancements%20to%20the%20%5B1inch%20Limit%20Order%20Protocol%5D(https%3A%2F%2Fgithub.com%2F1inch%2Flimit-order-protocol)%3A%0A%0A1.%20**Enhanced%20Swap%20Execution**%3A%20%5BTychoSwapExecutor.sol%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fprotocol%2Ftree%2Fmain%2Fsrc%2FTychoSwapExecutor.sol)%20integrates%20%5BTycho%20Execution%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-execution)%20to%20enable%20complex%20swaps%20across%20multiple%20DEXs%20without%20upfront%20liquidity%0A2.%20**Stop%20Loss%20and%20Profit%20Taking%20Orders**%3A%20%5BOracleIntegration.sol%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fprotocol%2Ftree%2Fmain%2Fsrc%2FOracleCalculator.sol)%20Oracle-based%20(starting%20with%20chainlink)%20pricing%20calculator%20for%20advanced%20order%20strategies%0A3.%20**Treasury%20Management**%3A%20%5BRebalancerInteraction.sol%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fprotocol%2Ftree%2Fmain%2Fsrc%2FRebalancerInteraction.sol)%20enables%20makers%20and%20takers%20to%20immediately%20balance%20their%20funds%20to%20a%20treasury%20(and%20moving%20forward%20more%20advanced%20asset%20management%20strategies).%0A4.%20**Resource%20Management**%3A%20%5BCompactInteraction.sol%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fprotocol%2Ftree%2Fmain%2Fsrc%2FCompactInteraction.sol)%20integrates%20the%20%5B1inch%20Limit%20Order%20Protocol%5D(https%3A%2F%2Fgithub.com%2F1inch%2Flimit-order-protocol)%20with%20%5BThe%20Compact%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fthe-compact)%20for%20%5BERC-6909%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-6909)%20support%20and%20moving%20forward%20integration%20with%20additional%20cross%20chain%20intent%20standards%20such%20as%20%5BERC-7683%5D(https%3A%2F%2Fwww.erc7683.org%2F)%20leveraging%20%5BMandates%20and%20Solver%20Payloads%5D(https%3A%2F%2Fwww.jincubator.com%2Fresearch%2Fsolving%2Fprotocol)%20and%20%5BAdvanced%20Resource%20Locking%5D(https%3A%2F%2Fwww.jincubator.com%2Fresearch%2Fsolving%2Fresources).%0A%0A%23%23%23%20Enhanced%20Swap%20Execution%0A%0AWe%20integrate%20with%20Tycho's%20indexing%2C%20simulation%20and%20execution%20via%20a%20TcyhoSwapExecutor%20which%20allows%20Solvers%20to%20provide%20a%20payload%20with%20complex%20routing%20solutions%20across%20multiple%20liquidity%20protocols.%20The%20design%20for%20United%20Defi%20allows%20the%20taker%20to%20submit%20a%20Payload%20with%20Call%20Data%20which%20will%20be%20executed%20as%20part%20of%20the%20TakerInteraction%20flow.%20This%20allows%2C%20if%20permitted%20by%20the%20maker%2C%20the%20solver%20to%20use%20the%20takers%20tokens%20and%20execute%20the%20trade%20without%20providing%20any%20upfront%20capital.%0A%0A%23%23%23%20Stop%20Loss%20and%20Profit%20Taking%20Orders%0A%0AThe%20OracleCalculator%20extension%20is%20a%20powerful%20addition%20to%20the%201inch%20Limit%20Order%20Protocol%20that%20enables%20dynamic%20pricing%20based%20on%20Chainlink%20oracle%20data.%20This%20extension%20allows%20orders%20to%20be%20filled%20at%20prices%20that%20are%20calculated%20on-chain%20using%20real-time%20oracle%20feeds%2C%20making%20it%20possible%20to%20create%20orders%20that%20automatically%20adjust%20to%20market%20conditions.%0A%0A%23%23%23%20Treasury%20Management%0A%0AImplemented%20as%20an%20IPostInteraction%20the%20RebalancerInteraction%20contract%20allows%20both%20makers%20and%20takers%20to%20instantly%20move%20their%20funds%20to%20their%20Treasury%20of%20choice.%0A%0A%23%23%23%20Resource%20Management%0A%0AWe%20Implemented%20integration%20with%20an%20ERC-6909%20compliant%20locking%20mechanism%20enabling%20advanced%20resource%20management%20capabilities%20and%20laying%20the%20foundation%20to%20extend%20the%201inch%20Limit%20Order%20Protocol%20to%20open%20standards%20such%20as%20ERC-7683.%0A%0A%23%23%20NEAR%20FUSION%2B%20Smart%20Contract%20Development%0A%0ANEAR%20Fusion%2B%20is%20a%20comprehensive%20DeFi%20protocol%20that%20migrates%201inch's%20proven%20Limit%20Order%20Protocol%20and%20Cross-Chain%20Swap%20functionality%20to%20the%20NEAR%20blockchain.%20The%20system%20provides%20two%20primary%20capabilities%3A%20advanced%20limit%20order%20trading%20with%20partial%20fills%20and%20extensible%20features%2C%20and%20atomic%20cross-chain%20swaps%20secured%20by%20time-locked%20escrow%20contracts.%0A%0A%23%23%20Implementation%20Limit%20Order%20Protocol%0A%0A%23%23%23%20Core%20Components%0A%0A-%20**Compact**%3A%20ERC-6909%20enabled%20Chainlink%20calculator%20for%20price%20discovery%0A-%20**ResourceManager**%3A%20Manages%20resource%20locks%20for%20ERC-6909%20integration%0A-%20**TychoSwapExecutor**%3A%20Executes%20complex%20swaps%20using%20Tycho%20Execution%0A-%20**CompactInteraction**%3A%20Post-interaction%20handler%20for%20resource%20allocation%0A-%20**RebalancerInteraction**%3A%20Treasury%20management%20and%20portfolio%20rebalancing%0A-%20**OracleCalculator**%3A%20Price%20oracle%20integration%20for%20advanced%20order%20strategies%0A%0A%23%23%23%20Key%20Features%0A%0A-%20**Resource%20Locking**%3A%20ERC-6909%20compliant%20resource%20management%0A-%20**Multi-DEX%20Execution**%3A%20Cross-platform%20swap%20execution%20via%20Tycho%0A-%20**Advanced%20Order%20Types**%3A%20Stop-loss%20and%20take-profit%20orders%0A-%20**Treasury%20Management**%3A%20Automated%20portfolio%20rebalancing%0A-%20**Oracle%20Integration**%3A%20Chainlink%20price%20feeds%20for%20accurate%20pricing%0A%0A%23%23%23%20Key%20Technology%20Enhancements%0A%0A-%20Solidity%20based%20tests%20including%20a%20migration%20from%20%60OrderUtils.js%60%20to%20solidity%20based%20%5BOrderUtils%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fprotocol%2Ftree%2Fmain%2Ftest%2Futils%2ForderUtils%2FREADME_OrderUtils.md)%0A-%20Solidity%20%60%5E0.8.30%60%20compatibility%20provided%20by%20creating%20an%20interface%20%5BILimitOrderProtocol.sol%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fprotocol%2Ftree%2Fmain%2Fsrc%2Finterfaces%2F1inch%2FILimitOrderProtocol.sol)%20and%20introducing%20%5BLimitOrderProtocolManager%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fprotocol%2Ftree%2Fmain%2Ftest%2Fhelpers%2FLimitOrderProtocolManager.sol)%20for%20testing.%0A%0A%23%23%23%20Architecture%0A%0A!%5BArchitecture%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FByIAaIhwel.png)%0A%0A%23%23%23%20Interactions%0A%0A!%5BInteractions%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FB1XQRU3wex.png)%0A%0A%23%23%20Enhanced%20Swap%20Execution%0A%0A%23%23%23%20Tycho%20Execution%20Flow%0A%0A!%5BTychoFlow%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FHyRf1vnwgl.png)%0A%0A%23%23%23%20Tycho%20Components%0A%0A!%5BTychoComponents%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FHkytJP3Plg.png)%0A%0A%23%23%23%20Actors%0A%0A1.%20Maker%0A%20%20%201.%20Creates%20orders%20specifying%20the%20spread%20price%20they%20are%20looking%20for%20(currently%20using%20chainlink%20Oracle)%0A2.%20Solver%20Service%0A%20%20%201.%20Monitors%201inch%20Intents%20created%0A%20%20%202.%20Monitors%20Liquidity%20Positions%20on%20Chain%20using%20Tycho-indexer%0A%20%20%203.%20Simulates%20Solves%20for%20Orders%20(to%20see%20if%20profitable)%0A%20%20%204.%20Calls%20Resolver%20Contract%20to%20execute%20the%20Swap%0A%20%20%20%20%20%201.%20Solver%20Payload%20-%20encoded%20to%20call%20TychoResolver%20a%20modified%20version%20of%20Tycho%20Execution%0A%20%20%205.%20Calls%20Order%20Fill%20passing%0A%20%20%20%20%20%201.%20target%3A%20TychoResolver%20address%0A%20%20%20%20%20%202.%20interaction%3A%20SolverPayload%0A3.%20Resolver%20Contract%20(modified%20version%20combining%20ResolverCrossChain%20and%20Tycho%20Dispatcher)%0A%20%20%201.%20Called%20by%20LimitOrderProtocol%20as%20part%20of%20Order.fill%0A%20%20%202.%20Executes%20swap%20using%20Makers%20Tokens%0A%20%20%203.%20Provides%20TakerToken%20to%20Relayer%20to%20pass%20back%20to%20Taker%0A%20%20%204.%20Transfers%20excess%20maker%20(or%20taker)%20tokens%20to%20Treasury%0A%0A%23%23%23%20Implementation%20Approach%0A%0A%20%20%20%201.%20TychoFillPredicate.sol%20(Predicate)%3A%20copied%20from%20OracleCalculator.sol%0A%20%20%20%202.%20TychoFillInteraction.sol%20%3A%20copied%20from%20RebalancerInteraction.sol%0A%20%20%20%203.%20TychoResolver.sol%3A%20Copied%20from%20ResolverCrossChain.sol%20and%20Dispatcher.sol%0A%20%20%20%204.%20Tests%20copied%20from%20RebalancerInteraction.t.sol%20and%20enhanced%20with%0A%20%20%20%20%20%20%201.%20Creation%20of%20Swap%20(MakerTokens%20to%20TakerTokens)%20similar%20to%0A%20%20%20%20%20%20%202.%20Call%20of%20Fill%20Contract%20passing%0A%20%20%20%20%20%20%20%20%20%201.%20target%3A%20TychoResolver%20address%0A%20%20%20%20%20%20%20%20%20%202.%20interaction%3A%20SolverPayload%0A%20%20%20%20%20%20%203.%20Checking%20of%20Treasurer%20Balances%20after%20swap%20is%20executed%0A%0A%23%23%23%20Flow%0A%0A%23%23%23%23%20Interactions%0A%0AInteractions%20are%20callbacks%20that%20enable%20the%20execution%20of%20arbitrary%20code%2C%20which%20is%20provided%20by%20the%20maker%E2%80%99s%20order%20or%20taker%E2%80%99s%20fill%20execution.%0A%0AThe%20order%20execution%20logic%20includes%20several%20steps%20that%20also%20involve%20interaction%20calls%3A%0A%0A1.%20Validate%20the%20order%0A2.%20**Call%20the%20maker's%20pre-interaction**%0A3.%20Transfer%20the%20maker's%20asset%20to%20the%20taker%0A4.%20**Call%20the%20taker's%20interaction**%0A5.%20Transfer%20the%20taker's%20asset%20to%20the%20maker%0A6.%20**Call%20the%20maker's%20post-interaction**%0A7.%20Emit%20the%20OrderFilled%20event%0A%0ACalls%20are%20executed%20in%20the%20context%20of%20the%20limit%20order%20protocol.%20The%20target%20contract%20should%20implement%20the%20%60IPreInteraction%60%20or%20%60IPostInteraction%60%20interfaces%20for%20the%20maker's%20pre-%20and%20post-interactions%20and%20the%20%60ITakerInteraction%60%20interface%20for%20the%20taker's%20interaction.%20These%20interfaces%20declare%20the%20single%20callback%20function%20for%20maker%20and%20taker%20interactions%2C%20respectively.%0A%0AHere%20is%20how%20the%20maker%E2%80%99s%20pre-%20%26%20post-%20interactions%20and%20the%20taker%E2%80%99s%20interaction%20are%20defined%20in%20the%20interfaces%3A%0A%0A%60%60%60solidity%0A%2F%2FMaker's%20pre-interaction%0Afunction%20preInteraction(%0A%20%20%20%20%20%20%20%20IOrderMixin.Order%20calldata%20order%2C%0A%20%20%20%20%20%20%20%20bytes32%20orderHash%2C%0A%20%20%20%20%20%20%20%20address%20taker%2C%0A%20%20%20%20%20%20%20%20uint256%20makingAmount%2C%0A%20%20%20%20%20%20%20%20uint256%20takingAmount%2C%0A%20%20%20%20%20%20%20%20uint256%20remainingMakingAmount%2C%0A%20%20%20%20%20%20%20%20bytes%20calldata%20extraData%0A%20%20%20%20)%20external%3B%0A%0A%2F%2FMaker's%20post-interaction%0Afunction%20postInteraction(%0A%20%20%20%20%20%20%20%20IOrderMixin.Order%20calldata%20order%2C%0A%20%20%20%20%20%20%20%20bytes32%20orderHash%2C%0A%20%20%20%20%20%20%20%20address%20taker%2C%0A%20%20%20%20%20%20%20%20uint256%20makingAmount%2C%0A%20%20%20%20%20%20%20%20uint256%20takingAmount%2C%0A%20%20%20%20%20%20%20%20uint256%20remainingMakingAmount%2C%0A%20%20%20%20%20%20%20%20bytes%20calldata%20extraData%0A%20%20%20%20)%20external%3B%0A%0A%2F%2FTaker's%20interaction%0Afunction%20takerInteraction(%0A%20%20%20%20%20%20%20%20IOrderMixin.Order%20calldata%20order%2C%0A%20%20%20%20%20%20%20%20bytes32%20orderHash%2C%0A%20%20%20%20%20%20%20%20address%20taker%2C%0A%20%20%20%20%20%20%20%20uint256%20makingAmount%2C%0A%20%20%20%20%20%20%20%20uint256%20takingAmount%2C%0A%20%20%20%20%20%20%20%20uint256%20remainingMakingAmount%2C%0A%20%20%20%20%20%20%20%20bytes%20calldata%20extraData%0A%20%20%20%20)%20external%20returns(uint256%20offeredTakingAmount)%3B%0A%60%60%60%0A%0A-%20Resolver%20Contract%20executes%20calls%20to%20Tycho%20Dispatcher%20or%20Router%0A-%20Three%20functions%0A%20%20-%20preInteraction%3A%20used%20in%20OracleCalculator%20(to%20ensure%20price%20before%20swap)%0A%20%20-%20takerInteraction%20used%20in%20SwapExecutor%20to%20Execute%20Swap%20by%20Taker%0A%20%20-%20postInteraction%20used%20in%20Rebalancer%20to%20Send%20Funds%20to%20Treasury%0A%0A%23%23%23%20Design%20Questions%0A%0A1.%20**Interface%20Compatibility**%3A%0A%20%20%20-%20How%20will%20the%20TychoResolver%20interface%20be%20defined%20to%20ensure%20compatibility%20with%20the%20LimitOrderProtocol%20bytecode%20deployment%20approach%3F%0A%20%20%20-%20Should%20we%20create%20a%20custom%20interface%20for%20TychoResolver%20or%20use%20the%20concrete%20type%20like%20the%20working%20project%3F%0A%0A2.%20**Predicate%20Logic**%3A%0A%20%20%20-%20What%20predicate%20logic%20will%20TychoFill.sol%20use%3F%20Will%20it%20be%20similar%20to%20OracleCalculator.sol%20with%20price%20comparisons%3F%0A%20%20%20-%20How%20will%20the%20predicate%20determine%20when%20a%20solve%20is%20profitable%20vs.%20when%20it%20should%20execute%3F%0A%0A3.%20**Solver%20Payload%20Structure**%3A%0A%20%20%20-%20What%20data%20structure%20will%20the%20SolverPayload%20contain%3F%20Will%20it%20include%20target%20addresses%2C%20amounts%2C%20and%20execution%20parameters%3F%0A%20%20%20-%20How%20will%20the%20payload%20be%20encoded%2Fdecoded%20between%20the%20Solver%20Service%20and%20TychoResolver%3F%0A%0A4.%20**Treasury%20Integration**%3A%0A%20%20%20-%20How%20will%20excess%20tokens%20be%20calculated%20and%20transferred%20to%20Treasury%3F%0A%20%20%20-%20What%20mechanism%20will%20prevent%20MEV%20attacks%20on%20the%20treasury%20transfers%3F%0A%0A5.%20**Error%20Handling**%3A%0A%20%20%20-%20How%20will%20failed%20solves%20be%20handled%3F%20Will%20orders%20be%20cancelled%20or%20retried%3F%0A%20%20%20-%20What%20happens%20if%20the%20TychoResolver%20execution%20fails%20during%20the%20order%20fill%3F%0A%0A6.%20**Gas%20Optimization**%3A%0A%20%20%20-%20How%20will%20the%20solver%20service%20optimize%20gas%20costs%20across%20multiple%20orders%3F%0A%20%20%20-%20Will%20batch%20processing%20be%20implemented%20for%20multiple%20orders%3F%0A%0A7.%20**Oracle%20Integration**%3A%0A%20%20%20-%20Will%20TychoFill%20use%20the%20same%20Chainlink%20oracle%20approach%20as%20OracleCalculator%20%3F%0A%20%20%20-%20How%20will%20price%20feeds%20be%20validated%20and%20updated%3F%0A%0A8.%20**Cross-Chain%20Considerations**%3A%0A%20%20%20-%20How%20will%20the%20ResolverCrossChain%20functionality%20be%20integrated%20with%20Tycho%20Dispatcher%3F%0A%20%20%20-%20What%20bridge%20mechanisms%20will%20be%20used%20for%20cross-chain%20swaps%3F%0A%0A%23%23%23%20Implementation%20Plan%0A%0A1.%20**Phase%201%3A%20Core%20Contract%20Development**%0A%20%20%20-%20Create%20%60TychoFill.sol%60%20based%20on%20%60OracleCalculator.sol%60%0A%20%20%20%20%20-%20Implement%20predicate%20logic%20for%20profitable%20solve%20detection%0A%20%20%20%20%20-%20Add%20Tycho-specific%20price%20calculation%20methods%0A%20%20%20%20%20-%20Ensure%20interface%20compatibility%20with%20LimitOrderProtocol%0A%0A%20%20%20-%20Create%20%60TychoFillInteraction.sol%60%20based%20on%20%60RebalancerInteraction.sol%60%0A%20%20%20%20%20-%20Implement%20post-interaction%20logic%20for%20treasury%20transfers%0A%20%20%20%20%20-%20Add%20balance%20validation%20and%20excess%20token%20calculation%0A%20%20%20%20%20-%20Integrate%20with%20TychoResolver%20for%20swap%20execution%0A%0A2.%20**Phase%202%3A%20Resolver%20Contract%20Development**%0A%20%20%20-%20Create%20%60TychoResolver.sol%60%20combining%20ResolverCrossChain%20and%20Dispatcher%20functionality%0A%20%20%20%20%20-%20Implement%20swap%20execution%20using%20maker%20tokens%0A%20%20%20%20%20-%20Add%20taker%20token%20provision%20for%20relayer%0A%20%20%20%20%20-%20Integrate%20treasury%20transfer%20logic%0A%20%20%20%20%20-%20Ensure%20proper%20error%20handling%20and%20revert%20conditions%0A%0A3.%20**Phase%203%3A%20Testing%20Framework**%0A%20%20%20-%20Create%20comprehensive%20test%20suite%20based%20on%20%60RebalancerInteraction.t.sol%60%0A%20%20%20%20%20-%20Test%20order%20creation%20with%20Tycho-specific%20predicates%0A%20%20%20%20%20-%20Test%20solver%20payload%20encoding%2Fdecoding%0A%20%20%20%20%20-%20Test%20treasury%20balance%20validation%0A%20%20%20%20%20-%20Test%20cross-chain%20swap%20scenarios%0A%20%20%20%20%20-%20Test%20error%20conditions%20and%20edge%20cases%0A%0A4.%20**Phase%204%3A%20Integration%20Testing**%0A%20%20%20-%20Test%20end-to-end%20flow%20from%20order%20creation%20to%20execution%0A%20%20%20-%20Validate%20predicate%20execution%20with%20bytecode%20deployment%0A%20%20%20-%20Test%20solver%20service%20integration%20with%20Tycho-indexer%0A%20%20%20-%20Verify%20treasury%20transfers%20and%20balance%20calculations%0A%0A5.%20**Phase%205%3A%20Optimization%20and%20Security**%0A%20%20%20-%20Implement%20gas%20optimization%20strategies%0A%20%20%20-%20Add%20comprehensive%20error%20handling%0A%20%20%20-%20Implement%20MEV%20protection%20mechanisms%0A%20%20%20-%20Add%20monitoring%20and%20logging%20capabilities%0A%0A6.%20**Phase%206%3A%20Deployment%20and%20Monitoring**%0A%20%20%20-%20Deploy%20contracts%20with%20proper%20bytecode%20generation%0A%20%20%20-%20Set%20up%20monitoring%20for%20solver%20service%0A%20%20%20-%20Implement%20alerting%20for%20failed%20solves%0A%20%20%20-%20Add%20analytics%20for%20treasury%20performance%0A%0A%23%23%20Stop%20Loss%20and%20Profit%20Taking%20Orders%0A%0A%23%23%23%20Oracle%20Example%20Order%0A%0A!%5BOracleExampleOrder%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FByKclv3Del.png)%0A%0A%23%23%23%20Oracle%20Order%20Integration%0A%0A!%5BOracleIntegration%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2Fry6slPnvxg.png)%0A%0A%23%23%23%20Overview%0A%0AThe%20OracleCalculator%20extension%20is%20a%20powerful%20addition%20to%20the%201inch%20Limit%20Order%20Protocol%20that%20enables%20dynamic%20pricing%20based%20on%20Chainlink%20oracle%20data.%20This%20extension%20allows%20orders%20to%20be%20filled%20at%20prices%20that%20are%20calculated%20on-chain%20using%20real-time%20oracle%20feeds%2C%20making%20it%20possible%20to%20create%20orders%20that%20automatically%20adjust%20to%20market%20conditions.%0A%0A%23%23%23%201.%20What%20the%20OracleCalculator%20Extension%20Does%0A%0AThe%20OracleCalculator%20extension%20serves%20as%20an%20%60IAmountGetter%60%20implementation%20that%3A%0A%0A-%20**Calculates%20dynamic%20exchange%20rates**%20using%20Chainlink%20oracle%20data%0A-%20**Supports%20both%20single%20and%20double%20oracle%20pricing**%20for%20different%20token%20pairs%0A-%20**Applies%20configurable%20spreads**%20to%20provide%20maker%2Ftaker%20incentives%0A-%20**Handles%20inverse%20pricing**%20for%20tokens%20quoted%20in%20different%20base%20currencies%0A-%20**Validates%20oracle%20freshness**%20to%20ensure%20price%20data%20is%20current%20(within%204%20hours)%0A-%20**Integrates%20with%20predicates**%20for%20conditional%20order%20execution%0A%0A%23%23%23%23%20Key%20Features%3A%0A%0A1.%20**Single%20Oracle%20Pricing**%3A%20Uses%20one%20oracle%20to%20price%20a%20token%20relative%20to%20ETH%20or%20USD%0A2.%20**Double%20Oracle%20Pricing**%3A%20Uses%20two%20oracles%20to%20price%20custom%20token%20pairs%20(e.g.%2C%20INCH%2FDAI)%0A3.%20**Spread%20Application**%3A%20Applies%20maker%20and%20taker%20spreads%20to%20create%20profitable%20order%20books%0A4.%20**Inverse%20Flag%20Support**%3A%20Handles%20cases%20where%20oracle%20prices%20need%20to%20be%20inverted%0A5.%20**Oracle%20Freshness%20Check**%3A%20Ensures%20oracle%20data%20is%20not%20stale%20(within%204%20hours%20TTL)%0A%0A%23%23%23%202.%20Types%20of%20Orders%20That%20Can%20Be%20Created%0A%0A%23%23%23%23%20A.%20Single%20Oracle%20Orders%0A%0AOrders%20that%20use%20one%20Chainlink%20oracle%20to%20price%20a%20token%20relative%20to%20ETH%20or%20USD%3A%0A%0A-%20**ETH%20%E2%86%92%20DAI**%3A%20Using%20DAI%2FETH%20oracle%0A-%20**DAI%20%E2%86%92%20ETH**%3A%20Using%20DAI%2FETH%20oracle%20with%20inverse%20flag%0A-%20**WETH%20%E2%86%92%20USDC**%3A%20Using%20USDC%2FETH%20oracle%0A-%20**USDC%20%E2%86%92%20WETH**%3A%20Using%20USDC%2FETH%20oracle%20with%20inverse%20flag%0A%0A%23%23%23%23%20B.%20Double%20Oracle%20Orders%0A%0AOrders%20that%20use%20two%20oracles%20to%20price%20custom%20token%20pairs%3A%0A%0A-%20**INCH%20%E2%86%92%20DAI**%3A%20Using%20INCH%2FETH%20and%20DAI%2FETH%20oracles%0A-%20**DAI%20%E2%86%92%20INCH**%3A%20Using%20DAI%2FETH%20and%20INCH%2FETH%20oracles%0A-%20**Custom%20Token%20Pairs**%3A%20Any%20combination%20of%20tokens%20with%20available%20oracles%0A%0A%23%23%23%23%20C.%20Conditional%20Orders%20(Predicates)%0A%0AOrders%20that%20only%20execute%20under%20specific%20oracle%20conditions%3A%0A%0A-%20**Stop-Loss%20Orders**%3A%20Execute%20only%20when%20price%20falls%20below%20threshold%0A-%20**Take-Profit%20Orders**%3A%20Execute%20only%20when%20price%20rises%20above%20threshold%0A-%20**Range%20Orders**%3A%20Execute%20only%20within%20specific%20price%20ranges%0A%0A%23%23%23%203.%20Fields%20Passed%20to%20the%20Extension%20and%20How%20They%20Are%20Populated%0A%0A%23%23%23%23%20Extension%20Data%20Structure%0A%0AThe%20extension%20data%20is%20passed%20as%20%60bytes%20calldata%20extraData%60%20to%20the%20%60getMakingAmount%60%20and%20%60getTakingAmount%60%20functions%3A%0A%0A%60%60%60solidity%0Afunction%20getMakingAmount(%0A%20%20%20%20IOrderMixin.Order%20calldata%20order%2C%0A%20%20%20%20bytes%20calldata%20extension%2C%0A%20%20%20%20bytes32%20orderHash%2C%0A%20%20%20%20address%20taker%2C%0A%20%20%20%20uint256%20takingAmount%2C%0A%20%20%20%20uint256%20remainingMakingAmount%2C%0A%20%20%20%20bytes%20calldata%20extraData%20%20%2F%2F%20%E2%86%90%20Extension%20data%20here%0A)%20external%20view%20returns%20(uint256)%0A%60%60%60%0A%0A%23%23%23%23%20Single%20Oracle%20Data%20Format%0A%0AFor%20single%20oracle%20pricing%2C%20the%20%60extraData%60%20contains%3A%0A%0A%60%60%60%0A%5B1%20byte%20flags%5D%5B20%20bytes%20oracle%20address%5D%5B32%20bytes%20spread%5D%0A%60%60%60%0A%0A**Flags%20Byte%3A**%0A%0A-%20Bit%207%20(0x80)%3A%20Inverse%20flag%20-%20if%20set%2C%20invert%20the%20oracle%20price%0A-%20Bit%206%20(0x40)%3A%20Double%20price%20flag%20-%20if%20set%2C%20use%20double%20oracle%20mode%0A-%20Bits%200-5%3A%20Reserved%0A%0A**Example%3A**%0A%0A%60%60%60solidity%0A%2F%2F%20DAI%2FETH%20oracle%20at%200x1234...%20with%200.99%20spread%2C%20no%20inverse%0Abytes%20memory%20data%20%3D%20abi.encodePacked(%0A%20%20%20%20bytes1(0x00)%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20flags%3A%20no%20inverse%2C%20no%20double%20price%0A%20%20%20%20address(daiOracle)%2C%20%20%20%20%20%20%2F%2F%20oracle%20address%0A%20%20%20%20uint256(990000000)%20%20%20%20%20%20%20%2F%2F%20spread%3A%200.99%20(990000000%20%2F%201e9)%0A)%3B%0A%60%60%60%0A%0A%23%23%23%23%20Double%20Oracle%20Data%20Format%0A%0AFor%20double%20oracle%20pricing%2C%20the%20%60extraData%60%20contains%3A%0A%0A%60%60%60%0A%5B1%20byte%20flags%5D%5B20%20bytes%20oracle1%5D%5B20%20bytes%20oracle2%5D%5B32%20bytes%20decimalsScale%5D%5B32%20bytes%20spread%5D%0A%60%60%60%0A%0A**Example%3A**%0A%0A%60%60%60solidity%0A%2F%2F%20INCH%2FDAI%20pricing%20using%20INCH%2FETH%20and%20DAI%2FETH%20oracles%0Abytes%20memory%20data%20%3D%20abi.encodePacked(%0A%20%20%20%20bytes1(0x40)%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20flags%3A%20double%20price%20mode%0A%20%20%20%20address(inchOracle)%2C%20%20%20%20%20%2F%2F%20oracle1%3A%20INCH%2FETH%0A%20%20%20%20address(daiOracle)%2C%20%20%20%20%20%20%2F%2F%20oracle2%3A%20DAI%2FETH%0A%20%20%20%20int256(0)%2C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20decimalsScale%3A%20no%20adjustment%0A%20%20%20%20uint256(1010000000)%20%20%20%20%20%2F%2F%20spread%3A%201.01%20(1010000000%20%2F%201e9)%0A)%3B%0A%60%60%60%0A%0A%23%23%23%23%20How%20Fields%20Are%20Populated%0A%0A1.%20**Oracle%20Addresses**%3A%20Retrieved%20from%20Chainlink's%20oracle%20registry%20or%20deployment%0A2.%20**Spreads**%3A%20Calculated%20based%20on%20desired%20maker%2Ftaker%20incentives%20(typically%200.99%20for%20maker%2C%201.01%20for%20taker)%0A3.%20**Flags**%3A%20Set%20based%20on%20pricing%20requirements%20(inverse%20needed%2C%20double%20oracle%20needed)%0A4.%20**Decimals%20Scale**%3A%20Used%20to%20adjust%20for%20different%20oracle%20decimal%20precisions%0A%0A%23%23%23%204.%20Test%20Case%20Walkthrough%0A%0A%23%23%23%23%20Test%20Case%201%3A%20ETH%20%E2%86%92%20DAI%20Chainlink%20Order%0A%0A**Scenario**%3A%20Maker%20wants%20to%20sell%201%20ETH%20for%20DAI%20at%20oracle%20price%20with%20spreads%0A%0A**Order%20Details%3A**%0A%0A-%20Maker%3A%20makerAddr%0A-%20Taker%3A%20takerAddr%0A-%20Maker%20Asset%3A%20WETH%20(1%20ether)%0A-%20Taker%20Asset%3A%20DAI%20(4000%20ether)%0A-%20Oracle%3A%20DAI%2FETH%20at%200.00025%20ETH%20per%20DAI%20(1%20ETH%20%3D%204000%20DAI)%0A%0A**Extension%20Data%3A**%0A%0A%60%60%60solidity%0A%2F%2F%20Making%20amount%20data%20(maker%20spread%3A%200.99)%0Abytes%20memory%20makingAmountData%20%3D%20abi.encodePacked(%0A%20%20%20%20chainlinkCalcAddress%2C%20%20%20%20%2F%2F%20Calculator%20address%0A%20%20%20%20bytes1(0x00)%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20No%20inverse%20flag%0A%20%20%20%20oracleAddress%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20DAI%20oracle%0A%20%20%20%20uint256(990000000)%20%20%20%20%20%20%20%2F%2F%200.99%20spread%0A)%3B%0A%0A%2F%2F%20Taking%20amount%20data%20(taker%20spread%3A%201.01)%0Abytes%20memory%20takingAmountData%20%3D%20abi.encodePacked(%0A%20%20%20%20chainlinkCalcAddress%2C%20%20%20%20%2F%2F%20Calculator%20address%0A%20%20%20%20bytes1(0x80)%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Inverse%20flag%20set%0A%20%20%20%20oracleAddress%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20DAI%20oracle%0A%20%20%20%20uint256(1010000000)%20%20%20%20%20%2F%2F%201.01%20spread%0A)%3B%0A%60%60%60%0A%0A**Execution%20Flow%3A**%0A%0A1.%20Taker%20calls%20%60fillOrderArgs%60%20with%204000%20DAI%0A2.%20Protocol%20calls%20%60getTakingAmount%60%20with%204000%20DAI%0A3.%20Calculator%20applies%201.01%20spread%3A%204000%20%5C*%201.01%20%3D%204040%20DAI%0A4.%20Protocol%20calls%20%60getMakingAmount%60%20with%204040%20DAI%0A5.%20Calculator%20applies%200.99%20spread%3A%204040%20%5C*%200.99%20%2F%204000%20%3D%200.99%20ETH%0A6.%20Order%20executes%3A%20taker%20receives%200.99%20ETH%2C%20maker%20receives%204000%20DAI%0A%0A**Result**%3A%20Taker%20pays%204000%20DAI%2C%20receives%200.99%20ETH%20(effective%20rate%3A%201%20ETH%20%3D%204040.4%20DAI)%0A%0A%23%23%23%23%20Test%20Case%202%3A%20DAI%20%E2%86%92%20ETH%20Chainlink%20Order%0A%0A**Scenario**%3A%20Maker%20wants%20to%20sell%204000%20DAI%20for%20ETH%20at%20oracle%20price%0A%0A**Order%20Details%3A**%0A%0A-%20Maker%3A%20makerAddr%0A-%20Taker%3A%20takerAddr%0A-%20Maker%20Asset%3A%20DAI%20(4000%20ether)%0A-%20Taker%20Asset%3A%20WETH%20(1%20ether)%0A-%20Oracle%3A%20DAI%2FETH%20at%200.00025%20ETH%20per%20DAI%0A%0A**Extension%20Data%3A**%0A%0A%60%60%60solidity%0A%2F%2F%20Making%20amount%20data%20(inverse%20%2B%20maker%20spread)%0Abytes%20memory%20makingAmountData%20%3D%20abi.encodePacked(%0A%20%20%20%20chainlinkCalcAddress%2C%0A%20%20%20%20bytes1(0x80)%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Inverse%20flag%0A%20%20%20%20oracleAddress%2C%0A%20%20%20%20uint256(990000000)%20%20%20%20%20%20%20%2F%2F%200.99%20spread%0A)%3B%0A%0A%2F%2F%20Taking%20amount%20data%20(no%20inverse%20%2B%20taker%20spread)%0Abytes%20memory%20takingAmountData%20%3D%20abi.encodePacked(%0A%20%20%20%20chainlinkCalcAddress%2C%0A%20%20%20%20bytes1(0x00)%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20No%20inverse%20flag%0A%20%20%20%20oracleAddress%2C%0A%20%20%20%20uint256(1010000000)%20%20%20%20%20%2F%2F%201.01%20spread%0A)%3B%0A%60%60%60%0A%0A**Execution%20Flow%3A**%0A%0A1.%20Taker%20calls%20with%20%60makingAmount%60%20flag%20set%20to%20true%0A2.%20Protocol%20calls%20%60getMakingAmount%60%20with%204000%20DAI%0A3.%20Calculator%20applies%20inverse%20%2B%200.99%20spread%3A%204000%20%5C*%200.99%20%2F%204000%20%3D%200.99%20ETH%0A4.%20Protocol%20calls%20%60getTakingAmount%60%20with%200.99%20ETH%0A5.%20Calculator%20applies%201.01%20spread%3A%200.99%20%5C*%201.01%20%3D%201.01%20ETH%0A6.%20Order%20executes%3A%20taker%20receives%204000%20DAI%2C%20maker%20receives%201.01%20ETH%0A%0A**Result**%3A%20Taker%20pays%201.01%20ETH%2C%20receives%204000%20DAI%20(effective%20rate%3A%201%20ETH%20%3D%203960.4%20DAI)%0A%0A%23%23%23%23%20Test%20Case%203%3A%20INCH%20%E2%86%92%20DAI%20Double%20Oracle%20Order%0A%0A**Scenario**%3A%20Maker%20wants%20to%20sell%20100%20INCH%20for%20DAI%20using%20double%20oracle%20pricing%0A%0A**Order%20Details%3A**%0A%0A-%20Maker%3A%20makerAddr%0A-%20Taker%3A%20takerAddr%0A-%20Maker%20Asset%3A%20INCH%20(100%20ether)%0A-%20Taker%20Asset%3A%20DAI%20(632%20ether)%0A-%20Oracles%3A%20INCH%2FETH%20(0.0001577615249227853%20ETH)%20and%20DAI%2FETH%20(0.00025%20ETH)%0A%0A**Extension%20Data%3A**%0A%0A%60%60%60solidity%0A%2F%2F%20Making%20amount%20data%20(double%20oracle%20%2B%20maker%20spread)%0Abytes%20memory%20makingAmountData%20%3D%20abi.encodePacked(%0A%20%20%20%20chainlinkCalcAddress%2C%0A%20%20%20%20bytes1(0x40)%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Double%20price%20flag%0A%20%20%20%20address(daiOracle)%2C%20%20%20%20%20%20%2F%2F%20Oracle1%3A%20DAI%2FETH%0A%20%20%20%20address(inchOracle)%2C%20%20%20%20%20%2F%2F%20Oracle2%3A%20INCH%2FETH%0A%20%20%20%20int256(0)%2C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20No%20decimals%20adjustment%0A%20%20%20%20uint256(990000000)%20%20%20%20%20%20%20%2F%2F%200.99%20spread%0A)%3B%0A%0A%2F%2F%20Taking%20amount%20data%20(double%20oracle%20%2B%20taker%20spread)%0Abytes%20memory%20takingAmountData%20%3D%20abi.encodePacked(%0A%20%20%20%20chainlinkCalcAddress%2C%0A%20%20%20%20bytes1(0x40)%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Double%20price%20flag%0A%20%20%20%20address(inchOracle)%2C%20%20%20%20%20%2F%2F%20Oracle1%3A%20INCH%2FETH%0A%20%20%20%20address(daiOracle)%2C%20%20%20%20%20%20%2F%2F%20Oracle2%3A%20DAI%2FETH%0A%20%20%20%20int256(0)%2C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20No%20decimals%20adjustment%0A%20%20%20%20uint256(1010000000)%20%20%20%20%20%2F%2F%201.01%20spread%0A)%3B%0A%60%60%60%0A%0A**Execution%20Flow%3A**%0A%0A1.%20Taker%20calls%20with%20%60makingAmount%60%20flag%20set%20to%20true%0A2.%20Protocol%20calls%20%60getMakingAmount%60%20with%20100%20INCH%0A3.%20Calculator%20applies%20double%20oracle%20calculation%3A%0A%20%20%20-%20INCH%20price%20in%20ETH%3A%200.0001577615249227853%0A%20%20%20-%20DAI%20price%20in%20ETH%3A%200.00025%0A%20%20%20-%20INCH%2FDAI%20rate%3A%200.0001577615249227853%20%2F%200.00025%20%3D%200.631046%0A%20%20%20-%20With%200.99%20spread%3A%20100%20_%200.631046%20_%200.99%20%3D%2062.47%20DAI%0A4.%20Protocol%20calls%20%60getTakingAmount%60%20with%2062.47%20DAI%0A5.%20Calculator%20applies%20inverse%20calculation%20with%201.01%20spread%0A6.%20Order%20executes%20with%20calculated%20amounts%0A%0A**Result**%3A%20Complex%20pricing%20based%20on%20two%20oracle%20feeds%20with%20spread%20adjustments%0A%0A%23%23%23%23%20Test%20Case%204%3A%20Stop-Loss%20Order%20with%20Predicate%0A%0A**Scenario**%3A%20Maker%20wants%20to%20sell%20INCH%20for%20DAI%20only%20if%20INCH%2FDAI%20price%20falls%20below%206.32%0A%0A**Order%20Details%3A**%0A%0A-%20Maker%3A%20makerAddr%0A-%20Taker%3A%20takerAddr%0A-%20Maker%20Asset%3A%20INCH%20(100%20ether)%0A-%20Taker%20Asset%3A%20DAI%20(631%20ether)%0A-%20Predicate%3A%20INCH%2FDAI%20price%20%3C%206.32%0A%0A**Predicate%20Construction%3A**%0A%0A%60%60%60solidity%0A%2F%2F%20Build%20price%20call%20for%20predicate%0Abytes%20memory%20priceCall%20%3D%20abi.encodeWithSelector(%0A%20%20%20%20OracleCalculator%20.doublePrice.selector%2C%0A%20%20%20%20inchOracle%2C%20%20%20%20%2F%2F%20INCH%2FETH%20oracle%0A%20%20%20%20daiOracle%2C%20%20%20%20%20%2F%2F%20DAI%2FETH%20oracle%0A%20%20%20%20int256(0)%2C%20%20%20%20%20%2F%2F%20No%20decimals%20adjustment%0A%20%20%20%201%20ether%20%20%20%20%20%20%20%20%2F%2F%20Base%20amount%0A)%3B%0A%0A%2F%2F%20Build%20predicate%20call%0Abytes%20memory%20predicate%20%3D%20abi.encodeWithSelector(%0A%20%20%20%20swap.lt.selector%2C%20%20%20%20%20%20%20%20%2F%2F%20Less%20than%20comparison%0A%20%20%20%206.32%20ether%2C%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Threshold%3A%206.32%0A%20%20%20%20abi.encodeWithSelector(%0A%20%20%20%20%20%20%20%20swap.arbitraryStaticCall.selector%2C%0A%20%20%20%20%20%20%20%20address(oracleCalculator%20)%2C%0A%20%20%20%20%20%20%20%20priceCall%0A%20%20%20%20)%0A)%3B%0A%60%60%60%0A%0A**Execution%20Flow%3A**%0A%0A1.%20Order%20fill%20is%20attempted%0A2.%20Protocol%20evaluates%20predicate%20before%20execution%0A3.%20Predicate%20calls%20%60OracleCalculator%20.doublePrice()%60%20with%20oracle%20data%0A4.%20Calculated%20INCH%2FDAI%20price%20is%20compared%20to%206.32%20threshold%0A5.%20If%20price%20%3C%206.32%3A%20order%20executes%20normally%0A6.%20If%20price%20%E2%89%A5%206.32%3A%20order%20reverts%20with%20predicate%20failure%0A%0A**Result**%3A%20Order%20only%20executes%20when%20INCH%2FDAI%20price%20is%20below%20the%20specified%20threshold%0A%0A%23%23%23%23%20Test%20Case%205%3A%20Simple%20Order%20Without%20Extension%0A%0A**Scenario**%3A%20Basic%20order%20without%20any%20Chainlink%20integration%0A%0A**Order%20Details%3A**%0A%0A-%20Maker%3A%20makerAddr%0A-%20Taker%3A%20takerAddr%0A-%20Maker%20Asset%3A%20WETH%20(1%20ether)%0A-%20Taker%20Asset%3A%20DAI%20(4000%20ether)%0A-%20No%20extensions%20or%20predicates%0A%0A**Execution%20Flow%3A**%0A%0A1.%20Taker%20calls%20%60fillOrderArgs%60%20with%204000%20DAI%0A2.%20No%20extension%20data%20provided%0A3.%20Protocol%20uses%20default%20proportional%20calculation%0A4.%20Order%20executes%20at%20fixed%201%3A4000%20ratio%0A%0A**Result**%3A%20Simple%20fixed-rate%20order%20execution%20without%20dynamic%20pricing%0A%0A%23%23%23%20Key%20Implementation%20Details%0A%0A%23%23%23%23%20Oracle%20Freshness%20Check%0A%0A%60%60%60solidity%0Aif%20(updatedAt%20%2B%20_ORACLE_TTL%20%3C%20block.timestamp)%20revert%20StaleOraclePrice()%3B%0A%60%60%60%0A%0A-%20Ensures%20oracle%20data%20is%20not%20older%20than%204%20hours%0A-%20Prevents%20execution%20with%20stale%20price%20data%0A%0A%23%23%23%23%20Spread%20Application%0A%0A%60%60%60solidity%0Areturn%20spread%20*%20amount%20*%20latestAnswer.toUint256()%20%2F%20(10%20**%20oracle.decimals())%20%2F%20_SPREAD_DENOMINATOR%3B%0A%60%60%60%0A%0A-%20Spreads%20are%20applied%20as%20multipliers%20(e.g.%2C%20990000000%20%3D%200.99)%0A-%20%60_SPREAD_DENOMINATOR%20%3D%201e9%60%20for%209-decimal%20precision%0A%0A%23%23%23%23%20Double%20Oracle%20Calculation%0A%0A%60%60%60solidity%0Aresult%20%3D%20amount%20*%20latestAnswer1.toUint256()%3B%0Aif%20(decimalsScale%20%3E%200)%20%7B%0A%20%20%20%20result%20*%3D%2010%20**%20decimalsScale.toUint256()%3B%0A%7D%20else%20if%20(decimalsScale%20%3C%200)%20%7B%0A%20%20%20%20result%20%2F%3D%2010%20**%20(-decimalsScale).toUint256()%3B%0A%7D%0Aresult%20%2F%3D%20latestAnswer2.toUint256()%3B%0A%60%60%60%0A%0A-%20Calculates%20cross-oracle%20pricing%20for%20custom%20token%20pairs%0A-%20Handles%20decimal%20precision%20adjustments%20between%20oracles%0A%0AThis%20extension%20enables%20sophisticated%20DeFi%20applications%20that%20can%20automatically%20adjust%20to%20market%20conditions%20while%20providing%20liquidity%20providers%20with%20profitable%20spreads.%0A%0A%23%23%20Treasury%20Management%0A%0A%23%23%23%20Treasury%20Management%20Flow%0A%0A!%5BTreasuryInteraction%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FBkDBWwhDee.png)%0A%0A%23%23%23%20Rebalancer%20Requirements%0A%0A1.%20Create%20an%20Interaction%20Contract%20called%20RebalancerInteraction.sol%20(in%20the%20src%20directory)%0A2.%20Create%20a%20test%20contract%20called%20RebalancerInteraction.t.sol%20(in%20the%20test%20directory)%0A3.%20In%20RebalancerInteraction.t.sol%0A%20%20%201.%20Create%20test%20scenarios%20the%20same%20as%20in%20OracleCalculator%20.t.sol%0A%20%20%202.%20Add%20to%20that%20an%20Interaction%20using%20RebalancerInteraction.sol%20which%0A%20%20%20%20%20%201.%20Takes%20the%20output%20tokens%20the%20taker%20receives%0A%20%20%20%20%20%202.%20Transfers%20them%20to%20a%20third%20wallet%20(addr3)%20which%20is%20a%20treasurer%0A%20%20%20%20%20%203.%20If%20the%20transfer%20fails%20reject%20the%20order.%0A%0A%23%23%23%20Rebalancer%20Implementation%0A%0AThe%20Rebalancer%20implementation%20has%20been%20successfully%20completed%20with%20the%20following%20components%3A%0A%0A%23%23%23%201.%20RebalancerInteraction.sol%20(src%20directory)%0A%0A**Purpose**%3A%20Post-interaction%20contract%20that%20transfers%20output%20tokens%20to%20a%20treasurer%20wallet%20after%20successful%20order%20execution.%0A%0A**Key%20Features**%3A%0A%0A-%20Implements%20%60IPostInteraction%60%20interface%20for%20Limit%20Order%20Protocol%20integration%0A-%20Transfers%20the%20taker's%20received%20tokens%20(maker%20asset)%20to%20a%20designated%20treasurer%20address%0A-%20Uses%20%60SafeERC20%60%20for%20secure%20token%20transfers%20with%20proper%20error%20handling%0A-%20Reverts%20the%20entire%20order%20if%20transfer%20fails%2C%20ensuring%20atomic%20execution%0A-%20Emits%20%60TokensTransferredToTreasurer%60%20events%20for%20successful%20transfers%0A-%20Validates%20treasurer%20address%20in%20constructor%20to%20prevent%20zero%20address%20usage%0A%0A**Core%20Functionality**%3A%0A%0A%60%60%60solidity%0Afunction%20postInteraction(%0A%20%20%20%20IOrderMixin.Order%20calldata%20order%2C%0A%20%20%20%20bytes32%20orderHash%2C%0A%20%20%20%20address%20taker%2C%0A%20%20%20%20uint256%20makingAmount%2C%0A%20%20%20%20uint256%20takingAmount%2C%0A%20%20%20%20uint256%20remainingMakingAmount%2C%0A%20%20%20%20bytes%20calldata%20extraData%0A)%20external%20override%20%7B%0A%20%20%20%20address%20outputToken%20%3D%20order.makerAsset%3B%0A%20%20%20%20uint256%20outputAmount%20%3D%20makingAmount%3B%0A%0A%20%20%20%20try%20IERC20(outputToken).safeTransferFrom(taker%2C%20treasurer%2C%20outputAmount)%20%7B%0A%20%20%20%20%20%20%20%20emit%20TokensTransferredToTreasurer(outputToken%2C%20taker%2C%20treasurer%2C%20outputAmount)%3B%0A%20%20%20%20%7D%20catch%20%7B%0A%20%20%20%20%20%20%20%20revert%20TransferFailed()%3B%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A%23%23%23%202.%20RebalancerInteraction.t.sol%20(test%20directory)%0A%0A**Purpose**%3A%20Comprehensive%20test%20suite%20that%20replicates%20all%20OracleCalculator%20scenarios%20with%20added%20treasurer%20functionality.%0A%0A**Test%20Coverage**%3A%0A%0A-%20**Single%20Oracle%20Orders**%3A%20ETH%E2%86%92DAI%2C%20DAI%E2%86%92ETH%20with%20treasurer%20receiving%20output%20tokens%0A-%20**Double%20Oracle%20Orders**%3A%20INCH%E2%86%92DAI%20with%20complex%20pricing%20and%20treasurer%20transfer%0A-%20**Conditional%20Orders**%3A%20Stop-loss%20orders%20with%20predicate%20validation%20and%20treasurer%20transfer%0A-%20**Simple%20Orders**%3A%20Basic%20orders%20without%20Chainlink%20but%20with%20treasurer%20transfer%0A-%20**Failure%20Scenarios**%3A%20Tests%20unauthorized%20transfers%20that%20should%20revert%0A%0A**Test%20Scenarios%20Implemented**%3A%0A%0A1.%20%60test_eth_to_dai_chainlink_order_with_rebalancer()%60%20-%20Single%20oracle%20ETH%E2%86%92DAI%0A2.%20%60test_dai_to_eth_chainlink_order_with_rebalancer()%60%20-%20Single%20oracle%20DAI%E2%86%92ETH%20with%20inverse%0A3.%20%60test_dai_to_1inch_chainlink_order_takingAmountData_with_rebalancer()%60%20-%20Double%20oracle%20INCH%E2%86%92DAI%0A4.%20%60test_dai_to_1inch_chainlink_order_makingAmountData_with_rebalancer()%60%20-%20Double%20oracle%20with%20making%20amount%0A5.%20%60test_dai_to_1inch_stop_loss_order_with_rebalancer()%60%20-%20Conditional%20order%20with%20predicate%0A6.%20%60test_dai_to_1inch_stop_loss_order_predicate_invalid_with_rebalancer()%60%20-%20Invalid%20predicate%20test%0A7.%20%60test_eth_to_dai_stop_loss_order_with_rebalancer()%60%20-%20ETH%E2%86%92DAI%20with%20stop-loss%0A8.%20%60test_simple_order_without_extension_with_rebalancer()%60%20-%20Basic%20order%20with%20treasurer%0A9.%20%60test_simple_order_with_different_amounts_with_rebalancer()%60%20-%20Partial%20amounts%0A10.%20%60test_rebalancer_transfer_failure()%60%20-%20Failure%20scenario%20testing%0A%0A%23%23%23%203.%20Key%20Implementation%20Details%0A%0A%23%23%23%23%20**Post-Interaction%20Integration**%0A%0A-%20Each%20test%20includes%20%60buildPostInteractionCalldata(address(rebalancerInteraction))%60%0A-%20Post-interaction%20data%20is%20added%20to%20order%20extensions%20via%20%60PostInteractionData%60%0A-%20Treasurer%20(addr3)%20receives%20the%20output%20tokens%20after%20successful%20order%20execution%0A%0A%23%23%23%23%20**Transfer%20Logic**%0A%0A-%20**Takes%20output%20tokens**%3A%20The%20tokens%20the%20taker%20receives%20(maker%20asset%20from%20the%20order)%0A-%20**Transfers%20to%20treasurer**%3A%20Moves%20tokens%20to%20addr3%20(treasurer%20wallet)%20using%20%60safeTransferFrom%60%0A-%20**Rejects%20order%20on%20failure**%3A%20If%20transfer%20fails%2C%20entire%20order%20reverts%20with%20%60TransferFailed%60%20error%0A%0A%23%23%23%23%20**Test%20Verification**%0A%0AEach%20test%20verifies%3A%0A%0A1.%20**Order%20executes%20successfully**%20with%20Chainlink%20pricing%20(where%20applicable)%0A2.%20**Treasurer%20receives%20tokens**%3A%20%60assertEq(token.balanceOf(addr3)%2C%20expectedAmount)%60%0A3.%20**All%20balances%20are%20correct**%20for%20maker%2C%20taker%2C%20and%20treasurer%0A4.%20**Failure%20scenarios%20revert**%20when%20transfers%20are%20unauthorized%0A%0A%23%23%23%23%20**Error%20Handling**%0A%0A-%20**TransferFailed**%3A%20Reverts%20entire%20order%20if%20%60safeTransferFrom%60%20fails%0A-%20**InvalidTreasurer**%3A%20Prevents%20deployment%20with%20zero%20address%20treasurer%0A-%20**Predicate%20failures**%3A%20Orders%20with%20invalid%20predicates%20revert%20before%20interaction%0A%0A%23%23%23%204.%20Integration%20with%20Limit%20Order%20Protocol%0A%0AThe%20implementation%20seamlessly%20integrates%20with%20the%20existing%20Limit%20Order%20Protocol%3A%0A%0A-%20**Extension%20System**%3A%20Uses%20%60PostInteractionData%60%20extension%20for%20post-execution%20callbacks%0A-%20**Order%20Flow**%3A%20Maintains%20existing%20order%20execution%20flow%20while%20adding%20treasurer%20transfer%0A-%20**Atomic%20Execution**%3A%20Ensures%20either%20complete%20success%20(order%20%2B%20transfer)%20or%20complete%20failure%0A-%20**Event%20Emission**%3A%20Provides%20transparency%20through%20%60TokensTransferredToTreasurer%60%20events%0A%0A%23%23%23%205.%20Security%20Considerations%0A%0A-%20**SafeERC20**%3A%20Uses%20OpenZeppelin's%20SafeERC20%20for%20secure%20token%20transfers%0A-%20**Try-Catch**%3A%20Graceful%20error%20handling%20prevents%20partial%20state%20changes%0A-%20**Address%20Validation**%3A%20Constructor%20validates%20treasurer%20address%0A-%20**Atomic%20Operations**%3A%20Order%20reverts%20entirely%20if%20transfer%20fails%0A-%20**Authorization**%3A%20Relies%20on%20existing%20token%20approval%20mechanisms%0A%0A%23%23%23%206.%20Use%20Cases%0A%0AThis%20implementation%20enables%3A%0A%0A-%20**Automated%20Treasury%20Management**%3A%20Automatic%20transfer%20of%20trading%20profits%20to%20treasury%0A-%20**Risk%20Management**%3A%20Centralized%20control%20of%20trading%20outputs%0A-%20**Compliance**%3A%20Regulatory%20requirements%20for%20fund%20segregation%0A-%20**Portfolio%20Rebalancing**%3A%20Systematic%20reallocation%20of%20trading%20proceeds%0A%0AThe%20Rebalancer%20implementation%20successfully%20meets%20all%20requirements%20from%20the%20specification%20and%20provides%20a%20robust%2C%20secure%2C%20and%20comprehensive%20solution%20for%20automated%20treasury%20management%20in%20limit%20order%20trading.%0A%0A%23%23%23%20Test%20Results%0A%0A**10%20out%20of%2010%20tests%20passing%20(100%25%20success%20rate)**%0A%0A%23%23%23%23%20%E2%9C%85%20**All%20Tests%20Passing%3A**%0A%0A1.%20%60test_eth_to_dai_chainlink_order_with_rebalancer()%60%20-%20Single%20oracle%20ETH%E2%86%92DAI%0A2.%20%60test_dai_to_eth_chainlink_order_with_rebalancer()%60%20-%20Single%20oracle%20DAI%E2%86%92ETH%20with%20inverse%0A3.%20%60test_eth_to_dai_stop_loss_order_with_rebalancer()%60%20-%20Stop-loss%20with%20predicate%0A4.%20%60test_simple_order_without_extension_with_rebalancer()%60%20-%20Basic%20order%20without%20extensions%0A5.%20%60test_simple_order_with_different_amounts_with_rebalancer()%60%20-%20Different%20order%20amounts%0A6.%20%60test_rebalancer_transfer_failure()%60%20-%20Transfer%20failure%20handling%0A7.%20%60test_dai_to_1inch_stop_loss_order_predicate_invalid_with_rebalancer()%60%20-%20Invalid%20predicate%0A8.%20%60test_dai_to_1inch_chainlink_order_makingAmountData_with_rebalancer()%60%20-%20Double%20oracle%20with%20making%20amount%0A9.%20%60test_dai_to_1inch_chainlink_order_takingAmountData_with_rebalancer()%60%20-%20Double%20oracle%20with%20taking%20amount%0A10.%20%60test_dai_to_1inch_stop_loss_order_with_rebalancer()%60%20-%20Complex%20double%20oracle%20with%20stop-loss%20predicate%0A%0A%23%23%23%23%20%F0%9F%8E%AF%20**Core%20Functionality%20Verified%3A**%0A%0A-%20%E2%9C%85%20Post-interaction%20transfers%20tokens%20to%20treasurer%0A-%20%E2%9C%85%20Proper%20token%20approvals%20and%20transfers%0A-%20%E2%9C%85%20Balance%20verification%20accounting%20for%20treasurer%20transfers%0A-%20%E2%9C%85%20Error%20handling%20with%20transfer%20failures%0A-%20%E2%9C%85%20Atomic%20execution%20(orders%20either%20complete%20fully%20or%20revert%20entirely)%0A-%20%E2%9C%85%20Support%20for%20multiple%20token%20types%20(WETH%2C%20DAI%2C%20INCH)%0A-%20%E2%9C%85%20Complex%20oracle-based%20pricing%20scenarios%0A%0A%23%23%20Resource%20Management%0A%0A%23%23%23%20Resource%20Management%20Architecture%0A%0A!%5BResourceArchitecture%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FS12jGDhPge.png)%0A%0A%23%23%23%20Resource%20Management%20Components%0A%0A!%5BResourceComponents%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FHJ-pzD3Peg.png)%0A%0A%23%23%23%20Requirements%0A%0A1.%20Read%20lib%5Cthe-compact%5CREADME.md%20(open%20in%20editor)%20to%20understand%20how%20the%20compact%20works%0A2.%20We%20are%20looking%20to%20create%20an%20end%20to%20end%20flow%20where%0A%20%20%201.%20We%20register%20a%20new%20contract%20ResourceManager.sol%20as%20a%20ResourceManager%0A%20%20%202.%20We%20Register%20ChainLinkCompactInteraction.sol%20as%20the%20Arbiter%0A%20%20%203.%20The%20Maker%20(the%20Swapper%20in%20compact%20terms%20signs%20permission%20for%20their%20tokens%20(or%20ETH)%20to%20be%20stored%20in%20the-compact%20as%20ERC-6909)%0A%20%20%204.%20ChainLinkCompact.sol%20checks%20that%20the%20we%20have%20a%20ResourceLock%20for%20the%20amount%20required.%0A%20%20%205.%20ChainLinkCompact%20then%20executes%20the%20trade%20using%20the%20same%20logic%20that%20was%20in%20ChainLinkCalculator%20and%20creates%20a%20resource%20lock%20for%20their%20(tokens%2FETH)%0A%20%20%206.%20ChainLinkCompactInteraction%20is%20copied%20from%20RebalancerInteraction%20it%20takes%20the%20output%20tokens%20provided%20by%20the%20Taker%20and%0A%20%20%207.%20If%20they%20are%20%3E%3D%20TakerAmount%20then%20it%20calls%20the%20ResourceManager%20to%20lock%20the%20funds%0A%20%20%208.%20It%20then%20does%20the%20token%20transfer%20to%20the%20treasurer%20the%20same%20as%20it%20was%20done%20in%20the%20original%20RebalancerInteraction%0A%0A%23%23%23%20Design%20Questions%0A%0A1.%20**Resource%20Manager%20Registration**%3A%20How%20should%20we%20register%20the%20LimitOrderProtocol%20as%20a%20ResourceManager%20in%20The%20Compact%3F%20Should%20it%20be%20a%20separate%20contract%20or%20integrated%20directly%3F%0A%20%20%201.%20Answer%3A%20We%20are%20registering%20it%20as%20a%20separate%20contract%20let's%20call%20it%20ResourceManager.sol%20and%20this%20contract%20will%20be%20called%20by%20ChainLinkCompact%20to%20lock%20the%20resources%20before%20calling%20the%20swap%20on%20LimitOrderProtocl%0A%0A2.%20**Arbiter%20Implementation**%3A%20Should%20ChainLinkCompactInteraction.sol%20be%20a%20standalone%20arbiter%20or%20integrated%20with%20existing%20ChainLinkCalculator%20logic%3F%0A%20%20%201.%20Answer%3A%20It%20should%20be%20Standalone%20ChainLinkCalculator%20and%20RebalancerInteraction%20remain%20unchanged%0A%0A3.%20**Token%20Locking%20Strategy**%3A%20Should%20makers%20lock%20their%20entire%20balance%20upfront%20or%20lock%20tokens%20dynamically%20when%20orders%20are%20matched%3F%0A%20%20%201.%20Answer%3A%20Initially%20Lock%20their%20whole%20balance%0A%0A4.%20**Resource%20Lock%20Scope**%3A%20Should%20resource%20locks%20be%20chain-specific%20or%20multichain%20for%20cross-chain%20order%20execution%3F%0A%20%20%201.%20Answer%3A%20Chain-specific%0A%0A5.%20**Allocator%20Selection**%3A%20Which%20allocator%20should%20we%20use%20for%20the%20resource%20locks%3F%20Should%20we%20create%20a%20custom%20allocator%20or%20use%20existing%20ones%20like%20Smallocator%2FAutocator%3F%0A%20%20%201.%20Answer%3A%20Create%20a%20custom%20Allocator%20based%20on%20Autocator(which%20is%20used%20for%20End%20User%20signing%20which%20is%20the%20Maker%20in%20our%20case)%0A%20%20%202.%20The%20logic%20for%20calling%20this%20should%20be%20in%20ChainLinkCompact.t.sol%0A%20%20%203.%20Moving%20forward%20we%20will%20also%20create%20a%20custom%20Smallocator%20used%20when%20smart%20contract%20call%20this%0A%0A6.%20**EIP-712%20Signature%20Structure**%3A%20How%20should%20we%20structure%20the%20EIP-712%20signatures%20for%20the%20compact%20agreements%3F%20Should%20we%20include%20mandate%20data%20for%20additional%20conditions%3F%0A%20%20%201.%20Answer%3A%20For%20Phase%201%20we%20do%20not%20need%20to%20add%20mandate%20data%20or%20Solver%20Payloads%20we%20will%20incorporate%20those%20in%20a%20later%20phase%0A%0A7.%20**Fallback%20Mechanisms**%3A%20What%20should%20happen%20if%20the%20arbiter%20fails%20to%20process%20a%20claim%3F%20Should%20we%20implement%20emissary%20fallbacks%3F%0A%20%20%201.%20If%20an%20arbiter%20fails%20to%20process%20the%20claim%20the%20swap%20should%20revert%0A%0A8.%20**Gas%20Optimization**%3A%20How%20can%20we%20optimize%20gas%20usage%20for%20the%20ERC-6909%20integration%2C%20especially%20for%20batch%20operations%3F%0A%20%20%201.%20We%20will%20optimize%20gas%20in%20phase%202%0A%0A9.%20**Error%20Handling**%3A%20How%20should%20we%20handle%20cases%20where%20resource%20locks%20are%20insufficient%20or%20expired%3F%0A%20%20%201.%20We%20revert%20the%20transaction%20with%20custom%20errors%20stating%20the%20reason%20for%20the%20failure%0A%0A10.%20**Integration%20Points**%3A%20Should%20the%20ERC-6909%20functionality%20be%20optional%20(opt-in)%20or%20mandatory%20for%20all%20orders%3F%0A%20%20%20%201.%20Optional%20set%20by%20a%20boolean%20ERC-6909%20flag%20for%20now%0A%20%20%20%202.%20Later%20this%20may%20move%20to%20an%20enum%20with%20additional%20swap%20types%0A%0A%23%23%23%20Implementation%0A%0A%23%23%23%23%20Phase%201%3A%20Core%20Contract%20Development%0A%0A1.%20**Create%20ResourceManager.sol**%20-%20New%20contract%0A%20%20%20-%20Register%20as%20ResourceManager%20in%20The%20Compact%0A%20%20%20-%20Handle%20resource%20lock%20creation%20and%20management%20for%20makers%0A%20%20%20-%20Implement%20allocator%20integration%20for%20order%20validation%0A%20%20%20-%20Called%20by%20ChainLinkCompact%20to%20lock%20resources%20before%20swap%20execution%0A%0A2.%20**Create%20ChainLinkCompact.sol**%20-%20Copy%20from%20ChainLinkCalculator.sol%0A%20%20%20-%20Add%20ERC-6909%20flag%20for%20optional%20functionality%0A%20%20%20-%20Integrate%20with%20The%20Compact%20for%20resource%20lock%20verification%0A%20%20%20-%20Add%20ERC-6909%20token%20validation%20before%20order%20execution%0A%20%20%20-%20Call%20ResourceManager.sol%20to%20lock%20resources%20before%20LimitOrderProtocol%20execution%0A%20%20%20-%20Implement%20custom%20error%20handling%20for%20insufficient%2Fexpired%20locks%0A%0A3.%20**Create%20ChainLinkCompactInteraction.sol**%20-%20Copy%20from%20RebalancerInteraction.sol%0A%20%20%20-%20Implement%20IArbiter%20interface%20for%20The%20Compact%0A%20%20%20-%20Add%20resource%20lock%20creation%20for%20taker's%20output%20tokens%0A%20%20%20-%20Maintain%20treasurer%20transfer%20functionality%0A%20%20%20-%20Add%20EIP-712%20signature%20verification%20for%20compact%20agreements%0A%20%20%20-%20Revert%20entire%20transaction%20if%20arbiter%20fails%20to%20process%20claim%0A%0A4.%20**Create%20Custom%20Allocator**%20-%20Based%20on%20Autocator%0A%20%20%20-%20Implement%20IAllocator%20interface%0A%20%20%20-%20Handle%20end-user%20(Maker)%20signing%20authorization%0A%20%20%20-%20Add%20nonce%20management%20for%20compact%20claims%0A%20%20%20-%20Implement%20claim%20authorization%20logic%0A%20%20%20-%20Logic%20for%20calling%20this%20should%20be%20in%20ChainLinkCompact.t.sol%0A%0A%23%23%23%23%20Phase%202%3A%20Integration%20%26%20Testing%0A%0A5.%20**Compact%20Registration%20System**%0A%20%20%20-%20Implement%20EIP-712%20signature%20generation%20for%20makers%20(no%20mandate%20data%20for%20Phase%201)%0A%20%20%20-%20Create%20compact%20registration%20functions%0A%20%20%20-%20Add%20chain-specific%20resource%20lock%20scope%0A%20%20%20-%20Implement%20upfront%20token%20locking%20strategy%0A%0A6.%20**Testing%20Suite**%0A%20%20%20-%20Unit%20tests%20for%20each%20contract%0A%20%20%20-%20Integration%20tests%20for%20end-to-end%20flow%0A%20%20%20-%20Test%20ERC-6909%20flag%20functionality%0A%20%20%20-%20Test%20custom%20error%20handling%20scenarios%0A%0A%23%23%23%23%20Phase%203%3A%20Advanced%20Features%0A%0A7.%20**Gas%20Optimization**%0A%20%20%20-%20Optimize%20gas%20usage%20for%20ERC-6909%20integration%0A%20%20%20-%20Implement%20batch%20operations%20optimization%0A%20%20%20-%20Profile%20and%20optimize%20critical%20paths%0A%0A8.%20**Enhanced%20Features**%0A%20%20%20-%20Add%20mandate%20data%20structure%20for%20order%20conditions%0A%20%20%20-%20Implement%20multichain%20support%0A%20%20%20-%20Create%20custom%20Smallocator%20for%20smart%20contract%20calls%0A%20%20%20-%20Add%20emissary%20fallback%20mechanisms%0A%20%20%20-%20Implement%20enum%20for%20additional%20swap%20types%20beyond%20boolean%20flag%0A%0A%23%23%23%20Technical%20Architecture%0A%0A**Core%20Flow%3A**%0A%0A1.%20Maker%20deposits%20tokens%20into%20The%20Compact%20(creates%20ERC-6909%20resource%20lock)%0A2.%20Maker%20signs%20EIP-712%20compact%20agreement%20with%20arbiter%20(ChainLinkCompactInteraction)%0A3.%20Order%20is%20posted%20to%20LimitOrderProtocol%20with%20ERC-6909%20extension%0A4.%20Taker%20fills%20order%20through%20ChainLinkCompact.sol%0A5.%20ChainLinkCompactInteraction%20processes%20claim%3A%0A%20%20%20-%20Verifies%20resource%20lock%20availability%0A%20%20%20-%20Executes%20trade%20using%20ChainLinkCalculator%20logic%0A%20%20%20-%20Creates%20new%20resource%20lock%20for%20taker's%20output%20tokens%0A%20%20%20-%20Transfers%20tokens%20to%20treasurer%0A%20%20%20-%20Calls%20ResourceManager%20to%20lock%20funds%0A%0A**Key%20Interfaces%3A**%0A%0A-%20%60ITheCompact%60%20-%20For%20resource%20lock%20management%0A-%20%60IAllocator%60%20-%20For%20claim%20authorization%0A-%20%60IArbiter%60%20-%20For%20claim%20processing%0A-%20%60IEmissary%60%20-%20For%20fallback%20verification%0A%0A**Data%20Structures%3A**%0A%0A-%20%60Compact%60%20-%20EIP-712%20payload%20for%20single%20resource%20lock%0A-%20%60BatchCompact%60%20-%20EIP-712%20payload%20for%20multiple%20resource%20locks%0A-%20%60Mandate%60%20-%20Witness%20data%20for%20order%20conditions%0A-%20%60Claim%60%20-%20Claim%20payload%20for%20processing%0A%0A%23%23%23%20Future%20Test%20Enhancements%0A%0AFor%20ERC-6909%20integration%2C%20additional%20test%20categories%20will%20be%20needed%3A%0A%0A1.%20**ERC-6909%20Resource%20Lock%20Tests**%0A%20%20%20-%20Resource%20lock%20creation%20and%20validation%0A%20%20%20-%20Insufficient%20lock%20handling%0A%20%20%20-%20Lock%20expiration%20scenarios%0A%0A2.%20**Compact%20Integration%20Tests**%0A%20%20%20-%20EIP-712%20signature%20verification%0A%20%20%20-%20Compact%20agreement%20validation%0A%20%20%20-%20Arbiter%20claim%20processing%0A%0A3.%20**Resource%20Manager%20Tests**%0A%20%20%20-%20Lock%20management%20functionality%0A%20%20%20-%20Allocator%20integration%0A%20%20%20-%20Error%20handling%20for%20resource%20conflicts%0A%0A4.%20**End-to-End%20Flow%20Tests**%0A%20%20%20-%20Complete%20maker-to-taker%20flow%0A%20%20%20-%20Treasurer%20integration%0A%20%20%20-%20Cross-contract%20interaction%20validation%0A%0A%23%23%20NEAR%20FUSION%2B%20Smart%20Contract%20Development%0A%0A%23%23%23%20NEAR%20Smart%20Contract%20Architecture%0A%0A!%5BNEARArchitecture%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FHydB7D3Pxe.png)%0A%0A%23%23%23%20NEAR%20Limit%20Order%20Protocol%20Contracts%0A%0A!%5BNEARLimitOrder%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FHkg8QPnvee.png)%0A%0A%23%23%23%20NEAR%20Escrow%20Smart%20Contracts%0A%0A!%5BNEAR%20Escrow%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FS1tqDDhvgg.png)%0A%0A%23%23%23%20Overview%0A%0ANEAR%20Fusion%2B%20is%20a%20comprehensive%20DeFi%20protocol%20that%20migrates%201inch's%20Limit%20Order%20Protocol%20and%20Cross-Chain%20Swap%20functionality%20to%20the%20NEAR%20blockchain.%20This%20project%20implements%20advanced%20trading%20features%20including%20limit%20orders%2C%20cross-chain%20atomic%20swaps%2C%20and%20sophisticated%20escrow%20mechanisms.%0A%0A%23%23%23%20Architecture%0A%0AThe%20protocol%20consists%20of%20several%20interconnected%20smart%20contracts%20that%20work%20together%20to%20provide%20a%20complete%20DeFi%20trading%20experience%3A%0A%0A%23%23%23%23%20Core%20Components%0A%0A1.%20**Limit%20Order%20Protocol**%20-%20Handles%20limit%20order%20creation%2C%20execution%2C%20and%20management%0A2.%20**Cross-Chain%20Swap**%20-%20Enables%20atomic%20swaps%20across%20different%20blockchains%0A3.%20**Escrow%20System**%20-%20Manages%20secure%20fund%20escrow%20for%20cross-chain%20operations%0A4.%20**Fee%20Management**%20-%20Handles%20fee%20collection%20and%20distribution%0A5.%20**Merkle%20Validation**%20-%20Provides%20proof%20validation%20for%20complex%20order%20structures%0A%0A%23%23%23%23%20Contract%20Structure%0A%0A%60%60%60%0Asrc%2F%0A%E2%94%9C%E2%94%80%E2%94%80%20limit-order-protocol%2F%20%20%20%20%20%23%20Main%20limit%20order%20functionality%0A%E2%94%9C%E2%94%80%E2%94%80%20cross-chain-swap%2F%20%20%20%20%20%20%20%20%20%23%20Cross-chain%20atomic%20swap%20implementation%0A%E2%94%9C%E2%94%80%E2%94%80%20base-escrow-factory%2F%20%20%20%20%20%20%23%20Advanced%20escrow%20factory%20with%20Merkle%20validation%0A%E2%94%9C%E2%94%80%E2%94%80%20escrow-factory%2F%20%20%20%20%20%20%20%20%20%20%20%23%20Standard%20escrow%20factory%0A%E2%94%9C%E2%94%80%E2%94%80%20escrow-src%2F%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20Source%20chain%20escrow%20contract%0A%E2%94%9C%E2%94%80%E2%94%80%20escrow-dst%2F%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20Destination%20chain%20escrow%20contract%0A%E2%94%9C%E2%94%80%E2%94%80%20fee-taker%2F%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20Fee%20collection%20and%20management%0A%E2%94%94%E2%94%80%E2%94%80%20merkle-storage-invalidator%2F%20%23%20Merkle%20proof%20validation%0A%60%60%60%0A%0A%23%23%23%20Key%20Features%0A%0A-%20**Limit%20Orders**%3A%20Advanced%20limit%20order%20protocol%20with%20partial%20fills%20and%20multiple%20execution%20strategies%0A-%20**Cross-Chain%20Swaps**%3A%20Atomic%20swaps%20between%20different%20blockchains%20with%20time-locked%20escrows%0A-%20**Merkle%20Proofs**%3A%20Efficient%20validation%20for%20complex%20order%20structures%0A-%20**Fee%20Management**%3A%20Flexible%20fee%20collection%20and%20distribution%20mechanisms%0A-%20**Security**%3A%20Comprehensive%20validation%20and%20timelock%20mechanisms%0A%0A%23%23%23%20Documentation%20Sections%0A%0A-%20%5BArchitecture%20Overview%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.architecture.md)%0A-%20%5BContract%20Documentation%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.contracts%2F)%0A%20%20-%20%5BLimit%20Order%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.contracts%2Flimit-order-protocol.md)%0A%20%20-%20%5BCross-Chain%20Swap%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.contracts%2Fcross-chain-swap.md)%0A%20%20-%20%5BEscrow%20System%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.contracts%2Fescrow-system.md)%0A%20%20-%20%5BFee%20Taker%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.contracts%2Ffee-taker.md)%0A%20%20-%20%5BMerkle%20Storage%20Invalidator%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.contracts%2Fmerkle-storage-invalidator.md)%0A-%20%5BIntegration%20Guide%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.integration.md)%0A-%20%5BSecurity%20Considerations%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.security.md)%0A-%20%5BAPI%20Reference%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.api-reference.md)%0A-%20%5BDeployment%20Guide%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.deployment.md)%0A%0A%23%23%23%20Quick%20Start%0A%0A1.%20**Build%20Contracts**%3A%20%60cargo%20near%20build%60%0A2.%20**Run%20Tests**%3A%20%60cargo%20test%60%0A3.%20**Deploy**%3A%20Use%20the%20deployment%20scripts%20in%20%60deployment-scripts%2F%60%0A%0A%23%23%23%20Development%0A%0A-%20**Rust%20Version**%3A%20See%20%60rust-toolchain.toml%60%0A-%20**NEAR%20SDK**%3A%20v5.15.1%0A-%20**Testing**%3A%20Integration%20tests%20in%20%60integration-tests%2F%60%0A%0A%23%23%23%20Contributing%0A%0APlease%20refer%20to%20the%20main%20%5BREADME.md%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fblob%2Fmain%2FREADME.md)%20for%20development%20setup%20and%20contribution%20guidelines.%0A",lastUpdatedAt:1757298265e3},{lazy:()=>J(()=>import("./atomic-arbitrage-DssxUkd9.js"),[]),path:"/proposals/atomic-arbitrage",type:"mdx",filePath:"proposals/atomic-arbitrage.mdx",content:"%23%20TAP-4%20Atomic%20Arbitrage%20%3A%20Application%20Proposal%0A%0ASubmitted%20by%3A%20%5BJohn%20Whitton%5D(https%3A%2F%2Fjohnwhitton.com)%20and%20%5BJincbator%5D(https%3A%2F%2Fjincubator.com)%3A%20john%40johnwhitton.com%0A%0A%23%23%20Overview%0A%0AAn%20arbitrage%20bot%20built%20on%20Tycho's%20indexing%20simulation%20and%20execution%20modules.%20It%20uses%20a%20variation%20of%20the%20%5BBellman%20Ford%20Algorithm%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBellman%25E2%2580%2593Ford_algorithm)%20to%20find%20revenue%20positive%20arbitrage%20cycles.%0A%0AI%20spent%20a%20weekend%20doing%20initial%20design%20and%20coding%20up%20a%20prototype%20which%20can%20be%20found%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fatomic-arbitrage)%20this%20was%20rapid%20prototyping%20and%20as%20such%20was%20done%20using%20a%20CLI%20as%20an%20example%20rather%20than%20a%20productionn%20ready%20service.%20It%20is%20currently%20a%20private%20repository%20please%20reach%20out%20if%20you'd%20like%20to%20review.%0A%0A%23%23%20Implementation%20Plan%0A%0AFollowing%20is%20a%20full%20implementation%20plan%2C%20open%20for%20discussion%0A%0A%23%23%23%20Phase%201%20(this%20bounty)%20-%20Essential%20Requirements%0A%0A-%20**Pre-calculate%20cycles**%3A%20Build%20a%20cycle%20file%20of%20the%20most%20relevant%20arbitrage%20cycles%20for%20a%20given%20set%20of%20start%20tokens.%0A%20%20-%20**Market%20Graph**%3A%20Turn%20all%20pools%20and%20tokens%20into%20a%20graph%2C%20with%20pools%20as%20edges%20and%20nodes%20as%20tokens.%0A%20%20-%20**Graph%20search%20for%20cycles%3A**%20Given%20a%20set%20of%20start%20tokens%2C%20enumerate%20all%20possible%20cycles%20of%20up%20to%20length%20N%20through%20the%20graph%2C%20from%20one%20of%20the%20start%20tokens.%20A%20cycle%20is%20a%20trade%20path%20that%20starts%20and%20ends%20in%20the%20same%20token.%20Use%20each%20pool%20at%20max%20once%20in%20a%20cycle.%0A%20%20%20%20-%20**Limiting%20the%20search%20(Optional)**%3A%20Find%20good%20heuristics%20to%20limit%20the%20number%20of%20possible%20cycles%20in%20case%20there%20are%20too%20many.%20E.g.%20limit%20the%20set%20of%20possible%20bridge%20tokens%20to%20the%20most%20liquid%20N%20tokens.%0A-%20**Find%20optimal%20trades**%3A%20Given%20a%20cycle%2C%20find%20the%20trade%20amount%20that%20optimises%20the%20amount%20out%20(e.g.%20with%20binary%20search%20over%20the%20range%20(0%2C%20pool%20trade%20limit)).%0A-%20**Check%20Cycles%20every%20block**%3A%20For%20all%20cycles%20that%20have%20a%20spot%20price%20better%20than%201%20(i.e.%20all%20cycles%20where%20the%20spot%20price%20indicates%20that%20you%20get%20more%20than%201%20token%20out%20for%20token%20in%20at%20the%20margin)%20%E2%80%93%20calculate%20the%20optimal%20trade.%0A-%20**Profitable%20net%20gas**%3A%20Calculate%20gas%20in%20terms%20of%20out-token%20and%20consider%20a%20trade%20only%20as%20profitable%20if%20it%20is%20profitable%20net%20gas.%0A-%20**Profitability%20threshold**%3A%20Only%20execute%20trades%20that%20are%20profitable%20by%20at%20least%20X%20%25%20(in%20BPS).%20(useful%20also%20for%20testing%2C%20you%20set%20it%20to%20slightly%20negative%20to%20find%20and%20test%20trade%20execution.)%0A-%20**Execute**%3A%20Execute%20the%20most%20profitable%20trade%20you%20found.%0A%0A%23%23%23%23%20Future%20Phases%0A%0A%23%23%23%23%20Important%20Requirements%0A%0A-%20**CLI%20Dashboard**%3A%20Implement%20a%20command%20line%20UI%20(or%20other%20UI%20component)%20to%20follow%20the%20searchers%20progress.%20Track%20at%20least%3A%20Number%20of%20cycles%20we%20monitor%2C%20current%20block%2C%20real-time%20counter%20for%20checked%20cycles%20this%20block%2C%20list%20of%20found%20arbitrage%20opportunities%20in%20current%20block%2C%20list%20of%20pending%20trades%2C%20list%20of%20succeeded%20arbitrage%20trades%2C%20profit%20in%20current%20run%2C%20user%20settings%20(start%20tokens%2C%20slippage%20setting%20(in%20BPS)%2C%20bribe%20%25%20(in%20BPS)%2C%20chain%2C%20tracked%20protocols%20(%22Uniswap%20v4%2C%20Balancer%20v2%2C%20etc.%22))%0A-%20**Recheck%20cycles%20only%20when%20a%20pool%20updates**%3A%20Calculate%20the%20cycle%20spot%20prices%20and%20optimal%20trade%20amounts%20once%20at%20the%20beginning.%20Then%20only%20recalculate%20a%20cycle%20spot%20price%20and%20optimal%20trade%20amount%20if%20one%20of%20the%20pools%20in%20the%20cycle%20had%20an%20update%20in%20the%20last%20block%20update.%0A-%20**Add%20slippage**%3A%20Add%20a%20slippage%20parameter%20(in%20basis%20points)%3A%20Reduce%20the%20expected%20amount%20from%20both%20trades%20by%20the%20slippage%20when%20encoding%20the%20swaps.%20Only%20send%20trades%20that%20are%20also%20profitable%20_after_%20slippage.%0A-%20**Monitor%20trade%20execution**%3A%20Record%20and%20monitor%20pending%20trades.%20Block%20the%20pools%20involved%20in%20a%20trade%20from%20further%20trading%20until%20the%20previous%20trade%20either%20succeeded%20or%20failed.%20Record%20trade%20outcome%20(failed%2Fsucceeded%2C%20sell%20amount%2C%20buy%20amount%2C%20expected%20buy%20amount%2C%20gas%20cost%2C%20expected%20gas%20cost%2C%20token%20in%2C%20token%20out%2C%20profit%20net%20gas%20in%20out%20token).%0A-%20**Execution%20Options**%3A%20Give%20the%20user%20the%20option%20to%20pick%20one%20of%20several%20default%20execution%20options%3A%20Public%20mempool%2C%20%5BBuilderNet%5D(https%3A%2F%2Fbuildernet.org%2Fdocs%2Fapi)%20through%20%5BFlashbots%20Protect%5D(https%3A%2F%2Fdocs.flashbots.net%2Fflashbots-protect%2Foverview)%20via%20TEE%20builder%2C%20%5BMEVBlocker%5D(https%3A%2F%2Fcow.fi%2Fmev-blocker).%20Pick%20a%20protected%20option%20by%20default.%0A-%20**Dynamic%20Bribe**%3A%20Bid%20a%20%25%20of%20expected%20profit%20in%20gas%20(on%20chains%20where%20it's%20applicable).%0A-%20**Gas%20Safeguard**%3A%20Limit%20the%20amount%20of%20gas%20the%20searcher%20is%20allowed%20to%20use%20per%20e.g.%20hour%20%E2%80%93%20so%20that%20in%20case%20it%20bugs%20and%20sends%20non-profitable%20transactions%20you%20don't%20burn%20through%20your%20gas%20all%20at%20once.%0A%0A%23%23%23%23%20Nice-to-have%20requirements%0A%0A-%20**Target%20Block**%3A%20Make%20trades%20only%20valid%20for%20a%20particular%20target%20block%20%E2%80%93%20so%20that%20you%20can%20consider%20trades%20that%20don't%20settle%20in%20the%20next%20block%20as%20failed.%0A-%20**Gas%20warning**%3A%20Notify%20when%20you're%20running%20out%20of%20gas.%0A%0A%23%23%23%23%20NOT%20included%0A%0A-%20**Inventory%20Management**%3A%20Sell%20tokens%20automatically%20for%20gas%20to%20refill%20gas.%20Sell%20tokens%20automatically%20to%20treasure%20token%20(e.g.%20ETH%20or%20USDC).%0A%0A%23%23%23%20Core%20Logic%0A%0A%23%23%23%23%20ClI%20Implementation%0A%0A%23%23%23%23%20%60fn%20extract_all_tokens_from_pools%60%20leverages%20tycho-simulation%20%60utils%3A%3Aload_all_tokens%60%0A%0A%60%60%60rust%0Aasync%20fn%20load_tokens_for_chain(%0A%20%20%20%20chain%3A%20%26Chain%2C%0A%20%20%20%20tycho_url%3A%20%26str%2C%0A%20%20%20%20tycho_api_key%3A%20%26str%2C%0A)%20-%3E%20HashMap%3CBytes%2C%0A%60%60%60%0A%0A%23%23%23%23%20Collect%20all%20pool%20data%0A%0A%60%60%60rust%0Aasync%20fn%20collect_pool_data(%0A%20%20%20%20chain%3A%20%26Chain%2C%0A%20%20%20%20tycho_url%3A%20%26str%2C%0A%20%20%20%20tycho_api_key%3A%20%26str%2C%0A%20%20%20%20all_tokens%3A%20%26HashMap%3CBytes%2C%20Token%3E%2C%0A%20%20%20%20tvl_threshold%3A%20f64%2C%0A%20%20%20%20real_time%3A%20bool%2C%0A%20%20%20%20collect_all_pairs%3A%20bool%2C%0A%20%20%20%20max_blocks%3A%20usize%2C%0A%20%20%20%20start_tokens%3A%20%26%5BString%5D%2C%0A%20%20%20%20max_hops%3A%20usize%2C%0A%20%20%20%20min_profit_bps%3A%20u64%2C%0A%20%20%20%20evaluation_callback%3A%20Option%3C%0A%20%20%20%20%20%20%20%20Box%3C%0A%20%20%20%20%20%20%20%20%20%20%20%20dyn%20Fn(%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%26HashMap%3CString%2C%20ProtocolComponent%3E%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%26%5B(String%2C%20String%2C%20f64%2C%20String%2C%20String)%5D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%26HashMap%3CString%2C%20Box%3Cdyn%20ProtocolSim%3E%3E%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20)%20-%3E%20()%2C%0A%20%20%20%20%20%20%20%20%3E%2C%0A%20%20%20%20%3E%2C%0A%20%20%20%20warm_up_blocks%3A%20usize%2C%0A)%20-%3E%20(%0A%20%20%20%20HashMap%3CString%2C%20ProtocolComponent%3E%2C%0A%20%20%20%20Vec%3C(String%2C%20String%2C%20f64%2C%20String%2C%20String)%3E%2C%0A%20%20%20%20HashMap%3CString%2C%20Box%3Cdyn%20ProtocolSim%3E%3E%2C%0A%20%20%20%20(usize%2C%20usize%2C%20usize)%2C%20%2F%2F%20(pools_read%2C%20pools_ignored_tvl%2C%20token_pools_skipped)%0A)%20%7B%0A%60%60%60%0A%0A%23%23%23%23%20fn%20build_arbitrage_graph%0A%0A%60%60%60rust%0A%20%20fn%20build_arbitrage_graph(%0A%20%20%20%20pairs%3A%20%26%5B(String%2C%20String%2C%20f64%2C%20String%2C%20String)%5D%2C%0A%20%20%20%20pool_states%3A%20%26HashMap%3CString%2C%20ProtocolComponent%3E%2C%0A)%20-%3E%20Graph%20%7B%0A%60%60%60%0A%0A%23%23%23%23%20find_arbitrage_cycles%3A%20%2F%2F%2F%20Runs%20Bellman-Ford%20to%20find%20negative%20cycles%20(profitable%20arbitrage)%0A%0A%60%60%60rust%0Afn%20find_arbitrage_cycles(%0A%20%20%20%20graph%3A%20%26Graph%2C%0A%20%20%20%20start_token%3A%20%26str%2C%0A%20%20%20%20max_hops%3A%20usize%2C%0A%20%20%20%20pool_states%3A%20%26HashMap%3CString%2C%20ProtocolComponent%3E%2C%0A%20%20%20%20pool_states_with_state%3A%20%26HashMap%3CString%2C%20Box%3Cdyn%20ProtocolSim%3E%3E%2C%0A%20%20%20%20start_token_info%3A%20%26Token%2C%0A)%20-%3E%20Vec%3CArbitrageCycle%3E%20%7B%0A%60%60%60%0A%0A%23%23%23%23%20Execute%20Swap%20Transaction%0A%0A%60%60%60rust%0Aasync%20fn%20execute_swap_transaction(%0A%20%20%20%20provider%3A%20FillProvider%3C%0A%20%20%20%20%20%20%20%20JoinFill%3CIdentity%2C%20WalletFiller%3CEthereumWallet%3E%3E%2C%0A%20%20%20%20%20%20%20%20RootProvider%3CEthereum%3E%2C%0A%20%20%20%20%3E%2C%0A%20%20%20%20amount_in%3A%20%26BigUint%2C%0A%20%20%20%20wallet_address%3A%20Address%2C%0A%20%20%20%20sell_token_address%3A%20%26Bytes%2C%0A%20%20%20%20tx%3A%20tycho_execution%3A%3Aencoding%3A%3Amodels%3A%3ATransaction%2C%0A%20%20%20%20chain_id%3A%20u64%2C%0A)%20-%3E%20Result%3C()%2C%20Box%3Cdyn%20std%3A%3Aerror%3A%3AError%3E%3E%20%7B%0A%60%60%60%0A%0A%23%23%23%20Tycho%20Integrations%0A%0A-%20%5BTycho%20Indexer%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-execution)%20via%20%5BThe%20Tycho%20Indexer%20RPC%5D(https%3A%2F%2Ftycho-beta.propellerheads.xyz%2Fdocs%2F)%0A-%20%5BTycho%20Execution%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Ffor-solvers%2Fexecution)%0A%0A%23%23%23%20Weekly%20Milestones%0A%0AThe%20following%20assumes%201%20Engineer%20working%2020%20hours%20per%20week%20on%20this%20Bounty.%0ATimelines%20can%20be%20reduced%20by%20allocating%20additional%20resources%20and%20is%20open%20for%20discussion%20when%20agreeing%20on%20the%20bounty.%0AIdeally%20the%20Bounty%20would%20be%20payable%20weekly%20as%20milestones%20are%20met.%0A%0AThis%20Bounty%0A%0A-%20Week%201%3A%20Working%20CLI%20identifying%20arbitrage%20opportunities%0A%20%20-%20CLI%20Implemented%0A%20%20-%20Loading%20of%20All%20Tokens%20and%20Pool%20Information%0A%20%20-%20Creation%20of%20Hash%20Graphs%0A%20%20-%20Evaluation%20of%20Arbitrage%20Cycles%0A-%20Week%202%3A%20Working%20CLI%20Swap%20Execution%20for%20Positive%20Arbitrage%20Opportunities%0A%20%20-%20Introduce%20Swap%20Execution%0A%20%20-%20End%20to%20End%20Tests%20of%20Flow%0A-%20Week%203%20Service%20Development%0A%20%20-%20Migrate%20from%20CLI%20to%20background%20service%20monitoring%20each%20block%20for%20arbitrage%20opportunities%0A-%20Week%204%20Documentation%20and%20Gas%20Analysis%0A%20%20-%20Creation%20of%20a%20documentation%20website%20using%20%5Bvocs%5D(https%3A%2F%2Fvocs.dev%2F)%0A%20%20-%20Publishing%20a%20%5Bdeepwik%5D(http%3A%2F%2Fdeepwiki.com%2F)%20for%20the%20repository%0A%20%20-%20Gas%20analysis%20approach%0A-%20Week%205%20TroubleShooting%20and%20Testing%0A%20%20-%20Increase%20testing%20coverage%0A%20%20-%20Troubleshoot%20any%20oustanding%20issues%0A%0A%23%23%23%20Technical%20Architecture%0A%0AFollowing%20are%20some%20diagrams%20generated%20from%20the%20codebase%20protoyped%20over%20the%20weekend%20using%20%5Bdevin.ai%5D(https%3A%2F%2Fapp.devin.ai%2F)%0A%0A%23%23%23%23%20System%20Capabilities%0A%0A!%5BSystemCapabilities%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FBJGsMEVDxg.png)%0A%0A%23%23%23%23%20Architecture%20Components%0A%0A!%5BArchitectureComponents%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FSyGiGVNDgl.png)%0A%0A%23%23%23%23%20Graph%20Overview%0A%0A!%5BGraphOverview%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FHJzjzN4Dxl.png)%0A%0A%23%23%23%23%20Arbitrage%20Opportunities%20(Bellman%20Ford%20Algorithm)%0A%0A!%5BBellmanFord%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2Fr1GsM44vxl.png)%0A%0A%23%23%23%23%20Process%20Flow%0A%0A!%5BProcessFlow%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FHkMofEVvel.png)%0A%0A%23%23%23%20UI%2FUX%20Approach%0A%0AInitial%20version%20will%20be%20cli%20based%20here%20is%20the%20help%20for%20the%20cli%0A%0A%60%60%60bash%0Acargo%20run%20--release%20--example%20arbitrage%20--%20--help%0A%0AUsage%3A%20arbitrage%20%5BOPTIONS%5D%0A%0AOptions%3A%0A%20%20%20%20%20%20--start-tokens%20%3CSTART_TOKENS%3E%0A%20%20%20%20%20%20--max-hops%20%3CMAX_HOPS%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Bdefault%3A%203%5D%0A%20%20%20%20%20%20--min-profit-bps%20%3CMIN_PROFIT_BPS%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Bdefault%3A%2050%5D%0A%20%20%20%20%20%20--tvl-threshold%20%3CTVL_THRESHOLD%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Bdefault%3A%20380000%5D%0A%20%20%20%20%20%20--swapper-pk%20%3CSWAPPER_PK%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Bdefault%3A%200x123456789abcdef123456789abcdef123456789abcdef123456789abcdef1234%5D%0A%20%20%20%20%20%20--chain%20%3CCHAIN%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Bdefault%3A%20ethereum%5D%0A%20%20%20%20%20%20--test-all-chains%0A%20%20%20%20%20%20--real-time%0A%20%20%20%20%20%20--collect-all-pairs%0A%20%20%20%20%20%20--max-blocks%20%3CMAX_BLOCKS%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Bdefault%3A%201%5D%0A%20%20%20%20%20%20--continuous%0A%20%20%20%20%20%20--verbose%0A%20%20%20%20%20%20--all-tokens%0A%20%20%20%20%20%20--warm-up-blocks%20%3CWARM_UP_BLOCKS%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Bdefault%3A%2010%5D%0A%20%20%20%20%20%20--pool-loading-strategy%20%3CPOOL_LOADING_STRATEGY%3E%20%20%5Bdefault%3A%20warmup%5D%0A%20%20-h%2C%20--help%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Print%20help%0A%0A%60%60%60%0A%0ABelow%20is%20sample%20output%0A%0A%60%60%60bash%0ARun%20for%20uniswap%20only%20(before%20adding%20vm%3Aambient%2C%20vm%3Abalancer%2C%20sushiswap_v2)%0Acargo%20run%20--release%20--example%20arbitrage%20--%20--chain%20ethereum%20--max-blocks%201%20--max-hops%202%20--tvl-threshold%20100.0%20--all-tokens%0A%0A%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%0A%F0%9F%93%8A%20ARBITRAGE%20ANALYSIS%20SUMMARY%0A%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%0ANumber%20of%20Tokens%20Read%3A%2034883%0ANumber%20of%20Pools(Edges)%20Read%3A%20872%0ANumber%20of%20Pools(Edges)%20Evaluated%3A%20872%0ANumber%20of%20Pools%20Ignored%20due%20to%20TVL%3A%200%0ANumber%20of%20Token%20Pools(Edges)%20Skipped%3A%2014%0ANumber%20of%20Edges%20(Trading%20Pairs)%3A%201716%0ANumber%20of%20Tokens%20Evaluated%20(Nodes)%3A%20654%0ABuilding%20graph%20from%20654%20Nodes%20and%201716%20Edges%0ANumber%20of%20Arbitrage%20Cycles%20Found%3A%200%0AVerification%3A%20654%20Nodes%20connected%20by%201716%20Edges%0A%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%0A%0AFuller%20run%20for%20ethereum%20(after%20adding%20vm%3Aambient%2C%20vm%3Abalancer%2C%20sushiswap_v2)%0Acargo%20run%20--release%20--example%20arbitrage%20--%20--chain%20ethereum%20--max-blocks%2010%20--max-hops%205%20--tvl-threshold%20100.0%20--all-tokens%0A%60%60%60%0A%0A%23%23%23%20About%20Me%0A%0A%23%23%23%20TAP%20Relevant%20Experience%0A%0AWhat%20makes%20you%20succeed%20in%20this%20TAP%20(%2Brelevant%20experience).%0A%0AI%20work%20on%20Solving%2C%20Arbitrage%20and%20Indexing%20using%20%5BTycho%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Foverview)%2C%20Intents%20using%20%5BERC-7683%5D(https%3A%2F%2Fwww.erc7683.org%2Fspec)%2C%20%5BEIP-712%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712)%2C%20%5BCompactx%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fcompactx)%20and%20%5BUniswap%20V4%20Hooks%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fv4%2Foverview).%20Development%20can%20be%20found%20in%20the%20github%20organization%20%5Bjincubator%5D(https%3A%2F%2Fgithub.com%2Fjincubator).%0A%0A%23%23%23%20John%20Overview%0A%0AI'm%20a%20Research%2Fengineer%2C%20technical%20leader%2C%20and%20entrepreneur%20working%20at%20the%20intersection%20of%20blockchain%20infrastructure%20(Solving%2C%20Market%20Making%2C%20Arbitrage)%20and%20Decentralized%20protocols%20(Intents%2C%20Liquidity%20Management%2C%20Settlement).%20I%20have%20a%20track%20record%20of%20driving%20projects%20from%20conception%20to%20completion%2C%20identifying%20research%20gaps%2C%20and%20providing%20solutions.%20Finally%2C%20I%20love%20leading%20engineering%20teams%20and%20have%20the%20ability%20to%20drive%20collaboration%20across%20the%20organization%20and%20the%20entire%20ecosystem.%20For%20more%20see%20%5Bhttps%3A%2F%2Fjohnwhitton.com%5D(https%3A%2F%2Fjohnwhitton.com)%0A%0A%23%23%23%20Socials%0A%0A-%20email%3A%20john%40johnwhitton.com%0A-%20telegram%3A%20%40john_whitton%0A-%20x%3A%20%40john_a_whitton%0A-%20github%3A%20https%3A%2F%2Fgithub.com%2Fjohnwhitton%0A-%20website%3A%20%5Bjohnwhitton.com%5D(https%3A%2F%2Fjohnwhitton.com)%0A%0A%23%23%23%20Research%0A%0A-%20github%3A%20https%3A%2F%2Fgithub.com%2Fjincubator%0A-%20website%3A%20%5Bjincubator.com%5D(https%3A%2F%2Fjoincubator.com)%0A%0A%60%60%60%0A%0A%60%60%60%0A",lastUpdatedAt:1757298265e3},{lazy:()=>J(()=>import("./atomic-arbitrage-DssxUkd9.js"),[]),path:"/proposals/atomic-arbitrage.html",type:"mdx",filePath:"proposals/atomic-arbitrage.mdx",content:"%23%20TAP-4%20Atomic%20Arbitrage%20%3A%20Application%20Proposal%0A%0ASubmitted%20by%3A%20%5BJohn%20Whitton%5D(https%3A%2F%2Fjohnwhitton.com)%20and%20%5BJincbator%5D(https%3A%2F%2Fjincubator.com)%3A%20john%40johnwhitton.com%0A%0A%23%23%20Overview%0A%0AAn%20arbitrage%20bot%20built%20on%20Tycho's%20indexing%20simulation%20and%20execution%20modules.%20It%20uses%20a%20variation%20of%20the%20%5BBellman%20Ford%20Algorithm%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBellman%25E2%2580%2593Ford_algorithm)%20to%20find%20revenue%20positive%20arbitrage%20cycles.%0A%0AI%20spent%20a%20weekend%20doing%20initial%20design%20and%20coding%20up%20a%20prototype%20which%20can%20be%20found%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fatomic-arbitrage)%20this%20was%20rapid%20prototyping%20and%20as%20such%20was%20done%20using%20a%20CLI%20as%20an%20example%20rather%20than%20a%20productionn%20ready%20service.%20It%20is%20currently%20a%20private%20repository%20please%20reach%20out%20if%20you'd%20like%20to%20review.%0A%0A%23%23%20Implementation%20Plan%0A%0AFollowing%20is%20a%20full%20implementation%20plan%2C%20open%20for%20discussion%0A%0A%23%23%23%20Phase%201%20(this%20bounty)%20-%20Essential%20Requirements%0A%0A-%20**Pre-calculate%20cycles**%3A%20Build%20a%20cycle%20file%20of%20the%20most%20relevant%20arbitrage%20cycles%20for%20a%20given%20set%20of%20start%20tokens.%0A%20%20-%20**Market%20Graph**%3A%20Turn%20all%20pools%20and%20tokens%20into%20a%20graph%2C%20with%20pools%20as%20edges%20and%20nodes%20as%20tokens.%0A%20%20-%20**Graph%20search%20for%20cycles%3A**%20Given%20a%20set%20of%20start%20tokens%2C%20enumerate%20all%20possible%20cycles%20of%20up%20to%20length%20N%20through%20the%20graph%2C%20from%20one%20of%20the%20start%20tokens.%20A%20cycle%20is%20a%20trade%20path%20that%20starts%20and%20ends%20in%20the%20same%20token.%20Use%20each%20pool%20at%20max%20once%20in%20a%20cycle.%0A%20%20%20%20-%20**Limiting%20the%20search%20(Optional)**%3A%20Find%20good%20heuristics%20to%20limit%20the%20number%20of%20possible%20cycles%20in%20case%20there%20are%20too%20many.%20E.g.%20limit%20the%20set%20of%20possible%20bridge%20tokens%20to%20the%20most%20liquid%20N%20tokens.%0A-%20**Find%20optimal%20trades**%3A%20Given%20a%20cycle%2C%20find%20the%20trade%20amount%20that%20optimises%20the%20amount%20out%20(e.g.%20with%20binary%20search%20over%20the%20range%20(0%2C%20pool%20trade%20limit)).%0A-%20**Check%20Cycles%20every%20block**%3A%20For%20all%20cycles%20that%20have%20a%20spot%20price%20better%20than%201%20(i.e.%20all%20cycles%20where%20the%20spot%20price%20indicates%20that%20you%20get%20more%20than%201%20token%20out%20for%20token%20in%20at%20the%20margin)%20%E2%80%93%20calculate%20the%20optimal%20trade.%0A-%20**Profitable%20net%20gas**%3A%20Calculate%20gas%20in%20terms%20of%20out-token%20and%20consider%20a%20trade%20only%20as%20profitable%20if%20it%20is%20profitable%20net%20gas.%0A-%20**Profitability%20threshold**%3A%20Only%20execute%20trades%20that%20are%20profitable%20by%20at%20least%20X%20%25%20(in%20BPS).%20(useful%20also%20for%20testing%2C%20you%20set%20it%20to%20slightly%20negative%20to%20find%20and%20test%20trade%20execution.)%0A-%20**Execute**%3A%20Execute%20the%20most%20profitable%20trade%20you%20found.%0A%0A%23%23%23%23%20Future%20Phases%0A%0A%23%23%23%23%20Important%20Requirements%0A%0A-%20**CLI%20Dashboard**%3A%20Implement%20a%20command%20line%20UI%20(or%20other%20UI%20component)%20to%20follow%20the%20searchers%20progress.%20Track%20at%20least%3A%20Number%20of%20cycles%20we%20monitor%2C%20current%20block%2C%20real-time%20counter%20for%20checked%20cycles%20this%20block%2C%20list%20of%20found%20arbitrage%20opportunities%20in%20current%20block%2C%20list%20of%20pending%20trades%2C%20list%20of%20succeeded%20arbitrage%20trades%2C%20profit%20in%20current%20run%2C%20user%20settings%20(start%20tokens%2C%20slippage%20setting%20(in%20BPS)%2C%20bribe%20%25%20(in%20BPS)%2C%20chain%2C%20tracked%20protocols%20(%22Uniswap%20v4%2C%20Balancer%20v2%2C%20etc.%22))%0A-%20**Recheck%20cycles%20only%20when%20a%20pool%20updates**%3A%20Calculate%20the%20cycle%20spot%20prices%20and%20optimal%20trade%20amounts%20once%20at%20the%20beginning.%20Then%20only%20recalculate%20a%20cycle%20spot%20price%20and%20optimal%20trade%20amount%20if%20one%20of%20the%20pools%20in%20the%20cycle%20had%20an%20update%20in%20the%20last%20block%20update.%0A-%20**Add%20slippage**%3A%20Add%20a%20slippage%20parameter%20(in%20basis%20points)%3A%20Reduce%20the%20expected%20amount%20from%20both%20trades%20by%20the%20slippage%20when%20encoding%20the%20swaps.%20Only%20send%20trades%20that%20are%20also%20profitable%20_after_%20slippage.%0A-%20**Monitor%20trade%20execution**%3A%20Record%20and%20monitor%20pending%20trades.%20Block%20the%20pools%20involved%20in%20a%20trade%20from%20further%20trading%20until%20the%20previous%20trade%20either%20succeeded%20or%20failed.%20Record%20trade%20outcome%20(failed%2Fsucceeded%2C%20sell%20amount%2C%20buy%20amount%2C%20expected%20buy%20amount%2C%20gas%20cost%2C%20expected%20gas%20cost%2C%20token%20in%2C%20token%20out%2C%20profit%20net%20gas%20in%20out%20token).%0A-%20**Execution%20Options**%3A%20Give%20the%20user%20the%20option%20to%20pick%20one%20of%20several%20default%20execution%20options%3A%20Public%20mempool%2C%20%5BBuilderNet%5D(https%3A%2F%2Fbuildernet.org%2Fdocs%2Fapi)%20through%20%5BFlashbots%20Protect%5D(https%3A%2F%2Fdocs.flashbots.net%2Fflashbots-protect%2Foverview)%20via%20TEE%20builder%2C%20%5BMEVBlocker%5D(https%3A%2F%2Fcow.fi%2Fmev-blocker).%20Pick%20a%20protected%20option%20by%20default.%0A-%20**Dynamic%20Bribe**%3A%20Bid%20a%20%25%20of%20expected%20profit%20in%20gas%20(on%20chains%20where%20it's%20applicable).%0A-%20**Gas%20Safeguard**%3A%20Limit%20the%20amount%20of%20gas%20the%20searcher%20is%20allowed%20to%20use%20per%20e.g.%20hour%20%E2%80%93%20so%20that%20in%20case%20it%20bugs%20and%20sends%20non-profitable%20transactions%20you%20don't%20burn%20through%20your%20gas%20all%20at%20once.%0A%0A%23%23%23%23%20Nice-to-have%20requirements%0A%0A-%20**Target%20Block**%3A%20Make%20trades%20only%20valid%20for%20a%20particular%20target%20block%20%E2%80%93%20so%20that%20you%20can%20consider%20trades%20that%20don't%20settle%20in%20the%20next%20block%20as%20failed.%0A-%20**Gas%20warning**%3A%20Notify%20when%20you're%20running%20out%20of%20gas.%0A%0A%23%23%23%23%20NOT%20included%0A%0A-%20**Inventory%20Management**%3A%20Sell%20tokens%20automatically%20for%20gas%20to%20refill%20gas.%20Sell%20tokens%20automatically%20to%20treasure%20token%20(e.g.%20ETH%20or%20USDC).%0A%0A%23%23%23%20Core%20Logic%0A%0A%23%23%23%23%20ClI%20Implementation%0A%0A%23%23%23%23%20%60fn%20extract_all_tokens_from_pools%60%20leverages%20tycho-simulation%20%60utils%3A%3Aload_all_tokens%60%0A%0A%60%60%60rust%0Aasync%20fn%20load_tokens_for_chain(%0A%20%20%20%20chain%3A%20%26Chain%2C%0A%20%20%20%20tycho_url%3A%20%26str%2C%0A%20%20%20%20tycho_api_key%3A%20%26str%2C%0A)%20-%3E%20HashMap%3CBytes%2C%0A%60%60%60%0A%0A%23%23%23%23%20Collect%20all%20pool%20data%0A%0A%60%60%60rust%0Aasync%20fn%20collect_pool_data(%0A%20%20%20%20chain%3A%20%26Chain%2C%0A%20%20%20%20tycho_url%3A%20%26str%2C%0A%20%20%20%20tycho_api_key%3A%20%26str%2C%0A%20%20%20%20all_tokens%3A%20%26HashMap%3CBytes%2C%20Token%3E%2C%0A%20%20%20%20tvl_threshold%3A%20f64%2C%0A%20%20%20%20real_time%3A%20bool%2C%0A%20%20%20%20collect_all_pairs%3A%20bool%2C%0A%20%20%20%20max_blocks%3A%20usize%2C%0A%20%20%20%20start_tokens%3A%20%26%5BString%5D%2C%0A%20%20%20%20max_hops%3A%20usize%2C%0A%20%20%20%20min_profit_bps%3A%20u64%2C%0A%20%20%20%20evaluation_callback%3A%20Option%3C%0A%20%20%20%20%20%20%20%20Box%3C%0A%20%20%20%20%20%20%20%20%20%20%20%20dyn%20Fn(%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%26HashMap%3CString%2C%20ProtocolComponent%3E%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%26%5B(String%2C%20String%2C%20f64%2C%20String%2C%20String)%5D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%26HashMap%3CString%2C%20Box%3Cdyn%20ProtocolSim%3E%3E%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20)%20-%3E%20()%2C%0A%20%20%20%20%20%20%20%20%3E%2C%0A%20%20%20%20%3E%2C%0A%20%20%20%20warm_up_blocks%3A%20usize%2C%0A)%20-%3E%20(%0A%20%20%20%20HashMap%3CString%2C%20ProtocolComponent%3E%2C%0A%20%20%20%20Vec%3C(String%2C%20String%2C%20f64%2C%20String%2C%20String)%3E%2C%0A%20%20%20%20HashMap%3CString%2C%20Box%3Cdyn%20ProtocolSim%3E%3E%2C%0A%20%20%20%20(usize%2C%20usize%2C%20usize)%2C%20%2F%2F%20(pools_read%2C%20pools_ignored_tvl%2C%20token_pools_skipped)%0A)%20%7B%0A%60%60%60%0A%0A%23%23%23%23%20fn%20build_arbitrage_graph%0A%0A%60%60%60rust%0A%20%20fn%20build_arbitrage_graph(%0A%20%20%20%20pairs%3A%20%26%5B(String%2C%20String%2C%20f64%2C%20String%2C%20String)%5D%2C%0A%20%20%20%20pool_states%3A%20%26HashMap%3CString%2C%20ProtocolComponent%3E%2C%0A)%20-%3E%20Graph%20%7B%0A%60%60%60%0A%0A%23%23%23%23%20find_arbitrage_cycles%3A%20%2F%2F%2F%20Runs%20Bellman-Ford%20to%20find%20negative%20cycles%20(profitable%20arbitrage)%0A%0A%60%60%60rust%0Afn%20find_arbitrage_cycles(%0A%20%20%20%20graph%3A%20%26Graph%2C%0A%20%20%20%20start_token%3A%20%26str%2C%0A%20%20%20%20max_hops%3A%20usize%2C%0A%20%20%20%20pool_states%3A%20%26HashMap%3CString%2C%20ProtocolComponent%3E%2C%0A%20%20%20%20pool_states_with_state%3A%20%26HashMap%3CString%2C%20Box%3Cdyn%20ProtocolSim%3E%3E%2C%0A%20%20%20%20start_token_info%3A%20%26Token%2C%0A)%20-%3E%20Vec%3CArbitrageCycle%3E%20%7B%0A%60%60%60%0A%0A%23%23%23%23%20Execute%20Swap%20Transaction%0A%0A%60%60%60rust%0Aasync%20fn%20execute_swap_transaction(%0A%20%20%20%20provider%3A%20FillProvider%3C%0A%20%20%20%20%20%20%20%20JoinFill%3CIdentity%2C%20WalletFiller%3CEthereumWallet%3E%3E%2C%0A%20%20%20%20%20%20%20%20RootProvider%3CEthereum%3E%2C%0A%20%20%20%20%3E%2C%0A%20%20%20%20amount_in%3A%20%26BigUint%2C%0A%20%20%20%20wallet_address%3A%20Address%2C%0A%20%20%20%20sell_token_address%3A%20%26Bytes%2C%0A%20%20%20%20tx%3A%20tycho_execution%3A%3Aencoding%3A%3Amodels%3A%3ATransaction%2C%0A%20%20%20%20chain_id%3A%20u64%2C%0A)%20-%3E%20Result%3C()%2C%20Box%3Cdyn%20std%3A%3Aerror%3A%3AError%3E%3E%20%7B%0A%60%60%60%0A%0A%23%23%23%20Tycho%20Integrations%0A%0A-%20%5BTycho%20Indexer%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-execution)%20via%20%5BThe%20Tycho%20Indexer%20RPC%5D(https%3A%2F%2Ftycho-beta.propellerheads.xyz%2Fdocs%2F)%0A-%20%5BTycho%20Execution%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Ffor-solvers%2Fexecution)%0A%0A%23%23%23%20Weekly%20Milestones%0A%0AThe%20following%20assumes%201%20Engineer%20working%2020%20hours%20per%20week%20on%20this%20Bounty.%0ATimelines%20can%20be%20reduced%20by%20allocating%20additional%20resources%20and%20is%20open%20for%20discussion%20when%20agreeing%20on%20the%20bounty.%0AIdeally%20the%20Bounty%20would%20be%20payable%20weekly%20as%20milestones%20are%20met.%0A%0AThis%20Bounty%0A%0A-%20Week%201%3A%20Working%20CLI%20identifying%20arbitrage%20opportunities%0A%20%20-%20CLI%20Implemented%0A%20%20-%20Loading%20of%20All%20Tokens%20and%20Pool%20Information%0A%20%20-%20Creation%20of%20Hash%20Graphs%0A%20%20-%20Evaluation%20of%20Arbitrage%20Cycles%0A-%20Week%202%3A%20Working%20CLI%20Swap%20Execution%20for%20Positive%20Arbitrage%20Opportunities%0A%20%20-%20Introduce%20Swap%20Execution%0A%20%20-%20End%20to%20End%20Tests%20of%20Flow%0A-%20Week%203%20Service%20Development%0A%20%20-%20Migrate%20from%20CLI%20to%20background%20service%20monitoring%20each%20block%20for%20arbitrage%20opportunities%0A-%20Week%204%20Documentation%20and%20Gas%20Analysis%0A%20%20-%20Creation%20of%20a%20documentation%20website%20using%20%5Bvocs%5D(https%3A%2F%2Fvocs.dev%2F)%0A%20%20-%20Publishing%20a%20%5Bdeepwik%5D(http%3A%2F%2Fdeepwiki.com%2F)%20for%20the%20repository%0A%20%20-%20Gas%20analysis%20approach%0A-%20Week%205%20TroubleShooting%20and%20Testing%0A%20%20-%20Increase%20testing%20coverage%0A%20%20-%20Troubleshoot%20any%20oustanding%20issues%0A%0A%23%23%23%20Technical%20Architecture%0A%0AFollowing%20are%20some%20diagrams%20generated%20from%20the%20codebase%20protoyped%20over%20the%20weekend%20using%20%5Bdevin.ai%5D(https%3A%2F%2Fapp.devin.ai%2F)%0A%0A%23%23%23%23%20System%20Capabilities%0A%0A!%5BSystemCapabilities%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FBJGsMEVDxg.png)%0A%0A%23%23%23%23%20Architecture%20Components%0A%0A!%5BArchitectureComponents%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FSyGiGVNDgl.png)%0A%0A%23%23%23%23%20Graph%20Overview%0A%0A!%5BGraphOverview%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FHJzjzN4Dxl.png)%0A%0A%23%23%23%23%20Arbitrage%20Opportunities%20(Bellman%20Ford%20Algorithm)%0A%0A!%5BBellmanFord%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2Fr1GsM44vxl.png)%0A%0A%23%23%23%23%20Process%20Flow%0A%0A!%5BProcessFlow%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FHkMofEVvel.png)%0A%0A%23%23%23%20UI%2FUX%20Approach%0A%0AInitial%20version%20will%20be%20cli%20based%20here%20is%20the%20help%20for%20the%20cli%0A%0A%60%60%60bash%0Acargo%20run%20--release%20--example%20arbitrage%20--%20--help%0A%0AUsage%3A%20arbitrage%20%5BOPTIONS%5D%0A%0AOptions%3A%0A%20%20%20%20%20%20--start-tokens%20%3CSTART_TOKENS%3E%0A%20%20%20%20%20%20--max-hops%20%3CMAX_HOPS%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Bdefault%3A%203%5D%0A%20%20%20%20%20%20--min-profit-bps%20%3CMIN_PROFIT_BPS%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Bdefault%3A%2050%5D%0A%20%20%20%20%20%20--tvl-threshold%20%3CTVL_THRESHOLD%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Bdefault%3A%20380000%5D%0A%20%20%20%20%20%20--swapper-pk%20%3CSWAPPER_PK%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Bdefault%3A%200x123456789abcdef123456789abcdef123456789abcdef123456789abcdef1234%5D%0A%20%20%20%20%20%20--chain%20%3CCHAIN%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Bdefault%3A%20ethereum%5D%0A%20%20%20%20%20%20--test-all-chains%0A%20%20%20%20%20%20--real-time%0A%20%20%20%20%20%20--collect-all-pairs%0A%20%20%20%20%20%20--max-blocks%20%3CMAX_BLOCKS%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Bdefault%3A%201%5D%0A%20%20%20%20%20%20--continuous%0A%20%20%20%20%20%20--verbose%0A%20%20%20%20%20%20--all-tokens%0A%20%20%20%20%20%20--warm-up-blocks%20%3CWARM_UP_BLOCKS%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Bdefault%3A%2010%5D%0A%20%20%20%20%20%20--pool-loading-strategy%20%3CPOOL_LOADING_STRATEGY%3E%20%20%5Bdefault%3A%20warmup%5D%0A%20%20-h%2C%20--help%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Print%20help%0A%0A%60%60%60%0A%0ABelow%20is%20sample%20output%0A%0A%60%60%60bash%0ARun%20for%20uniswap%20only%20(before%20adding%20vm%3Aambient%2C%20vm%3Abalancer%2C%20sushiswap_v2)%0Acargo%20run%20--release%20--example%20arbitrage%20--%20--chain%20ethereum%20--max-blocks%201%20--max-hops%202%20--tvl-threshold%20100.0%20--all-tokens%0A%0A%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%0A%F0%9F%93%8A%20ARBITRAGE%20ANALYSIS%20SUMMARY%0A%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%0ANumber%20of%20Tokens%20Read%3A%2034883%0ANumber%20of%20Pools(Edges)%20Read%3A%20872%0ANumber%20of%20Pools(Edges)%20Evaluated%3A%20872%0ANumber%20of%20Pools%20Ignored%20due%20to%20TVL%3A%200%0ANumber%20of%20Token%20Pools(Edges)%20Skipped%3A%2014%0ANumber%20of%20Edges%20(Trading%20Pairs)%3A%201716%0ANumber%20of%20Tokens%20Evaluated%20(Nodes)%3A%20654%0ABuilding%20graph%20from%20654%20Nodes%20and%201716%20Edges%0ANumber%20of%20Arbitrage%20Cycles%20Found%3A%200%0AVerification%3A%20654%20Nodes%20connected%20by%201716%20Edges%0A%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%0A%0AFuller%20run%20for%20ethereum%20(after%20adding%20vm%3Aambient%2C%20vm%3Abalancer%2C%20sushiswap_v2)%0Acargo%20run%20--release%20--example%20arbitrage%20--%20--chain%20ethereum%20--max-blocks%2010%20--max-hops%205%20--tvl-threshold%20100.0%20--all-tokens%0A%60%60%60%0A%0A%23%23%23%20About%20Me%0A%0A%23%23%23%20TAP%20Relevant%20Experience%0A%0AWhat%20makes%20you%20succeed%20in%20this%20TAP%20(%2Brelevant%20experience).%0A%0AI%20work%20on%20Solving%2C%20Arbitrage%20and%20Indexing%20using%20%5BTycho%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Foverview)%2C%20Intents%20using%20%5BERC-7683%5D(https%3A%2F%2Fwww.erc7683.org%2Fspec)%2C%20%5BEIP-712%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712)%2C%20%5BCompactx%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fcompactx)%20and%20%5BUniswap%20V4%20Hooks%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fv4%2Foverview).%20Development%20can%20be%20found%20in%20the%20github%20organization%20%5Bjincubator%5D(https%3A%2F%2Fgithub.com%2Fjincubator).%0A%0A%23%23%23%20John%20Overview%0A%0AI'm%20a%20Research%2Fengineer%2C%20technical%20leader%2C%20and%20entrepreneur%20working%20at%20the%20intersection%20of%20blockchain%20infrastructure%20(Solving%2C%20Market%20Making%2C%20Arbitrage)%20and%20Decentralized%20protocols%20(Intents%2C%20Liquidity%20Management%2C%20Settlement).%20I%20have%20a%20track%20record%20of%20driving%20projects%20from%20conception%20to%20completion%2C%20identifying%20research%20gaps%2C%20and%20providing%20solutions.%20Finally%2C%20I%20love%20leading%20engineering%20teams%20and%20have%20the%20ability%20to%20drive%20collaboration%20across%20the%20organization%20and%20the%20entire%20ecosystem.%20For%20more%20see%20%5Bhttps%3A%2F%2Fjohnwhitton.com%5D(https%3A%2F%2Fjohnwhitton.com)%0A%0A%23%23%23%20Socials%0A%0A-%20email%3A%20john%40johnwhitton.com%0A-%20telegram%3A%20%40john_whitton%0A-%20x%3A%20%40john_a_whitton%0A-%20github%3A%20https%3A%2F%2Fgithub.com%2Fjohnwhitton%0A-%20website%3A%20%5Bjohnwhitton.com%5D(https%3A%2F%2Fjohnwhitton.com)%0A%0A%23%23%23%20Research%0A%0A-%20github%3A%20https%3A%2F%2Fgithub.com%2Fjincubator%0A-%20website%3A%20%5Bjincubator.com%5D(https%3A%2F%2Fjoincubator.com)%0A%0A%60%60%60%0A%0A%60%60%60%0A",lastUpdatedAt:1757298265e3},{lazy:()=>J(()=>import("./intro-DxBag6l_.js"),[]),path:"/proposals/intro",type:"mdx",filePath:"proposals/intro.mdx",content:"%23%20Proposals%0A%0AWelcome%20to%20the%20Jincubator%20Research%20Hub.%0A%0AOur%20work%20focuses%20on%20**solvers%2C%20arbitrage%2C%20and%20intent-based%20protocols**%20%E2%80%94%20combining%20deep%20research%20with%20practical%20engineering%20to%20advance%20DeFi%20infrastructure.%20Current%20projects%20include%3A%0A%0A-%20A%20modular%20**arbitrage%20solver%20framework**%20for%20real-time%20detection%20and%20execution%20across%20chains%20(Ethereum%2C%20Base%2C%20Unichain).%0A-%20An%20**intent-based%20swap%20protocol**%20on%20**Uniswap%20v4**%2C%20featuring%20hook%20development%2C%20ERC-6909%20resource%20management%20(based%20on%20_the-compact_)%2C%20and%20integration%20with%201inch%20routing.%0A-%20Research%20on%20**Tycho%20Streaming%20%26%20Simulation**%2C%20flash%20loan%20arbitrage%20best%20practices%2C%20and%20novel%20mechanisms%20such%20as%20**Uniswap%20v4%20booster%20pools**%20with%20after-swap%20self-arbitrage.%0A-%20Development%20of%20an%20**opinionated%20solver%20architecture**%20for%20scalable%2C%20MEV-aware%20execution.%0A%0A%F0%9F%93%91%20You%20can%20read%20the%20full%20**Research%20Proposal**%20here%3A%20%20%0A%F0%9F%91%89%20%5BResearch%20Proposal%20Intro%5D(https%3A%2F%2Fwww.jincubator.com%2Fresearch%2Fintro)%0A%0APreviously%2C%20we%20have%20also%20participated%20in%20hackathons%20and%20submitted%20multiple%20grant%20proposals%2C%20which%20provided%20the%20foundation%20for%20this%20ongoing%20research%20and%20engineering%20work.%0A",lastUpdatedAt:1757298265e3},{lazy:()=>J(()=>import("./intro-DxBag6l_.js"),[]),path:"/proposals/intro.html",type:"mdx",filePath:"proposals/intro.mdx",content:"%23%20Proposals%0A%0AWelcome%20to%20the%20Jincubator%20Research%20Hub.%0A%0AOur%20work%20focuses%20on%20**solvers%2C%20arbitrage%2C%20and%20intent-based%20protocols**%20%E2%80%94%20combining%20deep%20research%20with%20practical%20engineering%20to%20advance%20DeFi%20infrastructure.%20Current%20projects%20include%3A%0A%0A-%20A%20modular%20**arbitrage%20solver%20framework**%20for%20real-time%20detection%20and%20execution%20across%20chains%20(Ethereum%2C%20Base%2C%20Unichain).%0A-%20An%20**intent-based%20swap%20protocol**%20on%20**Uniswap%20v4**%2C%20featuring%20hook%20development%2C%20ERC-6909%20resource%20management%20(based%20on%20_the-compact_)%2C%20and%20integration%20with%201inch%20routing.%0A-%20Research%20on%20**Tycho%20Streaming%20%26%20Simulation**%2C%20flash%20loan%20arbitrage%20best%20practices%2C%20and%20novel%20mechanisms%20such%20as%20**Uniswap%20v4%20booster%20pools**%20with%20after-swap%20self-arbitrage.%0A-%20Development%20of%20an%20**opinionated%20solver%20architecture**%20for%20scalable%2C%20MEV-aware%20execution.%0A%0A%F0%9F%93%91%20You%20can%20read%20the%20full%20**Research%20Proposal**%20here%3A%20%20%0A%F0%9F%91%89%20%5BResearch%20Proposal%20Intro%5D(https%3A%2F%2Fwww.jincubator.com%2Fresearch%2Fintro)%0A%0APreviously%2C%20we%20have%20also%20participated%20in%20hackathons%20and%20submitted%20multiple%20grant%20proposals%2C%20which%20provided%20the%20foundation%20for%20this%20ongoing%20research%20and%20engineering%20work.%0A",lastUpdatedAt:1757298265e3},{lazy:()=>J(()=>import("./solving-arbitrage-Bx_idCK2.js"),[]),path:"/proposals/solving-arbitrage",type:"mdx",filePath:"proposals/solving-arbitrage.mdx",content:"%23%20Research%20Proposal%3A%20Solvers%2C%20Arbitrage%20%26%20Intent-Based%20Protocols%0A%0A%23%23%20Background%0A%0AOver%20the%20past%20eight%20months%2C%20I%E2%80%99ve%20developed%20both%20a%20solver%20engine%20and%20an%20intent-based%20swap%20protocol%20integrating%20Uniswap%20v4.%20My%20work%20spans%20arbitrage%20detection%2Fexecution%2C%20real-time%20streaming%2C%20solver%20frameworks%2C%20and%20resource-efficient%20intent%20mechanisms.%20Current%20implementations%20and%20documentation%20are%20accessible%20via%20%5Bjincubator.com%2Fresearch%5D(https%3A%2F%2Fwww.jincubator.com%2Fresearch).%0A%0A%23%23%20Proposal%20Scope%0A%0AThe%20aim%20of%20this%20research%20is%20twofold%3A%20deepen%20the%20integration%20of%20solver-driven%20arbitrage%20with%20Tycho%E2%80%99s%20ecosystem%2C%20and%20extend%20the%20protocol%20footprint%20to%20Uniswap%20v4%20and%20beyond.%0A%0A%23%23%23%20Key%20Focus%20Areas%0A%0A-%20**Tycho%20Streaming%20%26%20Simulation**%20%20%0A%20%20Integrate%20Tycho%E2%80%99s%20streaming%20for%20real-time%20arbitrage%20opportunity%20intake%2C%20and%20Tycho%E2%80%99s%20simulation%20for%20stress-testing%20and%20MEV%20strategy%20modeling.%0A%0A-%20**Arbitrage%20Landscape%20Mapping**%20%20%0A%20%20Use%20Tycho-enabled%20simulations%2C%20dynamic%20graph%20construction%2C%20and%20routing%20algorithms%20to%20map%20multi-chain%20arbitrage%20opportunities%20across%20Ethereum%2C%20Base%2C%20and%20Unichain.%0A%0A-%20**Flash%20Loan%20Arbitrage%20Best%20Practices**%20%20%0A%20%20Develop%20standardized%2C%20gas-efficient%2C%20risk-mitigated%20solver%20strategies%20for%20flash-loan%20driven%20arbitrage.%0A%0A-%20**Uniswap%20v4%20Booster%20Pools**%20%20%0A%20%20Design%20and%20prototype%20%E2%80%9Cafter-swap%20self-arbitrage%E2%80%9D%20hooks%20that%20both%20optimize%20swap%20execution%20and%20act%20as%20built-in%20liquidity%20boosters%20within%20v4%20pools.%0A%0A%23%23%20Why%20Me%3F%0A%0AI%20am%20exceptionally%20well-positioned%20to%20lead%20this%20research%20based%20on%3A%0A%0A-%20**Successful%20Solver%20%26%20Protocol%20Development**%20%20%0A%20%20Built%20a%20modular%2C%20real-time%20arbitrage%20solver%20system%20integrating%20Bellman-Ford%20cycle%20detection%2C%20fixed-point%20math%2C%20and%20flash-loan%20execution%20logic.%0A%0A-%20**Uniswap%20v4%20Protocol%20%26%20Intent%20Integration**%20%20%0A%20%20Architected%20an%20intent-based%20swap%20protocol%20built%20on%20Uniswap%20v4%2C%20with%20experience%20in%20**hook%20development**%2C%20**ERC-6909%20resource%20management**%20(based%20on%20_the-compact_)%2C%20and%20**1-inch%20routing%20integration**.%20%20%0A%20%20This%20work%20demonstrates%20both%20technical%20feasibility%20and%20architectural%20insight%20into%20scalable%20solver%20systems.%20A%20detailed%20overview%20of%20this%20**opinionated%20architecture**%20can%20be%20found%20here%3A%20%5BResearch%3A%20Solving%20Architecture%5D(https%3A%2F%2Fwww.jincubator.com%2Fresearch%2Fsolving%2Farchitecture).%0A%0A-%20**Deep%20Research%20%26%20Engineering%20Expertise**%20%20%0A%20%20With%20a%20background%20as%20a%20research%20engineer%2C%20I%E2%80%99ve%20delivered%20DeFi%20infrastructure%2C%20academic-grade%20research%2C%20and%20production%20systems.%20My%20experience%20extends%20to%20zero-knowledge%20primitives%2C%20consensus%20research%2C%20and%20cross-chain%20bridging%20(%5Bjohnwhitton.com%5D(https%3A%2F%2Fjohnwhitton.com%2Fabout)).%0A%0A-%20**Proven%20Technical%20Leadership**%20%20%0A%20%20As%20a%20former%20Engineering%20Manager%2C%20Ecosystem%20Architect%2C%20and%20CTO%2C%20I%20have%20led%20and%20scaled%20engineering%20teams%2C%20driven%20multi-team%20projects%2C%20and%20guided%20ecosystem%20initiatives%20across%20companies%20such%20as%20Harmony%2C%20Eco%2C%20and%20Loyyal%20(%5Bjohnwhitton.com%5D(https%3A%2F%2Fjohnwhitton.com%2Fresume)).%0A%0A%23%23%20Proposed%20Collaboration%0A%0ASimultaneously%20with%20the%20research%2C%20I%20propose%20extending%20the%20existing%20solver%20repository%20to%20include%20**Uniswap%20v4%20hook%20integration**%20aligned%20with%20Tycho%E2%80%99s%20upcoming%20v4%20release%E2%80%94delivering%20strategic%20alignment%20and%20practical%20proof-of-concept.%0A%0A%23%23%20Outcomes%0A%0AThe%20deliverables%20will%20include%3A%0A%0A1.%20A%20research%20framework%20combining%20Tycho%E2%80%99s%20tools%20with%20intent-based%20arbitrage%20strategy.%0A2.%20A%20functional%20Uniswap%20v4%20hook%20integrated%20solver%2C%20illustrating%20real-world%20capability.%0A3.%20A%20reference%20architecture%20for%20multi-chain%2C%20MEV-aware%20solver%20infrastructure.%0A%0AThis%20research%20will%20enrich%20Tycho%E2%80%99s%20ecosystem%20and%20serve%20as%20a%20clear%2C%20professional%20introduction%20to%20key%20stakeholders%20like%20Gauntlet%2C%20FlashBots%2C%20Paradigm%2C%20and%20other%20arbitrage-focused%20entities.%0A%0A%23%23%20References%0A%0A-%20Jincubator%20Research%20Intro%20%E2%80%93%20%5Bhttps%3A%2F%2Fwww.jincubator.com%2Fresearch%2Fintro%5D(https%3A%2F%2Fwww.jincubator.com%2Fresearch%2Fintro)%0A-%20Jincubator%20Solving%20Intro%20%E2%80%93%20%5Bhttps%3A%2F%2Fwww.jincubator.com%2Fresearch%2Fsolving%2Fintro%5D(https%3A%2F%2Fwww.jincubator.com%2Fresearch%2Fsolving%2Fintro)%0A-%20Tycho%20%2B%201inch%20Arbitrage%20Research%20%E2%80%93%20%5Bhttps%3A%2F%2Fwww.jincubator.com%2Fresearch%2Fsolving%2Ftycho1inchNOL%5D(https%3A%2F%2Fwww.jincubator.com%2Fresearch%2Fsolving%2Ftycho1inchNOL)%0A-%20Solving%20Architecture%20(Opinionated)%20%E2%80%93%20%5Bhttps%3A%2F%2Fwww.jincubator.com%2Fresearch%2Fsolving%2Farchitecture%5D(https%3A%2F%2Fwww.jincubator.com%2Fresearch%2Fsolving%2Farchitecture)%0A-%20About%20John%20Whitton%20%E2%80%93%20%5Bhttps%3A%2F%2Fjohnwhitton.com%2Fabout%5D(https%3A%2F%2Fjohnwhitton.com%2Fabout)%0A-%20Resume%20%E2%80%93%20%5Bhttps%3A%2F%2Fjohnwhitton.com%2Fresume%5D(https%3A%2F%2Fjohnwhitton.com%2Fresume)%0A",lastUpdatedAt:1757298265e3},{lazy:()=>J(()=>import("./solving-arbitrage-Bx_idCK2.js"),[]),path:"/proposals/solving-arbitrage.html",type:"mdx",filePath:"proposals/solving-arbitrage.mdx",content:"%23%20Research%20Proposal%3A%20Solvers%2C%20Arbitrage%20%26%20Intent-Based%20Protocols%0A%0A%23%23%20Background%0A%0AOver%20the%20past%20eight%20months%2C%20I%E2%80%99ve%20developed%20both%20a%20solver%20engine%20and%20an%20intent-based%20swap%20protocol%20integrating%20Uniswap%20v4.%20My%20work%20spans%20arbitrage%20detection%2Fexecution%2C%20real-time%20streaming%2C%20solver%20frameworks%2C%20and%20resource-efficient%20intent%20mechanisms.%20Current%20implementations%20and%20documentation%20are%20accessible%20via%20%5Bjincubator.com%2Fresearch%5D(https%3A%2F%2Fwww.jincubator.com%2Fresearch).%0A%0A%23%23%20Proposal%20Scope%0A%0AThe%20aim%20of%20this%20research%20is%20twofold%3A%20deepen%20the%20integration%20of%20solver-driven%20arbitrage%20with%20Tycho%E2%80%99s%20ecosystem%2C%20and%20extend%20the%20protocol%20footprint%20to%20Uniswap%20v4%20and%20beyond.%0A%0A%23%23%23%20Key%20Focus%20Areas%0A%0A-%20**Tycho%20Streaming%20%26%20Simulation**%20%20%0A%20%20Integrate%20Tycho%E2%80%99s%20streaming%20for%20real-time%20arbitrage%20opportunity%20intake%2C%20and%20Tycho%E2%80%99s%20simulation%20for%20stress-testing%20and%20MEV%20strategy%20modeling.%0A%0A-%20**Arbitrage%20Landscape%20Mapping**%20%20%0A%20%20Use%20Tycho-enabled%20simulations%2C%20dynamic%20graph%20construction%2C%20and%20routing%20algorithms%20to%20map%20multi-chain%20arbitrage%20opportunities%20across%20Ethereum%2C%20Base%2C%20and%20Unichain.%0A%0A-%20**Flash%20Loan%20Arbitrage%20Best%20Practices**%20%20%0A%20%20Develop%20standardized%2C%20gas-efficient%2C%20risk-mitigated%20solver%20strategies%20for%20flash-loan%20driven%20arbitrage.%0A%0A-%20**Uniswap%20v4%20Booster%20Pools**%20%20%0A%20%20Design%20and%20prototype%20%E2%80%9Cafter-swap%20self-arbitrage%E2%80%9D%20hooks%20that%20both%20optimize%20swap%20execution%20and%20act%20as%20built-in%20liquidity%20boosters%20within%20v4%20pools.%0A%0A%23%23%20Why%20Me%3F%0A%0AI%20am%20exceptionally%20well-positioned%20to%20lead%20this%20research%20based%20on%3A%0A%0A-%20**Successful%20Solver%20%26%20Protocol%20Development**%20%20%0A%20%20Built%20a%20modular%2C%20real-time%20arbitrage%20solver%20system%20integrating%20Bellman-Ford%20cycle%20detection%2C%20fixed-point%20math%2C%20and%20flash-loan%20execution%20logic.%0A%0A-%20**Uniswap%20v4%20Protocol%20%26%20Intent%20Integration**%20%20%0A%20%20Architected%20an%20intent-based%20swap%20protocol%20built%20on%20Uniswap%20v4%2C%20with%20experience%20in%20**hook%20development**%2C%20**ERC-6909%20resource%20management**%20(based%20on%20_the-compact_)%2C%20and%20**1-inch%20routing%20integration**.%20%20%0A%20%20This%20work%20demonstrates%20both%20technical%20feasibility%20and%20architectural%20insight%20into%20scalable%20solver%20systems.%20A%20detailed%20overview%20of%20this%20**opinionated%20architecture**%20can%20be%20found%20here%3A%20%5BResearch%3A%20Solving%20Architecture%5D(https%3A%2F%2Fwww.jincubator.com%2Fresearch%2Fsolving%2Farchitecture).%0A%0A-%20**Deep%20Research%20%26%20Engineering%20Expertise**%20%20%0A%20%20With%20a%20background%20as%20a%20research%20engineer%2C%20I%E2%80%99ve%20delivered%20DeFi%20infrastructure%2C%20academic-grade%20research%2C%20and%20production%20systems.%20My%20experience%20extends%20to%20zero-knowledge%20primitives%2C%20consensus%20research%2C%20and%20cross-chain%20bridging%20(%5Bjohnwhitton.com%5D(https%3A%2F%2Fjohnwhitton.com%2Fabout)).%0A%0A-%20**Proven%20Technical%20Leadership**%20%20%0A%20%20As%20a%20former%20Engineering%20Manager%2C%20Ecosystem%20Architect%2C%20and%20CTO%2C%20I%20have%20led%20and%20scaled%20engineering%20teams%2C%20driven%20multi-team%20projects%2C%20and%20guided%20ecosystem%20initiatives%20across%20companies%20such%20as%20Harmony%2C%20Eco%2C%20and%20Loyyal%20(%5Bjohnwhitton.com%5D(https%3A%2F%2Fjohnwhitton.com%2Fresume)).%0A%0A%23%23%20Proposed%20Collaboration%0A%0ASimultaneously%20with%20the%20research%2C%20I%20propose%20extending%20the%20existing%20solver%20repository%20to%20include%20**Uniswap%20v4%20hook%20integration**%20aligned%20with%20Tycho%E2%80%99s%20upcoming%20v4%20release%E2%80%94delivering%20strategic%20alignment%20and%20practical%20proof-of-concept.%0A%0A%23%23%20Outcomes%0A%0AThe%20deliverables%20will%20include%3A%0A%0A1.%20A%20research%20framework%20combining%20Tycho%E2%80%99s%20tools%20with%20intent-based%20arbitrage%20strategy.%0A2.%20A%20functional%20Uniswap%20v4%20hook%20integrated%20solver%2C%20illustrating%20real-world%20capability.%0A3.%20A%20reference%20architecture%20for%20multi-chain%2C%20MEV-aware%20solver%20infrastructure.%0A%0AThis%20research%20will%20enrich%20Tycho%E2%80%99s%20ecosystem%20and%20serve%20as%20a%20clear%2C%20professional%20introduction%20to%20key%20stakeholders%20like%20Gauntlet%2C%20FlashBots%2C%20Paradigm%2C%20and%20other%20arbitrage-focused%20entities.%0A%0A%23%23%20References%0A%0A-%20Jincubator%20Research%20Intro%20%E2%80%93%20%5Bhttps%3A%2F%2Fwww.jincubator.com%2Fresearch%2Fintro%5D(https%3A%2F%2Fwww.jincubator.com%2Fresearch%2Fintro)%0A-%20Jincubator%20Solving%20Intro%20%E2%80%93%20%5Bhttps%3A%2F%2Fwww.jincubator.com%2Fresearch%2Fsolving%2Fintro%5D(https%3A%2F%2Fwww.jincubator.com%2Fresearch%2Fsolving%2Fintro)%0A-%20Tycho%20%2B%201inch%20Arbitrage%20Research%20%E2%80%93%20%5Bhttps%3A%2F%2Fwww.jincubator.com%2Fresearch%2Fsolving%2Ftycho1inchNOL%5D(https%3A%2F%2Fwww.jincubator.com%2Fresearch%2Fsolving%2Ftycho1inchNOL)%0A-%20Solving%20Architecture%20(Opinionated)%20%E2%80%93%20%5Bhttps%3A%2F%2Fwww.jincubator.com%2Fresearch%2Fsolving%2Farchitecture%5D(https%3A%2F%2Fwww.jincubator.com%2Fresearch%2Fsolving%2Farchitecture)%0A-%20About%20John%20Whitton%20%E2%80%93%20%5Bhttps%3A%2F%2Fjohnwhitton.com%2Fabout%5D(https%3A%2F%2Fjohnwhitton.com%2Fabout)%0A-%20Resume%20%E2%80%93%20%5Bhttps%3A%2F%2Fjohnwhitton.com%2Fresume%5D(https%3A%2F%2Fjohnwhitton.com%2Fresume)%0A",lastUpdatedAt:1757298265e3},{lazy:()=>J(()=>import("./sunrise-OLmKzSHZ.js"),[]),path:"/proposals/sunrise",type:"mdx",filePath:"proposals/sunrise.mdx",content:"%23%20Sunrise%20DEX%0A%0A%23%23%20Project%20Overview%0A%0A%23%23%23%20Overview%0A%0A%5BLink%20to%20original%20W3%20Grant%20Proposal%5D(https%3A%2F%2Fgithub.com%2Fw3f%2FGrants-Program%2Fblob%2Fmaster%2Fapplications%2Fsunrise-dex.md)%0A%0ASunrise%20is%20building%20a%20decentralized%20protocol%20on%20a%20dedicated%20Polkadot%20parachain.%20We%20will%20enable%20deep%20liquidity%20starting%20with%20support%20for%20tokens%20on%20Sunrise%20Chain%2C%20Ethereum%2C%20and%20all%20parachains.%20Sunrise%20will%20support%20additional%20blockchains%20in%20the%20future.%0A%0AOur%20Decentralized%20EXchange%20(DEX)%20uses%20a%20bonding%20curve%20factory%20which%20supports%20liquidity%20pools%20for%20unpegged%20tokens%20such%20as%20ETH%2CDOT%2C%20LINK%2C%20ACA%20etc.%20Sunrise%20will%20support%20stable%20coin%20pools%20offering%20very%20low%20slippage%20and%20fees%20(e.g.%20DAI-USDT)%20and%20in%20the%20future%20stable%20coins%20that%20have%20different%20pegs%20(e.g.%20srsUSD-srsCNY).%0A%0A!%5BSunrise%20Chain%20Vision%5D(https%3A%2F%2Fraw.githubusercontent.com%2Fsunriseprotocol%2Fwiki%2Fmain%2Fassets%2FSunrise%2520Chain.png%20%22Sunrise%20Chain%22)%0A**Deployment**%0A%0AThe%20first%20phase%20of%20the%20project%20will%20be%20built%20and%20deployed%20on%20a%20parachain%20via%20Rococo.%20Our%20standalone%20parachain%20%5BSunrise%20Protocol%20Daybreak%5D(https%3A%2F%2Fdaybreakexplorer.sunriseprotocol.com%2F)%20will%20be%20the%20precursor.%20Sunrise%20is%20also%20evaluating%20the%20ability%20to%20deploy%20an%20Intrachain%20DEX%20(running%20on%20our%20partners)%20parachain%2C%20this%20will%20be%20done%20either%20publishing%20a%20DEX%20crate%2C%20updating%20%5BORML%20libraries%5D(https%3A%2F%2Fgithub.com%2Fopen-web3-stack%2Fopen-runtime-module-library%2Ftree%2Fmaster)%2C%20or%20directly%20contributing%20to%20partners%20codebase%20with%20a%20pull%20request%20to%20their%20repository.%0A%0A**Polkadot%20Ecosystem%20Benefits**%0A%0ASunrise%20protocol%20lays%20the%20foundation%20for%20the%20seamless%20exchange%20of%20assets%2C%20efficiency%20of%20stable%20coin%20transactions%20and%20advanced%20aggregation.%20Our%20product%20will%20attract%20the%20decentralized%20finance%20(DeFi)%20community%20and%20provide%20more%20liquidity%20that%20helps%20drive%20increased%20adoption%20for%20the%20Polkadot%20Network.%20The%20DEX%20is%20multi-platform%20and%20bridges%20across%20parachains%20allowing%20the%20community%20to%20access%20the%20latest%20protocols%20and%20initiatives.%20Sunrise%20has%20identified%20numerous%20gaps%20to%20capitalize%20on%2C%20in%20relation%20to%20the%20infrastructure%20of%20the%20most%20popular%20decentralized%20exchanges%2C%20which%20includes%20liquidity%20pool%20customization%2C%20limit%20order%20functionality%20and%20compliance%20functionality.%0A%0A**Why%20are%20we%20creating%20this%20project**%0A%0AThis%20project%20provides%20a%20foundational%20layer%20for%20the%20Sunrise%20Protocol.%0A%0AOur%20team%20consists%20of%20founders%2C%20researchers%2C%20builders%20and%20strategists%20for%20blockchain%20and%20decentralized%20finance.%20We%20have%20built%20a%20layer%201%20blockchain%20at%20Harmony%20(public%20blockchain%20with%20sharding%20and%20open%20staking)%2C%20have%20launched%20private%20permissioned%20chains%20on%20ethereum%20and%20hyperledger%20fabric%20and%20have%20been%20actively%20involved%20in%20the%20Decentralized%20Finance%20community.%20We%20have%20chosen%20to%20build%20this%20project%20on%20Polkadot%20because%20Substrate%20allows%20us%20to%20focus%20on%20the%20Protocol%20and%20business%20logic.%20We%20feel%20the%20Partners%20in%20the%20ecosystem%20are%20laying%20the%20foundation%20for%20interoperable%20decentralization%20and%20we%20want%20to%20contribute%20to%20the%20community.%0A%0A%23%23%23%20Project%20Details%0A%0APlease%20see%20%5Bthis%20product%20overview%20presentation%5D(https%3A%2F%2Fabout.sunriseprotocol.com)%20and%20%5BSunrise%20Protocol%20Whitepaper%5D(https%3A%2F%2Fwhitepaper.sunriseprotocol.com)%20for%20an%20overview%20of%20the%20Sunrise%20Protocol%20vision.%0A%0A**This%20Project%20is%20specifically%20for%20the%20Sunrise%20Dex%20Factory%20which%20is%20a%20foundational%20component%20for%20the%20Sunrise%20Protocol**%0A%0AThe%20Sunrise%20Decentralized%20Exchange%20(DEX)%20combines%20the%20use%20of%20multiple%20bonding%20curves%20and%20price%20oracles%20to%20support%20liquidity%20pools%20for%20unpegged%20tokens%2C%20and%20stable%20coin%20pools.%20Below%20is%20an%20excerpt%20from%20the%20%5BSunrise%20Protocol%20Whitepaper%5D(https%3A%2F%2Fwhitepaper.sunriseprotocol.com)%0A%0A%23%23%23%23%203.%20Sunrise%20DEX%20Factory%0A%0AThe%20Sunrise%20DEX%20Factory%20will%20support%20the%20creation%20of%20Liquidity%20Pool%20Contracts.%20The%20bonding%20curves%20for%20these%20liquidity%20pools%2C%20will%20be%20slightly%20different%20depending%20on%20the%20use%20case.%20Each%20exchange%20contract%20can%20be%20configured%20to%20the%20specific%20needs%20of%20the%20liquidity%20pool.%0A%0A%23%23%23%23%203.1%20Sunrise%20Factory%2FRegistry%20Contract%0A%0AAll%20contracts%20will%20have%20a%20uniform%20interface%20for%20liquidity%20management%20and%20swap%20management.%20Thus%20abstracting%20away%20the%20underlying%20complexity%20from%20liquidity%20providers%20and%20traders%2C%20giving%20them%20a%20uniform%20mechanism%20to%20interact%20with%20all%20Sunrise%20liquidity%20pools.%0A%0ABelow%20is%20a%20list%20of%20the%20configuration%20parameters%20input%20into%20the%20factory%20contract%20when%20creating%20an%20exchange%20contract.%0A%0A**Sunrise%20Protocol%20Seven%20Key%20Parameters**%0A%0A1.%20**T**%20Token%20Weight%20%3A%20Weight%20of%20Token%20in%20the%20Pool%0A%20%20%20-%20Tokens%3A%20**T**.%20Assume%20there%20are%20**n**%20type%20of%20tokens%20in%20one%20liquidity%20pool%2C%20we%20denote%20them%20as%20**(T1%2CT2%2C...%20Tn)**.%0A%20%20%20-%20weight%20parameter%3A%20**Wi(0%26lt%3B%3DWi%26lt%3B%3D1)**%20is%20the%20parameter%20of%20token%20**i**%20in%20our%20model%2C%20which%20is%20a%20constant%20defined%20when%20creating%20the%20pool.%20We%20always%20assume%20**the%20sum%20of%20Wi%20%3D1**.%0A%20%20%20-%20initial%20balance%3A%20**(x1%2Cx2%2C...%2Cxn)**%20are%20the%20initial%20amounts%20a%20liquidity%20provider%20puts%20into%20a%20liquidity%20pool.%0A2.%20**epsilon**%20Fees%20%3A%20Liquidity%20Provider%20and%20Protocol%20Fees%0A3.%20**beta**%20Depth%20%3A%20Depth%20of%20Pool%20before%20slippage%20occurs%0A4.%20**Delta**%20Slippage%3A%20The%20rate%20at%20which%20price%20slippage%20increases%0A5.%20**Alpha**%20Max%20Min%3A%20Maximum%20and%20Minimum%20Token%20allocation%20for%20each%20reserve%0A6.%20**lambda**%20Dynamic%20fees%20%3A%20Unbalancing%20Penalty%20Fees%0A7.%20**k**%20Market%20Price%20Alignment%3A%20Alignment%20of%20the%20Bonding%20Curve%20with%20Price%20Oracle%0A%0A!%5BSunrise%20Bonding%20Curves%5D(https%3A%2F%2Fraw.githubusercontent.com%2Fsunriseprotocol%2Fwiki%2Fmain%2Fassets%2FSunrise%2520Bonding%2520Curves.png%20%22Sunrise%20Bonding%20Curves%22)%0A**The%20three%20types%20of%20bonding%20curves%20use%20the%20following%20variables**%0A%0A3.1%20MultiToken%20Bonding%20Curve%20(1%2C2)%0A%0A3.2%20StableCoin%20Bonding%20Curve%20(1%2C2%2C3%2C4%2C5%2C6)%0A%0A3.3.%20Proactive%20Bonding%20Curve%20(1%2C2%2C3%2C4%2C5%2C6%2C7)%0A%0A**There%20will%20be%20default%20values%20for%20each%20of%20these%20parameters%20based%20on%20the%20Bonding%20Curve%20Type.**%0A%0AWhen%20not%20utilized%20the%20variable%20will%20be%20set%20to%20a%20default%20value%20having%20a%20nonconsequential%20effect.%0A%0A%23%23%23%23%20Sunrise%20Protocol%20Overview%0A%0ASunrise%20Protocol%20is%20creating%20an%20open%20decentralized%20financial%20framework.%20Sunrise%20is%20building%20a%20complete%20suite%20of%20financial%20tools%20and%20non%20custodial%20services%20within%20a%20compliant%20framework%20.%20This%20will%20be%20done%20in%20a%20trustless%20decentralized%20environment.%20With%20the%20goal%20of%20disrupting%20and%20streamlining%20current%20solutions%20offered%20by%20Centralized%20Exchanges%20and%20International%20remittances.%0A%0A**The%20following%20information%20is%20a%20short%20summary%20of%20the%20other%20features%20of%20the%20protocol**%0A%0ASunrise%20Bridge%20is%20used%20to%20create%20a%20multi-platform%2C%20multi-asset%20protocol%20using%20cryptocurrencies%20(tokens)%20as%20building%20blocks.%20We%20will%20start%20with%20Polkadot%20parachains%2C%20ERC-20%20tokens%20and%20then%20other%20blockchains.%0A%0AOnce%20the%20primitives%20of%20a%20multi-platform%2C%20multi-asset%20DEX%20have%20been%20realized%2C%20decentralized%20financial%20protocols%20can%20leverage%20this%20for%20their%20liquidity%20needs.%0A%0ASunrise%20Protocol%20will%20then%20add%20limit%20orders%2C%20a%20compliance%20framework%20and%20smart%20wallet%20functionality%20to%20give%20cost%20effective%20alternatives%20to%20Centralized%20Exchanges%20and%20International%20remittances.%0A%0ABelow%20are%20the%20high%20level%20modules%20that%20can%20be%20integrated%20into%20the%20Sunrise%20Ecosystem.%20A%20number%20of%20these%20will%20be%20implemented%20by%20our%20partners%20and%20the%20community%2C%20some%20of%20which%20may%20be%20subsidized%20by%20Sunrise%20Protocol%20grants.%0A%0A!%5BSunrise%20Ecosystem%5D(https%3A%2F%2Fraw.githubusercontent.com%2Fsunriseprotocol%2Fwiki%2Fmain%2Fassets%2FSunrise%2520Ecosystem.png%20%22Sunrise%20Ecosystem%22)%0A%0A%23%23%23%20Ecosystem%20Fit%0A%0ASunrise%20Protocol%20is%20building%20an%20open%20decentralized%20framework.%20This%20grant%20application%20is%20for%20the%20Sunrise%20DEX%2C%20a%20sub-component%20of%20the%20larger%20Sunrise%20Protocol.%0A%0AWe%20have%20done%20a%20comprehensive%20review%20of%20the%20other%20DEX%20projects%20which%20include%20Polkaswap%2C%20Reef%2C%20Mangata%2C%20HydraDx%2C%20Polkadex%2C%20Subdex.%20We%20see%20there%20are%20gaps%20in%20the%20current%20DEX%20Approaches%2C%20these%20include%20stable%20coin%20support%2C%20limit%20order%20functionality%20and%20compliance%20functionality.%20We%20feel%20that%20these%20DEX%20projects%20cannot%20be%20leveraged%20as%20part%20of%20our%20protocol%20due%20to%20the%20mentioned%20gaps%20and%20the%20different%20technical%20approaches.%0A%0AWe%20are%20the%20only%20protocol%20to%20offer%20multi-asset%20pools%2C%20optimized%20stable%20coin%20support%2C%20multiple%20bonding%20curves%2C%20adjustable%20transaction%20fees%20and%20limit%20orders.%20We%20combine%20this%20with%20bridging%20capabilities%20for%20multi-platform%20support%2C%20limit%20order%20capabilities%2C%20combinatorial%20staking%20for%20better%20rewards%2C%20synthetic%20asset%20support%2C%20a%20compliance%20framework%20and%20smart%20wallet%20functionality%20to%20drive%20mass%20adoption.%0A%0AThis%20application%20is%20specific%20to%20the%20DEX%20Pallet%20and%20lays%20the%20foundation%20for%20the%20larger%20vision%20which%20can%20be%20seen%20in%20our%20%5Bdraft%20white%20paper%5D(https%3A%2F%2Fwhitepaper.sunriseprotocol.com).%0A%0A%23%23%23%20DEX%20Evolution%0A%0A!%5BSunrise%20Reference%20Protocols%5D(https%3A%2F%2Fraw.githubusercontent.com%2Fsunriseprotocol%2Fwiki%2Fmain%2Fassets%2FSunrise%2520Reference%2520Protocols.png%20%22Sunrise%20Reference%20Protocols%22)%0A%0AThe%20following%20protocols%20offer%20specific%20functionality%20and%20are%20often%20leaders%20in%20their%20respective%20areas.%20The%20points%20below%20walk%20through%20a%20chronological%20evolution%20of%20DEX%20and%20cross-chain%20capabilities.%0A%0A-%20Uniswap%20introduced%20a%20simple%20bonding%20curve%20supporting%20two%20token%20liquidity%20pools.%0A-%20It%20later%20introduced%20it%E2%80%99s%20UNI%20token%20which%20is%20now%20table%20stakes%20for%20all%20Decentralized%20Exchanges%2C%20Sunrise%20Protocol%20extends%20this%20combining%20trading%2C%20protocol%20and%20liquidity%20balance%20rewards.%0A-%20Multi%20Asset%20Pools%20were%20introduced%20by%20Balancer%20and%20adopted%20by%20Curve%20who%20introduced%20the%20first%20bonding%20curve%20to%20support%20stable%20coins.%0A-%20Price%20Oracles%20being%20utilized%20by%20Automated%20Market%20Makers%20are%20being%20evaluated%20by%20Sunrise%20and%20DodoEx%20wrote%20a%20good%20white%20paper%20about%20the%20topic.%0A-%20Sunrise%20protocol%20adds%20to%20this%20with%20multipe%20bonding%20curves%20which%20supports%20multi%20asset%20pools%2C%20stable%20coins%2C%20and%20traditional%20tokens.%0A-%20Our%20Liquidity%20Providers%20can%20set%20the%20transaction%20fees%20when%20creating%20a%20Liquidity%20Pool%20similar%20to%20Balancer%20and%20Curve.%0A-%20We%20also%20introduce%20limit%20orders%20powered%20by%20our%20unique%20off-chain%20worker%20capabilities.%0A-%20Polkadot%20and%20Ethereum%20are%20supported%20initially%20with%20more%20platforms%20to%20come%20powered%20by%20our%20integrated%20bridging%20technology.%0A-%20Reef%20and%20PolkaDex%20are%20also%20building%20on%20Polkadot%20which%20provides%20the%20ability%20to%20create%20dedicated%20parachains.%0A-%20A%20Compliance%20Framework%20will%20be%20leveraged%20by%20Sunrise%20Protocol%20to%20provide%20cost%20effective%20solutions%20which%20compete%20with%20Centralized%20Exchanges%20and%20International%20remittances.%0A-%20Smart%20Wallet%20Functionality%20will%20also%20be%20provided%20to%20simplify%20the%20user%20experience%20and%20drive%20mass%20adoption.%0A%0A%23%23%20Team%20%3Abusts_in_silhouette%3A%0A%0A%23%23%23%20Team%20members%0A%0AJohn%20and%20Geoff%20will%20be%20the%20major%20contributors%20for%20this%20phase%20of%20Sunrise%20Protocol%0A%0A-%20John%20Whitton%3A%20Sunrise%20Protocol%20Founder%0A-%20Geoff%3A%20Sunrise%20Protocol%20Core%20Protocol%20Engineer%20and%20Solution%20Architect%0A%0AAdditional%20team%20members%20will%20be%20announced%20shortly%20and%20contributing%20to%20this%20and%20other%20components%20of%20Sunrise%20Protocol%0A%0A%23%23%23%20Contact%0A%0A-%20**Contact%20Name%3A**%20John%20Whitton%0A-%20**Contact%20Email%3A**%20john%40sunriseprotocol.com%0A-%20**Website%3A**%20%5Bhttps%3A%2F%2Fsunriseprotocol.com%5D(https%3A%2F%2Fsunriseprotocol.com)%0A%0A%23%23%23%20Legal%20Structure%0A%0A-%20**Registered%20Address%3A**%20N%2FA%0A-%20**Registered%20Legal%20Entity%3A**%20N%2FA%0A%0A%23%23%23%20Team's%20experience%0A%0AThe%20team%20all%20have%20strong%20experience%20building%20Layer%201%20Blockchain%20Platforms%20and%20Decentralized%20Financial%20Protocols.%0A%0ARelevant%20Contributions%20are%0A%0A**John%20Whitton%3A**%20John%20Whiton%20has%20been%20passionate%20about%20software%20and%20technology%20since%20high%20school.%20He%20graduated%20from%20the%20University%20of%20Queensland%20in%20Computer%20Science%20and%20travelled%20globally%20leading%20the%20design%20and%20development%20of%20many%20Service%20Oriented%20Architectures.%20He%20has%20built%20private%20permissioned%20blockchains%20on%20Ethereum%20and%20Hypersphere%20Fabric%2C%20partnering%20with%20firms%20such%20as%20IBM%20and%20Deloitte.%20He%20then%20grew%20the%20ecosystem%20for%20a%20public%20blockchain%20at%20Harmony.%20He%20has%20worked%20extensively%20with%20decentralized%20financial%20protocols%2C%20bringing%20a%20unique%20perspective%20by%20combining%20his%20extensive%20corporate%20experience%20with%20IBM%2C%20SAP%2C%20Deloitte%20and%20KPMG%20with%20the%20disruptive%20financial%20models%20being%20developed%20on%20blockchain.%0A%0AJohn%20originally%20met%20Gavin%20Wood%20in%202016%20and%20worked%20briefly%20with%20Tomasz%20Drwi%C4%99ga%20on%20Parity%20before%20taking%20a%20role%20as%20CTO%20of%20a%20small%20Blockchain%20Startup%20based%20on%20Ethereum%20which%20then%20moved%20to%20Hyperledger.%20He%20did%20further%20%5Bresearch%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fblockchain-eval%2Fblob%2Fmaster%2Fsubstrate.md)%20into%20Polkadot%20and%20Substrate%20in%202019%20and%20did%20strategy%20work%20on%20smart%20contract%20protocols%20and%20digital%20assets%20in%202019%20including%20working%20on%20Cowri%20(now%20shell%20protocol)%2Ca%20stablecoin%20exchange%20protocol%2C%20before%20taking%20a%20role%20with%20Harmony%20as%20an%20Ecosystem%20Architect%20with%20a%20focus%20on%20Developer%20tooling%20and%20Ecosystem%20growth.%20At%20Harmony%2C%20John%20helped%20launch%20the%20Mainnet%20while%20also%20being%20intimately%20involved%20with%20hiring%20decisions%20and%20business%20strategy.%20His%20technical%20Portfolio%20is%20%5Bhere%5D(https%3A%2F%2Fjohnwhitton.dev%2Fdocs%2Fdocs%2Flearn%2Fportfolio%2F)%20and%20more%20information%20can%20be%20found%20on%20%5Bjohnwhitton.dev%5D(https%3A%2F%2Fjohnwhitton.dev%2F).%0A%0A**Geoff%3A**%20Prior%20to%20joining%20Sunrise%20Protocol%20where%20Geoff%20leads%20the%20SRS%20token%20design%20and%20works%20on%20core%20protocol%20development.%20Geoff%20worked%20as%20a%20Blockchain%20Engineer%20and%20Research%20analyst%2C%20leading%20technical%20due%20diligence%20on%20Decentralized%20Financial%20Protocols%20and%20Layer%201%20Protocol%20offerings.%20He%20has%20reviewed%20thousands%20of%20whitepapers%20and%20tokenomics%20models.%20He%20has%20mentored%20many%20founders%20and%20blockchain%20startups%20and%20created%20investor%20briefings%20including%20strategy%20review%2C%20market%20fit%20and%20technical%20due%20diligence.%20Technical%20contributions%20include%20Decentralized%20Financial%20Protocols%2C%20Layer%202%20Solutions%2C%20Decentralized%20Identity%20and%20encrypted%20data%20storage%20as%20well%20as%20protocol%20and%20infrastructure%20work%20such%20as%20consensus%20algorithms%2C%20sharding%2C%20smart%20contracts%20design%20and%20standards%20(Open%20Zeppelin).%20He%20has%20done%20extensive%20smart%20contract%20design%20and%20development%20with%20an%20in%20depth%20knowledge%20of%20decentralized%20financial%20protocols%20and%20tooling%3B%20including%20prototyping%20and%20development%20of%20DeFi%20Standards%20across%20multiple%20platforms.%0A%0A%23%23%23%20Team%20Code%20Repos%0A%0A-%20%5BSunrise%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fsunriseprotocol)%0A-%20%5BJohn%20Whitton%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton)%0A-%20%5BGeoff%5D(https%3A%2F%2Fgithub.com%2Fgdevsrs)%0A%0A%23%23%23%20Team%20LinkedIn%20Profiles%0A%0A-%20%5BJohn%20Whitton%5D(https%3A%2F%2Fwww.linkedin.com%2Fin%2Fjohnwhitton%2F)%0A-%20%5BGeoff%5D(https%3A%2F%2Fwww.linkedin.com%2Fin%2Fgeoff-s-9417b31bb%2F)%0A%0A%23%23%20Development%20Roadmap%20%3Anut_and_bolt%3A%0A%0AIn%20this%20phase%20we%20plan%20to%20develop%20the%20initial%20decentralized%20exchange%20pallet%20for%20the%20Sunrise%20Protocol.%0A%0AThis%20application%20is%20specific%20to%20the%20DEX%20Pallet%20and%20lays%20the%20foundation%20for%20the%20larger%20vision%20which%20can%20be%20seen%20in%20our%20%5Bdraft%20white%20paper%5D(https%3A%2F%2Fwhitepaper.sunriseprotocol.com).%0A%0A%23%23%23%20Overview%0A%0A-%20**Total%20Estimated%20Duration%3A**%203%20Months%0A-%20**Full-time%20equivalent%20(FTE)%3A**%202%20FTE%0A-%20**Total%20Costs%3A**%200.9%20BTC%0A%0A%23%23%23%20Milestone%201%3A%20Framework%20design%20and%20minimal%20DEX%20Pallets%0A%0A-%20Estimated%20Duration%3A%201%20month%0A-%20FTE%3A%202%0A-%20Costs%3A%200.4%20BTC%0A%0A%7C%20Number%20%7C%20Deliverable%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Specificationa.%20%20%20%20%7C%20License%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Apacheb.%20%20%20%20%7C%20Documentation%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20We%20will%20provide%20both%20inline%20documentation%20of%20the%20code%20and%20a%20basic%20tutorial%20that%20explains%20how%20a%20user%20can%20(for%20example)%20spin%20up%20one%20of%20our%20Substrate%20nodes.%20Once%20the%20node%20is%20up%2C%20it%20will%20be%20possible%20to%20send%20test%20transactions%20that%20will%20show%20how%20to%20create%20a%20liquidity%20pool%20and%20provision%20funds%20to%20itc.%20%20%20%20%7C%20Testing%20Guide%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20The%20code%20will%20have%20proper%20unit-test%20coverage%20(e.g.%2090%25)%20to%20ensure%20functionality%20and%20robustness.%20In%20the%20guide%20we%20will%20describe%20how%20to%20run%20these%20tests.%3Cbr%20%2F%3EThe%20tests%20will%20cover%20basic%20functionlity%20like%3Cbr%20%2F%3Ei.%20Creating%20a%20Liquidity%20Pool%3Cbr%20%2F%3Eii.%20Adding%20and%20removing%20liquidity%3Cbr%20%2F%3Eiii.%20Swapping%20based%20on%20exact%20amount%20in%20and%20exact%20amount%20outulti-currency%20Baseline%20%20%20%7C%20Support%20Multiple%20Currencies%20being%20traded%20this%20will%20leverage%20and%20expand%20upon%20the%20following%20from%20%5BFRAME%5D(https%3A%2F%2Fsubstrate.dev%2Fdocs%2Fen%2Fknowledgebase%2Fruntime%2Fframe)%20and%20%5BORML%5D(https%3A%2F%2Fgithub.com%2Fopen-web3-stack%2Fopen-runtime-module-library)%3Cbr%20%2F%3E%5BFRAME%3Asupport%3Acurrency%20trait%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fframe%2Fsupport%2Fsrc%2Ftraits.rs%23L858)%3Cbr%20%2F%3E%5BFRAME%3Apallet-balances%5D(https%3A%2F%2Fcrates.io%2Fcrates%2Fpallet-balances)%3Cbr%20%2F%3E%5Borml-tokens%5D(https%3A%2F%2Fgithub.com%2Fopen-web3-stack%2Fopen-runtime-module-library%2Fblob%2Fmaster%2Ftokens%2Fsrc%2Flib.rs)%3Cbr%20%2F%3E%5Borml-currencies%5D(https%3A%2F%2Fgithub.com%2Fopen-web3-stack%2Fopen-runtime-module-library%2Fblob%2Fmaster%2Fcurrencies%2Fsrc%2Flib.rs)%20%7C%0A%7C%202.%20%20%20%20%20%7C%20Pallet%3A%20sunrise-dex%20%20%20%20%20%20%20%7C%20We%20will%20create%20a%20Pallet%20that%20will%20implement%20a%20simplified%20multi-token%20bonding%20curve.%3Cbr%20%2F%3EWe%20will%20begin%20prototyping%20with%20a%20two%20token%20pool%20similar%20to%20%5BuniswapV2Pair%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Funiswap-v2-core%2Fblob%2Fmaster%2Fcontracts%2FUniswapV2Pair.sol)%3Cbr%20%2F%3EThen%20enhance%20to%20a%20multi-token-pool%20see%20%5Bbalancer%20as%20a%20reference%20implementation%5D(https%3A%2F%2Fgithub.com%2Fbalancer-labs%2Fbalancer-core%2Fblob%2Fmaster%2Fcontracts%2FBMath.sola.%20%20%20%20%7C%20Liquidity%20Pool%20Management%20%7C%20We%20will%20create%20functions%20that%20will%20implement%20liquidity%20management%20samples%20included%20below%3Cbr%20%2F%3EPool%20Creation%3Cbr%20%2F%3EAdd%20liquidity%3Cbr%20%2F%3E%20Remove%20Liquidity%20%3Cbr%20%2F%3EPool%20creation%20will%20be%20configurable%20based%20on%20the%20seven%20parameters%20mentioned%20aboveb.%20%20%20%20%7C%20Swap%20Functionality%20%20%20%20%20%20%20%20%7C%20We%20will%20create%20functions%20that%20will%20implement%20swap%20functionality%20including%20samples%20included%20below%3Cbr%20%2F%3E%20calcSpotPrice%3Cbr%20%2F%3EcalcOutGivenIn%3Cbr%20%2F%3EcalcInGivenOut%3Cbr%20%2F%3EcalcPoolOutGivenSingleIn%3Cbr%20%2F%3EcalcSingleInGivenPoolOut%3Cbr%20%2F%3EcalcSingleOutGivenPoolIn%20%3Cbr%20%2F%3EcalcPoolInGivenSingleOut%3Cbr%20%2F%3E%5BReference%20Implementation%20from%20Balancer%5D(https%3A%2F%2Fgithub.com%2Fbalancer-labs%2Fbalancer-core%2Fblob%2Fmaster%2Fcontracts%2FBMath.solc.%20%20%20%20%7C%20Sunrise%20Router%20%20%20%20%20%20%20%20%20%20%20%20%7C%20We%20will%20create%20functions%20that%20will%20implement%20routing%20capabilities%20samples%20included%20below%3Cbr%20%2F%3E%20processPaths%20%3Cbr%20%2F%3E%20processEpsOfInterestMultiHop%3Cbr%20%2F%3E%20getPricesOfInterest%3Cbr%20%2F%3EcalculateBestPathIdsForPricesOfInterest%3Cbr%20%2F%3EgetSwapAmountsForPriceOfInterest%3Cbr%20%2F%3EgetExactSwapAmounts%20%3Cbr%20%2F%3E%5BReference%20Implementation%20from%20Balancer%5D(https%3A%2F%2Fgithub.com%2Fbalancer-labs%2Fbalancer-sor%2Fblob%2Fmaster%2Fsrc%2Fsor.tsubstrate%20chain%20%20%20%20%20%20%20%20%20%20%20%7C%20We%20will%20Host%20this%20on%20our%20Dawn%20Parachain%20on%20Rococco%20or%20our%20%5BDaybreak%20Standalone%20Chain%5D(https%3A%2F%2Fpolkadot.js.org%2Fapps%2F%3Frpc%3Dwss%253A%252F%252Fdaybreak.sunriseprotocol.com%253A443%23%2Fexplorerocker%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20We%20will%20provide%20a%20dockerfile%20to%20demonstrate%20the%20full%20functionality%20of%20our%20chainilestone%202%3A%20Full%20version%20of%20SRS%20model%0A%0A-%20Estimated%20Duration%3A%201%20month%0A-%20FTE%3A%202%0A-%20Costs%3A%200.3%20BTC%0A%0A%7C%20Number%20%7C%20Deliverable%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Specificationa.%20%20%20%20%7C%20License%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Apacheb.%20%20%20%20%7C%20Documentation%20%20%20%20%20%20%20%20%20%20%20%7C%20We%20will%20provide%20both%20inline%20documentation%20of%20the%20code%20and%20a%20basic%20tutorial%20that%20explains%20how%20a%20user%20can%20(for%20example)%20spin%20up%20one%20of%20our%20Substrate%20nodes.%20Once%20the%20node%20is%20up%2C%20it%20will%20be%20possible%20to%20send%20test%20transactions%20that%20will%20show%20how%20to%20create%20a%20liquidity%20pool%20and%20provision%20funds%20to%20it.%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%200c.%20%20%20%20%7C%20Testing%20Guide%20%20%20%20%20%20%20%20%20%20%20%7C%20The%20code%20will%20have%20proper%20unit-test%20coverage%20(e.g.%2090%25)%20to%20ensure%20functionality%20and%20robustness.%20In%20the%20guide%20we%20will%20describe%20how%20to%20run%20these%20tests.%3Cbr%20%2F%3ETests%20will%20include%3Cbr%20%2F%3Ei.%20Creating%20a%20stable%20coin%20pool%3Cbr%20%2F%3Eii.%20Adding%20and%20removing%20liquidity%20%3Cbr%20%2F%3E%20iii.%20Swaps%20%3Cbr%20%2F%3Eiv.Rewards%20staking%20and%20earning%20%3Cbr%20%2F%3Ev.%20Testing%20functionalitly%20using%20explorer%20Extrinsics%20%7C%0A%7C%201.%20%20%20%20%20%7C%20Pallet%3A%20sunrise-dex%20%20%20%20%20%7C%20We%20will%20enhance%20the%20sunrise%20factory%20to%20support%20a%20stable%20coin%20bonding%20curve.%20%3Cbr%20%2F%3EReference%20implementations%20include%20%5Bcurve%5D(https%3A%2F%2Fgithub.com%2Fcurvefi%2Fcurve-contract%2Fblob%2Fmaster%2Fcontracts%2Fpools%2Fusdt%2FStableSwapUSDT.vy%23L74)%20and%20%5Bshellprotocol%5D(https%3A%2F%2Fgithub.com%2Fcowri%2Fshell-solidity-v1%2Fblob%2Fwbtc-renbtc-sbtc-10%2F22%2F2020%2Fsrc%2FShells.sol)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%202.%20%20%20%20%20%7C%20Pallet%3A%20sunrise-rewards%20%7C%20We%20will%20create%20a%20Pallet%20that%20will%20implement%20basic%20reward%20functionality.%3Cbr%20%2F%3E%20Reference%20implementations%20include%20%5Buniswap%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Fliquidity-staker)%2C%20%5Bbalancer%5D(https%3A%2F%2Fgithub.com%2Fbalancer-labs%2Fbal-mining-scripts)%20and%20%5Bsushiswap%5D(https%3A%2F%2Fgithub.com%2Fsushiswap%2Fsushiswap%2Fblob%2Fmaster%2Fcontracts%2FSushiMaker.sol)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%204.%20%20%20%20%20%7C%20Substrate%20chain%20%20%20%20%20%20%20%20%20%7C%20We%20will%20Host%20this%20on%20our%20Dawn%20Parachain%20on%20Rococco%20or%20our%20%5BDaybreak%20Standalone%20Chain%5D(https%3A%2F%2Fpolkadot.js.org%2Fapps%2F%3Frpc%3Dwss%253A%252F%252Fdaybreak.sunriseprotocol.com%253A443%23%2Fexplorerocker%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20We%20will%20provide%20a%20dockerfile%20to%20demonstrate%20the%20full%20functionality%20of%20our%20chain%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%0A**Here%20is%20an%20overview%20of%20the%20Sunrise%20Reward%20design**%0A%0A!%5BSunrise%20Rewards%20Design%5D(https%3A%2F%2Fraw.githubusercontent.com%2Fsunriseprotocol%2Fwiki%2Fmain%2Fassets%2FSunrise%2520Rewards.png%20%22Sunrise%20Rewards%20Design%22)%0A%0A%23%23%23%20Milestone%203%3A%20Sunrise%20DApp%20on%20Test%20Network%0A%0A-%20Estimated%20Duration%3A%201%20month%0A-%20FTE%3A%202%0A-%20Costs%3A%200.2%20BTC%0A%0A%7C%20Number%20%7C%20Deliverable%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Specificationa.%20%20%20%20%7C%20License%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Apacheb.%20%20%20%20%7C%20Documentation%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20We%20will%20provide%20both%20inline%20documentation%20of%20the%20code%20and%20a%20basic%20tutorial%20that%20explains%20how%20a%20user%20can%20deploy%20the%20Sunrise%20Protocol%20DApp%20and%20the%20polakdot-js%20app%20forked%20by%20Sunrise%20Protocol%20with%20DEX%20Capabilities.%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%200c.%20%20%20%20%7C%20Testing%20Guide%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20The%20code%20will%20have%20proper%20unit-test%20coverage%20(e.g.%2090%25)%20to%20ensure%20functionality%20and%20robustness.%20In%20the%20guide%20we%20will%20describe%20how%20to%20run%20these%20tests.%3Cbr%20%2F%3E%20Tests%20will%20include%20%3Cbr%20%2F%3Ei.%20Testing%20all%20functions%20via%20explorer%20using%20extrinsics%20%3Cbr%20%2F%3Eii.%20Testing%20functionality%20via%20the%20DApp%20%7C%0A%7C%201.%20%20%20%20%20%7C%20Polkadot-js%20app%20DEX%20Capabilities%20%20%20%20%20%20%20%20%20%7C%20We%20will%20fork%20polkadot-js%20app%20and%20provide%20dex%20functionalityunrise%20Protocol%20DApp%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20We%20will%20build%20Sunrise%20Protocol%20DApp%20with%20DEX%20Functionalitypplications%20Deployed%20and%20Hosted%20on%20Dawn%20%7C%20We%20will%20deploy%20a%20hosted%20application%20that%20connects%20to%20Dawnubstrate%20chain%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20We%20will%20Host%20this%20on%20our%20Dawn%20Parachain%20on%20Rococco%20or%20our%20%5BDaybreak%20Standalone%20Chain%5D(https%3A%2F%2Fpolkadot.js.org%2Fapps%2F%3Frpc%3Dwss%253A%252F%252Fdaybreak.sunriseprotocol.com%253A443%23%2Fexplorer)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%205.%20%20%20%20%20%7C%20Community%20Education%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20We%20will%20publish%20Medium%20Articles%20in%20English%20and%20Chinese%20and%20also%20posts%20on%20twitter.%20Explaining%20the%20DEX%20Functionalityuture%20plans%0A%0AWe%20plan%20to%20make%20our%20chain%20one%20of%20the%20leading%20parachains%20in%20the%20polkadot%20ecosystem.%20Thus%2C%20there%20is%20still%20a%20lot%20of%20work%20to%20be%20done.%20Here%20are%20a%20few%20of%20them%3A%0A%0A1.%20Support%20for%20Multi-Currencies%20via%20INK%20or%20EVM%20conforming%20to%20%5Bpsp-3%5D(https%3A%2F%2Fgithub.com%2Fw3f%2FPSPs%2Fblob%2Fmaster%2FPSPs%2Fdrafts%2Fpsp-3.md)%0A2.%20Enhance%20Deployment%20capabilities%20of%20the%20Sunrise%20DEX%20for%20other%20chains%20(either%20as%20an%20ORML%20module%20or%20as%20an%20INK%20Contract)%0A3.%20Implement%20SRS%20Incentivization%20Functionality%0A4.%20Bridging%20Functionality%20(XCMP%20Parachain%20Integration%20and%20Ethereum%20snowfork%20like%20integration)%0A5.%20Sunrise%20Order%20Book%20and%20Limit%20Order%20Functionality%0A6.%20Application%20Functionality%20(Sunrise%20Dapp%2C%20polkadot-js%20apps%2C%20wallet)%0A7.%20Governance%20model%20using%20SRS%0A8.%20Parachain%20Functionality%20(Launching%20on%20Rococco%20initially)%0A9.%20Proactive%20Bonding%20curve%20integrated%20with%20price%20oracles%0A10.%20Compliance%20Framework%0A11.%20Smart%20Wallet%20Functionality%0A12.%20Governance%20model%20using%20SRS%0A%0A%23%23%20Additional%20Information%0A%0AWork%20done%20so%20far%20has%20included%20research%20and%20prototyping.%0A%0ANo%20other%20teams%20have%20contributed%20to%20the%20project.%0A%0AThis%20is%20Sunrise%20Protocol's%20first%20grant%20application.%20However%20John%20wrote%20a%20previous%20application%20for%20a%20%5BDEX%20Pallet%5D(https%3A%2F%2Fgithub.com%2Fw3f%2FGeneral-Grants-Program%2Fpull%2F351).%20The%20original%20application%20has%20been%20archived%20and%20the%20vision%20has%20been%20refined%20based%20on%20feedback%20from%20David%20Hawig%20and%20knowledge%20gained%20working%20on%20substrate%20over%20the%20past%20months%20by%20the%20Sunrise%20Protocol%20team.%0A%0AFor%20a%20more%20comprehensive%20Sunrise%20Protocol%20Vision%20please%20read%20the%20following%0A%0A-%20%5BSunrise%20Protocol%20Product%20Overview%5D(https%3A%2F%2Fabout.sunriseprotocol.com)%0A-%20%5BSunrise%20Protocol%20Light%20Paper%5D(https%3A%2F%2Flightpaper.sunriseprotocol.com)%0A-%20%5BSunrise%20Protocol%20White%20Paper%5D(https%3A%2F%2Fwhitepaper.sunriseprotocol.com)%0A%0A**Here%20is%20an%20overview%20of%20the%20Sunrise%20Order%20Book%20design**%0A%0A!%5BSunrise%20Reference%20Protocols%5D(https%3A%2F%2Fraw.githubusercontent.com%2Fsunriseprotocol%2Fwiki%2Fmain%2Fassets%2FSunrise%2520Limit%2520Orders%2520Detailed.png%20%22Sunrise%20Order%20Book%20Design%22)%0A",lastUpdatedAt:1757298265e3},{lazy:()=>J(()=>import("./sunrise-OLmKzSHZ.js"),[]),path:"/proposals/sunrise.html",type:"mdx",filePath:"proposals/sunrise.mdx",content:"%23%20Sunrise%20DEX%0A%0A%23%23%20Project%20Overview%0A%0A%23%23%23%20Overview%0A%0A%5BLink%20to%20original%20W3%20Grant%20Proposal%5D(https%3A%2F%2Fgithub.com%2Fw3f%2FGrants-Program%2Fblob%2Fmaster%2Fapplications%2Fsunrise-dex.md)%0A%0ASunrise%20is%20building%20a%20decentralized%20protocol%20on%20a%20dedicated%20Polkadot%20parachain.%20We%20will%20enable%20deep%20liquidity%20starting%20with%20support%20for%20tokens%20on%20Sunrise%20Chain%2C%20Ethereum%2C%20and%20all%20parachains.%20Sunrise%20will%20support%20additional%20blockchains%20in%20the%20future.%0A%0AOur%20Decentralized%20EXchange%20(DEX)%20uses%20a%20bonding%20curve%20factory%20which%20supports%20liquidity%20pools%20for%20unpegged%20tokens%20such%20as%20ETH%2CDOT%2C%20LINK%2C%20ACA%20etc.%20Sunrise%20will%20support%20stable%20coin%20pools%20offering%20very%20low%20slippage%20and%20fees%20(e.g.%20DAI-USDT)%20and%20in%20the%20future%20stable%20coins%20that%20have%20different%20pegs%20(e.g.%20srsUSD-srsCNY).%0A%0A!%5BSunrise%20Chain%20Vision%5D(https%3A%2F%2Fraw.githubusercontent.com%2Fsunriseprotocol%2Fwiki%2Fmain%2Fassets%2FSunrise%2520Chain.png%20%22Sunrise%20Chain%22)%0A**Deployment**%0A%0AThe%20first%20phase%20of%20the%20project%20will%20be%20built%20and%20deployed%20on%20a%20parachain%20via%20Rococo.%20Our%20standalone%20parachain%20%5BSunrise%20Protocol%20Daybreak%5D(https%3A%2F%2Fdaybreakexplorer.sunriseprotocol.com%2F)%20will%20be%20the%20precursor.%20Sunrise%20is%20also%20evaluating%20the%20ability%20to%20deploy%20an%20Intrachain%20DEX%20(running%20on%20our%20partners)%20parachain%2C%20this%20will%20be%20done%20either%20publishing%20a%20DEX%20crate%2C%20updating%20%5BORML%20libraries%5D(https%3A%2F%2Fgithub.com%2Fopen-web3-stack%2Fopen-runtime-module-library%2Ftree%2Fmaster)%2C%20or%20directly%20contributing%20to%20partners%20codebase%20with%20a%20pull%20request%20to%20their%20repository.%0A%0A**Polkadot%20Ecosystem%20Benefits**%0A%0ASunrise%20protocol%20lays%20the%20foundation%20for%20the%20seamless%20exchange%20of%20assets%2C%20efficiency%20of%20stable%20coin%20transactions%20and%20advanced%20aggregation.%20Our%20product%20will%20attract%20the%20decentralized%20finance%20(DeFi)%20community%20and%20provide%20more%20liquidity%20that%20helps%20drive%20increased%20adoption%20for%20the%20Polkadot%20Network.%20The%20DEX%20is%20multi-platform%20and%20bridges%20across%20parachains%20allowing%20the%20community%20to%20access%20the%20latest%20protocols%20and%20initiatives.%20Sunrise%20has%20identified%20numerous%20gaps%20to%20capitalize%20on%2C%20in%20relation%20to%20the%20infrastructure%20of%20the%20most%20popular%20decentralized%20exchanges%2C%20which%20includes%20liquidity%20pool%20customization%2C%20limit%20order%20functionality%20and%20compliance%20functionality.%0A%0A**Why%20are%20we%20creating%20this%20project**%0A%0AThis%20project%20provides%20a%20foundational%20layer%20for%20the%20Sunrise%20Protocol.%0A%0AOur%20team%20consists%20of%20founders%2C%20researchers%2C%20builders%20and%20strategists%20for%20blockchain%20and%20decentralized%20finance.%20We%20have%20built%20a%20layer%201%20blockchain%20at%20Harmony%20(public%20blockchain%20with%20sharding%20and%20open%20staking)%2C%20have%20launched%20private%20permissioned%20chains%20on%20ethereum%20and%20hyperledger%20fabric%20and%20have%20been%20actively%20involved%20in%20the%20Decentralized%20Finance%20community.%20We%20have%20chosen%20to%20build%20this%20project%20on%20Polkadot%20because%20Substrate%20allows%20us%20to%20focus%20on%20the%20Protocol%20and%20business%20logic.%20We%20feel%20the%20Partners%20in%20the%20ecosystem%20are%20laying%20the%20foundation%20for%20interoperable%20decentralization%20and%20we%20want%20to%20contribute%20to%20the%20community.%0A%0A%23%23%23%20Project%20Details%0A%0APlease%20see%20%5Bthis%20product%20overview%20presentation%5D(https%3A%2F%2Fabout.sunriseprotocol.com)%20and%20%5BSunrise%20Protocol%20Whitepaper%5D(https%3A%2F%2Fwhitepaper.sunriseprotocol.com)%20for%20an%20overview%20of%20the%20Sunrise%20Protocol%20vision.%0A%0A**This%20Project%20is%20specifically%20for%20the%20Sunrise%20Dex%20Factory%20which%20is%20a%20foundational%20component%20for%20the%20Sunrise%20Protocol**%0A%0AThe%20Sunrise%20Decentralized%20Exchange%20(DEX)%20combines%20the%20use%20of%20multiple%20bonding%20curves%20and%20price%20oracles%20to%20support%20liquidity%20pools%20for%20unpegged%20tokens%2C%20and%20stable%20coin%20pools.%20Below%20is%20an%20excerpt%20from%20the%20%5BSunrise%20Protocol%20Whitepaper%5D(https%3A%2F%2Fwhitepaper.sunriseprotocol.com)%0A%0A%23%23%23%23%203.%20Sunrise%20DEX%20Factory%0A%0AThe%20Sunrise%20DEX%20Factory%20will%20support%20the%20creation%20of%20Liquidity%20Pool%20Contracts.%20The%20bonding%20curves%20for%20these%20liquidity%20pools%2C%20will%20be%20slightly%20different%20depending%20on%20the%20use%20case.%20Each%20exchange%20contract%20can%20be%20configured%20to%20the%20specific%20needs%20of%20the%20liquidity%20pool.%0A%0A%23%23%23%23%203.1%20Sunrise%20Factory%2FRegistry%20Contract%0A%0AAll%20contracts%20will%20have%20a%20uniform%20interface%20for%20liquidity%20management%20and%20swap%20management.%20Thus%20abstracting%20away%20the%20underlying%20complexity%20from%20liquidity%20providers%20and%20traders%2C%20giving%20them%20a%20uniform%20mechanism%20to%20interact%20with%20all%20Sunrise%20liquidity%20pools.%0A%0ABelow%20is%20a%20list%20of%20the%20configuration%20parameters%20input%20into%20the%20factory%20contract%20when%20creating%20an%20exchange%20contract.%0A%0A**Sunrise%20Protocol%20Seven%20Key%20Parameters**%0A%0A1.%20**T**%20Token%20Weight%20%3A%20Weight%20of%20Token%20in%20the%20Pool%0A%20%20%20-%20Tokens%3A%20**T**.%20Assume%20there%20are%20**n**%20type%20of%20tokens%20in%20one%20liquidity%20pool%2C%20we%20denote%20them%20as%20**(T1%2CT2%2C...%20Tn)**.%0A%20%20%20-%20weight%20parameter%3A%20**Wi(0%26lt%3B%3DWi%26lt%3B%3D1)**%20is%20the%20parameter%20of%20token%20**i**%20in%20our%20model%2C%20which%20is%20a%20constant%20defined%20when%20creating%20the%20pool.%20We%20always%20assume%20**the%20sum%20of%20Wi%20%3D1**.%0A%20%20%20-%20initial%20balance%3A%20**(x1%2Cx2%2C...%2Cxn)**%20are%20the%20initial%20amounts%20a%20liquidity%20provider%20puts%20into%20a%20liquidity%20pool.%0A2.%20**epsilon**%20Fees%20%3A%20Liquidity%20Provider%20and%20Protocol%20Fees%0A3.%20**beta**%20Depth%20%3A%20Depth%20of%20Pool%20before%20slippage%20occurs%0A4.%20**Delta**%20Slippage%3A%20The%20rate%20at%20which%20price%20slippage%20increases%0A5.%20**Alpha**%20Max%20Min%3A%20Maximum%20and%20Minimum%20Token%20allocation%20for%20each%20reserve%0A6.%20**lambda**%20Dynamic%20fees%20%3A%20Unbalancing%20Penalty%20Fees%0A7.%20**k**%20Market%20Price%20Alignment%3A%20Alignment%20of%20the%20Bonding%20Curve%20with%20Price%20Oracle%0A%0A!%5BSunrise%20Bonding%20Curves%5D(https%3A%2F%2Fraw.githubusercontent.com%2Fsunriseprotocol%2Fwiki%2Fmain%2Fassets%2FSunrise%2520Bonding%2520Curves.png%20%22Sunrise%20Bonding%20Curves%22)%0A**The%20three%20types%20of%20bonding%20curves%20use%20the%20following%20variables**%0A%0A3.1%20MultiToken%20Bonding%20Curve%20(1%2C2)%0A%0A3.2%20StableCoin%20Bonding%20Curve%20(1%2C2%2C3%2C4%2C5%2C6)%0A%0A3.3.%20Proactive%20Bonding%20Curve%20(1%2C2%2C3%2C4%2C5%2C6%2C7)%0A%0A**There%20will%20be%20default%20values%20for%20each%20of%20these%20parameters%20based%20on%20the%20Bonding%20Curve%20Type.**%0A%0AWhen%20not%20utilized%20the%20variable%20will%20be%20set%20to%20a%20default%20value%20having%20a%20nonconsequential%20effect.%0A%0A%23%23%23%23%20Sunrise%20Protocol%20Overview%0A%0ASunrise%20Protocol%20is%20creating%20an%20open%20decentralized%20financial%20framework.%20Sunrise%20is%20building%20a%20complete%20suite%20of%20financial%20tools%20and%20non%20custodial%20services%20within%20a%20compliant%20framework%20.%20This%20will%20be%20done%20in%20a%20trustless%20decentralized%20environment.%20With%20the%20goal%20of%20disrupting%20and%20streamlining%20current%20solutions%20offered%20by%20Centralized%20Exchanges%20and%20International%20remittances.%0A%0A**The%20following%20information%20is%20a%20short%20summary%20of%20the%20other%20features%20of%20the%20protocol**%0A%0ASunrise%20Bridge%20is%20used%20to%20create%20a%20multi-platform%2C%20multi-asset%20protocol%20using%20cryptocurrencies%20(tokens)%20as%20building%20blocks.%20We%20will%20start%20with%20Polkadot%20parachains%2C%20ERC-20%20tokens%20and%20then%20other%20blockchains.%0A%0AOnce%20the%20primitives%20of%20a%20multi-platform%2C%20multi-asset%20DEX%20have%20been%20realized%2C%20decentralized%20financial%20protocols%20can%20leverage%20this%20for%20their%20liquidity%20needs.%0A%0ASunrise%20Protocol%20will%20then%20add%20limit%20orders%2C%20a%20compliance%20framework%20and%20smart%20wallet%20functionality%20to%20give%20cost%20effective%20alternatives%20to%20Centralized%20Exchanges%20and%20International%20remittances.%0A%0ABelow%20are%20the%20high%20level%20modules%20that%20can%20be%20integrated%20into%20the%20Sunrise%20Ecosystem.%20A%20number%20of%20these%20will%20be%20implemented%20by%20our%20partners%20and%20the%20community%2C%20some%20of%20which%20may%20be%20subsidized%20by%20Sunrise%20Protocol%20grants.%0A%0A!%5BSunrise%20Ecosystem%5D(https%3A%2F%2Fraw.githubusercontent.com%2Fsunriseprotocol%2Fwiki%2Fmain%2Fassets%2FSunrise%2520Ecosystem.png%20%22Sunrise%20Ecosystem%22)%0A%0A%23%23%23%20Ecosystem%20Fit%0A%0ASunrise%20Protocol%20is%20building%20an%20open%20decentralized%20framework.%20This%20grant%20application%20is%20for%20the%20Sunrise%20DEX%2C%20a%20sub-component%20of%20the%20larger%20Sunrise%20Protocol.%0A%0AWe%20have%20done%20a%20comprehensive%20review%20of%20the%20other%20DEX%20projects%20which%20include%20Polkaswap%2C%20Reef%2C%20Mangata%2C%20HydraDx%2C%20Polkadex%2C%20Subdex.%20We%20see%20there%20are%20gaps%20in%20the%20current%20DEX%20Approaches%2C%20these%20include%20stable%20coin%20support%2C%20limit%20order%20functionality%20and%20compliance%20functionality.%20We%20feel%20that%20these%20DEX%20projects%20cannot%20be%20leveraged%20as%20part%20of%20our%20protocol%20due%20to%20the%20mentioned%20gaps%20and%20the%20different%20technical%20approaches.%0A%0AWe%20are%20the%20only%20protocol%20to%20offer%20multi-asset%20pools%2C%20optimized%20stable%20coin%20support%2C%20multiple%20bonding%20curves%2C%20adjustable%20transaction%20fees%20and%20limit%20orders.%20We%20combine%20this%20with%20bridging%20capabilities%20for%20multi-platform%20support%2C%20limit%20order%20capabilities%2C%20combinatorial%20staking%20for%20better%20rewards%2C%20synthetic%20asset%20support%2C%20a%20compliance%20framework%20and%20smart%20wallet%20functionality%20to%20drive%20mass%20adoption.%0A%0AThis%20application%20is%20specific%20to%20the%20DEX%20Pallet%20and%20lays%20the%20foundation%20for%20the%20larger%20vision%20which%20can%20be%20seen%20in%20our%20%5Bdraft%20white%20paper%5D(https%3A%2F%2Fwhitepaper.sunriseprotocol.com).%0A%0A%23%23%23%20DEX%20Evolution%0A%0A!%5BSunrise%20Reference%20Protocols%5D(https%3A%2F%2Fraw.githubusercontent.com%2Fsunriseprotocol%2Fwiki%2Fmain%2Fassets%2FSunrise%2520Reference%2520Protocols.png%20%22Sunrise%20Reference%20Protocols%22)%0A%0AThe%20following%20protocols%20offer%20specific%20functionality%20and%20are%20often%20leaders%20in%20their%20respective%20areas.%20The%20points%20below%20walk%20through%20a%20chronological%20evolution%20of%20DEX%20and%20cross-chain%20capabilities.%0A%0A-%20Uniswap%20introduced%20a%20simple%20bonding%20curve%20supporting%20two%20token%20liquidity%20pools.%0A-%20It%20later%20introduced%20it%E2%80%99s%20UNI%20token%20which%20is%20now%20table%20stakes%20for%20all%20Decentralized%20Exchanges%2C%20Sunrise%20Protocol%20extends%20this%20combining%20trading%2C%20protocol%20and%20liquidity%20balance%20rewards.%0A-%20Multi%20Asset%20Pools%20were%20introduced%20by%20Balancer%20and%20adopted%20by%20Curve%20who%20introduced%20the%20first%20bonding%20curve%20to%20support%20stable%20coins.%0A-%20Price%20Oracles%20being%20utilized%20by%20Automated%20Market%20Makers%20are%20being%20evaluated%20by%20Sunrise%20and%20DodoEx%20wrote%20a%20good%20white%20paper%20about%20the%20topic.%0A-%20Sunrise%20protocol%20adds%20to%20this%20with%20multipe%20bonding%20curves%20which%20supports%20multi%20asset%20pools%2C%20stable%20coins%2C%20and%20traditional%20tokens.%0A-%20Our%20Liquidity%20Providers%20can%20set%20the%20transaction%20fees%20when%20creating%20a%20Liquidity%20Pool%20similar%20to%20Balancer%20and%20Curve.%0A-%20We%20also%20introduce%20limit%20orders%20powered%20by%20our%20unique%20off-chain%20worker%20capabilities.%0A-%20Polkadot%20and%20Ethereum%20are%20supported%20initially%20with%20more%20platforms%20to%20come%20powered%20by%20our%20integrated%20bridging%20technology.%0A-%20Reef%20and%20PolkaDex%20are%20also%20building%20on%20Polkadot%20which%20provides%20the%20ability%20to%20create%20dedicated%20parachains.%0A-%20A%20Compliance%20Framework%20will%20be%20leveraged%20by%20Sunrise%20Protocol%20to%20provide%20cost%20effective%20solutions%20which%20compete%20with%20Centralized%20Exchanges%20and%20International%20remittances.%0A-%20Smart%20Wallet%20Functionality%20will%20also%20be%20provided%20to%20simplify%20the%20user%20experience%20and%20drive%20mass%20adoption.%0A%0A%23%23%20Team%20%3Abusts_in_silhouette%3A%0A%0A%23%23%23%20Team%20members%0A%0AJohn%20and%20Geoff%20will%20be%20the%20major%20contributors%20for%20this%20phase%20of%20Sunrise%20Protocol%0A%0A-%20John%20Whitton%3A%20Sunrise%20Protocol%20Founder%0A-%20Geoff%3A%20Sunrise%20Protocol%20Core%20Protocol%20Engineer%20and%20Solution%20Architect%0A%0AAdditional%20team%20members%20will%20be%20announced%20shortly%20and%20contributing%20to%20this%20and%20other%20components%20of%20Sunrise%20Protocol%0A%0A%23%23%23%20Contact%0A%0A-%20**Contact%20Name%3A**%20John%20Whitton%0A-%20**Contact%20Email%3A**%20john%40sunriseprotocol.com%0A-%20**Website%3A**%20%5Bhttps%3A%2F%2Fsunriseprotocol.com%5D(https%3A%2F%2Fsunriseprotocol.com)%0A%0A%23%23%23%20Legal%20Structure%0A%0A-%20**Registered%20Address%3A**%20N%2FA%0A-%20**Registered%20Legal%20Entity%3A**%20N%2FA%0A%0A%23%23%23%20Team's%20experience%0A%0AThe%20team%20all%20have%20strong%20experience%20building%20Layer%201%20Blockchain%20Platforms%20and%20Decentralized%20Financial%20Protocols.%0A%0ARelevant%20Contributions%20are%0A%0A**John%20Whitton%3A**%20John%20Whiton%20has%20been%20passionate%20about%20software%20and%20technology%20since%20high%20school.%20He%20graduated%20from%20the%20University%20of%20Queensland%20in%20Computer%20Science%20and%20travelled%20globally%20leading%20the%20design%20and%20development%20of%20many%20Service%20Oriented%20Architectures.%20He%20has%20built%20private%20permissioned%20blockchains%20on%20Ethereum%20and%20Hypersphere%20Fabric%2C%20partnering%20with%20firms%20such%20as%20IBM%20and%20Deloitte.%20He%20then%20grew%20the%20ecosystem%20for%20a%20public%20blockchain%20at%20Harmony.%20He%20has%20worked%20extensively%20with%20decentralized%20financial%20protocols%2C%20bringing%20a%20unique%20perspective%20by%20combining%20his%20extensive%20corporate%20experience%20with%20IBM%2C%20SAP%2C%20Deloitte%20and%20KPMG%20with%20the%20disruptive%20financial%20models%20being%20developed%20on%20blockchain.%0A%0AJohn%20originally%20met%20Gavin%20Wood%20in%202016%20and%20worked%20briefly%20with%20Tomasz%20Drwi%C4%99ga%20on%20Parity%20before%20taking%20a%20role%20as%20CTO%20of%20a%20small%20Blockchain%20Startup%20based%20on%20Ethereum%20which%20then%20moved%20to%20Hyperledger.%20He%20did%20further%20%5Bresearch%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fblockchain-eval%2Fblob%2Fmaster%2Fsubstrate.md)%20into%20Polkadot%20and%20Substrate%20in%202019%20and%20did%20strategy%20work%20on%20smart%20contract%20protocols%20and%20digital%20assets%20in%202019%20including%20working%20on%20Cowri%20(now%20shell%20protocol)%2Ca%20stablecoin%20exchange%20protocol%2C%20before%20taking%20a%20role%20with%20Harmony%20as%20an%20Ecosystem%20Architect%20with%20a%20focus%20on%20Developer%20tooling%20and%20Ecosystem%20growth.%20At%20Harmony%2C%20John%20helped%20launch%20the%20Mainnet%20while%20also%20being%20intimately%20involved%20with%20hiring%20decisions%20and%20business%20strategy.%20His%20technical%20Portfolio%20is%20%5Bhere%5D(https%3A%2F%2Fjohnwhitton.dev%2Fdocs%2Fdocs%2Flearn%2Fportfolio%2F)%20and%20more%20information%20can%20be%20found%20on%20%5Bjohnwhitton.dev%5D(https%3A%2F%2Fjohnwhitton.dev%2F).%0A%0A**Geoff%3A**%20Prior%20to%20joining%20Sunrise%20Protocol%20where%20Geoff%20leads%20the%20SRS%20token%20design%20and%20works%20on%20core%20protocol%20development.%20Geoff%20worked%20as%20a%20Blockchain%20Engineer%20and%20Research%20analyst%2C%20leading%20technical%20due%20diligence%20on%20Decentralized%20Financial%20Protocols%20and%20Layer%201%20Protocol%20offerings.%20He%20has%20reviewed%20thousands%20of%20whitepapers%20and%20tokenomics%20models.%20He%20has%20mentored%20many%20founders%20and%20blockchain%20startups%20and%20created%20investor%20briefings%20including%20strategy%20review%2C%20market%20fit%20and%20technical%20due%20diligence.%20Technical%20contributions%20include%20Decentralized%20Financial%20Protocols%2C%20Layer%202%20Solutions%2C%20Decentralized%20Identity%20and%20encrypted%20data%20storage%20as%20well%20as%20protocol%20and%20infrastructure%20work%20such%20as%20consensus%20algorithms%2C%20sharding%2C%20smart%20contracts%20design%20and%20standards%20(Open%20Zeppelin).%20He%20has%20done%20extensive%20smart%20contract%20design%20and%20development%20with%20an%20in%20depth%20knowledge%20of%20decentralized%20financial%20protocols%20and%20tooling%3B%20including%20prototyping%20and%20development%20of%20DeFi%20Standards%20across%20multiple%20platforms.%0A%0A%23%23%23%20Team%20Code%20Repos%0A%0A-%20%5BSunrise%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fsunriseprotocol)%0A-%20%5BJohn%20Whitton%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton)%0A-%20%5BGeoff%5D(https%3A%2F%2Fgithub.com%2Fgdevsrs)%0A%0A%23%23%23%20Team%20LinkedIn%20Profiles%0A%0A-%20%5BJohn%20Whitton%5D(https%3A%2F%2Fwww.linkedin.com%2Fin%2Fjohnwhitton%2F)%0A-%20%5BGeoff%5D(https%3A%2F%2Fwww.linkedin.com%2Fin%2Fgeoff-s-9417b31bb%2F)%0A%0A%23%23%20Development%20Roadmap%20%3Anut_and_bolt%3A%0A%0AIn%20this%20phase%20we%20plan%20to%20develop%20the%20initial%20decentralized%20exchange%20pallet%20for%20the%20Sunrise%20Protocol.%0A%0AThis%20application%20is%20specific%20to%20the%20DEX%20Pallet%20and%20lays%20the%20foundation%20for%20the%20larger%20vision%20which%20can%20be%20seen%20in%20our%20%5Bdraft%20white%20paper%5D(https%3A%2F%2Fwhitepaper.sunriseprotocol.com).%0A%0A%23%23%23%20Overview%0A%0A-%20**Total%20Estimated%20Duration%3A**%203%20Months%0A-%20**Full-time%20equivalent%20(FTE)%3A**%202%20FTE%0A-%20**Total%20Costs%3A**%200.9%20BTC%0A%0A%23%23%23%20Milestone%201%3A%20Framework%20design%20and%20minimal%20DEX%20Pallets%0A%0A-%20Estimated%20Duration%3A%201%20month%0A-%20FTE%3A%202%0A-%20Costs%3A%200.4%20BTC%0A%0A%7C%20Number%20%7C%20Deliverable%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Specificationa.%20%20%20%20%7C%20License%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Apacheb.%20%20%20%20%7C%20Documentation%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20We%20will%20provide%20both%20inline%20documentation%20of%20the%20code%20and%20a%20basic%20tutorial%20that%20explains%20how%20a%20user%20can%20(for%20example)%20spin%20up%20one%20of%20our%20Substrate%20nodes.%20Once%20the%20node%20is%20up%2C%20it%20will%20be%20possible%20to%20send%20test%20transactions%20that%20will%20show%20how%20to%20create%20a%20liquidity%20pool%20and%20provision%20funds%20to%20it.%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%200c.%20%20%20%20%7C%20Testing%20Guide%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20The%20code%20will%20have%20proper%20unit-test%20coverage%20(e.g.%2090%25)%20to%20ensure%20functionality%20and%20robustness.%20In%20the%20guide%20we%20will%20describe%20how%20to%20run%20these%20tests.%3Cbr%20%2F%3EThe%20tests%20will%20cover%20basic%20functionlity%20like%3Cbr%20%2F%3Ei.%20Creating%20a%20Liquidity%20Pool%3Cbr%20%2F%3Eii.%20Adding%20and%20removing%20liquidity%3Cbr%20%2F%3Eiii.%20Swapping%20based%20on%20exact%20amount%20in%20and%20exact%20amount%20outulti-currency%20Baseline%20%20%20%7C%20Support%20Multiple%20Currencies%20being%20traded%20this%20will%20leverage%20and%20expand%20upon%20the%20following%20from%20%5BFRAME%5D(https%3A%2F%2Fsubstrate.dev%2Fdocs%2Fen%2Fknowledgebase%2Fruntime%2Fframe)%20and%20%5BORML%5D(https%3A%2F%2Fgithub.com%2Fopen-web3-stack%2Fopen-runtime-module-library)%3Cbr%20%2F%3E%5BFRAME%3Asupport%3Acurrency%20trait%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fframe%2Fsupport%2Fsrc%2Ftraits.rs%23L858)%3Cbr%20%2F%3E%5BFRAME%3Apallet-balances%5D(https%3A%2F%2Fcrates.io%2Fcrates%2Fpallet-balances)%3Cbr%20%2F%3E%5Borml-tokens%5D(https%3A%2F%2Fgithub.com%2Fopen-web3-stack%2Fopen-runtime-module-library%2Fblob%2Fmaster%2Ftokens%2Fsrc%2Flib.rs)%3Cbr%20%2F%3E%5Borml-currencies%5D(https%3A%2F%2Fgithub.com%2Fopen-web3-stack%2Fopen-runtime-module-library%2Fblob%2Fmaster%2Fcurrencies%2Fsrc%2Flib.rs)%20%7C%0A%7C%202.%20%20%20%20%20%7C%20Pallet%3A%20sunrise-dex%20%20%20%20%20%20%20%7C%20We%20will%20create%20a%20Pallet%20that%20will%20implement%20a%20simplified%20multi-token%20bonding%20curve.%3Cbr%20%2F%3EWe%20will%20begin%20prototyping%20with%20a%20two%20token%20pool%20similar%20to%20%5BuniswapV2Pair%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Funiswap-v2-core%2Fblob%2Fmaster%2Fcontracts%2FUniswapV2Pair.sol)%3Cbr%20%2F%3EThen%20enhance%20to%20a%20multi-token-pool%20see%20%5Bbalancer%20as%20a%20reference%20implementation%5D(https%3A%2F%2Fgithub.com%2Fbalancer-labs%2Fbalancer-core%2Fblob%2Fmaster%2Fcontracts%2FBMath.sola.%20%20%20%20%7C%20Liquidity%20Pool%20Management%20%7C%20We%20will%20create%20functions%20that%20will%20implement%20liquidity%20management%20samples%20included%20below%3Cbr%20%2F%3EPool%20Creation%3Cbr%20%2F%3EAdd%20liquidity%3Cbr%20%2F%3E%20Remove%20Liquidity%20%3Cbr%20%2F%3EPool%20creation%20will%20be%20configurable%20based%20on%20the%20seven%20parameters%20mentioned%20aboveb.%20%20%20%20%7C%20Swap%20Functionality%20%20%20%20%20%20%20%20%7C%20We%20will%20create%20functions%20that%20will%20implement%20swap%20functionality%20including%20samples%20included%20below%3Cbr%20%2F%3E%20calcSpotPrice%3Cbr%20%2F%3EcalcOutGivenIn%3Cbr%20%2F%3EcalcInGivenOut%3Cbr%20%2F%3EcalcPoolOutGivenSingleIn%3Cbr%20%2F%3EcalcSingleInGivenPoolOut%3Cbr%20%2F%3EcalcSingleOutGivenPoolIn%20%3Cbr%20%2F%3EcalcPoolInGivenSingleOut%3Cbr%20%2F%3E%5BReference%20Implementation%20from%20Balancer%5D(https%3A%2F%2Fgithub.com%2Fbalancer-labs%2Fbalancer-core%2Fblob%2Fmaster%2Fcontracts%2FBMath.solc.%20%20%20%20%7C%20Sunrise%20Router%20%20%20%20%20%20%20%20%20%20%20%20%7C%20We%20will%20create%20functions%20that%20will%20implement%20routing%20capabilities%20samples%20included%20below%3Cbr%20%2F%3E%20processPaths%20%3Cbr%20%2F%3E%20processEpsOfInterestMultiHop%3Cbr%20%2F%3E%20getPricesOfInterest%3Cbr%20%2F%3EcalculateBestPathIdsForPricesOfInterest%3Cbr%20%2F%3EgetSwapAmountsForPriceOfInterest%3Cbr%20%2F%3EgetExactSwapAmounts%20%3Cbr%20%2F%3E%5BReference%20Implementation%20from%20Balancer%5D(https%3A%2F%2Fgithub.com%2Fbalancer-labs%2Fbalancer-sor%2Fblob%2Fmaster%2Fsrc%2Fsor.tsubstrate%20chain%20%20%20%20%20%20%20%20%20%20%20%7C%20We%20will%20Host%20this%20on%20our%20Dawn%20Parachain%20on%20Rococco%20or%20our%20%5BDaybreak%20Standalone%20Chain%5D(https%3A%2F%2Fpolkadot.js.org%2Fapps%2F%3Frpc%3Dwss%253A%252F%252Fdaybreak.sunriseprotocol.com%253A443%23%2Fexplorerocker%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20We%20will%20provide%20a%20dockerfile%20to%20demonstrate%20the%20full%20functionality%20of%20our%20chainilestone%202%3A%20Full%20version%20of%20SRS%20model%0A%0A-%20Estimated%20Duration%3A%201%20month%0A-%20FTE%3A%202%0A-%20Costs%3A%200.3%20BTC%0A%0A%7C%20Number%20%7C%20Deliverable%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Specificationa.%20%20%20%20%7C%20License%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Apacheb.%20%20%20%20%7C%20Documentation%20%20%20%20%20%20%20%20%20%20%20%7C%20We%20will%20provide%20both%20inline%20documentation%20of%20the%20code%20and%20a%20basic%20tutorial%20that%20explains%20how%20a%20user%20can%20(for%20example)%20spin%20up%20one%20of%20our%20Substrate%20nodes.%20Once%20the%20node%20is%20up%2C%20it%20will%20be%20possible%20to%20send%20test%20transactions%20that%20will%20show%20how%20to%20create%20a%20liquidity%20pool%20and%20provision%20funds%20to%20it.%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%200c.%20%20%20%20%7C%20Testing%20Guide%20%20%20%20%20%20%20%20%20%20%20%7C%20The%20code%20will%20have%20proper%20unit-test%20coverage%20(e.g.%2090%25)%20to%20ensure%20functionality%20and%20robustness.%20In%20the%20guide%20we%20will%20describe%20how%20to%20run%20these%20tests.%3Cbr%20%2F%3ETests%20will%20include%3Cbr%20%2F%3Ei.%20Creating%20a%20stable%20coin%20pool%3Cbr%20%2F%3Eii.%20Adding%20and%20removing%20liquidity%20%3Cbr%20%2F%3E%20iii.%20Swaps%20%3Cbr%20%2F%3Eiv.Rewards%20staking%20and%20earning%20%3Cbr%20%2F%3Ev.%20Testing%20functionalitly%20using%20explorer%20Extrinsics%20%7C%0A%7C%201.%20%20%20%20%20%7C%20Pallet%3A%20sunrise-dex%20%20%20%20%20%7C%20We%20will%20enhance%20the%20sunrise%20factory%20to%20support%20a%20stable%20coin%20bonding%20curve.%20%3Cbr%20%2F%3EReference%20implementations%20include%20%5Bcurve%5D(https%3A%2F%2Fgithub.com%2Fcurvefi%2Fcurve-contract%2Fblob%2Fmaster%2Fcontracts%2Fpools%2Fusdt%2FStableSwapUSDT.vy%23L74)%20and%20%5Bshellprotocol%5D(https%3A%2F%2Fgithub.com%2Fcowri%2Fshell-solidity-v1%2Fblob%2Fwbtc-renbtc-sbtc-10%2F22%2F2020%2Fsrc%2FShells.sol)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%202.%20%20%20%20%20%7C%20Pallet%3A%20sunrise-rewards%20%7C%20We%20will%20create%20a%20Pallet%20that%20will%20implement%20basic%20reward%20functionality.%3Cbr%20%2F%3E%20Reference%20implementations%20include%20%5Buniswap%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Fliquidity-staker)%2C%20%5Bbalancer%5D(https%3A%2F%2Fgithub.com%2Fbalancer-labs%2Fbal-mining-scripts)%20and%20%5Bsushiswap%5D(https%3A%2F%2Fgithub.com%2Fsushiswap%2Fsushiswap%2Fblob%2Fmaster%2Fcontracts%2FSushiMaker.sol)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%204.%20%20%20%20%20%7C%20Substrate%20chain%20%20%20%20%20%20%20%20%20%7C%20We%20will%20Host%20this%20on%20our%20Dawn%20Parachain%20on%20Rococco%20or%20our%20%5BDaybreak%20Standalone%20Chain%5D(https%3A%2F%2Fpolkadot.js.org%2Fapps%2F%3Frpc%3Dwss%253A%252F%252Fdaybreak.sunriseprotocol.com%253A443%23%2Fexplorerocker%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20We%20will%20provide%20a%20dockerfile%20to%20demonstrate%20the%20full%20functionality%20of%20our%20chainere%20is%20an%20overview%20of%20the%20Sunrise%20Reward%20design**%0A%0A!%5BSunrise%20Rewards%20Design%5D(https%3A%2F%2Fraw.githubusercontent.com%2Fsunriseprotocol%2Fwiki%2Fmain%2Fassets%2FSunrise%2520Rewards.png%20%22Sunrise%20Rewards%20Design%22)%0A%0A%23%23%23%20Milestone%203%3A%20Sunrise%20DApp%20on%20Test%20Network%0A%0A-%20Estimated%20Duration%3A%201%20month%0A-%20FTE%3A%202%0A-%20Costs%3A%200.2%20BTC%0A%0A%7C%20Number%20%7C%20Deliverable%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Specificationa.%20%20%20%20%7C%20License%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Apache%202.0%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%200b.%20%20%20%20%7C%20Documentation%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20We%20will%20provide%20both%20inline%20documentation%20of%20the%20code%20and%20a%20basic%20tutorial%20that%20explains%20how%20a%20user%20can%20deploy%20the%20Sunrise%20Protocol%20DApp%20and%20the%20polakdot-js%20app%20forked%20by%20Sunrise%20Protocol%20with%20DEX%20Capabilities.%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%200c.%20%20%20%20%7C%20Testing%20Guide%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20The%20code%20will%20have%20proper%20unit-test%20coverage%20(e.g.%2090%25)%20to%20ensure%20functionality%20and%20robustness.%20In%20the%20guide%20we%20will%20describe%20how%20to%20run%20these%20tests.%3Cbr%20%2F%3E%20Tests%20will%20include%20%3Cbr%20%2F%3Ei.%20Testing%20all%20functions%20via%20explorer%20using%20extrinsics%20%3Cbr%20%2F%3Eii.%20Testing%20functionality%20via%20the%20DApp%20%7C%0A%7C%201.%20%20%20%20%20%7C%20Polkadot-js%20app%20DEX%20Capabilities%20%20%20%20%20%20%20%20%20%7C%20We%20will%20fork%20polkadot-js%20app%20and%20provide%20dex%20functionalityunrise%20Protocol%20DApp%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20We%20will%20build%20Sunrise%20Protocol%20DApp%20with%20DEX%20Functionalitypplications%20Deployed%20and%20Hosted%20on%20Dawn%20%7C%20We%20will%20deploy%20a%20hosted%20application%20that%20connects%20to%20Dawnubstrate%20chain%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20We%20will%20Host%20this%20on%20our%20Dawn%20Parachain%20on%20Rococco%20or%20our%20%5BDaybreak%20Standalone%20Chain%5D(https%3A%2F%2Fpolkadot.js.org%2Fapps%2F%3Frpc%3Dwss%253A%252F%252Fdaybreak.sunriseprotocol.com%253A443%23%2Fexplorer)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%205.%20%20%20%20%20%7C%20Community%20Education%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20We%20will%20publish%20Medium%20Articles%20in%20English%20and%20Chinese%20and%20also%20posts%20on%20twitter.%20Explaining%20the%20DEX%20Functionality.%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%0A%23%23%20Future%20plans%0A%0AWe%20plan%20to%20make%20our%20chain%20one%20of%20the%20leading%20parachains%20in%20the%20polkadot%20ecosystem.%20Thus%2C%20there%20is%20still%20a%20lot%20of%20work%20to%20be%20done.%20Here%20are%20a%20few%20of%20them%3A%0A%0A1.%20Support%20for%20Multi-Currencies%20via%20INK%20or%20EVM%20conforming%20to%20%5Bpsp-3%5D(https%3A%2F%2Fgithub.com%2Fw3f%2FPSPs%2Fblob%2Fmaster%2FPSPs%2Fdrafts%2Fpsp-3.md)%0A2.%20Enhance%20Deployment%20capabilities%20of%20the%20Sunrise%20DEX%20for%20other%20chains%20(either%20as%20an%20ORML%20module%20or%20as%20an%20INK%20Contract)%0A3.%20Implement%20SRS%20Incentivization%20Functionality%0A4.%20Bridging%20Functionality%20(XCMP%20Parachain%20Integration%20and%20Ethereum%20snowfork%20like%20integration)%0A5.%20Sunrise%20Order%20Book%20and%20Limit%20Order%20Functionality%0A6.%20Application%20Functionality%20(Sunrise%20Dapp%2C%20polkadot-js%20apps%2C%20wallet)%0A7.%20Governance%20model%20using%20SRS%0A8.%20Parachain%20Functionality%20(Launching%20on%20Rococco%20initially)%0A9.%20Proactive%20Bonding%20curve%20integrated%20with%20price%20oracles%0A10.%20Compliance%20Framework%0A11.%20Smart%20Wallet%20Functionality%0A12.%20Governance%20model%20using%20SRS%0A%0A%23%23%20Additional%20Information%0A%0AWork%20done%20so%20far%20has%20included%20research%20and%20prototyping.%0A%0ANo%20other%20teams%20have%20contributed%20to%20the%20project.%0A%0AThis%20is%20Sunrise%20Protocol's%20first%20grant%20application.%20However%20John%20wrote%20a%20previous%20application%20for%20a%20%5BDEX%20Pallet%5D(https%3A%2F%2Fgithub.com%2Fw3f%2FGeneral-Grants-Program%2Fpull%2F351).%20The%20original%20application%20has%20been%20archived%20and%20the%20vision%20has%20been%20refined%20based%20on%20feedback%20from%20David%20Hawig%20and%20knowledge%20gained%20working%20on%20substrate%20over%20the%20past%20months%20by%20the%20Sunrise%20Protocol%20team.%0A%0AFor%20a%20more%20comprehensive%20Sunrise%20Protocol%20Vision%20please%20read%20the%20following%0A%0A-%20%5BSunrise%20Protocol%20Product%20Overview%5D(https%3A%2F%2Fabout.sunriseprotocol.com)%0A-%20%5BSunrise%20Protocol%20Light%20Paper%5D(https%3A%2F%2Flightpaper.sunriseprotocol.com)%0A-%20%5BSunrise%20Protocol%20White%20Paper%5D(https%3A%2F%2Fwhitepaper.sunriseprotocol.com)%0A%0A**Here%20is%20an%20overview%20of%20the%20Sunrise%20Order%20Book%20design**%0A%0A!%5BSunrise%20Reference%20Protocols%5D(https%3A%2F%2Fraw.githubusercontent.com%2Fsunriseprotocol%2Fwiki%2Fmain%2Fassets%2FSunrise%2520Limit%2520Orders%2520Detailed.png%20%22Sunrise%20Order%20Book%20Design%22)%0A",lastUpdatedAt:1757298265e3},{lazy:()=>J(()=>import("./intro-Ccx0fIKA.js"),[]),path:"/research/intro",type:"mdx",filePath:"research/intro.mdx",content:"%23%20Solving%2C%20Arbitrage%20and%20Market%20Making%0A%0A%23%23%20High%20Performance%20Infrastructure%20Research%0A%0AThis%20knowledge%20base%20and%20learning%20center%20is%20based%20upon%20research%20done%20around%20solving%2C%20arbitrage%20and%20market%20making%20infrastructure.%20It%20includes%20design%20patters%20for%20No%20Liquidity%20Solving%20for%20intent%20based%20systems.%0A%0APrevious%20work%20includes%20bridging%2C%20zero%20knowledge%20and%20chain%20consensus%20and%20signing.%0A%0AThe%20majority%20of%20this%20research%20was%20done%20by%20%5BJohn%20Whitton%5D(https%3A%2F%2Fjohnwhitton.com).%0A%0APlease%20see%20%5BProduct%5D(..%2Fproduct%2Fintro.mdx)%20for%20work%20being%20done%20to%20productize%20this%20infrastructure.%0A%0A%23%23%23%20Let's%20work%20together%0A%0AIf%20you%20are%20an%20**investor**%2C%20**protocol**%2C%20or%20**market%20maker**%2C%20let%E2%80%99s%20connect%20to%3A%0A%0A-%20**Investors**%3A%20Please%20help%20with%20introductions%20to%20portfolio%20companies%20and%20liquidity%20providers%20in%20the%20space.%20Also%20reach%20out%20if%20this%20technology%20can%20be%20utilized%20in%20startups%20you%20are%20currently%20evaluating.%0A-%20**Protocols**%3A%20Please%20reach%20out%20if%20this%20technology%20(or%20I%20personally)%20can%20help%20you%20drive%20more%20order%20flow%20to%20your%20protocol.%0A-%20**Market%20Makers%20(and%20liquidity%20providers)**%20please%20reach%20out%20if%20you%20want%20to%20develop%20advanced%20trading%20strategies%20and%20liquicity%20management%20functionality%20using%20this%20infrastructure.%0A%0AYou%20can%20find%20me%20on%20telegram%20%40john_whitton.%0A%0A%23%23%23%20Thanks%20to%20the%20thought%20leaders%0A%0AJohn%20would%20like%20to%20thank%0A%0A-%20%5BPropellor%20Heads%5D(https%3A%2F%2Fwww.propellerheads.xyz%2F)%3A%20For%20their%20outstanding%20work%20on%20indexing%2C%20simulation%20and%20execution%20for%20Solvers%20as%20part%20of%20%5BTycho%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Foverview)%20which%20lays%20the%20foundation%20for%20the%20jincubator%20platform.%0A-%20%5BUniswap%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fv4%2Foverview)%3A%20For%20their%20leading%20work%20on%20%5BUniswap%20V4%20Hook%20Architecture%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fv4%2Fconcepts%2Fhooks)%20and%20their%20inspirational%20design%20of%20%5BCompactX%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fcompactx)%20including%20resource%20locking%20via%20%5Bthe-compact%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fthe-compact)%20and%20attestations%20via%20%5BEIP-712%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712)%20signing%20implemented%20in%20%5BTribunal%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Ftribunal).%0A-%20%5B1inch%5D(https%3A%2F%2F1inch.io%2F)%3A%20For%20their%20work%20on%20the%20%5Blimit-order-protocol%5D(https%3A%2F%2Fportal.1inch.dev%2Fdocumentation%2Fcontracts%2Flimit-order-protocol%2Flimit-order-introduction)%20and%20support%20in%20%5Bunite-defi%5D(https%3A%2F%2Fethglobal.com%2Fshowcase%2Fdefiunite-jincubator-g1h0p)%20and%20advice%20on%20the%20design%20of%20%5BNo%20Liquidity%20Solving%5D(%2Fresearch%2Fsolving%2Ftycho1inchNOL)%20which%20integrates%20Tycho%20Solvers%20with%201inch%20without%20needing%20to%20provide%20up%20front%20liquidity.%0A-%20%5BAtrium%20Academy%5D(https%3A%2F%2Fatrium.academy%2Funiswap)%3A%20For%20their%20Uniswap%20V4%20Hook%20Incubator%20and%20the%20mentors%20Haardik%20and%20Saucepoint.%0A-%20%5Beco%5D(https%3A%2F%2Feco.com)%3A%20Where%20I%20was%20fortunate%20enough%20to%20lead%20the%20engineering%20team%20and%20work%20on%20hard%20problems%20around%20Cross%20L2%20Transactions%20and%20designing%20and%20building%20a%20dedicated%20roll%20up.%0A-%20%5BAaron%20Li%5D(https%3A%2F%2Fwww.linkedin.com%2Fin%2Faaronqli%2F)%3A%20who%20has%20mentored%20and%20driven%20much%20of%20the%20research%20around%20cryptographic%20primitives%2C%20wallets%2C%20gaming%20and%20trustless%20bridging.%0A-%20%5BThe%20Delendum%20Team%5D(https%3A%2F%2Fdelendum.xyz%2Fteam)%3A%20who%20are%20leading%20many%20zero%20knowledge%20research%20initiatives.%0A-%20%5BGanesha%20Upadhyaya%5D(https%3A%2F%2Fwww.linkedin.com%2Fin%2Fgupadhyaya%2F)%3A%20For%20his%20leading%20work%20on%20the%20horizon%20bridge%20and%20other%20trustless%20bridging%20research.%0A-%20%5BRongjian%20Lan%5D(https%3A%2F%2Fwww.linkedin.com%2Fin%2Frongjianlan%2F)%3A%20For%20his%20work%20on%20core%20protocol%2C%20specifically%20Harmony%20and%20the%20knowledge%20which%20he%20generously%20shared.%0A%0A%F0%9F%99%8F%F0%9F%92%99%F0%9F%99%8F%0A%0A%3E%20%E2%84%B9%EF%B8%8F%20Please%20note%3A%20Research%20is%20ongoing%20and%20as%20such%20some%20items%20are%20placeholders%20or%20work%20in%20progress%0A",lastUpdatedAt:1758829632e3},{lazy:()=>J(()=>import("./intro-Ccx0fIKA.js"),[]),path:"/research/intro.html",type:"mdx",filePath:"research/intro.mdx",content:"%23%20Solving%2C%20Arbitrage%20and%20Market%20Making%0A%0A%23%23%20High%20Performance%20Infrastructure%20Research%0A%0AThis%20knowledge%20base%20and%20learning%20center%20is%20based%20upon%20research%20done%20around%20solving%2C%20arbitrage%20and%20market%20making%20infrastructure.%20It%20includes%20design%20patters%20for%20No%20Liquidity%20Solving%20for%20intent%20based%20systems.%0A%0APrevious%20work%20includes%20bridging%2C%20zero%20knowledge%20and%20chain%20consensus%20and%20signing.%0A%0AThe%20majority%20of%20this%20research%20was%20done%20by%20%5BJohn%20Whitton%5D(https%3A%2F%2Fjohnwhitton.com).%0A%0APlease%20see%20%5BProduct%5D(..%2Fproduct%2Fintro.mdx)%20for%20work%20being%20done%20to%20productize%20this%20infrastructure.%0A%0A%23%23%23%20Let's%20work%20together%0A%0AIf%20you%20are%20an%20**investor**%2C%20**protocol**%2C%20or%20**market%20maker**%2C%20let%E2%80%99s%20connect%20to%3A%0A%0A-%20**Investors**%3A%20Please%20help%20with%20introductions%20to%20portfolio%20companies%20and%20liquidity%20providers%20in%20the%20space.%20Also%20reach%20out%20if%20this%20technology%20can%20be%20utilized%20in%20startups%20you%20are%20currently%20evaluating.%0A-%20**Protocols**%3A%20Please%20reach%20out%20if%20this%20technology%20(or%20I%20personally)%20can%20help%20you%20drive%20more%20order%20flow%20to%20your%20protocol.%0A-%20**Market%20Makers%20(and%20liquidity%20providers)**%20please%20reach%20out%20if%20you%20want%20to%20develop%20advanced%20trading%20strategies%20and%20liquicity%20management%20functionality%20using%20this%20infrastructure.%0A%0AYou%20can%20find%20me%20on%20telegram%20%40john_whitton.%0A%0A%23%23%23%20Thanks%20to%20the%20thought%20leaders%0A%0AJohn%20would%20like%20to%20thank%0A%0A-%20%5BPropellor%20Heads%5D(https%3A%2F%2Fwww.propellerheads.xyz%2F)%3A%20For%20their%20outstanding%20work%20on%20indexing%2C%20simulation%20and%20execution%20for%20Solvers%20as%20part%20of%20%5BTycho%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Foverview)%20which%20lays%20the%20foundation%20for%20the%20jincubator%20platform.%0A-%20%5BUniswap%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fv4%2Foverview)%3A%20For%20their%20leading%20work%20on%20%5BUniswap%20V4%20Hook%20Architecture%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fv4%2Fconcepts%2Fhooks)%20and%20their%20inspirational%20design%20of%20%5BCompactX%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fcompactx)%20including%20resource%20locking%20via%20%5Bthe-compact%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fthe-compact)%20and%20attestations%20via%20%5BEIP-712%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712)%20signing%20implemented%20in%20%5BTribunal%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Ftribunal).%0A-%20%5B1inch%5D(https%3A%2F%2F1inch.io%2F)%3A%20For%20their%20work%20on%20the%20%5Blimit-order-protocol%5D(https%3A%2F%2Fportal.1inch.dev%2Fdocumentation%2Fcontracts%2Flimit-order-protocol%2Flimit-order-introduction)%20and%20support%20in%20%5Bunite-defi%5D(https%3A%2F%2Fethglobal.com%2Fshowcase%2Fdefiunite-jincubator-g1h0p)%20and%20advice%20on%20the%20design%20of%20%5BNo%20Liquidity%20Solving%5D(%2Fresearch%2Fsolving%2Ftycho1inchNOL)%20which%20integrates%20Tycho%20Solvers%20with%201inch%20without%20needing%20to%20provide%20up%20front%20liquidity.%0A-%20%5BAtrium%20Academy%5D(https%3A%2F%2Fatrium.academy%2Funiswap)%3A%20For%20their%20Uniswap%20V4%20Hook%20Incubator%20and%20the%20mentors%20Haardik%20and%20Saucepoint.%0A-%20%5Beco%5D(https%3A%2F%2Feco.com)%3A%20Where%20I%20was%20fortunate%20enough%20to%20lead%20the%20engineering%20team%20and%20work%20on%20hard%20problems%20around%20Cross%20L2%20Transactions%20and%20designing%20and%20building%20a%20dedicated%20roll%20up.%0A-%20%5BAaron%20Li%5D(https%3A%2F%2Fwww.linkedin.com%2Fin%2Faaronqli%2F)%3A%20who%20has%20mentored%20and%20driven%20much%20of%20the%20research%20around%20cryptographic%20primitives%2C%20wallets%2C%20gaming%20and%20trustless%20bridging.%0A-%20%5BThe%20Delendum%20Team%5D(https%3A%2F%2Fdelendum.xyz%2Fteam)%3A%20who%20are%20leading%20many%20zero%20knowledge%20research%20initiatives.%0A-%20%5BGanesha%20Upadhyaya%5D(https%3A%2F%2Fwww.linkedin.com%2Fin%2Fgupadhyaya%2F)%3A%20For%20his%20leading%20work%20on%20the%20horizon%20bridge%20and%20other%20trustless%20bridging%20research.%0A-%20%5BRongjian%20Lan%5D(https%3A%2F%2Fwww.linkedin.com%2Fin%2Frongjianlan%2F)%3A%20For%20his%20work%20on%20core%20protocol%2C%20specifically%20Harmony%20and%20the%20knowledge%20which%20he%20generously%20shared.%0A%0A%F0%9F%99%8F%F0%9F%92%99%F0%9F%99%8F%0A%0A%3E%20%E2%84%B9%EF%B8%8F%20Please%20note%3A%20Research%20is%20ongoing%20and%20as%20such%20some%20items%20are%20placeholders%20or%20work%20in%20progress%0A",lastUpdatedAt:1758829632e3},{lazy:()=>J(()=>import("./2018-07-17-projectx-Xf97kNfT.js"),[]),path:"/product/previous/2018-07-17-projectx",type:"mdx",filePath:"product/previous/2018-07-17-projectx.mdx",content:"%23%20Project-X%20Technical%20White%20Paper%0A%0ABlockchain%20ledger%20platform%20with%20a%20focus%20on%20interoperability%2C%20speed%20and%20privacy%0A%0A-%20date%3A%202018-07-17%0A-%20author%3A%20John%20Whitton%0A%0A%3Cobject%0A%20%20data%3D%22%2Fposts%2F2018-07-17-projectx%2FprojectX.pdf%22%0A%20%20width%3D%221000%22%0A%20%20height%3D%221000%22%0A%20%20type%3D%22application%2Fpdf%22%0A%2F%3E%0A",lastUpdatedAt:void 0},{lazy:()=>J(()=>import("./2018-07-17-projectx-Xf97kNfT.js"),[]),path:"/product/previous/2018-07-17-projectx.html",type:"mdx",filePath:"product/previous/2018-07-17-projectx.mdx",content:"%23%20Project-X%20Technical%20White%20Paper%0A%0ABlockchain%20ledger%20platform%20with%20a%20focus%20on%20interoperability%2C%20speed%20and%20privacy%0A%0A-%20date%3A%202018-07-17%0A-%20author%3A%20John%20Whitton%0A%0A%3Cobject%0A%20%20data%3D%22%2Fposts%2F2018-07-17-projectx%2FprojectX.pdf%22%0A%20%20width%3D%221000%22%0A%20%20height%3D%221000%22%0A%20%20type%3D%22application%2Fpdf%22%0A%2F%3E%0A",lastUpdatedAt:void 0},{lazy:()=>J(()=>import("./2019-10-16-devcon5-DuF9YUQA.js"),[]),path:"/product/previous/2019-10-16-devcon5",type:"mdx",filePath:"product/previous/2019-10-16-devcon5.mdx",content:"%23%20Lessons%20Learned%20from%20Devcon5%0A%0ADevcon5%20key%20take%20aways%20on%20emerging%20blockchain%20technologies%2C%20new%20initatives%20and%20what%20the%20community%20is%20looking%20for.%0A%0A-%20date%3A%202019-10-16%0A-%20author%3A%20John%20Whitton%0A%0A%23%23%20Introduction%0A%0AHaving%20just%20returned%20from%20Devcon5%20I%E2%80%99d%20like%20to%20take%20a%20moment%20to%20thank%20Tokyo%20and%20Osaka%20specifically%20for%20the%20warmth%20and%20hospitality%20shown.%20Secondly%20I%E2%80%99d%20like%20to%20congratulate%20the%20Ethereum%20community%20for%20its%20vibrant%20and%20inclusive%20culture.%20The%20community%20continues%20to%20get%20stronger%20every%20year%20and%20the%20level%20of%20research%20and%20innovation%20is%20amazing.%0A%0ASo%20with%20that%20being%20said%2C%20I%20thought%20I%E2%80%99d%20also%20share%20some%20of%20the%20lessons%20that%20the%20Harmony%20team%20learned%20and%20also%20some%20focus%20areas%20for%20us%20as%20we%20move%20forward.%20In%20the%20form%20of%20a%20few%20slides.%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F1_meet.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A%0AThe%20highlight%20as%20you%20can%20see%20below%20is%20engaging%20and%20learning%20from%20the%20quality%20researchers%20and%20partners%20at%20the%20conference.%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F2_highlight.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A%0AThe%20following%205%20areas%20we%20found%20of%20most%20interest%20to%20help%20us%20better%20serve%20our%20developer%20and%20user%20community.%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F3_lessons.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A%0A1.%20As%20a%20layer%20one%20solution%20scaling%20is%20of%20keen%20interest%20to%20us%20and%20it%20was%20exciting%20to%20see%20the%20amount%20of%20work%20done%20on%20Layer%20II%20solutions.%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F4_layer2.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A%0A2.%20The%20overwhelming%20message%20from%20the%20community%20is%20that%20wallets%20need%20to%20be%20simplified%20to%20drive%20Main%20stream%20adoption.%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F5_wallets.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A%0A3.%20Bridging%20decentralized%20finance%20and%20traditional%20finance%20continues%20to%20be%20sought%20after.%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F6_tokens.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A%0A4.%20Currently%20blockchains%20are%20still%20limited%20by%20scalability%20and%20settlement%20time%20issues.%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F7_settlement.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A%0A5.%20Sharding%20is%20one%20of%20the%20key%20approaches%20for%20scalability.%20It%20was%20refreshing%20to%20see%20some%20of%20the%20innovative%20methods%20people%20are%20using%20for%20this.%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F8_sharding.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A%0AI%20hope%20you%20found%20this%20helpful%20and%20if%20you%E2%80%99d%20like%20to%20find%20out%20more%20about%20Harmony%20please%20use%20the%20following%20links%20to%20%5BJoin%20our%20community%5D(https%3A%2F%2Fopen.harmony.one%2F)%20%2C%20%5Bread%20our%20docs%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2F)%20and%20%5Bcontribute%20to%20our%20protocol%5D(https%3A%2F%2Fgithub.com%2Fharmony-one).%0A%0A**Thanks%20for%20your%20interest%20in%20Harmony.**%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F9_harmony.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A",lastUpdatedAt:void 0},{lazy:()=>J(()=>import("./2019-10-16-devcon5-DuF9YUQA.js"),[]),path:"/product/previous/2019-10-16-devcon5.html",type:"mdx",filePath:"product/previous/2019-10-16-devcon5.mdx",content:"%23%20Lessons%20Learned%20from%20Devcon5%0A%0ADevcon5%20key%20take%20aways%20on%20emerging%20blockchain%20technologies%2C%20new%20initatives%20and%20what%20the%20community%20is%20looking%20for.%0A%0A-%20date%3A%202019-10-16%0A-%20author%3A%20John%20Whitton%0A%0A%23%23%20Introduction%0A%0AHaving%20just%20returned%20from%20Devcon5%20I%E2%80%99d%20like%20to%20take%20a%20moment%20to%20thank%20Tokyo%20and%20Osaka%20specifically%20for%20the%20warmth%20and%20hospitality%20shown.%20Secondly%20I%E2%80%99d%20like%20to%20congratulate%20the%20Ethereum%20community%20for%20its%20vibrant%20and%20inclusive%20culture.%20The%20community%20continues%20to%20get%20stronger%20every%20year%20and%20the%20level%20of%20research%20and%20innovation%20is%20amazing.%0A%0ASo%20with%20that%20being%20said%2C%20I%20thought%20I%E2%80%99d%20also%20share%20some%20of%20the%20lessons%20that%20the%20Harmony%20team%20learned%20and%20also%20some%20focus%20areas%20for%20us%20as%20we%20move%20forward.%20In%20the%20form%20of%20a%20few%20slides.%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F1_meet.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A%0AThe%20highlight%20as%20you%20can%20see%20below%20is%20engaging%20and%20learning%20from%20the%20quality%20researchers%20and%20partners%20at%20the%20conference.%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F2_highlight.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A%0AThe%20following%205%20areas%20we%20found%20of%20most%20interest%20to%20help%20us%20better%20serve%20our%20developer%20and%20user%20community.%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F3_lessons.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A%0A1.%20As%20a%20layer%20one%20solution%20scaling%20is%20of%20keen%20interest%20to%20us%20and%20it%20was%20exciting%20to%20see%20the%20amount%20of%20work%20done%20on%20Layer%20II%20solutions.%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F4_layer2.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A%0A2.%20The%20overwhelming%20message%20from%20the%20community%20is%20that%20wallets%20need%20to%20be%20simplified%20to%20drive%20Main%20stream%20adoption.%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F5_wallets.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A%0A3.%20Bridging%20decentralized%20finance%20and%20traditional%20finance%20continues%20to%20be%20sought%20after.%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F6_tokens.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A%0A4.%20Currently%20blockchains%20are%20still%20limited%20by%20scalability%20and%20settlement%20time%20issues.%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F7_settlement.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A%0A5.%20Sharding%20is%20one%20of%20the%20key%20approaches%20for%20scalability.%20It%20was%20refreshing%20to%20see%20some%20of%20the%20innovative%20methods%20people%20are%20using%20for%20this.%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F8_sharding.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A%0AI%20hope%20you%20found%20this%20helpful%20and%20if%20you%E2%80%99d%20like%20to%20find%20out%20more%20about%20Harmony%20please%20use%20the%20following%20links%20to%20%5BJoin%20our%20community%5D(https%3A%2F%2Fopen.harmony.one%2F)%20%2C%20%5Bread%20our%20docs%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2F)%20and%20%5Bcontribute%20to%20our%20protocol%5D(https%3A%2F%2Fgithub.com%2Fharmony-one).%0A%0A**Thanks%20for%20your%20interest%20in%20Harmony.**%0A%0A%3Cspan%20class%3D%22image%20main%22%3E%0A%20%20%3Cimg%20src%3D%22%2Fposts%2F2019-10-16-devcon5%2F9_harmony.webp%22%20alt%3D%22%22%20%2F%3E%0A%3C%2Fspan%3E%0A",lastUpdatedAt:void 0},{lazy:()=>J(()=>import("./2021-04-01-eave-parachain-zkVYmHyg.js"),[]),path:"/product/previous/2021-04-01-eave-parachain",type:"mdx",filePath:"product/previous/2021-04-01-eave-parachain.mdx",content:"%23%20EAVE%20Parachain%20Design%0A%0AEmerging%20Asset%20Value%20Engine%20(EAVE)%20Polkadot%20Parachain%0A%0A-%20date%3A%202021-04-01%0A-%20author%3A%20John%20Whitton%0A%0A%3Cobject%0A%20%20data%3D%22%2Fposts%2F2021-04-01-eave-parachain%2FEaveParachainDesign.pdf%22%0A%20%20width%3D%221000%22%0A%20%20height%3D%221000%22%0A%20%20type%3D%22application%2Fpdf%22%0A%2F%3E%0A",lastUpdatedAt:void 0},{lazy:()=>J(()=>import("./2021-04-01-eave-parachain-zkVYmHyg.js"),[]),path:"/product/previous/2021-04-01-eave-parachain.html",type:"mdx",filePath:"product/previous/2021-04-01-eave-parachain.mdx",content:"%23%20EAVE%20Parachain%20Design%0A%0AEmerging%20Asset%20Value%20Engine%20(EAVE)%20Polkadot%20Parachain%0A%0A-%20date%3A%202021-04-01%0A-%20author%3A%20John%20Whitton%0A%0A%3Cobject%0A%20%20data%3D%22%2Fposts%2F2021-04-01-eave-parachain%2FEaveParachainDesign.pdf%22%0A%20%20width%3D%221000%22%0A%20%20height%3D%221000%22%0A%20%20type%3D%22application%2Fpdf%22%0A%2F%3E%0A",lastUpdatedAt:void 0},{lazy:()=>J(()=>import("./2021-05-01-kanga-C_xoQueR.js"),[]),path:"/product/previous/2021-05-01-kanga",type:"mdx",filePath:"product/previous/2021-05-01-kanga.mdx",content:"%23%20Kanga%20Protocol%20Whitepaper%0A%0AKernel%20Agnositic%20Next%20Generation%20Assets%20(KANGA)%3A%20A%20Decentralized%20Finance%20Protocol%0A%0A-%20date%3A%202021-05-01%0A-%20author%3A%20John%20Whitton%0A%0A%23%23%20Overview%0A%0A%5Bkanga.finance%5D(https%3A%2F%2Fkanga.finance%2F)%20is%20a%20Dex%20implementation%20inspired%20by%20Sushi%20and%20proof%20of%20concept%20integration%20with%20one-wallet.%20(%5Bgithub%5D(https%3A%2F%2Fgithub.com%2Fkangafinance)).%20%5BWinner%5D(https%3A%2F%2Fdocs.google.com%2Fpresentation%2Fd%2F1ZGrbKSaAdtzvMzVh0EVFBfUvA4SqiAeYVXGhJN7Orbs%2Fedit%23slide%3Did.g48989ac23a_0_0)%20of%20%2430%2C000%20in%20prizes%20from%20%5BHarmony%20Hackathon%5D(https%3A%2F%2Fbounties.gitcoin.co%2Fhackathon%2Fharmony-defi%2Fonboard).%0A%0A%3Cobject%0A%20%20data%3D%22%2Fposts%2F2021-05-01-kanga%2FKANGAWhitepaper.pdf%22%0A%20%20width%3D%221000%22%0A%20%20height%3D%221000%22%0A%20%20type%3D%22application%2Fpdf%22%0A%2F%3E%0A",lastUpdatedAt:void 0},{lazy:()=>J(()=>import("./2021-05-01-kanga-C_xoQueR.js"),[]),path:"/product/previous/2021-05-01-kanga.html",type:"mdx",filePath:"product/previous/2021-05-01-kanga.mdx",content:"%23%20Kanga%20Protocol%20Whitepaper%0A%0AKernel%20Agnositic%20Next%20Generation%20Assets%20(KANGA)%3A%20A%20Decentralized%20Finance%20Protocol%0A%0A-%20date%3A%202021-05-01%0A-%20author%3A%20John%20Whitton%0A%0A%23%23%20Overview%0A%0A%5Bkanga.finance%5D(https%3A%2F%2Fkanga.finance%2F)%20is%20a%20Dex%20implementation%20inspired%20by%20Sushi%20and%20proof%20of%20concept%20integration%20with%20one-wallet.%20(%5Bgithub%5D(https%3A%2F%2Fgithub.com%2Fkangafinance)).%20%5BWinner%5D(https%3A%2F%2Fdocs.google.com%2Fpresentation%2Fd%2F1ZGrbKSaAdtzvMzVh0EVFBfUvA4SqiAeYVXGhJN7Orbs%2Fedit%23slide%3Did.g48989ac23a_0_0)%20of%20%2430%2C000%20in%20prizes%20from%20%5BHarmony%20Hackathon%5D(https%3A%2F%2Fbounties.gitcoin.co%2Fhackathon%2Fharmony-defi%2Fonboard).%0A%0A%3Cobject%0A%20%20data%3D%22%2Fposts%2F2021-05-01-kanga%2FKANGAWhitepaper.pdf%22%0A%20%20width%3D%221000%22%0A%20%20height%3D%221000%22%0A%20%20type%3D%22application%2Fpdf%22%0A%2F%3E%0A",lastUpdatedAt:void 0},{lazy:()=>J(()=>import("./2021-12-01-eave-defi-Bghvgbg0.js"),[]),path:"/product/previous/2021-12-01-eave-defi",type:"mdx",filePath:"product/previous/2021-12-01-eave-defi.mdx",content:"%23%20Draft%20EAVE%20Whitepaper%0A%0AEAVE%3A%20a%20multi-chain%20web3%20engine%20to%20support%20the%20growing%20adoption%20of%20emerging%20assets%20on%20blockchain%0A%0A-%20date%3A%202021-12-01%0A-%20author%3A%20John%20Whitton%0A%0A%3Cobject%0A%20%20data%3D%22%2Fposts%2F2021-12-01-eave-defi%2FDraftEAVEWhitepaper.pdf%22%0A%20%20width%3D%221000%22%0A%20%20height%3D%221000%22%0A%20%20type%3D%22application%2Fpdf%22%0A%2F%3E%0A",lastUpdatedAt:void 0},{lazy:()=>J(()=>import("./2021-12-01-eave-defi-Bghvgbg0.js"),[]),path:"/product/previous/2021-12-01-eave-defi.html",type:"mdx",filePath:"product/previous/2021-12-01-eave-defi.mdx",content:"%23%20Draft%20EAVE%20Whitepaper%0A%0AEAVE%3A%20a%20multi-chain%20web3%20engine%20to%20support%20the%20growing%20adoption%20of%20emerging%20assets%20on%20blockchain%0A%0A-%20date%3A%202021-12-01%0A-%20author%3A%20John%20Whitton%0A%0A%3Cobject%0A%20%20data%3D%22%2Fposts%2F2021-12-01-eave-defi%2FDraftEAVEWhitepaper.pdf%22%0A%20%20width%3D%221000%22%0A%20%20height%3D%221000%22%0A%20%20type%3D%22application%2Fpdf%22%0A%2F%3E%0A",lastUpdatedAt:void 0},{lazy:()=>J(()=>import("./2023-02-23-rainbow-costs-DNt0awS_.js"),[]),path:"/product/previous/2023-02-23-rainbow-costs",type:"mdx",filePath:"product/previous/2023-02-23-rainbow-costs.mdx",content:"%23%20Ethereum%20Bridging%20using%20Light%20Clients%20-%20Rainbow%20Costing%0A%0AThis%20research%20was%20done%20in%20conjunction%20with%20the%20Harmony%20team%20in%20early%202022.%0A%0AA%20review%20of%20how%20Bridging%20costs%20can%20be%20reduced%20using%20light%20clients.%20Taking%20the%20near%20Rainbow%20Bridge%20as%20an%20example.%0A%0A-%20date%3A%202022-02-23%0A-%20author%3A%20John%20Whitton%0A-%20contributors%3A%20Thanks%20to%20Aaron%20Li%20for%20their%20helpful%20suggestions.%0A%0A%23%23%20Table%20of%20Contents%0A%0A-%20%5BEthereum%20Bridging%20using%20Light%20Clients%20-%20Rainbow%20Costing%5D(%23ethereum-bridging-using-light-clients---rainbow-costing)%0A%20%20-%20%5BTable%20of%20Contents%5D(%23table-of-contents)%0A%20%20-%20%5BIntroduction%5D(%23introduction)%0A%20%20-%20%5BBridge%20Transaction%20Walk%20Through%5D(%23bridge-transaction-walk-through)%0A%20%20%20%20-%20%5BActors%5D(%23actors)%0A%20%20%20%20-%20%5BSample%20TransactionFlow%5D(%23sample-transactionflow)%0A%20%20-%20%5BBridging%20Resources%20Required%5D(%23bridging-resources-required)%0A%20%20%20%20-%20%5BReferences%5D(%23references)%0A%0A%23%23%20Introduction%0A%0AIn%20this%20article%20we%20review%20the%20use%20of%20light%20clients%20and%20how%20they%20can%20improve%20trust%20and%20costing%20for%20bridges.%0A%0A%23%23%20Bridge%20Transaction%20Walk%20Through%0A%0AFollowing%20is%20a%20walkthough%20of%20a%20funds%20transfer%20from%20Ethereum%20to%20a%20target%20chain%20(In%20this%20example%20Near)%2C%20complete%20with%20light%20client%20updates%2C%20block%20propogation%20and%20proofs%20to%20ensure%20the%20transaction%20validity.%0A%0A!%5BEthereum%20to%20Near%20Funds%20Transfer%5D(%2Fposts%2F2023-03-23-rainbow-costs%2Feth2NearFundsTransfer.jpg%20%22Ethereum%20to%20NEAR%20Funds%20Transfer%22)%0A%0A%23%23%23%20Actors%0A%0AFrom%20the%20diagram%20above%20you'll%20notice%20that%20there%20are%20many%20actors%20involved%2C%20below%20is%20an%20overview%20of%20the%20actors%20and%20the%20operations%20they%20perform.%0A%0A-%20Accounts%0A%20%20-%20%5BUser%20Account%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x29da2ef94deeaf2d2f9003e9354abfcb1ff04b32)%20%3A%20The%20user%20is%20the%20owner%20of%20the%20funds%20being%20transferred%20and%20is%20responsible%20for%20signing%20the%20transactions%20to%20authorize%20bridging%20them%20accross%20chains.%20In%20this%20example%20they%20have%20accounts%20on%20%5BEthereum%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x29da2ef94deeaf2d2f9003e9354abfcb1ff04b32)%20and%20%5BNEAR%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fjohnrubini.near%23tokentxns)%0A%20%20-%20%5BTarget%20Chain%20Relayer%20Acccount%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Frelayer.bridge.near)%3A%20The%20relayer%20account%20is%20responsible%20for%20relaying%20messages%20from%20Ethereum%20to%20the%20target%20chain.%20%5C*Note%20this%20is%20connected%20to%20a%20relayer%20which%20is%20responsible%20for%20tasks%20such%20as%20querying%20latest%20block%20headers%20and%20getting%20light%20client%20status%20updates.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs).%0A%20%20-%20%5BTarget%20Chain%20Bridge%20Validator%20Accounts%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator1.near)%3A%20are%20responsible%20for%20validating%20light%20client%20update%20proposals%20and%20sending%20approval%20votes%20to%20%5BDAO%20Eth%20Client%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near).%0A-%20Ethereum%20Components%0A%20%20-%20%5BERC20%20Token%20Contract%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0xdac17f958d2ee523a2206206994597c13d831ec7%23code)%3A%20this%20is%20the%20token%20contract%20securing%20the%20funds%20in%20this%20examle%20USDT%20(Tether).%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2FOpenZeppelin%2Fopenzeppelin-contracts%2Fblob%2Frelease-v4.8%2Fcontracts%2Ftoken%2FERC20%2Fpresets%2FERC20PresetMinterPauser.sol)%0A%20%20-%20%5BBridge%20Contract%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x23ddd3e3692d1861ed57ede224608875809e127f%23code)%3A%20Responsible%20for%20deposits%20and%20withdrawals%20of%20tokens%20on%20Ethereum%20as%20well%20as%20various%20proving%20and%20propogation%20mechanisms%20such%20as%20checking%20of%20Signatures%20and%20adding%20Light%20Client%20Blocks.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearBridge.sol)%0A-%20Target%20Chain%20(NEAR)%20Components%0A%20%20-%20%5BValidator%20DAO%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%3A%20Responsible%20for%20receivng%20light%20client%20update%20proposals%20from%20the%20relayer%20and%20gathering%20approval%20votes%20for%20these%20propoals%20from%20Validators%20and%20submitting%20light%20client%20updates%20once%20the%20proposal%20is%20approved%20by%20the%20Validators.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Fdao_eth_client_contract.rs)%0A%20%20-%20%5BEtherum%202%20Client%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near)%3A%20The%20Ethereum%202%20client%20is%20responsbile%20for%20processing%20light%20client%20updates%20and%20receiving%20execution%20header%20blocks%20from%20Ethereum%20via%20the%20relayer.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs).%20_Note%3A%20this%20replaced%20the%20%5BEthereum%201%20client%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near)%20source%20code%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth-client%2Fsrc%2Flib.rs)_%0A%20%20-%20%5BEthereum%20Prover%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fprover.bridge.near)%20%3A%20The%20Ethereum%20Prover%20is%20used%20to%20prove%20transactions%20are%20included%20in%20a%20valid%20block%20Header.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth-prover%2Fsrc%2Flib.rs)%0A%20%20-%20%5BBridge%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Ffactory.bridge.near%23contract)%3A%20The%20Bridge%20contract%20is%20responsible%20for%20managing%20tokens%20including%20creating%20new%20tokens%2C%20setting%20metadata%20and%20depositing%20and%20withdrawal%20of%20tokens.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Fbridge-token-factory%2Fsrc%2Flib.rs).%0A%20%20%20%20-%20%5BNEAR%20Token%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Ftoken%2Fdac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near%3Fa%3Ddac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near)%3A%20The%20target%20chain%20representation%20of%20the%20token%20(USDT)%20managed%20by%20the%20target%20chain%20bridge%20contract.%0A%0A%23%23%23%20Sample%20TransactionFlow%0A%0A1.%20Block%20Propogation%0A%20%20%201.%20Get%20the%20Latest%20Slot%3A%20The%20relayer%20loops%20polling%20Ethereum%20every%2012%20seconds%20to%20get%20the%20latest%20slot.%20It%20then%20checks%20if%20it%20is%20for%20a%20new%20epoch%20and%20if%20so%20(every%206%20minutes)%20submits%20an%20execution%20header%20(with%2032%20blocks%20in%20it)%20and%20a%20light%20client%20update%20with%20the%20latest%20approved%20epochs%20and%20updated%20sync_comittee.%20Relayer%20source%20code%20for%20the%20loop%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L258)%20for%20retrieving%20the%20latest%20slot%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L163)%2C%20for%20submitting%20execution%20blocks%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L399)%20and%20for%20sending%20light%20client%20updates%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L489).%0A%20%20%20%20%20%201.%20%5BSend%20Block%20Headers%20(submit_execution_header)%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FHaXUxCvA1D87QXJzPzSYXmFYNuSLbTmyuxShzWgSLvPM)%3A%20Batch%20transaction%20which%20submits%2032%20block%20headers%20to%20%5Bclient-eth2.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near)%20for%20Ethereum%20Blocks%2016493592%20to%2016493623.%20(The%20second%20slot%20in%20epoch%20%5B176%2C936%5D(https%3A%2F%2Fbeaconcha.in%2Fepoch%2F176936)%20to%20the%20first%20slot%20in%20epoch%20%5B176%2C937%5D(https%3A%2F%2Fbeaconcha.in%2Fepoch%2F176937)).%20**Executed%20every%206%20minutes%20when%20the%20first%20slot%20of%20a%20new%20epoch%20is%20found.**%0A%20%20%20%20%20%202.%20%5BCreate%20Light%20Client%20update%20proposal(add_proposal)%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FJ1tQ465Dxt4UhWy9Msn2pZCbdkWatSepqsx9sDZaX35z%23)%3A%20calls%20%5Bbridge-validator.sputnik-dao.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%20to%20add%20proposal%2017410%20for%20%5Bslot%205%2C661%2C984%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5661984)%20in%20epoch%20%5B176%2C937%5D(https%3A%2F%2Fbeaconcha.in%2Fepoch%2F176937).%0A%20%20%202.%20%5BApprove%20Proposal%20(act_proposal)%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FD5uP4BbRSUX4ZGijRfWGkR5KbFb2Kb9q1gSsFVQbYSLt)%3A%20sends%20a%20VoteApprove%20action%20for%20proposal%2017410%20from%20a%20%5Bbridge%20validator%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator1.near)%20to%20the%20%5BValidator%20DAO%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near).%0A%20%20%20%20%20%201.%20act_proposal%20in%20contract%20%5Bbridge-validator.sputnik-dao.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%0A%20%20%20%20%20%202.%20submit_beacon_chain_light_client_update%20in%20%5Bclient-eth2.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near)%0A%20%20%20%20%20%203.%20on_proposal_callback%20in%20contract%20%5Bbridge-validator.sputnik-dao.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%0A2.%20Funds%20Transfer%20Transaction%20Flow%0A%20%20%201.%20%5BLock%20Funds%20On%20Ethereum%5D(https%3A%2F%2Fetherscan.io%2Ftx%2F0xa685c59a24cc2056e10e660ce8a8bff7bbc335433698e138c77aaadf20ecb614)%3A%20Locking%2010%2C000%20USDT%20to%20send%20to%20user%20on%20NEAR.%0A%20%20%202.%20%5BDeposit%20Funds%20on%20Target%20Chain%20Bridge%20Contract%20(deposit)%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FvniyRR67ndrtvpoQ9c5ACoT4e9c283VSQsrZcN6GGto%23execution)%0A%20%20%20%20%20%201.%20deposit%20in%20contract%20factory.bridge.near%0A%20%20%20%20%20%202.%20verify_log_entry%20in%20contract%20prover.bridge.near%0A%20%20%20%20%20%203.%20block_hash_safe%20in%20contract%20client-eth2.bridge.near%0A%20%20%20%20%20%204.%20finish_deposit%20in%20contract%20factory.bridge.near%20%3A%20mint%20of%2010%2C000%20USDT.%0A%0A**TODO**%0A%0A-%20Find%20and%20review%20the%20source%20code%20for%20the%20%5Bvalidator%20light%20client%20approval%20update%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FHnzBR7x5Sxnmcm4MfRt1ghhMjJNspDaygUUKeM9T27Li%23execution).%20_Note%3A%20the%20eth2_client%20has%20a%20%5Bvalidate_light_client_update%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs%23L311)%20which%20is%20%5Bconfigurable%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs%23L42)%20and%20is%20used%20for%20debugging%20purposes._%0A%0A%23%23%20Bridging%20Resources%20Required%0A%0AHere%20is%20the%20storage%20and%20compuational%20costs%20per%20component.%0A%0A%7C%20Component%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Data%20%20%20%20%20%20%20%20%20%20%20%7C%20Storage%20%7C%20Notes%20%7C%0A%7C%20---------------------------------------------------------------------------------------------------------------------------%20%7C%20--------------%20%7C%20-------%20%7C%20-----%20%7C%0A%7C%20%5BEthereum%202%20Client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs%23L35)%20%7C%20---%20%20%20%20%20%20%20%20%20%20%20%20%7C%20---%20%20%20%20%20%7C%20---%20%20%20%7C%0A%7C%20%5BProver%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth-prover%2Fsrc%2Flib.rs)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20not%20applicable%20%7C%200%20bytes%20%7C%20%20%20%20%20%20%20%7C%0A%7C%20%5BDAO%20Contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Fdao_contract.rs)%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%7C%0A%0A**TODO**%0AReview%20the%20following%20data%20structure%20and%20elements%20and%20move%20into%20the%20table%20above%20commenting%20on%20any%20mandatory%20requirements%20and%20structures%20that%20can%20be%20improved.%0A%0A%60%60%60go%0Apub%20struct%20Eth2Client%20%7B%0A%20%20%20%20%2F%2F%2F%20If%20set%2C%20only%20light%20client%20updates%20by%20the%20trusted%20signer%20will%20be%20accepted%0A%20%20%20%20trusted_signer%3A%20Option%3CAccountId%3E%2C%0A%20%20%20%20%2F%2F%2F%20Mask%20determining%20all%20paused%20functions%0A%20%20%20%20paused%3A%20Mask%2C%0A%20%20%20%20%2F%2F%2F%20Whether%20the%20client%20validates%20the%20updates.%0A%20%20%20%20%2F%2F%2F%20Should%20only%20be%20set%20to%20%60false%60%20for%20debugging%2C%20testing%2C%20and%20diagnostic%20purposes%0A%20%20%20%20validate_updates%3A%20bool%2C%0A%20%20%20%20%2F%2F%2F%20Whether%20the%20client%20verifies%20BLS%20signatures.%0A%20%20%20%20verify_bls_signatures%3A%20bool%2C%0A%20%20%20%20%2F%2F%2F%20We%20store%20the%20hashes%20of%20the%20blocks%20for%20the%20past%20%60hashes_gc_threshold%60%20headers.%0A%20%20%20%20%2F%2F%2F%20Events%20that%20happen%20past%20this%20threshold%20cannot%20be%20verified%20by%20the%20client.%0A%20%20%20%20%2F%2F%2F%20It%20is%20desirable%20that%20this%20number%20is%20larger%20than%207%20days'%20worth%20of%20headers%2C%20which%20is%20roughly%0A%20%20%20%20%2F%2F%2F%2051k%20Ethereum%20blocks.%20So%20this%20number%20should%20be%2051k%20in%20production.%0A%20%20%20%20hashes_gc_threshold%3A%20u64%2C%0A%20%20%20%20%2F%2F%2F%20Network.%20e.g.%20mainnet%2C%20kiln%0A%20%20%20%20network%3A%20Network%2C%0A%20%20%20%20%2F%2F%2F%20Hashes%20of%20the%20finalized%20execution%20blocks%20mapped%20to%20their%20numbers.%20Stores%20up%20to%20%60hashes_gc_threshold%60%20entries.%0A%20%20%20%20%2F%2F%2F%20Execution%20block%20number%20-%3E%20execution%20block%20hash%0A%20%20%20%20finalized_execution_blocks%3A%20LookupMap%3Cu64%2C%20H256%3E%2C%0A%20%20%20%20%2F%2F%2F%20All%20unfinalized%20execution%20blocks'%20headers%20hashes%20mapped%20to%20their%20%60HeaderInfo%60.%0A%20%20%20%20%2F%2F%2F%20Execution%20block%20hash%20-%3E%20ExecutionHeaderInfo%20object%0A%20%20%20%20unfinalized_headers%3A%20UnorderedMap%3CH256%2C%20ExecutionHeaderInfo%3E%2C%0A%20%20%20%20%2F%2F%2F%20%60AccountId%60s%20mapped%20to%20their%20number%20of%20submitted%20headers.%0A%20%20%20%20%2F%2F%2F%20Submitter%20account%20-%3E%20Num%20of%20submitted%20headers%0A%20%20%20%20submitters%3A%20LookupMap%3CAccountId%2C%20u32%3E%2C%0A%20%20%20%20%2F%2F%2F%20Max%20number%20of%20unfinalized%20blocks%20allowed%20to%20be%20stored%20by%20one%20submitter%20account%0A%20%20%20%20%2F%2F%2F%20This%20value%20should%20be%20at%20least%2032%20blocks%20(1%20epoch)%2C%20but%20the%20recommended%20value%20is%201024%20(32%20epochs)%0A%20%20%20%20max_submitted_blocks_by_account%3A%20u32%2C%0A%20%20%20%20%2F%2F%20The%20minimum%20balance%20that%20should%20be%20attached%20to%20register%20a%20new%20submitter%20account%0A%20%20%20%20min_storage_balance_for_submitter%3A%20Balance%2C%0A%20%20%20%20%2F%2F%2F%20Light%20client%20state%0A%20%20%20%20finalized_beacon_header%3A%20ExtendedBeaconBlockHeader%2C%0A%20%20%20%20finalized_execution_header%3A%20LazyOption%3CExecutionHeaderInfo%3E%2C%0A%20%20%20%20current_sync_committee%3A%20LazyOption%3CSyncCommittee%3E%2C%0A%20%20%20%20next_sync_committee%3A%20LazyOption%3CSyncCommittee%3E%2C%0A%7D%0A%60%60%60%0A%0A%23%23%23%20References%0A%0A**Explorer%20and%20Interactive%20Links**%0A%0A-%20Near%0A%20%20-%20eth-prover%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Frelayer.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Frelayer.bridge.near)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near)%0A%20%20-%20eth-client%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fprover.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fprover.bridge.near)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near)%0A%20%20-%20factory%20(manages%20tokens)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Ffactory.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Ffactory.bridge.near)%0A%20%20-%20dao%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%0A%20%20-%20aurora%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Faurora%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Faurora)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Frelay.aurora%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Frelay.aurora)%0A%0A-%20Ethereum%0A%20%20-%20%5Bbeaconcha.in%5D(https%3A%2F%2Fbeaconcha.in%2F)%0A%20%20%20%20-%20%5Bvalidators%5D(https%3A%2F%2Fbeaconcha.in%2Fvalidators)%0A%20%20%20%20-%20%5Bepochs%5D(https%3A%2F%2Fbeaconcha.in%2Fepochs)%0A%20%20%20%20-%20%5Bslots%5D(https%3A%2F%2Fbeaconcha.in%2Fslots)%0A%20%20%20%20-%20%5Bblocks%5D(https%3A%2F%2Fbeaconcha.in%2Fblocks)%0A%20%20%20%20-%20%5Btransactions%5D(https%3A%2F%2Fbeaconcha.in%2Ftransactions)%0A%20%20-%20Near%20Bridge%0A%20%20%20%20-%20%5BNearBridge%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x3fefc5a4b1c02f21cbc8d3613643ba0635b9a873)%0A%20%20%20%20-%20%5BERC20Locker%5D(https%3A%2F%2Fetherscan.io%2Ftx%2F0xa685c59a24cc2056e10e660ce8a8bff7bbc335433698e138c77aaadf20ecb614)%0A",lastUpdatedAt:void 0},{lazy:()=>J(()=>import("./2023-02-23-rainbow-costs-DNt0awS_.js"),[]),path:"/product/previous/2023-02-23-rainbow-costs.html",type:"mdx",filePath:"product/previous/2023-02-23-rainbow-costs.mdx",content:"%23%20Ethereum%20Bridging%20using%20Light%20Clients%20-%20Rainbow%20Costing%0A%0AThis%20research%20was%20done%20in%20conjunction%20with%20the%20Harmony%20team%20in%20early%202022.%0A%0AA%20review%20of%20how%20Bridging%20costs%20can%20be%20reduced%20using%20light%20clients.%20Taking%20the%20near%20Rainbow%20Bridge%20as%20an%20example.%0A%0A-%20date%3A%202022-02-23%0A-%20author%3A%20John%20Whitton%0A-%20contributors%3A%20Thanks%20to%20Aaron%20Li%20for%20their%20helpful%20suggestions.%0A%0A%23%23%20Table%20of%20Contents%0A%0A-%20%5BEthereum%20Bridging%20using%20Light%20Clients%20-%20Rainbow%20Costing%5D(%23ethereum-bridging-using-light-clients---rainbow-costing)%0A%20%20-%20%5BTable%20of%20Contents%5D(%23table-of-contents)%0A%20%20-%20%5BIntroduction%5D(%23introduction)%0A%20%20-%20%5BBridge%20Transaction%20Walk%20Through%5D(%23bridge-transaction-walk-through)%0A%20%20%20%20-%20%5BActors%5D(%23actors)%0A%20%20%20%20-%20%5BSample%20TransactionFlow%5D(%23sample-transactionflow)%0A%20%20-%20%5BBridging%20Resources%20Required%5D(%23bridging-resources-required)%0A%20%20%20%20-%20%5BReferences%5D(%23references)%0A%0A%23%23%20Introduction%0A%0AIn%20this%20article%20we%20review%20the%20use%20of%20light%20clients%20and%20how%20they%20can%20improve%20trust%20and%20costing%20for%20bridges.%0A%0A%23%23%20Bridge%20Transaction%20Walk%20Through%0A%0AFollowing%20is%20a%20walkthough%20of%20a%20funds%20transfer%20from%20Ethereum%20to%20a%20target%20chain%20(In%20this%20example%20Near)%2C%20complete%20with%20light%20client%20updates%2C%20block%20propogation%20and%20proofs%20to%20ensure%20the%20transaction%20validity.%0A%0A!%5BEthereum%20to%20Near%20Funds%20Transfer%5D(%2Fposts%2F2023-03-23-rainbow-costs%2Feth2NearFundsTransfer.jpg%20%22Ethereum%20to%20NEAR%20Funds%20Transfer%22)%0A%0A%23%23%23%20Actors%0A%0AFrom%20the%20diagram%20above%20you'll%20notice%20that%20there%20are%20many%20actors%20involved%2C%20below%20is%20an%20overview%20of%20the%20actors%20and%20the%20operations%20they%20perform.%0A%0A-%20Accounts%0A%20%20-%20%5BUser%20Account%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x29da2ef94deeaf2d2f9003e9354abfcb1ff04b32)%20%3A%20The%20user%20is%20the%20owner%20of%20the%20funds%20being%20transferred%20and%20is%20responsible%20for%20signing%20the%20transactions%20to%20authorize%20bridging%20them%20accross%20chains.%20In%20this%20example%20they%20have%20accounts%20on%20%5BEthereum%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x29da2ef94deeaf2d2f9003e9354abfcb1ff04b32)%20and%20%5BNEAR%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fjohnrubini.near%23tokentxns)%0A%20%20-%20%5BTarget%20Chain%20Relayer%20Acccount%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Frelayer.bridge.near)%3A%20The%20relayer%20account%20is%20responsible%20for%20relaying%20messages%20from%20Ethereum%20to%20the%20target%20chain.%20%5C*Note%20this%20is%20connected%20to%20a%20relayer%20which%20is%20responsible%20for%20tasks%20such%20as%20querying%20latest%20block%20headers%20and%20getting%20light%20client%20status%20updates.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs).%0A%20%20-%20%5BTarget%20Chain%20Bridge%20Validator%20Accounts%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator1.near)%3A%20are%20responsible%20for%20validating%20light%20client%20update%20proposals%20and%20sending%20approval%20votes%20to%20%5BDAO%20Eth%20Client%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near).%0A-%20Ethereum%20Components%0A%20%20-%20%5BERC20%20Token%20Contract%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0xdac17f958d2ee523a2206206994597c13d831ec7%23code)%3A%20this%20is%20the%20token%20contract%20securing%20the%20funds%20in%20this%20examle%20USDT%20(Tether).%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2FOpenZeppelin%2Fopenzeppelin-contracts%2Fblob%2Frelease-v4.8%2Fcontracts%2Ftoken%2FERC20%2Fpresets%2FERC20PresetMinterPauser.sol)%0A%20%20-%20%5BBridge%20Contract%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x23ddd3e3692d1861ed57ede224608875809e127f%23code)%3A%20Responsible%20for%20deposits%20and%20withdrawals%20of%20tokens%20on%20Ethereum%20as%20well%20as%20various%20proving%20and%20propogation%20mechanisms%20such%20as%20checking%20of%20Signatures%20and%20adding%20Light%20Client%20Blocks.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearBridge.sol)%0A-%20Target%20Chain%20(NEAR)%20Components%0A%20%20-%20%5BValidator%20DAO%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%3A%20Responsible%20for%20receivng%20light%20client%20update%20proposals%20from%20the%20relayer%20and%20gathering%20approval%20votes%20for%20these%20propoals%20from%20Validators%20and%20submitting%20light%20client%20updates%20once%20the%20proposal%20is%20approved%20by%20the%20Validators.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Fdao_eth_client_contract.rs)%0A%20%20-%20%5BEtherum%202%20Client%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near)%3A%20The%20Ethereum%202%20client%20is%20responsbile%20for%20processing%20light%20client%20updates%20and%20receiving%20execution%20header%20blocks%20from%20Ethereum%20via%20the%20relayer.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs).%20_Note%3A%20this%20replaced%20the%20%5BEthereum%201%20client%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near)%20source%20code%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth-client%2Fsrc%2Flib.rs)_%0A%20%20-%20%5BEthereum%20Prover%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fprover.bridge.near)%20%3A%20The%20Ethereum%20Prover%20is%20used%20to%20prove%20transactions%20are%20included%20in%20a%20valid%20block%20Header.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth-prover%2Fsrc%2Flib.rs)%0A%20%20-%20%5BBridge%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Ffactory.bridge.near%23contract)%3A%20The%20Bridge%20contract%20is%20responsible%20for%20managing%20tokens%20including%20creating%20new%20tokens%2C%20setting%20metadata%20and%20depositing%20and%20withdrawal%20of%20tokens.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Fbridge-token-factory%2Fsrc%2Flib.rs).%0A%20%20%20%20-%20%5BNEAR%20Token%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Ftoken%2Fdac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near%3Fa%3Ddac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near)%3A%20The%20target%20chain%20representation%20of%20the%20token%20(USDT)%20managed%20by%20the%20target%20chain%20bridge%20contract.%0A%0A%23%23%23%20Sample%20TransactionFlow%0A%0A1.%20Block%20Propogation%0A%20%20%201.%20Get%20the%20Latest%20Slot%3A%20The%20relayer%20loops%20polling%20Ethereum%20every%2012%20seconds%20to%20get%20the%20latest%20slot.%20It%20then%20checks%20if%20it%20is%20for%20a%20new%20epoch%20and%20if%20so%20(every%206%20minutes)%20submits%20an%20execution%20header%20(with%2032%20blocks%20in%20it)%20and%20a%20light%20client%20update%20with%20the%20latest%20approved%20epochs%20and%20updated%20sync_comittee.%20Relayer%20source%20code%20for%20the%20loop%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L258)%20for%20retrieving%20the%20latest%20slot%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L163)%2C%20for%20submitting%20execution%20blocks%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L399)%20and%20for%20sending%20light%20client%20updates%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L489).%0A%20%20%20%20%20%201.%20%5BSend%20Block%20Headers%20(submit_execution_header)%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FHaXUxCvA1D87QXJzPzSYXmFYNuSLbTmyuxShzWgSLvPM)%3A%20Batch%20transaction%20which%20submits%2032%20block%20headers%20to%20%5Bclient-eth2.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near)%20for%20Ethereum%20Blocks%2016493592%20to%2016493623.%20(The%20second%20slot%20in%20epoch%20%5B176%2C936%5D(https%3A%2F%2Fbeaconcha.in%2Fepoch%2F176936)%20to%20the%20first%20slot%20in%20epoch%20%5B176%2C937%5D(https%3A%2F%2Fbeaconcha.in%2Fepoch%2F176937)).%20**Executed%20every%206%20minutes%20when%20the%20first%20slot%20of%20a%20new%20epoch%20is%20found.**%0A%20%20%20%20%20%202.%20%5BCreate%20Light%20Client%20update%20proposal(add_proposal)%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FJ1tQ465Dxt4UhWy9Msn2pZCbdkWatSepqsx9sDZaX35z%23)%3A%20calls%20%5Bbridge-validator.sputnik-dao.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%20to%20add%20proposal%2017410%20for%20%5Bslot%205%2C661%2C984%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5661984)%20in%20epoch%20%5B176%2C937%5D(https%3A%2F%2Fbeaconcha.in%2Fepoch%2F176937).%0A%20%20%202.%20%5BApprove%20Proposal%20(act_proposal)%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FD5uP4BbRSUX4ZGijRfWGkR5KbFb2Kb9q1gSsFVQbYSLt)%3A%20sends%20a%20VoteApprove%20action%20for%20proposal%2017410%20from%20a%20%5Bbridge%20validator%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator1.near)%20to%20the%20%5BValidator%20DAO%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near).%0A%20%20%20%20%20%201.%20act_proposal%20in%20contract%20%5Bbridge-validator.sputnik-dao.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%0A%20%20%20%20%20%202.%20submit_beacon_chain_light_client_update%20in%20%5Bclient-eth2.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near)%0A%20%20%20%20%20%203.%20on_proposal_callback%20in%20contract%20%5Bbridge-validator.sputnik-dao.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%0A2.%20Funds%20Transfer%20Transaction%20Flow%0A%20%20%201.%20%5BLock%20Funds%20On%20Ethereum%5D(https%3A%2F%2Fetherscan.io%2Ftx%2F0xa685c59a24cc2056e10e660ce8a8bff7bbc335433698e138c77aaadf20ecb614)%3A%20Locking%2010%2C000%20USDT%20to%20send%20to%20user%20on%20NEAR.%0A%20%20%202.%20%5BDeposit%20Funds%20on%20Target%20Chain%20Bridge%20Contract%20(deposit)%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FvniyRR67ndrtvpoQ9c5ACoT4e9c283VSQsrZcN6GGto%23execution)%0A%20%20%20%20%20%201.%20deposit%20in%20contract%20factory.bridge.near%0A%20%20%20%20%20%202.%20verify_log_entry%20in%20contract%20prover.bridge.near%0A%20%20%20%20%20%203.%20block_hash_safe%20in%20contract%20client-eth2.bridge.near%0A%20%20%20%20%20%204.%20finish_deposit%20in%20contract%20factory.bridge.near%20%3A%20mint%20of%2010%2C000%20USDT.%0A%0A**TODO**%0A%0A-%20Find%20and%20review%20the%20source%20code%20for%20the%20%5Bvalidator%20light%20client%20approval%20update%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FHnzBR7x5Sxnmcm4MfRt1ghhMjJNspDaygUUKeM9T27Li%23execution).%20_Note%3A%20the%20eth2_client%20has%20a%20%5Bvalidate_light_client_update%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs%23L311)%20which%20is%20%5Bconfigurable%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs%23L42)%20and%20is%20used%20for%20debugging%20purposes._%0A%0A%23%23%20Bridging%20Resources%20Required%0A%0AHere%20is%20the%20storage%20and%20compuational%20costs%20per%20component.%0A%0A%7C%20Component%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Data%20%20%20%20%20%20%20%20%20%20%20%7C%20Storage%20%7C%20Notes%20%7C%0A%7C%20---------------------------------------------------------------------------------------------------------------------------%20%7C%20--------------%20%7C%20-------%20%7C%20-----%20%7C%0A%7C%20%5BEthereum%202%20Client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs%23L35)%20%7C%20---%20%20%20%20%20%20%20%20%20%20%20%20%7C%20---%20%20%20%20%20%7C%20---%20%20%20%7C%0A%7C%20%5BProver%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth-prover%2Fsrc%2Flib.rs)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20not%20applicable%20%7C%200%20bytes%20%7C%20%20%20%20%20%20%20%7C%0A%7C%20%5BDAO%20Contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Fdao_contract.rs)%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%7C%0A%0A**TODO**%0AReview%20the%20following%20data%20structure%20and%20elements%20and%20move%20into%20the%20table%20above%20commenting%20on%20any%20mandatory%20requirements%20and%20structures%20that%20can%20be%20improved.%0A%0A%60%60%60go%0Apub%20struct%20Eth2Client%20%7B%0A%20%20%20%20%2F%2F%2F%20If%20set%2C%20only%20light%20client%20updates%20by%20the%20trusted%20signer%20will%20be%20accepted%0A%20%20%20%20trusted_signer%3A%20Option%3CAccountId%3E%2C%0A%20%20%20%20%2F%2F%2F%20Mask%20determining%20all%20paused%20functions%0A%20%20%20%20paused%3A%20Mask%2C%0A%20%20%20%20%2F%2F%2F%20Whether%20the%20client%20validates%20the%20updates.%0A%20%20%20%20%2F%2F%2F%20Should%20only%20be%20set%20to%20%60false%60%20for%20debugging%2C%20testing%2C%20and%20diagnostic%20purposes%0A%20%20%20%20validate_updates%3A%20bool%2C%0A%20%20%20%20%2F%2F%2F%20Whether%20the%20client%20verifies%20BLS%20signatures.%0A%20%20%20%20verify_bls_signatures%3A%20bool%2C%0A%20%20%20%20%2F%2F%2F%20We%20store%20the%20hashes%20of%20the%20blocks%20for%20the%20past%20%60hashes_gc_threshold%60%20headers.%0A%20%20%20%20%2F%2F%2F%20Events%20that%20happen%20past%20this%20threshold%20cannot%20be%20verified%20by%20the%20client.%0A%20%20%20%20%2F%2F%2F%20It%20is%20desirable%20that%20this%20number%20is%20larger%20than%207%20days'%20worth%20of%20headers%2C%20which%20is%20roughly%0A%20%20%20%20%2F%2F%2F%2051k%20Ethereum%20blocks.%20So%20this%20number%20should%20be%2051k%20in%20production.%0A%20%20%20%20hashes_gc_threshold%3A%20u64%2C%0A%20%20%20%20%2F%2F%2F%20Network.%20e.g.%20mainnet%2C%20kiln%0A%20%20%20%20network%3A%20Network%2C%0A%20%20%20%20%2F%2F%2F%20Hashes%20of%20the%20finalized%20execution%20blocks%20mapped%20to%20their%20numbers.%20Stores%20up%20to%20%60hashes_gc_threshold%60%20entries.%0A%20%20%20%20%2F%2F%2F%20Execution%20block%20number%20-%3E%20execution%20block%20hash%0A%20%20%20%20finalized_execution_blocks%3A%20LookupMap%3Cu64%2C%20H256%3E%2C%0A%20%20%20%20%2F%2F%2F%20All%20unfinalized%20execution%20blocks'%20headers%20hashes%20mapped%20to%20their%20%60HeaderInfo%60.%0A%20%20%20%20%2F%2F%2F%20Execution%20block%20hash%20-%3E%20ExecutionHeaderInfo%20object%0A%20%20%20%20unfinalized_headers%3A%20UnorderedMap%3CH256%2C%20ExecutionHeaderInfo%3E%2C%0A%20%20%20%20%2F%2F%2F%20%60AccountId%60s%20mapped%20to%20their%20number%20of%20submitted%20headers.%0A%20%20%20%20%2F%2F%2F%20Submitter%20account%20-%3E%20Num%20of%20submitted%20headers%0A%20%20%20%20submitters%3A%20LookupMap%3CAccountId%2C%20u32%3E%2C%0A%20%20%20%20%2F%2F%2F%20Max%20number%20of%20unfinalized%20blocks%20allowed%20to%20be%20stored%20by%20one%20submitter%20account%0A%20%20%20%20%2F%2F%2F%20This%20value%20should%20be%20at%20least%2032%20blocks%20(1%20epoch)%2C%20but%20the%20recommended%20value%20is%201024%20(32%20epochs)%0A%20%20%20%20max_submitted_blocks_by_account%3A%20u32%2C%0A%20%20%20%20%2F%2F%20The%20minimum%20balance%20that%20should%20be%20attached%20to%20register%20a%20new%20submitter%20account%0A%20%20%20%20min_storage_balance_for_submitter%3A%20Balance%2C%0A%20%20%20%20%2F%2F%2F%20Light%20client%20state%0A%20%20%20%20finalized_beacon_header%3A%20ExtendedBeaconBlockHeader%2C%0A%20%20%20%20finalized_execution_header%3A%20LazyOption%3CExecutionHeaderInfo%3E%2C%0A%20%20%20%20current_sync_committee%3A%20LazyOption%3CSyncCommittee%3E%2C%0A%20%20%20%20next_sync_committee%3A%20LazyOption%3CSyncCommittee%3E%2C%0A%7D%0A%60%60%60%0A%0A%23%23%23%20References%0A%0A**Explorer%20and%20Interactive%20Links**%0A%0A-%20Near%0A%20%20-%20eth-prover%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Frelayer.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Frelayer.bridge.near)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near)%0A%20%20-%20eth-client%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fprover.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fprover.bridge.near)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near)%0A%20%20-%20factory%20(manages%20tokens)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Ffactory.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Ffactory.bridge.near)%0A%20%20-%20dao%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%0A%20%20-%20aurora%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Faurora%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Faurora)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Frelay.aurora%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Frelay.aurora)%0A%0A-%20Ethereum%0A%20%20-%20%5Bbeaconcha.in%5D(https%3A%2F%2Fbeaconcha.in%2F)%0A%20%20%20%20-%20%5Bvalidators%5D(https%3A%2F%2Fbeaconcha.in%2Fvalidators)%0A%20%20%20%20-%20%5Bepochs%5D(https%3A%2F%2Fbeaconcha.in%2Fepochs)%0A%20%20%20%20-%20%5Bslots%5D(https%3A%2F%2Fbeaconcha.in%2Fslots)%0A%20%20%20%20-%20%5Bblocks%5D(https%3A%2F%2Fbeaconcha.in%2Fblocks)%0A%20%20%20%20-%20%5Btransactions%5D(https%3A%2F%2Fbeaconcha.in%2Ftransactions)%0A%20%20-%20Near%20Bridge%0A%20%20%20%20-%20%5BNearBridge%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x3fefc5a4b1c02f21cbc8d3613643ba0635b9a873)%0A%20%20%20%20-%20%5BERC20Locker%5D(https%3A%2F%2Fetherscan.io%2Ftx%2F0xa685c59a24cc2056e10e660ce8a8bff7bbc335433698e138c77aaadf20ecb614)%0A",lastUpdatedAt:void 0},{lazy:()=>J(()=>import("./flash-hook-qkKAtHIR.js"),[]),path:"/product/solving/flash-hook",type:"mdx",filePath:"product/solving/flash-hook.mdx",content:"",lastUpdatedAt:void 0},{lazy:()=>J(()=>import("./flash-hook-qkKAtHIR.js"),[]),path:"/product/solving/flash-hook.html",type:"mdx",filePath:"product/solving/flash-hook.mdx",content:"",lastUpdatedAt:void 0},{lazy:()=>J(()=>import("./liquidity-management-qkKAtHIR.js"),[]),path:"/product/solving/liquidity-management",type:"mdx",filePath:"product/solving/liquidity-management.mdx",content:"",lastUpdatedAt:void 0},{lazy:()=>J(()=>import("./liquidity-management-qkKAtHIR.js"),[]),path:"/product/solving/liquidity-management.html",type:"mdx",filePath:"product/solving/liquidity-management.mdx",content:"",lastUpdatedAt:void 0},{lazy:()=>J(()=>import("./overview-qkKAtHIR.js"),[]),path:"/product/solving/overview",type:"mdx",filePath:"product/solving/overview.mdx",content:"",lastUpdatedAt:void 0},{lazy:()=>J(()=>import("./overview-qkKAtHIR.js"),[]),path:"/product/solving/overview.html",type:"mdx",filePath:"product/solving/overview.mdx",content:"",lastUpdatedAt:void 0},{lazy:()=>J(()=>import("./architecture-BIKgbEpW.js"),__vite__mapDeps([0,1])),path:"/research/Intents/architecture",type:"mdx",filePath:"research/Intents/architecture.mdx",content:"import%20%7B%20ZoomImage%20%7D%20from%20%22..%2F..%2F..%2Fpublic%2Fcomponents%2FZoomImage%22%3B%0A%0A%23%20Overview%0A%0AThis%20is%20an%20opinionated%20architecture%20for%20an%20intent%20based%20solving%20protocol%20which%20facilitates%20single%20and%20mult-chain%20solving%20of%20intents.%20Intents%20can%20be%20solved%20on%20a%20single%20chain%20without%20provisioning%20up%20front%20capital%20as%20we%20arbiters%20can%20confirm%20mandates%20have%20been%20met%20by%20solvers%20at%20execution%20time%2C%20thus%20solvers%20may%20used%20the%20swappers%20locked%20funds%20for%20execution.%0A%0A%23%23%20Goals%0A%0AKey%20Goals%20for%20this%20design%20include%0A%0A-%20Intent%20Based%20Architecture%20to%20improve%20execution%0A-%20Ability%20for%20Solvers%20to%20execute%20fills%20without%20needing%20to%20provide%20upfront%20capital%0A%0AFuture%20work%20includes%0A%0A-%20Capital%20Efficient%20Liquidity%20Provisioning%20including%20rehypothecation%0A-%20Improved%20Price%20Discover%20via%20the%20use%20of%20Oracles%20and%20external%20services%0A-%20Incorporating%20BackRunning%20of%20Transactions%20into%20Protocols%20such%20as%20Uniswap%20V4%20via%20hooks%0A%0A%23%23%20Architecture%20Digrams%0A%0A%3CZoomImage%0A%20%20src%3D%22%2Fimages%2FIntentSwapProtocolMonoChain.png%22%0A%20%20alt%3D%22IntentSwap%20Components%22%0A%20%20title%3D%22IntentSwap%20Components%22%0A%2F%3E%0A%0A%23%23%20Opinionated%20Sample%20Architecture%20from%20%5Bjincubator%5D(https%3A%2F%2Fgithub.com%2Fjincubator)%0A%0AThis%20work%20focuses%20on%20designing%20and%20building%20solutions%20around%20Solving%2C%20Arbitrage%20and%20Indexing.%20This%20work%20is%20being%20done%20in%20a%20combination%20of%20public%20and%20private%20repositories%20on%20%5Bjincubator%5D(https%3A%2F%2Fgithub.com%2Fjincubator).%20The%20project%20is%20drawing%20inspiration%20from%20and%20leveraging%20the%20following%20codebases%20for%20key%20components%0A%0A-%20Solving%20built%20in%20RUST%20leveraging%20%5BTycho%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Foverview)%20from%20%5BPropellor%20Heads%5D(https%3A%2F%2Fwww.propellerheads.xyz%2F)%20including%0A%20%20-%20%5Btycho-sdk%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-protocol-sdk)%3A%20For%20integrate%20DEXs%20and%20other%20onchain%20liquidity%20protocols%0A%20%20-%20%5Btycho-indexer%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-indexer)%3A%20a%20low-latency%2C%20reorg-aware%20stream%20of%20all%20attributes%20you%20need%20to%20simulate%20swaps%20over%20DEX%20and%20other%20on-chain%20liquidity%20built%20on%20%5Bsubstreams%5D(https%3A%2F%2Fgithub.com%2Fstreamingfast%2Fsubstreams)%0A%20%20-%20%5Btycho-simulation%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-simulation)%3A%20a%20Rust%20crate%20which%20allows%20simulating%20a%20set%20of%20supported%20protocols%20off-chain%0A%20%20-%20%5Btycho-execution%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-execution)%3A%20a%20simple%2C%20ready-to-use%20tool%20that%20generates%20the%20necessary%20data%20to%20execute%20trades%20on%20multiple%20chains%20and%20DEX's%0A-%20Intent%20Management%20platform%20allowing%20optimized%20trading%20routes%20optimized%20by%20solvers%20who%20do%20not%20need%20to%20provide%20liquidity%20up%20front%0A%20%20-%20%5Bthe-compact%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Fthe-compact)%3A%20an%20ownerless%20ERC6909%20contract%20that%20facilitates%20the%20voluntary%20formation%20(and%2C%20if%20necessary%2C%20eventual%20dissolution)%20of%20reusable%20resource%20locks.%0A%20%20-%20%5Barbiters%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Farbiters)%3A%20selects%20a%20claim%20method%20based%20on%20the%20type%20of%20Compact%20message%20signed%20by%20the%20sponsor%20and%20allocator%20and%20on%20the%20desired%20settlement%20behavior.%20To%20finalize%20a%20claim%2C%20some%20actor%20must%20call%20into%20the%20arbiter%2C%20which%20will%20act%20on%20the%20input%20and%20translate%20it%20into%20their%20preferred%20claim%20method.%20The%20arbiter%20then%20must%20call%20the%20derived%20claim%20method%20on%20The%20Compact%20to%20finalize%20the%20claim%20process.%0A%20%20-%20%5BTribunal%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Ftribunal)%3A%20a%20framework%20for%20processing%20cross-chain%20swap%20settlements%20against%20PGA%20(priority%20gas%20auction)%20blockchains.%20It%20ensures%20that%20tokens%20are%20transferred%20according%20to%20the%20mandate%20specified%20by%20the%20originating%20sponsor%20and%20enforces%20that%20a%20single%20party%20is%20able%20to%20perform%20the%20settlement%20in%20the%20event%20of%20a%20dispute.%20_Note%3A%20currently%20working%20on%20enhancing%20the%20%5BEIP712%20Signing%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712)%20of%20the%20%5Bmandates%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Ftribunal%3Ftab%3Dreadme-ov-file%23mandate-structure)%20so%20that%20the%20protocol%20can%20be%20used%20for%20solving%20on%20a%20single%20chain%20and%20multichain%20settlement._%0A%20%20-%20Services%20that%20enable%20Solving%20and%20Arbitrage%20are%20drawn%20primarily%20from%20uniswap%20prototypes%20for%20%5BcompactX%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fcompactx).%20_Note%3A%20it%20would%20be%20good%20to%20develop%20the%20majority%20of%20these%20in%20Rust%20and%20leverage%20Tycho's%20indexing%20and%20execution%20services_%0A%20%20%20%20-%20%5Bcallibrator%5D(https%3A%2F%2Fgithub.com%2FUniswap%2FCalibrator)%3A%20An%20intent%20parameterization%20service%2C%20demo%20is%20%5Bhere%5D(https%3A%2F%2Fcalibrat0r.com%2F).%20_Note%3A%20This%20will%20need%20to%20incorprate%2Fintegrate%20%5Bmandates%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Ftribunal%3Ftab%3Dreadme-ov-file%23mandate-structure)%20as%20we%20build%20a%20solution%20for%20solving._%0A%20%20%20%20-%20%5Bv4-router%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fv4-router)%3A%20a%20simple%20and%20optimized%20router%20for%20swapping%20on%20Uniswap%20V4.%20_Note%3A%20Currently%20working%20on%20integrating%20intents%20into%20this%20management%20into%20this%20codebase%20and%20integrating%20this%20with%20an%20optimized%20smart%20order%20router._%0A%20%20%20%20-%20%5Bautocator%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fautocator)%3A%20A%20server-based%20allocator%20for%20The%20Compact%20that%20leverages%20protocol%20signatures%20and%20transactions%20for%20authentication%2C%20API%20reference%20is%20%5Bhere%5D(https%3A%2F%2Fautocator.org%2F).%0A%20%20%20%20-%20%5Bsmallocator%5D(https%3A%2F%2Fgithub.com%2FUniswap%2FSmallocator)%3A%20Similar%20to%20autocator%20with%20smart%20contract%20support%20via%20EIP-4361%20session%20authentication%20and%20signing%20EIP-712%20Compact%20messages.%0A%20%20%20%20-%20%5BFillanthropist%5D(https%3A%2F%2Fgithub.com%2FUniswap%2FFillanthropist)%3A%20receiving%20and%20filling%20broadcasted%20cross-chain%20swap%20intents%2C%20demo%20is%20%5Bhere%5D(https%3A%2F%2Ffillanthropist.org%2F).%20_Note%3A%20This%20infrastructure%20can%20be%20replaced%20by%20solver%20technology%20built%20on%20tycho%20as%20well%20as%20an%20update%20dissemination%20approach%20(see%20repo%20below)%20which%20can%20leverage%20tycho%20indexing._%0A%20%20%20%20-%20%5Bdisseminator%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Fdisseminator)%3A%20A%20TypeScript%20WebSocket%20server%20implementation%20that%20broadcasts%20messages%20to%20both%20HTTP%20endpoints%20and%20WebSocket%20clients.%20The%20server%20validates%20incoming%20messages%20using%20Zod%20schemas%20and%20ensures%20proper%20message%20delivery%20to%20all%20connected%20clients.%20_Note%3A%20Design%20work%20still%20needs%20to%20be%20done%20as%20to%20the%20most%20efficient%20way%20to%20store%20and%20transmit%20detailed%20intent%20and%20mandate%20information_%0A%20%20-%20Frontend%20would%20include%20swapping%20and%20also%20liquidity%20provisioning%20and%20optimized%20Yield%20strategies%20for%20Liquidity%20Providers%20two%20inspirational%20repositories%20are%0A%20%20%20%20-%20%5BcompactX%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fcompactx)%3A%20a%20proof-of-concept%2C%20React-based%20web%20interface%20for%20performing%20cross-chain%20swaps.%0A%20%20%20%20-%20%5BYOLO%20Protocol%5D(https%3A%2F%2Fyolo-demo-ui-hackathon-chainlink-ch.vercel.app%2F)%3A%20A%20Demo%20app%20developed%20for%20a%20hackathon%20by%20%5BYOLO%20Protocol%5D(https%3A%2F%2Flinktr.ee%2Fyolo.protocol)%20which%20includes%20a%20dashboard%20for%20Liquidity%20Providers%20to%20manage%20their%20positions.%0A%0A%23%23%20Proposed%20Rollout%20Strategy%0A%0AThe%20following%20diagram%20gives%20an%20overview%20of%20the%20components%20to%20be%20developed.%0A%0ATechnology%3A%20Proposed%20developing%20%24E%20%3D%20mc%5E2%24%0A%0A-%20Back%20end%20services%20predominately%20in%20%5BRUST%5D(https%3A%2F%2Fwww.rust-lang.org%2F)%20using%20%5BAlloy%5D(https%3A%2F%2Falloy.rs%2F).%0A-%20Off%20Chain%20Persistence%20and%20Indexing%3A%20using%20%5BSubstreams%5D(https%3A%2F%2Fdocs.substreams.dev%2F)%20and%20%5BTycho%5D(https%3A%2F%2Fwww.propellerheads.xyz%2Ftycho)%0A-%20Frontend%20Components%20leveraging%20%5BPorto%5D(https%3A%2F%2Fporto.sh%2F)%0A%0AOutstanding%20Design%20Considerations%3A%0A%0A-%20Intent%20Management%3A%20Should%20detail%20intent%20information%20be%20stored%20completely%20off%20chain%2C%20or%20can%20it%20be%20passed%20in%20callData%20and%20leveraged%20in%20events%2C%20with%20only%20the%20Hash%20on%20chain%3F%0A-%20Source%20of%20Funds%3A%20The%20proposed%20architecture's%20goal%20is%20to%20allow%20Solvers%20to%20use%20Swappers%20funds%20through%20mandate%20validation%20using%20EIP-721.%0A-%20Price%20Discovery%3A%20What%20is%20the%20most%20accurate%20price%20to%20be%20used%20for%20quoting%2C%20is%20it%20the%20best%20price%20we%20can%20get%20on-chain%20using%20Tycho%20Simulation%20or%20should%20we%20use%20feeds%20such%20as%20Coingecko%20and%20Uniswap%20API%20as%20used%20in%20%5Bcalibrator%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Fcalibrator).%0A",lastUpdatedAt:1753887188e3},{lazy:()=>J(()=>import("./architecture-BIKgbEpW.js"),__vite__mapDeps([0,1])),path:"/research/Intents/architecture.html",type:"mdx",filePath:"research/Intents/architecture.mdx",content:"import%20%7B%20ZoomImage%20%7D%20from%20%22..%2F..%2F..%2Fpublic%2Fcomponents%2FZoomImage%22%3B%0A%0A%23%20Overview%0A%0AThis%20is%20an%20opinionated%20architecture%20for%20an%20intent%20based%20solving%20protocol%20which%20facilitates%20single%20and%20mult-chain%20solving%20of%20intents.%20Intents%20can%20be%20solved%20on%20a%20single%20chain%20without%20provisioning%20up%20front%20capital%20as%20we%20arbiters%20can%20confirm%20mandates%20have%20been%20met%20by%20solvers%20at%20execution%20time%2C%20thus%20solvers%20may%20used%20the%20swappers%20locked%20funds%20for%20execution.%0A%0A%23%23%20Goals%0A%0AKey%20Goals%20for%20this%20design%20include%0A%0A-%20Intent%20Based%20Architecture%20to%20improve%20execution%0A-%20Ability%20for%20Solvers%20to%20execute%20fills%20without%20needing%20to%20provide%20upfront%20capital%0A%0AFuture%20work%20includes%0A%0A-%20Capital%20Efficient%20Liquidity%20Provisioning%20including%20rehypothecation%0A-%20Improved%20Price%20Discover%20via%20the%20use%20of%20Oracles%20and%20external%20services%0A-%20Incorporating%20BackRunning%20of%20Transactions%20into%20Protocols%20such%20as%20Uniswap%20V4%20via%20hooks%0A%0A%23%23%20Architecture%20Digrams%0A%0A%3CZoomImage%0A%20%20src%3D%22%2Fimages%2FIntentSwapProtocolMonoChain.png%22%0A%20%20alt%3D%22IntentSwap%20Components%22%0A%20%20title%3D%22IntentSwap%20Components%22%0A%2F%3E%0A%0A%23%23%20Opinionated%20Sample%20Architecture%20from%20%5Bjincubator%5D(https%3A%2F%2Fgithub.com%2Fjincubator)%0A%0AThis%20work%20focuses%20on%20designing%20and%20building%20solutions%20around%20Solving%2C%20Arbitrage%20and%20Indexing.%20This%20work%20is%20being%20done%20in%20a%20combination%20of%20public%20and%20private%20repositories%20on%20%5Bjincubator%5D(https%3A%2F%2Fgithub.com%2Fjincubator).%20The%20project%20is%20drawing%20inspiration%20from%20and%20leveraging%20the%20following%20codebases%20for%20key%20components%0A%0A-%20Solving%20built%20in%20RUST%20leveraging%20%5BTycho%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Foverview)%20from%20%5BPropellor%20Heads%5D(https%3A%2F%2Fwww.propellerheads.xyz%2F)%20including%0A%20%20-%20%5Btycho-sdk%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-protocol-sdk)%3A%20For%20integrate%20DEXs%20and%20other%20onchain%20liquidity%20protocols%0A%20%20-%20%5Btycho-indexer%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-indexer)%3A%20a%20low-latency%2C%20reorg-aware%20stream%20of%20all%20attributes%20you%20need%20to%20simulate%20swaps%20over%20DEX%20and%20other%20on-chain%20liquidity%20built%20on%20%5Bsubstreams%5D(https%3A%2F%2Fgithub.com%2Fstreamingfast%2Fsubstreams)%0A%20%20-%20%5Btycho-simulation%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-simulation)%3A%20a%20Rust%20crate%20which%20allows%20simulating%20a%20set%20of%20supported%20protocols%20off-chain%0A%20%20-%20%5Btycho-execution%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-execution)%3A%20a%20simple%2C%20ready-to-use%20tool%20that%20generates%20the%20necessary%20data%20to%20execute%20trades%20on%20multiple%20chains%20and%20DEX's%0A-%20Intent%20Management%20platform%20allowing%20optimized%20trading%20routes%20optimized%20by%20solvers%20who%20do%20not%20need%20to%20provide%20liquidity%20up%20front%0A%20%20-%20%5Bthe-compact%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Fthe-compact)%3A%20an%20ownerless%20ERC6909%20contract%20that%20facilitates%20the%20voluntary%20formation%20(and%2C%20if%20necessary%2C%20eventual%20dissolution)%20of%20reusable%20resource%20locks.%0A%20%20-%20%5Barbiters%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Farbiters)%3A%20selects%20a%20claim%20method%20based%20on%20the%20type%20of%20Compact%20message%20signed%20by%20the%20sponsor%20and%20allocator%20and%20on%20the%20desired%20settlement%20behavior.%20To%20finalize%20a%20claim%2C%20some%20actor%20must%20call%20into%20the%20arbiter%2C%20which%20will%20act%20on%20the%20input%20and%20translate%20it%20into%20their%20preferred%20claim%20method.%20The%20arbiter%20then%20must%20call%20the%20derived%20claim%20method%20on%20The%20Compact%20to%20finalize%20the%20claim%20process.%0A%20%20-%20%5BTribunal%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Ftribunal)%3A%20a%20framework%20for%20processing%20cross-chain%20swap%20settlements%20against%20PGA%20(priority%20gas%20auction)%20blockchains.%20It%20ensures%20that%20tokens%20are%20transferred%20according%20to%20the%20mandate%20specified%20by%20the%20originating%20sponsor%20and%20enforces%20that%20a%20single%20party%20is%20able%20to%20perform%20the%20settlement%20in%20the%20event%20of%20a%20dispute.%20_Note%3A%20currently%20working%20on%20enhancing%20the%20%5BEIP712%20Signing%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712)%20of%20the%20%5Bmandates%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Ftribunal%3Ftab%3Dreadme-ov-file%23mandate-structure)%20so%20that%20the%20protocol%20can%20be%20used%20for%20solving%20on%20a%20single%20chain%20and%20multichain%20settlement._%0A%20%20-%20Services%20that%20enable%20Solving%20and%20Arbitrage%20are%20drawn%20primarily%20from%20uniswap%20prototypes%20for%20%5BcompactX%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fcompactx).%20_Note%3A%20it%20would%20be%20good%20to%20develop%20the%20majority%20of%20these%20in%20Rust%20and%20leverage%20Tycho's%20indexing%20and%20execution%20services_%0A%20%20%20%20-%20%5Bcallibrator%5D(https%3A%2F%2Fgithub.com%2FUniswap%2FCalibrator)%3A%20An%20intent%20parameterization%20service%2C%20demo%20is%20%5Bhere%5D(https%3A%2F%2Fcalibrat0r.com%2F).%20_Note%3A%20This%20will%20need%20to%20incorprate%2Fintegrate%20%5Bmandates%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Ftribunal%3Ftab%3Dreadme-ov-file%23mandate-structure)%20as%20we%20build%20a%20solution%20for%20solving._%0A%20%20%20%20-%20%5Bv4-router%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fv4-router)%3A%20a%20simple%20and%20optimized%20router%20for%20swapping%20on%20Uniswap%20V4.%20_Note%3A%20Currently%20working%20on%20integrating%20intents%20into%20this%20management%20into%20this%20codebase%20and%20integrating%20this%20with%20an%20optimized%20smart%20order%20router._%0A%20%20%20%20-%20%5Bautocator%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fautocator)%3A%20A%20server-based%20allocator%20for%20The%20Compact%20that%20leverages%20protocol%20signatures%20and%20transactions%20for%20authentication%2C%20API%20reference%20is%20%5Bhere%5D(https%3A%2F%2Fautocator.org%2F).%0A%20%20%20%20-%20%5Bsmallocator%5D(https%3A%2F%2Fgithub.com%2FUniswap%2FSmallocator)%3A%20Similar%20to%20autocator%20with%20smart%20contract%20support%20via%20EIP-4361%20session%20authentication%20and%20signing%20EIP-712%20Compact%20messages.%0A%20%20%20%20-%20%5BFillanthropist%5D(https%3A%2F%2Fgithub.com%2FUniswap%2FFillanthropist)%3A%20receiving%20and%20filling%20broadcasted%20cross-chain%20swap%20intents%2C%20demo%20is%20%5Bhere%5D(https%3A%2F%2Ffillanthropist.org%2F).%20_Note%3A%20This%20infrastructure%20can%20be%20replaced%20by%20solver%20technology%20built%20on%20tycho%20as%20well%20as%20an%20update%20dissemination%20approach%20(see%20repo%20below)%20which%20can%20leverage%20tycho%20indexing._%0A%20%20%20%20-%20%5Bdisseminator%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Fdisseminator)%3A%20A%20TypeScript%20WebSocket%20server%20implementation%20that%20broadcasts%20messages%20to%20both%20HTTP%20endpoints%20and%20WebSocket%20clients.%20The%20server%20validates%20incoming%20messages%20using%20Zod%20schemas%20and%20ensures%20proper%20message%20delivery%20to%20all%20connected%20clients.%20_Note%3A%20Design%20work%20still%20needs%20to%20be%20done%20as%20to%20the%20most%20efficient%20way%20to%20store%20and%20transmit%20detailed%20intent%20and%20mandate%20information_%0A%20%20-%20Frontend%20would%20include%20swapping%20and%20also%20liquidity%20provisioning%20and%20optimized%20Yield%20strategies%20for%20Liquidity%20Providers%20two%20inspirational%20repositories%20are%0A%20%20%20%20-%20%5BcompactX%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fcompactx)%3A%20a%20proof-of-concept%2C%20React-based%20web%20interface%20for%20performing%20cross-chain%20swaps.%0A%20%20%20%20-%20%5BYOLO%20Protocol%5D(https%3A%2F%2Fyolo-demo-ui-hackathon-chainlink-ch.vercel.app%2F)%3A%20A%20Demo%20app%20developed%20for%20a%20hackathon%20by%20%5BYOLO%20Protocol%5D(https%3A%2F%2Flinktr.ee%2Fyolo.protocol)%20which%20includes%20a%20dashboard%20for%20Liquidity%20Providers%20to%20manage%20their%20positions.%0A%0A%23%23%20Proposed%20Rollout%20Strategy%0A%0AThe%20following%20diagram%20gives%20an%20overview%20of%20the%20components%20to%20be%20developed.%0A%0ATechnology%3A%20Proposed%20developing%20%24E%20%3D%20mc%5E2%24%0A%0A-%20Back%20end%20services%20predominately%20in%20%5BRUST%5D(https%3A%2F%2Fwww.rust-lang.org%2F)%20using%20%5BAlloy%5D(https%3A%2F%2Falloy.rs%2F).%0A-%20Off%20Chain%20Persistence%20and%20Indexing%3A%20using%20%5BSubstreams%5D(https%3A%2F%2Fdocs.substreams.dev%2F)%20and%20%5BTycho%5D(https%3A%2F%2Fwww.propellerheads.xyz%2Ftycho)%0A-%20Frontend%20Components%20leveraging%20%5BPorto%5D(https%3A%2F%2Fporto.sh%2F)%0A%0AOutstanding%20Design%20Considerations%3A%0A%0A-%20Intent%20Management%3A%20Should%20detail%20intent%20information%20be%20stored%20completely%20off%20chain%2C%20or%20can%20it%20be%20passed%20in%20callData%20and%20leveraged%20in%20events%2C%20with%20only%20the%20Hash%20on%20chain%3F%0A-%20Source%20of%20Funds%3A%20The%20proposed%20architecture's%20goal%20is%20to%20allow%20Solvers%20to%20use%20Swappers%20funds%20through%20mandate%20validation%20using%20EIP-721.%0A-%20Price%20Discovery%3A%20What%20is%20the%20most%20accurate%20price%20to%20be%20used%20for%20quoting%2C%20is%20it%20the%20best%20price%20we%20can%20get%20on-chain%20using%20Tycho%20Simulation%20or%20should%20we%20use%20feeds%20such%20as%20Coingecko%20and%20Uniswap%20API%20as%20used%20in%20%5Bcalibrator%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Fcalibrator).%0A",lastUpdatedAt:1753887188e3},{lazy:()=>J(()=>import("./flow-BNm1zl_w.js"),[]),path:"/research/Intents/flow",type:"mdx",filePath:"research/Intents/flow.mdx",content:"import%20%7B%20ZoomImage%20%7D%20from%20%22..%2F..%2F..%2Fpublic%2Fcomponents%2FZoomImage%22%3B%0A%0A%23%20IntentSwap%0A%0A%23%23%23%20IntentSwap%20Flow%0A%0A1.%20Swapper(via%20CompactX)%20calls%20Quoter%20(Callibrator%2C%20SmartOrderRouter)%0A2.%20Quoter%20returns%20Output%20Tokens%20for%20Swap%0A3.%20Swapper%20Agrees%20on%20Swap%20and%0A%20%20%20a.%20Calls%20Disseminator%20which%20stores%20all%20Compact%20Information%20and%20Creates%20IntentSwapHash%0A%20%20%20b.%20calls%20Intent%20Manager%20to%20create%20SwapIntent%20(more%20callData%20and%20would%20use%20EventData%20to%20publish%20to%20Solvers)%0A4.%20Intent%20Manager(Sponsor)%20formats%20Compact%2C%20Mandate%20data%20and%20Signature%0A5.%20IntentManager(Sponsor)%20calls%20Allocator%20to%20create%20a%20compact%0A6.%20Allocator%20creates%20a%20compact%20locking%20the%20funds%0A7.%20Allocator%20creates%20a%20claim%20emitting%20an%20event%20that%20can%20be%20processed%20by%20Solvers%0A8.%20Solver%20determines%20the%20optimal%20route%20(using%20Tycho%20Simulation)%0A9.%20Solver%20creates%20a%20SolverPayload%20containing%20the%20callData%20for%20the%20Transactions%20to%20be%20executed%0A10.%20Solver%20calls%20the%20Arbiter%20to%20Execute%20the%20Payload%20and%20Unlock%20the%20Funds%0A11.%20Arbiter%20receives%20the%20IntentSwapSolve%0A12.%20Aribiter%20request%20approval%20to%20use%20the%20IntentSwaps%20InputTokens%20for%20the-compact%20via%20the%20Allocator%0A13.%20Arbiter%20executes%20the%20Solve%20on%20behalf%20of%20the%20Solver%0A%20%20%20%20a.%20using%20the%20SolverPayload%0A%20%20%20%20b.%20Executing%20via%20the%20dispatcher%0A%20%20%20%20c.%20Using%20the%20allocated%20input%20tokens%0A14.%20Arbiter%20then%20checks%20if%20the%20Amount%20of%20Output%20Tokens%20satisfies%20the%20mandate%0A15.%20If%20the%20Output%20Tokens%20are%20less%20than%20the%20mandate%20then%20reverts%20STOP%0A16.%20Arbiter%20sends%20a%20signed%20message%20to%20the%20Allocator%20to%20close%20the%20compact%0A%20%20%20%20a.%20Any%20unused%20input%20tokens%20are%20returned%20to%20the%20Sponsor.%0A%20%20%20%20b.%20Output%20Tokens%20are%20returned%20to%20the%20Solver%0A%0A%23%23%20Usage%20(Flows%20by%20Actor)%0A%0AThe%20Compact%20V1%20facilitates%20interactions%20between%20several%20key%20actors.%20Here's%20how%20typical%20participants%20might%20use%20the%20system.%0A%0A%23%23%23%20Sponsors%20(Depositors)%0A%0ASponsors%20own%20the%20underlying%20assets%20and%20create%20resource%20locks%20to%20make%20them%20available%20under%20specific%20conditions.%0A%0A**1.%20Create%20a%20Resource%20Lock%20(Deposit%20Tokens)%3A**%20-%20A%20sponsor%20starts%20by%20depositing%20assets%20(native%20tokens%20or%20ERC20s)%20into%20The%20Compact.%20This%20action%20creates%20ERC6909%20tokens%20representing%20ownership%20of%20the%20resource%20lock.%20-%20During%20deposit%2C%20the%20sponsor%20defines%20the%20lock's%20properties%3A%20the%20**allocator**%20(who%20must%20be%20registered%20first%2C%20see%20%5BAllocators%20(Infrastructure)%5D(%23allocators-infrastructure)%2C%20the%20**scope**%20(single-chain%20or%20multichain)%2C%20and%20the%20**reset%20period**%20(for%20forced%20withdrawals%20and%20emissary%20replacements).%20These%20are%20packed%20into%20a%20%60bytes12%20lockTag%60.%20A%20resource%20lock's%20ID%20is%20a%20combination%20of%20its%20lock%20tag%20and%20the%20underlying%20token's%20address.%20-%20Deposit%20methods%3A%20-%20Native%20tokens%3A%20%60depositNative%60%20-%20ERC20%20tokens%20(requires%20direct%20approval)%3A%20%60depositERC20%60-%20Batch%20deposits%20(native%20%2B%20ERC20)%3A%20%60batchDeposit%60%20-%20Via%20Permit2%20(optionally%20gasless)%3A%20%60depositERC20ViaPermit2%60%2C%20%60batchDepositViaPermit2%60%0A%0A**2.%20Create%20a%20Compact%3A**%20-%20To%20make%20locked%20funds%20available%20for%20claiming%2C%20a%20sponsor%20creates%20a%20compact%2C%20defining%20terms%20and%20designating%20an%20**arbiter**.%0A%0A-%20**Option%20A%3A%20Signing%20an%20EIP-712%20Payload%3A**%20The%20sponsor%20signs%20a%20%60Compact%60%2C%20%60BatchCompact%60%2C%20or%20%60MultichainCompact%60%20payload.%20This%20signed%20payload%20is%20given%20to%20the%20arbiter.%0A-%20**Option%20B%3A%20Registering%20the%20Compact%3A**%20The%20sponsor%20(or%20a%20third%20party%20with%20an%20existing%20sponsor%20signature)%20registers%20the%20_hash_%20of%20the%20intended%20compact%20details%20using%20%60register%60%20or%20combined%20deposit-and-register%20functions.%20It%20is%20also%20possible%20to%20deposit%20tokens%20on%20behalf%20of%20a%20sponsor%20and%20register%20a%20compact%20using%20only%20the%20deposited%20tokens%20without%20the%20sponsor's%20signature%20using%20the%20%60depositAndRegisterFor%60%20(or%20the%20batch%20and%20permit2%20variants).%0A%0A**3.%20(Optional)%20Transfer%20Resource%20Lock%20Ownership%3A**%20-%20Sponsors%20can%20transfer%20their%20ERC6909%20tokens%2C%20provided%20they%20have%20authorization%20from%20the%20allocator.%20-%20Standard%20ERC6909%20transfers%20require%20allocator%20%60attest%60.%20-%20Alternatively%2C%20use%20%60allocatedTransfer%60%20or%20%60allocatedBatchTransfer%60%20with%20explicit%20%60allocatorData%60.%0A%0A**4.%20(Optional)%20Assign%20an%20Emissary%3A**%20-%20Designate%20an%20%60IEmissary%60%20using%20%60assignEmissary%60%20as%20a%20fallback%20authorizer.%0A%0A**5.%20(Optional)%20Initiate%20Forced%20Withdrawal%3A**%20-%20If%20an%20allocator%20is%20unresponsive%2C%20use%20%60enableForcedWithdrawal%60%2C%20wait%20%60resetPeriod%60%2C%20then%20%60forcedWithdrawal%60.%0A%0A%23%23%23%20Arbiters%20%26%20Claimants%20(e.g.%20Fillers)%0A%0AArbiters%20verify%20conditions%20and%20process%20claims.%20Claimants%20are%20the%20recipients.%0A%0A**1.%20Receive%20Compact%20Details%3A**%20-%20Obtain%20compact%20details%20(signed%20payload%20or%20registered%20compact%20info).%0A%0A**2.%20Fulfill%20Compact%20Conditions%3A**%20-%20Perform%20the%20action%20defined%20by%20the%20compact%20(often%20off-chain).%0A%0A**3.%20Obtain%20Allocator%20Authorization%3A**%20-%20This%20relies%20on%20the%20allocator's%20on-chain%20%60authorizeClaim%60%20logic.%20Note%20that%20the%20arbiter%20may%20submit%20%60allocatorData%60%20(i.e.%2C%20an%20allocator's%20signature%20or%20other%20proof%20the%20allocator%20understands)%20which%20the%20allocator%20can%20evaluate%20as%20part%20of%20its%20authorization%20flow.%0A%0A**4.%20Submit%20the%20Claim%3A**%20-%20Call%20the%20appropriate%20claim%20function%20on%20%60ITheCompactClaims%60%20with%20the%20claim%20payload%20(e.g.%2C%20%60Claim%60%2C%20%60BatchClaim%60).%20-%20The%20payload%20includes%20%60allocatorData%60%2C%20%60sponsorSignature%60%20(if%20not%20registered)%2C%20lock%20details%2C%20and%20%60claimants%60%20array.%20Successful%20execution%20emits%20a%20%60Claim%60%20event%20and%20consumes%20the%20nonce.%0A%0A%23%23%23%20Relayers%0A%0ARelayers%20can%20perform%20certain%20interactions%20on%20behalf%20of%20sponsors%20and%2For%20claimants.%0A%0A**1.%20Relaying%20Permit2%20Interactions%3A**%20-%20Submit%20user-signed%20Permit2%20messages%20for%20deposits%2Fregistrations%20(e.g.%2C%20%60depositERC20ViaPermit2%60%2C%20%60depositERC20AndRegisterViaPermit2%60%2C%20or%20the%20batch%20variants).%20For%20the%20register%20variants%2C%20this%20role%20is%20called%20the%20%60Activator%60%20and%20the%20registration%20is%20authorized%20by%20the%20sponsor%20as%20part%20of%20the%20Permit2%20witness%20data.%0A%0A**2.%20Relaying%20Registrations-for-Sponsor%3A**%20-%20Submit%20sponsor-signed%20registration%20details%20using%20%60registerFor%60%20functions.%0A%0A**3.%20Relaying%20Claims%3A**%20-%20Submit%20authorized%20claims%20on%20behalf%20of%20a%20claimant%20using%20the%20standard%20%60claim%60%20functions.%20This%20would%20generally%20be%20performed%20by%20the%20arbiter%20of%20the%20claim%20being%20relayed.%0A%0A%23%23%23%20Allocators%20(Infrastructure)%0A%0AAllocators%20are%20crucial%20infrastructure%20for%20ensuring%20resource%20lock%20integrity.%0A%0A**1.%20Registration%3A**%20-%20Register%20via%20%60__registerAllocator%60%20to%20get%20an%20%60allocatorId%60.%20This%20is%20a%20required%20step%20that%20must%20be%20performed%20before%20the%20allocator%20may%20be%20assigned%20to%20a%20resource%20lock.%20Anyone%20can%20register%20an%20allocator%20if%20one%20of%20three%20conditions%20is%20met%3A%20the%20caller%20is%20the%20allocator%20address%20being%20registered%3B%20the%20allocator%20address%20contains%20code%3B%20or%20a%20proof%20is%20supplied%20representing%20valid%20create2%20deployment%20parameters.%0A%0A**Create2%20Proof%20Format**%3A%20When%20registering%20an%20allocator%20that%20doesn't%20yet%20exist%20but%20will%20be%20deployed%20via%20create2%2C%20provide%20an%2085-byte%20proof%20containing%3A%20%600xff%20%2B%2B%20factory%20%2B%2B%20salt%20%2B%2B%20initcode%20hash%60.%20This%20allows%20pre-registration%20of%20deterministic%20addresses.%0A%0A**2.%20Implement%20%60IAllocator%60%20Interface%3A**%20-%20Deploy%20a%20contract%20implementing%20%60IAllocator%60.%20-%20%60attest%60%3A%20Called%20during%20ERC6909%20transfers.%20Must%20verify%20safety%20and%20return%20%60IAllocator.attest.selector%60.%20-%20%60authorizeClaim%60%20%2F%20%60isClaimAuthorized%60%3A%20Core%20logic%20to%20validate%20claims%20against%20sponsor%20balances%20and%20nonces.%20%60authorizeClaim%60%20returns%20%60IAllocator.authorizeClaim.selector%60%20for%20on-chain%20validation.%0A%0A**3.%20(Optional)%20Off-chain%20Logic%20%2F%20%60allocatorData%60%20Generation%3A**%20-%20Allocators%20may%20have%20off-chain%20systems%20that%20track%20balances%2C%20validate%20requests%2C%20generate%20%60allocatorData%60%20(e.g.%2C%20signatures)%2C%20and%2For%20manage%20nonces.%20-%20The%20Compact%20is%20unopinionated%20about%20the%20particulars%20of%20allocator%20implementations.%20-%20Two%20basic%20sample%20implementations%20have%20been%20provided%3A%20%5BSmallocator%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fsmallocator)%20and%20%5BAutocator%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fautocator).%0A%0A**4.%20(Optional)%20Consuming%20Nonces%3A**%20-%20Proactively%20invalidate%20compacts%20using%20%60consume%60%20on%20The%20Compact%20contract.%0A",lastUpdatedAt:1753887188e3},{lazy:()=>J(()=>import("./flow-BNm1zl_w.js"),[]),path:"/research/Intents/flow.html",type:"mdx",filePath:"research/Intents/flow.mdx",content:"import%20%7B%20ZoomImage%20%7D%20from%20%22..%2F..%2F..%2Fpublic%2Fcomponents%2FZoomImage%22%3B%0A%0A%23%20IntentSwap%0A%0A%23%23%23%20IntentSwap%20Flow%0A%0A1.%20Swapper(via%20CompactX)%20calls%20Quoter%20(Callibrator%2C%20SmartOrderRouter)%0A2.%20Quoter%20returns%20Output%20Tokens%20for%20Swap%0A3.%20Swapper%20Agrees%20on%20Swap%20and%0A%20%20%20a.%20Calls%20Disseminator%20which%20stores%20all%20Compact%20Information%20and%20Creates%20IntentSwapHash%0A%20%20%20b.%20calls%20Intent%20Manager%20to%20create%20SwapIntent%20(more%20callData%20and%20would%20use%20EventData%20to%20publish%20to%20Solvers)%0A4.%20Intent%20Manager(Sponsor)%20formats%20Compact%2C%20Mandate%20data%20and%20Signature%0A5.%20IntentManager(Sponsor)%20calls%20Allocator%20to%20create%20a%20compact%0A6.%20Allocator%20creates%20a%20compact%20locking%20the%20funds%0A7.%20Allocator%20creates%20a%20claim%20emitting%20an%20event%20that%20can%20be%20processed%20by%20Solvers%0A8.%20Solver%20determines%20the%20optimal%20route%20(using%20Tycho%20Simulation)%0A9.%20Solver%20creates%20a%20SolverPayload%20containing%20the%20callData%20for%20the%20Transactions%20to%20be%20executed%0A10.%20Solver%20calls%20the%20Arbiter%20to%20Execute%20the%20Payload%20and%20Unlock%20the%20Funds%0A11.%20Arbiter%20receives%20the%20IntentSwapSolve%0A12.%20Aribiter%20request%20approval%20to%20use%20the%20IntentSwaps%20InputTokens%20for%20the-compact%20via%20the%20Allocator%0A13.%20Arbiter%20executes%20the%20Solve%20on%20behalf%20of%20the%20Solver%0A%20%20%20%20a.%20using%20the%20SolverPayload%0A%20%20%20%20b.%20Executing%20via%20the%20dispatcher%0A%20%20%20%20c.%20Using%20the%20allocated%20input%20tokens%0A14.%20Arbiter%20then%20checks%20if%20the%20Amount%20of%20Output%20Tokens%20satisfies%20the%20mandate%0A15.%20If%20the%20Output%20Tokens%20are%20less%20than%20the%20mandate%20then%20reverts%20STOP%0A16.%20Arbiter%20sends%20a%20signed%20message%20to%20the%20Allocator%20to%20close%20the%20compact%0A%20%20%20%20a.%20Any%20unused%20input%20tokens%20are%20returned%20to%20the%20Sponsor.%0A%20%20%20%20b.%20Output%20Tokens%20are%20returned%20to%20the%20Solver%0A%0A%23%23%20Usage%20(Flows%20by%20Actor)%0A%0AThe%20Compact%20V1%20facilitates%20interactions%20between%20several%20key%20actors.%20Here's%20how%20typical%20participants%20might%20use%20the%20system.%0A%0A%23%23%23%20Sponsors%20(Depositors)%0A%0ASponsors%20own%20the%20underlying%20assets%20and%20create%20resource%20locks%20to%20make%20them%20available%20under%20specific%20conditions.%0A%0A**1.%20Create%20a%20Resource%20Lock%20(Deposit%20Tokens)%3A**%20-%20A%20sponsor%20starts%20by%20depositing%20assets%20(native%20tokens%20or%20ERC20s)%20into%20The%20Compact.%20This%20action%20creates%20ERC6909%20tokens%20representing%20ownership%20of%20the%20resource%20lock.%20-%20During%20deposit%2C%20the%20sponsor%20defines%20the%20lock's%20properties%3A%20the%20**allocator**%20(who%20must%20be%20registered%20first%2C%20see%20%5BAllocators%20(Infrastructure)%5D(%23allocators-infrastructure)%2C%20the%20**scope**%20(single-chain%20or%20multichain)%2C%20and%20the%20**reset%20period**%20(for%20forced%20withdrawals%20and%20emissary%20replacements).%20These%20are%20packed%20into%20a%20%60bytes12%20lockTag%60.%20A%20resource%20lock's%20ID%20is%20a%20combination%20of%20its%20lock%20tag%20and%20the%20underlying%20token's%20address.%20-%20Deposit%20methods%3A%20-%20Native%20tokens%3A%20%60depositNative%60%20-%20ERC20%20tokens%20(requires%20direct%20approval)%3A%20%60depositERC20%60-%20Batch%20deposits%20(native%20%2B%20ERC20)%3A%20%60batchDeposit%60%20-%20Via%20Permit2%20(optionally%20gasless)%3A%20%60depositERC20ViaPermit2%60%2C%20%60batchDepositViaPermit2%60%0A%0A**2.%20Create%20a%20Compact%3A**%20-%20To%20make%20locked%20funds%20available%20for%20claiming%2C%20a%20sponsor%20creates%20a%20compact%2C%20defining%20terms%20and%20designating%20an%20**arbiter**.%0A%0A-%20**Option%20A%3A%20Signing%20an%20EIP-712%20Payload%3A**%20The%20sponsor%20signs%20a%20%60Compact%60%2C%20%60BatchCompact%60%2C%20or%20%60MultichainCompact%60%20payload.%20This%20signed%20payload%20is%20given%20to%20the%20arbiter.%0A-%20**Option%20B%3A%20Registering%20the%20Compact%3A**%20The%20sponsor%20(or%20a%20third%20party%20with%20an%20existing%20sponsor%20signature)%20registers%20the%20_hash_%20of%20the%20intended%20compact%20details%20using%20%60register%60%20or%20combined%20deposit-and-register%20functions.%20It%20is%20also%20possible%20to%20deposit%20tokens%20on%20behalf%20of%20a%20sponsor%20and%20register%20a%20compact%20using%20only%20the%20deposited%20tokens%20without%20the%20sponsor's%20signature%20using%20the%20%60depositAndRegisterFor%60%20(or%20the%20batch%20and%20permit2%20variants).%0A%0A**3.%20(Optional)%20Transfer%20Resource%20Lock%20Ownership%3A**%20-%20Sponsors%20can%20transfer%20their%20ERC6909%20tokens%2C%20provided%20they%20have%20authorization%20from%20the%20allocator.%20-%20Standard%20ERC6909%20transfers%20require%20allocator%20%60attest%60.%20-%20Alternatively%2C%20use%20%60allocatedTransfer%60%20or%20%60allocatedBatchTransfer%60%20with%20explicit%20%60allocatorData%60.%0A%0A**4.%20(Optional)%20Assign%20an%20Emissary%3A**%20-%20Designate%20an%20%60IEmissary%60%20using%20%60assignEmissary%60%20as%20a%20fallback%20authorizer.%0A%0A**5.%20(Optional)%20Initiate%20Forced%20Withdrawal%3A**%20-%20If%20an%20allocator%20is%20unresponsive%2C%20use%20%60enableForcedWithdrawal%60%2C%20wait%20%60resetPeriod%60%2C%20then%20%60forcedWithdrawal%60.%0A%0A%23%23%23%20Arbiters%20%26%20Claimants%20(e.g.%20Fillers)%0A%0AArbiters%20verify%20conditions%20and%20process%20claims.%20Claimants%20are%20the%20recipients.%0A%0A**1.%20Receive%20Compact%20Details%3A**%20-%20Obtain%20compact%20details%20(signed%20payload%20or%20registered%20compact%20info).%0A%0A**2.%20Fulfill%20Compact%20Conditions%3A**%20-%20Perform%20the%20action%20defined%20by%20the%20compact%20(often%20off-chain).%0A%0A**3.%20Obtain%20Allocator%20Authorization%3A**%20-%20This%20relies%20on%20the%20allocator's%20on-chain%20%60authorizeClaim%60%20logic.%20Note%20that%20the%20arbiter%20may%20submit%20%60allocatorData%60%20(i.e.%2C%20an%20allocator's%20signature%20or%20other%20proof%20the%20allocator%20understands)%20which%20the%20allocator%20can%20evaluate%20as%20part%20of%20its%20authorization%20flow.%0A%0A**4.%20Submit%20the%20Claim%3A**%20-%20Call%20the%20appropriate%20claim%20function%20on%20%60ITheCompactClaims%60%20with%20the%20claim%20payload%20(e.g.%2C%20%60Claim%60%2C%20%60BatchClaim%60).%20-%20The%20payload%20includes%20%60allocatorData%60%2C%20%60sponsorSignature%60%20(if%20not%20registered)%2C%20lock%20details%2C%20and%20%60claimants%60%20array.%20Successful%20execution%20emits%20a%20%60Claim%60%20event%20and%20consumes%20the%20nonce.%0A%0A%23%23%23%20Relayers%0A%0ARelayers%20can%20perform%20certain%20interactions%20on%20behalf%20of%20sponsors%20and%2For%20claimants.%0A%0A**1.%20Relaying%20Permit2%20Interactions%3A**%20-%20Submit%20user-signed%20Permit2%20messages%20for%20deposits%2Fregistrations%20(e.g.%2C%20%60depositERC20ViaPermit2%60%2C%20%60depositERC20AndRegisterViaPermit2%60%2C%20or%20the%20batch%20variants).%20For%20the%20register%20variants%2C%20this%20role%20is%20called%20the%20%60Activator%60%20and%20the%20registration%20is%20authorized%20by%20the%20sponsor%20as%20part%20of%20the%20Permit2%20witness%20data.%0A%0A**2.%20Relaying%20Registrations-for-Sponsor%3A**%20-%20Submit%20sponsor-signed%20registration%20details%20using%20%60registerFor%60%20functions.%0A%0A**3.%20Relaying%20Claims%3A**%20-%20Submit%20authorized%20claims%20on%20behalf%20of%20a%20claimant%20using%20the%20standard%20%60claim%60%20functions.%20This%20would%20generally%20be%20performed%20by%20the%20arbiter%20of%20the%20claim%20being%20relayed.%0A%0A%23%23%23%20Allocators%20(Infrastructure)%0A%0AAllocators%20are%20crucial%20infrastructure%20for%20ensuring%20resource%20lock%20integrity.%0A%0A**1.%20Registration%3A**%20-%20Register%20via%20%60__registerAllocator%60%20to%20get%20an%20%60allocatorId%60.%20This%20is%20a%20required%20step%20that%20must%20be%20performed%20before%20the%20allocator%20may%20be%20assigned%20to%20a%20resource%20lock.%20Anyone%20can%20register%20an%20allocator%20if%20one%20of%20three%20conditions%20is%20met%3A%20the%20caller%20is%20the%20allocator%20address%20being%20registered%3B%20the%20allocator%20address%20contains%20code%3B%20or%20a%20proof%20is%20supplied%20representing%20valid%20create2%20deployment%20parameters.%0A%0A**Create2%20Proof%20Format**%3A%20When%20registering%20an%20allocator%20that%20doesn't%20yet%20exist%20but%20will%20be%20deployed%20via%20create2%2C%20provide%20an%2085-byte%20proof%20containing%3A%20%600xff%20%2B%2B%20factory%20%2B%2B%20salt%20%2B%2B%20initcode%20hash%60.%20This%20allows%20pre-registration%20of%20deterministic%20addresses.%0A%0A**2.%20Implement%20%60IAllocator%60%20Interface%3A**%20-%20Deploy%20a%20contract%20implementing%20%60IAllocator%60.%20-%20%60attest%60%3A%20Called%20during%20ERC6909%20transfers.%20Must%20verify%20safety%20and%20return%20%60IAllocator.attest.selector%60.%20-%20%60authorizeClaim%60%20%2F%20%60isClaimAuthorized%60%3A%20Core%20logic%20to%20validate%20claims%20against%20sponsor%20balances%20and%20nonces.%20%60authorizeClaim%60%20returns%20%60IAllocator.authorizeClaim.selector%60%20for%20on-chain%20validation.%0A%0A**3.%20(Optional)%20Off-chain%20Logic%20%2F%20%60allocatorData%60%20Generation%3A**%20-%20Allocators%20may%20have%20off-chain%20systems%20that%20track%20balances%2C%20validate%20requests%2C%20generate%20%60allocatorData%60%20(e.g.%2C%20signatures)%2C%20and%2For%20manage%20nonces.%20-%20The%20Compact%20is%20unopinionated%20about%20the%20particulars%20of%20allocator%20implementations.%20-%20Two%20basic%20sample%20implementations%20have%20been%20provided%3A%20%5BSmallocator%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fsmallocator)%20and%20%5BAutocator%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fautocator).%0A%0A**4.%20(Optional)%20Consuming%20Nonces%3A**%20-%20Proactively%20invalidate%20compacts%20using%20%60consume%60%20on%20The%20Compact%20contract.%0A",lastUpdatedAt:1753887188e3},{lazy:()=>J(()=>import("./hooks-myF2WMeL.js"),[]),path:"/research/Intents/hooks",type:"mdx",filePath:"research/Intents/hooks.mdx",content:"%23%20Uniswap%20V4%20Hook%20Development%20-%20WIP%0A%0A%23%23%20Overview%0A%0AThis%20section%20documents%20design%20work%20to%20be%20done%20for%20enhancing%20Uniswap%20V4%20through%20the%20use%20of%20hooks%20for%20better%20price%20discovery%2C%20swapping%20and%20solver%20execution.%0A%0AIt%20leverages%20%5BTycho%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Foverview)%2C%20Intents%20using%20%5BERC-7683%5D(https%3A%2F%2Fwww.erc7683.org%2Fspec)%2C%20%5BEIP-712%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712)%2C%20%5BCompactx%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fcompactx)%20and%20%5BUniswap%20V4%20Hooks%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fv4%2Foverview).%20Development%20can%20be%20found%20in%20the%20github%20organization%20%5Bjincubator%5D(https%3A%2F%2Fgithub.com%2Fjincubator).%0A%0A%23%23%23%20Hook%20Mods%0A%0A1.%20Booster%20Pools%0A2.%20BackRunning%0A3.%20ReHypothecation%0A4.%20Paymaster%0A5.%20Settlement%20Pools%20-%20CrossChain%0A6.%20Router%20change%20to%20Slippage%20Failure%20to%20create%20an%20Intent.%0A7.%20HOOK%0A%0A%23%23%23%20Deliverables%0A%0A1.%20%20No%20Liquidity%20Pool%0A%20%20%20%201.%20Swap%20via%20preferred%20LP%20at%20fixed%20price%20from%20Oracle%0A2.%20%20IntentSwap%0A%20%20%20%201.%20CreateIntentSwap%20(includes%20output%20amount%20in%20each%20call)%0A%20%20%20%202.%20ExecuteIntentSwap%20(uses%20funds%20from%20compact)%0A%20%20%20%203.%20SweepIntentSwap%20(passed%20a%20compact)%0A3.%20%20BoosterPool%0A%20%20%20%201.%20Adds%20IntentManagement%20to%20Any%20Pool%0A%20%20%20%202.%20Adds%20Dynamic%20fees%20to%20Any%20Pool%0A%20%20%20%203.%20Adds%20BackRunning%20via%20Solver%0A%20%20%20%204.%20Adds%20ReHypothecation%20to%20any%20pool%20USDCY%0A%20%20%20%205.%20Adds%20Oracle%20Pricing%20to%20any%20pool%20EULER-ORACLES%0A%20%20%20%206.%20Adds%20Gas%20Sponsorship%0A",lastUpdatedAt:175385797e4},{lazy:()=>J(()=>import("./hooks-myF2WMeL.js"),[]),path:"/research/Intents/hooks.html",type:"mdx",filePath:"research/Intents/hooks.mdx",content:"%23%20Uniswap%20V4%20Hook%20Development%20-%20WIP%0A%0A%23%23%20Overview%0A%0AThis%20section%20documents%20design%20work%20to%20be%20done%20for%20enhancing%20Uniswap%20V4%20through%20the%20use%20of%20hooks%20for%20better%20price%20discovery%2C%20swapping%20and%20solver%20execution.%0A%0AIt%20leverages%20%5BTycho%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Foverview)%2C%20Intents%20using%20%5BERC-7683%5D(https%3A%2F%2Fwww.erc7683.org%2Fspec)%2C%20%5BEIP-712%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712)%2C%20%5BCompactx%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fcompactx)%20and%20%5BUniswap%20V4%20Hooks%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fv4%2Foverview).%20Development%20can%20be%20found%20in%20the%20github%20organization%20%5Bjincubator%5D(https%3A%2F%2Fgithub.com%2Fjincubator).%0A%0A%23%23%23%20Hook%20Mods%0A%0A1.%20Booster%20Pools%0A2.%20BackRunning%0A3.%20ReHypothecation%0A4.%20Paymaster%0A5.%20Settlement%20Pools%20-%20CrossChain%0A6.%20Router%20change%20to%20Slippage%20Failure%20to%20create%20an%20Intent.%0A7.%20HOOK%0A%0A%23%23%23%20Deliverables%0A%0A1.%20%20No%20Liquidity%20Pool%0A%20%20%20%201.%20Swap%20via%20preferred%20LP%20at%20fixed%20price%20from%20Oracle%0A2.%20%20IntentSwap%0A%20%20%20%201.%20CreateIntentSwap%20(includes%20output%20amount%20in%20each%20call)%0A%20%20%20%202.%20ExecuteIntentSwap%20(uses%20funds%20from%20compact)%0A%20%20%20%203.%20SweepIntentSwap%20(passed%20a%20compact)%0A3.%20%20BoosterPool%0A%20%20%20%201.%20Adds%20IntentManagement%20to%20Any%20Pool%0A%20%20%20%202.%20Adds%20Dynamic%20fees%20to%20Any%20Pool%0A%20%20%20%203.%20Adds%20BackRunning%20via%20Solver%0A%20%20%20%204.%20Adds%20ReHypothecation%20to%20any%20pool%20USDCY%0A%20%20%20%205.%20Adds%20Oracle%20Pricing%20to%20any%20pool%20EULER-ORACLES%0A%20%20%20%206.%20Adds%20Gas%20Sponsorship%0A",lastUpdatedAt:175385797e4},{lazy:()=>J(()=>import("./intro-F4Kr1vpN.js"),[]),path:"/research/Intents/intro",type:"mdx",filePath:"research/Intents/intro.mdx",content:"%23%20Solving%20and%20Arbitrage%20Research%0A%0A%23%23%20Overview%0A%0AWork%20in%202025%20on%20Solving%2C%20Arbitrage%20and%20Indexing%20using%20%5BTycho%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Foverview)%2C%20Intents%20using%20%5BERC-7683%5D(https%3A%2F%2Fwww.erc7683.org%2Fspec)%2C%20%5BEIP-712%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712)%2C%20%5BCompactx%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fcompactx)%20and%20%5BUniswap%20V4%20Hooks%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fv4%2Foverview).%20Development%20can%20be%20found%20in%20the%20github%20organization%20%5Bjincubator%5D(https%3A%2F%2Fgithub.com%2Fjincubator).%0A%0A%23%23%20Abstract%0A%0ALiquidity%20Fragmentation%20and%20Capital%20Efficiency%20are%20areas%20that%20can%20be%20optimized%20in%20Blockchain%20protocols%2C%20with%20the%20emergence%20of%20Multiple%20L2%20Chains%20and%20a%20shift%20towards%20intent-based%20architectures.%20There%20is%20a%20greater%20need%20than%20ever%20for%20a%20settlement%20layer%20to%20balance%20provided%20liquidity.%0A%0AThis%20is%20an%20opinionated%20architecture%20for%20an%20intent%20based%20solving%20protocol%20which%20facilitates%20single%20and%20multichain%20solving%20of%20intents.%20Intents%20can%20be%20solved%20on%20a%20single%20chain%20without%20provisioning%20up%20front%20capital%20as%20we%20arbiters%20can%20confirm%20mandates%20have%20been%20met%20by%20solvers%20at%20execution%20time%2C%20thus%20solvers%20may%20use%20the%20swappers%20locked%20funds%20for%20execution.%0A%0A%23%23%20Goals%0A%0AKey%20Goals%20for%20this%20design%20include%0A%0A-%20Intent%20Based%20Architecture%20to%20improve%20execution%0A-%20Ability%20for%20Solvers%20to%20execute%20fills%20without%20needing%20to%20provide%20upfront%20capital%0A%0AFuture%20work%20includes%0A%0A-%20Capital%20Efficient%20Liquidity%20Provisioning%20including%20rehypothecation%0A-%20Improved%20Price%20Discover%20via%20the%20use%20of%20Oracles%20and%20external%20services%0A-%20Incorporating%20BackRunning%20of%20Transactions%20into%20Protocols%20such%20as%20Uniswap%20V4%20via%20hooks%0A%0A%23%23%20Overview%0A%0A%3Ciframe%0A%20%20src%3D%22https%3A%2F%2Fwww.loom.com%2Fembed%2Fb4635dbab0bb473f84f5bc55e514e845%22%0A%20%20frameborder%3D%220%22%0A%20%20allowfullscreen%0A%20%20allow%3D%22autoplay%3B%20encrypted-media%22%0A%20%20style%3D%7B%7B%0A%20%20%20%20width%3A%20%22100%25%22%2C%0A%20%20%20%20height%3A%20%22500px%22%2C%0A%20%20%20%20borderRadius%3A%20%2212px%22%2C%0A%20%20%7D%7D%0A%2F%3E%0A",lastUpdatedAt:175385797e4},{lazy:()=>J(()=>import("./intro-F4Kr1vpN.js"),[]),path:"/research/Intents/intro.html",type:"mdx",filePath:"research/Intents/intro.mdx",content:"%23%20Solving%20and%20Arbitrage%20Research%0A%0A%23%23%20Overview%0A%0AWork%20in%202025%20on%20Solving%2C%20Arbitrage%20and%20Indexing%20using%20%5BTycho%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Foverview)%2C%20Intents%20using%20%5BERC-7683%5D(https%3A%2F%2Fwww.erc7683.org%2Fspec)%2C%20%5BEIP-712%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712)%2C%20%5BCompactx%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fcompactx)%20and%20%5BUniswap%20V4%20Hooks%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fv4%2Foverview).%20Development%20can%20be%20found%20in%20the%20github%20organization%20%5Bjincubator%5D(https%3A%2F%2Fgithub.com%2Fjincubator).%0A%0A%23%23%20Abstract%0A%0ALiquidity%20Fragmentation%20and%20Capital%20Efficiency%20are%20areas%20that%20can%20be%20optimized%20in%20Blockchain%20protocols%2C%20with%20the%20emergence%20of%20Multiple%20L2%20Chains%20and%20a%20shift%20towards%20intent-based%20architectures.%20There%20is%20a%20greater%20need%20than%20ever%20for%20a%20settlement%20layer%20to%20balance%20provided%20liquidity.%0A%0AThis%20is%20an%20opinionated%20architecture%20for%20an%20intent%20based%20solving%20protocol%20which%20facilitates%20single%20and%20multichain%20solving%20of%20intents.%20Intents%20can%20be%20solved%20on%20a%20single%20chain%20without%20provisioning%20up%20front%20capital%20as%20we%20arbiters%20can%20confirm%20mandates%20have%20been%20met%20by%20solvers%20at%20execution%20time%2C%20thus%20solvers%20may%20use%20the%20swappers%20locked%20funds%20for%20execution.%0A%0A%23%23%20Goals%0A%0AKey%20Goals%20for%20this%20design%20include%0A%0A-%20Intent%20Based%20Architecture%20to%20improve%20execution%0A-%20Ability%20for%20Solvers%20to%20execute%20fills%20without%20needing%20to%20provide%20upfront%20capital%0A%0AFuture%20work%20includes%0A%0A-%20Capital%20Efficient%20Liquidity%20Provisioning%20including%20rehypothecation%0A-%20Improved%20Price%20Discover%20via%20the%20use%20of%20Oracles%20and%20external%20services%0A-%20Incorporating%20BackRunning%20of%20Transactions%20into%20Protocols%20such%20as%20Uniswap%20V4%20via%20hooks%0A%0A%23%23%20Overview%0A%0A%3Ciframe%0A%20%20src%3D%22https%3A%2F%2Fwww.loom.com%2Fembed%2Fb4635dbab0bb473f84f5bc55e514e845%22%0A%20%20frameborder%3D%220%22%0A%20%20allowfullscreen%0A%20%20allow%3D%22autoplay%3B%20encrypted-media%22%0A%20%20style%3D%7B%7B%0A%20%20%20%20width%3A%20%22100%25%22%2C%0A%20%20%20%20height%3A%20%22500px%22%2C%0A%20%20%20%20borderRadius%3A%20%2212px%22%2C%0A%20%20%7D%7D%0A%2F%3E%0A",lastUpdatedAt:175385797e4},{lazy:()=>J(()=>import("./protocol-B6jA4kxE.js"),[]),path:"/research/Intents/protocol",type:"mdx",filePath:"research/Intents/protocol.mdx",content:"%23%20Protocol%0A%0A%23%23%20Overview%0A%0AThe%20Protocol%20is%20part%20of%20an%20opinionated%20architecture%20for%20an%20intent%20based%20solving%20protocol%20which%20facilitates%20single%20and%20multichain%20solving%20of%20intents.%20Intents%20can%20be%20solved%20on%20a%20single%20chain%20without%20provisioning%20up%20front%20capital%20as%20we%20arbiters%20can%20confirm%20mandates%20have%20been%20met%20by%20solvers%20at%20execution%20time%2C%20thus%20solvers%20may%20use%20the%20swappers%20locked%20funds%20for%20execution.%20It%20does%20this%20by%20introducing%20a%20SolverPayload%20which%20can%20be%20executed%20by%20the%20Arbiter%20to%20ensure%20the%20EIP-712%20signed%20mandate%20is%20met.%0A%0AKey%20Goals%20for%20this%20design%20include%0A%0A-%20Intent%20Based%20Architecture%20to%20improve%20execution%0A-%20Ability%20for%20Solvers%20to%20execute%20fills%20without%20needing%20to%20provide%20upfront%20capital%0A%0AThe%20protocol%20is%20inspired%20by%20or%20leverages%20the%20following%20key%20components%0A%0A-%20%5BTycho%20Execution%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-execution)%3A%20Is%20leveraged%20by%20Arbiters%20and%20solvers%20for%20executing%20most%20efficient%20routes.%0A-%20%5BUniswap%20the-compact%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fthe-compact)%3A%20The%20foundation%20of%20our%20resource%20locking%20mechanism%0A-%20%5BUniswap%20Tribunal%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Ftribunal)%3A%20Mandates%20and%20EIP-712%20signing%20are%20heavily%20utilized%20throughout%20the%20protocol%0A-%20%5BUniswap%20v4%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fv4-core)%3A%20We%20leverage%20V4%20hooks%20for%20IntentSwap%20Execution%20on%20Uniswap%20V4.%0A%0A%3E%20For%20a%20technical%20overview%20of%20this%20repository%20automatically%20generated%20by%20DeepWiki%20please%0A%3E%20%5B!%5BAsk%20DeepWiki%5D(https%3A%2F%2Fdeepwiki.com%2Fbadge.svg)%5D(https%3A%2F%2Fdeepwiki.com%2Fjincubator%2Fprotocol)%0A%0A%23%23%20Mandate%20Functionality%0A%0A%3E%20%3Ainformation_source%3A%20%5C_The%20following%20section%20was%20inspired%20by%20the%20%5B%3Aunicorn%3A%20Tribunal%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Ftribunal)%20and%20updated%20to%20support%20monochain%20swaps%20which%20allow%20for%20solvers%20to%20execute%20intents%20with%20the%20swappers%20funds.%0A%0ATo%20settle%20a%20swap%2C%20the%20filler%20submits%20a%20%22fill%22%20request%20to%20the%20Arbiter%20contract.%20This%20consists%20of%20four%20core%20components%3A%0A%0A1.%20**Claim**%3A%20Contains%20the%20chain%20ID%20of%20a%20Compact%2C%20its%20parameters%2C%20and%20its%20signatures.%0A2.%20**Mandate**%3A%20Specifies%20settlement%20conditions%20and%20amount%20derivation%20parameters%20specified%20by%20the%20sponsor.%0A3.%20**SolverPayload**%3A%20Specifies%20the%20transactions%20to%20execute%20to%20solve%20the%20intent%0A4.%20**Claimant**%3A%20Specifies%20the%20account%20that%20will%20receive%20the%20claimed%20tokens.%0A%0A%3E%20Note%20for%20cross-chain%20message%20protocols%20integrating%20with%20Tribunal%3A%20inherit%20the%20%60Arbiter%60%20contract%20and%20override%20the%20%60_processDirective%60%20and%20%60_quoteDirective%60%20functions%20to%20implement%20the%20relevant%20directive%20processing%20logic%20for%20passing%20a%20message%20to%20the%20arbiter%20on%20the%20claim%20chain%20(or%20ensure%20that%20the%20necessary%20state%20is%20updated%20to%20allow%20for%20the%20arbiter%20to%20%22pull%22%20the%20message%20themselves).%20An%20ERC7683-compatible%20implementation%20is%20provided%20in%20%60ERC7683Arbiter.sol%60.%0A%3E%20%E2%9A%A0%EF%B8%8F%20Note%3A%20for%20cross-chain%20intents%20SolverPayloads%20can%20be%20executed%20on%20the%20destination%20chain%2C%20but%20the%20solver%20must%20provide%20their%20own%20funds%20and%20provisioning%20of%20the%20swapper%20tokens%20to%20the%20solver%20will%20be%20handled%20by%20the%20Settlement%20Service.%0A%0A%23%23%23%20Core%20Components%0A%0A%23%23%23%23%20Claim%20Structure%0A%0A%60%60%60solidity%0Astruct%20Claim%20%7B%0A%20%20%20%20uint256%20chainId%3B%20%20%20%20%20%20%20%20%20%20%2F%2F%20Claim%20processing%20chain%20ID%0A%20%20%20%20Compact%20compact%3B%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20compact%20parameters%0A%20%20%20%20bytes%20sponsorSignature%3B%20%20%20%2F%2F%20Authorization%20from%20the%20sponsor%0A%20%20%20%20bytes%20allocatorSignature%3B%20%2F%2F%20Authorization%20from%20the%20allocator%0A%7D%0A%60%60%60%0A%0A%23%23%23%23%20Compact%20Structure%0A%0A%60%60%60solidity%0Astruct%20Compact%20%7B%0A%20%20%20%20address%20arbiter%3B%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20account%20tasked%20with%20verifying%20and%20submitting%20the%20claim%0A%20%20%20%20address%20sponsor%3B%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20account%20to%20source%20the%20tokens%20from%0A%20%20%20%20uint256%20nonce%3B%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20A%20parameter%20to%20enforce%20replay%20protection%2C%20scoped%20to%20allocator%0A%20%20%20%20uint256%20expires%3B%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20time%20at%20which%20the%20claim%20expires%0A%20%20%20%20uint256%20id%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20token%20ID%20of%20the%20ERC6909%20token%20to%20allocate%0A%20%20%20%20uint256%20amount%3B%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20amount%20of%20ERC6909%20tokens%20to%20allocate%0A%7D%0A%60%60%60%0A%0A%23%23%23%23%20Solver%20Payload%20Structure%0A%0A%60%60%60solidity%0A%2F**%0A%20*%20%40notice%20Defines%20a%20single%20contract%20call%20to%20be%20executed%0A%20*%20%40param%20to%20The%20target%20contract%20address%0A%20*%20%40param%20data%20The%20encoded%20function%20call%20data%0A%20*%20%40param%20value%20Amount%20of%20ETH%20to%20send%0A%20*%2F%0Astruct%20Call%20%7B%0A%20%20%20%20address%20to%3B%20%2F%2F%20The%20target%20contract%20address%0A%20%20%20%20bytes%20data%3B%20%2F%2F%20The%20encoded%20function%20call%20data%0A%20%20%20%20uint256%20value%3B%20%2F%2FAmount%20of%20ETH%20to%20send%0A%7D%0A%0Astruct%20SolverPayload%20%7B%0A%20%20%20%20Call%5B%5D%20calls%3B%20%2F%2FArray%20of%20contract%20calls%20to%20execute%20in%20sequence%0A%7D%0A%60%60%60%0A%0A%23%23%23%23%20Mandate%20Structure%0A%0A%60%60%60solidity%0Astruct%20Mandate%20%7B%0A%20%20%20%20address%20recipient%3B%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Recipient%20of%20filled%20tokens%0A%20%20%20%20uint256%20expires%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Mandate%20expiration%20timestamp%0A%20%20%20%20address%20token%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Fill%20token%20(address(0)%20for%20native)%0A%20%20%20%20uint256%20minimumAmount%3B%20%20%20%20%20%20%20%2F%2F%20Minimum%20fill%20amount%0A%20%20%20%20uint256%20baselinePriorityFee%3B%20%2F%2F%20Base%20fee%20threshold%20where%20scaling%20kicks%20in%0A%20%20%20%20uint256%20scalingFactor%3B%20%20%20%20%20%20%20%2F%2F%20Fee%20scaling%20multiplier%20(1e18%20baseline)%0A%20%20%20%20bytes32%20salt%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Preimage%20resistance%20parameter%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Process%20Flow%0A%0A1.%20Fillers%20initiate%20by%20calling%20%60fill(Claim%20calldata%20claim%2C%20Mandate%20calldata%20mandate%2C%20SolverPayload%20calldata%20solverPayload%20address%20claimant)%60%20and%20providing%20any%20msg.value%20required%20for%20the%20settlement%20to%20pay%20to%20process%20the%20solution.%0A2.%20Arbiter%20verifies%20that%20the%20mandate%20has%20not%20expired%20by%20checking%20the%20mandate's%20%60expires%60%20timestamp%0A3.%20Computation%20phase%3A%0A%20%20%20-%20Derives%20%60mandateHash%60%20using%20an%20EIP712%20typehash%20for%20the%20mandate%2C%20destination%20chainId%2C%20tribunal%20address%2C%20and%20mandate%20data%0A%20%20%20-%20Derives%20%60claimHash%60%20using%20an%20EIP712%20typehash%20for%20the%20compact%20with%20the%20mandate%20as%20a%20witness%20and%20the%20compact%20data%20including%20the%20%60mandateHash%60%0A%20%20%20-%20Ensures%20that%20the%20%60claimHash%60%20has%20not%20already%20been%20used%20and%20marks%20it%20as%20filled%0A%20%20%20-%20Calculates%20%60fillAmount%60%20and%20%60claimAmount%60%20based%20on%3A%0A%20%20%20%20%20-%20Compact%20%60amount%60%0A%20%20%20%20%20-%20Mandate%20parameters%20(%60minimumAmount%60%2C%20%60baselinePriorityFee%60%2C%20%60scalingFactor%60)%0A%20%20%20%20%20-%20%60tx.gasprice%60%20and%20%60block.basefee%60%0A%20%20%20%20%20-%20NOTE%3A%20%60scalingFactor%60%20will%20result%20in%20an%20increased%20%60fillAmount%60%20if%20%60%3E%201e18%60%20or%20a%20decreased%20%60claimAmount%60%20if%20%60%3C%201e18%60%0A%20%20%20%20%20-%20NOTE%3A%20%60scalingFactor%60%20is%20combined%20with%20%60tx.gasprice%20-%20(block.basefee%20%2B%20baselinePriorityFee)%60%20(or%200%20if%20it%20would%20otherwise%20be%20negative)%20before%20being%20applied%20to%20the%20amount%0A4.%20Execution%20phase%3A%0A%20%20%20-%20Executes%3A%20The%20Solver%20Payload%20using%20the%20funds%20locked%20in%20the-compact%20and%20ensures%20that%20this%20results%20in%20output%20funds%20(tokens%20or%20ETH)%20%3E%3D%20that%20specified%20in%20the%20mandate.%20**IF%20NOT%20REVERT**%0A%20%20%20-%20Transfers%20%60fillAmount%60%20of%20%60token%60%20to%20mandate%20%60recipient%60%0A%20%20%20-%20Transfers%20Compact%20%60amount%60%20of%20%60token%60%20to%20the%20filler.%0A%20%20%20-%20Processes%20directive%20via%20%60_processDirective(chainId%2C%20compact%2C%20sponsorSignature%2C%20allocatorSignature%2C%20mandateHash%2C%20claimant%2C%20claimAmount)%60%0A%0AThere%20are%20also%20a%20few%20view%20functions%3A%0A%0A-%20%60quote(Claim%20calldata%20claim%2C%20Mandate%20calldata%20mandate%2C%20address%20claimant)%60%20will%20suggest%20a%20dispensation%20amount%20(function%20of%20gas%20on%20claim%20chain%20%2B%20any%20additional%20%22protocol%20overhead%22%20if%20using%20push-based%20cross-chain%20messaging)%0A-%20%60filled(bytes32%20claimHash)%60%20will%20check%20if%20a%20given%20claim%20hash%20has%20already%20been%20filled%20(used)%0A-%20%60getCompactWitnessDetails()%60%20will%20return%20the%20Mandate%20witness%20typestring%20and%20that%20correlates%20token%20%2B%20amount%20arguments%20(so%20frontends%20can%20show%20context%20about%20the%20token%20and%20use%20decimal%20inputs)%0A-%20%60deriveMandateHash(Mandate%20calldata%20mandate)%60%20will%20return%20the%20EIP712%20typehash%20for%20the%20mandate%0A-%20%60deriveClaimHash(Compact%20calldata%20compact%2C%20bytes32%20mandateHash)%60%20will%20return%20the%20unique%20claim%20hash%20for%20a%20compact%20and%20mandate%20combination%0A-%20%60deriveAmounts(uint256%20maximumAmount%2C%20uint256%20minimumAmount%2C%20uint256%20baselinePriorityFee%2C%20uint256%20scalingFactor)%60%20will%20return%20the%20fill%20and%20claim%20amounts%20based%20on%20the%20parameters%3B%20the%20base%20fee%20and%20priority%20fee%20will%20be%20applied%20to%20the%20amount%20and%20so%20should%20be%20tuned%20in%20the%20call%20appropriately%0A%0A%23%23%23%23%20Mandate%20EIP-712%20Typehash%0A%0AThis%20is%20what%20swappers%20will%20see%20as%20their%20witness%20data%20when%20signing%20a%20%60Compact%60%3A%0A%0A%60%60%60solidity%0Astruct%20Mandate%20%7B%0A%20%20%20%20uint256%20chainId%3B%0A%20%20%20%20address%20tribunal%3B%0A%20%20%20%20address%20recipient%3B%0A%20%20%20%20uint256%20expires%3B%0A%20%20%20%20address%20token%3B%0A%20%20%20%20uint256%20minimumAmount%3B%0A%20%20%20%20uint256%20baselinePriorityFee%3B%0A%20%20%20%20uint256%20scalingFactor%3B%0A%20%20%20%20bytes32%20salt%3B%0A%7D%0A%60%60%60%0A%0A%23%23%23%20ERC7683%20Integration%0A%0AThe%20%60ERC7683Arbiter%60%20contract%20implements%20the%20%60IDestinationSettler%60%20interface%20from%20ERC7683%2C%20allowing%20for%20standardized%20cross-chain%20settlement%3A%0A%0A%60%60%60solidity%0Ainterface%20IDestinationSettler%20%7B%0A%20%20%20%20function%20fill(bytes32%20orderId%2C%20bytes%20calldata%20originData%2C%20bytes%20calldata%20fillerData)%20external%3B%0A%7D%0A%60%60%60%0A%0AThis%20implementation%20allows%20the%20Tribunal%20to%20be%20used%20with%20any%20ERC7683-compatible%20cross-chain%20messaging%20system.%0A",lastUpdatedAt:175385797e4},{lazy:()=>J(()=>import("./protocol-B6jA4kxE.js"),[]),path:"/research/Intents/protocol.html",type:"mdx",filePath:"research/Intents/protocol.mdx",content:"%23%20Protocol%0A%0A%23%23%20Overview%0A%0AThe%20Protocol%20is%20part%20of%20an%20opinionated%20architecture%20for%20an%20intent%20based%20solving%20protocol%20which%20facilitates%20single%20and%20multichain%20solving%20of%20intents.%20Intents%20can%20be%20solved%20on%20a%20single%20chain%20without%20provisioning%20up%20front%20capital%20as%20we%20arbiters%20can%20confirm%20mandates%20have%20been%20met%20by%20solvers%20at%20execution%20time%2C%20thus%20solvers%20may%20use%20the%20swappers%20locked%20funds%20for%20execution.%20It%20does%20this%20by%20introducing%20a%20SolverPayload%20which%20can%20be%20executed%20by%20the%20Arbiter%20to%20ensure%20the%20EIP-712%20signed%20mandate%20is%20met.%0A%0AKey%20Goals%20for%20this%20design%20include%0A%0A-%20Intent%20Based%20Architecture%20to%20improve%20execution%0A-%20Ability%20for%20Solvers%20to%20execute%20fills%20without%20needing%20to%20provide%20upfront%20capital%0A%0AThe%20protocol%20is%20inspired%20by%20or%20leverages%20the%20following%20key%20components%0A%0A-%20%5BTycho%20Execution%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-execution)%3A%20Is%20leveraged%20by%20Arbiters%20and%20solvers%20for%20executing%20most%20efficient%20routes.%0A-%20%5BUniswap%20the-compact%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fthe-compact)%3A%20The%20foundation%20of%20our%20resource%20locking%20mechanism%0A-%20%5BUniswap%20Tribunal%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Ftribunal)%3A%20Mandates%20and%20EIP-712%20signing%20are%20heavily%20utilized%20throughout%20the%20protocol%0A-%20%5BUniswap%20v4%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fv4-core)%3A%20We%20leverage%20V4%20hooks%20for%20IntentSwap%20Execution%20on%20Uniswap%20V4.%0A%0A%3E%20For%20a%20technical%20overview%20of%20this%20repository%20automatically%20generated%20by%20DeepWiki%20please%0A%3E%20%5B!%5BAsk%20DeepWiki%5D(https%3A%2F%2Fdeepwiki.com%2Fbadge.svg)%5D(https%3A%2F%2Fdeepwiki.com%2Fjincubator%2Fprotocol)%0A%0A%23%23%20Mandate%20Functionality%0A%0A%3E%20%3Ainformation_source%3A%20%5C_The%20following%20section%20was%20inspired%20by%20the%20%5B%3Aunicorn%3A%20Tribunal%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Ftribunal)%20and%20updated%20to%20support%20monochain%20swaps%20which%20allow%20for%20solvers%20to%20execute%20intents%20with%20the%20swappers%20funds.%0A%0ATo%20settle%20a%20swap%2C%20the%20filler%20submits%20a%20%22fill%22%20request%20to%20the%20Arbiter%20contract.%20This%20consists%20of%20four%20core%20components%3A%0A%0A1.%20**Claim**%3A%20Contains%20the%20chain%20ID%20of%20a%20Compact%2C%20its%20parameters%2C%20and%20its%20signatures.%0A2.%20**Mandate**%3A%20Specifies%20settlement%20conditions%20and%20amount%20derivation%20parameters%20specified%20by%20the%20sponsor.%0A3.%20**SolverPayload**%3A%20Specifies%20the%20transactions%20to%20execute%20to%20solve%20the%20intent%0A4.%20**Claimant**%3A%20Specifies%20the%20account%20that%20will%20receive%20the%20claimed%20tokens.%0A%0A%3E%20Note%20for%20cross-chain%20message%20protocols%20integrating%20with%20Tribunal%3A%20inherit%20the%20%60Arbiter%60%20contract%20and%20override%20the%20%60_processDirective%60%20and%20%60_quoteDirective%60%20functions%20to%20implement%20the%20relevant%20directive%20processing%20logic%20for%20passing%20a%20message%20to%20the%20arbiter%20on%20the%20claim%20chain%20(or%20ensure%20that%20the%20necessary%20state%20is%20updated%20to%20allow%20for%20the%20arbiter%20to%20%22pull%22%20the%20message%20themselves).%20An%20ERC7683-compatible%20implementation%20is%20provided%20in%20%60ERC7683Arbiter.sol%60.%0A%3E%20%E2%9A%A0%EF%B8%8F%20Note%3A%20for%20cross-chain%20intents%20SolverPayloads%20can%20be%20executed%20on%20the%20destination%20chain%2C%20but%20the%20solver%20must%20provide%20their%20own%20funds%20and%20provisioning%20of%20the%20swapper%20tokens%20to%20the%20solver%20will%20be%20handled%20by%20the%20Settlement%20Service.%0A%0A%23%23%23%20Core%20Components%0A%0A%23%23%23%23%20Claim%20Structure%0A%0A%60%60%60solidity%0Astruct%20Claim%20%7B%0A%20%20%20%20uint256%20chainId%3B%20%20%20%20%20%20%20%20%20%20%2F%2F%20Claim%20processing%20chain%20ID%0A%20%20%20%20Compact%20compact%3B%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20compact%20parameters%0A%20%20%20%20bytes%20sponsorSignature%3B%20%20%20%2F%2F%20Authorization%20from%20the%20sponsor%0A%20%20%20%20bytes%20allocatorSignature%3B%20%2F%2F%20Authorization%20from%20the%20allocator%0A%7D%0A%60%60%60%0A%0A%23%23%23%23%20Compact%20Structure%0A%0A%60%60%60solidity%0Astruct%20Compact%20%7B%0A%20%20%20%20address%20arbiter%3B%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20account%20tasked%20with%20verifying%20and%20submitting%20the%20claim%0A%20%20%20%20address%20sponsor%3B%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20account%20to%20source%20the%20tokens%20from%0A%20%20%20%20uint256%20nonce%3B%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20A%20parameter%20to%20enforce%20replay%20protection%2C%20scoped%20to%20allocator%0A%20%20%20%20uint256%20expires%3B%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20time%20at%20which%20the%20claim%20expires%0A%20%20%20%20uint256%20id%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20token%20ID%20of%20the%20ERC6909%20token%20to%20allocate%0A%20%20%20%20uint256%20amount%3B%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20amount%20of%20ERC6909%20tokens%20to%20allocate%0A%7D%0A%60%60%60%0A%0A%23%23%23%23%20Solver%20Payload%20Structure%0A%0A%60%60%60solidity%0A%2F**%0A%20*%20%40notice%20Defines%20a%20single%20contract%20call%20to%20be%20executed%0A%20*%20%40param%20to%20The%20target%20contract%20address%0A%20*%20%40param%20data%20The%20encoded%20function%20call%20data%0A%20*%20%40param%20value%20Amount%20of%20ETH%20to%20send%0A%20*%2F%0Astruct%20Call%20%7B%0A%20%20%20%20address%20to%3B%20%2F%2F%20The%20target%20contract%20address%0A%20%20%20%20bytes%20data%3B%20%2F%2F%20The%20encoded%20function%20call%20data%0A%20%20%20%20uint256%20value%3B%20%2F%2FAmount%20of%20ETH%20to%20send%0A%7D%0A%0Astruct%20SolverPayload%20%7B%0A%20%20%20%20Call%5B%5D%20calls%3B%20%2F%2FArray%20of%20contract%20calls%20to%20execute%20in%20sequence%0A%7D%0A%60%60%60%0A%0A%23%23%23%23%20Mandate%20Structure%0A%0A%60%60%60solidity%0Astruct%20Mandate%20%7B%0A%20%20%20%20address%20recipient%3B%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Recipient%20of%20filled%20tokens%0A%20%20%20%20uint256%20expires%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Mandate%20expiration%20timestamp%0A%20%20%20%20address%20token%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Fill%20token%20(address(0)%20for%20native)%0A%20%20%20%20uint256%20minimumAmount%3B%20%20%20%20%20%20%20%2F%2F%20Minimum%20fill%20amount%0A%20%20%20%20uint256%20baselinePriorityFee%3B%20%2F%2F%20Base%20fee%20threshold%20where%20scaling%20kicks%20in%0A%20%20%20%20uint256%20scalingFactor%3B%20%20%20%20%20%20%20%2F%2F%20Fee%20scaling%20multiplier%20(1e18%20baseline)%0A%20%20%20%20bytes32%20salt%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Preimage%20resistance%20parameter%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Process%20Flow%0A%0A1.%20Fillers%20initiate%20by%20calling%20%60fill(Claim%20calldata%20claim%2C%20Mandate%20calldata%20mandate%2C%20SolverPayload%20calldata%20solverPayload%20address%20claimant)%60%20and%20providing%20any%20msg.value%20required%20for%20the%20settlement%20to%20pay%20to%20process%20the%20solution.%0A2.%20Arbiter%20verifies%20that%20the%20mandate%20has%20not%20expired%20by%20checking%20the%20mandate's%20%60expires%60%20timestamp%0A3.%20Computation%20phase%3A%0A%20%20%20-%20Derives%20%60mandateHash%60%20using%20an%20EIP712%20typehash%20for%20the%20mandate%2C%20destination%20chainId%2C%20tribunal%20address%2C%20and%20mandate%20data%0A%20%20%20-%20Derives%20%60claimHash%60%20using%20an%20EIP712%20typehash%20for%20the%20compact%20with%20the%20mandate%20as%20a%20witness%20and%20the%20compact%20data%20including%20the%20%60mandateHash%60%0A%20%20%20-%20Ensures%20that%20the%20%60claimHash%60%20has%20not%20already%20been%20used%20and%20marks%20it%20as%20filled%0A%20%20%20-%20Calculates%20%60fillAmount%60%20and%20%60claimAmount%60%20based%20on%3A%0A%20%20%20%20%20-%20Compact%20%60amount%60%0A%20%20%20%20%20-%20Mandate%20parameters%20(%60minimumAmount%60%2C%20%60baselinePriorityFee%60%2C%20%60scalingFactor%60)%0A%20%20%20%20%20-%20%60tx.gasprice%60%20and%20%60block.basefee%60%0A%20%20%20%20%20-%20NOTE%3A%20%60scalingFactor%60%20will%20result%20in%20an%20increased%20%60fillAmount%60%20if%20%60%3E%201e18%60%20or%20a%20decreased%20%60claimAmount%60%20if%20%60%3C%201e18%60%0A%20%20%20%20%20-%20NOTE%3A%20%60scalingFactor%60%20is%20combined%20with%20%60tx.gasprice%20-%20(block.basefee%20%2B%20baselinePriorityFee)%60%20(or%200%20if%20it%20would%20otherwise%20be%20negative)%20before%20being%20applied%20to%20the%20amount%0A4.%20Execution%20phase%3A%0A%20%20%20-%20Executes%3A%20The%20Solver%20Payload%20using%20the%20funds%20locked%20in%20the-compact%20and%20ensures%20that%20this%20results%20in%20output%20funds%20(tokens%20or%20ETH)%20%3E%3D%20that%20specified%20in%20the%20mandate.%20**IF%20NOT%20REVERT**%0A%20%20%20-%20Transfers%20%60fillAmount%60%20of%20%60token%60%20to%20mandate%20%60recipient%60%0A%20%20%20-%20Transfers%20Compact%20%60amount%60%20of%20%60token%60%20to%20the%20filler.%0A%20%20%20-%20Processes%20directive%20via%20%60_processDirective(chainId%2C%20compact%2C%20sponsorSignature%2C%20allocatorSignature%2C%20mandateHash%2C%20claimant%2C%20claimAmount)%60%0A%0AThere%20are%20also%20a%20few%20view%20functions%3A%0A%0A-%20%60quote(Claim%20calldata%20claim%2C%20Mandate%20calldata%20mandate%2C%20address%20claimant)%60%20will%20suggest%20a%20dispensation%20amount%20(function%20of%20gas%20on%20claim%20chain%20%2B%20any%20additional%20%22protocol%20overhead%22%20if%20using%20push-based%20cross-chain%20messaging)%0A-%20%60filled(bytes32%20claimHash)%60%20will%20check%20if%20a%20given%20claim%20hash%20has%20already%20been%20filled%20(used)%0A-%20%60getCompactWitnessDetails()%60%20will%20return%20the%20Mandate%20witness%20typestring%20and%20that%20correlates%20token%20%2B%20amount%20arguments%20(so%20frontends%20can%20show%20context%20about%20the%20token%20and%20use%20decimal%20inputs)%0A-%20%60deriveMandateHash(Mandate%20calldata%20mandate)%60%20will%20return%20the%20EIP712%20typehash%20for%20the%20mandate%0A-%20%60deriveClaimHash(Compact%20calldata%20compact%2C%20bytes32%20mandateHash)%60%20will%20return%20the%20unique%20claim%20hash%20for%20a%20compact%20and%20mandate%20combination%0A-%20%60deriveAmounts(uint256%20maximumAmount%2C%20uint256%20minimumAmount%2C%20uint256%20baselinePriorityFee%2C%20uint256%20scalingFactor)%60%20will%20return%20the%20fill%20and%20claim%20amounts%20based%20on%20the%20parameters%3B%20the%20base%20fee%20and%20priority%20fee%20will%20be%20applied%20to%20the%20amount%20and%20so%20should%20be%20tuned%20in%20the%20call%20appropriately%0A%0A%23%23%23%23%20Mandate%20EIP-712%20Typehash%0A%0AThis%20is%20what%20swappers%20will%20see%20as%20their%20witness%20data%20when%20signing%20a%20%60Compact%60%3A%0A%0A%60%60%60solidity%0Astruct%20Mandate%20%7B%0A%20%20%20%20uint256%20chainId%3B%0A%20%20%20%20address%20tribunal%3B%0A%20%20%20%20address%20recipient%3B%0A%20%20%20%20uint256%20expires%3B%0A%20%20%20%20address%20token%3B%0A%20%20%20%20uint256%20minimumAmount%3B%0A%20%20%20%20uint256%20baselinePriorityFee%3B%0A%20%20%20%20uint256%20scalingFactor%3B%0A%20%20%20%20bytes32%20salt%3B%0A%7D%0A%60%60%60%0A%0A%23%23%23%20ERC7683%20Integration%0A%0AThe%20%60ERC7683Arbiter%60%20contract%20implements%20the%20%60IDestinationSettler%60%20interface%20from%20ERC7683%2C%20allowing%20for%20standardized%20cross-chain%20settlement%3A%0A%0A%60%60%60solidity%0Ainterface%20IDestinationSettler%20%7B%0A%20%20%20%20function%20fill(bytes32%20orderId%2C%20bytes%20calldata%20originData%2C%20bytes%20calldata%20fillerData)%20external%3B%0A%7D%0A%60%60%60%0A%0AThis%20implementation%20allows%20the%20Tribunal%20to%20be%20used%20with%20any%20ERC7683-compatible%20cross-chain%20messaging%20system.%0A",lastUpdatedAt:175385797e4},{lazy:()=>J(()=>import("./resources-B3FnRumt.js"),[]),path:"/research/Intents/resources",type:"mdx",filePath:"research/Intents/resources.mdx",content:"%23%20Resource%20Management%0A%0A%23%23%20Overview%0A%0AThe%20Protocol%20leverages%20an%20expansive%20locking%20system%20from%20%5Bthe-compact%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fthe-compact%2F).%20We%20have%20incorporated%20%5BMandates%20and%20Solver%20Payloads%5D(.%2Fprotocol)%20to%20allow%20Intents%20to%20be%20solved%20on%20a%20single%20chain%20without%20provisioning%20up%20front%20capital%20as%20we%20arbiters%20can%20confirm%20mandates%20have%20been%20met%20by%20solvers%20at%20execution%20time%2C%20thus%20solvers%20may%20use%20the%20swappers%20locked%20funds%20for%20execution.%0A%0A%3E%20As%20of%20July%2025th%20the%20%5Bthe-compact%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fthe-compact%2F)%20we%20are%20developing%20on%20has%20been%20forked%20from%20%5BUniswap%20the-compact%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Fthe-compact%2Ftree%2Fv1)%20v1%20branch%20which%20has%20not%20as%20yet%20been%20deployed.%0A%0A%23%23%20Summary%0A%0AThe%20Compact%20is%20an%20ownerless%20ERC6909%20contract%20that%20facilitates%20the%20voluntary%20formation%20and%20mediation%20of%20reusable%20**resource%20locks**.%20It%20enables%20tokens%20to%20be%20credibly%20committed%20to%20be%20spent%20in%20exchange%20for%20performing%20actions%20across%20arbitrary%2C%20asynchronous%20environments%2C%20and%20claimed%20once%20the%20specified%20conditions%20have%20been%20met.%0A%0AResource%20locks%20are%20entered%20into%20by%20ERC20%20or%20native%20token%20holders%20(called%20the%20**depositor**).%20Once%20a%20resource%20lock%20has%20been%20established%2C%20the%20owner%20of%20the%20ERC6909%20token%20representing%20a%20resource%20lock%20can%20act%20as%20a%20**sponsor**%20and%20create%20a%20**compact**.%20A%20compact%20is%20a%20commitment%20allowing%20interested%20parties%20to%20claim%20their%20tokens%20through%20the%20sponsor's%20indicated%20**arbiter**.%20The%20arbiter%20is%20then%20responsible%20for%20processing%20the%20claim%20once%20it%20has%20attested%20to%20the%20specified%20conditions%20of%20the%20compact%20having%20been%20met.%0A%0AWhen%20depositing%20into%20a%20resource%20lock%2C%20the%20depositor%20assigns%20an%20**allocator**%20and%20a%20**reset%20period**%20for%20that%20lock.%20The%20allocator%20is%20tasked%20with%20providing%20additional%20authorization%20whenever%20the%20owner%20of%20the%20lock%20wishes%20to%20transfer%20their%206909%20tokens%2C%20withdraw%20the%20underlying%20locked%20assets%2C%20or%20sponsor%20a%20compact%20utilizing%20the%20lock.%20Their%20primary%20role%20is%20essentially%20to%20protect%20**claimants**%E2%80%94entities%20that%20provide%20proof%20of%20having%20met%20the%20conditions%20and%20subsequently%20make%20a%20claim%20against%20a%20compact%E2%80%94by%20ensuring%20the%20credibility%20of%20commitments%2C%20such%20as%20preventing%20%22double-spends%22%20involving%20previously-committed%20locked%20balances.%0A%0AAllocators%20can%20be%20purely%20onchain%20abstractions%2C%20or%20can%20involve%20hybrid%20(onchain%20%2B%20offchain)%20mechanics%20as%20part%20of%20their%20authorization%20procedure.%20Should%20an%20allocator%20erroneously%20or%20maliciously%20fail%20to%20authorize%20the%20use%20of%20an%20unallocated%20resource%20lock%20balance%2C%20the%20depositor%20can%20initiate%20a%20**forced%20withdrawal**%20for%20the%20lock%20in%20question%3B%20after%20waiting%20for%20the%20reset%20period%20indicated%20when%20depositing%20into%20the%20lock%2C%20they%20can%20withdraw%20their%20underlying%20balance%20at%20will%20_without_%20the%20allocator's%20explicit%20permission.%0A%0ASponsors%20can%20also%20optionally%20assign%20an%20**emissary**%20to%20act%20as%20a%20fallback%20signer%20for%20authorizing%20claims%20against%20their%20compacts.%20This%20is%20particularly%20helpful%20for%20smart%20contract%20accounts%20or%20other%20scenarios%20where%20signing%20keys%20might%20change.%0A%0AThe%20Compact%20effectively%20%22activates%22%20any%20deposited%20tokens%20to%20be%20instantly%20spent%20or%20swapped%20across%20arbitrary%2C%20asynchronous%20environments%20as%20long%20as%3A%0A%0A-%20Claimants%20are%20confident%20that%20the%20allocator%20is%20sound%20and%20will%20not%20leave%20the%20resource%20lock%20underallocated.%0A-%20Sponsors%20are%20confident%20that%20the%20allocator%20will%20not%20unduly%20censor%20fully%20allocated%20requests.%0A-%20Sponsors%20are%20confident%20that%20the%20arbiter%20is%20sound%20and%20will%20not%20process%20claims%20where%20the%20conditions%20were%20not%20successfully%20met.%0A-%20Claimants%20are%20confident%20that%20the%20arbiter%20is%20sound%20and%20will%20not%20_fail_%20to%20process%20claims%20where%20the%20conditions%20_were_%20successfully%20met.%0A%0A%23%23%20Key%20Concepts%0A%0A%23%23%23%20Resource%20Locks%0A%0AResource%20locks%20are%20the%20fundamental%20building%20blocks%20of%20The%20Compact%20protocol.%20They%20are%20created%20when%20a%20depositor%20places%20tokens%20(either%20native%20tokens%20or%20ERC20%20tokens)%20into%20The%20Compact.%20Each%20resource%20lock%20has%20four%20key%20properties%3A%0A%0A1.%20%20The%20**underlying%20token**%20held%20in%20the%20resource%20lock.%0A2.%20%20The%20**allocator**%20tasked%20with%20cosigning%20on%20claims%20against%20the%20resource%20locks%20(see%20%5BAllocators%5D(%23allocators)).%0A3.%20%20The%20**scope**%20of%20the%20resource%20lock%20(either%20spendable%20on%20any%20chain%20or%20limited%20to%20a%20single%20chain).%0A4.%20%20The%20**reset%20period**%20for%20forcibly%20exiting%20the%20lock%20(see%20%5BForced%20Withdrawals%5D(%23forced-withdrawals))%20and%20for%20emissary%20reassignment%20timelocks%20(see%20%5BEmissaries%5D(%23emissaries)).%0A%0AEach%20unique%20combination%20of%20these%20four%20properties%20is%20represented%20by%20a%20fungible%20ERC6909%20tokenID.%20The%20owner%20of%20these%20ERC6909%20tokens%20can%20act%20as%20a%20sponsor%20and%20create%20compacts.%0A%0AThe%20%60scope%60%2C%20%60resetPeriod%60%2C%20and%20the%20%60allocatorId%60%20(obtained%20when%20an%20allocator%20is%20registered)%20are%20packed%20into%20a%20%60bytes12%20lockTag%60.%20A%20resource%20lock's%20specific%20ID%20(the%20ERC6909%20%60tokenId%60)%20is%20a%20concatenation%20of%20this%20%60lockTag%60%20and%20the%20underlying%20%60token%60%20address%2C%20represented%20as%20a%20%60uint256%60%20for%20ERC6909%20compatibility.%20This%20%60lockTag%60%20is%20used%20throughout%20various%20interfaces%20to%20succinctly%20identify%20the%20parameters%20of%20a%20lock.%0A%0A**Fee-on-Transfer%20and%20Rebasing%20Token%20Handling%3A**%0A%0A-%20**Fee-on-Transfer%3A**%20The%20Compact%20correctly%20handles%20fee-on-transfer%20tokens%20for%20both%20deposits%20and%20withdrawals.%20The%20amount%20of%20ERC6909%20tokens%20minted%20or%20burned%20is%20based%20on%20the%20_actual%20balance%20change_%20in%20The%20Compact%20contract%2C%20not%20just%20the%20specified%20amount.%20This%20ensures%20ERC6909%20tokens%20accurately%20represent%20the%20underlying%20assets.%0A-%20**Rebasing%20Tokens%3A**%20**Rebasing%20tokens%20(e.g.%2C%20stETH)%20are%20NOT%20supported%20in%20The%20Compact%20V1.**%20Any%20yield%20or%20other%20balance%20changes%20occurring%20_after_%20deposit%20will%20not%20accrue%20to%20the%20depositor's%20ERC6909%20tokens.%20For%20such%20assets%2C%20use%20their%20wrapped%2C%20non-rebasing%20counterparts%20(e.g.%2C%20wstETH)%20to%20avoid%20loss%20of%20value.%0A%0A%23%23%23%20Allocators%0A%0AEach%20resource%20lock%20is%20mediated%20by%20an%20**allocator**.%20Their%20primary%20responsibilities%20include%3A%0A%0A1.%20%20**Preventing%20Double-Spending%3A**%20Ensuring%20sponsors%20don't%20commit%20the%20same%20tokens%20to%20multiple%20compacts%20or%20transfer%20away%20committed%20funds.%0A2.%20%20**Validating%20Transfers%3A**%20Attesting%20to%20standard%20ERC6909%20transfers%20of%20resource%20lock%20tokens%20(via%20%60IAllocator.attest%60).%0A3.%20%20**Authorizing%20Claims%3A**%20Validating%20claims%20against%20resource%20locks%20(via%20%60IAllocator.authorizeClaim%60).%0A4.%20%20**Nonce%20Management%3A**%20Ensuring%20nonces%20are%20not%20reused%20for%20claims%20and%20(optionally)%20consuming%20nonces%20directly%20on%20The%20Compact%20using%20%60consume%60.%0A%0AAllocators%20must%20be%20registered%20with%20The%20Compact%20via%20%60__registerAllocator%60%20before%20they%20can%20be%20assigned%20to%20locks.%20They%20must%20implement%20the%20%60IAllocator%60%20interface%20and%20operate%20under%20specific%20%5Btrust%20assumptions%5D(%23trust-assumptions).%0A%0A%23%23%23%20Arbiters%0A%0AArbiters%20are%20responsible%20for%20verifying%20and%20submitting%20claims.%20When%20a%20sponsor%20creates%20a%20compact%2C%20they%20designate%20an%20arbiter%20who%20will%3A%0A%0A1.%20%20Verify%20that%20the%20specified%20conditions%20of%20the%20compact%20have%20been%20met%20(these%20conditions%20can%20be%20implicitly%20understood%20or%20explicitly%20defined%20via%20witness%20data).%0A2.%20%20Process%20the%20claim%20by%20calling%20the%20appropriate%20function%20on%20The%20Compact%20(from%20%60ITheCompactClaims%60).%0A3.%20%20Specify%20which%20claimants%20are%20entitled%20to%20the%20committed%20resources%20and%20in%20what%20form%20each%20claimant's%20portion%20will%20be%20issued%20(i.e.%2C%20direct%20transfer%2C%20withdrawal%2C%20or%20conversion)%20as%20part%20of%20the%20claim%20payload.%0A%0AOften%2C%20the%20entity%20fulfilling%20an%20off-chain%20condition%20(like%20a%20filler%20or%20solver)%20might%20interface%20directly%20with%20the%20arbiter.%20The%20%5Btrust%20assumptions%5D(%23trust-assumptions)%20around%20arbiters%20are%20critical%20to%20understand.%0A%0A%23%23%23%20Emissaries%0A%0AEmissaries%20provide%20a%20fallback%20verification%20mechanism%20for%20sponsors%20when%20authorizing%20claims.%20This%20is%20particularly%20useful%20for%3A%0A%0A1.%20%20Smart%20contract%20accounts%20that%20might%20update%20their%20EIP-1271%20signature%20verification%20logic.%0A2.%20%20Accounts%20using%20EIP-7702%20delegation%20that%20leverages%20EIP-1271.%0A3.%20%20Situations%20where%20the%20sponsor%20wants%20to%20delegate%20claim%20verification%20to%20a%20trusted%20third%20party.%0A%0AA%20sponsor%20assigns%20an%20emissary%20for%20a%20specific%20%60lockTag%60%20using%20%60assignEmissary%60.%20The%20emissary%20must%20implement%20the%20%60IEmissary%60%20interface%2C%20specifically%20the%20%60verifyClaim%60%20function.%0A%0ATo%20change%20an%20emissary%20after%20one%20has%20been%20assigned%2C%20the%20sponsor%20must%20first%20call%20%60scheduleEmissaryAssignment%60%2C%20wait%20for%20the%20%60resetPeriod%60%20associated%20with%20the%20%60lockTag%60%20to%20elapse%2C%20and%20then%20call%20%60assignEmissary%60%20again%20with%20the%20new%20emissary's%20address%20(or%20%60address(0)%60%20to%20remove).%0A%0A%23%23%23%20Compacts%20%26%20EIP-712%20Payloads%0A%0AA%20**compact**%20is%20the%20agreement%20created%20by%20a%20sponsor%20that%20allows%20their%20locked%20resources%20to%20be%20claimed%20under%20specified%20conditions.%20The%20Compact%20protocol%20uses%20EIP-712%20typed%20structured%20data%20for%20creating%20and%20verifying%20signatures%20for%20these%20agreements.%0A%0AThere%20are%20three%20main%20EIP-712%20payload%20types%20a%20sponsor%20can%20sign%3A%0A%0A1.%20%20**%60Compact%60**%3A%20For%20single%20resource%20lock%20operations%20on%20a%20single%20chain.%0A%0A%20%20%20%20%60%60%60solidity%0A%20%20%20%20%2F%2F%20Defined%20in%20src%2Ftypes%2FEIP712Types.sol%0A%20%20%20%20struct%20Compact%20%7B%0A%20%20%20%20%20%20%20%20address%20arbiter%3B%20%20%20%20%2F%2F%20The%20account%20tasked%20with%20verifying%20and%20submitting%20the%20claim.%0A%20%20%20%20%20%20%20%20address%20sponsor%3B%20%20%20%20%2F%2F%20The%20account%20to%20source%20the%20tokens%20from.%0A%20%20%20%20%20%20%20%20uint256%20nonce%3B%20%20%20%20%20%20%2F%2F%20A%20parameter%20to%20enforce%20replay%20protection%2C%20scoped%20to%20allocator.%0A%20%20%20%20%20%20%20%20uint256%20expires%3B%20%20%20%20%2F%2F%20The%20time%20at%20which%20the%20claim%20expires.%0A%20%20%20%20%20%20%20%20bytes12%20lockTag%3B%20%20%20%20%2F%2F%20A%20tag%20representing%20the%20allocator%2C%20reset%20period%2C%20and%20scope.%0A%20%20%20%20%20%20%20%20address%20token%3B%20%20%20%20%20%20%2F%2F%20The%20locked%20token%2C%20or%20address(0)%20for%20native%20tokens.%0A%20%20%20%20%20%20%20%20uint256%20amount%3B%20%20%20%20%20%2F%2F%20The%20amount%20of%20ERC6909%20tokens%20to%20commit%20from%20the%20lock.%0A%20%20%20%20%20%20%20%20%2F%2F%20(Optional)%20Witness%20data%20may%20follow%3A%0A%20%20%20%20%20%20%20%20%2F%2F%20Mandate%20mandate%3B%0A%20%20%20%20%7D%0A%20%20%20%20%60%60%60%0A%0A2.%20%20**%60BatchCompact%60**%3A%20For%20allocating%20multiple%20resource%20locks%20on%20a%20single%20chain.%0A%0A%20%20%20%20%60%60%60solidity%0A%20%20%20%20%2F%2F%20Defined%20in%20src%2Ftypes%2FEIP712Types.sol%0A%20%20%20%20struct%20BatchCompact%20%7B%0A%20%20%20%20%20%20%20%20address%20arbiter%3B%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20account%20tasked%20with%20verifying%20and%20submitting%20the%20claim.%0A%20%20%20%20%20%20%20%20address%20sponsor%3B%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20account%20to%20source%20the%20tokens%20from.%0A%20%20%20%20%20%20%20%20uint256%20nonce%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20A%20parameter%20to%20enforce%20replay%20protection%2C%20scoped%20to%20allocator.%0A%20%20%20%20%20%20%20%20uint256%20expires%3B%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20time%20at%20which%20the%20claim%20expires.%0A%20%20%20%20%20%20%20%20Lock%5B%5D%20commitments%3B%20%20%20%20%20%20%20%20%20%2F%2F%20The%20committed%20locks%20with%20lock%20tags%2C%20tokens%2C%20%26%20amounts.%0A%20%20%20%20%20%20%20%20%2F%2F%20(Optional)%20Witness%20data%20may%20follow%3A%0A%20%20%20%20%20%20%20%20%2F%2F%20Mandate%20mandate%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20struct%20Lock%20%7B%0A%20%20%20%20%20%20%20%20bytes12%20lockTag%3B%20%20%20%20%2F%2F%20A%20tag%20representing%20the%20allocator%2C%20reset%20period%2C%20and%20scope.%0A%20%20%20%20%20%20%20%20address%20token%3B%20%20%20%20%20%20%2F%2F%20The%20locked%20token%2C%20or%20address(0)%20for%20native%20tokens.%0A%20%20%20%20%20%20%20%20uint256%20amount%3B%20%20%20%20%20%2F%2F%20The%20maximum%20committed%20amount%20of%20tokens.%0A%20%20%20%20%7D%0A%20%20%20%20%60%60%60%0A%0A3.%20%20**%60MultichainCompact%60**%3A%20For%20allocating%20one%20or%20more%20resource%20locks%20across%20multiple%20chains.%0A%0A%20%20%20%20%60%60%60%60solidity%0A%20%20%20%20%2F%2F%20Defined%20in%20src%2Ftypes%2FEIP712Types.sol%0A%20%20%20%20struct%20MultichainCompact%20%7B%0A%20%20%20%20address%20sponsor%3B%20%2F%2F%20The%20account%20to%20source%20the%20tokens%20from.%0A%20%20%20%20uint256%20nonce%3B%20%2F%2F%20A%20parameter%20to%20enforce%20replay%20protection%2C%20scoped%20to%20allocator.%0A%20%20%20%20uint256%20expires%3B%20%2F%2F%20The%20time%20at%20which%20the%20claim%20expires.%0A%20%20%20%20Element%5B%5D%20elements%3B%20%2F%2F%20Arbiter%2C%20chainId%2C%20commitments%2C%20and%20mandate%20for%20each%20chain.%0A%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Defined%20in%20src%2Ftypes%2FEIP712Types.sol%0A%20%20%20%20%20%20%20%20struct%20Element%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20address%20arbiter%3B%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20account%20tasked%20with%20verifying%20and%20submitting%20the%20claim.%0A%20%20%20%20%20%20%20%20%20%20%20%20uint256%20chainId%3B%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20chainId%20where%20the%20tokens%20are%20located.%0A%20%20%20%20%20%20%20%20%20%20%20%20Lock%5B%5D%20commitments%3B%20%20%20%20%20%20%20%20%20%2F%2F%20The%20committed%20locks%20with%20lock%20tags%2C%20tokens%2C%20%26%20amounts.%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Witness%20data%20MUST%20follow%20(mandatory%20for%20multichain%20compacts)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20Mandate%20mandate%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20%20%20The%20%60Mandate%60%20struct%20within%20these%20payloads%20is%20for%20%5BWitness%20Structure%5D(%23witness-structure).%20The%20EIP-712%20typehash%20for%20these%20structures%20is%20constructed%20dynamically%3B%20empty%20%60Mandate%60%20structs%20result%20in%20a%20typestring%20without%20witness%20data.%20Witness%20data%20is%20optional%20_except_%20in%20a%20%60MultichainCompact%60%3B%20a%20multichain%20compact's%20elements%20**must**%20include%20a%20witness.%0A%20%20%20%20%60%60%60%60%0A%0A**Permit2%20Integration%20Payloads%3A**%0AThe%20Compact%20also%20supports%20integration%20with%20Permit2%20for%20gasless%20deposits%2C%20using%20additional%20EIP-712%20structures%20for%20witness%20data%20within%20Permit2%20messages%3A%0A%0A-%20%60CompactDeposit(bytes12%20lockTag%2Caddress%20recipient)%60%3A%20For%20basic%20Permit2%20deposits.%0A-%20%60Activation(address%20activator%2Cuint256%20id%2CCompact%20compact)Compact(...)Mandate(...)%60%3A%20Combines%20deposits%20with%20single%20compact%20registration.%0A-%20%60BatchActivation(address%20activator%2Cuint256%5B%5D%20ids%2CCompact%20compact)Compact(...)Mandate(...)%60%3A%20Combines%20deposits%20with%20batch%20compact%20registration.%0A%0A**CompactCategory%20Enum%3A**%0AThe%20Compact%20introduces%20a%20%60CompactCategory%60%20enum%20to%20distinguish%20between%20different%20types%20of%20compacts%20when%20using%20Permit2%20integration%3A%0A%0A%60%60%60solidity%0A%2F%2F%20Defined%20in%20src%2Ftypes%2FCompactCategory.sol%0Aenum%20CompactCategory%20%7B%0A%20%20%20%20Compact%2C%0A%20%20%20%20BatchCompact%2C%0A%20%20%20%20MultichainCompact%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Witness%20Structure%0A%0AThe%20witness%20mechanism%20(%60Mandate%60%20struct)%20allows%20extending%20compacts%20with%20additional%20data%20for%20specifying%20conditions%20or%20parameters%20for%20a%20claim.%20The%20Compact%20protocol%20itself%20doesn't%20interpret%20the%20%60Mandate%60's%20content%3B%20this%20is%20the%20responsibility%20of%20the%20arbiter.%20However%2C%20The%20Compact%20uses%20the%20hash%20of%20the%20witness%20data%20and%20its%20reconstructed%20EIP-712%20typestring%20to%20derive%20the%20final%20claim%20hash%20for%20validation.%0A%0A**Format%3A**%0AThe%20witness%20is%20always%20a%20%60Mandate%60%20struct%20appended%20to%20the%20compact.%0A%0A%60%60%60solidity%0ACompact(...%2C%20Mandate%20mandate)Mandate(uint256%20myArg%2C%20bytes32%20otherArg)%0A%60%60%60%0A%0AThe%20%60witnessTypestring%60%20provided%20during%20a%20claim%20should%20be%20the%20arguments%20_inside_%20the%20%60Mandate%60%20struct%20(e.g.%2C%20%60uint256%20myArg%2Cbytes32%20otherArg%60)%2C%20followed%20by%20any%20nested%20structs.%20Note%20that%20there%20are%20no%20assumptions%20made%20by%20the%20protocol%20about%20the%20shape%20of%20the%20%60Mandate%60%20or%20any%20nested%20structs%20within%20it.%0A%0A**Nested%20Structs%3A**%0AEIP-712%20requires%20nested%20structs%20to%20be%20ordered%20alphanumerically%20after%20the%20top-level%20struct%20in%20the%20typestring.%20We%20recommend%20prefixing%20nested%20structs%20with%20%22Mandate%22%20(e.g.%2C%20%60MandateCondition%60)%20to%20ensure%20correct%20ordering.%20Failure%20to%20do%20so%20will%20result%20in%20an%20_invalid_%20EIP-712%20typestring.%0A%0AFor%20example%2C%20the%20correct%20witness%20typestring%20for%20%60Mandate(MandateCondition%20condition%2Cuint256%20arg)MandateCondition(bool%20flag%2Cuint256%20val)%60%20would%20be%20%60MandateCondition%20condition%2Cuint256%20arg)MandateCondition(bool%20flag%2Cuint256%20val%60%20(_without_%20a%20closing%20parenthesis).%0A%0A%3E%20%E2%98%9D%EF%B8%8F%20Note%20the%20missing%20closing%20parenthesis%20in%20the%20above%20example.%20It%20will%20be%20added%20by%20the%20protocol%20during%20the%20dynamic%20typestring%20construction%2C%20so%20**do%20not%20include%20the%20closing%20parenthesis%20in%20your%20witness%20typestring.**%20This%20is%20crucial%2C%20otherwise%20the%20generated%20typestring%20_will%20be%20invalid_.%0A%0A%23%23%23%20Registration%0A%0AAs%20an%20alternative%20to%20sponsors%20signing%20EIP-712%20payloads%2C%20compacts%20can%20be%20_registered_%20directly%20on%20The%20Compact%20contract.%20This%20involves%20submitting%20a%20%60claimHash%60%20(derived%20from%20the%20intended%20compact%20details)%20and%20its%20%60typehash%60.%0AThis%20supports%3A%0A%0A-%20Sponsors%20without%20direct%20signing%20capabilities%20(e.g.%2C%20DAOs%2C%20protocols).%0A-%20Smart%20wallet%20%2F%20EIP-7702%20enabled%20sponsors%20with%20alternative%20signature%20logic.%0A-%20Chained%20deposit-and-register%20operations.%0A%0ARegistration%20can%20be%20done%20by%20the%20sponsor%20or%20a%20third%20party%20(if%20they%20provide%20the%20sponsor's%20signature%20for%20%60registerFor%60%20type%20functions%2C%20or%20if%20they%20are%20providing%20the%20deposited%20tokens).%20Registrations%20do%20not%20expire%2C%20and%20registered%20compacts%20cannot%20be%20unregistered%20by%20the%20sponsor.%20Registrations%20can%20be%20invalidated%20by%20the%20allocator%20consuming%20the%20nonce%2C%20or%20by%20letting%20them%20expire.%20Once%20a%20claim%20is%20processed%20for%20a%20compact%20its%20registration%20state%20is%20cleared.%0A%0AThe%20current%20registration%20status%20for%20a%20given%20claim%20can%20be%20queried%20via%20the%20%60ITheCompact.isRegistered%60%20function%3A%0A%0A%60%60%60solidity%0Abool%20isRegistered%20%3D%20theCompact.isRegistered(sponsor%2C%20claimHash%2C%20typehash)%3B%0A%60%60%60%0A%0A%23%23%23%20Claimant%20Processing%20%26%20Structure%0A%0AWhen%20an%20arbiter%20submits%20a%20claim%2C%20they%20provide%20an%20array%20of%20%60Component%60%20structs.%20Each%20%60Component%60%20specifies%20an%20%60amount%60%20and%20a%20%60claimant%60.%0A%0A%60%60%60solidity%0A%2F%2F%20Defined%20in%20src%2Ftypes%2FComponents.sol%0Astruct%20Component%20%7B%0A%20%20%20%20uint256%20claimant%3B%20%2F%2F%20The%20lockTag%20%2B%20recipient%20of%20the%20transfer%20or%20withdrawal.%0A%20%20%20%20uint256%20amount%3B%20%20%20%2F%2F%20The%20amount%20of%20tokens%20to%20transfer%20or%20withdraw.%0A%7D%0A%60%60%60%0A%0AThe%20%60claimant%60%20field%20encodes%20both%20the%20%60recipient%60%20address%20(lower%20160%20bits)%20and%20a%20%60bytes12%20lockTag%60%20(upper%2096%20bits)%3A%20%60claimant%20%3D%20(lockTag%20%3C%3C%20160)%20%7C%20recipient%60.%0A%0AThis%20encoding%20determines%20how%20The%20Compact%20processes%20each%20component%20of%20the%20claim%3A%0A%0A1.%20%20**Direct%20ERC6909%20Transfer%3A**%20If%20the%20encoded%20%60lockTag%60%20matches%20the%20%60lockTag%60%20of%20the%20resource%20lock%20being%20claimed%2C%20the%20%60amount%60%20of%20ERC6909%20tokens%20is%20transferred%20directly%20to%20the%20%60recipient%60.%0A2.%20%20**Convert%20Between%20Resource%20Locks%3A**%20If%20the%20encoded%20%60lockTag%60%20is%20non-zero%20and%20_different_%20from%20the%20claimed%20lock's%20tag%2C%20The%20Compact%20attempts%20to%20_convert_%20the%20claimed%20resource%20lock%20to%20a%20new%20one%20defined%20by%20the%20encoded%20%60lockTag%60%20for%20the%20%60recipient%60.%20This%20allows%20changing%20allocator%2C%20reset%20period%2C%20or%20scope.%0A3.%20%20**Withdraw%20Underlying%20Tokens%3A**%20If%20the%20encoded%20%60lockTag%60%20is%20%60bytes12(0)%60%2C%20The%20Compact%20attempts%20to%20withdraw%20the%20underlying%20tokens%20(native%20or%20ERC20)%20from%20the%20resource%20lock%20and%20send%20them%20to%20the%20%60recipient%60.%0A%0A**Withdrawal%20Fallback%20Mechanism%3A**%0ATo%20prevent%20griefing%20(e.g.%2C%20via%20malicious%20receive%20hooks%20during%20withdrawals%2C%20or%20relayed%20claims%20that%20intentionally%20underpay%20the%20necessary%20amount%20of%20gas)%2C%20The%20Compact%20first%20attempts%20withdrawals%20with%20half%20the%20available%20gas.%20If%20this%20fails%20(and%20sufficient%20gas%20remains%20above%20a%20benchmarked%20stipend)%2C%20it%20falls%20back%20to%20a%20direct%20ERC6909%20transfer%20to%20the%20recipient.%20Stipends%20can%20be%20queried%20via%20%60getRequiredWithdrawalFallbackStipends%60.%20Benchmarking%20for%20these%20stipends%20is%20done%20via%20a%20call%20to%20%60__benchmark%60%20post-deployment%2C%20which%20meters%20cold%20account%20access%20and%20typical%20ERC20%20and%20native%20transfers.%20This%20benchmark%20can%20be%20re-run%20by%20anyone%20at%20any%20time.%0A%0A%23%23%23%20Forced%20Withdrawals%0A%0AThis%20mechanism%20provides%20sponsors%20recourse%20if%20an%20allocator%20becomes%20unresponsive%20or%20censors%20requests.%0A%0A1.%20%20**Enable%3A**%20Sponsor%20calls%20%60enableForcedWithdrawal(uint256%20id)%60.%0A%0A2.%20%20**Wait%3A**%20The%20%60resetPeriod%60%20for%20that%20resource%20lock%20must%20elapse.%0A3.%20%20**Withdraw%3A**%20Sponsor%20calls%20%60forcedWithdrawal(uint256%20id%2C%20address%20recipient%2C%20uint256%20amount)%60%20to%20retrieve%20the%20underlying%20tokens.%0A%0AThe%20forced%20withdrawal%20state%20can%20be%20reversed%20with%20%60disableForcedWithdrawal(uint256%20id)%60.%0A%0A%23%23%23%20Signature%20Verification%0A%0AWhen%20a%20claim%20is%20submitted%20for%20a%20non-registered%20compact%20(i.e.%2C%20one%20relying%20on%20a%20sponsor's%20signature)%2C%20The%20Compact%20verifies%20the%20sponsor's%20authorization%20in%20the%20following%20order%3A%0A%0A1.%20%20**Caller%20is%20Sponsor%3A**%20If%20%60msg.sender%20%3D%3D%20sponsor%60%2C%20authorization%20is%20granted.%0A2.%20%20**ECDSA%20Signature%3A**%20Attempt%20standard%20ECDSA%20signature%20verification.%0A3.%20%20**EIP-1271%20%60isValidSignature%60%3A**%20If%20ECDSA%20fails%2C%20call%20%60isValidSignature%60%20on%20the%20sponsor's%20address%20(if%20it's%20a%20contract)%20with%20half%20the%20remaining%20gas.%0A4.%20%20**Emissary%20%60verifyClaim%60%3A**%20If%20EIP-1271%20fails%20or%20isn't%20applicable%2C%20and%20an%20emissary%20is%20assigned%20for%20the%20sponsor%20and%20%60lockTag%60%2C%20call%20the%20emissary's%20%60verifyClaim%60%20function.%0A%0ASponsors%20cannot%20unilaterally%20cancel%20a%20signed%20compact%3B%20only%20allocators%20can%20effectively%20do%20so%20by%20consuming%20the%20nonce.%20This%20is%20vital%20to%20upholding%20the%20equivocation%20guarantees%20for%20claimants.%0A%0A%23%23%20Trust%20Assumptions%0A%0AThe%20Compact%20protocol%20operates%20under%20a%20specific%20trust%20model%20where%20different%20actors%20have%20varying%20levels%20of%20trust%20requirements%3A%0A%0A**Sponsor%20Trust%20Requirements%3A**%0A%0A-%20**Allocators**%3A%20Sponsors%20must%20trust%20that%20allocators%20will%20not%20unduly%20censor%20valid%20requests%20against%20fully%20funded%20locks.%20However%2C%20sponsors%20retain%20the%20ability%20to%20initiate%20forced%20withdrawals%20if%20allocators%20become%20unresponsive.%0A-%20**Arbiters**%3A%20Sponsors%20must%20trust%20that%20arbiters%20will%20not%20process%20claims%20where%20the%20specified%20conditions%20were%20not%20met.%20Arbiters%20have%20significant%20power%20in%20determining%20claim%20validity.%0A-%20**Emissaries**%3A%20Sponsors%20must%20trust%20that%20emissaries%20(if%20assigned)%20will%20not%20authorize%20claims%20maliciously%2C%20as%20emissaries%20can%20act%20as%20fallback%20signers%20when%20other%20verification%20methods%20fail.%20Emissaries%20effectively%20have%20the%20same%20authorization%20power%20as%20the%20sponsor%20for%20claim%20verification.%0A%0A**Claimant%20Trust%20Requirements%3A**%0A%0A-%20**Allocators**%3A%20Claimants%20must%20trust%20that%20allocators%20are%20sound%20and%20will%20not%20allow%20resource%20locks%20to%20become%20underfunded%20through%20double-spending%20or%20other%20allocation%20failures.%0A-%20**Arbiters**%3A%20Claimants%20must%20trust%20that%20arbiters%20will%20not%20fail%20to%20process%20claims%20where%20conditions%20were%20properly%20met.%0A-%20**Emissaries**%3A%20Claimants%20must%20trust%20that%20emissaries%20(if%20assigned)%20will%20faithfully%20authorize%20valid%20claims%20if%20the%20sponsor%20is%20able%20to%20equivocate%2C%20or%20update%20their%20account%20to%20revoke%20their%20authorization%20on%20a%20previously%20authorized%20compact%20(as%20is%20the%20case%20with%20EIP-7702%20sponsors%20and%20many%20smart%20contracts%20implementing%20EIP-1271).%20Therefore%2C%20claimants%20should%20require%20the%20use%20of%20one%20of%20a%20small%20set%20of%20known%2C%20%22canonical%22%20emissaries%20that%20enforce%20delays%20before%20allowing%20key%20rotation.%0A%0A%23%23%20Key%20Events%0A%0AThe%20Compact%20emits%20several%20events%20to%20signal%20important%20state%20changes%3A%0A%0A-%20%60Claim(address%20indexed%20sponsor%2C%20address%20indexed%20allocator%2C%20address%20indexed%20arbiter%2C%20bytes32%20claimHash%2C%20uint256%20nonce)%60%3A%20Emitted%20when%20a%20claim%20is%20successfully%20processed%20via%20%60ITheCompactClaims%60%20functions.%0A-%20%60NonceConsumedDirectly(address%20indexed%20allocator%2C%20uint256%20nonce)%60%3A%20Emitted%20when%20an%20allocator%20directly%20consumes%20a%20nonce%20via%20%60consume%60.%0A-%20%60ForcedWithdrawalStatusUpdated(address%20indexed%20account%2C%20uint256%20indexed%20id%2C%20bool%20activating%2C%20uint256%20withdrawableAt)%60%3A%20Emitted%20when%20%60enableForcedWithdrawal%60%20or%20%60disableForcedWithdrawal%60%20is%20called.%0A-%20%60CompactRegistered(address%20indexed%20sponsor%2C%20bytes32%20claimHash%2C%20bytes32%20typehash)%60%3A%20Emitted%20when%20a%20compact%20is%20registered%20via%20%60register%60%2C%20%60registerMultiple%60%2C%20or%20combined%20deposit-and-register%20functions.%0A-%20%60AllocatorRegistered(uint96%20allocatorId%2C%20address%20allocator)%60%3A%20Emitted%20when%20a%20new%20allocator%20is%20registered%20via%20%60__registerAllocator%60.%0A-%20%60EmissaryAssigned(address%20indexed%20sponsor%2C%20bytes12%20indexed%20lockTag%2C%20address%20emissary)%60%3A%20Emitted%20when%20a%20sponsor%20assigns%20or%20changes%20an%20emissary%20via%20%60assignEmissary%60.%0A%0AStandard%20%60ERC6909.Transfer%60%20events%20are%20also%20emitted%20for%20mints%2C%20burns%2C%20and%20transfers%20of%20resource%20lock%20tokens.%0A%0A%23%23%20Key%20Data%20Structures%0A%0AMany%20functions%20in%20The%20Compact%20use%20custom%20structs%20for%20their%20calldata.%20Here%20are%20some%20of%20the%20most%20important%20ones%3A%0A%0A-%20**For%20Claims%20(passed%20to%20%60ITheCompactClaims%60%20functions)%3A**%0A%20%20-%20%60Claim%60%3A%20For%20claims%20involving%20a%20single%20resource%20lock%20on%20a%20single%20chain.%0A%20%20%20%20%60%60%60solidity%0A%20%20%20%20%2F%2F%20Defined%20in%20src%2Ftypes%2FClaims.sol%0A%20%20%20%20struct%20Claim%20%7B%0A%20%20%20%20%20%20%20%20bytes%20allocatorData%3B%0A%20%20%20%20%20%20%20%20bytes%20sponsorSignature%3B%0A%20%20%20%20%20%20%20%20address%20sponsor%3B%0A%20%20%20%20%20%20%20%20uint256%20nonce%3B%0A%20%20%20%20%20%20%20%20uint256%20expires%3B%0A%20%20%20%20%20%20%20%20bytes32%20witness%3B%0A%20%20%20%20%20%20%20%20string%20witnessTypestring%3B%0A%20%20%20%20%20%20%20%20uint256%20id%3B%0A%20%20%20%20%20%20%20%20uint256%20allocatedAmount%3B%0A%20%20%20%20%20%20%20%20Component%5B%5D%20claimants%3B%0A%20%20%20%20%7D%0A%20%20%20%20%60%60%60%0A%20%20-%20%60BatchClaim%60%3A%20For%20multiple%20resource%20locks%20on%20a%20single%20chain.%0A%20%20-%20%60MultichainClaim%60%3A%20For%20single%20resource%20lock%20claims%20on%20the%20notarized%20(i.e.%2C%20origin)%20chain%20of%20a%20multichain%20compact.%0A%20%20-%20%60ExogenousMultichainClaim%60%3A%20For%20single%20resource%20lock%20claims%20on%20an%20exogenous%20chain%20(i.e.%2C%20any%20chain%20_other%20than_%20the%20notarized%20chain).%0A%20%20-%20%60BatchMultichainClaim%60%3A%20For%20multiple%20resource%20locks%20on%20the%20notarized%20chain.%0A%20%20-%20%60ExogenousBatchMultichainClaim%60%3A%20For%20multiple%20resource%20locks%20on%20an%20exogenous%20chain.%0A%20%20-%20%60BatchClaimComponent%60%3A%20Used%20within%20batch%20claim%20structs.%0A%20%20%20%20%60%60%60solidity%0A%20%20%20%20%2F%2F%20Defined%20in%20src%2Ftypes%2FComponents.sol%0A%20%20%20%20struct%20BatchClaimComponent%20%7B%0A%20%20%20%20%20%20%20%20uint256%20id%3B%0A%20%20%20%20%20%20%20%20uint256%20allocatedAmount%3B%0A%20%20%20%20%20%20%20%20Component%5B%5D%20portions%3B%0A%20%20%20%20%7D%0A%20%20%20%20%60%60%60%0A%0A-%20**For%20Allocated%20Transfers%20(passed%20to%20%60ITheCompact.allocatedTransfer%60%20etc.)%3A**%0A%20%20-%20%60AllocatedTransfer%60%3A%20For%20transferring%20a%20single%20ID%20to%20multiple%20recipients%20with%20allocator%20approval.%0A%20%20%20%20%60%60%60solidity%0A%20%20%20%20%2F%2F%20Defined%20in%20src%2Ftypes%2FClaims.sol%0A%20%20%20%20struct%20AllocatedTransfer%20%7B%0A%20%20%20%20%20%20%20%20bytes%20allocatorData%3B%0A%20%20%20%20%20%20%20%20uint256%20nonce%3B%0A%20%20%20%20%20%20%20%20uint256%20expires%3B%0A%20%20%20%20%20%20%20%20uint256%20id%3B%0A%20%20%20%20%20%20%20%20Component%5B%5D%20recipients%3B%0A%20%20%20%20%7D%0A%20%20%20%20%60%60%60%0A%20%20-%20%60AllocatedBatchTransfer%60%3A%20For%20transferring%20multiple%20IDs.%0A%0A-%20**For%20Deposits%20(used%20with%20Permit2)%3A**%0A%20%20-%20%60DepositDetails%60%3A%20Helper%20for%20batch%20Permit2%20deposits.%0A",lastUpdatedAt:175385797e4},{lazy:()=>J(()=>import("./resources-B3FnRumt.js"),[]),path:"/research/Intents/resources.html",type:"mdx",filePath:"research/Intents/resources.mdx",content:"%23%20Resource%20Management%0A%0A%23%23%20Overview%0A%0AThe%20Protocol%20leverages%20an%20expansive%20locking%20system%20from%20%5Bthe-compact%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fthe-compact%2F).%20We%20have%20incorporated%20%5BMandates%20and%20Solver%20Payloads%5D(.%2Fprotocol)%20to%20allow%20Intents%20to%20be%20solved%20on%20a%20single%20chain%20without%20provisioning%20up%20front%20capital%20as%20we%20arbiters%20can%20confirm%20mandates%20have%20been%20met%20by%20solvers%20at%20execution%20time%2C%20thus%20solvers%20may%20use%20the%20swappers%20locked%20funds%20for%20execution.%0A%0A%3E%20As%20of%20July%2025th%20the%20%5Bthe-compact%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fthe-compact%2F)%20we%20are%20developing%20on%20has%20been%20forked%20from%20%5BUniswap%20the-compact%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Fthe-compact%2Ftree%2Fv1)%20v1%20branch%20which%20has%20not%20as%20yet%20been%20deployed.%0A%0A%23%23%20Summary%0A%0AThe%20Compact%20is%20an%20ownerless%20ERC6909%20contract%20that%20facilitates%20the%20voluntary%20formation%20and%20mediation%20of%20reusable%20**resource%20locks**.%20It%20enables%20tokens%20to%20be%20credibly%20committed%20to%20be%20spent%20in%20exchange%20for%20performing%20actions%20across%20arbitrary%2C%20asynchronous%20environments%2C%20and%20claimed%20once%20the%20specified%20conditions%20have%20been%20met.%0A%0AResource%20locks%20are%20entered%20into%20by%20ERC20%20or%20native%20token%20holders%20(called%20the%20**depositor**).%20Once%20a%20resource%20lock%20has%20been%20established%2C%20the%20owner%20of%20the%20ERC6909%20token%20representing%20a%20resource%20lock%20can%20act%20as%20a%20**sponsor**%20and%20create%20a%20**compact**.%20A%20compact%20is%20a%20commitment%20allowing%20interested%20parties%20to%20claim%20their%20tokens%20through%20the%20sponsor's%20indicated%20**arbiter**.%20The%20arbiter%20is%20then%20responsible%20for%20processing%20the%20claim%20once%20it%20has%20attested%20to%20the%20specified%20conditions%20of%20the%20compact%20having%20been%20met.%0A%0AWhen%20depositing%20into%20a%20resource%20lock%2C%20the%20depositor%20assigns%20an%20**allocator**%20and%20a%20**reset%20period**%20for%20that%20lock.%20The%20allocator%20is%20tasked%20with%20providing%20additional%20authorization%20whenever%20the%20owner%20of%20the%20lock%20wishes%20to%20transfer%20their%206909%20tokens%2C%20withdraw%20the%20underlying%20locked%20assets%2C%20or%20sponsor%20a%20compact%20utilizing%20the%20lock.%20Their%20primary%20role%20is%20essentially%20to%20protect%20**claimants**%E2%80%94entities%20that%20provide%20proof%20of%20having%20met%20the%20conditions%20and%20subsequently%20make%20a%20claim%20against%20a%20compact%E2%80%94by%20ensuring%20the%20credibility%20of%20commitments%2C%20such%20as%20preventing%20%22double-spends%22%20involving%20previously-committed%20locked%20balances.%0A%0AAllocators%20can%20be%20purely%20onchain%20abstractions%2C%20or%20can%20involve%20hybrid%20(onchain%20%2B%20offchain)%20mechanics%20as%20part%20of%20their%20authorization%20procedure.%20Should%20an%20allocator%20erroneously%20or%20maliciously%20fail%20to%20authorize%20the%20use%20of%20an%20unallocated%20resource%20lock%20balance%2C%20the%20depositor%20can%20initiate%20a%20**forced%20withdrawal**%20for%20the%20lock%20in%20question%3B%20after%20waiting%20for%20the%20reset%20period%20indicated%20when%20depositing%20into%20the%20lock%2C%20they%20can%20withdraw%20their%20underlying%20balance%20at%20will%20_without_%20the%20allocator's%20explicit%20permission.%0A%0ASponsors%20can%20also%20optionally%20assign%20an%20**emissary**%20to%20act%20as%20a%20fallback%20signer%20for%20authorizing%20claims%20against%20their%20compacts.%20This%20is%20particularly%20helpful%20for%20smart%20contract%20accounts%20or%20other%20scenarios%20where%20signing%20keys%20might%20change.%0A%0AThe%20Compact%20effectively%20%22activates%22%20any%20deposited%20tokens%20to%20be%20instantly%20spent%20or%20swapped%20across%20arbitrary%2C%20asynchronous%20environments%20as%20long%20as%3A%0A%0A-%20Claimants%20are%20confident%20that%20the%20allocator%20is%20sound%20and%20will%20not%20leave%20the%20resource%20lock%20underallocated.%0A-%20Sponsors%20are%20confident%20that%20the%20allocator%20will%20not%20unduly%20censor%20fully%20allocated%20requests.%0A-%20Sponsors%20are%20confident%20that%20the%20arbiter%20is%20sound%20and%20will%20not%20process%20claims%20where%20the%20conditions%20were%20not%20successfully%20met.%0A-%20Claimants%20are%20confident%20that%20the%20arbiter%20is%20sound%20and%20will%20not%20_fail_%20to%20process%20claims%20where%20the%20conditions%20_were_%20successfully%20met.%0A%0A%23%23%20Key%20Concepts%0A%0A%23%23%23%20Resource%20Locks%0A%0AResource%20locks%20are%20the%20fundamental%20building%20blocks%20of%20The%20Compact%20protocol.%20They%20are%20created%20when%20a%20depositor%20places%20tokens%20(either%20native%20tokens%20or%20ERC20%20tokens)%20into%20The%20Compact.%20Each%20resource%20lock%20has%20four%20key%20properties%3A%0A%0A1.%20%20The%20**underlying%20token**%20held%20in%20the%20resource%20lock.%0A2.%20%20The%20**allocator**%20tasked%20with%20cosigning%20on%20claims%20against%20the%20resource%20locks%20(see%20%5BAllocators%5D(%23allocators)).%0A3.%20%20The%20**scope**%20of%20the%20resource%20lock%20(either%20spendable%20on%20any%20chain%20or%20limited%20to%20a%20single%20chain).%0A4.%20%20The%20**reset%20period**%20for%20forcibly%20exiting%20the%20lock%20(see%20%5BForced%20Withdrawals%5D(%23forced-withdrawals))%20and%20for%20emissary%20reassignment%20timelocks%20(see%20%5BEmissaries%5D(%23emissaries)).%0A%0AEach%20unique%20combination%20of%20these%20four%20properties%20is%20represented%20by%20a%20fungible%20ERC6909%20tokenID.%20The%20owner%20of%20these%20ERC6909%20tokens%20can%20act%20as%20a%20sponsor%20and%20create%20compacts.%0A%0AThe%20%60scope%60%2C%20%60resetPeriod%60%2C%20and%20the%20%60allocatorId%60%20(obtained%20when%20an%20allocator%20is%20registered)%20are%20packed%20into%20a%20%60bytes12%20lockTag%60.%20A%20resource%20lock's%20specific%20ID%20(the%20ERC6909%20%60tokenId%60)%20is%20a%20concatenation%20of%20this%20%60lockTag%60%20and%20the%20underlying%20%60token%60%20address%2C%20represented%20as%20a%20%60uint256%60%20for%20ERC6909%20compatibility.%20This%20%60lockTag%60%20is%20used%20throughout%20various%20interfaces%20to%20succinctly%20identify%20the%20parameters%20of%20a%20lock.%0A%0A**Fee-on-Transfer%20and%20Rebasing%20Token%20Handling%3A**%0A%0A-%20**Fee-on-Transfer%3A**%20The%20Compact%20correctly%20handles%20fee-on-transfer%20tokens%20for%20both%20deposits%20and%20withdrawals.%20The%20amount%20of%20ERC6909%20tokens%20minted%20or%20burned%20is%20based%20on%20the%20_actual%20balance%20change_%20in%20The%20Compact%20contract%2C%20not%20just%20the%20specified%20amount.%20This%20ensures%20ERC6909%20tokens%20accurately%20represent%20the%20underlying%20assets.%0A-%20**Rebasing%20Tokens%3A**%20**Rebasing%20tokens%20(e.g.%2C%20stETH)%20are%20NOT%20supported%20in%20The%20Compact%20V1.**%20Any%20yield%20or%20other%20balance%20changes%20occurring%20_after_%20deposit%20will%20not%20accrue%20to%20the%20depositor's%20ERC6909%20tokens.%20For%20such%20assets%2C%20use%20their%20wrapped%2C%20non-rebasing%20counterparts%20(e.g.%2C%20wstETH)%20to%20avoid%20loss%20of%20value.%0A%0A%23%23%23%20Allocators%0A%0AEach%20resource%20lock%20is%20mediated%20by%20an%20**allocator**.%20Their%20primary%20responsibilities%20include%3A%0A%0A1.%20%20**Preventing%20Double-Spending%3A**%20Ensuring%20sponsors%20don't%20commit%20the%20same%20tokens%20to%20multiple%20compacts%20or%20transfer%20away%20committed%20funds.%0A2.%20%20**Validating%20Transfers%3A**%20Attesting%20to%20standard%20ERC6909%20transfers%20of%20resource%20lock%20tokens%20(via%20%60IAllocator.attest%60).%0A3.%20%20**Authorizing%20Claims%3A**%20Validating%20claims%20against%20resource%20locks%20(via%20%60IAllocator.authorizeClaim%60).%0A4.%20%20**Nonce%20Management%3A**%20Ensuring%20nonces%20are%20not%20reused%20for%20claims%20and%20(optionally)%20consuming%20nonces%20directly%20on%20The%20Compact%20using%20%60consume%60.%0A%0AAllocators%20must%20be%20registered%20with%20The%20Compact%20via%20%60__registerAllocator%60%20before%20they%20can%20be%20assigned%20to%20locks.%20They%20must%20implement%20the%20%60IAllocator%60%20interface%20and%20operate%20under%20specific%20%5Btrust%20assumptions%5D(%23trust-assumptions).%0A%0A%23%23%23%20Arbiters%0A%0AArbiters%20are%20responsible%20for%20verifying%20and%20submitting%20claims.%20When%20a%20sponsor%20creates%20a%20compact%2C%20they%20designate%20an%20arbiter%20who%20will%3A%0A%0A1.%20%20Verify%20that%20the%20specified%20conditions%20of%20the%20compact%20have%20been%20met%20(these%20conditions%20can%20be%20implicitly%20understood%20or%20explicitly%20defined%20via%20witness%20data).%0A2.%20%20Process%20the%20claim%20by%20calling%20the%20appropriate%20function%20on%20The%20Compact%20(from%20%60ITheCompactClaims%60).%0A3.%20%20Specify%20which%20claimants%20are%20entitled%20to%20the%20committed%20resources%20and%20in%20what%20form%20each%20claimant's%20portion%20will%20be%20issued%20(i.e.%2C%20direct%20transfer%2C%20withdrawal%2C%20or%20conversion)%20as%20part%20of%20the%20claim%20payload.%0A%0AOften%2C%20the%20entity%20fulfilling%20an%20off-chain%20condition%20(like%20a%20filler%20or%20solver)%20might%20interface%20directly%20with%20the%20arbiter.%20The%20%5Btrust%20assumptions%5D(%23trust-assumptions)%20around%20arbiters%20are%20critical%20to%20understand.%0A%0A%23%23%23%20Emissaries%0A%0AEmissaries%20provide%20a%20fallback%20verification%20mechanism%20for%20sponsors%20when%20authorizing%20claims.%20This%20is%20particularly%20useful%20for%3A%0A%0A1.%20%20Smart%20contract%20accounts%20that%20might%20update%20their%20EIP-1271%20signature%20verification%20logic.%0A2.%20%20Accounts%20using%20EIP-7702%20delegation%20that%20leverages%20EIP-1271.%0A3.%20%20Situations%20where%20the%20sponsor%20wants%20to%20delegate%20claim%20verification%20to%20a%20trusted%20third%20party.%0A%0AA%20sponsor%20assigns%20an%20emissary%20for%20a%20specific%20%60lockTag%60%20using%20%60assignEmissary%60.%20The%20emissary%20must%20implement%20the%20%60IEmissary%60%20interface%2C%20specifically%20the%20%60verifyClaim%60%20function.%0A%0ATo%20change%20an%20emissary%20after%20one%20has%20been%20assigned%2C%20the%20sponsor%20must%20first%20call%20%60scheduleEmissaryAssignment%60%2C%20wait%20for%20the%20%60resetPeriod%60%20associated%20with%20the%20%60lockTag%60%20to%20elapse%2C%20and%20then%20call%20%60assignEmissary%60%20again%20with%20the%20new%20emissary's%20address%20(or%20%60address(0)%60%20to%20remove).%0A%0A%23%23%23%20Compacts%20%26%20EIP-712%20Payloads%0A%0AA%20**compact**%20is%20the%20agreement%20created%20by%20a%20sponsor%20that%20allows%20their%20locked%20resources%20to%20be%20claimed%20under%20specified%20conditions.%20The%20Compact%20protocol%20uses%20EIP-712%20typed%20structured%20data%20for%20creating%20and%20verifying%20signatures%20for%20these%20agreements.%0A%0AThere%20are%20three%20main%20EIP-712%20payload%20types%20a%20sponsor%20can%20sign%3A%0A%0A1.%20%20**%60Compact%60**%3A%20For%20single%20resource%20lock%20operations%20on%20a%20single%20chain.%0A%0A%20%20%20%20%60%60%60solidity%0A%20%20%20%20%2F%2F%20Defined%20in%20src%2Ftypes%2FEIP712Types.sol%0A%20%20%20%20struct%20Compact%20%7B%0A%20%20%20%20%20%20%20%20address%20arbiter%3B%20%20%20%20%2F%2F%20The%20account%20tasked%20with%20verifying%20and%20submitting%20the%20claim.%0A%20%20%20%20%20%20%20%20address%20sponsor%3B%20%20%20%20%2F%2F%20The%20account%20to%20source%20the%20tokens%20from.%0A%20%20%20%20%20%20%20%20uint256%20nonce%3B%20%20%20%20%20%20%2F%2F%20A%20parameter%20to%20enforce%20replay%20protection%2C%20scoped%20to%20allocator.%0A%20%20%20%20%20%20%20%20uint256%20expires%3B%20%20%20%20%2F%2F%20The%20time%20at%20which%20the%20claim%20expires.%0A%20%20%20%20%20%20%20%20bytes12%20lockTag%3B%20%20%20%20%2F%2F%20A%20tag%20representing%20the%20allocator%2C%20reset%20period%2C%20and%20scope.%0A%20%20%20%20%20%20%20%20address%20token%3B%20%20%20%20%20%20%2F%2F%20The%20locked%20token%2C%20or%20address(0)%20for%20native%20tokens.%0A%20%20%20%20%20%20%20%20uint256%20amount%3B%20%20%20%20%20%2F%2F%20The%20amount%20of%20ERC6909%20tokens%20to%20commit%20from%20the%20lock.%0A%20%20%20%20%20%20%20%20%2F%2F%20(Optional)%20Witness%20data%20may%20follow%3A%0A%20%20%20%20%20%20%20%20%2F%2F%20Mandate%20mandate%3B%0A%20%20%20%20%7D%0A%20%20%20%20%60%60%60%0A%0A2.%20%20**%60BatchCompact%60**%3A%20For%20allocating%20multiple%20resource%20locks%20on%20a%20single%20chain.%0A%0A%20%20%20%20%60%60%60solidity%0A%20%20%20%20%2F%2F%20Defined%20in%20src%2Ftypes%2FEIP712Types.sol%0A%20%20%20%20struct%20BatchCompact%20%7B%0A%20%20%20%20%20%20%20%20address%20arbiter%3B%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20account%20tasked%20with%20verifying%20and%20submitting%20the%20claim.%0A%20%20%20%20%20%20%20%20address%20sponsor%3B%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20account%20to%20source%20the%20tokens%20from.%0A%20%20%20%20%20%20%20%20uint256%20nonce%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20A%20parameter%20to%20enforce%20replay%20protection%2C%20scoped%20to%20allocator.%0A%20%20%20%20%20%20%20%20uint256%20expires%3B%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20time%20at%20which%20the%20claim%20expires.%0A%20%20%20%20%20%20%20%20Lock%5B%5D%20commitments%3B%20%20%20%20%20%20%20%20%20%2F%2F%20The%20committed%20locks%20with%20lock%20tags%2C%20tokens%2C%20%26%20amounts.%0A%20%20%20%20%20%20%20%20%2F%2F%20(Optional)%20Witness%20data%20may%20follow%3A%0A%20%20%20%20%20%20%20%20%2F%2F%20Mandate%20mandate%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20struct%20Lock%20%7B%0A%20%20%20%20%20%20%20%20bytes12%20lockTag%3B%20%20%20%20%2F%2F%20A%20tag%20representing%20the%20allocator%2C%20reset%20period%2C%20and%20scope.%0A%20%20%20%20%20%20%20%20address%20token%3B%20%20%20%20%20%20%2F%2F%20The%20locked%20token%2C%20or%20address(0)%20for%20native%20tokens.%0A%20%20%20%20%20%20%20%20uint256%20amount%3B%20%20%20%20%20%2F%2F%20The%20maximum%20committed%20amount%20of%20tokens.%0A%20%20%20%20%7D%0A%20%20%20%20%60%60%60%0A%0A3.%20%20**%60MultichainCompact%60**%3A%20For%20allocating%20one%20or%20more%20resource%20locks%20across%20multiple%20chains.%0A%0A%20%20%20%20%60%60%60%60solidity%0A%20%20%20%20%2F%2F%20Defined%20in%20src%2Ftypes%2FEIP712Types.sol%0A%20%20%20%20struct%20MultichainCompact%20%7B%0A%20%20%20%20address%20sponsor%3B%20%2F%2F%20The%20account%20to%20source%20the%20tokens%20from.%0A%20%20%20%20uint256%20nonce%3B%20%2F%2F%20A%20parameter%20to%20enforce%20replay%20protection%2C%20scoped%20to%20allocator.%0A%20%20%20%20uint256%20expires%3B%20%2F%2F%20The%20time%20at%20which%20the%20claim%20expires.%0A%20%20%20%20Element%5B%5D%20elements%3B%20%2F%2F%20Arbiter%2C%20chainId%2C%20commitments%2C%20and%20mandate%20for%20each%20chain.%0A%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Defined%20in%20src%2Ftypes%2FEIP712Types.sol%0A%20%20%20%20%20%20%20%20struct%20Element%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20address%20arbiter%3B%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20account%20tasked%20with%20verifying%20and%20submitting%20the%20claim.%0A%20%20%20%20%20%20%20%20%20%20%20%20uint256%20chainId%3B%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20chainId%20where%20the%20tokens%20are%20located.%0A%20%20%20%20%20%20%20%20%20%20%20%20Lock%5B%5D%20commitments%3B%20%20%20%20%20%20%20%20%20%2F%2F%20The%20committed%20locks%20with%20lock%20tags%2C%20tokens%2C%20%26%20amounts.%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Witness%20data%20MUST%20follow%20(mandatory%20for%20multichain%20compacts)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20Mandate%20mandate%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20%20%20The%20%60Mandate%60%20struct%20within%20these%20payloads%20is%20for%20%5BWitness%20Structure%5D(%23witness-structure).%20The%20EIP-712%20typehash%20for%20these%20structures%20is%20constructed%20dynamically%3B%20empty%20%60Mandate%60%20structs%20result%20in%20a%20typestring%20without%20witness%20data.%20Witness%20data%20is%20optional%20_except_%20in%20a%20%60MultichainCompact%60%3B%20a%20multichain%20compact's%20elements%20**must**%20include%20a%20witness.%0A%20%20%20%20%60%60%60%60%0A%0A**Permit2%20Integration%20Payloads%3A**%0AThe%20Compact%20also%20supports%20integration%20with%20Permit2%20for%20gasless%20deposits%2C%20using%20additional%20EIP-712%20structures%20for%20witness%20data%20within%20Permit2%20messages%3A%0A%0A-%20%60CompactDeposit(bytes12%20lockTag%2Caddress%20recipient)%60%3A%20For%20basic%20Permit2%20deposits.%0A-%20%60Activation(address%20activator%2Cuint256%20id%2CCompact%20compact)Compact(...)Mandate(...)%60%3A%20Combines%20deposits%20with%20single%20compact%20registration.%0A-%20%60BatchActivation(address%20activator%2Cuint256%5B%5D%20ids%2CCompact%20compact)Compact(...)Mandate(...)%60%3A%20Combines%20deposits%20with%20batch%20compact%20registration.%0A%0A**CompactCategory%20Enum%3A**%0AThe%20Compact%20introduces%20a%20%60CompactCategory%60%20enum%20to%20distinguish%20between%20different%20types%20of%20compacts%20when%20using%20Permit2%20integration%3A%0A%0A%60%60%60solidity%0A%2F%2F%20Defined%20in%20src%2Ftypes%2FCompactCategory.sol%0Aenum%20CompactCategory%20%7B%0A%20%20%20%20Compact%2C%0A%20%20%20%20BatchCompact%2C%0A%20%20%20%20MultichainCompact%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Witness%20Structure%0A%0AThe%20witness%20mechanism%20(%60Mandate%60%20struct)%20allows%20extending%20compacts%20with%20additional%20data%20for%20specifying%20conditions%20or%20parameters%20for%20a%20claim.%20The%20Compact%20protocol%20itself%20doesn't%20interpret%20the%20%60Mandate%60's%20content%3B%20this%20is%20the%20responsibility%20of%20the%20arbiter.%20However%2C%20The%20Compact%20uses%20the%20hash%20of%20the%20witness%20data%20and%20its%20reconstructed%20EIP-712%20typestring%20to%20derive%20the%20final%20claim%20hash%20for%20validation.%0A%0A**Format%3A**%0AThe%20witness%20is%20always%20a%20%60Mandate%60%20struct%20appended%20to%20the%20compact.%0A%0A%60%60%60solidity%0ACompact(...%2C%20Mandate%20mandate)Mandate(uint256%20myArg%2C%20bytes32%20otherArg)%0A%60%60%60%0A%0AThe%20%60witnessTypestring%60%20provided%20during%20a%20claim%20should%20be%20the%20arguments%20_inside_%20the%20%60Mandate%60%20struct%20(e.g.%2C%20%60uint256%20myArg%2Cbytes32%20otherArg%60)%2C%20followed%20by%20any%20nested%20structs.%20Note%20that%20there%20are%20no%20assumptions%20made%20by%20the%20protocol%20about%20the%20shape%20of%20the%20%60Mandate%60%20or%20any%20nested%20structs%20within%20it.%0A%0A**Nested%20Structs%3A**%0AEIP-712%20requires%20nested%20structs%20to%20be%20ordered%20alphanumerically%20after%20the%20top-level%20struct%20in%20the%20typestring.%20We%20recommend%20prefixing%20nested%20structs%20with%20%22Mandate%22%20(e.g.%2C%20%60MandateCondition%60)%20to%20ensure%20correct%20ordering.%20Failure%20to%20do%20so%20will%20result%20in%20an%20_invalid_%20EIP-712%20typestring.%0A%0AFor%20example%2C%20the%20correct%20witness%20typestring%20for%20%60Mandate(MandateCondition%20condition%2Cuint256%20arg)MandateCondition(bool%20flag%2Cuint256%20val)%60%20would%20be%20%60MandateCondition%20condition%2Cuint256%20arg)MandateCondition(bool%20flag%2Cuint256%20val%60%20(_without_%20a%20closing%20parenthesis).%0A%0A%3E%20%E2%98%9D%EF%B8%8F%20Note%20the%20missing%20closing%20parenthesis%20in%20the%20above%20example.%20It%20will%20be%20added%20by%20the%20protocol%20during%20the%20dynamic%20typestring%20construction%2C%20so%20**do%20not%20include%20the%20closing%20parenthesis%20in%20your%20witness%20typestring.**%20This%20is%20crucial%2C%20otherwise%20the%20generated%20typestring%20_will%20be%20invalid_.%0A%0A%23%23%23%20Registration%0A%0AAs%20an%20alternative%20to%20sponsors%20signing%20EIP-712%20payloads%2C%20compacts%20can%20be%20_registered_%20directly%20on%20The%20Compact%20contract.%20This%20involves%20submitting%20a%20%60claimHash%60%20(derived%20from%20the%20intended%20compact%20details)%20and%20its%20%60typehash%60.%0AThis%20supports%3A%0A%0A-%20Sponsors%20without%20direct%20signing%20capabilities%20(e.g.%2C%20DAOs%2C%20protocols).%0A-%20Smart%20wallet%20%2F%20EIP-7702%20enabled%20sponsors%20with%20alternative%20signature%20logic.%0A-%20Chained%20deposit-and-register%20operations.%0A%0ARegistration%20can%20be%20done%20by%20the%20sponsor%20or%20a%20third%20party%20(if%20they%20provide%20the%20sponsor's%20signature%20for%20%60registerFor%60%20type%20functions%2C%20or%20if%20they%20are%20providing%20the%20deposited%20tokens).%20Registrations%20do%20not%20expire%2C%20and%20registered%20compacts%20cannot%20be%20unregistered%20by%20the%20sponsor.%20Registrations%20can%20be%20invalidated%20by%20the%20allocator%20consuming%20the%20nonce%2C%20or%20by%20letting%20them%20expire.%20Once%20a%20claim%20is%20processed%20for%20a%20compact%20its%20registration%20state%20is%20cleared.%0A%0AThe%20current%20registration%20status%20for%20a%20given%20claim%20can%20be%20queried%20via%20the%20%60ITheCompact.isRegistered%60%20function%3A%0A%0A%60%60%60solidity%0Abool%20isRegistered%20%3D%20theCompact.isRegistered(sponsor%2C%20claimHash%2C%20typehash)%3B%0A%60%60%60%0A%0A%23%23%23%20Claimant%20Processing%20%26%20Structure%0A%0AWhen%20an%20arbiter%20submits%20a%20claim%2C%20they%20provide%20an%20array%20of%20%60Component%60%20structs.%20Each%20%60Component%60%20specifies%20an%20%60amount%60%20and%20a%20%60claimant%60.%0A%0A%60%60%60solidity%0A%2F%2F%20Defined%20in%20src%2Ftypes%2FComponents.sol%0Astruct%20Component%20%7B%0A%20%20%20%20uint256%20claimant%3B%20%2F%2F%20The%20lockTag%20%2B%20recipient%20of%20the%20transfer%20or%20withdrawal.%0A%20%20%20%20uint256%20amount%3B%20%20%20%2F%2F%20The%20amount%20of%20tokens%20to%20transfer%20or%20withdraw.%0A%7D%0A%60%60%60%0A%0AThe%20%60claimant%60%20field%20encodes%20both%20the%20%60recipient%60%20address%20(lower%20160%20bits)%20and%20a%20%60bytes12%20lockTag%60%20(upper%2096%20bits)%3A%20%60claimant%20%3D%20(lockTag%20%3C%3C%20160)%20%7C%20recipient%60.%0A%0AThis%20encoding%20determines%20how%20The%20Compact%20processes%20each%20component%20of%20the%20claim%3A%0A%0A1.%20%20**Direct%20ERC6909%20Transfer%3A**%20If%20the%20encoded%20%60lockTag%60%20matches%20the%20%60lockTag%60%20of%20the%20resource%20lock%20being%20claimed%2C%20the%20%60amount%60%20of%20ERC6909%20tokens%20is%20transferred%20directly%20to%20the%20%60recipient%60.%0A2.%20%20**Convert%20Between%20Resource%20Locks%3A**%20If%20the%20encoded%20%60lockTag%60%20is%20non-zero%20and%20_different_%20from%20the%20claimed%20lock's%20tag%2C%20The%20Compact%20attempts%20to%20_convert_%20the%20claimed%20resource%20lock%20to%20a%20new%20one%20defined%20by%20the%20encoded%20%60lockTag%60%20for%20the%20%60recipient%60.%20This%20allows%20changing%20allocator%2C%20reset%20period%2C%20or%20scope.%0A3.%20%20**Withdraw%20Underlying%20Tokens%3A**%20If%20the%20encoded%20%60lockTag%60%20is%20%60bytes12(0)%60%2C%20The%20Compact%20attempts%20to%20withdraw%20the%20underlying%20tokens%20(native%20or%20ERC20)%20from%20the%20resource%20lock%20and%20send%20them%20to%20the%20%60recipient%60.%0A%0A**Withdrawal%20Fallback%20Mechanism%3A**%0ATo%20prevent%20griefing%20(e.g.%2C%20via%20malicious%20receive%20hooks%20during%20withdrawals%2C%20or%20relayed%20claims%20that%20intentionally%20underpay%20the%20necessary%20amount%20of%20gas)%2C%20The%20Compact%20first%20attempts%20withdrawals%20with%20half%20the%20available%20gas.%20If%20this%20fails%20(and%20sufficient%20gas%20remains%20above%20a%20benchmarked%20stipend)%2C%20it%20falls%20back%20to%20a%20direct%20ERC6909%20transfer%20to%20the%20recipient.%20Stipends%20can%20be%20queried%20via%20%60getRequiredWithdrawalFallbackStipends%60.%20Benchmarking%20for%20these%20stipends%20is%20done%20via%20a%20call%20to%20%60__benchmark%60%20post-deployment%2C%20which%20meters%20cold%20account%20access%20and%20typical%20ERC20%20and%20native%20transfers.%20This%20benchmark%20can%20be%20re-run%20by%20anyone%20at%20any%20time.%0A%0A%23%23%23%20Forced%20Withdrawals%0A%0AThis%20mechanism%20provides%20sponsors%20recourse%20if%20an%20allocator%20becomes%20unresponsive%20or%20censors%20requests.%0A%0A1.%20%20**Enable%3A**%20Sponsor%20calls%20%60enableForcedWithdrawal(uint256%20id)%60.%0A%0A2.%20%20**Wait%3A**%20The%20%60resetPeriod%60%20for%20that%20resource%20lock%20must%20elapse.%0A3.%20%20**Withdraw%3A**%20Sponsor%20calls%20%60forcedWithdrawal(uint256%20id%2C%20address%20recipient%2C%20uint256%20amount)%60%20to%20retrieve%20the%20underlying%20tokens.%0A%0AThe%20forced%20withdrawal%20state%20can%20be%20reversed%20with%20%60disableForcedWithdrawal(uint256%20id)%60.%0A%0A%23%23%23%20Signature%20Verification%0A%0AWhen%20a%20claim%20is%20submitted%20for%20a%20non-registered%20compact%20(i.e.%2C%20one%20relying%20on%20a%20sponsor's%20signature)%2C%20The%20Compact%20verifies%20the%20sponsor's%20authorization%20in%20the%20following%20order%3A%0A%0A1.%20%20**Caller%20is%20Sponsor%3A**%20If%20%60msg.sender%20%3D%3D%20sponsor%60%2C%20authorization%20is%20granted.%0A2.%20%20**ECDSA%20Signature%3A**%20Attempt%20standard%20ECDSA%20signature%20verification.%0A3.%20%20**EIP-1271%20%60isValidSignature%60%3A**%20If%20ECDSA%20fails%2C%20call%20%60isValidSignature%60%20on%20the%20sponsor's%20address%20(if%20it's%20a%20contract)%20with%20half%20the%20remaining%20gas.%0A4.%20%20**Emissary%20%60verifyClaim%60%3A**%20If%20EIP-1271%20fails%20or%20isn't%20applicable%2C%20and%20an%20emissary%20is%20assigned%20for%20the%20sponsor%20and%20%60lockTag%60%2C%20call%20the%20emissary's%20%60verifyClaim%60%20function.%0A%0ASponsors%20cannot%20unilaterally%20cancel%20a%20signed%20compact%3B%20only%20allocators%20can%20effectively%20do%20so%20by%20consuming%20the%20nonce.%20This%20is%20vital%20to%20upholding%20the%20equivocation%20guarantees%20for%20claimants.%0A%0A%23%23%20Trust%20Assumptions%0A%0AThe%20Compact%20protocol%20operates%20under%20a%20specific%20trust%20model%20where%20different%20actors%20have%20varying%20levels%20of%20trust%20requirements%3A%0A%0A**Sponsor%20Trust%20Requirements%3A**%0A%0A-%20**Allocators**%3A%20Sponsors%20must%20trust%20that%20allocators%20will%20not%20unduly%20censor%20valid%20requests%20against%20fully%20funded%20locks.%20However%2C%20sponsors%20retain%20the%20ability%20to%20initiate%20forced%20withdrawals%20if%20allocators%20become%20unresponsive.%0A-%20**Arbiters**%3A%20Sponsors%20must%20trust%20that%20arbiters%20will%20not%20process%20claims%20where%20the%20specified%20conditions%20were%20not%20met.%20Arbiters%20have%20significant%20power%20in%20determining%20claim%20validity.%0A-%20**Emissaries**%3A%20Sponsors%20must%20trust%20that%20emissaries%20(if%20assigned)%20will%20not%20authorize%20claims%20maliciously%2C%20as%20emissaries%20can%20act%20as%20fallback%20signers%20when%20other%20verification%20methods%20fail.%20Emissaries%20effectively%20have%20the%20same%20authorization%20power%20as%20the%20sponsor%20for%20claim%20verification.%0A%0A**Claimant%20Trust%20Requirements%3A**%0A%0A-%20**Allocators**%3A%20Claimants%20must%20trust%20that%20allocators%20are%20sound%20and%20will%20not%20allow%20resource%20locks%20to%20become%20underfunded%20through%20double-spending%20or%20other%20allocation%20failures.%0A-%20**Arbiters**%3A%20Claimants%20must%20trust%20that%20arbiters%20will%20not%20fail%20to%20process%20claims%20where%20conditions%20were%20properly%20met.%0A-%20**Emissaries**%3A%20Claimants%20must%20trust%20that%20emissaries%20(if%20assigned)%20will%20faithfully%20authorize%20valid%20claims%20if%20the%20sponsor%20is%20able%20to%20equivocate%2C%20or%20update%20their%20account%20to%20revoke%20their%20authorization%20on%20a%20previously%20authorized%20compact%20(as%20is%20the%20case%20with%20EIP-7702%20sponsors%20and%20many%20smart%20contracts%20implementing%20EIP-1271).%20Therefore%2C%20claimants%20should%20require%20the%20use%20of%20one%20of%20a%20small%20set%20of%20known%2C%20%22canonical%22%20emissaries%20that%20enforce%20delays%20before%20allowing%20key%20rotation.%0A%0A%23%23%20Key%20Events%0A%0AThe%20Compact%20emits%20several%20events%20to%20signal%20important%20state%20changes%3A%0A%0A-%20%60Claim(address%20indexed%20sponsor%2C%20address%20indexed%20allocator%2C%20address%20indexed%20arbiter%2C%20bytes32%20claimHash%2C%20uint256%20nonce)%60%3A%20Emitted%20when%20a%20claim%20is%20successfully%20processed%20via%20%60ITheCompactClaims%60%20functions.%0A-%20%60NonceConsumedDirectly(address%20indexed%20allocator%2C%20uint256%20nonce)%60%3A%20Emitted%20when%20an%20allocator%20directly%20consumes%20a%20nonce%20via%20%60consume%60.%0A-%20%60ForcedWithdrawalStatusUpdated(address%20indexed%20account%2C%20uint256%20indexed%20id%2C%20bool%20activating%2C%20uint256%20withdrawableAt)%60%3A%20Emitted%20when%20%60enableForcedWithdrawal%60%20or%20%60disableForcedWithdrawal%60%20is%20called.%0A-%20%60CompactRegistered(address%20indexed%20sponsor%2C%20bytes32%20claimHash%2C%20bytes32%20typehash)%60%3A%20Emitted%20when%20a%20compact%20is%20registered%20via%20%60register%60%2C%20%60registerMultiple%60%2C%20or%20combined%20deposit-and-register%20functions.%0A-%20%60AllocatorRegistered(uint96%20allocatorId%2C%20address%20allocator)%60%3A%20Emitted%20when%20a%20new%20allocator%20is%20registered%20via%20%60__registerAllocator%60.%0A-%20%60EmissaryAssigned(address%20indexed%20sponsor%2C%20bytes12%20indexed%20lockTag%2C%20address%20emissary)%60%3A%20Emitted%20when%20a%20sponsor%20assigns%20or%20changes%20an%20emissary%20via%20%60assignEmissary%60.%0A%0AStandard%20%60ERC6909.Transfer%60%20events%20are%20also%20emitted%20for%20mints%2C%20burns%2C%20and%20transfers%20of%20resource%20lock%20tokens.%0A%0A%23%23%20Key%20Data%20Structures%0A%0AMany%20functions%20in%20The%20Compact%20use%20custom%20structs%20for%20their%20calldata.%20Here%20are%20some%20of%20the%20most%20important%20ones%3A%0A%0A-%20**For%20Claims%20(passed%20to%20%60ITheCompactClaims%60%20functions)%3A**%0A%20%20-%20%60Claim%60%3A%20For%20claims%20involving%20a%20single%20resource%20lock%20on%20a%20single%20chain.%0A%20%20%20%20%60%60%60solidity%0A%20%20%20%20%2F%2F%20Defined%20in%20src%2Ftypes%2FClaims.sol%0A%20%20%20%20struct%20Claim%20%7B%0A%20%20%20%20%20%20%20%20bytes%20allocatorData%3B%0A%20%20%20%20%20%20%20%20bytes%20sponsorSignature%3B%0A%20%20%20%20%20%20%20%20address%20sponsor%3B%0A%20%20%20%20%20%20%20%20uint256%20nonce%3B%0A%20%20%20%20%20%20%20%20uint256%20expires%3B%0A%20%20%20%20%20%20%20%20bytes32%20witness%3B%0A%20%20%20%20%20%20%20%20string%20witnessTypestring%3B%0A%20%20%20%20%20%20%20%20uint256%20id%3B%0A%20%20%20%20%20%20%20%20uint256%20allocatedAmount%3B%0A%20%20%20%20%20%20%20%20Component%5B%5D%20claimants%3B%0A%20%20%20%20%7D%0A%20%20%20%20%60%60%60%0A%20%20-%20%60BatchClaim%60%3A%20For%20multiple%20resource%20locks%20on%20a%20single%20chain.%0A%20%20-%20%60MultichainClaim%60%3A%20For%20single%20resource%20lock%20claims%20on%20the%20notarized%20(i.e.%2C%20origin)%20chain%20of%20a%20multichain%20compact.%0A%20%20-%20%60ExogenousMultichainClaim%60%3A%20For%20single%20resource%20lock%20claims%20on%20an%20exogenous%20chain%20(i.e.%2C%20any%20chain%20_other%20than_%20the%20notarized%20chain).%0A%20%20-%20%60BatchMultichainClaim%60%3A%20For%20multiple%20resource%20locks%20on%20the%20notarized%20chain.%0A%20%20-%20%60ExogenousBatchMultichainClaim%60%3A%20For%20multiple%20resource%20locks%20on%20an%20exogenous%20chain.%0A%20%20-%20%60BatchClaimComponent%60%3A%20Used%20within%20batch%20claim%20structs.%0A%20%20%20%20%60%60%60solidity%0A%20%20%20%20%2F%2F%20Defined%20in%20src%2Ftypes%2FComponents.sol%0A%20%20%20%20struct%20BatchClaimComponent%20%7B%0A%20%20%20%20%20%20%20%20uint256%20id%3B%0A%20%20%20%20%20%20%20%20uint256%20allocatedAmount%3B%0A%20%20%20%20%20%20%20%20Component%5B%5D%20portions%3B%0A%20%20%20%20%7D%0A%20%20%20%20%60%60%60%0A%0A-%20**For%20Allocated%20Transfers%20(passed%20to%20%60ITheCompact.allocatedTransfer%60%20etc.)%3A**%0A%20%20-%20%60AllocatedTransfer%60%3A%20For%20transferring%20a%20single%20ID%20to%20multiple%20recipients%20with%20allocator%20approval.%0A%20%20%20%20%60%60%60solidity%0A%20%20%20%20%2F%2F%20Defined%20in%20src%2Ftypes%2FClaims.sol%0A%20%20%20%20struct%20AllocatedTransfer%20%7B%0A%20%20%20%20%20%20%20%20bytes%20allocatorData%3B%0A%20%20%20%20%20%20%20%20uint256%20nonce%3B%0A%20%20%20%20%20%20%20%20uint256%20expires%3B%0A%20%20%20%20%20%20%20%20uint256%20id%3B%0A%20%20%20%20%20%20%20%20Component%5B%5D%20recipients%3B%0A%20%20%20%20%7D%0A%20%20%20%20%60%60%60%0A%20%20-%20%60AllocatedBatchTransfer%60%3A%20For%20transferring%20multiple%20IDs.%0A%0A-%20**For%20Deposits%20(used%20with%20Permit2)%3A**%0A%20%20-%20%60DepositDetails%60%3A%20Helper%20for%20batch%20Permit2%20deposits.%0A",lastUpdatedAt:175385797e4},{lazy:()=>J(()=>import("./cosmos-ibc-TsYV3jCV.js"),[]),path:"/research/bridge/cosmos-ibc",type:"mdx",filePath:"research/bridge/cosmos-ibc.mdx",content:"%23%20Cosmos%20IBC%0A%0A-%20date%3A%202023-02-24%0A-%20last%20updated%3A%202023-04-04%0A%0A%23%23%20Overview%0A%0ACosmos%20is%20a%20network%20of%20the%20many%20blockchains%20built%20on%20IBC%20protocol.%20The%20IBC%20protocol%20is%20a%20universal%20interoperability%20protocol%20that%20allows%20two%20different%20blockchains%20to%20communicate%20with%20one%20another.%20IBC%20guarantees%20reliable%2C%20ordered%2C%20and%20authenticated%20communication.%20See%20%5BCosmos%20Network%20Whitepaper%5D(https%3A%2F%2Fv1.cosmos.network%2Fresources%2Fwhitepaper)%0A%0ABlockchains%20based%20on%20IBC%20protocol%20may%20use%20validity%20based%20proofs%20for%20interchain%20communication.%20See%20%5BIBC%20Protocol%20ELI5%3A%20What%20is%20IBC%3F%5D(https%3A%2F%2Fmedium.com%2Fthe-interchain-foundation%2Feli5-what-is-ibc-def44d7b5b4c)%0A%0A%23%23%23%20Protocol%0A%0A-%20%5BDesign%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc)%3A%20the%20primary%20repository%20for%20development%20and%20documentation%0A-%20%5BDocs%5D(https%3A%2F%2Ftutorials.cosmos.network%2Facademy%2F3-ibc%2F)%3A%20a%20quick%20introduction.%20See%20also%20%5Bibc-go%20documentation%5D(https%3A%2F%2Fibc.cosmos.network%2F)%0A-%20%5BImplementation%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc-go)%3A%20Implementation%20in%20Golang%2C%20built%20as%20a%20Cosmos%20SDK%20module.%0A-%20%5BRoadmap%5D(https%3A%2F%2Fibc.cosmos.network%2Fmain%2Froadmap%2Froadmap.html)%0A%0A%23%23%23%20Bridging%0A%0A-%20%5BRelayer%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Frelayer)%3A%20%22...blockchains%20do%20not%20directly%20pass%20messages%20to%20each%20other%20over%20the%20network.%20This%20is%20where%20relayer%20comes%20in.%20A%20relayer%20process%20monitors%20for%20updates%20on%20opens%20paths%20between%20sets%20of%20IBC%20enabled%20chains...%22%0A-%20%5BLight%20Clients%5D(https%3A%2F%2Fibc.cosmos.network%2Fmain%2Fibc%2Flight-clients%2Foverview.html)%3A%20%22...Light%20clients%20operate%20under%20a%20strict%20set%20of%20rules%20which%20provide%20security%20guarantees%20for%20state%20updates%20and%20facilitate%20the%20ability%20to%20verify%20the%20state%20of%20a%20remote%20blockchain%20using%20merkle%20proofs%22%0A%0A%23%23%23%20Utilities%0A%0A-%20%5BExplorer%5D(https%3A%2F%2Fhub.mintscan.io%2Fchains%2Fibc-network)%3A%20Monitoring%20interchain%20activities%20and%20messaging%20in%203D%0A-%20%5BKeplr%5D(https%3A%2F%2Fwww.keplr.app%2F)%3A%20Wallet%20designed%20to%20work%20across%20blockchains%20on%20IBC%20(see%20%5BGetting%20Started%20with%20Cosmos%20IBC%20Transfers%5D(https%3A%2F%2Fcatdotfish.medium.com%2Fgetting-started-with-ibc-transfers-276e9ce91e17))%0A%0A(to%20be%20continued)%0A%0A%5C*%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%20Content%20below%20requires%20significant%20revision%20%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%0A%0A%23%23%20Code%20Review%0A%0AFollowing%20is%20a%20review%20of%20%5Bibc-go%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc-go)%0A%0A%23%23%23%20Signing%20Mechanisms%20from%20%5Bcosmos-sdk%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk)%0A%0A-%20%5Bbcrypt%5D(https%3A%2F%2Fwww.usenix.org%2Flegacy%2Fevent%2Fusenix99%2Fprovos%2Fprovos.pdf)%0A%20%20-%20%5Bcosmos-sdk%20bcrypt%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Fbcrypt)%0A-%20%5Bed25519%5D(https%3A%2F%2Fed25519.cr.yp.to%2Fed25519-20110926.pdf)%0A%20%20-%20%5Bcosmos-sdk%20ed25519%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Fed25519)%0A-%20%5Becdsa%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FElliptic_Curve_Digital_Signature_Algorithm)%0A%20%20-%20%5Bcosmos-sdk%20ecdsa%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Finternal%2Fecdsa)%0A-%20%5Bsecp256k1%5D(https%3A%2F%2Fwww.secg.org%2Fsec2-v2.pdf)%0A%20%20-%20%5Bcosmos-sdk%20secp256k1%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Fsecp256k1)%0A%20%20-%20%5Bsecp256r1%5D(https%3A%2F%2Fwww.secg.org%2Fsec2-v2.pdf)%0A%20%20%20%20-%20%5Bcosmos-sdk%20secp256r1%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Fsecp256r1)%0A%0A-%20%5Bmerkle.go%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc-go%2Fblob%2Fmain%2Fmodules%2Fcore%2F23-commitment%2Ftypes%2Fmerkle.go)%0A%0A%23%23%23%20Proving%20Mechanisms%0A%0A%23%23%23%20Relayer%20Mechanisms%0A%0A-%20%5Be2e%20relayer.go%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc-go%2Fblob%2Fmain%2Fe2e%2Frelayer%2Frelayer.go)%20uses%20%5Bstrangelove-ventures%20interchaintest%20relayer%5D(https%3A%2F%2Fgithub.com%2Fstrangelove-ventures%2Finterchaintest%2Ftree%2Fmain%2Frelayer)%0A%20%20-%20%5Bcosmos-relayer.go%5D(https%3A%2F%2Fgithub.com%2Fstrangelove-ventures%2Finterchaintest%2Fblob%2Fmain%2Frelayer%2Frly%2Fcosmos_relayer.go)%0A%0A%23%23%23%20Light%20Client%20Functionality%0A%0A-%20%5Blight-clients%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc-go%2Ftree%2Fmain%2Fmodules%2Flight-clients)%0A%0A%23%23%23%20Token%20Lockers%0A%0A%23%23%20References%0A%0A%23%23%20Appendices%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./cosmos-ibc-TsYV3jCV.js"),[]),path:"/research/bridge/cosmos-ibc.html",type:"mdx",filePath:"research/bridge/cosmos-ibc.mdx",content:"%23%20Cosmos%20IBC%0A%0A-%20date%3A%202023-02-24%0A-%20last%20updated%3A%202023-04-04%0A%0A%23%23%20Overview%0A%0ACosmos%20is%20a%20network%20of%20the%20many%20blockchains%20built%20on%20IBC%20protocol.%20The%20IBC%20protocol%20is%20a%20universal%20interoperability%20protocol%20that%20allows%20two%20different%20blockchains%20to%20communicate%20with%20one%20another.%20IBC%20guarantees%20reliable%2C%20ordered%2C%20and%20authenticated%20communication.%20See%20%5BCosmos%20Network%20Whitepaper%5D(https%3A%2F%2Fv1.cosmos.network%2Fresources%2Fwhitepaper)%0A%0ABlockchains%20based%20on%20IBC%20protocol%20may%20use%20validity%20based%20proofs%20for%20interchain%20communication.%20See%20%5BIBC%20Protocol%20ELI5%3A%20What%20is%20IBC%3F%5D(https%3A%2F%2Fmedium.com%2Fthe-interchain-foundation%2Feli5-what-is-ibc-def44d7b5b4c)%0A%0A%23%23%23%20Protocol%0A%0A-%20%5BDesign%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc)%3A%20the%20primary%20repository%20for%20development%20and%20documentation%0A-%20%5BDocs%5D(https%3A%2F%2Ftutorials.cosmos.network%2Facademy%2F3-ibc%2F)%3A%20a%20quick%20introduction.%20See%20also%20%5Bibc-go%20documentation%5D(https%3A%2F%2Fibc.cosmos.network%2F)%0A-%20%5BImplementation%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc-go)%3A%20Implementation%20in%20Golang%2C%20built%20as%20a%20Cosmos%20SDK%20module.%0A-%20%5BRoadmap%5D(https%3A%2F%2Fibc.cosmos.network%2Fmain%2Froadmap%2Froadmap.html)%0A%0A%23%23%23%20Bridging%0A%0A-%20%5BRelayer%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Frelayer)%3A%20%22...blockchains%20do%20not%20directly%20pass%20messages%20to%20each%20other%20over%20the%20network.%20This%20is%20where%20relayer%20comes%20in.%20A%20relayer%20process%20monitors%20for%20updates%20on%20opens%20paths%20between%20sets%20of%20IBC%20enabled%20chains...%22%0A-%20%5BLight%20Clients%5D(https%3A%2F%2Fibc.cosmos.network%2Fmain%2Fibc%2Flight-clients%2Foverview.html)%3A%20%22...Light%20clients%20operate%20under%20a%20strict%20set%20of%20rules%20which%20provide%20security%20guarantees%20for%20state%20updates%20and%20facilitate%20the%20ability%20to%20verify%20the%20state%20of%20a%20remote%20blockchain%20using%20merkle%20proofs%22%0A%0A%23%23%23%20Utilities%0A%0A-%20%5BExplorer%5D(https%3A%2F%2Fhub.mintscan.io%2Fchains%2Fibc-network)%3A%20Monitoring%20interchain%20activities%20and%20messaging%20in%203D%0A-%20%5BKeplr%5D(https%3A%2F%2Fwww.keplr.app%2F)%3A%20Wallet%20designed%20to%20work%20across%20blockchains%20on%20IBC%20(see%20%5BGetting%20Started%20with%20Cosmos%20IBC%20Transfers%5D(https%3A%2F%2Fcatdotfish.medium.com%2Fgetting-started-with-ibc-transfers-276e9ce91e17))%0A%0A(to%20be%20continued)%0A%0A%5C*%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%20Content%20below%20requires%20significant%20revision%20%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%0A%0A%23%23%20Code%20Review%0A%0AFollowing%20is%20a%20review%20of%20%5Bibc-go%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc-go)%0A%0A%23%23%23%20Signing%20Mechanisms%20from%20%5Bcosmos-sdk%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk)%0A%0A-%20%5Bbcrypt%5D(https%3A%2F%2Fwww.usenix.org%2Flegacy%2Fevent%2Fusenix99%2Fprovos%2Fprovos.pdf)%0A%20%20-%20%5Bcosmos-sdk%20bcrypt%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Fbcrypt)%0A-%20%5Bed25519%5D(https%3A%2F%2Fed25519.cr.yp.to%2Fed25519-20110926.pdf)%0A%20%20-%20%5Bcosmos-sdk%20ed25519%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Fed25519)%0A-%20%5Becdsa%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FElliptic_Curve_Digital_Signature_Algorithm)%0A%20%20-%20%5Bcosmos-sdk%20ecdsa%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Finternal%2Fecdsa)%0A-%20%5Bsecp256k1%5D(https%3A%2F%2Fwww.secg.org%2Fsec2-v2.pdf)%0A%20%20-%20%5Bcosmos-sdk%20secp256k1%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Fsecp256k1)%0A%20%20-%20%5Bsecp256r1%5D(https%3A%2F%2Fwww.secg.org%2Fsec2-v2.pdf)%0A%20%20%20%20-%20%5Bcosmos-sdk%20secp256r1%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Fsecp256r1)%0A%0A-%20%5Bmerkle.go%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc-go%2Fblob%2Fmain%2Fmodules%2Fcore%2F23-commitment%2Ftypes%2Fmerkle.go)%0A%0A%23%23%23%20Proving%20Mechanisms%0A%0A%23%23%23%20Relayer%20Mechanisms%0A%0A-%20%5Be2e%20relayer.go%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc-go%2Fblob%2Fmain%2Fe2e%2Frelayer%2Frelayer.go)%20uses%20%5Bstrangelove-ventures%20interchaintest%20relayer%5D(https%3A%2F%2Fgithub.com%2Fstrangelove-ventures%2Finterchaintest%2Ftree%2Fmain%2Frelayer)%0A%20%20-%20%5Bcosmos-relayer.go%5D(https%3A%2F%2Fgithub.com%2Fstrangelove-ventures%2Finterchaintest%2Fblob%2Fmain%2Frelayer%2Frly%2Fcosmos_relayer.go)%0A%0A%23%23%23%20Light%20Client%20Functionality%0A%0A-%20%5Blight-clients%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc-go%2Ftree%2Fmain%2Fmodules%2Flight-clients)%0A%0A%23%23%23%20Token%20Lockers%0A%0A%23%23%20References%0A%0A%23%23%20Appendices%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./harmony-horizon-DwJRmzW_.js"),[]),path:"/research/bridge/harmony-horizon",type:"mdx",filePath:"research/bridge/harmony-horizon.mdx",content:"%23%20Harmony%20Horizon%0A%0A-%20date%3A%202023-02-24%0A-%20last%20updated%3A%202023-02-24%0A%0A%23%23%20Overview%0A%0AThis%20document%20reviews%20the%20%5Bhorizon%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2)%20current%20implementation%2C%20development%20tasks%20that%20need%20to%20be%20done%20to%20support%20POW%20and%20offers%20some%20thoughts%20on%20next%20steps%20to%20support%20Ethereum%202.0%20and%20other%20chains.%0A%0AFurther%20thoughs%20on%20ETH%202.0%20support%2C%20removing%20the%20ETHHASH%20logic%20and%20SPV%20client%20and%20potentially%20replacing%20with%20MMR%20trees%20per%20epoch%20and%20checkpoints%20similar%20to%20Harmony%20Light%20Client%20on%20Ethereum%2C%20can%20find%20inspiration%20in%20%5Bnear-rainbow%5D(.%2Fnear-rainbow.mdx).%0A%0A%23%23%20Approach%0A%0AHorizon%202.0%20approach%20is%20to%20use%20validity%20proofs%20implemented%20by%20on-chain%20smart%20contracts.%0A%0A%23%23%20Proving%20Mechanisms%0A%0A%23%23%23%20Ethereum%20Light%20Client%0A%0A1.%20ETH%202.0%20support%20see%20%5Bhere%5D(%2Fresearch%2Fchains%2Fethereum.mdx)%0A2.%20Queuing%20mechanism%20should%20be%20implemented%20to%20queue%20bridge%20transactions.%20The%20queue%20can%20be%20polled%20as%20part%20of%20the%20block%20relay%20functionality%20to%20process%20bridge%20transactions%20once%20the%20blocks%20have%20been%20relayed.%0A3.%20Consider%20whether%20we%20can%20use%20p2p%20messaging%20to%20receive%20published%20blocks%20rather%20than%20looping%20and%20polling%20via%20an%20RPC.%0A%0A%23%23%23%20Harmony%20Light%20Client%0A%0A1.%20Needs%20to%20implement%20a%20process%20to%20%60submitCheckpoint%60.%0A2.%20%60eprove%60%20logic%20needs%20to%20be%20reviewed%0A3.%20Queuing%20mechanism%20should%20be%20implemented%20to%20queue%20bridge%20transactions.%20The%20queue%20can%20be%20polled%20as%20part%20of%20the%20%60submitCheckpoint%60%20functionality%20to%20process%20bridge%20transactions%20once%20the%20blocks%20have%20been%20relayed.%0A4.%20Need%20to%20facilitate%20the%20core%20protocol%20%5BMMR%20enhancements%20PR%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198%2Ffiles)%0A%0A%23%23%20Relayer%20Mechanisms%0A%0ASequencing%20of%20Transactions%3A%20Needs%20to%20be%20implemented%20and%20%60TokenMap%60%20in%20%60bridge.js%60%20needs%20to%20be%20refactored.%20Below%20is%20the%20current%20sequence%20flow%20and%20areas%20for%20improvements.%0A%0A1.%20Ethereum%20Mapping%20Request%0A2.%20Relay%20of%20Block%20to%20EthereumLightClient.sol%20on%20Harmony%0A%20%20%20-%20The%20block%20has%20to%20be%20relayed%20before%20we%20can%20process%20the%20Harmony%20Mapping%20request%2C%20as%20we%20have%20just%20executed%20the%20transaction%20the%20relayer%20usually%20has%20not%20relayed%20the%20block%20so%20this%20will%20fail.%0A%20%20%20-%20There%20must%20be%20an%20additional%2025%20blocks%20on%20Ethereum%20before%20this%20block%20can%20be%20considered%20part%20of%20the%20canonical%20chain.%0A%20%20%20-%20This%20logic%20needs%20to%20be%20rewritten%20to%20break%20down%20execution%20for%201.%20the%20ethereum%20mapping%20request%202.%20After%20a%2025%20block%20delay%20the%20Harmony%20Proof%20validation%20and%20executing%20the%20Harmony%20Mapping%20Request%5C*%5C*%0A3.%20Harmony%20Mapping%20Request%0A4.%20Relay%20of%20Checkpoint%20to%20HarmonyLightClient.sol%20on%20Ethereum%0A%20%20%20-%20A%20%60submitCheckpoint%60%20in%20%60HarmonyLightClient.sol%60%20needs%20to%20have%20called%20either%20for%20the%20next%20epoch%20or%20for%20a%20checkpoint%2C%20after%20the%20block%20the%20harmony%20mapping%20transaction%20was%20in.%5C*%5C*%0A%20%20%20-%20Automatic%20submission%20of%20checkpoints%20to%20the%20Harmony%20Light%20Client%20has%20not%20been%20developed%20as%20yet.%20(It%20is%20not%20part%20of%20the%20%60ethRelay.js%60).%20And%20so%20the%20checkpoint%20would%20need%20to%20be%20manually%20submitted%20before%20the%20Ethereum%20Mapping%20could%20take%20place.%0A5.%20Etherem%20Process%20Harmony%20Mapping%20Acknowledgement%0A%0A%23%23%20Light%20Client%20Functionality%0A%0A%23%23%23%20Ethereum%20Light%20Client%0A%0A1.%20ETH%202.0%20support%20see%20%5Bhere%5D(%2Fresearch%2Fchains%2Fethereum.mdx)%0A2.%20Queuing%20mechanism%20should%20be%20implemented%20to%20queue%20bridge%20transactions.%20The%20queue%20can%20be%20polled%20as%20part%20of%20the%20block%20relay%20functionality%20to%20process%20bridge%20transactions%20once%20the%20blocks%20have%20been%20relayed.%0A3.%20Consider%20whether%20we%20can%20use%20p2p%20messaging%20to%20receive%20published%20blocks%20rather%20than%20looping%20and%20polling%20via%20an%20RPC.%0A%0A%23%23%23%20Harmony%20Light%20Client%0A%0A1.%20Needs%20to%20implement%20a%20process%20to%20%60submitCheckpoint%60.%0A2.%20%60eprove%60%20logic%20needs%20to%20be%20reviewed%0A3.%20Queuing%20mechanism%20should%20be%20implemented%20to%20queue%20bridge%20transactions.%20The%20queue%20can%20be%20polled%20as%20part%20of%20the%20%60submitCheckpoint%60%20functionality%20to%20process%20bridge%20transactions%20once%20the%20blocks%20have%20been%20relayed.%0A4.%20Need%20to%20facilitate%20the%20core%20protocol%20%5BMMR%20enhancements%20PR%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198%2Ffiles)%0A%0A%23%23%20Token%20Lockers%0A%0A_Note%3A%20The%20key%20difference%20between%20%60TokenLockerOnEthereum.sol%60%20and%20%60TokenLockerOnHarmony.sol%60%20is%20the%20proof%20validation.%20%60TokenLockerOnEthereum.sol%60%20uses%20%60.%2Flib%2FMMRVerifier.sol%60%20to%20validate%20the%20%5BMountain%20Merkle%20Ranges%5D(https%3A%2F%2Fgithub.com%2Fopentimestamps%2Fopentimestamps-server%2Fblob%2Fmaster%2Fdoc%2Fmerkle-mountain-range.mdx)%20on%20Harmony%20and%20%60HarmonyProver.sol%60.%20%60TokenLockerOnHarmony.sol%60%20imports%20%60.%2Flib%2FMPTValidatorV2.sol%60%20to%20validate%20%5BMerkle%20Patrica%20Trie%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fpatricia-merkle-trie%2F%23merkle-patricia-trees)%20and%20%60.%2FEthereumLightClient.sol%60._%0A%0A%23%23%23%20MultiChain%20Support%0A%0A1.%20Need%20to%20support%20other%20chains%0A%20%20%20-%20EVM%3A%20BSC%2C%20Polygon%2C%20Avalanche%2C%20Arbitrum%2C%20Optimism%0A%20%20%20-%20Bitcoin%0A%20%20%20-%20NEAR%0A%20%20%20-%20Solana%0A%20%20%20-%20Polkadot%0A%0A%23%23%20Code%20Review%0A%0AThe%20code%20reviewed%20is%20from%20a%20fork%20of%20%5Bharmony-one%2Fhorizon%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fhorizon).%20The%20fork%20is%20%5Bjohnwhitton%2Fhorizon%20branch%20refactorV2%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2).%20This%20is%20part%20of%20the%20horizon%20v2%20initiative%20to%20bride%20a%20trustless%20bridge%20after%20the%20initial%20horizon%20hack.%20The%20code%20is%20incomplete%20and%20the%20original%20codebase%20did%20not%20support%20ethereum%202.0%20(only%20ethereum%201.0).%20Nevertheless%20there%20are%20a%20number%20of%20useful%20components%20developed%20which%20can%20be%20leveraged%20in%20building%20a%20trustless%20bridge.%0A%0A%23%23%20On-chain%20(Solidity)%20Code%20Review%0A%0A_Note%3A%20here%20we%20document%20functionality%20developed%20in%20solidity.%20We%20recommend%20reading%20the%20%5BOpen%20Zeppelin%20Contract%20Documentation%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2F)%20specifically%20the%20%5Butilities%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Futilities)%20have%20a%20number%20of%20utitlies%20we%20leverage%20around%20signing%20and%20proving.%20We%20tend%20to%20utilize%20the%20%5Bopenzeppelin-contracts-upgradeabe%20repository%5D(https%3A%2F%2Fgithub.com%2FOpenZeppelin%2Fopenzeppelin-contracts-upgradeable)%20when%20building%20over%20the%20documented%20%5Bopenzeppelin-contracts%20repository%5D(https%3A%2F%2Fgithub.com%2FOpenZeppelin%2Fopenzeppelin-contracts)%20as%20we%20are%20often%20working%20with%20contracts%20which%20we%20wish%20to%20upgrade%2C%20there%20should%20be%20equivalent%20contracts%20in%20both%20repositories._%0A%0A%23%23%23%20OpenZeppelin%20Utilities%0A%0A-%20%5BUtilities%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils)%3A%20Miscellaneous%20contracts%20and%20libraries%20containing%20utility%20functions%20you%20can%20use%20to%20improve%20security%2C%20work%20with%20new%20data%20types%2C%20or%20safely%20use%20low-level%20primitives.%0A%20%20-%20%5BMath%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23math)%3A%20Standard%20math%20utilities%20missing%20in%20the%20Solidity%20language.%0A%20%20-%20%5BCryptography%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23cryptography)%0A%20%20%20%20-%20%5BECDSA%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23ECDSA)%3A%20Elliptic%20Curve%20Digital%20Signature%20Algorithm%20(ECDSA)%20operations.%0A%20%20%20%20-%20%5BSignatureChecker%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23SignatureChecker)%3A%20Signature%20verification%20helper%20that%20can%20be%20used%20instead%20of%20ECDSA.recover%20to%20seamlessly%20support%20both%20ECDSA%20signatures%20from%20externally%20owned%20accounts%20(EOAs)%20as%20well%20as%20ERC1271%20signatures%20from%20smart%20contract%20wallets%20like%20Argent%20and%20Gnosis%20Safe.%0A%20%20%20%20-%20%5BMerkleProof%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23MerkleProof)%3A%20These%20functions%20deal%20with%20verification%20of%20Merkle%20Tree%20proofs.%0A%20%20%20%20-%20%5BEIP712%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23EIP712)%3A%20%5BEIP%20712%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712)%20is%20a%20standard%20for%20hashing%20and%20signing%20of%20typed%20structured%20data.%0A%20%20-%20%5BEscrow%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23escrow)%3A%20Base%20escrow%20contract%2C%20holds%20funds%20designated%20for%20a%20payee%20until%20they%20withdraw%20them.%0A%20%20-%20%5BIntrospection%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23introspection)%3A%20This%20set%20of%20interfaces%20and%20contracts%20deal%20with%20%5Btype%20introspection%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FType_introspection)%20of%20contracts%2C%20that%20is%2C%20examining%20which%20functions%20can%20be%20called%20on%20them.%20This%20is%20usually%20referred%20to%20as%20a%20contract%E2%80%99s%20_interface_.%0A%20%20-%20%5BData%20Structures%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23data_structures)%0A%20%20%20%20-%20%5BBitMaps%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23BitMaps)%3A%20Library%20for%20managing%20uint256%20to%20bool%20mapping%20in%20a%20compact%20and%20efficient%20way%2C%20providing%20the%20keys%20are%20sequential.%20Largely%20inspired%20by%20Uniswap%E2%80%99s%20%5Bmerkle-distributor%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Fmerkle-distributor%2Fblob%2Fmaster%2Fcontracts%2FMerkleDistributor.sol).%0A%20%20%20%20-%20%5BEnumerableMap%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23EnumerableMap)%3A%20Library%20for%20managing%20an%20enumerable%20variant%20of%20Solidity%E2%80%99s%20%5Bmapping%5D(https%3A%2F%2Fsolidity.readthedocs.io%2Fen%2Flatest%2Ftypes.html%23mapping-types)%20type.%0A%20%20%20%20-%20%5BEnumerableSet%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23EnumerableSet)%3A%20Library%20for%20managing%20%5Bsets%5D(%3Chttps%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSet_(abstract_data_type)%3E)%20of%20primitive%20types.%0A%20%20%20%20-%20%5BDoubleEndedQueue%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23DoubleEndedQueue)%3A%20A%20sequence%20of%20items%20with%20the%20ability%20to%20efficiently%20push%20and%20pop%20items%20(i.e.%20insert%20and%20remove)%20on%20both%20ends%20of%20the%20sequence%20(called%20front%20and%20back).%0A%20%20%20%20-%20%5BCheckpoints%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23Checkpoints)%3A%20This%20library%20defines%20the%20%60History%60%20struct%2C%20for%20checkpointing%20values%20as%20they%20change%20at%20different%20points%20in%20time%2C%20and%20later%20looking%20up%20past%20values%20by%20block%20number.%20See%20%5BVotes%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Fgovernance%23Votes)%20as%20an%20example.%0A%20%20-%20%5BLibraries%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Fgovernance%23Votes)%0A%20%20%20%20-%20%5BCreate2%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23Create2)%3A%20Helper%20to%20make%20usage%20of%20the%20%60CREATE2%60%20EVM%20opcode%20easier%20and%20safer.%0A%20%20%20%20-%20%5BAddress%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23Address)%3A%20Collection%20of%20functions%20related%20to%20the%20address%20type%0A%20%20%20%20-%20%5BArrays%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23Arrays)%3A%20Collection%20of%20functions%20related%20to%20array%20types.%0A%20%20%20%20-%20%5BBase64%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23Base64)%3A%20Provides%20a%20set%20of%20functions%20to%20operate%20with%20Base64%20strings.%0A%20%20%20%20-%20%5BCounters%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23Counters)%3A%20Provides%20counters%20that%20can%20only%20be%20incremented%2C%20decremented%20or%20reset.%0A%20%20%20%20-%20%5BStrings%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23Strings)%3A%20String%20operations.%0A%20%20%20%20-%20%5BStorageSlot%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23StorageSlot)%3A%20Library%20for%20reading%20and%20writing%20primitive%20types%20to%20specific%20storage%20slots.%20Storage%20slots%20are%20often%20used%20to%20avoid%20storage%20conflict%20when%20dealing%20with%20upgradeable%20contracts.%0A%20%20%20%20-%20%5BMulticall%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23Multicall)%3A%20Provides%20a%20function%20to%20batch%20together%20multiple%20calls%20in%20a%20single%20external%20call.%0A%0A%23%23%23%20Cryptographic%20Primitives%0A%0A-%20%5Bethash%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fcontracts%2Fethash)%3A%20used%20in%20proving%20ethereum%201.0%20%5Bethash%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fcontracts%2Fethash)%20proof%20of%20work.%0A%20%20-%20%5BMerkleRoot.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Fethash%2FMerkelRoot.sol)%3A%20provides%20the%20ability%20to%20getRootHash%20for%20a%20given%20epoch.%20Needs%20to%20be%20initialized%20with%20a%20start%20and%20end%20epoch%20and%20an%20initial%20merkle%20root.%0A%20%20-%20%5BPrime.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Fethash%2FPrime.sol)%3A%20Determins%20if%20a%20number%20is%20likely%20to%20be%20prime%2C%20based%20on%20the%20%5BMiller-Rabin%20primality%20test%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FMiller%25E2%2580%2593Rabin_primality_test)%0A%20%20-%20%5Bbinary.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Fethash%2Fbinary.sol)%3A%20Binary%20number%20manipulation.%0A%20%20-%20%5Bethash.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Fethash%2Fethash.sol)%3A%20Provides%20the%20ability%20to%20verifyHash%20using%20a%20%5Bhashimto%20function%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fconsensus-mechanisms%2Fpow%2Fmining-algorithms%2Fdagger-hashimoto%2F)%20and%20%5Bfnv%20hashing%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FFowler%25E2%2580%2593Noll%25E2%2580%2593Vo_hash_function).%0A%20%20-%20%5Bkecakk512.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Fethash%2Fkeccak512.sol)%3A%20Keccak512%20hash%20function%20supporting%20%5BSHA-3%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSHA-3).%0A-%20%5Blib%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fcontracts%2Flib)%3A%20utility%20library%0A%20%20-%20%5BECVerify.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FECVerify.sol)%3A%20Verify's%20a%20signature%20and%20returns%20the%20signer%20address.%0A%20%20-%20%5BEthUtils%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FEthUtils.sol)%3A%20hexString%20and%20byte%20manipulation%0A%20%20-%20%5BMMR.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FMMR.sol)%3A%20Merkle%20Mountain%20Range%20solidity%20library%0A%20%20-%20%5BMMRWrapper.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FMMRWrapper.sol)%3A%20Merkle%20Mountain%20Range%20wrapper%20functions.%0A%20%20-%20%5BMPT.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FMPT.sol)%3A%20Merkle%20Patricie%20Tries%20validation%20tools%20(uses%20RLPReader.sol)%0A%20%20-%20%5BMPTValidatorV2.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FMPTValidatorV2.sol)%3A%20Merkle%20Particia%20Tries%20validation%20tools%20improved%20by%20LayerZero%0A%20%20-%20%5BRLPEncode.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FRLPEncode.sol)%3A%20A%20simple%20RLP%20encoding%20library.%0A%20%20-%20%5BRLPReader.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FRLPReader.sol)%3A%20RLP%20Reader%0A%20%20-%20%5BSafecast.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FSafeCast.sol)%3A%20Safe%20casting%20function%20for%20Uints.%0A%0A%23%23%23%20Proving%20Mechanisms%0A%0A**Ethereum%201.0%20contracts%20deployed%20to%20Harmony**%0A%0A-%20%5BEthereumLightClient.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FEthereumLightClient.sol)%3A%20Light%20Client%20for%20Ethereum%201.0%2C%20stores%20a%20mapping%20of%20blocks%20existing%20in%20the%20Canonical%20Chain%20verified%20using%20EthHash.%0A-%20%5BEthereumParser.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FEthereumParser.sol)%3A%20Parse%20RLP-encoded%20block%20header%20into%20BlockHeader%20data%20structure%20and%20transactions%20with%20data%20fields%20order%20as%20defined%20in%20the%20Tx%20struct.%0A-%20%5BEthereumProver.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FEthereumProver.sol)%3A%20Computes%20the%20hash%20of%20the%20Merkle-Patricia-Trie%20hash%20of%20the%20input%20and%20Validates%20a%20Merkle-Patricia-Trie%20proof.%20If%20the%20proof%20proves%20the%20inclusion%20of%20some%20key-value%20pair%20in%20the%20trie%2C%20the%20value%20is%20returned.%0A%0A**Harmony%20contracts%20deployed%20to%20Ethereum%201.0**%0A%0A_Note%20these%20contracts%20were%20planned%20to%20be%20implemented%20with%20Harmony%20Light%20Client%20support%20which%20includes%20Merkle%20Mountain%20Ranges%20(see%20this%20%5BPR%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F3872)%20and%20this%20%5Breview%5D(..%2Fchains%2Fharmony%23light-client-support)).%20The%20planned%20timeline%20for%20implementing%20this%20had%20not%20been%20finalized%20as%20of%20Feb%202023._%0A%0A-%20%5BHarmonyLightClient.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FHarmonyLightClient.sol)%3A%20Allows%20submission%20of%20checkpoints%20and%20manages%20mappings%20for%20%60checkPointBlocks%60%20(holding%20blockHeader%20information%20including%20the%20Merkle%20Mountain%20Range%20Root%20field%20%60mmrRoot%60).%0A-%20%5BHarmonyParser.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FHarmonyParser.sol)%3A%20Parse%20RLP-encoded%20block%20header%20into%20BlockHeader%20data%20structure%20and%20transactions%20with%20data%20fields%20order%20as%20defined%20in%20the%20Transaction%20struct.%0A-%20%5BHarmonyProver.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FHarmonyProver.sol)%3A%20Verification%20functions%20for%20Blocks%2C%20Transaction%2C%20Receipts%20etc.%20Verification%20is%20done%20by%20verifying%20MerkleProofs%20via%20%60MPTValidator2.sol%60.%0A%0A%23%23%23%20Token%20Lockers%0A%0A-%20%5BBridgeToken.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FBridgedToken.sol)%3A%20ERC20%20contract%20used%20for%20managing%20bridged%20tokens.%0A-%20%5BFaucetToken.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FFaucetToken.sol)%3A%20ERC20%20Token%20Faucet%20used%20for%20testing%20on%20testnets.%0A-%20%5BTokenLocker.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FTokenLocker.sol)%3A%20Locks%20Bridged%20Tokens%0A-%20%5BTokenLockerOnEthereum.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FTokenLockerOnEthereum.sol)%3A%20Ethereum%20TokenLocker%0A-%20%5BTokenLockerOnHarmony.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FTokenLockerOnHarmony.sol)%3A%20Harmony%20TokenLocker%0A-%20%5BTokenRegistry.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FTokenRegistry.sol)%3A%20Responsible%20for%20mapping%20tokens%20between%20chains%20and%20minting%20new%20bridged%20tokens.%0A%0A%23%23%20Off-chain%20(Javascript)%20Code%20Review%0A%0A%23%23%23%20On-chain%20interaction%0A%0A-%20%5Bbridge%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fsrc%2Fbridge)%0A%20%20-%20%5Bbridge.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fbridge%2Fbridge.js)%3A%20Interacts%20with%20provers%20and%20tokenLockers%20on%20the%20respective%20chains%20to%20perform%20the%20bridging%20of%20tokens%20across%20chains.%0A%20%20-%20%5Bcontract.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fbridge%2Fcontract.js)%3A%20Responsible%20for%20deploying%20contracts%2C%20mapping%20tokens%20between%20chains%20and%20checking%20token%20status.%0A%20%20-%20%5BethBridge.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fbridge%2FethBridge.js)%3A%20extends%20bridge.js%20with%20a%20constructor%20for%20Ethereum%0A%20%20-%20%5BhmyBridge.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fbridge%2FhmyBridge.js)%3A%20extens%20bridge.js%20with%20a%20constructor%20for%20Harmony%0A%20%20-%20%5Btoken.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fbridge%2Ftoken.js)%3A%20interacts%20with%20ERC20%20and%20FaucetToken%20(for%20testing).%0A%20%20-%20%5Bindex.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fcli%2Findex.js)%3A%20Command%20Line%20Interface%20commands.%0A%0A%23%23%23%20Command%20Line%20Interface%0A%0A-%20%5Bcli%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fsrc%2Fcli)%3A%20CLI%20is%20a%20utility%20that%20provides%20a%20command-line%20interface%20to%20all%20the%20components%20to%20the%20Horizon%20bridge%20and%20allow%20performing%20end-to-end%20bridge%20functionalities.%0A%20%20-%20%5Belsc.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fcli%2Felc.js)%3A%20Ethereum%20Light%20Client%20deployed%20on%20Harmony.%20Supports%20deployment%2C%20status%20checks%20and%20querying%20block%20information.%0A%20%20-%20%5BethRelay.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fcli%2FethRelay.js)%3A%20Block%20Relayer%20from%20Ethereum%20to%20Harmony%0A%20%20-%20%5Beverifier.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fcli%2Feverifier.js)%3A%20Ethereum%20Verifier%20for%20Harmony.%20Supports%20the%20deployment%20of%20the%20verifier%20and%20validating%20Merkle%20Patricia%20Trie%20proofs%20from%20Harmony.%0A%20%20-%20%5Bindex.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fcli%2Findex.js)%3A%20Commands%20for%20the%20CLI.%0A%0A%23%23%23%20Ethereum%20Light%20Client%0A%0A-%20%5Belc%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Felc%2FREADME.mdx)%3A%20Ethereum%20Light%20Client%20(ELC)%20is%20a%20SPV-based%20light%20client%20implemented%20as%20a%20smart%20contract%20that%20receives%20and%20stores%20Ethereum%20block%20header%20information.%0A%20%20-%20%5BMerkleRoot.json%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Felc%2FMerkelRoot.json)%3A%20Holds%20starting%20epoch%20and%20Merkle%20root%20information.%0A%20%20-%20%5BMerkleRootSol.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Felc%2FMerkelRootSol.js)%3A%20Deploys%20a%20MerkleRoot.sol%20contract%20on%20Harmony%20for%20the%20given%20Ethereum%20epoch%20and%20merkle%20root%20information.%0A%20%20-%20%5Bclient.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Felc%2Fclient.js)%3A%20Interaction%20with%20the%20Client.sol%20(the%20Ethereum%20Light%20Client%20deployed%20on%20Harmony).%0A%20%20-%20%5Beth2one.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Felc%2Feth2one-relay.js)%3A%20Relays%20blocks%20from%20ethereum%20to%20Harmony.%0A%20%20-%20%5BproofDump%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Felc%2FproofDump.js)%3A%20Allows%20logging%20of%20dagProofs%20for%20blocks%20and%20epochs%20and%20writing%20them%20to%20files.%0A%0A%23%23%23%20Proving%20Mechanisms%0A%0A**Ethereum%20Prover**%0A%0A-%20%5Beprover%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fsrc%2Feprover)%3A%20EProver%20is%20a%20utility%20that%20provides%20verifiable%20proof%20about%20user%E2%80%99s%20Ethereum%20tx%2C%20e.g.%2C%20lock%20tx.%0A%20%20-%20%5BReceipt.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feprover%2FReceipt.js)%3A%20Allows%20retreival%20of%20a%20receipt%20from%20Rpc%2C%20buffer%20or%20hex%20and%20serailiation%20of%20receipt.%0A%20%20-%20%5Bindex.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feprover%2Findex.js)%3A%20exports%20Eprover%0A%20%20-%20%5BtxProof.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feprover%2FtxProof.js)%3A%20Takes%20a%20transaction%20hash%20and%20gets%20a%20receipt%20proof%20(sha3%20hash%2C%20recieptRoor%2C%20proof%20and%20an%20encoded%20txIndex).%0A%0A%23%23%23%20Relayer%20Mechanisms%0A%0A**Ethereum%20to%20Harmony%20Relayer**%0A%0A-%20%5Beth2hmy-relay%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fsrc%2Feth2hmy-relay)%3A%20Eth2Hmy%20relay%20downloads%20the%20Ethereum%20block%20headers%2C%20extract%20information%20and%20relay%20it%20to%20ELC%20smart%20contract%20on%20Harmony.%0A%20%20-%20%5Bindex.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Findex.js)%3A%20exports%20%60DagProof%60%20and%20%60getBlockByNumber%60.%0A%20%20-%20%5Bethash%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Fethash)%0A%20%20%20%20-%20%5Bindex.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Fethash%2Fdist%2Findex.js)%3A%20Loads%20the%20epoch%20seed%20and%20cache%20given%20a%20block%20number%20and%20uses%20this%20to%20verify%20Proof%20of%20Work%20for%20headers%20and%20blocks.%0A%20%20%20%20-%20%5Butil.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Fethash%2Fdist%2Futil.js)%3A%20Utilities%20for%20epochs%20including%20caching%2C%20hashing%20and%20retreival%20of%20seeds%20and%20buffers.%0A%0A%23%23%23%20Cryptographic%20Primitives%0A%0A-%20%5Beth2hmy-relay%2Flib%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Flib)%3A%20Library%20of%20functions%20used%20by%20the%20Ethereum%20to%20Harmony%20Relay%0A%20%20-%20%5BDagPropf.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Flib%2FDagProof.js)%3A%20Checks%20if%20a%20dag%20exists%20for%20an%20epoch%2C%20loads%20DAG%20for%20an%20epoch%20and%20verify%20header%20and%20getProof%20using%20the%20epoch's%20DAG.%0A%20%20-%20%5BMmapDB.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Flib%2FMmapDB.js)%3A%20Merkle%20database%20functionality%20by%20extending%20Memory%20Map.%0A%20%20-%20%5BgetBlockHeader.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Flib%2FgetBlockHeader.js)%3A%20Get%20Block%20information.%0A%20%20-%20%5Bmerkel.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Flib%2Fmerkel.js)%3A%20MerkleTree%20functionality%20including%20construction%20of%20MerkleTrees%20and%20getting%20proofs%2C%20hex%20proofs%2C%20combined%20hashes%2C%20get%20Paired%20Elements%20and%20layers.%0A-%20%5BethashProof%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fsrc%2FethashProof)%3A%20ethash%20proving%20mechanisms%0A%20%20-%20%5BBlockProof.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2FethashProof%2FBlockProof.js)%3A%20Exports%20getHeaderProof%2C%20parseRlpHeader%2C%20getBlockByNumber%0A%20%20-%20%5BDagMTreeEpoch.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2FethashProof%2FDagMtreeEpoch.js)%3A%20Exports%20generateDagMTree%2C%20genearateDagMTreeRange%0A%20%20-%20%5BMerkelRootSol.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2FethashProof%2FMerkelRootSol.js)%3A%20Creates%20a%20MerkleRoot.sol%20contract%20for%20an%20inputted%20merkleInfo.%0A-%20%5Blib%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fsrc%2Flib)%0A%20%20-%20%5Bconfigure.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Flib%2Fconfigure.js)%3A%20Configure%20TokenLocker%20and%20Faucet%20contracts.%0A%20%20-%20%5BethEthers.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Flib%2FethEthers.js)%3A%20Shim%20over%20%5Bethers%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fethers)%20allowing%20the%20instantiation%20of%20connections%20using%20a%20configured%20private%20key.%0A%20%20-%20%5Blogger.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Flib%2Flogger.js)%3A%20Logging%20Functions%0A%20%20-%20%5Butils.ts%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Flib%2Futils.ts)%3A%20Utility%20functions%20including%20(buffer2hex%2C%20rpcWrapper%2C%20toRLPHeader%2C%20getReceiptLight%2C%20getReceipt%2C%20getReceiptRlp%2C%20getReceiptTrie%2Chex2key%2Cindex2key%2C%20expandkey%2C%20getReceiptProof%2C%20getTransactionProof%2C%20getAccountProof%2C%20getStorageProof%2C%20getKeyFromProof%2C%20fullToMin)%0A%0A**npm%20packages**%0A%0A-%20%5B%40ethereumjs%2Fblock%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40ethereumjs%2Fblock)%3A%20Implements%20schema%20and%20functions%20related%20to%20Ethereum's%20block.%20(Ethereum%201.0%20or%20Execution%20Chain%20for%20Ethereum%202.0)%0A-%20%5Bethereumjs-util%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fethereumjs-util)%3A%20A%20collection%20of%20utility%20functions%20for%20Ethereum.%20It%20can%20be%20used%20in%20Node.js%20and%20in%20the%20browser%20with%20browserify.%0A-%20%5Bethers%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fethers)%3A%20A%20complete%2C%20compact%20and%20simple%20library%20for%20Ethereum%20and%20ilk%2C%20written%20in%20TypeScript.%0A-%0A-%20%5Bmiller-rabin%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fmiller-rabin)%3A%20implements%20%5BMiller%20Rabin%20primality%20test%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FMiller%25E2%2580%2593Rabin_primality_test)%0A-%20%5Bmmap-io%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fmmap-io)%3A%20Memory%20Map%20for%20node.js%0A-%20%5Bsha3%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fsha3)%3A%20A%20pure%20JavaScript%20implementation%20of%20the%20Keccak%20family%20of%20cryptographic%20hashing%20algorithms%2C%20most%20notably%20including%20Keccak%20and%20SHA3.%0A-%0A%0A%23%23%23%20Light%20Client%20Functionality%0A%0A%23%23%23%20Token%20Lockers%0A%0A%23%23%20References%0A%0A%23%23%20Appendices%0A%0A%23%23%23%20Appendix%20A%3A%20Current%20Implementation%20Walkthough%0A%0AFollowing%20is%20a%20detailed%20walk%20though%20of%20the%20current%20implementation%20of%20the%20Ethereum%20Light%20Client%20and%20the%20flow%20for%20mapping%20tokens%20from%20Ethereum%20to%20Harmony.%0A%0A%23%23%23%23%20Ethereum%20Light%20Client%20(on%20Harmony)%0A%0A**Design**%0AExisting%20Design%0A%0A1.%20DAG%20is%20generated%20for%20each%20Ethereum%20EPOCH%3A%20This%20takes%20a%20couple%20of%20hours%20and%20has%20a%20size%20of%20approx%201GB.%0A2.%20Relayer%20is%20run%20to%20replicate%20each%20block%20header%20to%20the%20SPV%20Client%20on%20Harmony.%0A3.%20EthereumLightClient.sol%20addBlockHeader%3A%20Adds%20each%20block%20header%20to%20the%20Ethereum%20Light%20Client.%0A4.%20Transactions%20are%20Verified%0A%0A**Running%20the%20Relayer**%0A%0A%60%60%60%0A%23%20Start%20the%20relayer%20(note%3A%20replace%20the%20etherum%20light%20client%20address%20below)%0A%23%20relay%20%5Boptions%5D%20%3CethUrl%3E%20%3ChmyUrl%3E%20%3CelcAddress%3E%20%20%20relay%20eth%20block%20header%20to%20elc%20on%20hmy%0A%20yarn%20cli%20ethRelay%20relay%20http%3A%2F%2Flocalhost%3A8645%20http%3A%2F%2Flocalhost%3A9500%200x3Ceb74A902dc5fc11cF6337F68d04cB834AE6A22%0A%60%60%60%0A%0A**Implementation**%0A%0A1.%20DAG%20Generation%20can%20be%20done%20explicity%20by%20calling%20%60dagProve%60%20from%20the%20CLI%20or%20it%20is%20done%20automatically%20by%20%60getHeaderProof%60%20in%20%60ethHashProof%2FBlockProof.js%60%20which%20is%20called%20from%20%60blockRelay%60%20in%20%60cli%2FethRelay.js%60.%0A2.%20Relaying%20of%20Block%20Headers%20is%20done%20by%20%60blockRelayLoop%60%20in%20%60cli%2FethRelay.js%60%20which%0A%20%20%20-%20Reads%20the%20last%20block%20header%20from%20EthereumLightClient.sol%0A%20%20%20-%20Loops%20through%20calling%20an%20Ethereum%20RPC%20per%20block%20to%20retrieve%20the%20blockHeader%20using%20%60return%20eth.getBlock(blockNo).then(fromRPC)%60%20in%20function%20%60getBlockByNumber%60%20in%20%60eth2hmy-relay%2FgetBlockHeader.js%60%0A3.%20Adding%20BlockHeaders%20is%20done%20by%20%60await%20elc.addBlockHeader(rlpHeader%2C%20proofs.dagData%2C%20proofs.proofs)%60%20which%20is%20called%20from%20%60cli%2FethRelay.js%60.%20%60addBlockHeader%60%20in%20%60EthereumLightClient.sol%60%0A%20%20%20-%20calculates%20the%20blockHeader%20Hash%0A%20%20%20-%20and%20checks%20that%20it%0A%20%20%20%20%20-%20hasn't%20already%20been%20relayed%2C%0A%20%20%20%20%20-%20is%20the%20next%20block%20to%20be%20added%2C%0A%20%20%20%20%20-%20has%20a%20valid%20timestamp%0A%20%20%20%20%20-%20has%20a%20valid%20difficulty%0A%20%20%20%20%20-%20has%20a%20valid%20Proof%20of%20Work%20(POW)%0A%20%20%20-%20Check%20if%20the%20canonical%20chain%20needs%20to%20be%20replaced%20by%20another%20fork%0A%0A%23%23%23%20Mapping%20Tokens%20(Ethereum%20to%20Harmony)%0A%0A**Design**%0A%0A1.%20If%20the%20Token%20Has%20not%20already%20been%20mapped%20on%20Harmony%0A%20%20%20-%20Harmony%3A%20Create%20an%20ERC20%20Token%0A%20%20%20-%20Harmony%3A%20Map%20the%20Ethereum%20Token%20to%20the%20new%20ERC20%20Contract%0A%20%20%20-%20Ethereum%3A%20Validate%20the%20Harmony%20Mapping%20Transaction%0A%20%20%20-%20Ethereum%3A%20Map%20the%20Harmony%20ERC20%20token%20to%20the%20existing%20Ethereum%20Token%0A%20%20%20-%20Harmony%3A%20Validate%20the%20Ethereum%20mapping%20Transaction%0A%0A_Note%3A%20The%20key%20difference%20between%20%60TokenLockerOnEthereum.sol%60%20and%20%60TokenLockerOnHarmony.sol%60%20is%20the%20proof%20validation.%20%60TokenLockerOnEthereum.sol%60%20uses%20%60.%2Flib%2FMMRVerifier.sol%60%20to%20validate%20the%20%5BMountain%20Merkle%20Ranges%5D(https%3A%2F%2Fgithub.com%2Fopentimestamps%2Fopentimestamps-server%2Fblob%2Fmaster%2Fdoc%2Fmerkle-mountain-range.mdx)%20on%20Harmony%20and%20%60HarmonyProver.sol%60.%20%60TokenLockerOnHarmony.sol%60%20imports%20%60.%2Flib%2FMPTValidatorV2.sol%60%20to%20validate%20%5BMerkle%20Patrica%20Trie%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fpatricia-merkle-trie%2F%23merkle-patricia-trees)%20and%20%60.%2FEthereumLightClient.sol%60._%0A%0A_Note%3A%20%60validateAndExecuteProof%60%20is%20responsible%20for%20creation%20of%20the%20BridgeTokens%20on%20the%20destination%20chain%20it%20does%20this%20by%20calling%20%60execute%60%20call%20in%20%60TokenLockerLocker.sol%60%20which%20then%20calls%20the%20function%20%60onTokenMapReqEvent%60%20in%20%60TokenRegistry.sol%60%20which%20creates%20a%20new%20Bridge%20Token%20%60BridgedToken%20mintAddress%20%3D%20new%20BridgedToken%7Bsalt%3A%20salt%7D()%3B%60%20and%20then%20initializes%20it.%20This%20uses%20%5B(RLP)%20Serialization%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Frlp%2F)_%0A%0A_Note%3A%20The%20shims%20in%20%60ethWeb3.js%60%20provide%20simplified%20functions%20for%20%60ContractAt%60%2C%20%60ContractDeploy%60%2C%20%60sendTx%60%20and%20%60addPrivateKey%60%20and%20have%20a%20constructor%20which%20uses%20%60process.env.PRIVATE_KEY%60._%0A%0A**Mapping%20the%20Tokens**%0A%0A%60%60%60%0A%23%20Map%20the%20Tokens%0A%23%20map%20%3CethUrl%3E%20%3CethBridge%3E%20%3ChmyUrl%3E%20%3ChmyBridge%3E%20%3Ctoken%3E%0Ayarn%20cli%20Bridge%20map%20http%3A%2F%2Flocalhost%3A8645%200x017f8C7d1Cb04dE974B8aC1a6B8d3d74bC74E7E1%20http%3A%2F%2Flocalhost%3A9500%200x017f8C7d1Cb04dE974B8aC1a6B8d3d74bC74E7E1%200x4e59AeD3aCbb0cb66AF94E893BEE7df8B414dAB1%0A%60%60%60%0A%0A**Implementation**%0A%0A-%20The%20CLI%20calls%20%60tokenMap%60%20in%20%60src%2Fbridge%2Fcontract.js%60%20to%0A%20%20-%20Instantiate%20the%20Ethereum%20Bridge%20and%20Harmony%20Bridge%20Contracts%0A%20%20-%20Calls%20%60TokenMap%60%20in%20%60scr%2Fbridge%2Fbridge.js%60%20to%0A%20%20%20%20-%20Issue%20a%20token%20Map%20request%20on%20Ethereum%20%60const%20mapReq%20%3D%20await%20src.IssueTokenMapReq(token)%60%0A%20%20%20%20-%20Acknowledge%20the%20Map%20Request%20on%20Harmony%20%60const%20mapAck%20%3D%20await%20Bridge.CrossRelayEthHmy(src%2C%20dest%2C%20mapReq)%60%0A%20%20%20%20-%20Issue%20a%20token%20Map%20request%20on%20Harmony%20%60return%20Bridge.CrossRelayHmyEth(dest%2C%20src%2C%20mapAck.transactionHash)%60%0A%0A**Here%20is%20the%20Logic%20(call%20execution%20overview)%20when%20Mapping%20Tokens%20across%20Chains.%20_NOTE%3A%20Currently%20mapping%20has%20only%20been%20developed%20from%20Ethereum%20to%20Harmony%20(not%20bi-directional)_.**%0A%0A1.%20Bridge%20Map%20is%20called%20in%20src.cli.index.js%20and%20it%20calls%20%60tokenMap%60%20in%20%60bridge%2Fcontract.js%60%20which%0A%20%20%20-%20Get%20srcBridge%20Contract%20on%20Ethereum%20%60TokenLockerOnEthereum.sol%60%20from%20%60ethBridge.js%60%20it%20also%20instantiates%20an%20%60eprover%60%20using%20%60tools%2Feprover%2Findex.js%60%20which%20calls%20%60txProof.js%60%20which%20uses%20%5Beth-proof%20npm%20package%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Feth-proof).%20_Note%3A%20this%20is%20marked%20with%20a%20%2F%2FTODO%20need%20to%20test%20and%20develop%20proving%20logic%20on%20Harmony._%0A%20%20%20-%20Get%20destBridge%20Contract%20on%20Hamony%20%60TokenLockerOnHarmony.sol%60%20from%20%60hmyBridge.js%60%20it%20also%20instantiates%20an%20%60hprove%60%20using%20%60tools%2Feprover%2Findex.js%60%20which%20calls%20%60txProof.js%60%20which%20uses%20%5Beth-proof%20npm%20package%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Feth-proof).%0A%20%20%20-%20calls%20%60TokenMap%60%20in%20%60bridge.js%60%0A2.%20%60TokenMap%60%20Calls%20IssueTokenMapReq%20(on%20the%20Ethreum%20Locker)%20returning%20the%20%60mapReq.transactionHash%60%0A%20%20%20-%20%60IssueTokenMapReq(token)%60%20is%20held%20in%20%60bridge.js%60%20as%20part%20of%20the%20bridge%20class%0A%20%20%20-%20It%20calls%20%60issueTokenMapReq%60%20on%20%60TokenLockerOnEthereum.sol%60%20which%20is%20implemented%20by%20%60TokenRegistry.sol%60%0A%20%20%20-%20%60issueTokenMapReq%60%20checks%20if%20the%20token%20has%20already%20been%20mapped%20if%20not%20it%20was%20emitting%20a%20%60TokenMapReq%60%20with%20the%20details%20of%20the%20token%20to%20be%20mapped.%20However%20this%20was%20commented%20out%20as%20it%20was%20felt%20that%2C%20if%20it%20has%20not%20been%20mapped%2C%20we%20use%20the%20%60transactionHash%60%20of%20the%20mapping%20request%60%20to%20drive%20the%20logic%20below%20(not%20the%20event).%0A3.%20%60TokenMap%60%20calls%20%60Bridge.CrossRelay%60%20with%20the%20IssueTokenMapReq.hash%20to%0A%20%20%20-%20gets%20the%20proof%20of%20the%20transaction%20on%20Ethereum%20via%20%60getProof%60%20calling%20%60prover.ReceiptProof%60%20which%20calls%20the%20eprover%20and%20returns%20%60proof%60%20with%0A%20%20%20%20%20-%20%60hash%3A%20sha3(resp.header.serialize())%2C%60%0A%20%20%20%20%20-%20%60root%3A%20resp.header.receiptRoot%2C%60%0A%20%20%20%20%20-%20%60proof%3A%20encode(resp.receiptProof)%2C%60%0A%20%20%20%20%20-%20%60key%3A%20encode(Number(resp.txIndex))%20%2F%2F%20'0x12'%20%3D%3E%20Nunmber%60%0A%20%20%20-%20We%20then%20call%20%60dest.ExecProof(proof)%60%20to%20execute%20the%20proof%20on%20Harmony%0A%20%20%20%20%20-%20This%20calls%20%60validateAndExecuteProof%60%20on%20%60TokenLockerOnHarmony.sol%60%20with%20the%20%60proofData%60%20from%20above%2C%20which%0A%20%20%20%20%20%20%20-%20requires%20%60lightclient.VerifyReceiptsHash(blockHash%2C%20rootHash)%2C%60%20implemented%20by%20%60.%2FEthereumLightClient.sol%60%0A%20%20%20%20%20%20%20%20%20-%20This%20returns%20%60return%20bytes32(blocks%5Buint256(blockHash)%5D.receiptsRoot)%20%3D%3D%20receiptsHash%3B%60%0A%20%20%20%20%20%20%20%20%20-%20**Which%20means%20the%20block%20has%20to%20be%20relayed%20first%2C%20as%20we%20have%20just%20executed%20the%20transaction%20the%20relayer%20usually%20has%20not%20relayed%20the%20block%20so%20this%20will%20fail**%0A%20%20%20%20%20%20%20-%20requires%20%60lightclient.isVerified(uint256(blockHash)%60%20implemented%20by%20%60.%2FEthereumLightClient.sol%60%0A%20%20%20%20%20%20%20%20%20-%20This%20returns%20%60return%20canonicalBlocks%5BblockHash%5D%20%26%26%20blocks%5BblockHash%5D.number%20%2B%2025%20%3C%20blocks%5BcanonicalHead%5D.number%3B%60%0A%20%20%20%20%20%20%20%20%20-%20**Which%20means%20there%20must%20be%20an%20additional%2025%20blocks%20on%20Ethereum%20before%20this%20can%20be%20processed.%20This%20logic%20needs%20to%20be%20rewritten%20to%20break%20down%20execution%20for%201.%20the%20ethereum%20mapping%20request%202.%20After%20a%2025%20block%20delay%20the%20Harmony%20Proof%20validation%20and%20executing%20the%20Harmony%20Mapping%20Request**%0A%20%20%20%20%20%20%20-%20%60require(spentReceipt%5BreceiptHash%5D%20%3D%3D%20false%2C%20%22double%20spent!%22)%3B%60%20to%20ensure%20that%20we%20haven't%20already%20executed%20this%20proof%0A%20%20%20%20%20%20%20-%20gets%20the%20%60rlpdata%60%20using%20%60EthereumProver.validateMPTProof%60%20implemented%20by%20%60EthereumProver.sol%60%20which%0A%20%20%20%20%20%20%20%20%20-%20Validates%20a%20Merkle-Patricia-Trie%20proof.%0A%20%20%20%20%20%20%20%20%20-%20Returns%20a%20value%20whose%20inclusion%20is%20proved%20or%20an%20empty%20byte%20array%20for%20a%20proof%20of%20exclusion%0A%20%20%20%20%20%20%20-%20marks%20%60spentReceipt%5BreceiptHash%5D%20%3D%20true%3B%60%0A%20%20%20%20%20%20%20-%20%60execute(rlpdata)%60%20implemented%20by%20%60TokenLocker.sol%60%20which%20calls%20%60onTokenMapReqEvent(topics%2C%20Data)%60%20implemented%20by%20%60TokenRegistry.sol%60%0A%20%20%20%20%20%20%20%20%20-%20%60address%20tokenReq%20%3D%20address(uint160(uint256(topics%5B1%5D)))%3B%60%20gets%20the%20address%20of%20the%20token%20to%20be%20mapped.%0A%20%20%20%20%20%20%20%20%20-%20require%20%60address(RxMapped%5BtokenReq%5D)%20%3D%3D%20address(0)%60%20that%20the%20token%20has%20not%20already%20been%20mapped.%0A%20%20%20%20%20%20%20%20%20-%20%60address(RxMapped%5BtokenReq%5D)%20%3D%3D%20address(0)%60%20creates%20a%20new%20BridgedToken%20implemented%20by%20%60BridgedToken.sol%60%0A%20%20%20%20%20%20%20%20%20%20%20-%20%60contract%20BridgedToken%20is%20ERC20Upgradeable%2C%20ERC20BurnableUpgradeable%2C%20OwnableUpgradeable%60%20it%20is%20a%20standard%20openzepplin%20ERC20%20Burnable%2C%20Ownable%2C%20Upgradeable%20token%0A%20%20%20%20%20%20%20%20%20-%20%60mintAddress.initialize%60%20initialize%20the%20token%20with%20the%20same%20%60name%60%2C%20%60symbol%60%20and%20%60decimals%60%20as%20the%20ethereum%20bridged%20token%0A%20%20%20%20%20%20%20%20%20-%20%60RxMappedInv%5Baddress(mintAddress)%5D%20%3D%20tokenReq%3B%60%20updates%20the%20inverse%20Key%20Value%20Mapping%0A%20%20%20%20%20%20%20%20%20-%20%60RxMapped%5BtokenReq%5D%20%3D%20mintAddress%3B%60%20updates%20the%20Ethereum%20mapped%20tokens%0A%20%20%20%20%20%20%20%20%20-%20%60RxTokens.push(mintAddress)%3B%60%20add%20the%20newly%20created%20token%20to%20a%20list%20of%20bridged%20tokens%0A%20%20%20%20%20%20%20%20%20-%20%60emit%20TokenMapAck(tokenReq%2C%20address(mintAddress))%3B%60%0A%20%20%20%20%20%20%20-%20%60require(executedEvents%20%3E%200%2C%20%22no%20valid%20event%22)%60%20to%20check%20if%20it%20executed%20the%20mapping%20correctly.%0A4.%20We%20then%20take%20the%20Harmony%20Mapping%20%60transactionHash%60%20and%20repeat%20the%20above%20process%20to%20prove%20the%20Harmony%20mapping%20acknowledgment%20on%20Ethereum%20(Cross%20Relay%20second%20call)%20%60return%20Bridge.CrossRelay(dest%2C%20src%2C%20mapAck.transactionHash)%3B%60%0A%0A-%20gets%20the%20proof%20of%20the%20transaction%20on%20Harmony%20via%20%60getProof%60%20calling%20%60prover.ReceiptProof%60%20which%20calls%20the%20eprover%20and%20returns%20%60proof%60%20with%0A%20%20_%60hash%3A%20sha3(resp.header.serialize())%2C%60%0A%20%20_%20%60root%3A%20resp.header.receiptRoot%2C%60%0A%20%20_%60proof%3A%20encode(resp.receiptProof)%2C%60%0A%20%20_%20%60key%3A%20encode(Number(resp.txIndex))%20%2F%2F%20'0x12'%20%3D%3E%20Nunmber%60%0A%20%20-%20We%20then%20call%20%60dest.ExecProof(proof)%60%20to%20execute%20the%20proof%20on%20Ethereum%0A%20%20%20%20-%20This%20calls%20%60validateAndExecuteProof%60%20on%20%60TokenLokerOnEthereum.sol%60%20with%20the%20%60proofData%60%20from%20above%2C%20which%0A%20%20%20%20%20%20-%20%60require(lightclient.isValidCheckPoint(header.epoch%2C%20mmrProof.root)%2C%60%20implemented%20by%20%60HarmonyLightClient.sol%60%0A%20%20%20%20%20%20%20%20-%20%60return%20epochMmrRoots%5Bepoch%5D%5BmmrRoot%5D%60%20which%20means%20that%20the%20epoch%20has%20to%20have%20had%20a%20checkpoint%20submitted%20via%20%60submitCheckpoint%60%0A%20%20%20%20%20%20-%20%60bytes32%20blockHash%20%3D%20HarmonyParser.getBlockHash(header)%3B%60%20gets%20the%20blockHash%20implemented%20by%20%60HarmonyParser.sol%60%0A%20%20%20%20%20%20%20%20-%20This%20returns%20%60return%20keccak256(getBlockRlpData(header))%3B%60%0A%20%20%20%20%20%20%20%20-%20%60getBlockRlpData%60%20creates%20a%20list%20%60bytes%5B%5D%20memory%20list%20%3D%20new%20bytes%5B%5D(15)%3B%60%20and%20uses%20statements%20like%20%60list%5B0%5D%20%3D%20RLPEncode.encodeBytes(abi.encodePacked(header.parentHash))%3B%60%20to%20perform%20%5BRecursive-Length%20Prefix%20(RLP)%20Serialization%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Frlp%2F)%20implemented%20by%20%60RLPEncode.sol%60%0A%20%20%20%20%20%20-%20%60HarmonyProver.verifyHeader(header%2C%20mmrProof)%3B%60%20verifys%20the%20header%20implemented%20by%20%60HarmonyProver.sol%60%0A%20%20%20%20%20%20%20%20-%20%60bytes32%20blockHash%20%3D%20HarmonyParser.getBlockHash(header)%3B%60%20gets%20the%20blockHash%20implemented%20by%20%60HarmonyParser.sol%60%20as%20above%0A%20%20%20%20%20%20%20%20-%20%60valid%20%3D%20MMRVerifier.inclusionProof(proof.root%2C%20proof.width%2C%20proof.index%2C%20blockHash%2C%20proof.peaks%2C%20proof.siblings)%3B%60%20verifys%20the%20proff%20using%20the%20%5BMerkle%20Mountain%20Range%20Proof%5D(https%3A%2F%2Fgithub.com%2Fopentimestamps%2Fopentimestamps-server%2Fblob%2Fmaster%2Fdoc%2Fmerkle-mountain-range.mdx)%20passed%20%60MMRVerifier.MMRProof%20memory%20proof%60%20and%20the%20%60blockHash%60.%0A%20%20%20%20%20%20%20%20-%20**NOTE%3A%20This%20means%20that%20a%20%60submitCheckpoint%60%20in%20%60HarmonyLightClient.sol%60%20needs%20to%20have%20called%20either%20for%20the%20next%20epoch%20or%20for%20a%20checkpoint%2C%20after%20the%20block%20the%20harmony%20mapping%20transaction%20was%20in.**%0A%20%20%20%20%20%20%20%20-%20**NOTE%3A%20Automatic%20submission%20of%20checkpoints%20to%20the%20Harmony%20Light%20Client%20has%20not%20been%20developed%20as%20yet.%20(It%20is%20not%20part%20of%20the%20%60ethRelay.js%60).%20And%20so%20the%20checkpoint%20would%20need%20to%20be%20manually%20submitted%20before%20the%20Ethereum%20Mapping%20could%20take%20place.**%0A%20%20%20%20%20%20-%20%60require(spentReceipt%5BreceiptHash%5D%20%3D%3D%20false%2C%20%22double%20spent!%22)%3B%60%20ensure%20that%20we%20haven't%20already%20processed%20this%20mapping%20request%60%0A%20%20%20%20%20%20-%20%60HarmonyProver.verifyReceipt(header%2C%20receiptdata)%60%20ensure%20the%20receiptdata%20is%20valid%0A%20%20%20%20%20%20-%20%60spentReceipt%5BreceiptHash%5D%20%3D%20true%3B%60%20marks%20the%20receipt%20as%20having%20been%20processed%0A%20%20%20%20%20%20-%20%60execute(receiptdata.expectedValue)%3B%60%20implemented%20by%20%60TokenLocker.sol%60%20which%20calls%20%60onTokenMapAckEvent(topics)%60%20implemented%20by%20%60TokenRegistry.sol%60%0A%20%20%20%20%20%20%20%20-%20%60address%20tokenReq%20%3D%20address(uint160(uint256(topics%5B1%5D)))%3B%60%0A%20%20%20%20%20%20%20%20-%20%60address%20tokenAck%20%3D%20address(uint160(uint256(topics%5B2%5D)))%3B%60%0A%20%20%20%20%20%20%20%20-%20%60require(TxMapped%5BtokenReq%5D%20%3D%3D%20address(0)%2C%20%22missing%20mapping%20to%20acknowledge%22)%3B%60%0A%20%20%20%20%20%20%20%20-%20%60TxMapped%5BtokenReq%5D%20%3D%20tokenAck%3B%60%0A%20%20%20%20%20%20%20%20-%20%60TxMappedInv%5BtokenAck%5D%20%3D%20IERC20Upgradeable(tokenReq)%3B%60%0A%20%20%20%20%20%20%20%20-%20%60TxTokens.push(IERC20Upgradeable(tokenReq))%3B%60%0A%0A5.%20Upon%20completion%20of%20tokenMap%20control%20is%20passed%20back%20to%20Bridge%20Map%20which%0A6.%20Calls%20TokenPair%20on%20Ethereum%0A7.%20Calls%20ethTokenInfo%20to%20get%20the%20status%20of%20the%20ERC20%0A8.%20Calls%20hmyTokenInfo%20to%20get%20the%20tokenStatus%20on%20Harmony%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./harmony-horizon-DwJRmzW_.js"),[]),path:"/research/bridge/harmony-horizon.html",type:"mdx",filePath:"research/bridge/harmony-horizon.mdx",content:"%23%20Harmony%20Horizon%0A%0A-%20date%3A%202023-02-24%0A-%20last%20updated%3A%202023-02-24%0A%0A%23%23%20Overview%0A%0AThis%20document%20reviews%20the%20%5Bhorizon%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2)%20current%20implementation%2C%20development%20tasks%20that%20need%20to%20be%20done%20to%20support%20POW%20and%20offers%20some%20thoughts%20on%20next%20steps%20to%20support%20Ethereum%202.0%20and%20other%20chains.%0A%0AFurther%20thoughs%20on%20ETH%202.0%20support%2C%20removing%20the%20ETHHASH%20logic%20and%20SPV%20client%20and%20potentially%20replacing%20with%20MMR%20trees%20per%20epoch%20and%20checkpoints%20similar%20to%20Harmony%20Light%20Client%20on%20Ethereum%2C%20can%20find%20inspiration%20in%20%5Bnear-rainbow%5D(.%2Fnear-rainbow.mdx).%0A%0A%23%23%20Approach%0A%0AHorizon%202.0%20approach%20is%20to%20use%20validity%20proofs%20implemented%20by%20on-chain%20smart%20contracts.%0A%0A%23%23%20Proving%20Mechanisms%0A%0A%23%23%23%20Ethereum%20Light%20Client%0A%0A1.%20ETH%202.0%20support%20see%20%5Bhere%5D(%2Fresearch%2Fchains%2Fethereum.mdx)%0A2.%20Queuing%20mechanism%20should%20be%20implemented%20to%20queue%20bridge%20transactions.%20The%20queue%20can%20be%20polled%20as%20part%20of%20the%20block%20relay%20functionality%20to%20process%20bridge%20transactions%20once%20the%20blocks%20have%20been%20relayed.%0A3.%20Consider%20whether%20we%20can%20use%20p2p%20messaging%20to%20receive%20published%20blocks%20rather%20than%20looping%20and%20polling%20via%20an%20RPC.%0A%0A%23%23%23%20Harmony%20Light%20Client%0A%0A1.%20Needs%20to%20implement%20a%20process%20to%20%60submitCheckpoint%60.%0A2.%20%60eprove%60%20logic%20needs%20to%20be%20reviewed%0A3.%20Queuing%20mechanism%20should%20be%20implemented%20to%20queue%20bridge%20transactions.%20The%20queue%20can%20be%20polled%20as%20part%20of%20the%20%60submitCheckpoint%60%20functionality%20to%20process%20bridge%20transactions%20once%20the%20blocks%20have%20been%20relayed.%0A4.%20Need%20to%20facilitate%20the%20core%20protocol%20%5BMMR%20enhancements%20PR%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198%2Ffiles)%0A%0A%23%23%20Relayer%20Mechanisms%0A%0ASequencing%20of%20Transactions%3A%20Needs%20to%20be%20implemented%20and%20%60TokenMap%60%20in%20%60bridge.js%60%20needs%20to%20be%20refactored.%20Below%20is%20the%20current%20sequence%20flow%20and%20areas%20for%20improvements.%0A%0A1.%20Ethereum%20Mapping%20Request%0A2.%20Relay%20of%20Block%20to%20EthereumLightClient.sol%20on%20Harmony%0A%20%20%20-%20The%20block%20has%20to%20be%20relayed%20before%20we%20can%20process%20the%20Harmony%20Mapping%20request%2C%20as%20we%20have%20just%20executed%20the%20transaction%20the%20relayer%20usually%20has%20not%20relayed%20the%20block%20so%20this%20will%20fail.%0A%20%20%20-%20There%20must%20be%20an%20additional%2025%20blocks%20on%20Ethereum%20before%20this%20block%20can%20be%20considered%20part%20of%20the%20canonical%20chain.%0A%20%20%20-%20This%20logic%20needs%20to%20be%20rewritten%20to%20break%20down%20execution%20for%201.%20the%20ethereum%20mapping%20request%202.%20After%20a%2025%20block%20delay%20the%20Harmony%20Proof%20validation%20and%20executing%20the%20Harmony%20Mapping%20Request%5C*%5C*%0A3.%20Harmony%20Mapping%20Request%0A4.%20Relay%20of%20Checkpoint%20to%20HarmonyLightClient.sol%20on%20Ethereum%0A%20%20%20-%20A%20%60submitCheckpoint%60%20in%20%60HarmonyLightClient.sol%60%20needs%20to%20have%20called%20either%20for%20the%20next%20epoch%20or%20for%20a%20checkpoint%2C%20after%20the%20block%20the%20harmony%20mapping%20transaction%20was%20in.%5C*%5C*%0A%20%20%20-%20Automatic%20submission%20of%20checkpoints%20to%20the%20Harmony%20Light%20Client%20has%20not%20been%20developed%20as%20yet.%20(It%20is%20not%20part%20of%20the%20%60ethRelay.js%60).%20And%20so%20the%20checkpoint%20would%20need%20to%20be%20manually%20submitted%20before%20the%20Ethereum%20Mapping%20could%20take%20place.%0A5.%20Etherem%20Process%20Harmony%20Mapping%20Acknowledgement%0A%0A%23%23%20Light%20Client%20Functionality%0A%0A%23%23%23%20Ethereum%20Light%20Client%0A%0A1.%20ETH%202.0%20support%20see%20%5Bhere%5D(%2Fresearch%2Fchains%2Fethereum.mdx)%0A2.%20Queuing%20mechanism%20should%20be%20implemented%20to%20queue%20bridge%20transactions.%20The%20queue%20can%20be%20polled%20as%20part%20of%20the%20block%20relay%20functionality%20to%20process%20bridge%20transactions%20once%20the%20blocks%20have%20been%20relayed.%0A3.%20Consider%20whether%20we%20can%20use%20p2p%20messaging%20to%20receive%20published%20blocks%20rather%20than%20looping%20and%20polling%20via%20an%20RPC.%0A%0A%23%23%23%20Harmony%20Light%20Client%0A%0A1.%20Needs%20to%20implement%20a%20process%20to%20%60submitCheckpoint%60.%0A2.%20%60eprove%60%20logic%20needs%20to%20be%20reviewed%0A3.%20Queuing%20mechanism%20should%20be%20implemented%20to%20queue%20bridge%20transactions.%20The%20queue%20can%20be%20polled%20as%20part%20of%20the%20%60submitCheckpoint%60%20functionality%20to%20process%20bridge%20transactions%20once%20the%20blocks%20have%20been%20relayed.%0A4.%20Need%20to%20facilitate%20the%20core%20protocol%20%5BMMR%20enhancements%20PR%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198%2Ffiles)%0A%0A%23%23%20Token%20Lockers%0A%0A_Note%3A%20The%20key%20difference%20between%20%60TokenLockerOnEthereum.sol%60%20and%20%60TokenLockerOnHarmony.sol%60%20is%20the%20proof%20validation.%20%60TokenLockerOnEthereum.sol%60%20uses%20%60.%2Flib%2FMMRVerifier.sol%60%20to%20validate%20the%20%5BMountain%20Merkle%20Ranges%5D(https%3A%2F%2Fgithub.com%2Fopentimestamps%2Fopentimestamps-server%2Fblob%2Fmaster%2Fdoc%2Fmerkle-mountain-range.mdx)%20on%20Harmony%20and%20%60HarmonyProver.sol%60.%20%60TokenLockerOnHarmony.sol%60%20imports%20%60.%2Flib%2FMPTValidatorV2.sol%60%20to%20validate%20%5BMerkle%20Patrica%20Trie%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fpatricia-merkle-trie%2F%23merkle-patricia-trees)%20and%20%60.%2FEthereumLightClient.sol%60._%0A%0A%23%23%23%20MultiChain%20Support%0A%0A1.%20Need%20to%20support%20other%20chains%0A%20%20%20-%20EVM%3A%20BSC%2C%20Polygon%2C%20Avalanche%2C%20Arbitrum%2C%20Optimism%0A%20%20%20-%20Bitcoin%0A%20%20%20-%20NEAR%0A%20%20%20-%20Solana%0A%20%20%20-%20Polkadot%0A%0A%23%23%20Code%20Review%0A%0AThe%20code%20reviewed%20is%20from%20a%20fork%20of%20%5Bharmony-one%2Fhorizon%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fhorizon).%20The%20fork%20is%20%5Bjohnwhitton%2Fhorizon%20branch%20refactorV2%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2).%20This%20is%20part%20of%20the%20horizon%20v2%20initiative%20to%20bride%20a%20trustless%20bridge%20after%20the%20initial%20horizon%20hack.%20The%20code%20is%20incomplete%20and%20the%20original%20codebase%20did%20not%20support%20ethereum%202.0%20(only%20ethereum%201.0).%20Nevertheless%20there%20are%20a%20number%20of%20useful%20components%20developed%20which%20can%20be%20leveraged%20in%20building%20a%20trustless%20bridge.%0A%0A%23%23%20On-chain%20(Solidity)%20Code%20Review%0A%0A_Note%3A%20here%20we%20document%20functionality%20developed%20in%20solidity.%20We%20recommend%20reading%20the%20%5BOpen%20Zeppelin%20Contract%20Documentation%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2F)%20specifically%20the%20%5Butilities%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Futilities)%20have%20a%20number%20of%20utitlies%20we%20leverage%20around%20signing%20and%20proving.%20We%20tend%20to%20utilize%20the%20%5Bopenzeppelin-contracts-upgradeabe%20repository%5D(https%3A%2F%2Fgithub.com%2FOpenZeppelin%2Fopenzeppelin-contracts-upgradeable)%20when%20building%20over%20the%20documented%20%5Bopenzeppelin-contracts%20repository%5D(https%3A%2F%2Fgithub.com%2FOpenZeppelin%2Fopenzeppelin-contracts)%20as%20we%20are%20often%20working%20with%20contracts%20which%20we%20wish%20to%20upgrade%2C%20there%20should%20be%20equivalent%20contracts%20in%20both%20repositories._%0A%0A%23%23%23%20OpenZeppelin%20Utilities%0A%0A-%20%5BUtilities%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils)%3A%20Miscellaneous%20contracts%20and%20libraries%20containing%20utility%20functions%20you%20can%20use%20to%20improve%20security%2C%20work%20with%20new%20data%20types%2C%20or%20safely%20use%20low-level%20primitives.%0A%20%20-%20%5BMath%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23math)%3A%20Standard%20math%20utilities%20missing%20in%20the%20Solidity%20language.%0A%20%20-%20%5BCryptography%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23cryptography)%0A%20%20%20%20-%20%5BECDSA%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23ECDSA)%3A%20Elliptic%20Curve%20Digital%20Signature%20Algorithm%20(ECDSA)%20operations.%0A%20%20%20%20-%20%5BSignatureChecker%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23SignatureChecker)%3A%20Signature%20verification%20helper%20that%20can%20be%20used%20instead%20of%20ECDSA.recover%20to%20seamlessly%20support%20both%20ECDSA%20signatures%20from%20externally%20owned%20accounts%20(EOAs)%20as%20well%20as%20ERC1271%20signatures%20from%20smart%20contract%20wallets%20like%20Argent%20and%20Gnosis%20Safe.%0A%20%20%20%20-%20%5BMerkleProof%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23MerkleProof)%3A%20These%20functions%20deal%20with%20verification%20of%20Merkle%20Tree%20proofs.%0A%20%20%20%20-%20%5BEIP712%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23EIP712)%3A%20%5BEIP%20712%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712)%20is%20a%20standard%20for%20hashing%20and%20signing%20of%20typed%20structured%20data.%0A%20%20-%20%5BEscrow%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23escrow)%3A%20Base%20escrow%20contract%2C%20holds%20funds%20designated%20for%20a%20payee%20until%20they%20withdraw%20them.%0A%20%20-%20%5BIntrospection%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23introspection)%3A%20This%20set%20of%20interfaces%20and%20contracts%20deal%20with%20%5Btype%20introspection%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FType_introspection)%20of%20contracts%2C%20that%20is%2C%20examining%20which%20functions%20can%20be%20called%20on%20them.%20This%20is%20usually%20referred%20to%20as%20a%20contract%E2%80%99s%20_interface_.%0A%20%20-%20%5BData%20Structures%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23data_structures)%0A%20%20%20%20-%20%5BBitMaps%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23BitMaps)%3A%20Library%20for%20managing%20uint256%20to%20bool%20mapping%20in%20a%20compact%20and%20efficient%20way%2C%20providing%20the%20keys%20are%20sequential.%20Largely%20inspired%20by%20Uniswap%E2%80%99s%20%5Bmerkle-distributor%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Fmerkle-distributor%2Fblob%2Fmaster%2Fcontracts%2FMerkleDistributor.sol).%0A%20%20%20%20-%20%5BEnumerableMap%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23EnumerableMap)%3A%20Library%20for%20managing%20an%20enumerable%20variant%20of%20Solidity%E2%80%99s%20%5Bmapping%5D(https%3A%2F%2Fsolidity.readthedocs.io%2Fen%2Flatest%2Ftypes.html%23mapping-types)%20type.%0A%20%20%20%20-%20%5BEnumerableSet%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23EnumerableSet)%3A%20Library%20for%20managing%20%5Bsets%5D(%3Chttps%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSet_(abstract_data_type)%3E)%20of%20primitive%20types.%0A%20%20%20%20-%20%5BDoubleEndedQueue%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23DoubleEndedQueue)%3A%20A%20sequence%20of%20items%20with%20the%20ability%20to%20efficiently%20push%20and%20pop%20items%20(i.e.%20insert%20and%20remove)%20on%20both%20ends%20of%20the%20sequence%20(called%20front%20and%20back).%0A%20%20%20%20-%20%5BCheckpoints%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23Checkpoints)%3A%20This%20library%20defines%20the%20%60History%60%20struct%2C%20for%20checkpointing%20values%20as%20they%20change%20at%20different%20points%20in%20time%2C%20and%20later%20looking%20up%20past%20values%20by%20block%20number.%20See%20%5BVotes%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Fgovernance%23Votes)%20as%20an%20example.%0A%20%20-%20%5BLibraries%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Fgovernance%23Votes)%0A%20%20%20%20-%20%5BCreate2%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23Create2)%3A%20Helper%20to%20make%20usage%20of%20the%20%60CREATE2%60%20EVM%20opcode%20easier%20and%20safer.%0A%20%20%20%20-%20%5BAddress%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23Address)%3A%20Collection%20of%20functions%20related%20to%20the%20address%20type%0A%20%20%20%20-%20%5BArrays%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23Arrays)%3A%20Collection%20of%20functions%20related%20to%20array%20types.%0A%20%20%20%20-%20%5BBase64%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23Base64)%3A%20Provides%20a%20set%20of%20functions%20to%20operate%20with%20Base64%20strings.%0A%20%20%20%20-%20%5BCounters%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23Counters)%3A%20Provides%20counters%20that%20can%20only%20be%20incremented%2C%20decremented%20or%20reset.%0A%20%20%20%20-%20%5BStrings%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23Strings)%3A%20String%20operations.%0A%20%20%20%20-%20%5BStorageSlot%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23StorageSlot)%3A%20Library%20for%20reading%20and%20writing%20primitive%20types%20to%20specific%20storage%20slots.%20Storage%20slots%20are%20often%20used%20to%20avoid%20storage%20conflict%20when%20dealing%20with%20upgradeable%20contracts.%0A%20%20%20%20-%20%5BMulticall%5D(https%3A%2F%2Fdocs.openzeppelin.com%2Fcontracts%2F4.x%2Fapi%2Futils%23Multicall)%3A%20Provides%20a%20function%20to%20batch%20together%20multiple%20calls%20in%20a%20single%20external%20call.%0A%0A%23%23%23%20Cryptographic%20Primitives%0A%0A-%20%5Bethash%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fcontracts%2Fethash)%3A%20used%20in%20proving%20ethereum%201.0%20%5Bethash%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fcontracts%2Fethash)%20proof%20of%20work.%0A%20%20-%20%5BMerkleRoot.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Fethash%2FMerkelRoot.sol)%3A%20provides%20the%20ability%20to%20getRootHash%20for%20a%20given%20epoch.%20Needs%20to%20be%20initialized%20with%20a%20start%20and%20end%20epoch%20and%20an%20initial%20merkle%20root.%0A%20%20-%20%5BPrime.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Fethash%2FPrime.sol)%3A%20Determins%20if%20a%20number%20is%20likely%20to%20be%20prime%2C%20based%20on%20the%20%5BMiller-Rabin%20primality%20test%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FMiller%25E2%2580%2593Rabin_primality_test)%0A%20%20-%20%5Bbinary.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Fethash%2Fbinary.sol)%3A%20Binary%20number%20manipulation.%0A%20%20-%20%5Bethash.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Fethash%2Fethash.sol)%3A%20Provides%20the%20ability%20to%20verifyHash%20using%20a%20%5Bhashimto%20function%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fconsensus-mechanisms%2Fpow%2Fmining-algorithms%2Fdagger-hashimoto%2F)%20and%20%5Bfnv%20hashing%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FFowler%25E2%2580%2593Noll%25E2%2580%2593Vo_hash_function).%0A%20%20-%20%5Bkecakk512.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Fethash%2Fkeccak512.sol)%3A%20Keccak512%20hash%20function%20supporting%20%5BSHA-3%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSHA-3).%0A-%20%5Blib%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fcontracts%2Flib)%3A%20utility%20library%0A%20%20-%20%5BECVerify.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FECVerify.sol)%3A%20Verify's%20a%20signature%20and%20returns%20the%20signer%20address.%0A%20%20-%20%5BEthUtils%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FEthUtils.sol)%3A%20hexString%20and%20byte%20manipulation%0A%20%20-%20%5BMMR.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FMMR.sol)%3A%20Merkle%20Mountain%20Range%20solidity%20library%0A%20%20-%20%5BMMRWrapper.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FMMRWrapper.sol)%3A%20Merkle%20Mountain%20Range%20wrapper%20functions.%0A%20%20-%20%5BMPT.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FMPT.sol)%3A%20Merkle%20Patricie%20Tries%20validation%20tools%20(uses%20RLPReader.sol)%0A%20%20-%20%5BMPTValidatorV2.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FMPTValidatorV2.sol)%3A%20Merkle%20Particia%20Tries%20validation%20tools%20improved%20by%20LayerZero%0A%20%20-%20%5BRLPEncode.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FRLPEncode.sol)%3A%20A%20simple%20RLP%20encoding%20library.%0A%20%20-%20%5BRLPReader.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FRLPReader.sol)%3A%20RLP%20Reader%0A%20%20-%20%5BSafecast.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FSafeCast.sol)%3A%20Safe%20casting%20function%20for%20Uints.%0A%0A%23%23%23%20Proving%20Mechanisms%0A%0A**Ethereum%201.0%20contracts%20deployed%20to%20Harmony**%0A%0A-%20%5BEthereumLightClient.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FEthereumLightClient.sol)%3A%20Light%20Client%20for%20Ethereum%201.0%2C%20stores%20a%20mapping%20of%20blocks%20existing%20in%20the%20Canonical%20Chain%20verified%20using%20EthHash.%0A-%20%5BEthereumParser.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FEthereumParser.sol)%3A%20Parse%20RLP-encoded%20block%20header%20into%20BlockHeader%20data%20structure%20and%20transactions%20with%20data%20fields%20order%20as%20defined%20in%20the%20Tx%20struct.%0A-%20%5BEthereumProver.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FEthereumProver.sol)%3A%20Computes%20the%20hash%20of%20the%20Merkle-Patricia-Trie%20hash%20of%20the%20input%20and%20Validates%20a%20Merkle-Patricia-Trie%20proof.%20If%20the%20proof%20proves%20the%20inclusion%20of%20some%20key-value%20pair%20in%20the%20trie%2C%20the%20value%20is%20returned.%0A%0A**Harmony%20contracts%20deployed%20to%20Ethereum%201.0**%0A%0A_Note%20these%20contracts%20were%20planned%20to%20be%20implemented%20with%20Harmony%20Light%20Client%20support%20which%20includes%20Merkle%20Mountain%20Ranges%20(see%20this%20%5BPR%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F3872)%20and%20this%20%5Breview%5D(..%2Fchains%2Fharmony%23light-client-support)).%20The%20planned%20timeline%20for%20implementing%20this%20had%20not%20been%20finalized%20as%20of%20Feb%202023._%0A%0A-%20%5BHarmonyLightClient.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FHarmonyLightClient.sol)%3A%20Allows%20submission%20of%20checkpoints%20and%20manages%20mappings%20for%20%60checkPointBlocks%60%20(holding%20blockHeader%20information%20including%20the%20Merkle%20Mountain%20Range%20Root%20field%20%60mmrRoot%60).%0A-%20%5BHarmonyParser.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FHarmonyParser.sol)%3A%20Parse%20RLP-encoded%20block%20header%20into%20BlockHeader%20data%20structure%20and%20transactions%20with%20data%20fields%20order%20as%20defined%20in%20the%20Transaction%20struct.%0A-%20%5BHarmonyProver.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FHarmonyProver.sol)%3A%20Verification%20functions%20for%20Blocks%2C%20Transaction%2C%20Receipts%20etc.%20Verification%20is%20done%20by%20verifying%20MerkleProofs%20via%20%60MPTValidator2.sol%60.%0A%0A%23%23%23%20Token%20Lockers%0A%0A-%20%5BBridgeToken.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FBridgedToken.sol)%3A%20ERC20%20contract%20used%20for%20managing%20bridged%20tokens.%0A-%20%5BFaucetToken.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FFaucetToken.sol)%3A%20ERC20%20Token%20Faucet%20used%20for%20testing%20on%20testnets.%0A-%20%5BTokenLocker.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FTokenLocker.sol)%3A%20Locks%20Bridged%20Tokens%0A-%20%5BTokenLockerOnEthereum.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FTokenLockerOnEthereum.sol)%3A%20Ethereum%20TokenLocker%0A-%20%5BTokenLockerOnHarmony.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FTokenLockerOnHarmony.sol)%3A%20Harmony%20TokenLocker%0A-%20%5BTokenRegistry.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FTokenRegistry.sol)%3A%20Responsible%20for%20mapping%20tokens%20between%20chains%20and%20minting%20new%20bridged%20tokens.%0A%0A%23%23%20Off-chain%20(Javascript)%20Code%20Review%0A%0A%23%23%23%20On-chain%20interaction%0A%0A-%20%5Bbridge%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fsrc%2Fbridge)%0A%20%20-%20%5Bbridge.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fbridge%2Fbridge.js)%3A%20Interacts%20with%20provers%20and%20tokenLockers%20on%20the%20respective%20chains%20to%20perform%20the%20bridging%20of%20tokens%20across%20chains.%0A%20%20-%20%5Bcontract.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fbridge%2Fcontract.js)%3A%20Responsible%20for%20deploying%20contracts%2C%20mapping%20tokens%20between%20chains%20and%20checking%20token%20status.%0A%20%20-%20%5BethBridge.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fbridge%2FethBridge.js)%3A%20extends%20bridge.js%20with%20a%20constructor%20for%20Ethereum%0A%20%20-%20%5BhmyBridge.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fbridge%2FhmyBridge.js)%3A%20extens%20bridge.js%20with%20a%20constructor%20for%20Harmony%0A%20%20-%20%5Btoken.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fbridge%2Ftoken.js)%3A%20interacts%20with%20ERC20%20and%20FaucetToken%20(for%20testing).%0A%20%20-%20%5Bindex.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fcli%2Findex.js)%3A%20Command%20Line%20Interface%20commands.%0A%0A%23%23%23%20Command%20Line%20Interface%0A%0A-%20%5Bcli%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fsrc%2Fcli)%3A%20CLI%20is%20a%20utility%20that%20provides%20a%20command-line%20interface%20to%20all%20the%20components%20to%20the%20Horizon%20bridge%20and%20allow%20performing%20end-to-end%20bridge%20functionalities.%0A%20%20-%20%5Belsc.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fcli%2Felc.js)%3A%20Ethereum%20Light%20Client%20deployed%20on%20Harmony.%20Supports%20deployment%2C%20status%20checks%20and%20querying%20block%20information.%0A%20%20-%20%5BethRelay.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fcli%2FethRelay.js)%3A%20Block%20Relayer%20from%20Ethereum%20to%20Harmony%0A%20%20-%20%5Beverifier.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fcli%2Feverifier.js)%3A%20Ethereum%20Verifier%20for%20Harmony.%20Supports%20the%20deployment%20of%20the%20verifier%20and%20validating%20Merkle%20Patricia%20Trie%20proofs%20from%20Harmony.%0A%20%20-%20%5Bindex.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Fcli%2Findex.js)%3A%20Commands%20for%20the%20CLI.%0A%0A%23%23%23%20Ethereum%20Light%20Client%0A%0A-%20%5Belc%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Felc%2FREADME.mdx)%3A%20Ethereum%20Light%20Client%20(ELC)%20is%20a%20SPV-based%20light%20client%20implemented%20as%20a%20smart%20contract%20that%20receives%20and%20stores%20Ethereum%20block%20header%20information.%0A%20%20-%20%5BMerkleRoot.json%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Felc%2FMerkelRoot.json)%3A%20Holds%20starting%20epoch%20and%20Merkle%20root%20information.%0A%20%20-%20%5BMerkleRootSol.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Felc%2FMerkelRootSol.js)%3A%20Deploys%20a%20MerkleRoot.sol%20contract%20on%20Harmony%20for%20the%20given%20Ethereum%20epoch%20and%20merkle%20root%20information.%0A%20%20-%20%5Bclient.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Felc%2Fclient.js)%3A%20Interaction%20with%20the%20Client.sol%20(the%20Ethereum%20Light%20Client%20deployed%20on%20Harmony).%0A%20%20-%20%5Beth2one.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Felc%2Feth2one-relay.js)%3A%20Relays%20blocks%20from%20ethereum%20to%20Harmony.%0A%20%20-%20%5BproofDump%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Felc%2FproofDump.js)%3A%20Allows%20logging%20of%20dagProofs%20for%20blocks%20and%20epochs%20and%20writing%20them%20to%20files.%0A%0A%23%23%23%20Proving%20Mechanisms%0A%0A**Ethereum%20Prover**%0A%0A-%20%5Beprover%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fsrc%2Feprover)%3A%20EProver%20is%20a%20utility%20that%20provides%20verifiable%20proof%20about%20user%E2%80%99s%20Ethereum%20tx%2C%20e.g.%2C%20lock%20tx.%0A%20%20-%20%5BReceipt.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feprover%2FReceipt.js)%3A%20Allows%20retreival%20of%20a%20receipt%20from%20Rpc%2C%20buffer%20or%20hex%20and%20serailiation%20of%20receipt.%0A%20%20-%20%5Bindex.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feprover%2Findex.js)%3A%20exports%20Eprover%0A%20%20-%20%5BtxProof.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feprover%2FtxProof.js)%3A%20Takes%20a%20transaction%20hash%20and%20gets%20a%20receipt%20proof%20(sha3%20hash%2C%20recieptRoor%2C%20proof%20and%20an%20encoded%20txIndex).%0A%0A%23%23%23%20Relayer%20Mechanisms%0A%0A**Ethereum%20to%20Harmony%20Relayer**%0A%0A-%20%5Beth2hmy-relay%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fsrc%2Feth2hmy-relay)%3A%20Eth2Hmy%20relay%20downloads%20the%20Ethereum%20block%20headers%2C%20extract%20information%20and%20relay%20it%20to%20ELC%20smart%20contract%20on%20Harmony.%0A%20%20-%20%5Bindex.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Findex.js)%3A%20exports%20%60DagProof%60%20and%20%60getBlockByNumber%60.%0A%20%20-%20%5Bethash%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Fethash)%0A%20%20%20%20-%20%5Bindex.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Fethash%2Fdist%2Findex.js)%3A%20Loads%20the%20epoch%20seed%20and%20cache%20given%20a%20block%20number%20and%20uses%20this%20to%20verify%20Proof%20of%20Work%20for%20headers%20and%20blocks.%0A%20%20%20%20-%20%5Butil.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Fethash%2Fdist%2Futil.js)%3A%20Utilities%20for%20epochs%20including%20caching%2C%20hashing%20and%20retreival%20of%20seeds%20and%20buffers.%0A%0A%23%23%23%20Cryptographic%20Primitives%0A%0A-%20%5Beth2hmy-relay%2Flib%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Flib)%3A%20Library%20of%20functions%20used%20by%20the%20Ethereum%20to%20Harmony%20Relay%0A%20%20-%20%5BDagPropf.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Flib%2FDagProof.js)%3A%20Checks%20if%20a%20dag%20exists%20for%20an%20epoch%2C%20loads%20DAG%20for%20an%20epoch%20and%20verify%20header%20and%20getProof%20using%20the%20epoch's%20DAG.%0A%20%20-%20%5BMmapDB.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Flib%2FMmapDB.js)%3A%20Merkle%20database%20functionality%20by%20extending%20Memory%20Map.%0A%20%20-%20%5BgetBlockHeader.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Flib%2FgetBlockHeader.js)%3A%20Get%20Block%20information.%0A%20%20-%20%5Bmerkel.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feth2hmy-relay%2Flib%2Fmerkel.js)%3A%20MerkleTree%20functionality%20including%20construction%20of%20MerkleTrees%20and%20getting%20proofs%2C%20hex%20proofs%2C%20combined%20hashes%2C%20get%20Paired%20Elements%20and%20layers.%0A-%20%5BethashProof%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fsrc%2FethashProof)%3A%20ethash%20proving%20mechanisms%0A%20%20-%20%5BBlockProof.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2FethashProof%2FBlockProof.js)%3A%20Exports%20getHeaderProof%2C%20parseRlpHeader%2C%20getBlockByNumber%0A%20%20-%20%5BDagMTreeEpoch.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2FethashProof%2FDagMtreeEpoch.js)%3A%20Exports%20generateDagMTree%2C%20genearateDagMTreeRange%0A%20%20-%20%5BMerkelRootSol.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2FethashProof%2FMerkelRootSol.js)%3A%20Creates%20a%20MerkleRoot.sol%20contract%20for%20an%20inputted%20merkleInfo.%0A-%20%5Blib%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2%2Fsrc%2Flib)%0A%20%20-%20%5Bconfigure.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Flib%2Fconfigure.js)%3A%20Configure%20TokenLocker%20and%20Faucet%20contracts.%0A%20%20-%20%5BethEthers.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Flib%2FethEthers.js)%3A%20Shim%20over%20%5Bethers%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fethers)%20allowing%20the%20instantiation%20of%20connections%20using%20a%20configured%20private%20key.%0A%20%20-%20%5Blogger.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Flib%2Flogger.js)%3A%20Logging%20Functions%0A%20%20-%20%5Butils.ts%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Flib%2Futils.ts)%3A%20Utility%20functions%20including%20(buffer2hex%2C%20rpcWrapper%2C%20toRLPHeader%2C%20getReceiptLight%2C%20getReceipt%2C%20getReceiptRlp%2C%20getReceiptTrie%2Chex2key%2Cindex2key%2C%20expandkey%2C%20getReceiptProof%2C%20getTransactionProof%2C%20getAccountProof%2C%20getStorageProof%2C%20getKeyFromProof%2C%20fullToMin)%0A%0A**npm%20packages**%0A%0A-%20%5B%40ethereumjs%2Fblock%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40ethereumjs%2Fblock)%3A%20Implements%20schema%20and%20functions%20related%20to%20Ethereum's%20block.%20(Ethereum%201.0%20or%20Execution%20Chain%20for%20Ethereum%202.0)%0A-%20%5Bethereumjs-util%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fethereumjs-util)%3A%20A%20collection%20of%20utility%20functions%20for%20Ethereum.%20It%20can%20be%20used%20in%20Node.js%20and%20in%20the%20browser%20with%20browserify.%0A-%20%5Bethers%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fethers)%3A%20A%20complete%2C%20compact%20and%20simple%20library%20for%20Ethereum%20and%20ilk%2C%20written%20in%20TypeScript.%0A-%0A-%20%5Bmiller-rabin%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fmiller-rabin)%3A%20implements%20%5BMiller%20Rabin%20primality%20test%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FMiller%25E2%2580%2593Rabin_primality_test)%0A-%20%5Bmmap-io%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fmmap-io)%3A%20Memory%20Map%20for%20node.js%0A-%20%5Bsha3%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fsha3)%3A%20A%20pure%20JavaScript%20implementation%20of%20the%20Keccak%20family%20of%20cryptographic%20hashing%20algorithms%2C%20most%20notably%20including%20Keccak%20and%20SHA3.%0A-%0A%0A%23%23%23%20Light%20Client%20Functionality%0A%0A%23%23%23%20Token%20Lockers%0A%0A%23%23%20References%0A%0A%23%23%20Appendices%0A%0A%23%23%23%20Appendix%20A%3A%20Current%20Implementation%20Walkthough%0A%0AFollowing%20is%20a%20detailed%20walk%20though%20of%20the%20current%20implementation%20of%20the%20Ethereum%20Light%20Client%20and%20the%20flow%20for%20mapping%20tokens%20from%20Ethereum%20to%20Harmony.%0A%0A%23%23%23%23%20Ethereum%20Light%20Client%20(on%20Harmony)%0A%0A**Design**%0AExisting%20Design%0A%0A1.%20DAG%20is%20generated%20for%20each%20Ethereum%20EPOCH%3A%20This%20takes%20a%20couple%20of%20hours%20and%20has%20a%20size%20of%20approx%201GB.%0A2.%20Relayer%20is%20run%20to%20replicate%20each%20block%20header%20to%20the%20SPV%20Client%20on%20Harmony.%0A3.%20EthereumLightClient.sol%20addBlockHeader%3A%20Adds%20each%20block%20header%20to%20the%20Ethereum%20Light%20Client.%0A4.%20Transactions%20are%20Verified%0A%0A**Running%20the%20Relayer**%0A%0A%60%60%60%0A%23%20Start%20the%20relayer%20(note%3A%20replace%20the%20etherum%20light%20client%20address%20below)%0A%23%20relay%20%5Boptions%5D%20%3CethUrl%3E%20%3ChmyUrl%3E%20%3CelcAddress%3E%20%20%20relay%20eth%20block%20header%20to%20elc%20on%20hmy%0A%20yarn%20cli%20ethRelay%20relay%20http%3A%2F%2Flocalhost%3A8645%20http%3A%2F%2Flocalhost%3A9500%200x3Ceb74A902dc5fc11cF6337F68d04cB834AE6A22%0A%60%60%60%0A%0A**Implementation**%0A%0A1.%20DAG%20Generation%20can%20be%20done%20explicity%20by%20calling%20%60dagProve%60%20from%20the%20CLI%20or%20it%20is%20done%20automatically%20by%20%60getHeaderProof%60%20in%20%60ethHashProof%2FBlockProof.js%60%20which%20is%20called%20from%20%60blockRelay%60%20in%20%60cli%2FethRelay.js%60.%0A2.%20Relaying%20of%20Block%20Headers%20is%20done%20by%20%60blockRelayLoop%60%20in%20%60cli%2FethRelay.js%60%20which%0A%20%20%20-%20Reads%20the%20last%20block%20header%20from%20EthereumLightClient.sol%0A%20%20%20-%20Loops%20through%20calling%20an%20Ethereum%20RPC%20per%20block%20to%20retrieve%20the%20blockHeader%20using%20%60return%20eth.getBlock(blockNo).then(fromRPC)%60%20in%20function%20%60getBlockByNumber%60%20in%20%60eth2hmy-relay%2FgetBlockHeader.js%60%0A3.%20Adding%20BlockHeaders%20is%20done%20by%20%60await%20elc.addBlockHeader(rlpHeader%2C%20proofs.dagData%2C%20proofs.proofs)%60%20which%20is%20called%20from%20%60cli%2FethRelay.js%60.%20%60addBlockHeader%60%20in%20%60EthereumLightClient.sol%60%0A%20%20%20-%20calculates%20the%20blockHeader%20Hash%0A%20%20%20-%20and%20checks%20that%20it%0A%20%20%20%20%20-%20hasn't%20already%20been%20relayed%2C%0A%20%20%20%20%20-%20is%20the%20next%20block%20to%20be%20added%2C%0A%20%20%20%20%20-%20has%20a%20valid%20timestamp%0A%20%20%20%20%20-%20has%20a%20valid%20difficulty%0A%20%20%20%20%20-%20has%20a%20valid%20Proof%20of%20Work%20(POW)%0A%20%20%20-%20Check%20if%20the%20canonical%20chain%20needs%20to%20be%20replaced%20by%20another%20fork%0A%0A%23%23%23%20Mapping%20Tokens%20(Ethereum%20to%20Harmony)%0A%0A**Design**%0A%0A1.%20If%20the%20Token%20Has%20not%20already%20been%20mapped%20on%20Harmony%0A%20%20%20-%20Harmony%3A%20Create%20an%20ERC20%20Token%0A%20%20%20-%20Harmony%3A%20Map%20the%20Ethereum%20Token%20to%20the%20new%20ERC20%20Contract%0A%20%20%20-%20Ethereum%3A%20Validate%20the%20Harmony%20Mapping%20Transaction%0A%20%20%20-%20Ethereum%3A%20Map%20the%20Harmony%20ERC20%20token%20to%20the%20existing%20Ethereum%20Token%0A%20%20%20-%20Harmony%3A%20Validate%20the%20Ethereum%20mapping%20Transaction%0A%0A_Note%3A%20The%20key%20difference%20between%20%60TokenLockerOnEthereum.sol%60%20and%20%60TokenLockerOnHarmony.sol%60%20is%20the%20proof%20validation.%20%60TokenLockerOnEthereum.sol%60%20uses%20%60.%2Flib%2FMMRVerifier.sol%60%20to%20validate%20the%20%5BMountain%20Merkle%20Ranges%5D(https%3A%2F%2Fgithub.com%2Fopentimestamps%2Fopentimestamps-server%2Fblob%2Fmaster%2Fdoc%2Fmerkle-mountain-range.mdx)%20on%20Harmony%20and%20%60HarmonyProver.sol%60.%20%60TokenLockerOnHarmony.sol%60%20imports%20%60.%2Flib%2FMPTValidatorV2.sol%60%20to%20validate%20%5BMerkle%20Patrica%20Trie%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fpatricia-merkle-trie%2F%23merkle-patricia-trees)%20and%20%60.%2FEthereumLightClient.sol%60._%0A%0A_Note%3A%20%60validateAndExecuteProof%60%20is%20responsible%20for%20creation%20of%20the%20BridgeTokens%20on%20the%20destination%20chain%20it%20does%20this%20by%20calling%20%60execute%60%20call%20in%20%60TokenLockerLocker.sol%60%20which%20then%20calls%20the%20function%20%60onTokenMapReqEvent%60%20in%20%60TokenRegistry.sol%60%20which%20creates%20a%20new%20Bridge%20Token%20%60BridgedToken%20mintAddress%20%3D%20new%20BridgedToken%7Bsalt%3A%20salt%7D()%3B%60%20and%20then%20initializes%20it.%20This%20uses%20%5B(RLP)%20Serialization%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Frlp%2F)_%0A%0A_Note%3A%20The%20shims%20in%20%60ethWeb3.js%60%20provide%20simplified%20functions%20for%20%60ContractAt%60%2C%20%60ContractDeploy%60%2C%20%60sendTx%60%20and%20%60addPrivateKey%60%20and%20have%20a%20constructor%20which%20uses%20%60process.env.PRIVATE_KEY%60._%0A%0A**Mapping%20the%20Tokens**%0A%0A%60%60%60%0A%23%20Map%20the%20Tokens%0A%23%20map%20%3CethUrl%3E%20%3CethBridge%3E%20%3ChmyUrl%3E%20%3ChmyBridge%3E%20%3Ctoken%3E%0Ayarn%20cli%20Bridge%20map%20http%3A%2F%2Flocalhost%3A8645%200x017f8C7d1Cb04dE974B8aC1a6B8d3d74bC74E7E1%20http%3A%2F%2Flocalhost%3A9500%200x017f8C7d1Cb04dE974B8aC1a6B8d3d74bC74E7E1%200x4e59AeD3aCbb0cb66AF94E893BEE7df8B414dAB1%0A%60%60%60%0A%0A**Implementation**%0A%0A-%20The%20CLI%20calls%20%60tokenMap%60%20in%20%60src%2Fbridge%2Fcontract.js%60%20to%0A%20%20-%20Instantiate%20the%20Ethereum%20Bridge%20and%20Harmony%20Bridge%20Contracts%0A%20%20-%20Calls%20%60TokenMap%60%20in%20%60scr%2Fbridge%2Fbridge.js%60%20to%0A%20%20%20%20-%20Issue%20a%20token%20Map%20request%20on%20Ethereum%20%60const%20mapReq%20%3D%20await%20src.IssueTokenMapReq(token)%60%0A%20%20%20%20-%20Acknowledge%20the%20Map%20Request%20on%20Harmony%20%60const%20mapAck%20%3D%20await%20Bridge.CrossRelayEthHmy(src%2C%20dest%2C%20mapReq)%60%0A%20%20%20%20-%20Issue%20a%20token%20Map%20request%20on%20Harmony%20%60return%20Bridge.CrossRelayHmyEth(dest%2C%20src%2C%20mapAck.transactionHash)%60%0A%0A**Here%20is%20the%20Logic%20(call%20execution%20overview)%20when%20Mapping%20Tokens%20across%20Chains.%20_NOTE%3A%20Currently%20mapping%20has%20only%20been%20developed%20from%20Ethereum%20to%20Harmony%20(not%20bi-directional)_.**%0A%0A1.%20Bridge%20Map%20is%20called%20in%20src.cli.index.js%20and%20it%20calls%20%60tokenMap%60%20in%20%60bridge%2Fcontract.js%60%20which%0A%20%20%20-%20Get%20srcBridge%20Contract%20on%20Ethereum%20%60TokenLockerOnEthereum.sol%60%20from%20%60ethBridge.js%60%20it%20also%20instantiates%20an%20%60eprover%60%20using%20%60tools%2Feprover%2Findex.js%60%20which%20calls%20%60txProof.js%60%20which%20uses%20%5Beth-proof%20npm%20package%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Feth-proof).%20_Note%3A%20this%20is%20marked%20with%20a%20%2F%2FTODO%20need%20to%20test%20and%20develop%20proving%20logic%20on%20Harmony._%0A%20%20%20-%20Get%20destBridge%20Contract%20on%20Hamony%20%60TokenLockerOnHarmony.sol%60%20from%20%60hmyBridge.js%60%20it%20also%20instantiates%20an%20%60hprove%60%20using%20%60tools%2Feprover%2Findex.js%60%20which%20calls%20%60txProof.js%60%20which%20uses%20%5Beth-proof%20npm%20package%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Feth-proof).%0A%20%20%20-%20calls%20%60TokenMap%60%20in%20%60bridge.js%60%0A2.%20%60TokenMap%60%20Calls%20IssueTokenMapReq%20(on%20the%20Ethreum%20Locker)%20returning%20the%20%60mapReq.transactionHash%60%0A%20%20%20-%20%60IssueTokenMapReq(token)%60%20is%20held%20in%20%60bridge.js%60%20as%20part%20of%20the%20bridge%20class%0A%20%20%20-%20It%20calls%20%60issueTokenMapReq%60%20on%20%60TokenLockerOnEthereum.sol%60%20which%20is%20implemented%20by%20%60TokenRegistry.sol%60%0A%20%20%20-%20%60issueTokenMapReq%60%20checks%20if%20the%20token%20has%20already%20been%20mapped%20if%20not%20it%20was%20emitting%20a%20%60TokenMapReq%60%20with%20the%20details%20of%20the%20token%20to%20be%20mapped.%20However%20this%20was%20commented%20out%20as%20it%20was%20felt%20that%2C%20if%20it%20has%20not%20been%20mapped%2C%20we%20use%20the%20%60transactionHash%60%20of%20the%20mapping%20request%60%20to%20drive%20the%20logic%20below%20(not%20the%20event).%0A3.%20%60TokenMap%60%20calls%20%60Bridge.CrossRelay%60%20with%20the%20IssueTokenMapReq.hash%20to%0A%20%20%20-%20gets%20the%20proof%20of%20the%20transaction%20on%20Ethereum%20via%20%60getProof%60%20calling%20%60prover.ReceiptProof%60%20which%20calls%20the%20eprover%20and%20returns%20%60proof%60%20with%0A%20%20%20%20%20-%20%60hash%3A%20sha3(resp.header.serialize())%2C%60%0A%20%20%20%20%20-%20%60root%3A%20resp.header.receiptRoot%2C%60%0A%20%20%20%20%20-%20%60proof%3A%20encode(resp.receiptProof)%2C%60%0A%20%20%20%20%20-%20%60key%3A%20encode(Number(resp.txIndex))%20%2F%2F%20'0x12'%20%3D%3E%20Nunmber%60%0A%20%20%20-%20We%20then%20call%20%60dest.ExecProof(proof)%60%20to%20execute%20the%20proof%20on%20Harmony%0A%20%20%20%20%20-%20This%20calls%20%60validateAndExecuteProof%60%20on%20%60TokenLockerOnHarmony.sol%60%20with%20the%20%60proofData%60%20from%20above%2C%20which%0A%20%20%20%20%20%20%20-%20requires%20%60lightclient.VerifyReceiptsHash(blockHash%2C%20rootHash)%2C%60%20implemented%20by%20%60.%2FEthereumLightClient.sol%60%0A%20%20%20%20%20%20%20%20%20-%20This%20returns%20%60return%20bytes32(blocks%5Buint256(blockHash)%5D.receiptsRoot)%20%3D%3D%20receiptsHash%3B%60%0A%20%20%20%20%20%20%20%20%20-%20**Which%20means%20the%20block%20has%20to%20be%20relayed%20first%2C%20as%20we%20have%20just%20executed%20the%20transaction%20the%20relayer%20usually%20has%20not%20relayed%20the%20block%20so%20this%20will%20fail**%0A%20%20%20%20%20%20%20-%20requires%20%60lightclient.isVerified(uint256(blockHash)%60%20implemented%20by%20%60.%2FEthereumLightClient.sol%60%0A%20%20%20%20%20%20%20%20%20-%20This%20returns%20%60return%20canonicalBlocks%5BblockHash%5D%20%26%26%20blocks%5BblockHash%5D.number%20%2B%2025%20%3C%20blocks%5BcanonicalHead%5D.number%3B%60%0A%20%20%20%20%20%20%20%20%20-%20**Which%20means%20there%20must%20be%20an%20additional%2025%20blocks%20on%20Ethereum%20before%20this%20can%20be%20processed.%20This%20logic%20needs%20to%20be%20rewritten%20to%20break%20down%20execution%20for%201.%20the%20ethereum%20mapping%20request%202.%20After%20a%2025%20block%20delay%20the%20Harmony%20Proof%20validation%20and%20executing%20the%20Harmony%20Mapping%20Request**%0A%20%20%20%20%20%20%20-%20%60require(spentReceipt%5BreceiptHash%5D%20%3D%3D%20false%2C%20%22double%20spent!%22)%3B%60%20to%20ensure%20that%20we%20haven't%20already%20executed%20this%20proof%0A%20%20%20%20%20%20%20-%20gets%20the%20%60rlpdata%60%20using%20%60EthereumProver.validateMPTProof%60%20implemented%20by%20%60EthereumProver.sol%60%20which%0A%20%20%20%20%20%20%20%20%20-%20Validates%20a%20Merkle-Patricia-Trie%20proof.%0A%20%20%20%20%20%20%20%20%20-%20Returns%20a%20value%20whose%20inclusion%20is%20proved%20or%20an%20empty%20byte%20array%20for%20a%20proof%20of%20exclusion%0A%20%20%20%20%20%20%20-%20marks%20%60spentReceipt%5BreceiptHash%5D%20%3D%20true%3B%60%0A%20%20%20%20%20%20%20-%20%60execute(rlpdata)%60%20implemented%20by%20%60TokenLocker.sol%60%20which%20calls%20%60onTokenMapReqEvent(topics%2C%20Data)%60%20implemented%20by%20%60TokenRegistry.sol%60%0A%20%20%20%20%20%20%20%20%20-%20%60address%20tokenReq%20%3D%20address(uint160(uint256(topics%5B1%5D)))%3B%60%20gets%20the%20address%20of%20the%20token%20to%20be%20mapped.%0A%20%20%20%20%20%20%20%20%20-%20require%20%60address(RxMapped%5BtokenReq%5D)%20%3D%3D%20address(0)%60%20that%20the%20token%20has%20not%20already%20been%20mapped.%0A%20%20%20%20%20%20%20%20%20-%20%60address(RxMapped%5BtokenReq%5D)%20%3D%3D%20address(0)%60%20creates%20a%20new%20BridgedToken%20implemented%20by%20%60BridgedToken.sol%60%0A%20%20%20%20%20%20%20%20%20%20%20-%20%60contract%20BridgedToken%20is%20ERC20Upgradeable%2C%20ERC20BurnableUpgradeable%2C%20OwnableUpgradeable%60%20it%20is%20a%20standard%20openzepplin%20ERC20%20Burnable%2C%20Ownable%2C%20Upgradeable%20token%0A%20%20%20%20%20%20%20%20%20-%20%60mintAddress.initialize%60%20initialize%20the%20token%20with%20the%20same%20%60name%60%2C%20%60symbol%60%20and%20%60decimals%60%20as%20the%20ethereum%20bridged%20token%0A%20%20%20%20%20%20%20%20%20-%20%60RxMappedInv%5Baddress(mintAddress)%5D%20%3D%20tokenReq%3B%60%20updates%20the%20inverse%20Key%20Value%20Mapping%0A%20%20%20%20%20%20%20%20%20-%20%60RxMapped%5BtokenReq%5D%20%3D%20mintAddress%3B%60%20updates%20the%20Ethereum%20mapped%20tokens%0A%20%20%20%20%20%20%20%20%20-%20%60RxTokens.push(mintAddress)%3B%60%20add%20the%20newly%20created%20token%20to%20a%20list%20of%20bridged%20tokens%0A%20%20%20%20%20%20%20%20%20-%20%60emit%20TokenMapAck(tokenReq%2C%20address(mintAddress))%3B%60%0A%20%20%20%20%20%20%20-%20%60require(executedEvents%20%3E%200%2C%20%22no%20valid%20event%22)%60%20to%20check%20if%20it%20executed%20the%20mapping%20correctly.%0A4.%20We%20then%20take%20the%20Harmony%20Mapping%20%60transactionHash%60%20and%20repeat%20the%20above%20process%20to%20prove%20the%20Harmony%20mapping%20acknowledgment%20on%20Ethereum%20(Cross%20Relay%20second%20call)%20%60return%20Bridge.CrossRelay(dest%2C%20src%2C%20mapAck.transactionHash)%3B%60%0A%0A-%20gets%20the%20proof%20of%20the%20transaction%20on%20Harmony%20via%20%60getProof%60%20calling%20%60prover.ReceiptProof%60%20which%20calls%20the%20eprover%20and%20returns%20%60proof%60%20with%0A%20%20_%60hash%3A%20sha3(resp.header.serialize())%2C%60%0A%20%20_%20%60root%3A%20resp.header.receiptRoot%2C%60%0A%20%20_%60proof%3A%20encode(resp.receiptProof)%2C%60%0A%20%20_%20%60key%3A%20encode(Number(resp.txIndex))%20%2F%2F%20'0x12'%20%3D%3E%20Nunmber%60%0A%20%20-%20We%20then%20call%20%60dest.ExecProof(proof)%60%20to%20execute%20the%20proof%20on%20Ethereum%0A%20%20%20%20-%20This%20calls%20%60validateAndExecuteProof%60%20on%20%60TokenLokerOnEthereum.sol%60%20with%20the%20%60proofData%60%20from%20above%2C%20which%0A%20%20%20%20%20%20-%20%60require(lightclient.isValidCheckPoint(header.epoch%2C%20mmrProof.root)%2C%60%20implemented%20by%20%60HarmonyLightClient.sol%60%0A%20%20%20%20%20%20%20%20-%20%60return%20epochMmrRoots%5Bepoch%5D%5BmmrRoot%5D%60%20which%20means%20that%20the%20epoch%20has%20to%20have%20had%20a%20checkpoint%20submitted%20via%20%60submitCheckpoint%60%0A%20%20%20%20%20%20-%20%60bytes32%20blockHash%20%3D%20HarmonyParser.getBlockHash(header)%3B%60%20gets%20the%20blockHash%20implemented%20by%20%60HarmonyParser.sol%60%0A%20%20%20%20%20%20%20%20-%20This%20returns%20%60return%20keccak256(getBlockRlpData(header))%3B%60%0A%20%20%20%20%20%20%20%20-%20%60getBlockRlpData%60%20creates%20a%20list%20%60bytes%5B%5D%20memory%20list%20%3D%20new%20bytes%5B%5D(15)%3B%60%20and%20uses%20statements%20like%20%60list%5B0%5D%20%3D%20RLPEncode.encodeBytes(abi.encodePacked(header.parentHash))%3B%60%20to%20perform%20%5BRecursive-Length%20Prefix%20(RLP)%20Serialization%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Frlp%2F)%20implemented%20by%20%60RLPEncode.sol%60%0A%20%20%20%20%20%20-%20%60HarmonyProver.verifyHeader(header%2C%20mmrProof)%3B%60%20verifys%20the%20header%20implemented%20by%20%60HarmonyProver.sol%60%0A%20%20%20%20%20%20%20%20-%20%60bytes32%20blockHash%20%3D%20HarmonyParser.getBlockHash(header)%3B%60%20gets%20the%20blockHash%20implemented%20by%20%60HarmonyParser.sol%60%20as%20above%0A%20%20%20%20%20%20%20%20-%20%60valid%20%3D%20MMRVerifier.inclusionProof(proof.root%2C%20proof.width%2C%20proof.index%2C%20blockHash%2C%20proof.peaks%2C%20proof.siblings)%3B%60%20verifys%20the%20proff%20using%20the%20%5BMerkle%20Mountain%20Range%20Proof%5D(https%3A%2F%2Fgithub.com%2Fopentimestamps%2Fopentimestamps-server%2Fblob%2Fmaster%2Fdoc%2Fmerkle-mountain-range.mdx)%20passed%20%60MMRVerifier.MMRProof%20memory%20proof%60%20and%20the%20%60blockHash%60.%0A%20%20%20%20%20%20%20%20-%20**NOTE%3A%20This%20means%20that%20a%20%60submitCheckpoint%60%20in%20%60HarmonyLightClient.sol%60%20needs%20to%20have%20called%20either%20for%20the%20next%20epoch%20or%20for%20a%20checkpoint%2C%20after%20the%20block%20the%20harmony%20mapping%20transaction%20was%20in.**%0A%20%20%20%20%20%20%20%20-%20**NOTE%3A%20Automatic%20submission%20of%20checkpoints%20to%20the%20Harmony%20Light%20Client%20has%20not%20been%20developed%20as%20yet.%20(It%20is%20not%20part%20of%20the%20%60ethRelay.js%60).%20And%20so%20the%20checkpoint%20would%20need%20to%20be%20manually%20submitted%20before%20the%20Ethereum%20Mapping%20could%20take%20place.**%0A%20%20%20%20%20%20-%20%60require(spentReceipt%5BreceiptHash%5D%20%3D%3D%20false%2C%20%22double%20spent!%22)%3B%60%20ensure%20that%20we%20haven't%20already%20processed%20this%20mapping%20request%60%0A%20%20%20%20%20%20-%20%60HarmonyProver.verifyReceipt(header%2C%20receiptdata)%60%20ensure%20the%20receiptdata%20is%20valid%0A%20%20%20%20%20%20-%20%60spentReceipt%5BreceiptHash%5D%20%3D%20true%3B%60%20marks%20the%20receipt%20as%20having%20been%20processed%0A%20%20%20%20%20%20-%20%60execute(receiptdata.expectedValue)%3B%60%20implemented%20by%20%60TokenLocker.sol%60%20which%20calls%20%60onTokenMapAckEvent(topics)%60%20implemented%20by%20%60TokenRegistry.sol%60%0A%20%20%20%20%20%20%20%20-%20%60address%20tokenReq%20%3D%20address(uint160(uint256(topics%5B1%5D)))%3B%60%0A%20%20%20%20%20%20%20%20-%20%60address%20tokenAck%20%3D%20address(uint160(uint256(topics%5B2%5D)))%3B%60%0A%20%20%20%20%20%20%20%20-%20%60require(TxMapped%5BtokenReq%5D%20%3D%3D%20address(0)%2C%20%22missing%20mapping%20to%20acknowledge%22)%3B%60%0A%20%20%20%20%20%20%20%20-%20%60TxMapped%5BtokenReq%5D%20%3D%20tokenAck%3B%60%0A%20%20%20%20%20%20%20%20-%20%60TxMappedInv%5BtokenAck%5D%20%3D%20IERC20Upgradeable(tokenReq)%3B%60%0A%20%20%20%20%20%20%20%20-%20%60TxTokens.push(IERC20Upgradeable(tokenReq))%3B%60%0A%0A5.%20Upon%20completion%20of%20tokenMap%20control%20is%20passed%20back%20to%20Bridge%20Map%20which%0A6.%20Calls%20TokenPair%20on%20Ethereum%0A7.%20Calls%20ethTokenInfo%20to%20get%20the%20status%20of%20the%20ERC20%0A8.%20Calls%20hmyTokenInfo%20to%20get%20the%20tokenStatus%20on%20Harmony%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./intro-C_ER-rE7.js"),[]),path:"/research/bridge/intro",type:"mdx",filePath:"research/bridge/intro.mdx",content:"%23%20Crosschain%20Bridge%20Analysis%20-%20An%20Introduction%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0AHere%20we%20present%20a%20survey%20of%20existing%20bridge%20designs%2C%20historical%20security%20incidents%2C%20and%20a%20brief%20discussion%20of%20common%20components%20and%20where%20ZKP%20may%20be%20used.%0A%0A%23%23%20Bridge%20Taxonomy%0A%0ABridge%20designs%20evolved%20as%20DeFi%20and%20multi-chain%20paradigm%20gained%20popularity.%20Our%20summary%20is%20inspired%20by%20prior%20taxonomy%20work%20by%20%5BGanesha%20Upadhyaya%5D(https%3A%2F%2Ftwitter.com%2Fgupadhyaya)%20in%20%5BA%20Classification%20of%20Various%20Bridging%20Technologies%5D(https%3A%2F%2Fmedium.com%2Fharmony-one%2Fharmonys-cross-chain-future-41d02d53b10)%2C%20%5BDmitriy%20Berenzon%5D(https%3A%2F%2Ftwitter.com%2Fdberenzon)%20in%20%5BBlockchain%20Bridges%3A%20Building%20Networks%20of%20Cryptonetworks%5D(https%3A%2F%2Fmedium.com%2F1kxnetwork%2Fblockchain-bridges-5db6afac44f8)%2C%20and%20by%20multiple%20researchers%20from%20Jump%20Crypto%20in%20%5BSecurity%20Stack-Up%3A%20How%20Bridges%20Compare%5D(https%3A%2F%2Fjumpcrypto.com%2Fsecurity-stack-up-how-bridges-compare%2F)%0A%0A%3E%20At%20a%20very%20high%20level%2C%20there%20are%20two%20types%20of%20bridging%20solutions%3A%201)%20proof-based%20and%202)%20committee-based.%20The%20proof-based%20solutions%20entail%20cryptographic%20proving%20of%20the%20validity%20of%20any%20transaction%20of%20one%20chain%20in%20the%20other%2C%20whereas%20the%20committee-based%20solution%20relies%20on%20the%20social%20consensus%20of%20the%20bridge%20validators%20to%20attest%20for%20the%20transaction%20validity%2C%20which%20often%20involves%20no%20cryptographic%20proving.%0A%3E%0A%3E%20-%20Ganesha%20Upadhyaya%20in%20%22A%20Classification%20of%20Various%20Bridging%20Technologies%22%0A%0A%23%23%23%20Proof%20Based%0A%0A%23%23%23%23%20Validity%20Proofs%0A%0AValidity-proof%20based%20bridges%20prioritize%20security%2C%20trustlessness%2C%20permissionlessness%2C%20and%20delay%20minimization%0A%0A%7C%20Type%20%20%20%7C%20DesignodeotezkBridge%5D(https%3A%2F%2Frdi.berkeley.edu%2Fzkp%2FzkBridge%2Fuploads%2Fpaper.pdfy%20Berkeley%20researcehrs%20(%5BTwitter%5D(https%3A%2F%2Ftwitter.com%2Fzkcollective))%20%7C%0A%7C%20ZKP%20%20%20%20%7C%20%5BTelepathy%5D(https%3A%2F%2Fdocs.telepathy.xyz%2Fprotocol%2Foverview)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BTelepathy%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%3Fq%3Dtelepathy%26type%3Dall%26language%3D%26sort%3D)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BDemo%5D(https%3A%2F%2Fdemo.telepathy.xyz%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20By%20%5BSuccint%20Labs%5D(https%3A%2F%2Fsuccinct.xyz)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Native%20%7C%20%5BHorizon%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F2101.06000.pdf)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BHorizon%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fhorizon)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20TBD%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Inactive.%20By%20Harmony%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Native%20%7C%20%5BIBC%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc)%20(%5BIntro%5D(https%3A%2F%2Ftutorials.cosmos.network%2Facademy%2F3-ibc%2F1-what-is-ibc.html))%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bibc-go%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc-go)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Various%20%2F%20%5BExplorer%5D(https%3A%2F%2Fhub.mintscan.io%2Fchains%2Fibc-network)%20%7C%20Within%20Cosmos%20Network%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Native%20%7C%20%5BGravity%5D(https%3A%2F%2Fgithub.com%2FGravity-Bridge%2FGravity-Bridge%2Fblob%2Fmain%2Fdocs%2Fdesign%2Foverview.mdx)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BGravity%5D(https%3A%2F%2Fgithub.com%2FGravity-Bridge%2FGravity-Bridge)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BGravity%5D(https%3A%2F%2Fbridge.blockscape.network%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Ethereum%20and%20Cosmos%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Native%20%7C%20%5BAWM%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Fxsvm)%20(%5BIntro%5D(https%3A%2F%2Fmedium.com%2Favalancheavax%2Favalanche-warp-messaging-awm-launches-with-the-first-native-subnet-to-subnet-message-on-avalanche-c0ceec32144a))%20%7C%20%5BWrap%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fvms%2Fplatformvm%2Fwarp)%20%2F%20%5BXSVM%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Fxsvm)%20%7C%20TBD%20%2F%20%5BExplorer%5D(https%3A%2F%2Fsubnets.avax.network%2Fsubnets)%20%20%20%20%20%20%20%20%20%20%20%7C%20Within%20Avalanche%20Subnets%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Native%20%7C%20%5BSnowbridge%5D(https%3A%2F%2Fdocs.snowbridge.network%2Farchitecture%2Foverview)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bsnowbridge%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20TBD%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20LCP%20%20%20%20%7C%20%5BDatachain%20LCP%5D(https%3A%2F%2Fmedium.com%2Flcp-network%2Flcp-a-proxy-for-light-client-verification-to-realize-trust-minimized-and-gas-efficient-f7d5868e4b0)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BLCP%5D(https%3A%2F%2Fgithub.com%2Fdatachainlab%2Flcp)%20%2F%20%5BDemo%5D(https%3A%2F%2Fgithub.com%2Fdatachainlab%2Fharmony-cosmos-bridge-demo)%20%20%20%20%20%20%20%20%20%20%20%20%7C%20TBD%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Relies%20on%20TEE%20enclave%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20LCP%20%20%20%20%7C%20%5BAvalanche%5D(https%3A%2F%2Fmedium.com%2Favalancheavax%2Favalanche-bridge-secure-cross-chain-asset-transfers-using-intel-sgx-b04f5a4c7ad1)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20TBD%20%2F%20%5BAudit%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Faudits%2Fblob%2Fmain%2Fbridge%2FAvalanche_Bridge_Security_Audit_Report_Halborn_v1_1.pdf)%20%7C%20%5Bcore.app%5D(https%3A%2F%2Fcore.app%2Fbridge%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Relies%20on%20TEE%20enclave%20(Intel%20SGX)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%0A%23%23%23%23%20Fraud%20Proofs%0A%0AFraud-proof%20based%20bridges%20assume%20all%20participants%20are%20truthful%20unless%20someone%20presents%20a%20proof%20showing%20otherwise.%20As%20a%20result%2C%20they%20must%20leave%20a%20wide%20fraud-proof%20time%20window%20and%20carefully%20design%20economic%20incentives%20for%20such.%20This%20limitation%20inevitably%20incurs%20much%20higher%20delay%2C%20but%20makes%20implementation%20substantially%20easier%20and%20costs%20significantly%20less%20to%20operate%20and%20maintain.%20Fraud-proof%20based%20bridges%20face%20more%20security%20risks%20due%20to%20reliance%20on%20fraud-prover%20and%20economic%20incentives%2C%20but%20still%20far%20less%20risky%20than%20committee-based%20bridges.%0A%0A%7C%20Design%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Code%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20UI%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Note%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20----------------------------------------------------------------------------------------------------------------------------------------------------%20%7C%20------------------------------------------------------------------%20%7C%20-------------------------------------------------------%20%7C%20--------------------------------%20%7C%0A%7C%20%5BRainbow%5D(https%3A%2F%2Fnear.org%2Fblog%2Feth-near-rainbow-bridge%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Brainbow-bridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge)%20%7C%20%5Brainbowbridge.app%5D(https%3A%2F%2Frainbowbridge.app%2Ftransfer)%20%7C%20By%20NEAR%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20%5BNomad%5D(https%3A%2F%2Fdocs.nomad.xyz%2Fgovernance-bridge%2Farchitecture)%20(%5BIntro%5D(https%3A%2F%2Fmedium.com%2Fnomad-xyz-blog%2Fthe-nomad-design-philosophy-6fc0eacf3263))%20%7C%20%5Bmonorepo%5D(https%3A%2F%2Fgithub.com%2Fnomad-xyz%2Fmonorepo)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bapp.nomad.xyz%5D(https%3A%2F%2Fapp.nomad.xyz%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Hacked%20%5C%24200M%20(engineering%20flaw)%20%7C%0A%7C%20%5BDarwinia%5D(https%3A%2F%2Fdocs.darwinia.network%2F)%20(%5BPaper%5D(https%3A%2F%2Fdarwinia.network%2Fitering_io_optimistic_bridge_technical_paper_en.pdf))%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bdarwinia%5D(https%3A%2F%2Fgithub.com%2Fdarwinia-network%2Fdarwinia)%20%20%20%20%20%20%20%20%20%20%20%7C%20TBD%20%2F%20%5BExplorer%5D(https%3A%2F%2Fdarwinia.subscan.io%2F)%20%20%20%20%20%20%20%20%20%20%7C%0A%0A%23%23%23%20Committee%20Based%0A%0A%7C%20Sub%20Category%20%20%20%20%20%20%20%20%20%7C%20Type%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Design%2FDocsmplementationrontendrotocol%20Validators%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BCosmos%20Gravity%20Bridge%5D(https%3A%2F%2Fwww.gravitybridge.net%2Ffaqgravity-bridge%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fgravity-bridge)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bhttps%3A%2F%2Fbridge.blockscape.network%2F%5D(https%3A%2F%2Fbridge.blockscape.network%2F)%20%5Bhttps%3A%2F%2Femeris.com%2F%20(ON%20HOLD)%5D(https%3A%2F%2Femeris.com%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Proof%20of%20Stake%20Chain%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BAxelar%5D(https%3A%2F%2Faxelar.network%2Faxelar_whitepaper.pdf)%20%5Bdocs%5D(https%3A%2F%2Fdocs.axelar.dev%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Baxelar-core%5D(https%3A%2F%2Fgithub.com%2Faxelarnetwork%2Faxelar-coreroof%20of%20Stake%20Chain%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BCeler%20cBridge%5D(https%3A%2F%2Fcbridge-docs.celer.network%2F)%20%5BCeler%20Network%20Whitepaper%5D(https%3A%2F%2Fceler.network%2Fdoc%2FCelerNetwork-Whitepaper.pdf)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BcBridge-node%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2FcBridge-node)%2C%20%5BcBridge-contracts%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2FcBridge-contracts)%2C%20%5BcBridge-cowa%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2Fcbridge-cowa)%20%7C%20%5Bhttps%3A%2F%2Fcbridge.celer.network%2F%5D(https%3A%2F%2Fcbridge.celer.network%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20External%20Networks%20%20%20%20%7C%20Multisig%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BHorizon%201.0%5D(https%3A%2F%2Fmedium.com%2Fharmony-one%2Fintroducing-horizon-an-ethereum-harmony-cross-chain-bridge-2f56ed7214b3)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bgithub%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fhorizon)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20OBSOLETE%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20External%20Networks%20%20%20%20%7C%20Multisig%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BWormhole%5D(https%3A%2F%2Fbook.wormhole.com%2Fwormhole%2F2_architectureOverview.htmlwormhole%5D(https%3A%2F%2Fgithub.com%2Fwormhole-foundation%2Fwormhole)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bnetwork%5D(https%3A%2F%2Fwormhole.com%2Fnetwork%2F)%20%5Becosystem%5D(https%3A%2F%2Fwormhole.com%2Fecosystem%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20External%20Networks%20%20%20%20%7C%20Decentralized%20Oracle%20Network%20(DON)%20%7C%20%5BChainlink%20(CCIP)%5D(https%3A%2F%2Fblog.chain.link%2Fintroducing-the-cross-chain-interoperability-protocol-ccip%2F)%2C%20%5Bweb%5D(https%3A%2F%2Fchain.link%2Fcross-chain)%20%5BChainlink%20Whitepaper%5D(https%3A%2F%2Fresearch.chain.link%2Fwhitepaper-v2.pdf%3F_ga%3D2.40239147.884807142.1677705772-204109244.1677705772)%20%7C%20%5Bccip-read%5D(https%3A%2F%2Fgithub.com%2Fsmartcontractkit%2Fccip-readxternal%20Networks%20%20%20%20%7C%20Decentralized%20Oracle%20Network%20(DON)%20%7C%20%5BLayerZero%5D(https%3A%2F%2Flayerzero.network%2Fpdf%2FLayerZero_Whitepaper_Release.pdf)%2C%20%5Bdocs%5D(https%3A%2F%2Flayerzero.gitbook.io%2Fdocs%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BLayerZero%5D(https%3A%2F%2Fgithub.com%2FLayerZero-Labs%2FLayerZero)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bhttps%3A%2F%2Ftheaptosbridge.com%2Fbridge%5D(https%3A%2F%2Ftheaptosbridge.com%2Fbridge)%20%5Bhttps%3A%2F%2Fbitcoinbridge.network%2Fbridge%5D(https%3A%2F%2Fbitcoinbridge.network%2Fbridge)%20%5Bhttps%3A%2F%2Fbridge.harmony.one%2Fone%5D(https%3A%2F%2Fbridge.harmony.one%2Fone)%20%7C%0A%7C%20External%20Networks%20%20%20%20%7C%20Multi-Party%20Communication%20(MPC)%20%20%20%20%7C%20%5BMultichain%20bridge%5D(https%3A%2F%2Fdocs.multichain.org%2Fgetting-started%2Fintroductionross-Chain-Bridge%5D(https%3A%2F%2Fgithub.com%2Fanyswap%2FCrossChain-Bridge)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bhttps%3A%2F%2Fbsc.anyswap.exchange%2F%5D(https%3A%2F%2Fbsc.anyswap.exchange%2Fbridge%23%2Frouter)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20External%20Networks%20%20%20%20%7C%20Multi-Party%20Communication%20(MPC)%20%20%20%20%7C%20%5BSynapse%20Protocol%5D(https%3A%2F%2Fmedium.com%2Fsynapse-protocol%2Fintroducing-synapse-protocol-2af926143deb)%2C%20%5Bdocs%5D(https%3A%2F%2Fdocs.synapseprotocol.com%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bsynapsecns%5D(https%3A%2F%2Fgithub.com%2Forgs%2Fsynapsecns%2Frepositories)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bhttps%3A%2F%2Fsynapseprotocol.com%2F%5D(https%3A%2F%2Fsynapseprotocol.com%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%0A%23%23%23%20Others%0A%0A%7C%20Sub%20Category%20%20%20%20%20%20%7C%20Type%20%7C%20Design%2FDocs%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Implementation%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Frontendrollup-to-rollup%20%20%7C%20%20%20%20%20%20%7C%20%5BHop%20Protocol%5D(https%3A%2F%2Fhop.exchange%2Fwhitepaper.pdf)%2C%20%5Bdocs%5D(https%3A%2F%2Fdocs.hop.exchange%2Fbasics%2Fa-short-explainer)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bcontracts%5D(https%3A%2F%2Fgithub.com%2Fhop-protocol%2Fcontracts)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bhttps%3A%2F%2Fapp.hop.exchange%2F%5D(https%3A%2F%2Fapp.hop.exchange%2F)%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20mesh-network%20%20%20%20%20%20%7C%20%20%20%20%20%20%7C%20%5BRouter%20Protocol%5D(https%3A%2F%2Fdocs.routerprotocol.com%2Fwhitepaper%2Fintroducing-router-protocol%2Farchitecture)%2C%20%5Bdocs%5D(https%3A%2F%2Fdev.routerprotocol.com%2F)%20%7C%20%5BRouter%20Protocol%5D(https%3A%2F%2Fgithub.com%2Forgs%2Frouter-protocol%2Frepositories)%20%20%20%20%20%20%7C%20%5Bhttps%3A%2F%2Fapp.thevoyager.io%2Fswap%5D(https%3A%2F%2Fapp.thevoyager.io%2Fswap)%20%7C%0A%7C%20Bridge%20Components%20%7C%20%20%20%20%20%20%7C%20%5BParity%20Bridges%20Common%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fparity-bridges-common%23high-level-architecture)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bparity-bridges-common%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fparity-bridges-common)%20%7C%20TBD%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%0A%23%23%23%20Miscellaneous%0A%0A-%20TVL%20of%20bridges%20can%20be%20found%20on%20%5BDeFi%20Llama%5D(https%3A%2F%2Fdefillama.com%2Fprotocols%2FBridge)%0A-%20Some%20tools%20and%20queries%20are%20already%20prepared%20on%20Dune%20Analytics%20for%20analysis%20of%20bridge%20volume.%20See%20for%20example%3A%20https%3A%2F%2Fdune.com%2Fqueries%2F511393.%0A%0A%23%23%20Bridging%20Components%0A%0AFollowing%20are%20the%20main%20components%20for%20Cross-Chain%20Bridges%20we%20review%0A%0A-%20Approach%20%3A%20The%20design%20approach%20for%20the%20bridge%0A-%20Proving%20Mechanisms%3A%20How%20do%20we%20ensure%20transactions%20are%20valid%0A%20%20-%20Transaction%20Proofs%3A%20How%20do%20we%20ensure%20a%20transacion%20was%20included%20in%20a%20valid%20block%0A%20%20-%20Block%20Proofs%3A%20How%20do%20we%20ensure%20a%20block%20was%20included%20in%20the%20canonical%20chain%0A-%20Relayer%20Mechanisms%0A%20%20-%20Relaying%3A%20How%20do%20we%20relay%20messages%20(blocks%20and%20transactions)%20between%20chains%0A-%20Light%20Clients%3A%20What%20Light%20client%20approaches%20can%20we%20leverage%0A-%20Token%20Lockers%3A%20How%20do%20we%20safely%20store%20bridged%20assets%20in%20a%20trustless%20cost%20effective%20way%0A-%20Multi-chain%20support%3A%20What%20chains%20are%20supported%20and%20what%20is%20the%20proces%20to%20add%20additional%20chains.%0A-%20Economics%3A%20What%20are%20the%20costs%20for%20bridging%20between%20chains%20and%20how%20do%20we%20secure%20and%20incentivize%20validators%20and%20relayers.%0A%0A%23%23%20Cross%20Chain%20Communication%20Protocols%0A%0A-%20%5BINTER%E2%80%91BLOCKCHAINCOMMUNICATION%20PROTOCOL%5D(https%3A%2F%2Fibcprotocol.org%2F)%0A-%20%5BCosmos%20IBC%3A%20Interchain%20Standards%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc)%0A-%20%5BIBC%20Update%E2%80%94%20The%20Internet%20of%20Blockchains%20Is%20Growing%20Fast%5D(https%3A%2F%2Fblog.cosmos.network%2Fibc-update-the-internet-of-blockchains-is-growing-fast-dae883228ebf)%0A-%20%5BPolkadot%20Cross-Consensus%20Message%20(XCM)%20Format%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fxcm-format%2Fblob%2Fmaster%2FREADME.mdx)%0A-%20%5BXCMP%20Design%5D(https%3A%2F%2Fresearch.web3.foundation%2Fen%2Flatest%2Fpolkadot%2FXCMP%2Findex.html)%0A-%20%5BHRMP%20Channels%5D(https%3A%2F%2Fresearch.web3.foundation%2Fen%2Flatest%2Fpolkadot%2FXCMP%2FHRMP%2520channels.html)%0A-%20%5BThe%20Path%20of%20a%20Parachain%20Block%5D(https%3A%2F%2Fpolkadot.network%2Fblog%2Fthe-path-of-a-parachain-block%2F)%0A-%20%5BParity%20Bridges%20Common%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fparity-bridges-common%2Fblob%2Fmaster%2FREADME.mdx)%0A%0A%23%23%20Bridge%20Attack%20Vectors%20and%20Hacks%0A%0AFollowing%20is%20an%20overview%20of%20some%20common%20bridge%20attack%20vectors.%0A%0A-%20%5BVitalik%3B%20security%20limits%20of%20bridges%5D(https%3A%2F%2Fold.reddit.com%2Fr%2Fethereum%2Fcomments%2Frwojtk%2Fama_we_are_the_efs_research_team_pt_7_07_january%2Fhrngyk8%2F)%0A%0A%3E%20Now%2C%20imagine%20what%20happens%20if%20you%20move%20100%20ETH%20onto%20a%20bridge%20on%20Solana%20to%20get%20100%20Solana-WETH%2C%20and%20then%20Ethereum%20gets%2051%25%20attacked.%20The%20attacker%20deposited%20a%20bunch%20of%20their%20own%20ETH%20into%20Solana-WETH%20and%20then%20reverted%20that%20transaction%20on%20the%20Ethereum%20side%20as%20soon%20as%20the%20Solana%20side%20confirmed%20it.%20The%20Solana-WETH%20contract%20is%20now%20no%20longer%20fully%20backed%2C%20and%20perhaps%20your%20100%20Solana-WETH%20is%20now%20only%20worth%2060%20ETH.%20Even%20if%20there's%20a%20perfect%20ZK-SNARK-based%20bridge%20that%20fully%20validates%20consensus%2C%20it's%20still%20vulnerable%20to%20theft%20through%2051%25%20attacks%20like%20this.%0A%3E%0A%3E%20It's%20always%20safer%20to%20hold%20Ethereum-native%20assets%20on%20Ethereum%20or%20Solana-native%20assets%20on%20Solana%20than%20it%20is%20to%20hold%20Ethereum-native%20assets%20on%20Solana%20or%20Solana-native%20assets%20on%20Ethereum.%20And%20in%20this%20context%2C%20%22Ethereum%22%20refers%20not%20just%20to%20the%20base%20chain%2C%20but%20also%20any%20proper%20L2%20that%20is%20built%20on%20it.%20If%20Ethereum%20gets%2051%25%20attacked%20and%20reverts%2C%20Arbitrum%20and%20Optimism%20revert%20too%2C%20and%20so%20%22cross-rollup%22%20applications%20that%20hold%20state%20on%20Arbitrum%20and%20Optimism%20are%20guaranteed%20to%20remain%20consistent%20even%20if%20Ethereum%20gets%2051%25%20attacked.%20And%20if%20Ethereum%20does%20not%20get%2051%25%20attacked%2C%20there's%20no%20way%20to%2051%25%20attack%20Arbitrum%20and%20Optimism%20separately.%20Hence%2C%20holding%20assets%20issued%20on%20Optimism%20wrapped%20on%20Arbitrum%20is%20still%20perfectly%20safe.%0A%3E%0A%3E%20Why%20a%20rollup%20can't%20just%20%22go%20use%20another%20data%20layer%22.%20If%20a%20rollup%20stores%20its%20data%20on%20Celestia%20or%20BCH%20or%20whatever%20else%20but%20deals%20with%20assets%20on%20Ethereum%2C%20if%20that%20layer%20gets%2051%25%20attacked%20you're%20screwed.%20The%20DAS%20on%20Celestia%20providing%2051%25%20attack%20resistance%20doesn't%20actually%20help%20you%20because%20the%20Ethereum%20network%20isn't%20reading%20that%20DAS%3B%20it%20would%20be%20reading%20a%20bridge%2C%20which%20would%20be%20vulnerable%20to%2051%25%20attacks.%20To%20be%20a%20rollup%20that%20provides%20security%20to%20applications%20using%20Ethereum-native%20assets%2C%20you%20have%20to%20use%20the%20Ethereum%20data%20layer%20(and%20likewise%20for%20any%20other%20ecosystem).%0A%0AHere%20are%20some%20sample%20hacks%0A%0A-%20%5BVulnerabilities%20in%20Cross-chain%20Bridge%20Protocols%20Emerge%20as%20Top%20Security%20Risk%5D(https%3A%2F%2Fblog.chainalysis.com%2Freports%2Fcross-chain-bridge-hacks-2022%2F)%0A%0A%3E%20Following%20last%20night%E2%80%99s%20exploit%20of%20the%20Nomad%20Bridge%2C%20Chainalysis%20estimates%20that%20%242%20billion%20in%20cryptocurrency%20has%20been%20stolen%20across%2013%20separate%20cross-chain%20bridge%20hacks%2C%20the%20majority%20of%20which%20was%20stolen%20this%20year.%20Attacks%20on%20bridges%20account%20for%2069%25%20of%20total%20funds%20stolen%20in%202022%20so%20far.%0A%0A-%20%5BEXPLAINED%3A%20THE%20QUBIT%20HACK%20(JANUARY%202022)%5D(https%3A%2F%2Fhalborn.com%2Fexplained-the-qubit-hack-january-2022%2F)%0A%0A%3E%20The%20exploited%20contract%20used%20a%20modified%20safeTransferFrom()%20function%20which%20instead%20of%20making%20use%20of%20functionCall()%20to%20verify%20that%20the%20target%20address%20contained%20contract%20code%2C%20used%20the%20call()%20function%20directly.%20As%20the%200%20address%20has%20no%20code%20at%20all%2C%20no%20code%20is%20run%2C%20and%20the%20call%20is%20completed%20successfully%20without%20reverting.%20As%20a%20result%2C%20the%20deposit%20function%20executed%20successfully%20but%20no%20real%20tokens%20were%20deposited.%0A%3E%0A%3E%20The%20Ethereum%20QBridge%20caught%20the%20Deposit%20event%20and%20interpreted%20it%20as%20a%20valid%20deposit%20of%20ETH.%20As%20a%20result%2C%20qXETH%20tokens%20were%20minted%20for%20the%20attacker%20on%20BSC.%0A%0A-%20%5BEXPLAINED%3A%20THE%20WORMHOLE%20HACK%20(FEBRUARY%202022)%5D(https%3A%2F%2Fhalborn.com%2Fexplained-the-wormhole-hack-february-2022%2F)%0A%0A%3E%20The%20actual%20extraction%20of%20120k%20ETH%20from%20the%20Wormhole%20bridge%20came%20at%20the%20end%20of%20a%20series%20of%20events.%20The%20actual%20flow%20of%20the%20attack%20was%3A%0A%3E%0A%3E%201.%20The%20attacker%20creates%20a%20validator%20action%20approval%20(VAA)%20with%20a%20call%20to%20post_vaa%0A%3E%202.%20This%20VAA%20was%20used%20in%20a%20call%20to%20complete_wrapped%20to%20mint%20the%20120%2C000%20ETH%20extracted%20in%20the%20attack%0A%3E%203.%20The%20attacker%20%E2%80%9Clegitimately%E2%80%9D%20extracted%20the%20minted%20tokens%20from%20the%20bridge%0A%3E%0A%3E%20The%20vulnerability%20that%20made%20the%20attack%20possible%20was%20a%20failure%20to%20perform%20proper%20signature%20verification%20in%20the%20VAA%20creation%20process.%20The%20role%20of%20signature%20verification%20is%20delegated%20several%20times%20from%20post_vaa%20to%20verify_signatures%20to%20Secp256k1.%0A%0A-%20%5BEXPLAINED%3A%20THE%20RONIN%20HACK%20(MARCH%202022)%5D(https%3A%2F%2Fhalborn.com%2Fexplained-the-ronin-hack-march-2022%2F)%0A%0A%3E%20The%20Ronin%20Network%20attack%20was%20extremely%20stealthy.%20In%20fact%2C%20the%20hack%20wasn%E2%80%99t%20noticed%20until%20six%20days%20after%20it%20occurred%20when%20the%20project%20team%20was%20notified%20by%20a%20user%20that%20they%20couldn%E2%80%99t%20withdraw%20about%205k%20ETH%20from%20the%20project%E2%80%99s%20bridge.%20Further%20investigation%20discovered%20the%20largest%20hack%20in%20DeFi%20history%20to%20date.%0A%3E%0A%3E%20The%20Ronin%20Network%20hack%20was%20made%20possible%20by%20compromised%20private%20keys.%20The%20Ronin%20Network%20uses%20a%20set%20of%20nine%20validator%20nodes%20to%20approve%20transactions%20on%20the%20bridge%2C%20and%20a%20deposit%20or%20withdrawal%20requires%20approval%20by%20a%20majority%20of%20five%20of%20these%20nodes.%20The%20attacker%20gained%20control%20of%20four%20validators%20controlled%20by%20Sky%20Mavis%20and%20a%20third-party%20Axie%20DAO%20validator%20that%20signed%20their%20malicious%20transactions.%0A%0A-%20%5BEXPLAINED%3A%20THE%20HARMONY%20HORIZON%20BRIDGE%20HACK%5D(https%3A%2F%2Fhalborn.com%2Fexplained-the-harmony-horizon-bridge-hack%2F)%0A%0A%3E%20Like%20most%20cross-chain%20bridges%2C%20the%20Harmony%20Horizon%20Bridge%20has%20a%20validation%20process%20for%20approving%20transactions%20being%20transferred%20over%20the%20bridge.%20In%20this%20case%2C%20the%20approvals%20process%20uses%20a%20multi-signature%20scheme%20with%20five%20validators.%0A%3E%0A%3E%20However%2C%20the%20bridge%20only%20used%20a%202%20of%205%20validation%20scheme.%20This%20means%20that%20only%20two%20blockchain%20accounts%20needed%20to%20be%20compromised%20for%20an%20attacker%20to%20approve%20any%20malicious%20transaction%20that%20they%20wished.%0A%3E%0A%3E%20The%20Harmony%20Horizon%20bridge%20was%20exploited%20via%20the%20theft%20of%20two%20private%20keys.%20These%20private%20keys%20were%20encrypted%20with%20both%20a%20passphrase%20and%20a%20key%20management%20service%2C%20and%20no%20system%20had%20access%20to%20multiple%20plaintext%20keys.%20However%2C%20the%20attacker%20managed%20to%20access%20and%20decrypt%20multiple%20keys.%0A%3E%0A%3E%20With%20access%20to%20two%20of%20the%20bridge%E2%80%99s%20private%20keys%2C%20the%20attacker%20could%20create%20a%20transaction%20extracting%20%24100%20million%20from%20the%20bridge%20and%20confirm%20it%20using%20two%20accounts%20under%20their%20control.%0A%0A-%20%5BTHE%20NOMAD%20BRIDGE%20HACK%3A%20A%20DEEPER%20DIVE%5D(https%3A%2F%2Fhalborn.com%2Fthe-nomad-bridge-hack-a-deeper-dive%2F)%0A%0A%3E%20On%20August%201%2C%20DeFi%20bridge%20Nomad%20was%20hacked%20for%20over%20%24190M.%0A%3E%0A%3E%20After%20a%20frenzied%20hack%20from%20hundreds%20of%20wallets%2C%20the%20bridge%E2%80%99s%20TVL%20dropped%20from%20%24190%2C740%2C000%20to%20%241%2C794%20in%20mere%20hours.%20The%20hack%20involved%20a%20total%20of%20960%20transactions%20with%201%2C175%20individual%20withdrawals%20from%20the%20bridge.%0A%3E%20According%20to%20Nomad%E2%80%99s%20post-mortem%2C%20an%20implementation%20bug%20in%20a%20June%2021%20smart%20contract%20upgrade%20caused%20the%20Replica%20contract%20to%20fail%20to%20authenticate%20messages%20properly.%20This%20issue%20meant%20that%20any%20message%20could%20be%20forged%20as%20long%20as%20it%20had%20not%20already%20been%20processed.%0A%3E%0A%3E%20As%20a%20result%2C%20contracts%20relying%20on%20the%20Replica%20for%20authentication%20of%20inbound%20messages%20suffered%20security%20failures.%20From%20there%2C%20this%20authentication%20failure%20resulted%20in%20fraudulent%20messages%20being%20passed%20to%20the%20Nomad%20BridgeRouter%20contract.%0A%0A%23%23%20References%0A%0ABackground%20and%20Overview%0A%0A-%20%5BHarmony%E2%80%99s%20Cross-Chain%20Future%5D(https%3A%2F%2Fmedium.com%2Fharmony-one%2Fharmonys-cross-chain-future-41d02d53b10)%0A-%20%5BAwesome%20Interoperability%5D(https%3A%2F%2Fgithub.com%2Fnomad-xyz%2Fawesome-interop)%3A%20A%20curated%20list%20of%20awesome%20interoperability%20resources%2C%20libraries%2C%20tools%20and%20more.%0A-%20%5BVitalik%3A%20why%20the%20future%20will%20be%20_multi-chain_%2C%20but%20it%20will%20not%20be%20_cross-chain_%5D(https%3A%2F%2Ftwitter.com%2Fvitalikbuterin%2Fstatus%2F1479501366192132099%3Flang%3Den)%0A-%20%5BVitalik%E2%80%99s%20Annotated%20Ethereum%202.0%20Spec%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2FSkeyEI3xv)%0A%0ABackground%20and%20Overview%20(Zero%20Knowledge%20Related)%0A%0A-%20%5BBridging%20the%20Multichain%20Universe%20with%20Zero%20Knowledge%20Proofs%5D(https%3A%2F%2Fmedium.com%2F%40ingonyama%2Fbridging-the-multichain-universe-with-zero-knowledge-proofs-6157464fbc86)%0A-%20%5Bawesome-zkml%5D(https%3A%2F%2Fgithub.com%2Fworldcoin%2Fawesome-zkml)%0A%0AMathematical%20Theory%0A%0A-%20%5BElliptic%20Curve%20Cryptography%3A%20a%20gentle%20introduction%5D(https%3A%2F%2Fandrea.corbellini.name%2F2015%2F05%2F17%2Felliptic-curve-cryptography-a-gentle-introduction%2F)%0A-%20%5BExploring%20Elliptic%20Curve%20Pairings%5D(https%3A%2F%2Fvitalik.ca%2Fgeneral%2F2017%2F01%2F14%2Fexploring_ecp.html)%0A%0AMathematical%20Theory%20(Zero%20Knowledge%20Related)%0A%0A-%20%5BKZG%20polynomial%20commitments%5D(https%3A%2F%2Fdankradfeist.de%2Fethereum%2F2020%2F06%2F16%2Fkate-polynomial-commitments.html)%0A%0AResearch%20Papers%0A%0A-%20%5BFraud%20and%20Data%20Availability%20Proofs%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F1809.09044.pdf)%3A%20Maximising%20Light%20Client%20Security%20and%20Scaling%20Blockchains%20with%20Dishonest%20Majorities.%20_Light%20clients%2C%20also%20known%20as%20Simple%20Payment%20Verification%20(SPV)%20clients%2C%20are%20nodes%20which%20only%20download%20a%20small%20portion%20of%20the%20data%20in%20a%20blockchain%2C%20and%20use%20indirect%20means%20to%20verify%20that%20a%20given%20chain%20is%20valid._%0A%0AResearch%20Articles%0A%0A-%20%5BPaths%20toward%20single-slot%20finality%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fsingle_slot_finality)%3A%20A%20look%20at%20how%20to%20improve%20Ethereum%E2%80%99s%20LMD%20GHOST%20%2B%20Casper%20FFG%20consensus.%0A%0AResearch%20Papers%20(Zero%20Knowledge%20Related)%0A%0A-%20%5BzkBridge%3A%20Trustless%20Cross-chain%20Bridges%20Made%20Practical%5D(https%3A%2F%2Frdi.berkeley.edu%2Fzkp%2FzkBridge%2Fuploads%2Fpaper.pdf)%0A-%20%5BzkPoS%3A%20End-to-End%20Trustless%5D(https%3A%2F%2Fhyperoracle.medium.com%2Fzkpos-end-to-end-trustless-65edccd87c5a)%3A%20HyperOracle%20article%20on%20how%20zkPoS%20provides%20the%20ability%20of%20proving%20the%20consensus%20with%20ZK.%0A-%20%5BCaulk%3A%20Lookup%20Arguments%20in%20Sublinear%20Time%5D(https%3A%2F%2Feprint.iacr.org%2F2022%2F621.pdf)%0A-%20%5BHyperPlonk%3A%20Plonk%20with%20Linear-Time%20Prover%20and%20High-Degree%20Custom%20Gates%5D(https%3A%2F%2Feprint.iacr.org%2F2022%2F1355.pdf)%0A%0AResearch%20Articles%20(Zero%20Knowledge%20Related)%0A%0A-%20%5BSLONK%E2%80%94a%20simple%20universal%20SNARK%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fslonk-a-simple-universal-snark%2F6420)%3A%20a%20simplification%20to%20PLONK%20called%20SLONK.%20We%20replace%20the%20permutation%20argument%20(the%20%E2%80%9CP%E2%80%9D%20in%20PLONK)%20in%20favour%20of%20a%20shift%20argument%20(the%20%E2%80%9CS%E2%80%9D%20in%20SLONK).%20We%20get%20a%20universal%20SNARK%20with%20the%20smallest%20known%20proof%20size%20and%20verification%20time.%0A-%20%5BKate%20commitments%20from%20the%20Lagrange%20basis%20without%20FFTs%5D(https%3A%2F%2Fnotes.ethereum.org%2FT0ZVaaywQAqP4jegqO3asg%3Fview)%3A%20how%20to%20commit%2C%20evaluate%20and%20open%20polynomials%20in%20the%20Lagrange%20basis%20without%20FFTs.%20This%20is%20the%20first%20part%20in%20a%20series%20(see%20part%201%2C%20part%202%2C%20part%203)%20showing%20how%20to%20do%20PLONK-style%20universal%20SNARKs%20without%20FFTs%0A-%20%5BHadamard%20checks%20from%20the%20Lagrange%20basis%20without%20FFTs%5D(https%3A%2F%2Fnotes.ethereum.org%2FIl4z42lmQtaUYFigsjsk2Q%3Fview)%3A%20how%20to%20prove%20Hadamard%20relations%20between%20polynomials%20in%20the%20Lagrange%20basis%20without%20FFTs.%20This%20is%20the%20second%20part%20(see%20part%201%2C%20part%202%2C%20part%203)%20in%20a%20series%20showing%20how%20to%20do%20PLONK-style%20universal%20SNARKs%20without%20FFTs.%0A-%20%5BPLONK-style%20SNARKs%20without%20FFTs%5D(https%3A%2F%2Fnotes.ethereum.org%2FDLRqK9V7RIOsTZkab8Hm_Q%3Fview)%3A%20how%20to%20do%20PLONK-style%20universal%20SNARKs%20without%20FFTs.%20This%20is%20part%203%20in%20a%20series%20(part%201%2C%20part%202%2C%20part%203).%0A%0AImplementation%20Articles%0A%0A-%20%5BzkBridge%3A%20Trustless%20Cross-chain%20Bridges%20Made%20Practical%5D(https%3A%2F%2Frdi.berkeley.edu%2Fzkp%2FzkBridge%2FzkBridge.html)%0A-%20%5BSuccinct%20Towards%20the%20endgame%20of%20blockchain%20interoperability%20with%20proof%20of%20consensus%5D(https%3A%2F%2Fblog.succinct.xyz%2Fpost%2F2022%2F09%2F20%2Fproof-of-consensus)%0A%0AImplementations%0A%0A-%20%5BWormhole%20ethereum%20contracts%20Implementaion.sol%5D(https%3A%2F%2Fgithub.com%2Fwormhole-foundation%2Fwormhole%2Fblob%2Fdev.v2%2Fethereum%2Fcontracts%2FImplementation.sol)%0A-%20%5Bbls%20verification%20contract%5D(https%3A%2F%2Fgithub.com%2Fsemaraugusto%2Fbls-verification-contract%2Fblob%2Fmaster%2Fcontracts%2Fverifier.sol)%0A%0ADocumentation%0A%0A-%20%5BETHEREUM%20DEVELOPMENT%20DOCUMENTATION%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2F)%0A-%20%5BMINA%20docs%5D(https%3A%2F%2Fdocs.minaprotocol.com%2F)%0A%0AAdditional%20References%0A%0A-%20%5Bnil-Foundation%20ETH-Mina%20bridge%20live%20on%20Ethereum%20testnet%20Ropsten%5D(https%3A%2F%2Fminacrypto.com%2F2022%2F04%2F27%2Fnil-foundation%2F)%0A%0A%23%23%20Bridge%20Implementation%20References%0A%0A-%20%5BHarmony%20Horizon%20Bridge%5D(.%2Fharmony-horizon)%3A%20Detailed%20code%20review%0A%20%20-%20%5BHorizon%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2)%3A%20javascript%2C%20solidity%0A-%20Near%20Rainbow%20Bridge%3A%20Codebases%0A%20%20-%20%5BNear%20Rainbow%20Bridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge)%3A%20rust%2C%20go%2C%20solidity%2C%20javascript%0A%20%20-%20%5BNear%20Rainbow%20Token%20Connector%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector)%3A%20soldity%0A%20%20-%20SDK%0A%20%20%20%20-%20%5BNear%20Rainbow%20Bridge%20Client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge-client%2Ftree%2Fmain%2Fpackages%2Fclient)%3A%20typescript%0A%20%20-%20Frontend%0A%20%20%20%20-%20%5BNEAR%20Rainbow%20Bridge%20Frontend%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge-frontend)%0A-%20%5BNomad%20monprepo%5D(https%3A%2F%2Fgithub.com%2Fnomad-xyz%2Fmonorepo)%3A%20Nomad%20is%20a%20cross-chain%20communication%20protocol.%20This%20repo%20contains%20the%20following%3A%20Smart%20contracts%20for%20the%20core%20Nomad%20protocol%2C%20Smart%20contracts%20for%20the%20Nomad%20token%20bridge%20SDKs%20for%20Nomad's%20core%20protocol%2C%20bridge%2C%20and%20governance%20systems%2C%20Tooling%20for%20local%20environment%20simulation%20and%20Smart%20contract%20deployment%20tooling.%0A%20%20-%20%5BNomad%20rust%5D(https%3A%2F%2Fgithub.com%2Fnomad-xyz%2Frust)%3A%20Nomad%20is%20a%20cross-chain%20communication%20standard%20that%20supports%20passing%20messages%20between%20blockchains%20easily%20and%20inexpensively.%20Like%20IBC%20light%20clients%20and%20similar%20systems%2C%20Nomad%20establishes%20message-passing%20channels%20between%20chains.%20Once%20a%20channel%20is%20established%2C%20any%20application%20on%20that%20chain%20can%20use%20it%20to%20send%20messages%20to%20others%20chains.%0A%20%20-%20%5BNomad%20gelato-sdk%5D(https%3A%2F%2Fgithub.com%2Fnomad-xyz%2Fgelato-sdk)%3A%20This%20crate%20reimplements%20Gelato's%20Relay%20SDK%20in%20Rust.%20It%20simply%20wraps%20Gelato%20Relay%20requests%20and%20responses%20to%2Ffrom%20Gelato%20endpoints%20with%20Rust%20types%20and%20methods.%0A-%20%5BSuccinct%20labs%5D(..%2Fbridge%2Fsuccinct)%3A%20Deep%20dive%20on%20Succinct%20labs%20Proof%20of%20Consensus%20for%20Ethreum.%0A%20%20-%20%5BProof%20of%20Consensus%20for%20Ethereum%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus)%3A%20contains%20both%20the%20zkSNARK%20circuits%20as%20well%20as%20the%20smart%20contracts%20needed%20for%20our%20succinct%20light%20client%20implementation%2C%20as%20well%20as%20prototype%20message%20passing%20contracts%20and%20bridge%20contracts.%0A-%20%5BDatachain%20lcp%5D(https%3A%2F%2Fgithub.com%2Fdatachainlab%2Fharmony-cosmos-bridge-demo)A%20proxy%20for%20light%20client%20verification%20executed%20in%20TEE.%0A-%20%5BCosmos%20ibc-go%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc-go)%3A%20allows%20blockchains%20to%20talk%20to%20each%20other.%20This%20end-to-end%2C%20connection-oriented%2C%20stateful%20protocol%20provides%20reliable%2C%20ordered%2C%20and%20authenticated%20communication%20between%20heterogeneous%20blockchains.%0A%20%20-%20%5BCosmos%20ibc%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc)%3A%20ibc%20specification%0A-%20%5BCosmos%20gravity%20bridge%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fgravity-bridge)%3A%20Cosmos%20and%20Ethereum%20bridge%20designed%20to%20run%20on%20the%20Cosmos%20Hub%20focused%20on%20maximum%20design%20simplicity%20and%20efficiency.%0A-%20%5BAxelar%5D(https%3A%2F%2Fgithub.com%2Faxelarnetwork%2Faxelar-core)%3A%20based%20on%20the%20Cosmos%20SDK%20is%20the%20main%20application%20of%20the%20axelar%20network.%20%5Bwhitepaper%5D(https%3A%2F%2Faxelar.network%2Faxelar_whitepaper.pdf)%20%5Bdocs%5D(https%3A%2F%2Fdocs.axelar.dev%2F)%0A-%20%5BCeler%20cBridge-node%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2FcBridge-node)%3A%20Celer%20cBridge%20relay%20node%20implementation%20in%20Golang.%20(%5Bdocs%5D(https%3A%2F%2Fcbridge-docs.celer.network%2F))%0A%20%20-%20%5BCeler%20cBridge-contracts%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2FcBridge-contracts)%3A%20Contracts%20for%20cBridge%2C%20cross-chain%20liquidity%20solution%20powered%20by%20Hashed-Timelock%20Transfers%0A%20%20-%20%5BCeler%20cBridge-cowa%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2Fcbridge-cowa)%3A%20CosmWasm%20Rust%20smart%20contracts%20for%20cbridge%0A-%20%5BWormhole%5D(https%3A%2F%2Fgithub.com%2Fwormhole-foundation%2Fwormhole)%3A%20the%20reference%20implementation%20of%20the%20Wormhole%20protocol.%20(%5Bdocs%5D(https%3A%2F%2Fbook.wormhole.com%2Fintroduction%2Fintroduction.html))%0A-%20%5BLayerZero%20Labs%20LayerZero%5D(https%3A%2F%2Fgithub.com%2FLayerZero-Labs%2FLayerZero)%3A%20contains%20the%20smart%20contracts%20for%20LayerZero%20Endpoints.%20(%5Bdocs%5D(https%3A%2F%2Flayerzero.gitbook.io%2Fdocs%2F))%0A-%20%5BMultichain%20CrossChain-Bridge%5D(https%3A%2F%2Fgithub.com%2Fanyswap%2FCrossChain-Bridge)%3A%20Cross-Chain%20bridge%20based%20on%20Anyswap%20MPC%20network.%20(%5Bdocs%5D(https%3A%2F%2Fdocs.multichain.org%2Fgetting-started%2Fintroduction))%0A-%20%5BSynapse%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fsynapsecns)%3A%20a%20universal%20interoperability%20protocol%20that%20enables%20secure%20cross-chain%20communication.(%20%5Bdocs%5D(https%3A%2F%2Fdocs.synapseprotocol.com%2F))%0A%20%20-%20%5Bsynapse-contracts%5D(https%3A%2F%2Fgithub.com%2Fsynapsecns%2Fsynapse-contracts)%3A%20smart%20contracts%20for%20Synapse%20Protocol.%0A-%20%5BHop%20Protocol%20contracts%5D(https%3A%2F%2Fgithub.com%2Fhop-protocol%2Fcontracts)%3A%20Hop%20is%20a%20scalable%20rollup-to-rollup%20general%20token%20bridge.%20Heare%20are%20the%20smart%20contracts%20that%20power%20the%20Hop%20Exchange.%20(%5Bwhitepaper%5D(https%3A%2F%2Fhop.exchange%2Fwhitepaper.pdf)%2C%20%5Bdocs%5D(https%3A%2F%2Fdocs.hop.exchange%2Fbasics%2Fa-short-explainer)).%0A-%20%5BRouter%20Protocol%5D(https%3A%2F%2Fgithub.com%2Forgs%2Frouter-protocol%2Frepositories)%3A%20(%5Bwhitepaper%5D(https%3A%2F%2Fdocs.routerprotocol.com%2Fwhitepaper%2Fintroducing-router-protocol)%2C%20%5Bdocs%5D(https%3A%2F%2Fdev.routerprotocol.com%2F))%0A-%20%5BParity%20Bridges%20Common%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fparity-bridges-common)%3A%20a%20collection%20of%20components%20for%20building%20bridges.%0A-%20%5BSnowfork%20snowbridge%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge)%3A%20A%20trustless%20bridge%20between%20Polkadot%20and%20Ethereum.%20(%5Bdocs%5D(https%3A%2F%2Fdocs.snowbridge.network%2F))%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./intro-C_ER-rE7.js"),[]),path:"/research/bridge/intro.html",type:"mdx",filePath:"research/bridge/intro.mdx",content:"%23%20Crosschain%20Bridge%20Analysis%20-%20An%20Introduction%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0AHere%20we%20present%20a%20survey%20of%20existing%20bridge%20designs%2C%20historical%20security%20incidents%2C%20and%20a%20brief%20discussion%20of%20common%20components%20and%20where%20ZKP%20may%20be%20used.%0A%0A%23%23%20Bridge%20Taxonomy%0A%0ABridge%20designs%20evolved%20as%20DeFi%20and%20multi-chain%20paradigm%20gained%20popularity.%20Our%20summary%20is%20inspired%20by%20prior%20taxonomy%20work%20by%20%5BGanesha%20Upadhyaya%5D(https%3A%2F%2Ftwitter.com%2Fgupadhyaya)%20in%20%5BA%20Classification%20of%20Various%20Bridging%20Technologies%5D(https%3A%2F%2Fmedium.com%2Fharmony-one%2Fharmonys-cross-chain-future-41d02d53b10)%2C%20%5BDmitriy%20Berenzon%5D(https%3A%2F%2Ftwitter.com%2Fdberenzon)%20in%20%5BBlockchain%20Bridges%3A%20Building%20Networks%20of%20Cryptonetworks%5D(https%3A%2F%2Fmedium.com%2F1kxnetwork%2Fblockchain-bridges-5db6afac44f8)%2C%20and%20by%20multiple%20researchers%20from%20Jump%20Crypto%20in%20%5BSecurity%20Stack-Up%3A%20How%20Bridges%20Compare%5D(https%3A%2F%2Fjumpcrypto.com%2Fsecurity-stack-up-how-bridges-compare%2F)%0A%0A%3E%20At%20a%20very%20high%20level%2C%20there%20are%20two%20types%20of%20bridging%20solutions%3A%201)%20proof-based%20and%202)%20committee-based.%20The%20proof-based%20solutions%20entail%20cryptographic%20proving%20of%20the%20validity%20of%20any%20transaction%20of%20one%20chain%20in%20the%20other%2C%20whereas%20the%20committee-based%20solution%20relies%20on%20the%20social%20consensus%20of%20the%20bridge%20validators%20to%20attest%20for%20the%20transaction%20validity%2C%20which%20often%20involves%20no%20cryptographic%20proving.%0A%3E%0A%3E%20-%20Ganesha%20Upadhyaya%20in%20%22A%20Classification%20of%20Various%20Bridging%20Technologies%22%0A%0A%23%23%23%20Proof%20Based%0A%0A%23%23%23%23%20Validity%20Proofs%0A%0AValidity-proof%20based%20bridges%20prioritize%20security%2C%20trustlessness%2C%20permissionlessness%2C%20and%20delay%20minimization%0A%0A%7C%20Type%20%20%20%7C%20DesignodeotezkBridge%5D(https%3A%2F%2Frdi.berkeley.edu%2Fzkp%2FzkBridge%2Fuploads%2Fpaper.pdfy%20Berkeley%20researcehrs%20(%5BTwitter%5D(https%3A%2F%2Ftwitter.com%2Fzkcollective))%20%7C%0A%7C%20ZKP%20%20%20%20%7C%20%5BTelepathy%5D(https%3A%2F%2Fdocs.telepathy.xyz%2Fprotocol%2Foverview)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BTelepathy%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%3Fq%3Dtelepathy%26type%3Dall%26language%3D%26sort%3D)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BDemo%5D(https%3A%2F%2Fdemo.telepathy.xyz%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20By%20%5BSuccint%20Labs%5D(https%3A%2F%2Fsuccinct.xyz)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Native%20%7C%20%5BHorizon%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F2101.06000.pdf)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BHorizon%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fhorizon)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20TBD%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Inactive.%20By%20Harmony%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Native%20%7C%20%5BIBC%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc)%20(%5BIntro%5D(https%3A%2F%2Ftutorials.cosmos.network%2Facademy%2F3-ibc%2F1-what-is-ibc.html))%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bibc-go%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc-go)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Various%20%2F%20%5BExplorer%5D(https%3A%2F%2Fhub.mintscan.io%2Fchains%2Fibc-network)%20%7C%20Within%20Cosmos%20Network%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Native%20%7C%20%5BGravity%5D(https%3A%2F%2Fgithub.com%2FGravity-Bridge%2FGravity-Bridge%2Fblob%2Fmain%2Fdocs%2Fdesign%2Foverview.mdx)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BGravity%5D(https%3A%2F%2Fgithub.com%2FGravity-Bridge%2FGravity-Bridge)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BGravity%5D(https%3A%2F%2Fbridge.blockscape.network%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Ethereum%20and%20Cosmos%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Native%20%7C%20%5BAWM%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Fxsvm)%20(%5BIntro%5D(https%3A%2F%2Fmedium.com%2Favalancheavax%2Favalanche-warp-messaging-awm-launches-with-the-first-native-subnet-to-subnet-message-on-avalanche-c0ceec32144a))%20%7C%20%5BWrap%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fvms%2Fplatformvm%2Fwarp)%20%2F%20%5BXSVM%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Fxsvm)%20%7C%20TBD%20%2F%20%5BExplorer%5D(https%3A%2F%2Fsubnets.avax.network%2Fsubnets)%20%20%20%20%20%20%20%20%20%20%20%7C%20Within%20Avalanche%20Subnets%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Native%20%7C%20%5BSnowbridge%5D(https%3A%2F%2Fdocs.snowbridge.network%2Farchitecture%2Foverview)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bsnowbridge%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20TBD%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20LCP%20%20%20%20%7C%20%5BDatachain%20LCP%5D(https%3A%2F%2Fmedium.com%2Flcp-network%2Flcp-a-proxy-for-light-client-verification-to-realize-trust-minimized-and-gas-efficient-f7d5868e4b0)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BLCP%5D(https%3A%2F%2Fgithub.com%2Fdatachainlab%2Flcp)%20%2F%20%5BDemo%5D(https%3A%2F%2Fgithub.com%2Fdatachainlab%2Fharmony-cosmos-bridge-demo)%20%20%20%20%20%20%20%20%20%20%20%20%7C%20TBD%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Relies%20on%20TEE%20enclave%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20LCP%20%20%20%20%7C%20%5BAvalanche%5D(https%3A%2F%2Fmedium.com%2Favalancheavax%2Favalanche-bridge-secure-cross-chain-asset-transfers-using-intel-sgx-b04f5a4c7ad1)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20TBD%20%2F%20%5BAudit%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Faudits%2Fblob%2Fmain%2Fbridge%2FAvalanche_Bridge_Security_Audit_Report_Halborn_v1_1.pdf)%20%7C%20%5Bcore.app%5D(https%3A%2F%2Fcore.app%2Fbridge%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Relies%20on%20TEE%20enclave%20(Intel%20SGX)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%0A%23%23%23%23%20Fraud%20Proofs%0A%0AFraud-proof%20based%20bridges%20assume%20all%20participants%20are%20truthful%20unless%20someone%20presents%20a%20proof%20showing%20otherwise.%20As%20a%20result%2C%20they%20must%20leave%20a%20wide%20fraud-proof%20time%20window%20and%20carefully%20design%20economic%20incentives%20for%20such.%20This%20limitation%20inevitably%20incurs%20much%20higher%20delay%2C%20but%20makes%20implementation%20substantially%20easier%20and%20costs%20significantly%20less%20to%20operate%20and%20maintain.%20Fraud-proof%20based%20bridges%20face%20more%20security%20risks%20due%20to%20reliance%20on%20fraud-prover%20and%20economic%20incentives%2C%20but%20still%20far%20less%20risky%20than%20committee-based%20bridges.%0A%0A%7C%20Design%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Code%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20UI%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Note%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20----------------------------------------------------------------------------------------------------------------------------------------------------%20%7C%20------------------------------------------------------------------%20%7C%20-------------------------------------------------------%20%7C%20--------------------------------%20%7C%0A%7C%20%5BRainbow%5D(https%3A%2F%2Fnear.org%2Fblog%2Feth-near-rainbow-bridge%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Brainbow-bridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge)%20%7C%20%5Brainbowbridge.app%5D(https%3A%2F%2Frainbowbridge.app%2Ftransfer)%20%7C%20By%20NEAR%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20%5BNomad%5D(https%3A%2F%2Fdocs.nomad.xyz%2Fgovernance-bridge%2Farchitecture)%20(%5BIntro%5D(https%3A%2F%2Fmedium.com%2Fnomad-xyz-blog%2Fthe-nomad-design-philosophy-6fc0eacf3263))%20%7C%20%5Bmonorepo%5D(https%3A%2F%2Fgithub.com%2Fnomad-xyz%2Fmonorepo)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bapp.nomad.xyz%5D(https%3A%2F%2Fapp.nomad.xyz%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Hacked%20%5C%24200M%20(engineering%20flaw)%20%7C%0A%7C%20%5BDarwinia%5D(https%3A%2F%2Fdocs.darwinia.network%2F)%20(%5BPaper%5D(https%3A%2F%2Fdarwinia.network%2Fitering_io_optimistic_bridge_technical_paper_en.pdf))%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bdarwinia%5D(https%3A%2F%2Fgithub.com%2Fdarwinia-network%2Fdarwinia)%20%20%20%20%20%20%20%20%20%20%20%7C%20TBD%20%2F%20%5BExplorer%5D(https%3A%2F%2Fdarwinia.subscan.io%2F)%20%20%20%20%20%20%20%20%20%20%7C%0A%0A%23%23%23%20Committee%20Based%0A%0A%7C%20Sub%20Category%20%20%20%20%20%20%20%20%20%7C%20Type%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Design%2FDocsmplementationrontendrotocol%20Validators%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BCosmos%20Gravity%20Bridge%5D(https%3A%2F%2Fwww.gravitybridge.net%2Ffaqgravity-bridge%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fgravity-bridge)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bhttps%3A%2F%2Fbridge.blockscape.network%2F%5D(https%3A%2F%2Fbridge.blockscape.network%2F)%20%5Bhttps%3A%2F%2Femeris.com%2F%20(ON%20HOLD)%5D(https%3A%2F%2Femeris.com%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Proof%20of%20Stake%20Chain%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BAxelar%5D(https%3A%2F%2Faxelar.network%2Faxelar_whitepaper.pdf)%20%5Bdocs%5D(https%3A%2F%2Fdocs.axelar.devaxelar-core%5D(https%3A%2F%2Fgithub.com%2Faxelarnetwork%2Faxelar-coreroof%20of%20Stake%20Chain%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BCeler%20cBridge%5D(https%3A%2F%2Fcbridge-docs.celer.network%2F)%20%5BCeler%20Network%20Whitepaper%5D(https%3A%2F%2Fceler.network%2Fdoc%2FCelerNetwork-Whitepaper.pdf)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BcBridge-node%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2FcBridge-node)%2C%20%5BcBridge-contracts%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2FcBridge-contracts)%2C%20%5BcBridge-cowa%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2Fcbridge-cowa)%20%7C%20%5Bhttps%3A%2F%2Fcbridge.celer.network%2F%5D(https%3A%2F%2Fcbridge.celer.network%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20External%20Networks%20%20%20%20%7C%20Multisig%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BHorizon%201.0%5D(https%3A%2F%2Fmedium.com%2Fharmony-one%2Fintroducing-horizon-an-ethereum-harmony-cross-chain-bridge-2f56ed7214b3)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bgithub%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fhorizonxternal%20Networks%20%20%20%20%7C%20Multisig%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BWormhole%5D(https%3A%2F%2Fbook.wormhole.com%2Fwormhole%2F2_architectureOverview.htmlwormhole%5D(https%3A%2F%2Fgithub.com%2Fwormhole-foundation%2Fwormhole)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bnetwork%5D(https%3A%2F%2Fwormhole.com%2Fnetwork%2F)%20%5Becosystem%5D(https%3A%2F%2Fwormhole.com%2Fecosystem%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20External%20Networks%20%20%20%20%7C%20Decentralized%20Oracle%20Network%20(DON)%20%7C%20%5BChainlink%20(CCIP)%5D(https%3A%2F%2Fblog.chain.link%2Fintroducing-the-cross-chain-interoperability-protocol-ccip%2F)%2C%20%5Bweb%5D(https%3A%2F%2Fchain.link%2Fcross-chain)%20%5BChainlink%20Whitepaper%5D(https%3A%2F%2Fresearch.chain.link%2Fwhitepaper-v2.pdf%3F_ga%3D2.40239147.884807142.1677705772-204109244.1677705772)%20%7C%20%5Bccip-read%5D(https%3A%2F%2Fgithub.com%2Fsmartcontractkit%2Fccip-readxternal%20Networks%20%20%20%20%7C%20Decentralized%20Oracle%20Network%20(DON)%20%7C%20%5BLayerZero%5D(https%3A%2F%2Flayerzero.network%2Fpdf%2FLayerZero_Whitepaper_Release.pdf)%2C%20%5Bdocs%5D(https%3A%2F%2Flayerzero.gitbook.io%2Fdocs%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BLayerZero%5D(https%3A%2F%2Fgithub.com%2FLayerZero-Labs%2FLayerZero)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bhttps%3A%2F%2Ftheaptosbridge.com%2Fbridge%5D(https%3A%2F%2Ftheaptosbridge.com%2Fbridge)%20%5Bhttps%3A%2F%2Fbitcoinbridge.network%2Fbridge%5D(https%3A%2F%2Fbitcoinbridge.network%2Fbridge)%20%5Bhttps%3A%2F%2Fbridge.harmony.one%2Fone%5D(https%3A%2F%2Fbridge.harmony.one%2Fone)%20%7C%0A%7C%20External%20Networks%20%20%20%20%7C%20Multi-Party%20Communication%20(MPC)%20%20%20%20%7C%20%5BMultichain%20bridge%5D(https%3A%2F%2Fdocs.multichain.org%2Fgetting-started%2Fintroductionross-Chain-Bridge%5D(https%3A%2F%2Fgithub.com%2Fanyswap%2FCrossChain-Bridge)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bhttps%3A%2F%2Fbsc.anyswap.exchange%2F%5D(https%3A%2F%2Fbsc.anyswap.exchange%2Fbridge%23%2Frouter)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20External%20Networks%20%20%20%20%7C%20Multi-Party%20Communication%20(MPC)%20%20%20%20%7C%20%5BSynapse%20Protocol%5D(https%3A%2F%2Fmedium.com%2Fsynapse-protocol%2Fintroducing-synapse-protocol-2af926143deb)%2C%20%5Bdocs%5D(https%3A%2F%2Fdocs.synapseprotocol.com%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bsynapsecns%5D(https%3A%2F%2Fgithub.com%2Forgs%2Fsynapsecns%2Frepositories)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bhttps%3A%2F%2Fsynapseprotocol.com%2F%5D(https%3A%2F%2Fsynapseprotocol.com%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%0A%23%23%23%20Others%0A%0A%7C%20Sub%20Category%20%20%20%20%20%20%7C%20Type%20%7C%20Design%2FDocs%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Implementation%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Frontendrollup-to-rollup%20%20%7C%20%20%20%20%20%20%7C%20%5BHop%20Protocol%5D(https%3A%2F%2Fhop.exchange%2Fwhitepaper.pdf)%2C%20%5Bdocs%5D(https%3A%2F%2Fdocs.hop.exchange%2Fbasics%2Fa-short-explainer)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bcontracts%5D(https%3A%2F%2Fgithub.com%2Fhop-protocol%2Fcontracts)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bhttps%3A%2F%2Fapp.hop.exchange%2F%5D(https%3A%2F%2Fapp.hop.exchange%2F)%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20mesh-network%20%20%20%20%20%20%7C%20%20%20%20%20%20%7C%20%5BRouter%20Protocol%5D(https%3A%2F%2Fdocs.routerprotocol.com%2Fwhitepaper%2Fintroducing-router-protocol%2Farchitecture)%2C%20%5Bdocs%5D(https%3A%2F%2Fdev.routerprotocol.com%2F)%20%7C%20%5BRouter%20Protocol%5D(https%3A%2F%2Fgithub.com%2Forgs%2Frouter-protocol%2Frepositories)%20%20%20%20%20%20%7C%20%5Bhttps%3A%2F%2Fapp.thevoyager.io%2Fswap%5D(https%3A%2F%2Fapp.thevoyager.io%2Fswap)%20%7C%0A%7C%20Bridge%20Components%20%7C%20%20%20%20%20%20%7C%20%5BParity%20Bridges%20Common%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fparity-bridges-common%23high-level-architecture)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Bparity-bridges-common%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fparity-bridges-common)%20%7C%20TBD%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%0A%23%23%23%20Miscellaneous%0A%0A-%20TVL%20of%20bridges%20can%20be%20found%20on%20%5BDeFi%20Llama%5D(https%3A%2F%2Fdefillama.com%2Fprotocols%2FBridge)%0A-%20Some%20tools%20and%20queries%20are%20already%20prepared%20on%20Dune%20Analytics%20for%20analysis%20of%20bridge%20volume.%20See%20for%20example%3A%20https%3A%2F%2Fdune.com%2Fqueries%2F511393.%0A%0A%23%23%20Bridging%20Components%0A%0AFollowing%20are%20the%20main%20components%20for%20Cross-Chain%20Bridges%20we%20review%0A%0A-%20Approach%20%3A%20The%20design%20approach%20for%20the%20bridge%0A-%20Proving%20Mechanisms%3A%20How%20do%20we%20ensure%20transactions%20are%20valid%0A%20%20-%20Transaction%20Proofs%3A%20How%20do%20we%20ensure%20a%20transacion%20was%20included%20in%20a%20valid%20block%0A%20%20-%20Block%20Proofs%3A%20How%20do%20we%20ensure%20a%20block%20was%20included%20in%20the%20canonical%20chain%0A-%20Relayer%20Mechanisms%0A%20%20-%20Relaying%3A%20How%20do%20we%20relay%20messages%20(blocks%20and%20transactions)%20between%20chains%0A-%20Light%20Clients%3A%20What%20Light%20client%20approaches%20can%20we%20leverage%0A-%20Token%20Lockers%3A%20How%20do%20we%20safely%20store%20bridged%20assets%20in%20a%20trustless%20cost%20effective%20way%0A-%20Multi-chain%20support%3A%20What%20chains%20are%20supported%20and%20what%20is%20the%20proces%20to%20add%20additional%20chains.%0A-%20Economics%3A%20What%20are%20the%20costs%20for%20bridging%20between%20chains%20and%20how%20do%20we%20secure%20and%20incentivize%20validators%20and%20relayers.%0A%0A%23%23%20Cross%20Chain%20Communication%20Protocols%0A%0A-%20%5BINTER%E2%80%91BLOCKCHAINCOMMUNICATION%20PROTOCOL%5D(https%3A%2F%2Fibcprotocol.org%2F)%0A-%20%5BCosmos%20IBC%3A%20Interchain%20Standards%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc)%0A-%20%5BIBC%20Update%E2%80%94%20The%20Internet%20of%20Blockchains%20Is%20Growing%20Fast%5D(https%3A%2F%2Fblog.cosmos.network%2Fibc-update-the-internet-of-blockchains-is-growing-fast-dae883228ebf)%0A-%20%5BPolkadot%20Cross-Consensus%20Message%20(XCM)%20Format%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fxcm-format%2Fblob%2Fmaster%2FREADME.mdx)%0A-%20%5BXCMP%20Design%5D(https%3A%2F%2Fresearch.web3.foundation%2Fen%2Flatest%2Fpolkadot%2FXCMP%2Findex.html)%0A-%20%5BHRMP%20Channels%5D(https%3A%2F%2Fresearch.web3.foundation%2Fen%2Flatest%2Fpolkadot%2FXCMP%2FHRMP%2520channels.html)%0A-%20%5BThe%20Path%20of%20a%20Parachain%20Block%5D(https%3A%2F%2Fpolkadot.network%2Fblog%2Fthe-path-of-a-parachain-block%2F)%0A-%20%5BParity%20Bridges%20Common%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fparity-bridges-common%2Fblob%2Fmaster%2FREADME.mdx)%0A%0A%23%23%20Bridge%20Attack%20Vectors%20and%20Hacks%0A%0AFollowing%20is%20an%20overview%20of%20some%20common%20bridge%20attack%20vectors.%0A%0A-%20%5BVitalik%3B%20security%20limits%20of%20bridges%5D(https%3A%2F%2Fold.reddit.com%2Fr%2Fethereum%2Fcomments%2Frwojtk%2Fama_we_are_the_efs_research_team_pt_7_07_january%2Fhrngyk8%2F)%0A%0A%3E%20Now%2C%20imagine%20what%20happens%20if%20you%20move%20100%20ETH%20onto%20a%20bridge%20on%20Solana%20to%20get%20100%20Solana-WETH%2C%20and%20then%20Ethereum%20gets%2051%25%20attacked.%20The%20attacker%20deposited%20a%20bunch%20of%20their%20own%20ETH%20into%20Solana-WETH%20and%20then%20reverted%20that%20transaction%20on%20the%20Ethereum%20side%20as%20soon%20as%20the%20Solana%20side%20confirmed%20it.%20The%20Solana-WETH%20contract%20is%20now%20no%20longer%20fully%20backed%2C%20and%20perhaps%20your%20100%20Solana-WETH%20is%20now%20only%20worth%2060%20ETH.%20Even%20if%20there's%20a%20perfect%20ZK-SNARK-based%20bridge%20that%20fully%20validates%20consensus%2C%20it's%20still%20vulnerable%20to%20theft%20through%2051%25%20attacks%20like%20this.%0A%3E%0A%3E%20It's%20always%20safer%20to%20hold%20Ethereum-native%20assets%20on%20Ethereum%20or%20Solana-native%20assets%20on%20Solana%20than%20it%20is%20to%20hold%20Ethereum-native%20assets%20on%20Solana%20or%20Solana-native%20assets%20on%20Ethereum.%20And%20in%20this%20context%2C%20%22Ethereum%22%20refers%20not%20just%20to%20the%20base%20chain%2C%20but%20also%20any%20proper%20L2%20that%20is%20built%20on%20it.%20If%20Ethereum%20gets%2051%25%20attacked%20and%20reverts%2C%20Arbitrum%20and%20Optimism%20revert%20too%2C%20and%20so%20%22cross-rollup%22%20applications%20that%20hold%20state%20on%20Arbitrum%20and%20Optimism%20are%20guaranteed%20to%20remain%20consistent%20even%20if%20Ethereum%20gets%2051%25%20attacked.%20And%20if%20Ethereum%20does%20not%20get%2051%25%20attacked%2C%20there's%20no%20way%20to%2051%25%20attack%20Arbitrum%20and%20Optimism%20separately.%20Hence%2C%20holding%20assets%20issued%20on%20Optimism%20wrapped%20on%20Arbitrum%20is%20still%20perfectly%20safe.%0A%3E%0A%3E%20Why%20a%20rollup%20can't%20just%20%22go%20use%20another%20data%20layer%22.%20If%20a%20rollup%20stores%20its%20data%20on%20Celestia%20or%20BCH%20or%20whatever%20else%20but%20deals%20with%20assets%20on%20Ethereum%2C%20if%20that%20layer%20gets%2051%25%20attacked%20you're%20screwed.%20The%20DAS%20on%20Celestia%20providing%2051%25%20attack%20resistance%20doesn't%20actually%20help%20you%20because%20the%20Ethereum%20network%20isn't%20reading%20that%20DAS%3B%20it%20would%20be%20reading%20a%20bridge%2C%20which%20would%20be%20vulnerable%20to%2051%25%20attacks.%20To%20be%20a%20rollup%20that%20provides%20security%20to%20applications%20using%20Ethereum-native%20assets%2C%20you%20have%20to%20use%20the%20Ethereum%20data%20layer%20(and%20likewise%20for%20any%20other%20ecosystem).%0A%0AHere%20are%20some%20sample%20hacks%0A%0A-%20%5BVulnerabilities%20in%20Cross-chain%20Bridge%20Protocols%20Emerge%20as%20Top%20Security%20Risk%5D(https%3A%2F%2Fblog.chainalysis.com%2Freports%2Fcross-chain-bridge-hacks-2022%2F)%0A%0A%3E%20Following%20last%20night%E2%80%99s%20exploit%20of%20the%20Nomad%20Bridge%2C%20Chainalysis%20estimates%20that%20%242%20billion%20in%20cryptocurrency%20has%20been%20stolen%20across%2013%20separate%20cross-chain%20bridge%20hacks%2C%20the%20majority%20of%20which%20was%20stolen%20this%20year.%20Attacks%20on%20bridges%20account%20for%2069%25%20of%20total%20funds%20stolen%20in%202022%20so%20far.%0A%0A-%20%5BEXPLAINED%3A%20THE%20QUBIT%20HACK%20(JANUARY%202022)%5D(https%3A%2F%2Fhalborn.com%2Fexplained-the-qubit-hack-january-2022%2F)%0A%0A%3E%20The%20exploited%20contract%20used%20a%20modified%20safeTransferFrom()%20function%20which%20instead%20of%20making%20use%20of%20functionCall()%20to%20verify%20that%20the%20target%20address%20contained%20contract%20code%2C%20used%20the%20call()%20function%20directly.%20As%20the%200%20address%20has%20no%20code%20at%20all%2C%20no%20code%20is%20run%2C%20and%20the%20call%20is%20completed%20successfully%20without%20reverting.%20As%20a%20result%2C%20the%20deposit%20function%20executed%20successfully%20but%20no%20real%20tokens%20were%20deposited.%0A%3E%0A%3E%20The%20Ethereum%20QBridge%20caught%20the%20Deposit%20event%20and%20interpreted%20it%20as%20a%20valid%20deposit%20of%20ETH.%20As%20a%20result%2C%20qXETH%20tokens%20were%20minted%20for%20the%20attacker%20on%20BSC.%0A%0A-%20%5BEXPLAINED%3A%20THE%20WORMHOLE%20HACK%20(FEBRUARY%202022)%5D(https%3A%2F%2Fhalborn.com%2Fexplained-the-wormhole-hack-february-2022%2F)%0A%0A%3E%20The%20actual%20extraction%20of%20120k%20ETH%20from%20the%20Wormhole%20bridge%20came%20at%20the%20end%20of%20a%20series%20of%20events.%20The%20actual%20flow%20of%20the%20attack%20was%3A%0A%3E%0A%3E%201.%20The%20attacker%20creates%20a%20validator%20action%20approval%20(VAA)%20with%20a%20call%20to%20post_vaa%0A%3E%202.%20This%20VAA%20was%20used%20in%20a%20call%20to%20complete_wrapped%20to%20mint%20the%20120%2C000%20ETH%20extracted%20in%20the%20attack%0A%3E%203.%20The%20attacker%20%E2%80%9Clegitimately%E2%80%9D%20extracted%20the%20minted%20tokens%20from%20the%20bridge%0A%3E%0A%3E%20The%20vulnerability%20that%20made%20the%20attack%20possible%20was%20a%20failure%20to%20perform%20proper%20signature%20verification%20in%20the%20VAA%20creation%20process.%20The%20role%20of%20signature%20verification%20is%20delegated%20several%20times%20from%20post_vaa%20to%20verify_signatures%20to%20Secp256k1.%0A%0A-%20%5BEXPLAINED%3A%20THE%20RONIN%20HACK%20(MARCH%202022)%5D(https%3A%2F%2Fhalborn.com%2Fexplained-the-ronin-hack-march-2022%2F)%0A%0A%3E%20The%20Ronin%20Network%20attack%20was%20extremely%20stealthy.%20In%20fact%2C%20the%20hack%20wasn%E2%80%99t%20noticed%20until%20six%20days%20after%20it%20occurred%20when%20the%20project%20team%20was%20notified%20by%20a%20user%20that%20they%20couldn%E2%80%99t%20withdraw%20about%205k%20ETH%20from%20the%20project%E2%80%99s%20bridge.%20Further%20investigation%20discovered%20the%20largest%20hack%20in%20DeFi%20history%20to%20date.%0A%3E%0A%3E%20The%20Ronin%20Network%20hack%20was%20made%20possible%20by%20compromised%20private%20keys.%20The%20Ronin%20Network%20uses%20a%20set%20of%20nine%20validator%20nodes%20to%20approve%20transactions%20on%20the%20bridge%2C%20and%20a%20deposit%20or%20withdrawal%20requires%20approval%20by%20a%20majority%20of%20five%20of%20these%20nodes.%20The%20attacker%20gained%20control%20of%20four%20validators%20controlled%20by%20Sky%20Mavis%20and%20a%20third-party%20Axie%20DAO%20validator%20that%20signed%20their%20malicious%20transactions.%0A%0A-%20%5BEXPLAINED%3A%20THE%20HARMONY%20HORIZON%20BRIDGE%20HACK%5D(https%3A%2F%2Fhalborn.com%2Fexplained-the-harmony-horizon-bridge-hack%2F)%0A%0A%3E%20Like%20most%20cross-chain%20bridges%2C%20the%20Harmony%20Horizon%20Bridge%20has%20a%20validation%20process%20for%20approving%20transactions%20being%20transferred%20over%20the%20bridge.%20In%20this%20case%2C%20the%20approvals%20process%20uses%20a%20multi-signature%20scheme%20with%20five%20validators.%0A%3E%0A%3E%20However%2C%20the%20bridge%20only%20used%20a%202%20of%205%20validation%20scheme.%20This%20means%20that%20only%20two%20blockchain%20accounts%20needed%20to%20be%20compromised%20for%20an%20attacker%20to%20approve%20any%20malicious%20transaction%20that%20they%20wished.%0A%3E%0A%3E%20The%20Harmony%20Horizon%20bridge%20was%20exploited%20via%20the%20theft%20of%20two%20private%20keys.%20These%20private%20keys%20were%20encrypted%20with%20both%20a%20passphrase%20and%20a%20key%20management%20service%2C%20and%20no%20system%20had%20access%20to%20multiple%20plaintext%20keys.%20However%2C%20the%20attacker%20managed%20to%20access%20and%20decrypt%20multiple%20keys.%0A%3E%0A%3E%20With%20access%20to%20two%20of%20the%20bridge%E2%80%99s%20private%20keys%2C%20the%20attacker%20could%20create%20a%20transaction%20extracting%20%24100%20million%20from%20the%20bridge%20and%20confirm%20it%20using%20two%20accounts%20under%20their%20control.%0A%0A-%20%5BTHE%20NOMAD%20BRIDGE%20HACK%3A%20A%20DEEPER%20DIVE%5D(https%3A%2F%2Fhalborn.com%2Fthe-nomad-bridge-hack-a-deeper-dive%2F)%0A%0A%3E%20On%20August%201%2C%20DeFi%20bridge%20Nomad%20was%20hacked%20for%20over%20%24190M.%0A%3E%0A%3E%20After%20a%20frenzied%20hack%20from%20hundreds%20of%20wallets%2C%20the%20bridge%E2%80%99s%20TVL%20dropped%20from%20%24190%2C740%2C000%20to%20%241%2C794%20in%20mere%20hours.%20The%20hack%20involved%20a%20total%20of%20960%20transactions%20with%201%2C175%20individual%20withdrawals%20from%20the%20bridge.%0A%3E%20According%20to%20Nomad%E2%80%99s%20post-mortem%2C%20an%20implementation%20bug%20in%20a%20June%2021%20smart%20contract%20upgrade%20caused%20the%20Replica%20contract%20to%20fail%20to%20authenticate%20messages%20properly.%20This%20issue%20meant%20that%20any%20message%20could%20be%20forged%20as%20long%20as%20it%20had%20not%20already%20been%20processed.%0A%3E%0A%3E%20As%20a%20result%2C%20contracts%20relying%20on%20the%20Replica%20for%20authentication%20of%20inbound%20messages%20suffered%20security%20failures.%20From%20there%2C%20this%20authentication%20failure%20resulted%20in%20fraudulent%20messages%20being%20passed%20to%20the%20Nomad%20BridgeRouter%20contract.%0A%0A%23%23%20References%0A%0ABackground%20and%20Overview%0A%0A-%20%5BHarmony%E2%80%99s%20Cross-Chain%20Future%5D(https%3A%2F%2Fmedium.com%2Fharmony-one%2Fharmonys-cross-chain-future-41d02d53b10)%0A-%20%5BAwesome%20Interoperability%5D(https%3A%2F%2Fgithub.com%2Fnomad-xyz%2Fawesome-interop)%3A%20A%20curated%20list%20of%20awesome%20interoperability%20resources%2C%20libraries%2C%20tools%20and%20more.%0A-%20%5BVitalik%3A%20why%20the%20future%20will%20be%20_multi-chain_%2C%20but%20it%20will%20not%20be%20_cross-chain_%5D(https%3A%2F%2Ftwitter.com%2Fvitalikbuterin%2Fstatus%2F1479501366192132099%3Flang%3Den)%0A-%20%5BVitalik%E2%80%99s%20Annotated%20Ethereum%202.0%20Spec%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2FSkeyEI3xv)%0A%0ABackground%20and%20Overview%20(Zero%20Knowledge%20Related)%0A%0A-%20%5BBridging%20the%20Multichain%20Universe%20with%20Zero%20Knowledge%20Proofs%5D(https%3A%2F%2Fmedium.com%2F%40ingonyama%2Fbridging-the-multichain-universe-with-zero-knowledge-proofs-6157464fbc86)%0A-%20%5Bawesome-zkml%5D(https%3A%2F%2Fgithub.com%2Fworldcoin%2Fawesome-zkml)%0A%0AMathematical%20Theory%0A%0A-%20%5BElliptic%20Curve%20Cryptography%3A%20a%20gentle%20introduction%5D(https%3A%2F%2Fandrea.corbellini.name%2F2015%2F05%2F17%2Felliptic-curve-cryptography-a-gentle-introduction%2F)%0A-%20%5BExploring%20Elliptic%20Curve%20Pairings%5D(https%3A%2F%2Fvitalik.ca%2Fgeneral%2F2017%2F01%2F14%2Fexploring_ecp.html)%0A%0AMathematical%20Theory%20(Zero%20Knowledge%20Related)%0A%0A-%20%5BKZG%20polynomial%20commitments%5D(https%3A%2F%2Fdankradfeist.de%2Fethereum%2F2020%2F06%2F16%2Fkate-polynomial-commitments.html)%0A%0AResearch%20Papers%0A%0A-%20%5BFraud%20and%20Data%20Availability%20Proofs%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F1809.09044.pdf)%3A%20Maximising%20Light%20Client%20Security%20and%20Scaling%20Blockchains%20with%20Dishonest%20Majorities.%20_Light%20clients%2C%20also%20known%20as%20Simple%20Payment%20Verification%20(SPV)%20clients%2C%20are%20nodes%20which%20only%20download%20a%20small%20portion%20of%20the%20data%20in%20a%20blockchain%2C%20and%20use%20indirect%20means%20to%20verify%20that%20a%20given%20chain%20is%20valid._%0A%0AResearch%20Articles%0A%0A-%20%5BPaths%20toward%20single-slot%20finality%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fsingle_slot_finality)%3A%20A%20look%20at%20how%20to%20improve%20Ethereum%E2%80%99s%20LMD%20GHOST%20%2B%20Casper%20FFG%20consensus.%0A%0AResearch%20Papers%20(Zero%20Knowledge%20Related)%0A%0A-%20%5BzkBridge%3A%20Trustless%20Cross-chain%20Bridges%20Made%20Practical%5D(https%3A%2F%2Frdi.berkeley.edu%2Fzkp%2FzkBridge%2Fuploads%2Fpaper.pdf)%0A-%20%5BzkPoS%3A%20End-to-End%20Trustless%5D(https%3A%2F%2Fhyperoracle.medium.com%2Fzkpos-end-to-end-trustless-65edccd87c5a)%3A%20HyperOracle%20article%20on%20how%20zkPoS%20provides%20the%20ability%20of%20proving%20the%20consensus%20with%20ZK.%0A-%20%5BCaulk%3A%20Lookup%20Arguments%20in%20Sublinear%20Time%5D(https%3A%2F%2Feprint.iacr.org%2F2022%2F621.pdf)%0A-%20%5BHyperPlonk%3A%20Plonk%20with%20Linear-Time%20Prover%20and%20High-Degree%20Custom%20Gates%5D(https%3A%2F%2Feprint.iacr.org%2F2022%2F1355.pdf)%0A%0AResearch%20Articles%20(Zero%20Knowledge%20Related)%0A%0A-%20%5BSLONK%E2%80%94a%20simple%20universal%20SNARK%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fslonk-a-simple-universal-snark%2F6420)%3A%20a%20simplification%20to%20PLONK%20called%20SLONK.%20We%20replace%20the%20permutation%20argument%20(the%20%E2%80%9CP%E2%80%9D%20in%20PLONK)%20in%20favour%20of%20a%20shift%20argument%20(the%20%E2%80%9CS%E2%80%9D%20in%20SLONK).%20We%20get%20a%20universal%20SNARK%20with%20the%20smallest%20known%20proof%20size%20and%20verification%20time.%0A-%20%5BKate%20commitments%20from%20the%20Lagrange%20basis%20without%20FFTs%5D(https%3A%2F%2Fnotes.ethereum.org%2FT0ZVaaywQAqP4jegqO3asg%3Fview)%3A%20how%20to%20commit%2C%20evaluate%20and%20open%20polynomials%20in%20the%20Lagrange%20basis%20without%20FFTs.%20This%20is%20the%20first%20part%20in%20a%20series%20(see%20part%201%2C%20part%202%2C%20part%203)%20showing%20how%20to%20do%20PLONK-style%20universal%20SNARKs%20without%20FFTs%0A-%20%5BHadamard%20checks%20from%20the%20Lagrange%20basis%20without%20FFTs%5D(https%3A%2F%2Fnotes.ethereum.org%2FIl4z42lmQtaUYFigsjsk2Q%3Fview)%3A%20how%20to%20prove%20Hadamard%20relations%20between%20polynomials%20in%20the%20Lagrange%20basis%20without%20FFTs.%20This%20is%20the%20second%20part%20(see%20part%201%2C%20part%202%2C%20part%203)%20in%20a%20series%20showing%20how%20to%20do%20PLONK-style%20universal%20SNARKs%20without%20FFTs.%0A-%20%5BPLONK-style%20SNARKs%20without%20FFTs%5D(https%3A%2F%2Fnotes.ethereum.org%2FDLRqK9V7RIOsTZkab8Hm_Q%3Fview)%3A%20how%20to%20do%20PLONK-style%20universal%20SNARKs%20without%20FFTs.%20This%20is%20part%203%20in%20a%20series%20(part%201%2C%20part%202%2C%20part%203).%0A%0AImplementation%20Articles%0A%0A-%20%5BzkBridge%3A%20Trustless%20Cross-chain%20Bridges%20Made%20Practical%5D(https%3A%2F%2Frdi.berkeley.edu%2Fzkp%2FzkBridge%2FzkBridge.html)%0A-%20%5BSuccinct%20Towards%20the%20endgame%20of%20blockchain%20interoperability%20with%20proof%20of%20consensus%5D(https%3A%2F%2Fblog.succinct.xyz%2Fpost%2F2022%2F09%2F20%2Fproof-of-consensus)%0A%0AImplementations%0A%0A-%20%5BWormhole%20ethereum%20contracts%20Implementaion.sol%5D(https%3A%2F%2Fgithub.com%2Fwormhole-foundation%2Fwormhole%2Fblob%2Fdev.v2%2Fethereum%2Fcontracts%2FImplementation.sol)%0A-%20%5Bbls%20verification%20contract%5D(https%3A%2F%2Fgithub.com%2Fsemaraugusto%2Fbls-verification-contract%2Fblob%2Fmaster%2Fcontracts%2Fverifier.sol)%0A%0ADocumentation%0A%0A-%20%5BETHEREUM%20DEVELOPMENT%20DOCUMENTATION%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2F)%0A-%20%5BMINA%20docs%5D(https%3A%2F%2Fdocs.minaprotocol.com%2F)%0A%0AAdditional%20References%0A%0A-%20%5Bnil-Foundation%20ETH-Mina%20bridge%20live%20on%20Ethereum%20testnet%20Ropsten%5D(https%3A%2F%2Fminacrypto.com%2F2022%2F04%2F27%2Fnil-foundation%2F)%0A%0A%23%23%20Bridge%20Implementation%20References%0A%0A-%20%5BHarmony%20Horizon%20Bridge%5D(.%2Fharmony-horizon)%3A%20Detailed%20code%20review%0A%20%20-%20%5BHorizon%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2)%3A%20javascript%2C%20solidity%0A-%20Near%20Rainbow%20Bridge%3A%20Codebases%0A%20%20-%20%5BNear%20Rainbow%20Bridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge)%3A%20rust%2C%20go%2C%20solidity%2C%20javascript%0A%20%20-%20%5BNear%20Rainbow%20Token%20Connector%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector)%3A%20soldity%0A%20%20-%20SDK%0A%20%20%20%20-%20%5BNear%20Rainbow%20Bridge%20Client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge-client%2Ftree%2Fmain%2Fpackages%2Fclient)%3A%20typescript%0A%20%20-%20Frontend%0A%20%20%20%20-%20%5BNEAR%20Rainbow%20Bridge%20Frontend%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge-frontend)%0A-%20%5BNomad%20monprepo%5D(https%3A%2F%2Fgithub.com%2Fnomad-xyz%2Fmonorepo)%3A%20Nomad%20is%20a%20cross-chain%20communication%20protocol.%20This%20repo%20contains%20the%20following%3A%20Smart%20contracts%20for%20the%20core%20Nomad%20protocol%2C%20Smart%20contracts%20for%20the%20Nomad%20token%20bridge%20SDKs%20for%20Nomad's%20core%20protocol%2C%20bridge%2C%20and%20governance%20systems%2C%20Tooling%20for%20local%20environment%20simulation%20and%20Smart%20contract%20deployment%20tooling.%0A%20%20-%20%5BNomad%20rust%5D(https%3A%2F%2Fgithub.com%2Fnomad-xyz%2Frust)%3A%20Nomad%20is%20a%20cross-chain%20communication%20standard%20that%20supports%20passing%20messages%20between%20blockchains%20easily%20and%20inexpensively.%20Like%20IBC%20light%20clients%20and%20similar%20systems%2C%20Nomad%20establishes%20message-passing%20channels%20between%20chains.%20Once%20a%20channel%20is%20established%2C%20any%20application%20on%20that%20chain%20can%20use%20it%20to%20send%20messages%20to%20others%20chains.%0A%20%20-%20%5BNomad%20gelato-sdk%5D(https%3A%2F%2Fgithub.com%2Fnomad-xyz%2Fgelato-sdk)%3A%20This%20crate%20reimplements%20Gelato's%20Relay%20SDK%20in%20Rust.%20It%20simply%20wraps%20Gelato%20Relay%20requests%20and%20responses%20to%2Ffrom%20Gelato%20endpoints%20with%20Rust%20types%20and%20methods.%0A-%20%5BSuccinct%20labs%5D(..%2Fbridge%2Fsuccinct)%3A%20Deep%20dive%20on%20Succinct%20labs%20Proof%20of%20Consensus%20for%20Ethreum.%0A%20%20-%20%5BProof%20of%20Consensus%20for%20Ethereum%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus)%3A%20contains%20both%20the%20zkSNARK%20circuits%20as%20well%20as%20the%20smart%20contracts%20needed%20for%20our%20succinct%20light%20client%20implementation%2C%20as%20well%20as%20prototype%20message%20passing%20contracts%20and%20bridge%20contracts.%0A-%20%5BDatachain%20lcp%5D(https%3A%2F%2Fgithub.com%2Fdatachainlab%2Fharmony-cosmos-bridge-demo)A%20proxy%20for%20light%20client%20verification%20executed%20in%20TEE.%0A-%20%5BCosmos%20ibc-go%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc-go)%3A%20allows%20blockchains%20to%20talk%20to%20each%20other.%20This%20end-to-end%2C%20connection-oriented%2C%20stateful%20protocol%20provides%20reliable%2C%20ordered%2C%20and%20authenticated%20communication%20between%20heterogeneous%20blockchains.%0A%20%20-%20%5BCosmos%20ibc%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc)%3A%20ibc%20specification%0A-%20%5BCosmos%20gravity%20bridge%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fgravity-bridge)%3A%20Cosmos%20and%20Ethereum%20bridge%20designed%20to%20run%20on%20the%20Cosmos%20Hub%20focused%20on%20maximum%20design%20simplicity%20and%20efficiency.%0A-%20%5BAxelar%5D(https%3A%2F%2Fgithub.com%2Faxelarnetwork%2Faxelar-core)%3A%20based%20on%20the%20Cosmos%20SDK%20is%20the%20main%20application%20of%20the%20axelar%20network.%20%5Bwhitepaper%5D(https%3A%2F%2Faxelar.network%2Faxelar_whitepaper.pdf)%20%5Bdocs%5D(https%3A%2F%2Fdocs.axelar.dev%2F)%0A-%20%5BCeler%20cBridge-node%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2FcBridge-node)%3A%20Celer%20cBridge%20relay%20node%20implementation%20in%20Golang.%20(%5Bdocs%5D(https%3A%2F%2Fcbridge-docs.celer.network%2F))%0A%20%20-%20%5BCeler%20cBridge-contracts%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2FcBridge-contracts)%3A%20Contracts%20for%20cBridge%2C%20cross-chain%20liquidity%20solution%20powered%20by%20Hashed-Timelock%20Transfers%0A%20%20-%20%5BCeler%20cBridge-cowa%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2Fcbridge-cowa)%3A%20CosmWasm%20Rust%20smart%20contracts%20for%20cbridge%0A-%20%5BWormhole%5D(https%3A%2F%2Fgithub.com%2Fwormhole-foundation%2Fwormhole)%3A%20the%20reference%20implementation%20of%20the%20Wormhole%20protocol.%20(%5Bdocs%5D(https%3A%2F%2Fbook.wormhole.com%2Fintroduction%2Fintroduction.html))%0A-%20%5BLayerZero%20Labs%20LayerZero%5D(https%3A%2F%2Fgithub.com%2FLayerZero-Labs%2FLayerZero)%3A%20contains%20the%20smart%20contracts%20for%20LayerZero%20Endpoints.%20(%5Bdocs%5D(https%3A%2F%2Flayerzero.gitbook.io%2Fdocs%2F))%0A-%20%5BMultichain%20CrossChain-Bridge%5D(https%3A%2F%2Fgithub.com%2Fanyswap%2FCrossChain-Bridge)%3A%20Cross-Chain%20bridge%20based%20on%20Anyswap%20MPC%20network.%20(%5Bdocs%5D(https%3A%2F%2Fdocs.multichain.org%2Fgetting-started%2Fintroduction))%0A-%20%5BSynapse%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fsynapsecns)%3A%20a%20universal%20interoperability%20protocol%20that%20enables%20secure%20cross-chain%20communication.(%20%5Bdocs%5D(https%3A%2F%2Fdocs.synapseprotocol.com%2F))%0A%20%20-%20%5Bsynapse-contracts%5D(https%3A%2F%2Fgithub.com%2Fsynapsecns%2Fsynapse-contracts)%3A%20smart%20contracts%20for%20Synapse%20Protocol.%0A-%20%5BHop%20Protocol%20contracts%5D(https%3A%2F%2Fgithub.com%2Fhop-protocol%2Fcontracts)%3A%20Hop%20is%20a%20scalable%20rollup-to-rollup%20general%20token%20bridge.%20Heare%20are%20the%20smart%20contracts%20that%20power%20the%20Hop%20Exchange.%20(%5Bwhitepaper%5D(https%3A%2F%2Fhop.exchange%2Fwhitepaper.pdf)%2C%20%5Bdocs%5D(https%3A%2F%2Fdocs.hop.exchange%2Fbasics%2Fa-short-explainer)).%0A-%20%5BRouter%20Protocol%5D(https%3A%2F%2Fgithub.com%2Forgs%2Frouter-protocol%2Frepositories)%3A%20(%5Bwhitepaper%5D(https%3A%2F%2Fdocs.routerprotocol.com%2Fwhitepaper%2Fintroducing-router-protocol)%2C%20%5Bdocs%5D(https%3A%2F%2Fdev.routerprotocol.com%2F))%0A-%20%5BParity%20Bridges%20Common%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fparity-bridges-common)%3A%20a%20collection%20of%20components%20for%20building%20bridges.%0A-%20%5BSnowfork%20snowbridge%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge)%3A%20A%20trustless%20bridge%20between%20Polkadot%20and%20Ethereum.%20(%5Bdocs%5D(https%3A%2F%2Fdocs.snowbridge.network%2F))%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./isomorph-DoyuP0L7.js"),[]),path:"/research/bridge/isomorph",type:"mdx",filePath:"research/bridge/isomorph.mdx",content:"%23%20Isomorph%0A%0A-%20date%3A%202023-02-24%0A-%20last%20updated%3A%202023-02-24%0A%0A%23%23%20Overview%0A%0AIsomorph%20is%20a%20Zero%20Knowledge%20trustless%20multichain%20bridge.%0A%0A%23%23%20Approach%0A%0A%23%23%20Sample%20Process%20Flow%0A%0AAt%20a%20high%20level%20when%20an%20event%20happens%20on%20chain%201%20we%20want%20to%20trigger%20a%20corresponding%20action%20on%20chain%202.%0A%0AFor%20a%20simple%20bridging%20of%20funds%20this%20looks%20as%20follows%0A%0A1.%20Alice%20deposits%20100%20TokenX%20into%20TokenLocker%20on%20Chain%201%20(which%20are%20locked)%20%5C*%5C*a1%0A2.%20A%20transaction%20t1%20is%20triggered%20in%20Block%20b1%20and%20an%20event%20e1%20is%20sent%0A3.%20The%20relayer%20listens%20to%20event%20e1%20and%20relays%20the%20transaction%20receipt%20information%20to%20Chain%202.%0A4.%20Verifier%20verifies%20that%20t1%20is%20in%20block%20b1%0A5.%20Verifier%20verifies%20that%20block%20b1%20is%20a%20valid%20block%0A6.%20Verifier%20verifies%20that%20b1%20is%20in%20Chain1%20canoninical%20chain%0A7.%20Executor1%20triggers%20a%20minting%20of%20corresponding%20100%20TokenX%E2%88%86%20on%20TokenLocker%E2%88%86%20on%20Chain%202%0A8.%20A%20transaction%20t2%20is%20triggered%20in%20Block%20b2%20and%20an%20event%20e2%20is%20sent%0A9.%20The%20relayer%20listens%20to%20event%20e2%20and%20relays%20the%20transaction%20receipt%20information%20to%20Chain%201.%0A10.%20Verifier%20verifies%20that%20t2%20is%20in%20block%20b2%0A11.%20Verifier%20verifies%20that%20block%20b2%20is%20a%20valid%20block%0A12.%20Verifier%20verifies%20that%20b2%20is%20in%20Chain2%20canoninical%20chain%0A13.%20Executor2%20marks%20the%20bridge%20transaction%20as%20complete%0A%0A%23%23%20Proof%20Components%0A%0A-%20Valid%20Signers%20%3A%20Who%20are%20eligible%20to%20sign%0A-%20Valid%20Signature%3A%0A-%20Valid%20Block%20%3A%20(Epoch)%0A%0A%23%23%20Technology%0A%0A-%20TokenLocker%3A%20%5Bhorizon%20txProof.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feprover%2FtxProof.js)%20%5Bnpm%20EthProof%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Feth-proof)%0A-%20TransactionVerify%3A%20Proves%20a%20%5BMerkle%20Patricia%20Trie%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fpatricia-merkle-trie%2F)%20using%20%5Bmerkle%20Proof%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fssz%2Fmerkle-proofs.mdx)%20which%20verifies%20the%20%5BTransaction.Hash%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fcore%2Ftypes%2Ftransaction.go%23L44)%20against%20%5BHeader.txHash%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fcore%2Ftypes%2Fblock.go%23L77).%20Here%20is%20an%20example%20from%20horizon%20using%20%5Bhorizon%20txProof.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feprover%2FtxProof.js)%20which%20calls%20%5Bnpm%20EthProof%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Feth-proof).%0A-%20BlockSignatureVerification%0A%20%20-%20On%20Chain%20Verification%20%3A%20example%20is%20Near%20Rainbow%20Bridge%20Fraud%20Proof%0A%20%20-%20Optimistic%0A%20%20-%20Secure%20Enclave%0A%20%20-%20Zero%20Knowledge%0A%20%20%20%20-%20Prover%0A%20%20%20%20-%20Verification%0A-%20BlockCanonicalVerification%0A%20%20-%20Wait%20Number%20of%20Blocks%0A%20%20-%20Optimistic%0A%20%20-%20Light%20Client%20(Finality%20Gadgets)%0A%20%20-%20Finalized%20Epoch%0A-%20EventLister%0A-%20Executor%0A%0A%23%23%20Proving%20Mechanisms%0A%0A%23%23%23%20Avalanche%0A%0A%23%23%23%20Binance%0A%0A%23%23%23%20Cosmos%0A%0A%23%23%23%20Ethereum%0A%0A%23%23%23%20NEAR%0A%0AThe%20leading%20NEAR%20Ethereum%20Bridge%20today%20Near%20Rainbow%20Bridge%20uses%20an%20optimistic%20approach.%20Following%20is%20an%20excerpt%20from%20NearOnEthClient%20%5B%5Enear-1%5D.%0A%0A%3E%20we%20adopt%20the%20optimistic%20%5B%5Enear-2%5D%20approach%20where%20NearOnEthClient%20verifies%20everything%20in%20the%20NEAR%20header%20except%20the%20signatures.%20Then%20anyone%20can%20challenge%20a%20signature%20in%20a%20submitted%20header%20within%20a%204-hour%20challenge%20window.%20The%20challenge%20requires%20verification%20of%20a%20single%20Ed25519%20signature%20which%20would%20cost%20about%20500k%20Ethereum%20gas%20(expensive%2C%20but%20possible).%0A%0A%23%23%23%20Harmony%0A%0A%23%23%23%20Polygon%0A%0A%23%23%23%20Polkadot%0A%0APrevious%20proving%20mechanisms%20for%20Polkadot%20leverage%20BEEFY%20(Bridge%20Effiency%20Enabling%20Finality%20Yielder)%20%5B%5Edot-3%5D%20an%20example%20is%20Snowbridge%20%5B%5Edot-1%5D%20which%20developed%20their%20own%20Interactive%20Update%20Protocol%20%5B%5Edot-2%5D.%0A%0A%23%23%20Verification%20Mechanism%0A%0A%23%23%20Relayer%20Mechanisms%0A%0A%23%23%20Token%20Lockers%0A%0A%23%23%20References%0A%0A%23%23%20Appendices%0A%0A%23%23%23%20Appendix%20F%3A%20Data%20Structures%0A%0A-%20Block%20Structure%20from%20%5Bgo-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fcore%2Ftypes%2Fblock.go%23L72)%0A%0A%60%60%60%0A%2F%2F%20SealHash%20returns%20the%20hash%20of%20a%20block%20prior%20to%20it%20being%20sealed.%0Afunc%20(ethash%20*Ethash)%20SealHash(header%20*types.Header)%20(hash%20common.Hash)%20%7B%0A%20hasher%20%3A%3D%20sha3.NewLegacyKeccak256()%0A%0A%20rlp.Encode(hasher%2C%20%5B%5Dinterface%7B%7D%7B%0A%20%20header.ParentHash%2C%0A%20%20header.UncleHash%2C%0A%20%20header.Coinbase%2C%0A%20%20header.Root%2C%0A%20%20header.TxHash%2C%0A%20%20header.ReceiptHash%2C%0A%20%20header.Bloom%2C%0A%20%20header.Difficulty%2C%0A%20%20header.Number%2C%0A%20%20header.GasLimit%2C%0A%20%20header.GasUsed%2C%0A%20%20header.Time%2C%0A%20%20header.Extra%2C%0A%20%7D)%0A%20hasher.Sum(hash%5B%3A0%5D)%0A%20return%20hash%0A%7D%0A%60%60%60%0A%0A-%20Transaction%20structure%20from%20%5Bgo-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fcore%2Ftypes%2Ftransaction.go%23LL39-L64C2)%0A%0A%60%60%60%0Atype%20Transaction%20struct%20%7B%0A%20data%20txdata%20%20%20%20%2F%2F%20Consensus%20contents%20of%20a%20transaction%0A%20time%20time.Time%20%2F%2F%20Time%20first%20seen%20locally%20(spam%20avoidance)%0A%0A%20%2F%2F%20caches%0A%20hash%20atomic.Value%0A%20size%20atomic.Value%0A%20from%20atomic.Value%0A%7D%0A%0Atype%20txdata%20struct%20%7B%0A%20AccountNonce%20uint64%20%20%20%20%20%20%20%20%20%20%60json%3A%22nonce%22%20%20%20%20gencodec%3A%22required%22%60%0A%20Price%20%20%20%20%20%20%20%20*big.Int%20%20%20%20%20%20%20%20%60json%3A%22gasPrice%22%20gencodec%3A%22required%22%60%0A%20GasLimit%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%20%60json%3A%22gas%22%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Recipient%20%20%20%20*common.Address%20%60json%3A%22to%22%20%20%20%20%20%20%20rlp%3A%22nil%22%60%20%2F%2F%20nil%20means%20contract%20creation%0A%20Amount%20%20%20%20%20%20%20*big.Int%20%20%20%20%20%20%20%20%60json%3A%22value%22%20%20%20%20gencodec%3A%22required%22%60%0A%20Payload%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%20%20%20%20%60json%3A%22input%22%20%20%20%20gencodec%3A%22required%22%60%0A%0A%20%2F%2F%20Signature%20values%0A%20V%20*big.Int%20%60json%3A%22v%22%20gencodec%3A%22required%22%60%0A%20R%20*big.Int%20%60json%3A%22r%22%20gencodec%3A%22required%22%60%0A%20S%20*big.Int%20%60json%3A%22s%22%20gencodec%3A%22required%22%60%0A%0A%20%2F%2F%20This%20is%20only%20used%20when%20marshaling%20to%20JSON.%0A%20Hash%20*common.Hash%20%60json%3A%22hash%22%20rlp%3A%22-%22%60%0A%7D%0A%60%60%60%0A%0A%23%23%20FootNotes%0A%0ANEAR%0A%0A%5B%5Enear-1%5D%3A%20%5BNEAR%3A%20ETH-NEAR%20Rainbow%20Bridge%5D(https%3A%2F%2Fnear.org%2Fblog%2Feth-near-rainbow-bridge%2F)%3A%20a%20bridge%2C%20called%20Rainbow%20Bridge%2C%20to%20connect%20the%20Ethereum%20and%20NEAR%20blockchains.%0A%0A%5B%5Enear-2%5D%3A%20%5BOptimistic%20Contracts%5D(https%3A%2F%2Fmedium.com%2F%40deaneigenmann%2Foptimistic-contracts-fb75efa7ca84)%3A%20contracts%20that%20accept%20all%20information%20as%20fact%20until%20proven%20to%20be%20non-factual.%20This%20allows%20for%20a%20reduction%20in%20the%20cost%20of%20verifying%20data%2C%20as%20on-chain%20verification%20would%20only%20be%20necessary%20when%20one%20is%20sure%20that%20the%20data%20is%20false.%0A%0APolkadot%0A%0A%5B%5Edot-1%5D%3A%20%5BSnowBridge%3A%20Polkadot%20Verification%5D(https%3A%2F%2Fdocs.snowbridge.network%2Farchitecture%2Fverification%2Fpolkadot)%3A%20use%20Polkadot%E2%80%99s%20BEEFY%20gadget%20to%20implement%20an%20efficient%20light%20client%20that%20only%20needs%20to%20verify%20a%20very%20small%20subset%20of%20relay%20chain%20validator%20signatures.%0A%0A%5B%5Edot-2%5D%3A%20%5BSnowbridge%3A%20Interactive%20Update%20Protocol%5D(https%3A%2F%2Fdocs.snowbridge.network%2Farchitecture%2Fverification%2Fpolkadot%2Finteractive-update-protocol)%3A%20A%20prover%20wants%20to%20convince%20a%20light%20client%20that%20at%20least%20%24%241%2F3%24%24%20of%20validators%20signed%20a%20statement%2C%20which%20they%20claim%20that%20a%20specific%20set%20of%20at%20least%20%24%242%2F3%24%24%20of%20validators%20do.%0A%0A%5B%5Edot-3%5D%3A%20%5BPolkadot%3A%20BEEFY%5D(https%3A%2F%2Fspec.polkadot.network%2F%23sect-grandpa-beefy)%3A%20The%20BEEFY%20(Bridge%20Effiency%20Enabling%20Finality%20Yielder)%20is%20a%20secondary%20protocol%20to%20GRANDPA%20to%20support%20efficient%20bridging%20between%20the%20Polkadot%20network%20(relay%20chain)%20and%20remote%2C%20segregated%20blockchains%2C%20such%20as%20Ethereum%2C%20which%20were%20not%20built%20with%20the%20Polkadot%20interchain%20operability%20in%20mind.%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./isomorph-DoyuP0L7.js"),[]),path:"/research/bridge/isomorph.html",type:"mdx",filePath:"research/bridge/isomorph.mdx",content:"%23%20Isomorph%0A%0A-%20date%3A%202023-02-24%0A-%20last%20updated%3A%202023-02-24%0A%0A%23%23%20Overview%0A%0AIsomorph%20is%20a%20Zero%20Knowledge%20trustless%20multichain%20bridge.%0A%0A%23%23%20Approach%0A%0A%23%23%20Sample%20Process%20Flow%0A%0AAt%20a%20high%20level%20when%20an%20event%20happens%20on%20chain%201%20we%20want%20to%20trigger%20a%20corresponding%20action%20on%20chain%202.%0A%0AFor%20a%20simple%20bridging%20of%20funds%20this%20looks%20as%20follows%0A%0A1.%20Alice%20deposits%20100%20TokenX%20into%20TokenLocker%20on%20Chain%201%20(which%20are%20locked)%20%5C*%5C*a1%0A2.%20A%20transaction%20t1%20is%20triggered%20in%20Block%20b1%20and%20an%20event%20e1%20is%20sent%0A3.%20The%20relayer%20listens%20to%20event%20e1%20and%20relays%20the%20transaction%20receipt%20information%20to%20Chain%202.%0A4.%20Verifier%20verifies%20that%20t1%20is%20in%20block%20b1%0A5.%20Verifier%20verifies%20that%20block%20b1%20is%20a%20valid%20block%0A6.%20Verifier%20verifies%20that%20b1%20is%20in%20Chain1%20canoninical%20chain%0A7.%20Executor1%20triggers%20a%20minting%20of%20corresponding%20100%20TokenX%E2%88%86%20on%20TokenLocker%E2%88%86%20on%20Chain%202%0A8.%20A%20transaction%20t2%20is%20triggered%20in%20Block%20b2%20and%20an%20event%20e2%20is%20sent%0A9.%20The%20relayer%20listens%20to%20event%20e2%20and%20relays%20the%20transaction%20receipt%20information%20to%20Chain%201.%0A10.%20Verifier%20verifies%20that%20t2%20is%20in%20block%20b2%0A11.%20Verifier%20verifies%20that%20block%20b2%20is%20a%20valid%20block%0A12.%20Verifier%20verifies%20that%20b2%20is%20in%20Chain2%20canoninical%20chain%0A13.%20Executor2%20marks%20the%20bridge%20transaction%20as%20complete%0A%0A%23%23%20Proof%20Components%0A%0A-%20Valid%20Signers%20%3A%20Who%20are%20eligible%20to%20sign%0A-%20Valid%20Signature%3A%0A-%20Valid%20Block%20%3A%20(Epoch)%0A%0A%23%23%20Technology%0A%0A-%20TokenLocker%3A%20%5Bhorizon%20txProof.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feprover%2FtxProof.js)%20%5Bnpm%20EthProof%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Feth-proof)%0A-%20TransactionVerify%3A%20Proves%20a%20%5BMerkle%20Patricia%20Trie%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fpatricia-merkle-trie%2F)%20using%20%5Bmerkle%20Proof%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fssz%2Fmerkle-proofs.mdx)%20which%20verifies%20the%20%5BTransaction.Hash%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fcore%2Ftypes%2Ftransaction.go%23L44)%20against%20%5BHeader.txHash%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fcore%2Ftypes%2Fblock.go%23L77).%20Here%20is%20an%20example%20from%20horizon%20using%20%5Bhorizon%20txProof.js%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fsrc%2Feprover%2FtxProof.js)%20which%20calls%20%5Bnpm%20EthProof%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Feth-proof).%0A-%20BlockSignatureVerification%0A%20%20-%20On%20Chain%20Verification%20%3A%20example%20is%20Near%20Rainbow%20Bridge%20Fraud%20Proof%0A%20%20-%20Optimistic%0A%20%20-%20Secure%20Enclave%0A%20%20-%20Zero%20Knowledge%0A%20%20%20%20-%20Prover%0A%20%20%20%20-%20Verification%0A-%20BlockCanonicalVerification%0A%20%20-%20Wait%20Number%20of%20Blocks%0A%20%20-%20Optimistic%0A%20%20-%20Light%20Client%20(Finality%20Gadgets)%0A%20%20-%20Finalized%20Epoch%0A-%20EventLister%0A-%20Executor%0A%0A%23%23%20Proving%20Mechanisms%0A%0A%23%23%23%20Avalanche%0A%0A%23%23%23%20Binance%0A%0A%23%23%23%20Cosmos%0A%0A%23%23%23%20Ethereum%0A%0A%23%23%23%20NEAR%0A%0AThe%20leading%20NEAR%20Ethereum%20Bridge%20today%20Near%20Rainbow%20Bridge%20uses%20an%20optimistic%20approach.%20Following%20is%20an%20excerpt%20from%20NearOnEthClient%20%5B%5Enear-1%5D.%0A%0A%3E%20we%20adopt%20the%20optimistic%20%5B%5Enear-2%5D%20approach%20where%20NearOnEthClient%20verifies%20everything%20in%20the%20NEAR%20header%20except%20the%20signatures.%20Then%20anyone%20can%20challenge%20a%20signature%20in%20a%20submitted%20header%20within%20a%204-hour%20challenge%20window.%20The%20challenge%20requires%20verification%20of%20a%20single%20Ed25519%20signature%20which%20would%20cost%20about%20500k%20Ethereum%20gas%20(expensive%2C%20but%20possible).%0A%0A%23%23%23%20Harmony%0A%0A%23%23%23%20Polygon%0A%0A%23%23%23%20Polkadot%0A%0APrevious%20proving%20mechanisms%20for%20Polkadot%20leverage%20BEEFY%20(Bridge%20Effiency%20Enabling%20Finality%20Yielder)%20%5B%5Edot-3%5D%20an%20example%20is%20Snowbridge%20%5B%5Edot-1%5D%20which%20developed%20their%20own%20Interactive%20Update%20Protocol%20%5B%5Edot-2%5D.%0A%0A%23%23%20Verification%20Mechanism%0A%0A%23%23%20Relayer%20Mechanisms%0A%0A%23%23%20Token%20Lockers%0A%0A%23%23%20References%0A%0A%23%23%20Appendices%0A%0A%23%23%23%20Appendix%20F%3A%20Data%20Structures%0A%0A-%20Block%20Structure%20from%20%5Bgo-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fcore%2Ftypes%2Fblock.go%23L72)%0A%0A%60%60%60%0A%2F%2F%20SealHash%20returns%20the%20hash%20of%20a%20block%20prior%20to%20it%20being%20sealed.%0Afunc%20(ethash%20*Ethash)%20SealHash(header%20*types.Header)%20(hash%20common.Hash)%20%7B%0A%20hasher%20%3A%3D%20sha3.NewLegacyKeccak256()%0A%0A%20rlp.Encode(hasher%2C%20%5B%5Dinterface%7B%7D%7B%0A%20%20header.ParentHash%2C%0A%20%20header.UncleHash%2C%0A%20%20header.Coinbase%2C%0A%20%20header.Root%2C%0A%20%20header.TxHash%2C%0A%20%20header.ReceiptHash%2C%0A%20%20header.Bloom%2C%0A%20%20header.Difficulty%2C%0A%20%20header.Number%2C%0A%20%20header.GasLimit%2C%0A%20%20header.GasUsed%2C%0A%20%20header.Time%2C%0A%20%20header.Extra%2C%0A%20%7D)%0A%20hasher.Sum(hash%5B%3A0%5D)%0A%20return%20hash%0A%7D%0A%60%60%60%0A%0A-%20Transaction%20structure%20from%20%5Bgo-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fcore%2Ftypes%2Ftransaction.go%23LL39-L64C2)%0A%0A%60%60%60%0Atype%20Transaction%20struct%20%7B%0A%20data%20txdata%20%20%20%20%2F%2F%20Consensus%20contents%20of%20a%20transaction%0A%20time%20time.Time%20%2F%2F%20Time%20first%20seen%20locally%20(spam%20avoidance)%0A%0A%20%2F%2F%20caches%0A%20hash%20atomic.Value%0A%20size%20atomic.Value%0A%20from%20atomic.Value%0A%7D%0A%0Atype%20txdata%20struct%20%7B%0A%20AccountNonce%20uint64%20%20%20%20%20%20%20%20%20%20%60json%3A%22nonce%22%20%20%20%20gencodec%3A%22required%22%60%0A%20Price%20%20%20%20%20%20%20%20*big.Int%20%20%20%20%20%20%20%20%60json%3A%22gasPrice%22%20gencodec%3A%22required%22%60%0A%20GasLimit%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%20%60json%3A%22gas%22%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Recipient%20%20%20%20*common.Address%20%60json%3A%22to%22%20%20%20%20%20%20%20rlp%3A%22nil%22%60%20%2F%2F%20nil%20means%20contract%20creation%0A%20Amount%20%20%20%20%20%20%20*big.Int%20%20%20%20%20%20%20%20%60json%3A%22value%22%20%20%20%20gencodec%3A%22required%22%60%0A%20Payload%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%20%20%20%20%60json%3A%22input%22%20%20%20%20gencodec%3A%22required%22%60%0A%0A%20%2F%2F%20Signature%20values%0A%20V%20*big.Int%20%60json%3A%22v%22%20gencodec%3A%22required%22%60%0A%20R%20*big.Int%20%60json%3A%22r%22%20gencodec%3A%22required%22%60%0A%20S%20*big.Int%20%60json%3A%22s%22%20gencodec%3A%22required%22%60%0A%0A%20%2F%2F%20This%20is%20only%20used%20when%20marshaling%20to%20JSON.%0A%20Hash%20*common.Hash%20%60json%3A%22hash%22%20rlp%3A%22-%22%60%0A%7D%0A%60%60%60%0A%0A%23%23%20FootNotes%0A%0ANEAR%0A%0A%5B%5Enear-1%5D%3A%20%5BNEAR%3A%20ETH-NEAR%20Rainbow%20Bridge%5D(https%3A%2F%2Fnear.org%2Fblog%2Feth-near-rainbow-bridge%2F)%3A%20a%20bridge%2C%20called%20Rainbow%20Bridge%2C%20to%20connect%20the%20Ethereum%20and%20NEAR%20blockchains.%0A%0A%5B%5Enear-2%5D%3A%20%5BOptimistic%20Contracts%5D(https%3A%2F%2Fmedium.com%2F%40deaneigenmann%2Foptimistic-contracts-fb75efa7ca84)%3A%20contracts%20that%20accept%20all%20information%20as%20fact%20until%20proven%20to%20be%20non-factual.%20This%20allows%20for%20a%20reduction%20in%20the%20cost%20of%20verifying%20data%2C%20as%20on-chain%20verification%20would%20only%20be%20necessary%20when%20one%20is%20sure%20that%20the%20data%20is%20false.%0A%0APolkadot%0A%0A%5B%5Edot-1%5D%3A%20%5BSnowBridge%3A%20Polkadot%20Verification%5D(https%3A%2F%2Fdocs.snowbridge.network%2Farchitecture%2Fverification%2Fpolkadot)%3A%20use%20Polkadot%E2%80%99s%20BEEFY%20gadget%20to%20implement%20an%20efficient%20light%20client%20that%20only%20needs%20to%20verify%20a%20very%20small%20subset%20of%20relay%20chain%20validator%20signatures.%0A%0A%5B%5Edot-2%5D%3A%20%5BSnowbridge%3A%20Interactive%20Update%20Protocol%5D(https%3A%2F%2Fdocs.snowbridge.network%2Farchitecture%2Fverification%2Fpolkadot%2Finteractive-update-protocol)%3A%20A%20prover%20wants%20to%20convince%20a%20light%20client%20that%20at%20least%20%24%241%2F3%24%24%20of%20validators%20signed%20a%20statement%2C%20which%20they%20claim%20that%20a%20specific%20set%20of%20at%20least%20%24%242%2F3%24%24%20of%20validators%20do.%0A%0A%5B%5Edot-3%5D%3A%20%5BPolkadot%3A%20BEEFY%5D(https%3A%2F%2Fspec.polkadot.network%2F%23sect-grandpa-beefy)%3A%20The%20BEEFY%20(Bridge%20Effiency%20Enabling%20Finality%20Yielder)%20is%20a%20secondary%20protocol%20to%20GRANDPA%20to%20support%20efficient%20bridging%20between%20the%20Polkadot%20network%20(relay%20chain)%20and%20remote%2C%20segregated%20blockchains%2C%20such%20as%20Ethereum%2C%20which%20were%20not%20built%20with%20the%20Polkadot%20interchain%20operability%20in%20mind.%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./near-rainbow-DAQpXg4M.js"),[]),path:"/research/bridge/near-rainbow",type:"mdx",filePath:"research/bridge/near-rainbow.mdx",content:"%23%20Near%20Rainbow%20Bridge%0A%0A-%20date%3A%202023-02-24%0A-%20last%20updated%3A%202023-02-24%0A%0A%23%23%20Overview%0A%0ANEAR%20Rainbow%20bridge%20was%20enhanced%20to%20support%20Ethereum%202.0%20leveraging%20Ethereum%20Light%20Clients.%20This%20document%20is%20a%20review%20of%20the%20design.%0A%0AKey%20differences%20in%20supporting%20Ethereum%202.0%20(Proof%20of%20Stake)%20vs%20Proof%20of%20Work%20involves%20removing%20the%20ETHHASH%20logic%20and%20SPV%20client%20and%20potentially%20replacing%20with%20MMR%20trees%20per%20epoch%20and%20checkpoints%20similar%20to%20Harmony%20Light%20Client%20on%20Ethereum.%0A%0AThe%20%5BNEAR%20Rainbow%20bridge%5D(https%3A%2F%2Fnear.org%2Fbridge%2F)%20is%20in%20%5Bthis%20github%20repository%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge)%20and%20is%20supported%20by%20%5BAurora-labs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near).%0A%0AIt%20recently%20provided%20support%20for%20ETH%202.0%20in%20this%20%5BPull%20Request%20(762)%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fpull%2F762).%0A%0AIt%20interacts%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20for%20Ethereum%202.0%20Consensus%20and%20tree_hash%20functions%20as%20well%20as%20bls%20signatures.%0A%0AHigh%20Level%20their%20architecture%20is%20similar%20to%20the%20Horizon%20Bridge%20but%20with%20some%20key%20differences%2C%20including%20but%20not%20limited%20to%0A%0A-%20interacting%20with%20the%20beacon%20chain%20now%20for%20finality%20%60is_correct_finality_update%60%20%5Bsee%20finality-update-verify%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2Fsrc%2Flib.rs%23L36)%0A-%20Updated%20execution%20block%20proof%20to%20use%20the%20BEACONRPCClient%20and%20with%20an%20updated%20merkle%20tree%0A%20%20-%20Design%20can%20be%20found%20in%20%5BPR-762%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fpull%2F762)%0A%0A%23%23%20Approach%0A%0ANear%20Rainbow%20bridge%20uses%20a%20fradu%20proof%20approach.%0A%0A%23%23%20Proving%20Mechanisms%0A%0A%23%23%23%20NEAR%20to%20Ethereum%20watchdog%0A%0AThe%20%5Bwatchdog%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fnear2eth%2Fwatchdog%2Findex.js)%20runs%20every%2010%20seconds%20and%20validates%20blocks%20on%20%60NearBridge.sol%60%20challenging%20blocks%20with%20incorrect%20signatures.%20_Note%3A%20It%20uses%20%5Bheep-prometheus%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Fhttp-prometheus.js)%20for%20monitoring%20and%20storing%20block%20and%20producer%20information%20using%20%60gauges%60%20and%20%60counters%60._%0A%0A-%20%5Bwatchdog%20is%20started%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Fcommands%2Fstart%2Fwatchdog.js)%20from%20the%20CLI%0A-%20%5Bwatchdog%20logic%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fnear2eth%2Fwatchdog%2Findex.js)%0A%20%20-%20Initializes%20monitoring%20information%20on%20%60Prometheus%60%0A%20%20%20%20-%20%60const%20httpPrometheus%20%3D%20new%20HttpPrometheus(this.metricsPort%2C%20'near_bridge_watchdog_')%60%0A%20%20%20%20-%20%60const%20lastBlockVerified%20%3D%20httpPrometheus.gauge('last_block_verified'%2C%20'last%20block%20that%20was%20already%20verified')%60%0A%20%20%20%20-%20%60const%20totBlockProducers%20%3D%20httpPrometheus.gauge('block_producers'%2C%20'number%20of%20block%20producers%20for%20current%20block')%60%0A%20%20%20%20-%20%60const%20incorrectBlocks%20%3D%20httpPrometheus.counter('incorrect_blocks'%2C%20'number%20of%20incorrect%20blocks%20found')%60%0A%20%20%20%20-%20%60const%20challengesSubmitted%20%3D%20httpPrometheus.counter('challenges_submitted'%2C%20'number%20of%20blocks%20challenged')%60%0A%20%20-%20Loops%20%60while%20(true)%60%0A%20%20%20%20-%20Gets%20the%20%60bridgeState%60%0A%20%20%20%20-%20Loops%20through%20all%20blockProducers%20checking%20their%20signatures%0A%20%20%20%20-%20%60for%20(let%20i%20%3D%200%3B%20i%20%3C%20numBlockProducers%3B%20i%2B%2B)%60%0A%20%20%20%20%20%20-%20Check%20each%20signature%20%60this.clientContract.methods.checkBlockProducerSignatureInHead(i).call()%60%0A%20%20%20%20%20%20-%20If%20invalid%20challenge%20the%20signature%3A%20%60this.clientContract.methods.challenge(this.ethMasterAccount%2C%20i).encodeABI()%60%20calls%20%5Bchallenge%20function%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearBridge.sol%23L93)%0A%20%20%20%20%20%20%20%20-%20%60function%20challenge(address%20payable%20receiver%2C%20uint%20signatureIndex)%20external%20override%20pausable(PAUSED_CHALLENGE)%60%0A%20%20%20%20%20%20%20%20%20%20-%20checks%20block.timestamp%20is%20less%20than%20lastValidAt%20%60block.timestamp%20%3C%20lastValidAt%2C%60%0A%20%20%20%20%20%20%20%20%20%20-%20Check%20if%20the%20signature%20is%20valid%20%60!checkBlockProducerSignatureInHead(signatureIndex)%60%0A%20%20%20%20%20%20%20%20%20%20-%20slashes%20the%20last%20submitter%20%60balanceOf%5BlastSubmitter%5D%20%3D%20balanceOf%5BlastSubmitter%5D%20-%20lockEthAmount%3B%60%0A%20%20%20%20%20%20%20%20%20%20-%20resets%20lastValidAt%20%60lastValidAt%20%3D%200%3B%60%0A%20%20%20%20%20%20%20%20%20%20-%20Refunds%20half%20of%20the%20funds%20to%20the%20watchdog%20account%20%60receiver.call%7Bvalue%3A%20lockEthAmount%20%2F%202%7D(%22%22)%3B%60%0A%20%20%20%20%20%20-%20Sleeps%20for%20watchdog%20Delay%20seconds%20%60await%20sleep(watchdogDelay%20*%201000)%60%0A%0A%23%23%20Relayer%20Mechanisms%0A%0A%23%23%23%20Ethereum%20to%20NEAR%20block%20propagation%20flow%0A%0AFollowing%20is%20a%20walkthough%20of%20block%20propogation%20from%20Ethereum%20to%20NEAR.%20For%20a%20better%20understanding%20of%20the%20technical%20components%20see%20%5BAppendix%20A%5D(%23appendix-a-ethereum-to-near-block-propagation-components).%0A%0A-%20%5BLight%20Clients%20are%20deployed%20on%20Near%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L107)%3A%0A%20%20-%20%5Binit_contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L107)%3A%20The%20eth2near%20relayer%20is%20called%20with%20an%20argument%20to%20initialize%20the%20%5Beth2-client%20contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%0A%20%20%20%20-%20%5Beth_client_contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L108)%3A%20is%20created%20using%20a%20contract_wrapper%0A%20%20%20%20%20%20-%20%60let%20mut%20eth_client_contract%20%3D%20EthClientContract%3A%3Anew(get_eth_contract_wrapper(%26config))%3B%60%0A%20%20%20%20-%20%5BEthClientContract%20Wrapper%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Feth_client_contract.rs)%3A%20creates%20an%20instance%20of%20%5Beth2-client%20contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%20with%20the%20following%20arguments%0A%20%20%20%20%20%20-%20%60network%60%20-%20the%20name%20of%20Ethereum%20network%20such%20as%20%60mainnet%60%2C%20%60goerli%60%2C%20%60kiln%60%2C%20etc.%0A%20%20%20%20%20%20-%20%60finalized_execution_header%60%20-%20the%20finalized%20execution%20header%20to%20start%20initialization%20with.%0A%20%20%20%20%20%20-%20%60finalized_beacon_header%60%20-%20correspondent%20finalized%20beacon%20header.%0A%20%20%20%20%20%20-%20%60current_sync_committee%60%20-%20sync%20committee%20correspondent%20for%20finalized%20block.%0A%20%20%20%20%20%20-%20%60next_sync_committee%60%20-%20sync%20committee%20for%20the%20next%20period%20after%20period%20for%20finalized%20block.%0A%20%20%20%20%20%20-%20%60hashes_gs_threshold%60%20-%20the%20maximum%20number%20of%20stored%20finalized%20blocks.%0A%20%20%20%20%20%20-%20%60max_submitted_block_by_account%60%20-%20the%20maximum%20number%20of%20unfinalized%20blocks%20which%20one%20relay%20can%20store%20in%20the%20client's%20storage.%0A%20%20%20%20%20%20-%20%60trusted_signer%60%20-%20the%20account%20address%20of%20the%20trusted%20signer%20which%20is%20allowed%20to%20submit%20light%20client%20updates.%0A-%20%5BRelayer%20is%20Created%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L111)%3A%0A%20%20-%20%5Beth2near_relay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L111)%20is%20created%20using%20the%20following%20arguments%0A%20%20%20%20-%20%60let%20mut%20eth2near_relay%20%3D%20Eth2NearRelay%3A%3Ainit(%26config%2C%20get_eth_client_contract(%26config)%2C%20args.enable_binary_search%2C%20args.submit_only_finalized_blocks%2C)%3B%60%0A-%20%5BRelayer%20is%20Started%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs)%3A%0A%20%20-%20The%20relayer%20is%20started%20using%20%60eth2near_relay.run(None)%3B%60%0A%20%20-%20This%20executes%20the%20%5Beth2near_relay%20run%20function%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L257)%20%60pub%20fn%20run(%26mut%20self%2C%20max_iterations%3A%20Option%3Cu64%3E)%60%20which%20runs%20until%20terminated%20doing%20using%20the%20following%20loop%20%60while%20!self.terminate%60%0A%20%20%20%20-%20%60self.wait_for_synchronization()%2C%60%3A%20gets%20the%20sync%20status%0A%20%20%20%20-%20%60sleep(Duration%3A%3Afrom_secs(12))%3B%60%3A%20waits%20for%2012%20seconds%0A%20%20%20%20-%20%60self.get_max_slot_for_submission()%60%3A%20gets%20the%20maximum%20slot%20for%20submission%20from%20Ethereum%0A%20%20%20%20-%20%60self.get_last_eth2_slot_on_near%60%3A%20gets%20the%20latest%20slot%20propogated%20from%20Ethereum%20to%20NEAR%0A%20%20%20%20-%20%60if%20last_eth2_slot_on_near%20%3C%20max_slot_for_submission%60%3A%20If%20there%20are%20slots%20to%20process%0A%20%20%20%20%20%20-%20%60self.get_execution_blocks_between(last_eth2_slot_on_near%20%2B%201%2C%20max_slot_for_submission%2C)%2C%60%3A%20Get%20the%20execution%20blocks%20to%20be%20processed%0A%20%20%20%20%20%20-%20%60self.submit_execution_blocks(headers%2C%20current_slot%2C%20%26mut%20last_eth2_slot_on_near)%60%3A%20submit%20them%0A%20%20%20%20%20%20-%20%60were_submission_on_iter%20%3D%20true%3B%60%3A%20flags%20that%20there%20were%20submissions%0A%20%20%20%20-%20%60were_submission_on_iter%20%7C%3D%20self.send_light_client_updates_with_checks(last_eth2_slot_on_near)%3B%60%3A%20send%20light_client%20updates%20with%20checks%20and%20updates%20the%20submission%20flag%20to%20true%20if%20if%20passes.%20Following%20is%20some%20key%20logic%0A%20%20%20%20%20%20-%20%60self.is_enough_blocks_for_light_client_update%60%3A%20Checks%20if%20there%20are%20enough%20blocks%20for%20a%20light%20client%20update%0A%20%20%20%20%20%20%20%20-%20%60self.send_light_client_updates%60%20calls%20%60send_light_client_update%60%20which%0A%20%20%20%20%20%20%20%20%20%20-%20%60if%20last_finalized_slot_on_eth%20%3E%3D%20last_finalized_slot_on_near%20%2B%20self.max_blocks_for_finalization%60%3A%20checks%20if%20the%20gap%20is%20too%20big%20(i.e.%20we%20are%20at%20a%20new%20slot)%20between%20slot%20of%20finalized%20block%20on%20NEAR%20and%20ETH.%20If%20it%20is%20it%20sends%20a%20hand%20made%20client%20update%20(which%20will%20loop%20getting%20the%20new%20slots%20sync%20committees)%20otherwise%20it%20sends%20a%20regular%20client%20update%20(which%20propogates%20the%20block%20headers)%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.send_hand_made_light_client_update(last_finalized_slot_on_near)%3B%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20-%20%60let%20include_next_sync_committee%20%3D%20BeaconRPCClient%3A%3Aget_period_for_slot%20(last_finalized_slot_on_near)%20!%3D%20BeaconRPCClient%3A%3Aget_period_for_slot(attested_slot)%3B%60%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.send_regular_light_client_update(last_finalized_slot_on_eth%2C%20last_finalized_slot_on_near%2C)%3B%60%0A%20%20%20%20%20%20%20%20%20%20-%20%60self.send_specific_light_client_update(light_client_update)%60%20is%20called%20for%20both%20regular%20and%20hand%20made%20updates.%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.eth_client_contract.is_known_block%60%3A%20Checks%20if%20the%20block%20is%20already%20known%20on%20the%20Etherum%20Client%20Contract%20on%20NEAR%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.verify_bls_signature_for_finality_update(%26light_client_update)%60%3A%20Verifies%20the%20BLS%20signatures.%20This%20calls%20%60is_correct_finality_update%60%20in%20%60eth2near%2Ffinality-update-verify%2Fsrc%2Flib.rs%60%20%5C*%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.eth_client_contract.send_light_client_update(light_client_update.clone())%60%3A%20Updates%20the%20light%20client%20with%20the%20finalized%20block%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.beacon_rpc_client.get_block_number_for_slot(types%3A%3ASlot%3A%3Anew(light_client_update.finality_update.header_update.beacon_header.slot.as_u64()))%2C%60%3A%20Validates%20Finalized%20block%20number%20is%20correct%20on%20Ethereum%20usng%20the%20%60beacon_rpc_client%60.%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60sleep(Duration%3A%3Afrom_secs(self.sleep_time_after_submission_secs))%3B%60%3A%20sleeps%20for%20the%20configured%20submission%20sleep%20time.%0A%20%20%20%20-%20%60if%20!were_submission_on_iter%20%7Bthread%3A%3Asleep(Duration%3A%3Afrom_secs(self.sleep_time_on_sync_secs))%3B%7D%60%3A%20if%20there%20were%20submissions%20sleep%20for%20however%20many%20seconds%20were%20configured%20for%20sync%20sleep%20time.%0A%0A%23%23%23%20NEAR%20to%20Ethereum%20block%20propagation%20flow%0A%0A%5BNEAR%20Light%20Client%20Documentation%5D(https%3A%2F%2Fnomicon.io%2FChainSpec%2FLightClient)%20gives%20an%20overview%20of%20how%20light%20clients%20work.%20At%20a%20high%20level%20the%20light%20client%20needs%20to%20fetch%20at%20least%20one%20block%20per%20%5Bepoch%5D(https%3A%2F%2Fdocs.near.org%2Fconcepts%2Fbasics%2Fepoch)%20i.e.%20every%2042%2C200%20blocks%20or%20approxmiately%2012%20hours.%20Also%20Having%20the%20LightClientBlockView%20for%20block%20B%20is%20sufficient%20to%20be%20able%20to%20verify%20any%20statement%20about%20state%20or%20outcomes%20in%20any%20block%20in%20the%20ancestry%20of%20B%20(including%20B%20itself).%0A%0AThe%20current%20scripts%20and%20codebase%20indicates%20that%20a%20block%20would%20be%20fetched%20every%2030%20seconds%20with%20a%20max%20delay%20of%2010%20seconds.%20It%20feels%20that%20this%20would%20be%20expensive%20to%20update%20Ethereum%20so%20frequently.%20%5BNEAR's%20bridge%20documentation%5D(https%3A%2F%2Fnear.org%2Fbridge%2F)%20states%20_Sending%20assets%20from%20NEAR%20back%20to%20Ethereum%20currently%20takes%20a%20maximum%20of%20sixteen%20hours%20(due%20to%20Ethereum%20finality%20times)_.%20This%20seems%20to%20align%20with%20sending%20light%20client%20updates%20once%20per%20NEAR%20epoch.%20The%20block%20fetch%20period%20is%20configurable%20in%20the%20relayer.%0A%0A%3E%20The%20RPC%20returns%20the%20LightClientBlock%20for%20the%20block%20as%20far%20into%20the%20future%20from%20the%20last%20known%20hash%20as%20possible%20for%20the%20light%20client%20to%20still%20accept%20it.%20Specifically%2C%20it%20either%20returns%20the%20last%20final%20block%20of%20the%20next%20epoch%2C%20or%20the%20last%20final%20known%20block.%20If%20there's%20no%20newer%20final%20block%20than%20the%20one%20the%20light%20client%20knows%20about%2C%20the%20RPC%20returns%20an%20empty%20result.%0A%3E%0A%3E%20A%20standalone%20light%20client%20would%20bootstrap%20by%20requesting%20next%20blocks%20until%20it%20receives%20an%20empty%20result%2C%20and%20then%20periodically%20request%20the%20next%20light%20client%20block.%0A%3E%0A%3E%20A%20smart%20contract-based%20light%20client%20that%20enables%20a%20bridge%20to%20NEAR%20on%20a%20different%20blockchain%20naturally%20cannot%20request%20blocks%20itself.%20Instead%20external%20oracles%20query%20the%20next%20light%20client%20block%20from%20one%20of%20the%20full%20nodes%2C%20and%20submit%20it%20to%20the%20light%20client%20smart%20contract.%20The%20smart%20contract-based%20light%20client%20performs%20the%20same%20checks%20described%20above%2C%20so%20the%20oracle%20doesn't%20need%20to%20be%20trusted.%0A%0ABlock%20Submitters%20stake%20ETH%20to%20be%20allowed%20to%20submit%20blocks%20which%20get's%20slashed%20if%20the%20watchdog%20identifies%20blocks%20with%20invalid%20signatures.%0A%0A_Note%3A%20Have%20not%20identified%20how%20the%20block%20submitters%20are%20rewarded%20for%20submitting%20blocks.%20Currently%20have%20only%20identified%20them%20locking%20ETH%20to%20be%20able%20to%20submit%20blocks%20and%20being%20slashed%20if%20they%20submit%20blocks%20with%20invalid%20signatures._%0A%0A-%20%5BLight%20Clients%20are%20deployed%20on%20Ethereum%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Findex.js%23L518)%20via%20the%20CLI%20using%20%5Beth-contracts.js%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Finit%2Feth-contracts.js)%0A%20%20-%20%5Binit-eth-ed25519%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Findex.js%23L505)%3A%20Deploys%20%60Ed25519.sol%60%20see%20more%20information%20under%20%5Bnearbridge%20Cryptographic%20Primitives%5D(%23nearbridge-cryptographic-primitives)%0A%20%20-%20%5Binit-eth-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Findex.js%23L520)%3A%20Deploys%20%60NearBridge.sol%60%20see%20more%20information%20under%20%5BNEAR%20to%20Ethereum%20block%20propagation%20components%5D(%23near-to-ethereum-block-propagation-components).%20It%20takes%20the%20following%20arguments%0A%20%20%20%20-%20%60ethEd25519Address%60%3A%20The%20address%20of%20the%20ECDSA%20signature%20checker%20using%20Ed25519%20curve%20(see%20%5Bhere%5D(https%3A%2F%2Fnbeguier.medium.com%2Fa-real-world-comparison-of-the-ssh-key-algorithms-b26b0b31bfd9))%0A%20%20%20%20-%20%60lockEthAmount%60%3A%20The%20amount%20that%20%60BLOCK_PRODUCERS%60%20need%20to%20deposit%20(in%20wei)to%20be%20able%20to%20provide%20blocks.%20This%20amount%20will%20be%20slashed%20if%20the%20block%20is%20challenged%20and%20proven%20not%20to%20have%20a%20valid%20signature.%20Default%20value%20is%20100000000000000000000%20WEI%20%3D%20100%20ETH.%0A%20%20%20%20-%20%60lockDuration%60%20%3A%2030%20seconds%0A%20%20%20%20-%20%60replaceDuration%60%3A%2060%20seconds%20it%20is%20passed%20in%20nanoseconds%2C%20because%20it%20is%20a%20difference%20between%20NEAR%20timestamps.%0A%20%20%20%20-%20%60ethAdminAddress%60%3A%20Bridge%20Administrator%20Address%0A%20%20%20%20-%20%600%60%20%3A%20Indicates%20nothing%20is%20paused%20%60UNPAUSE_ALL%60%0A%20%20-%20%5Binit-eth-prover%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Findex.js%23L538)%3A%20Deploys%20%60NearProver.sol%60%20see%20more%20information%20under%20%5BNEAR%20to%20Ethereum%20block%20propagation%20components%5D(%23near-to-ethereum-block-propagation-components).%20It%20takes%20the%20following%20arguments%0A%20%20%20%20-%20%60ethClientAddress%60%3A%20Interface%20to%20%60NearBridge.sol%60%0A%20%20%20%20-%20%60ethAdminAddress%60%3A%20Administrator%20address%0A%20%20%20%20-%20%600%60%3A%20paused%20indicator%20defaults%20to%20%60UNPAUSE_ALL%20%3D%200%60%0A-%20%5BRelayer%20is%20Started%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Fcommands%2Fstart%2Fnear2eth-relay.js)%0A%20%20-%20Relayer%20is%20started%20using%20the%20following%20command%0A%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20cli%2Findex.js%20start%20near2eth-relay%20%5C%0A%20%20%20%20%20%20%20%20--eth-node-url%20http%3A%2F%2F127.0.0.1%3A8545%2F%20%5C%0A%20%20%20%20%20%20%20%20--eth-master-sk%200xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80%20%5C%0A%20%20%20%20%20%20%20%20--near-node-url%20https%3A%2F%2Frpc.testnet.near.org%2F%20%5C%0A%20%20%20%20%20%20%20%20--near-network-id%20testnet%20%5C%0A%20%20%20%20%20%20%20%20--eth-client-address%200xe7f1725e7734ce288f8367e1bb143e90bb3f0512%20%5C%0A%20%20%20%20%20%20%20%20--eth-use-eip-1559%20true%20%5C%0A%20%20%20%20%20%20%20%20--near2eth-relay-max-delay%2010%20%5C%0A%20%20%20%20%20%20%20%20--near2eth-relay-block-select-duration%2030%20%5C%0A%20%20%20%20%20%20%20%20--near2eth-relay-after-submit-delay-ms%201000%20%5C%0A%20%20%20%20%20%20%20%20--log-verbose%20true%20%5C%0A%20%20%20%20%20%20%20%20--daemon%20false%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A-%20%5BRelayer%20Logic%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fnear2eth%2Fnear2eth-block-relay%2Findex.js)%0A%20%20-%20Loops%20%60while%20(true)%60%0A%20%20%20%20-%20Get%20the%20bridge%20state%20(including%20%60currentHeight%60%2C%20%60nextTimestamp%60%2C%20%60nextValidAt%60%2C%20%60numBlockProducers%60%20)%0A%20%20%20%20-%20Get%20the%20%60currentBlockHash%60%20the%20hash%20of%20the%20current%20untrursted%20block%20based%20on%20%60lastValidAt%60%0A%20%20%20%20-%20Gets%20the%20%60lastBlock%60%20by%20calling%20the%20NEAR%20rpc%20%60next_light_client_block%60%20using%20the%20hash%20of%20last%20untrusted%20block%20%60bs58.encode(currentBlockHash)%60%0A%20%20%20%20-%20Get's%20the%20%60replaceDuration%60%20by%20%60clientContract.methods.replaceDuration().call()%60%20this%20will%20be%2060%20seconds%20if%20we%20deployed%20%60NearBridge.sol%60%20with%20the%20default%20values%20above%0A%20%20%20%20-%20Sets%20%60nextValidAt%60%20from%20the%20bridge%20state%20%60web3.utils.toBN(bridgeState.nextValidAt)%60%0A%20%20%20%20-%20Sets%20%60replaceDelay%60%20to%200%20then%20updates%20it%20to%20the%20%60nextTimestamp%60%20%2B%20%60replaceDuration%60%20-%20%60lastBlock.inner_lite.timestamp%60%20i.e.%20The%20new%20block%20has%20to%20be%20at%20least%2060%20seconds%20after%20the%20current%20block%20stored%20on%20the%20light%20client.%0A%20%20%20%20-%20Checks%20the%20height%20of%20the%20%60currentHeight%60%20of%20the%20bridge%20is%20less%20than%20the%20%60lastblock%60%20from%20the%20near%20light%20client%20%60(bridgeState.currentHeight%20%3C%20lastBlock.inner_lite.height)%60%0A%20%20%20%20-%20Serializes%20the%20%60lastBlock%60%20using%20Borsh%20and%20check%20that%20the%20block%20is%20suitable%0A%20%20%20%20-%20Checks%20that%20the%20%60replaceDelay%60%20has%20been%20met%2C%20if%20not%20sleeps%20until%20it%20has%0A%20%20%20%20-%20Checks%20that%20the%20Master%20Account%20(the%20one%20submitting%20the%20block)%20has%20enough%20locked%20ETH%20(if%20not%20tries%20to%20deposit%20more).%20So%20that%20it%20can%20be%20slashed%20if%20the%20block%20proposed%20is%20invalid.%0A%20%20%20%20-%20Adds%20the%20light%20client%20block%20%60await%20clientContract.methods.addLightClientBlock(nextBlockSelection.borshBlock).send%60%0A%20%20%20%20%20%20-%20Checks%20%60NearBridge.sol%60%20(the%20light%20client)%20has%20been%20initialized%0A%20%20%20%20%20%20-%20Checks%20%60balanceOf%5Bmsg.sender%5D%20%3E%3D%20lockEthAmount%60%20that%20the%20sender%20has%20locked%20enough%20Eth%20to%20allow%20them%20to%20submit%20blocks%0A%20%20%20%20%20%20-%20Decodes%20the%20nearBlock%20using%20%60Borsh.from(data)%60%20and%20%60borsh.decodeLightClientBlock()%60%0A%20%20%20%20%20%20-%20Commis%20the%20previous%20block%2C%20or%20make%20sure%20that%20it%20is%20OK%20to%20replace%20it%20using%0A%20%20%20%20%20%20%20%20-%20%60lastValidAt%20%3D%200%3B%60%0A%20%20%20%20%20%20%20%20-%20%60blockHashes_%5BcurHeight%5D%20%3D%20untrustedHash%3B%60%0A%20%20%20%20%20%20%20%20-%20%60blockMerkleRoots_%5BcurHeight%5D%20%3D%20untrustedMerkleRoot%3B%60%0A%20%20%20%20%20%20-%20Check%20that%20the%20new%20block's%20height%20is%20greater%20than%20the%20current%20one's.%20%60nearBlock.inner_lite.height%20%3E%20curHeight%60%0A%20%20%20%20%20%20-%20Check%20that%20the%20new%20block%20is%20from%20the%20same%20epoch%20as%20the%20current%20one%2C%20or%20from%20the%20next%20one.%0A%20%20%20%20%20%20-%20Check%20that%20the%20new%20block%20is%20signed%20by%20more%20than%202%2F3%20of%20the%20validators.%0A%20%20%20%20%20%20-%20If%20the%20block%20is%20from%20the%20next%20epoch%2C%20make%20sure%20that%20the%20Block%20producers%20%60next_bps%60%20are%20supplied%20and%20have%20a%20correct%20hash.%0A%20%20%20%20%20%20-%20Add%20the%20Block%20to%20the%20Light%20client%0A%20%20%20%20%20%20%20%20-%20Updates%20untrusted%20information%20to%20this%20block%20including%20%60untrustedHeight%60%2C%20%60untrustedTimestamp%60%2C%20%60untrustedHash%60%2C%20%60untrustedMerkleRoot%60%2C%20%60untrustedNextHash%60%2C%20%60untrustedSignatureSet%60%2C%20%60untrustedNextEpoch%60%0A%20%20%20%20%20%20%20%20-%20If%20%60fromNextEpoch%60%20also%20update%20the%20Block%20Producers%0A%20%20%20%20%20%20%20%20-%20Updates%20the%20%60lastSubmitter%60%20and%20%60lastValidAt%60%0A%20%20%20%20-%20Cleans%20up%20the%20selected%20block%20to%20prevent%20submitting%20the%20same%20block%20again%20%60await%20sleep(afterSubmitDelayMs)%60%0A%20%20%20%20-%20Sets%20the%20HeightGauuges%20to%20the%20correct%20block%20height%0A%20%20%20%20%20%20-%20%60clientHeightGauge.set(Number(BigInt(bridgeState.currentHeight))%60%0A%20%20%20%20%20%20-%20%60chainHeightGauge.set(Number(BigInt(lastBlock.inner_lite.height)))%60%0A%20%20%20%20-%20Sleeps%20for%20delay%20calculated%20from%20the%20maximum%20of%20the%20relayer%20days%20(10%20seconds)%20and%20differnce%20between%20the%20current%20and%20next%20block%20time%20stamps%20and%20%60await%20sleep(1000%20*%20delay)%60%0A%0A%23%23%20Light%20Client%20Functionality%0A%0A%23%23%23%20Near%20Rainbow%20Bridge%20Ethereum%20Light%20Client%20Walkthrough%0A%0AThe%20following%20is%20a%20walkthrough%20of%20how%20a%20transaction%20executed%20on%20Ethereum%20is%20propogated%20to%20NEAR's%20%5Beth2-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-client).%20See%20%5BCryptographic%20Primitives%5D(%23cryptographic-primitives)%20for%20more%20information%20on%20the%20cryptography%20used.%20and%20%5BAppendix%20B%5D(%23appendix-b-ethereum-light-client-finality-update-verify-components)%20for%20verification%20components.%0A%0A**At%20a%20high%20level%20the%20ethereum%20light%20client%20contract**%0A%0A-%20Optionally%20accepts%20client%20updates%20only%20from%20a%20trusted%20client%0A-%20Can%20pause%20functions%0A-%20Validates%20a%20sync%20committee%20exists%20for%20the%20curremt%20slot%0A-%20Validates%20sync%20committe%20has%20greater%20than%20the%20minimum%20required%20sync%20committee%20members%0A-%20Validates%202%2F3%20or%20more%20of%20the%20committe%20members%20have%20signed%20the%20blocks%0A-%20Validates%20bls%20signatures%20(i.e.%20the%20bls%20signatures%20of%20the%20sync%20comittee%20for%20the%20blocks%20propogated)%0A-%20Stores%20the%20hashes%20of%20the%20blocks%20for%20the%20past%20%60hashes_gc_threshold%60%20headers.%20Events%20that%20happen%20past%20this%20threshold%20cannot%20be%20verified%20by%20the%20client.%20It%20is%20desirable%20that%20this%20number%20is%20larger%20than%207%20days'%20worth%20of%20headers%2C%20which%20is%20roughly%2051k%20Ethereum%20blocks.%20So%20this%20number%20should%20be%2051k%20in%20production.%0A-%20Stores%20the%20Ethereum%20Network%20(e.g.%20mainnet%2C%20kiln)%0A-%20Stores%20Hashes%20of%20the%20finalized%20execution%20blocks%20mapped%20to%20their%20numbers.%0A-%20Stores%20All%20unfinalized%20execution%20blocks'%20headers%20hashes%20mapped%20to%20their%20%60HeaderInfo%60.%0A-%20Stores%20%60AccountId%60s%20mapped%20to%20their%20number%20of%20submitted%20headers.%0A-%20Stores%20Max%20number%20of%20unfinalized%20blocks%20allowed%20to%20be%20stored%20by%20one%20submitter%20account.%20This%20value%20should%20be%20at%20least%2032%20blocks%20(1%20epoch)%2C%20but%20the%20recommended%20value%20is%201024%20(32%20epochs)%0A-%20Stores%20minimum%20balance%20that%20should%20be%20attached%20to%20register%20a%20new%20submitter%20account.%0A-%20Stores%20finalized%20beacon%20header%0A-%20Stores%20finalized%20execution%20header%0A-%20Stores%20current_sync_committee%0A-%20Stores%20next_sync_committee%0A%0A%23%23%23%20Near%20Rainbow%20Bridge%20Near%20Light%20Client%20Walkthrough%0A%0AThe%20following%20is%20a%20walkthrough%20of%20how%20a%20transaction%20executed%20on%20NEAR%20is%20propogated%20to%20Ethereum's%20%5Bnearbridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge).%20See%20%5Bnearbridge%20Cryptographic%20Primitives%5D(%23nearbridge-cryptographic-primitives)%20for%20more%20information%20on%20the%20cryptography%20used.%0A%0A**NearOnEthClient%20Overview**%0A%0A_The%20following%20is%20an%20excerpt%20from%20a%20blog%20by%20near%20on%20%5Beth-near-rainbow-bridge%5D(https%3A%2F%2Fnear.org%2Fblog%2Feth-near-rainbow-bridge%2F)_%0A%0A%3E%20NearOnEthClient%20is%20an%20implementation%20of%20the%20NEAR%20light%20client%20in%20Solidity%20as%20an%20Ethereum%20contract.%20Unlike%20EthOnNearClient%20it%20does%20not%20need%20to%20verify%20every%20single%20NEAR%20header%20and%20can%20skip%20most%20of%20them%20as%20long%20as%20it%20verifies%20at%20least%20one%20header%20per%20NEAR%20epoch%2C%20which%20is%20about%2043k%20blocks%20and%20lasts%20about%20half%20a%20day.%20As%20a%20result%2C%20NearOnEthClient%20can%20memorize%20hashes%20of%20all%20submitted%20NEAR%20headers%20in%20history%2C%20so%20if%20you%20are%20making%20a%20transfer%20from%20NEAR%20to%20Ethereum%20and%20it%20gets%20interrupted%20you%20don%E2%80%99t%20need%20to%20worry%20and%20you%20can%20resume%20it%20any%20time%2C%20even%20months%20later.%20Another%20useful%20property%20of%20the%20NEAR%20light%20client%20is%20that%20every%20NEAR%20header%20contains%20a%20root%20of%20the%20merkle%20tree%20computed%20from%20all%20headers%20before%20it.%20As%20a%20result%2C%20if%20you%20have%20one%20NEAR%20header%20you%20can%20efficiently%20verify%20any%20event%20that%20happened%20in%20any%20header%20before%20it.%0A%3E%0A%3E%20Another%20useful%20property%20of%20the%20NEAR%20light%20client%20is%20that%20it%20only%20accepts%20final%20blocks%2C%20and%20final%20blocks%20cannot%20leave%20the%20canonical%20chain%20in%20NEAR.%20This%20means%20that%20NearOnEthClient%20does%20not%20need%20to%20worry%20about%20forks.%0A%3E%0A%3E%20However%2C%20unfortunately%2C%20NEAR%20uses%20%5BEd25519%5D(https%3A%2F%2Fgithub.com%2Fethereum%2FEIPs%2Fblob%2Fmaster%2FEIPS%2Feip-665.mdx)%20to%20sign%20messages%20of%20the%20validators%20who%20approve%20the%20blocks%2C%20and%20this%20signature%20is%20not%20available%20as%20an%20EVM%20precompile.%20It%20makes%20verification%20of%20all%20signatures%20of%20a%20single%20NEAR%20header%20prohibitively%20expensive.%20So%20technically%2C%20we%20cannot%20verify%20one%20NEAR%20header%20within%20one%20contract%20call%20to%20NearOnEthClient.%20Therefore%20we%20adopt%20the%20%5Boptimistic%20approach%5D(https%3A%2F%2Fmedium.com%2F%40deaneigenmann%2Foptimistic-contracts-fb75efa7ca84)%20where%20NearOnEthClient%20verifies%20everything%20in%20the%20NEAR%20header%20except%20the%20signatures.%20Then%20anyone%20can%20challenge%20a%20signature%20in%20a%20submitted%20header%20within%20a%204-hour%20challenge%20window.%20The%20challenge%20requires%20verification%20of%20a%20single%20Ed25519%20signature%20which%20would%20cost%20about%20500k%20Ethereum%20gas%20(expensive%2C%20but%20possible).%20The%20user%20submitting%20the%20NEAR%20header%20would%20have%20to%20post%20a%20bond%20in%20Ethereum%20tokens%2C%20and%20a%20successful%20challenge%20would%20burn%20half%20of%20the%20bond%20and%20return%20the%20other%20half%20to%20the%20challenger.%20The%20bond%20should%20be%20large%20enough%20to%20pay%20for%20the%20gas%20even%20if%20the%20gas%20price%20increases%20exponentially%20during%20the%204%20hours.%20For%20instance%2C%20a%2020%20ETH%20bond%20would%20cover%20gas%20price%20hikes%20up%20to%2020000%20Gwei.%20This%20optimistic%20approach%20requires%20having%20a%20watchdog%20service%20that%20monitors%20submitted%20NEAR%20headers%20and%20challenges%20any%20headers%20with%20invalid%20signatures.%20For%20added%20security%2C%20independent%20users%20can%20run%20several%20watchdog%20services.%0A%3E%0A%3E%20Once%20EIP665%20is%20accepted%2C%20Ethereum%20will%20have%20the%20Ed25519%20signature%20available%20as%20an%20EVM%20precompile.%20This%20will%20make%20watchdog%20services%20and%20the%204-hour%20challenge%20window%20unnecessary.%0A%3E%0A%3E%20At%20its%20bare%20minimum%2C%20Rainbow%20Bridge%20consists%20of%20EthOnNearClient%20and%20NearOnEthClient%20contracts%2C%20and%20three%20services%3A%20Eth2NearRelay%2C%20Near2EthRelay%2C%20and%20the%20Watchdog.%20We%20might%20argue%20that%20this%20already%20constitutes%20a%20bridge%20since%20we%20have%20established%20a%20cryptographic%20link%20between%20two%20blockchains%2C%20but%20practically%20speaking%20it%20requires%20a%20large%20portion%20of%20additional%20code%20to%20make%20application%20developers%20even%20consider%20using%20the%20Rainbow%20Bridge%20for%20their%20applications.%0A%0A_The%20following%20information%20on%20sending%20assets%20from%20NEAR%20back%20to%20Ethereum%20is%20an%20excerpt%20from%20%5Bhttps%3A%2F%2Fnear.org%2Fbridge%2F%5D(https%3A%2F%2Fnear.org%2Fbridge%2F)._%0A%0A%3E%20Sending%20assets%20from%20NEAR%20back%20to%20Ethereum%20currently%20takes%20a%20maximum%20of%20sixteen%20hours%20(due%20to%20Ethereum%20finality%20times)%20and%20costs%20around%20%2460%20(due%20to%20ETH%20gas%20costs%20and%20at%20current%20ETH%20price).%20These%20costs%20and%20speeds%20will%20improve%20in%20the%20near%20future.%0A%0A%23%23%20Token%20Lockers%0A%0A%23%23%23%20Token%20Transfer%20Process%20Flow%0A%0AThe%20%5BNEAR%20Rainbow%20Bridge%5D(https%3A%2F%2Fnear.org%2Fbridge%2F)%20uses%20ERC-20%20connectors%20which%20are%20developed%20in%20%5Brainbow-token-connector%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector)%20and%20%5Brainbow-bridge-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge-client).%20Also%20see%20%5Beth2near-fun-transfer.md%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fdocs%2Fworkflows%2Feth2near-fun-transfer.mdx).%0A%0AFollowing%20is%20an%20overview%20of%20timing%20and%20anticipated%20costs%0A%0A-%20Once%20on%20NEAR%2C%20transactions%20will%20confirm%20in%201-2%20seconds%20and%20cost%20well%20under%20%241%20in%20most%20cases.%0A-%20Since%20the%20Bridge%20requires%20transactions%20on%20Ethereum%20for%20NEAR%20and%20Ethereum%2C%20the%20following%20costs%20are%20expected.%0A-%20Sending%20assets%20from%20Ethereum%20to%20NEAR%20takes%20about%20six%20minutes%20(20%20blocks)%20and%20for%20ERC-20%20costs%20about%20%2410%20on%20average.%0A-%20Sending%20assets%20from%20NEAR%20back%20to%20Ethereum%20currently%20takes%20a%20maximum%20of%20sixteen%20hours%20(due%20to%20Ethereum%20finality%20times)%20and%20costs%20around%20%2460%20(due%20to%20ETH%20gas%20costs%20and%20at%20current%20ETH%20price).%20These%20costs%20and%20speeds%20will%20improve%20in%20the%20near%20future.%0A%0A_Note%3A%20This%20uses%20Ethreum%20%5BERC20%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-20)%20and%20NEAR%20%5BNEP-141%5D(https%3A%2F%2Fnomicon.io%2FStandards%2FTokens%2FFungibleToken%2FCore)%20initally%20developed%20for%20%5BNEP-21%5D(https%3A%2F%2Fgithub.com%2Fnear%2FNEPs%2Fpull%2F21)_%0A%0A**%5BGeneric%20ERC-20%2FNEP-141%20connector%20for%20Rainbow%20Bridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2FREADME.mdx)**%0A%0A**Specification**%0A%0A**Ethereum's%20side**%0A%0A%60%60%60solidity%0Acontract%20ERC20Locker%20%7B%0A%20%20constructor(bytes%20memory%20nearTokenFactory%2C%20INearProver%20prover)%20public%3B%0A%20%20function%20lockToken(IERC20%20token%2C%20uint256%20amount%2C%20string%20memory%20accountId)%20public%3B%0A%20%20function%20unlockToken(bytes%20memory%20proofData%2C%20uint64%20proofBlockHeader)%20public%3B%0A%7D%0A%60%60%60%0A%0A**NEAR's%20side**%0A%0A%60%60%60rust%0Astruct%20BridgeTokenFactory%20%7B%0A%20%20%20%20%2F%2F%2F%20The%20account%20of%20the%20prover%20that%20we%20can%20use%20to%20prove%0A%20%20%20%20pub%20prover_account%3A%20AccountId%2C%0A%20%20%20%20%2F%2F%2F%20Address%20of%20the%20Ethereum%20locker%20contract.%0A%20%20%20%20pub%20locker_address%3A%20%5Bu8%3B%2020%5D%2C%0A%20%20%20%20%2F%2F%2F%20Hashes%20of%20the%20events%20that%20were%20already%20used.%0A%20%20%20%20pub%20used_events%3A%20UnorderedSet%3CVec%3Cu8%3E%3E%2C%0A%20%20%20%20%2F%2F%2F%20Mapping%20from%20Ethereum%20tokens%20to%20NEAR%20tokens.%0A%20%20%20%20pub%20tokens%3A%20UnorderedMap%3CEvmAddress%2C%20AccountId%3E%3B%0A%7D%0A%0Aimpl%20BridgeTokenFactory%20%7B%0A%20%20%20%20%2F%2F%2F%20Initializes%20the%20contract.%0A%20%20%20%20%2F%2F%2F%20%60prover_account%60%3A%20NEAR%20account%20of%20the%20Near%20Prover%20contract%3B%0A%20%20%20%20%2F%2F%2F%20%60locker_address%60%3A%20Ethereum%20address%20of%20the%20locker%20contract%2C%20in%20hex.%0A%20%20%20%20%23%5Binit%5D%0A%20%20%20%20pub%20fn%20new(prover_account%3A%20AccountId%2C%20locker_address%3A%20String)%20-%3E%20Self%3B%0A%0A%20%20%20%20%2F%2F%2F%20Relays%20the%20lock%20event%20from%20Ethereum.%0A%20%20%20%20%2F%2F%2F%20Uses%20prover%20to%20validate%20that%20proof%20is%20correct%20and%20relies%20on%20a%20canonical%20Ethereum%20chain.%0A%20%20%20%20%2F%2F%2F%20Send%20%60mint%60%20action%20to%20the%20token%20that%20is%20specified%20in%20the%20proof.%0A%20%20%20%20%23%5Bpayable%5D%0A%20%20%20%20pub%20fn%20deposit(%26mut%20self%2C%20proof%3A%20Proof)%3B%0A%0A%20%20%20%20%2F%2F%2F%20A%20callback%20from%20BridgeToken%20contract%20deployed%20under%20this%20factory.%0A%20%20%20%20%2F%2F%2F%20Is%20called%20after%20tokens%20are%20burned%20there%20to%20create%20an%20receipt%20result%20%60(amount%2C%20token_address%2C%20recipient_address)%60%20for%20Ethereum%20to%20unlock%20the%20token.%0A%20%20%20%20pub%20fn%20finish_withdraw(token_account%3A%20AccountId%2C%20amount%3A%20Balance%2C%20recipient%3A%20EvmAddress)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Transfers%20given%20NEP-21%20token%20from%20%60predecessor_id%60%20to%20factory%20to%20lock.%0A%20%20%20%20%2F%2F%2F%20On%20success%2C%20leaves%20a%20receipt%20result%20%60(amount%2C%20token_address%2C%20recipient_address)%60.%0A%20%20%20%20%23%5Bpayable%5D%0A%20%20%20%20pub%20fn%20lock(%26mut%20self%2C%20token%3A%20AccountId%2C%20amount%3A%20Balance%2C%20recipient%3A%20String)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Relays%20the%20unlock%20event%20from%20Ethereum.%0A%20%20%20%20%2F%2F%2F%20Uses%20prover%20to%20validate%20that%20proof%20is%20correct%20and%20relies%20on%20a%20canonical%20Ethereum%20chain.%0A%20%20%20%20%2F%2F%2F%20Uses%20NEP-21%20%60transfer%60%20action%20to%20move%20funds%20to%20%60recipient%60%20account.%0A%20%20%20%20%23%5Bpayable%5D%0A%20%20%20%20pub%20fn%20unlock(%26mut%20self%2C%20proof%3A%20Proof)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Deploys%20BridgeToken%20contract%20for%20the%20given%20EVM%20address%20in%20hex%20code.%0A%20%20%20%20%2F%2F%2F%20The%20name%20of%20new%20NEP21%20compatible%20contract%20will%20be%20%3Chex(evm_address)%3E.%3Ccurrent_id%3E.%0A%20%20%20%20%2F%2F%2F%20Expects%20~35N%20attached%20to%20cover%20storage%20for%20BridgeToken.%0A%20%20%20%20%23%5Bpayable%5D%0A%20%20%20%20pub%20fn%20deploy_bridge_token(address%3A%20String)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Checks%20if%20Bridge%20Token%20has%20been%20successfully%20deployed%20with%20%60deploy_bridge_token%60.%0A%20%20%20%20%2F%2F%2F%20On%20success%2C%20returns%20the%20name%20of%20NEP21%20contract%20associated%20with%20given%20address%20(%3Chex(evm_address)%3E.%3Ccurrent_id%3E).%0A%20%20%20%20%2F%2F%2F%20Otherwise%2C%20returns%20%22token%20do%20not%20exists%22%20error.%0A%20%20%20%20pub%20fn%20get_bridge_token_account_id(%26self%2C%20address%3A%20String)%20-%3E%20AccountId%3B%0A%7D%0A%0Astruct%20BridgeToken%20%7B%0A%20%20%20controller%3A%20AccountId%2C%0A%20%20%20token%3A%20Token%2C%20%2F%2F%20uses%20https%3A%2F%2Fgithub.com%2Filblackdragon%2Fbalancer-near%2Ftree%2Fmaster%2Fnear-lib-rs%0A%7D%0A%0Aimpl%20BridgeToken%20%7B%0A%20%20%20%20%2F%2F%2F%20Setup%20the%20Token%20contract%20with%20given%20factory%2Fcontroller.%0A%20%20%20%20pub%20fn%20new(controller%3A%20AccountId)%20-%3E%20Self%3B%0A%0A%20%20%20%20%2F%2F%2F%20Mint%20tokens%20to%20given%20user.%20Only%20can%20be%20called%20by%20the%20controller.%0A%20%20%20%20pub%20fn%20mint(%26mut%20self%2C%20account_id%3A%20AccountId%2C%20amount%3A%20Balance)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Withdraw%20tokens%20from%20this%20contract.%0A%20%20%20%20%2F%2F%2F%20Burns%20sender's%20tokens%20and%20calls%20controller%20to%20create%20event%20for%20relaying.%0A%20%20%20%20pub%20fn%20withdraw(%26mut%20self%2C%20amount%3A%20U128%2C%20recipient%3A%20String)%20-%3E%20Promise%3B%0A%7D%0A%0Aimpl%20FungibleToken%20for%20BridgeToken%20%7B%0A%20%20%20%2F%2F%20see%20example%20https%3A%2F%2Fgithub.com%2Filblackdragon%2Fbalancer-near%2Fblob%2Fmaster%2Fbalancer-pool%2Fsrc%2Flib.rs%23L329%0A%7D%0A%60%60%60%0A%0A**Setup%20new%20ERC-20%20on%20NEAR**%0A%0ATo%20setup%20token%20contract%20on%20NEAR%20side%2C%20anyone%20can%20call%20%60%3Cbridge_token_factory%3E.deploy_bridge_token(%3Cerc20%3E)%60%20where%20%60%3Cerc20%3E%60%20is%20the%20address%20of%20the%20token.%0AWith%20this%20call%20must%20attach%20the%20amount%20of%20%24NEAR%20to%20cover%20storage%20for%20(at%20least%2030%20%24NEAR%20currently).%0A%0AThis%20will%20create%20%60%3C%3Chex(erc20)%3E.%3Cbridge_token_factory%3E%3E%60%20NEP141-compatible%20contract.%0A%0A**Usage%20flow%20Ethereum%20-%3E%20NEAR**%0A%0A1.%20User%20sends%20%60%3Cerc20%3E.approve(%3Cerc20locker%3E%2C%20%3Camount%3E)%60%20Ethereum%20transaction.%0A2.%20User%20sends%20%60%3Cerc20locker%3E.lock(%3Cerc20%3E%2C%20%3Camount%3E%2C%20%3Cdestination%3E)%60%20Ethereum%20transaction.%20This%20transaction%20will%20create%20%60Locked%60%20event.%0A3.%20Relayers%20will%20be%20sending%20Ethereum%20blocks%20to%20the%20%60EthClient%60%20on%20NEAR%20side.%0A4.%20After%20sufficient%20number%20of%20confirmations%20on%20top%20of%20the%20mined%20Ethereum%20block%20that%20contain%20the%20%60lock%60%20transaction%2C%20user%20or%20relayer%20can%20call%20%60BridgeTokenFactory.deposit(proof)%60.%20Proof%20is%20the%20extracted%20information%20from%20the%20event%20on%20Ethereum%20side.%0A5.%20%60BridgeTokenFactory.deposit%60%20function%20will%20call%20%60EthProver%60%20and%20verify%20that%20proof%20is%20correct%20and%20relies%20on%20a%20block%20with%20sufficient%20number%20of%20confirmations.%0A6.%20%60EthProver%60%20will%20return%20callback%20to%20%60BridgeTokenFactory%60%20confirming%20that%20proof%20is%20correct.%0A7.%20%60BridgeTokenFactory%60%20will%20call%20%60%3C%3Chex(erc20)%3E.%3Cbridge_token_factory%3E%3E.mint(%3Cnear_account_id%3E%2C%20%3Camount%3E)%60.%0A8.%20User%20can%20use%20%60%3C%3Chex(erc20)%3E.%3Cbridge_token_factory%3E%3E%60%20token%20in%20other%20applications%20now%20on%20NEAR.%0A%0A**Usage%20flow%20NEAR%20-%3E%20Ethereum**%0A%0A1.%20%60token-locker%60%20locks%20NEP141%20tokens%20on%20NEAR%20side.%0A%0ATo%20deposit%20funds%20into%20the%20locker%2C%20call%20%60ft_transfer_call%60%20where%20%60msg%60%20contains%20Ethereum%20address%20the%20funds%20should%20arrive%20to.%0AThis%20will%20emit%20%60%3Ctoken%3A%20String%2C%20amount%3A%20u128%2C%20recipient%20address%3A%20EthAddress%3E%60%20(which%20arrives%20to%20%60deposit%60%20on%20Ethereum%20side).%0A%0AAccepts%20%60Unlock(token%3A%20String%2C%20sender_id%3A%20EthAddress%2C%20amount%3A%20u256%2C%20recipient%3A%20String)%60%20event%20from%20Ethereum%20side%20with%20a%20proof%2C%20verifies%20its%20correctness.%0AIf%20%60recipient%60%20contains%20'%3A'%20will%20split%20it%20into%20%60%3Crecipient%2C%20msg%3E%60%20and%20do%20%60ft_transfer_call(recipient%2C%20amount%2C%20None%2C%20msg)%60.%20Otherwise%20will%20%60ft_transfer%60%20to%20%60recipient%60.%0A%0ATo%20get%20metadata%20of%20token%20to%20Ethereum%2C%20need%20to%20call%20%60log_metadata%60%2C%20which%20will%20create%20a%20result%20%60%3Ctoken%3A%20String%2C%20name%3A%20String%2C%20symbol%3A%20String%2C%20decimals%3A%20u8%2C%20blockHeight%3A%20u64%3E%60.%0A%0A2.%20%60erc20-bridge-token%60%20-%20%60BridgeTokenFactory%60%20and%20%60BridgeToken%60%20Ethereum%20contracts.%0A%0A%60BridgeTokenFactory%60%20creates%20new%20%60BridgeToken%60%20that%20correspond%20to%20specific%20token%20account%20id%20on%20NEAR%20side.%0A%0A%60BridgeTokenFactory%60%20receives%20%60deposit%60%20with%20proof%20from%20NEAR%2C%20verify%20them%20and%20mint%20appropriate%20amounts%20on%20recipient%20addresses.%0A%0ACalling%20%60withdraw%60%20will%20burn%20tokens%20of%20this%20user%20and%20will%20generate%20event%20%60%3Ctoken%3A%20String%2C%20sender_id%3A%20EthAddress%2C%20amount%3A%20u256%2C%20recipient%3A%20String%3E%60%20that%20can%20be%20relayed%20to%20%60token-factory%60.%0A%0A**Caveats**%0A%0AGenerally%2C%20this%20connector%20allows%20any%20account%20to%20call%20%60ft_transfer_call%60%20opening%20for%20potential%20malicious%20tokens%20to%20be%20bridged%20to%20Ethereum.%0AThe%20expectation%20here%20is%20that%20on%20Ethereum%20side%2C%20the%20token%20lists%20will%20handle%20this%2C%20as%20it's%20the%20same%20attack%20model%20as%20malicious%20tokens%20on%20Uniswap%20and%20other%20DEXs.%0A%0AUsing%20Ethereum%20%60BridgeTokenFactory%60%20contract%20can%20always%20resolve%20Ethereum%20address%20of%20a%20contract%20back%20to%20NEAR%20one%20to%20check%20that%20it%20is%20indeed%20bridging%20token%20from%20NEAR%20and%20is%20created%20by%20this%20factory.%0A%0A**Testing**%0A%0ATesting%20Ethereum%20side%0A%0A%60%60%60%0Acd%20erc20-connector%0Ayarn%0Ayarn%20run%20test%0A%60%60%60%0A%0ATesting%20NEAR%20side%0A%0A%60%60%60%0Amake%20res%2Fbridge_token_factory.wasm%0Acargo%20test%20--all%0A%60%60%60%0A%0A%23%23%20Multi-chain%20support%0A%0A%23%23%20Economics%0A%0A%23%23%20References%0A%0A-%20Ethereum%202.0%20Specifications%0A%20%20-%20%5BBeacon%20Chain%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fmaster%2Fspecs%2Fphase0%2Fbeacon-chain.mdx)%0A%20%20-%20%5BExtended%20light%20client%20protocol%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fextended_light_client_protocol)%0A%20%20-%20%5BAltair%20Light%20Client%20--%20Light%20Client%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%0A%20%20-%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%0A%20%20-%20%5BBeacon%20Chain%20Fork%20Choice%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Ffork-choice.mdx)%0A%0A-%20Proving%20Mechanisms%0A%20%20-%20%5BLighthouse%20Documentation%5D(https%3A%2F%2Flighthouse-book.sigmaprime.io%2F)%3A%20ETH%202.0%20Consensus%20Client%20Lighthouse%20documentation%0A%20%20-%20%5BLighthouse%20Github%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse)%3A%20ETH%202.0%20Consensus%20Client%20Lighthouse%20Github%0A%20%20-%20%5BLighthouse%3A%20Blog%5D(https%3A%2F%2Flighthouse-blog.sigmaprime.io%2F)%3A%20ETH%202.0%20Consensus%20Client%20Lighthouse%20Blog%0A%20%20-%20%5Beth2near-block-relay-rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs)%0A%20%20-%20%5Bnearbridge%20contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge)%0A%20%20-%20%5Bnearprover%20contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearprover)%0A-%20Prysm%20Light%20Client%20Work%0A%20%20-%20%5BPrysm%3A%20Light-client%20(WORK%20IN%20PROGRESS)%5D(https%3A%2F%2Fgithub.com%2Fjinfwhuang%2Fprysm%2Fpull%2F5)%0A%20%20-%20%5BPrysm%3A%20Light-client%20Client%20WIP%5D(https%3A%2F%2Fgithub.com%2Fjinfwhuang%2Fprysm%2Ftree%2Fjin-light%2Fcmd%2Flight-client%23light-client-client)%3A%20An%20independent%20light%20client%20client%0A%20%20-%20%5BPrysm%3A%20light-client%20server%20PR%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fpull%2F10034)%3A%20a%20feature%20PR%20that%20implements%20the%20basic%20production%20level%20changes%20to%20Prysm%20to%20comply%20as%20a%20light-client%20server%20to%20begin%20serving%20light%20client%20requests%0A-%20Harmony%20Merkle%20Mount%20Range%0A%20%20-%20Harmony%20%5BMMR%20PR%20Review%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F3872)%20and%20%5Blatest%20PR%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198%2Ffiles)%20uses%20Merkle%20Mountain%20Ranges%20to%20facilitate%20light%20client%20development%20against%20Harmony's%20sharded%20Proof%20of%20Stake%20Chain%0A%0A%23%23%20Appendices%0A%0A%23%23%23%20Appendix%20A%20-%20Ethereum%20to%20NEAR%20block%20propagation%20components%0A%0A-%20%5BEthClientContract%20Wrapper%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Feth_client_contract.rs)%3A%20supports%20%5Beth2-client%20contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%20functions%20%60impl%20EthClientContractTrait%20for%20EthClientContract%60%0A%20%20-%20%60fn%20get_last_submitted_slot(%26self)%20-%3E%20u64%60%0A%20%20-%20%60fn%20is_known_block(%26self%2C%20execution_block_hash%3A%20%26H256)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20send_light_client_update(%26mut%20self%2C%20light_client_update%3A%20LightClientUpdate%2C)%20-%3E%20Result%3CFinalExecutionOutcomeView%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_finalized_beacon_block_hash(%26self)%20-%3E%20Result%3CH256%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_finalized_beacon_block_slot(%26self)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20send_headers(%26mut%20self%2C%20headers%3A%20%26%5BBlockHeader%5D%2C%20end_slot%3A%20u64%2C)%20-%3E%20Result%3CFinalExecutionOutcomeView%2C%20Box%3Cdyn%20std%3A%3Aerror%3A%3AError%3E%3E%60%0A%20%20-%20%60fn%20get_min_deposit(%26self)%20-%3E%20Result%3CBalance%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20register_submitter(%26self)%20-%3E%20Result%3CFinalExecutionOutcomeView%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20is_submitter_registered(%26self%2Caccount_id%3A%20Option%3CAccountId%3E%2C)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_light_client_state(%26self)%20-%3E%20Result%3CLightClientState%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_num_of_submitted_blocks_by_account(%26self)%20-%3E%20Result%3Cu32%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_max_submitted_blocks_by_account(%26self)%20-%3E%20Result%3Cu32%2C%20Box%3Cdyn%20Error%3E%3E%60%0A-%20%5Beth2-client%20contract%20storage%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%3A%0A%20%20-%20High%20level%20storage%20overview%0A%20%20-%20provides%20the%20%60Eth2Client%60%20public%20data%20stucture%0A%0A%20%20%20%20%60%60%60%0A%20%20%20%20pub%20struct%20Eth2Client%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20If%20set%2C%20only%20light%20client%20updates%20by%20the%20trusted%20signer%20will%20be%20accepted%0A%20%20%20%20%20%20%20%20trusted_signer%3A%20Option%3CAccountId%3E%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Mask%20determining%20all%20paused%20functions%0A%20%20%20%20%20%20%20%20paused%3A%20Mask%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Whether%20the%20client%20validates%20the%20updates.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Should%20only%20be%20set%20to%20%60false%60%20for%20debugging%2C%20testing%2C%20and%20diagnostic%20purposes%0A%20%20%20%20%20%20%20%20validate_updates%3A%20bool%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Whether%20the%20client%20verifies%20BLS%20signatures.%0A%20%20%20%20%20%20%20%20verify_bls_signatures%3A%20bool%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20We%20store%20the%20hashes%20of%20the%20blocks%20for%20the%20past%20%60hashes_gc_threshold%60%20headers.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Events%20that%20happen%20past%20this%20threshold%20cannot%20be%20verified%20by%20the%20client.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20It%20is%20desirable%20that%20this%20number%20is%20larger%20than%207%20days'%20worth%20of%20headers%2C%20which%20is%20roughly%0A%20%20%20%20%20%20%20%20%2F%2F%2F%2051k%20Ethereum%20blocks.%20So%20this%20number%20should%20be%2051k%20in%20production.%0A%20%20%20%20%20%20%20%20hashes_gc_threshold%3A%20u64%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Network.%20e.g.%20mainnet%2C%20kiln%0A%20%20%20%20%20%20%20%20network%3A%20Network%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Hashes%20of%20the%20finalized%20execution%20blocks%20mapped%20to%20their%20numbers.%20Stores%20up%20to%20%60hashes_gc_threshold%60%20entries.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Execution%20block%20number%20-%3E%20execution%20block%20hash%0A%20%20%20%20%20%20%20%20finalized_execution_blocks%3A%20LookupMap%3Cu64%2C%20H256%3E%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20All%20unfinalized%20execution%20blocks'%20headers%20hashes%20mapped%20to%20their%20%60HeaderInfo%60.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Execution%20block%20hash%20-%3E%20ExecutionHeaderInfo%20object%0A%20%20%20%20%20%20%20%20unfinalized_headers%3A%20UnorderedMap%3CH256%2C%20ExecutionHeaderInfo%3E%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20%60AccountId%60s%20mapped%20to%20their%20number%20of%20submitted%20headers.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Submitter%20account%20-%3E%20Num%20of%20submitted%20headers%0A%20%20%20%20%20%20%20%20submitters%3A%20LookupMap%3CAccountId%2C%20u32%3E%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Max%20number%20of%20unfinalized%20blocks%20allowed%20to%20be%20stored%20by%20one%20submitter%20account%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20This%20value%20should%20be%20at%20least%2032%20blocks%20(1%20epoch)%2C%20but%20the%20recommended%20value%20is%201024%20(32%20epochs)%0A%20%20%20%20%20%20%20%20max_submitted_blocks_by_account%3A%20u32%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20The%20minimum%20balance%20that%20should%20be%20attached%20to%20register%20a%20new%20submitter%20account%0A%20%20%20%20%20%20%20%20min_storage_balance_for_submitter%3A%20Balance%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Light%20client%20state%0A%20%20%20%20%20%20%20%20finalized_beacon_header%3A%20ExtendedBeaconBlockHeader%2C%0A%20%20%20%20%20%20%20%20finalized_execution_header%3A%20LazyOption%3CExecutionHeaderInfo%3E%2C%0A%20%20%20%20%20%20%20%20current_sync_committee%3A%20LazyOption%3CSyncCommittee%3E%2C%0A%20%20%20%20%20%20%20%20next_sync_committee%3A%20LazyOption%3CSyncCommittee%3E%2C%0A%20%20%20%20%7D%0A%20%20%20%20%60%60%60%0A%0A-%20%5Beth2-client%20dependencies%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2FCargo.toml)%20relys%20heavily%20on%20the%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20codebase%20for%20it's%20consensus%20and%20cryptogrphic%20primitives.%20See%20%5BCryptographic%20Primitives%5D(%23cryptographic-primitives)%20for%20more%20information.%0A%20%20-%20%60ethereum-types%20%3D%20%220.9.2%22%60%0A%20%20-%20%60eth-types%20%3D%20%20%7B%20path%20%3D%20%22..%2Feth-types%22%20%7D%60%0A%20%20-%20%60eth2-utility%20%3D%20%20%7B%20path%20%3D%20%22..%2Feth2-utility%22%20%7D%60%0A%20%20-%20%60tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60merkle_proof%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60bls%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20optional%20%3D%20true%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%2C%20default-features%20%3D%20false%2C%20features%20%3D%20%5B%22milagro%22%5D%7D%60%0A%20%20-%20%60admin-controlled%20%3D%20%20%7B%20path%20%3D%20%22..%2Fadmin-controlled%22%20%7D%60%0A%20%20-%20%60near-sdk%20%3D%20%224.0.0%22%60%0A%20%20-%20%60borsh%20%3D%20%220.9.3%22%60%0A%20%20-%20%60bitvec%20%3D%20%221.0.0%22%60%0A%0A-%20%5Beth2-client%20contract%20functions%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%3A%20provides%20the%20following%20functions%20in%20%60impl%20Eth2Client%60%0A%20%20-%20%60fn%20validate_light_client_update(%26self%2C%20update%3A%20%26LightClientUpdate)%60%0A%20%20-%20%60fn%20verify_finality_branch(%26self%2C%20update%3A%20%26LightClientUpdate%2C%20finalized_period%3A%20u64)%60%0A%20%20-%20%60fn%20verify_bls_signatures(%26self%2C%20update%3A%20%26LightClientUpdate%2C%20sync_committee_bits%3A%20BitVec%3Cu8%3E%2C%20finalized_period%3A%20u64%2C)%60%0A%20%20-%20%60fn%20update_finalized_header(%26mut%20self%2C%20finalized_header%3A%20ExtendedBeaconBlockHeader)%60%0A%20%20-%20%60fn%20commit_light_client_update(%26mut%20self%2C%20update%3A%20LightClientUpdate)%60%0A%20%20-%20%60fn%20gc_finalized_execution_blocks(%26mut%20self%2C%20mut%20header_number%3A%20u64)%60%0A%20%20-%20%60fn%20update_submitter(%26mut%20self%2C%20submitter%3A%20%26AccountId%2C%20value%3A%20i64)%60%0A%20%20-%20%60fn%20is_light_client_update_allowed(%26self)%60%0A-%20%5BEth2NearRelay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L84)%3A%20has%20the%20following%20public%20structure%0A%0A%20%20%60%60%60%0A%20%20pub%20struct%20Eth2NearRelay%20%7B%0A%20%20%20%20%20%20beacon_rpc_client%3A%20BeaconRPCClient%2C%0A%20%20%20%20%20%20eth1_rpc_client%3A%20Eth1RPCClient%2C%0A%20%20%20%20%20%20near_rpc_client%3A%20NearRPCClient%2C%0A%20%20%20%20%20%20eth_client_contract%3A%20Box%3Cdyn%20EthClientContractTrait%3E%2C%0A%20%20%20%20%20%20headers_batch_size%3A%20u64%2C%0A%20%20%20%20%20%20ethereum_network%3A%20String%2C%0A%20%20%20%20%20%20interval_between_light_client_updates_submission_in_epochs%3A%20u64%2C%0A%20%20%20%20%20%20max_blocks_for_finalization%3A%20u64%2C%0A%20%20%20%20%20%20near_network_name%3A%20String%2C%0A%20%20%20%20%20%20last_slot_searcher%3A%20LastSlotSearcher%2C%0A%20%20%20%20%20%20terminate%3A%20bool%2C%0A%20%20%20%20%20%20submit_only_finalized_blocks%3A%20bool%2C%0A%20%20%20%20%20%20next_light_client_update%3A%20Option%3CLightClientUpdate%3E%2C%0A%20%20%20%20%20%20sleep_time_on_sync_secs%3A%20u64%2C%0A%20%20%20%20%20%20sleep_time_after_submission_secs%3A%20u64%2C%0A%20%20%20%20%20%20max_submitted_blocks_by_account%3A%20u32%2C%0A%20%20%7D%0A%20%20%60%60%60%0A%0A-%20%5BEth2NearRelay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L103)%3A%20Implements%20the%20following%20functions%0A%20%20-%20%60fn%20get_max_slot_for_submission(%26self)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_last_eth2_slot_on_near(%26mut%20self%2C%20max_slot%3A%20u64)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_last_finalized_slot_on_near(%26self)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_last_finalized_slot_on_eth(%26self)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20**%60pub%20fn%20run(%26mut%20self%2C%20max_iterations%3A%20Option%3Cu64%3E)%60**%0A%20%20-%20%60fn%20wait_for_synchronization(%26self)%20-%3E%20Result%3C()%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_light_client_update_from_file(config%3A%20%26Config%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C)%20-%3E%20Result%3COption%3CLightClientUpdate%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20set_terminate(%26mut%20self%2C%20iter_id%3A%20u64%2C%20max_iterations%3A%20Option%3Cu64%3E)%60%0A%20%20-%20%60fn%20get_execution_blocks_between(%26self%2C%20start_slot%3A%20u64%2C%20last_eth2_slot_on_eth_chain%3A%20u64%2C)%20-%3E%20Result%3C(Vec%3CBlockHeader%3E%2C%20u64)%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20submit_execution_blocks(%26mut%20self%2C%20headers%3A%20Vec%3CBlockHeader%3E%2C%20current_slot%3A%20u64%2Clast_eth2_slot_on_near%3A%20%26mut%20u64%2C)%60%0A%20%20-%20%60fn%20verify_bls_signature_for_finality_update(%26mut%20self%2C%20light_client_update%3A%20%26LightClientUpdate%2C)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_execution_block_by_slot(%26self%2C%20slot%3A%20u64)%20-%3E%20Result%3CBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%0A-%20%5BEth2NearRelay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L461)%3A%20has%20a%20second%20implementation%20of%20functions%20for%20submitting%20light%20client%20updates%0A%20%20-%20%60fn%20is_enough_blocks_for_light_client_update(%26self%2C%20last_submitted_slot%3A%20u64%2Clast_finalized_slot_on_near%3A%20u64%2C%20last_finalized_slot_on_eth%3A%20u64%2C)%20-%3E%20bool%60%0A%20%20-%20%60fn%20is_shot_run_mode(%26self)%20-%3E%20bool%60%0A%20%20-%20%60fn%20send_light_client_updates_with_checks(%26mut%20self%2C%20last_submitted_slot%3A%20u64)%20-%3E%20bool%60%0A%20%20-%20%60fn%20send_light_client_updates(%26mut%20self%2C%20last_submitted_slot%3A%20u64%2C%20last_finalized_slot_on_near%3A%20u64%2C%20last_finalized_slot_on_eth%3A%20u64%2C)%60%0A%20%20-%20%60fn%20send_light_client_update_from_file(%26mut%20self%2C%20last_submitted_slot%3A%20u64)%60%0A%20%20-%20%60fn%20send_regular_light_client_update(%26mut%20self%2C%20last_finalized_slot_on_eth%3A%20u64%2Clast_finalized_slot_on_near%3A%20u64%2C)%60%0A%20%20-%20%60fn%20get_attested_slot(%26mut%20self%2C%20last_finalized_slot_on_near%3A%20u64%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20send_hand_made_light_client_update(%26mut%20self%2C%20last_finalized_slot_on_near%3A%20u64)%60%0A%20%20-%20%60fn%20send_specific_light_client_update(%26mut%20self%2C%20light_client_update%3A%20LightClientUpdate)%60%0A%0A-%20%5Beth2-contract-init%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2-contract-init)%20includes%20(but%20not%20limited%20to)%20the%20following%20additional%20components%0A%20%20-%20%5Binit_contract.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2-contract-init%2Fsrc%2Finit_contract.rs)%3A%20Verifies%20light%20client%20snapshot%20and%20initializes%20the%20Ethereum%20Light%20Contract%20on%20Near.%0A%20%20%20%20-%20%60pub%20fn%20verify_light_client_snapshot(block_root%3A%20String%2C%20light_client_snapshot%3A%20%26LightClientSnapshotWithProof%2C)%20-%3E%20bool%60%3A%20Verifies%20the%20light%20client%20by%20checking%20the%20snapshot%20format%20getting%20the%20current%20consensus%20branch%20and%20verifying%20it%20via%20a%20merkle%20proof.%0A%20%20%20%20-%20%60pub%20fn%20init_contract(config%3A%20%26Config%2C%20eth_client_contract%3A%20%26mut%20EthClientContract%2C%20mut%20init_block_root%3A%20String%2C)%20-%3E%20Result%3C()%2C%20Box%3Cdyn%20std%3A%3Aerror%3A%3AError%3E%3E%60%3A%20Initializes%20the%20Ethereum%20Light%20Client%20Contract%20on%20Near.%0A-%20%5Beth_rpc_client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth_rpc_client)%20includes%20(but%20not%20limited%20to)%20the%20following%20additional%20components%0A%20%20-%20%5Beth1_rpc_client.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth1_rpc_client.rs)%3A%20Is%20used%20to%20get%20block%20headers%20and%20check%20sync%20status.%20It%20has%20the%20following%20functions%0A%20%20%20%20-%20%60pub%20fn%20new(endpoint_url%3A%20%26str)%20-%3E%20Self%60%0A%20%20%20%20-%20%60pub%20fn%20get_block_header_by_number(%26self%2C%20number%3A%20u64)%20-%3E%20Result%3CBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20is_syncing(%26self)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%5Bexecution_block_proof.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fexecution_block_proof.rs)%3A%20%60ExecutionBlockProof%60%20contains%20a%20%60block_hash%60%20(execution%20block)%20and%20a%20proof%20of%20its%20inclusion%20in%20the%20%60BeaconBlockBody%60%20tree%20hash.%20The%20%60block_hash%60%20is%20the%2012th%20field%20in%20execution_payload%2C%20which%20is%20the%209th%20field%20in%20%60BeaconBlockBody%60.%20The%20first%204%20elements%20in%20proof%20correspondent%20to%20the%20proof%20of%20inclusion%20of%20%60block_hash%60%20in%20Merkle%20tree%20built%20for%20%60ExecutionPayload%60.%20The%20last%204%20elements%20of%20the%20proof%20of%20%60ExecutionPayload%60%20in%20the%20Merkle%20tree%20are%20built%20on%20high-level%20%60BeaconBlockBody%60%20fields.%20The%20proof%20starts%20from%20the%20leaf.%20It%20has%20the%20following%20structure%20and%20functions%0A%20%20%20%20-%20%60pub%20struct%20ExecutionBlockProof%20%7Bblock_hash%3A%20H256%2C%20proof%3A%20%5BH256%3B%20Self%3A%3APROOF_SIZE%5D%2C%7D%60%0A%20%20%20%20-%20%60pub%20fn%20construct_from_raw_data(block_hash%3A%20%26H256%2C%20proof%3A%20%26%5BH256%3B%20Self%3A%3APROOF_SIZE%5D)%20-%3E%20Self%60%0A%20%20%20%20-%20%60pub%20fn%20construct_from_beacon_block_body(beacon_block_body%3A%20%26BeaconBlockBody%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3CSelf%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_proof(%26self)%20-%3E%20%5BH256%3B%20Self%3A%3APROOF_SIZE%5D%60%0A%20%20%20%20-%20%60pub%20fn%20get_execution_block_hash(%26self)%20-%3E%20H256%60%0A%20%20%20%20-%20%60pub%20fn%20verify_proof_for_hash(%26self%2C%20beacon_block_body_hash%3A%20%26H256%2C)%20-%3E%20Result%3Cbool%2C%20IncorrectBranchLength%3E%60%0A%20%20%20%20-%20%60fn%20merkle_root_from_branch(leaf%3A%20H256%2C%20branch%3A%20%26%5BH256%5D%2C%20depth%3A%20usize%2C%20index%3A%20usize%2C)%20-%3E%20Result%3CH256%2C%20IncorrectBranchLength%3E%60%0A%20%20-%20%5Bbeacon_block_body_merkle_tree.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth_rpc_client%2Fsrc%2Fbeacon_block_body_merkle_tree.rs)%3A%20implements%20merkle%20trees%20for%20the%20Beacon%20and%20the%20ExecutionPayload%0A%20%20%20%20-%20%60BeaconBlockBodyMerkleTree%60%20is%20built%20on%20the%20%60BeaconBlockBody%60%20data%20structure%2C%20where%20the%20leaves%20of%20the%20Merkle%20Tree%20are%20the%20hashes%20of%20the%20high-level%20fields%20of%20the%20%60BeaconBlockBody%60.%20The%20hashes%20of%20each%20element%20are%20produced%20by%20using%20%60ssz%60%20serialization.%0A%20%20%20%20-%20%60ExecutionPayloadMerkleTree%60%20is%20a%20built%20on%20the%20%60ExecutionPayload%60%20data%20structure%2C%20where%20the%20leaves%20of%20the%20Merkle%20Tree%20are%20the%20hashes%20of%20the%20high-level%20fields%20of%20the%20%60ExecutionPayload%60.%20The%20hashes%20of%20each%20element%20are%20produced%20by%20using%20%60ssz%60%20serialization.%20%60ExecutionPayload%60%20is%20one%20of%20the%20field%20in%20BeaconBlockBody.%20The%20hash%20of%20the%20root%20of%20%60ExecutionPlayloadMerkleTree%60%20is%20the%209th%20leaf%20in%20BeaconBlockBody%20Merkle%20Tree.%0A%20%20-%20%5Bbeacon_rpc_client.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth_rpc_client%2Fsrc%2Fbeacon_rpc_client.rs)%3A%20allows%20getting%20beacon%20block%20body%2C%20beacon%20block%20header%20and%20light%20client%20updates%20using%20%5BBeacon%20RPC%20API%5D(https%3A%2F%2Fethereum.github.io%2Fbeacon-APIs%2F).%20It%20has%20the%20following%20functions%0A%20%20%20%20-%20%60pub%20fn%20new(endpoint_url%3A%20%26str%2C%20timeout_seconds%3A%20u64%2C%20timeout_state_seconds%3A%20u64)%20-%3E%20Self%60%3A%20Creates%20%60BeaconRPCClient%60%20for%20the%20given%20BeaconAPI%20%60endpoint_url%60%0A%20%20%20%20-%20%60pub%20fn%20get_beacon_block_body_for_block_id(%26self%2C%20block_id%3A%20%26str%2C)%20-%3E%20Result%3CBeaconBlockBody%3CMainnetEthSpec%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20%60BeaconBlockBody%60%20struct%20for%20the%20given%20%60block_id%60.%20It%20uses%20the%20following%20arguments%0A%20%20%20%20%20%20-%20%60block_id%60%20-%20Block%20identifier.%20Can%20be%20one%20of%3A%20%60%22head%22%20(canonical%20head%20in%20node's%20view)%2C%22genesis%22%2C%20%22finalized%22%2C%20%3Cslot%3E%2C%20%3Chex%20encoded%20blockRoot%20with%200x%20prefix%3E%60(see%20%5Bbeacon-APIs%2F%23%2FBeacon%2FgetBlockV2%5D(https%3A%2F%2Fethereum.github.io%2Fbeacon-APIs%2F%23%2FBeacon%2FgetBlockV2)).%0A%20%20%20%20-%20%60pub%20fn%20get_beacon_block_header_for_block_id(%26self%2C%20block_id%3A%20%26str%2C)%20-%3E%20Result%3Ctypes%3A%3ABeaconBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20%60BeaconBlockHeader%60%20struct%20for%20the%20given%20%60block_id%60.%20It%20uses%20the%20following%20arguments%0A%20%20%20%20%20%20-%20%60block_id%60%20-%20Block%20identifier.%20Can%20be%20one%20of%3A%20%60%22head%22%20(canonical%20head%20in%20node's%20view)%2C%22genesis%22%2C%20%22finalized%22%2C%20%3Cslot%3E%2C%20%3Chex%20encoded%20blockRoot%20with%200x%20prefix%3E%60(see%20%5Bbeacon-APIs%2F%23%2FBeacon%2FgetBlockV2%5D(https%3A%2F%2Fethereum.github.io%2Fbeacon-APIs%2F%23%2FBeacon%2FgetBlockV2)).%0A%20%20%20%20-%20%60pub%20fn%20get_light_client_update(%26self%2C%20period%3A%20u64%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20%60LightClientUpdate%60%20struct%20for%20the%20given%20%60period%60.%20It%20uses%20the%20following%20arguments%0A%20%20%20%20%20%20-%20%60period%60%20-%20period%20id%20for%20which%20%60LightClientUpdate%60%20is%20fetched.%20On%20Mainnet%2C%20one%20period%20consists%20of%20256%20epochs%2C%20and%20one%20epoch%20consists%20of%2032%20slots%0A%20%20%20%20-%20%60pub%20fn%20get_bootstrap(%26self%2C%20block_root%3A%20String%2C)%20-%3E%20Result%3CLightClientSnapshotWithProof%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Fetch%20a%20bootstrapping%20state%20with%20a%20proof%20to%20a%20trusted%20block%20root.%20The%20trusted%20block%20root%20should%20be%20fetched%20with%20similar%20means%20to%20a%20weak%20subjectivity%20checkpoint.%20Only%20block%20roots%20for%20checkpoints%20are%20guaranteed%20to%20be%20available.%0A%20%20%20%20-%20%60pub%20fn%20get_checkpoint_root(%26self)%20-%3E%20Result%3CString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_last_finalized_slot_number(%26self)%20-%3E%20Result%3Ctypes%3A%3ASlot%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Return%20the%20last%20finalized%20slot%20in%20the%20Beacon%20chain%0A%20%20%20%20-%20%60pub%20fn%20get_last_slot_number(%26self)%20-%3E%20Result%3Ctypes%3A%3ASlot%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Return%20the%20last%20slot%20in%20the%20Beacon%20chain%0A%20%20%20%20-%20%60pub%20fn%20get_slot_by_beacon_block_root(%26self%2C%20beacon_block_hash%3A%20H256%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_block_number_for_slot(%26self%2C%20slot%3A%20types%3A%3ASlot)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_finality_light_client_update(%26self)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_finality_light_client_update_with_sync_commity_update(%26self%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_beacon_state(%26self%2C%20state_id%3A%20%26str%2C)%20-%3E%20Result%3CBeaconState%3CMainnetEthSpec%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20is_syncing(%26self)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_json_from_client(client%3A%20%26Client%2C%20url%3A%20%26str)%20-%3E%20Result%3CString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_json_from_raw_request(%26self%2C%20url%3A%20%26str)%20-%3E%20Result%3CString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_body_json_from_rpc_result(block_json_str%3A%20%26str%2C)%20-%3E%20Result%3Cstd%3A%3Astring%3A%3AString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_header_json_from_rpc_result(json_str%3A%20%26str%2C)%20-%3E%20Result%3Cstd%3A%3Astring%3A%3AString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_attested_header_from_light_client_update_json_str(light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CBeaconBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_sync_aggregate_from_light_client_update_json_str(light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CSyncAggregate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_signature_slot(%26self%2C%20light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CSlot%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20%60signature_slot%60%20is%20not%20provided%20in%20the%20current%20API.%20The%20slot%20is%20brute-forced%20until%20%60SyncAggregate%60%20in%20%60BeconBlockBody%60%20in%20the%20current%20slot%20is%20equal%20to%20%60SyncAggregate%60%20in%20%60LightClientUpdate%60%0A%20%20%20%20-%20%60fn%20get_finality_update_from_light_client_update_json_str(%26self%2C%20light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CFinalizedHeaderUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_sync_committee_update_from_light_client_update_json_str(light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CSyncCommitteeUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_period_for_slot(slot%3A%20u64)%20-%3E%20u64%60%0A%20%20%20%20-%20%60pub%20fn%20get_non_empty_beacon_block_header(%26self%2C%20start_slot%3A%20u64%2C)%20-%3E%20Result%3Ctypes%3A%3ABeaconBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20check_block_found_for_slot(%26self%2C%20json_str%3A%20%26str)%20-%3E%20Result%3C()%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%5Bhand_made_finality_light_client_update.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth_rpc_client%2Fsrc%2Fhand_made_finality_light_client_update.rs)%3A%20Has%20two%20implementations%0A%20%20%20%20-%20The%20first%20implementation%20which%20calls%20functions%20in%20the%20second%0A%20%20%20%20%20%20-%20%60pub%20fn%20get_finality_light_client_update(beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20attested_slot%3A%20u64%2C%20include_next_sync_committee%3A%20bool%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60pub%20fn%20get_finality_light_client_update_from_file(beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20file_name%3A%20%26str%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60pub%20fn%20get_light_client_update_from_file_with_next_sync_committee(beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20attested_state_file_name%3A%20%26str%2C%20finality_state_file_name%3A%20%26str%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20The%20second%20implementation%0A%20%20%20%20%20%20-%20%60fn%20get_attested_slot_with_enough_sync_committee_bits_sum(beacon_rpc_client%3A%20%26BeaconRPCClient%2Cattested_slot%3A%20u64%2C)%20-%3E%20Result%3C(u64%2C%20u64)%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_state_from_file(file_name%3A%20%26str)%20-%3E%20Result%3CBeaconState%3CMainnetEthSpec%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_finality_light_client_update_for_state(beacon_rpc_client%3A%20%26BeaconRPCClient%2Cattested_slot%3A%20u64%2C%20signature_slot%3A%20u64%2C%20beacon_state%3A%20BeaconState%3CMainnetEthSpec%3E%2C%20finality_beacon_state%3A%20Option%3CBeaconState%3CMainnetEthSpec%3E%3E%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_next_sync_committee(beacon_state%3A%20%26BeaconState%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3CSyncCommitteeUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20from_lighthouse_beacon_header(beacon_header%3A%20%26BeaconBlockHeader%2C)%20-%3E%20eth_types%3A%3Aeth2%3A%3ABeaconBlockHeader%60%0A%20%20%20%20%20%20-%20%60fn%20get_sync_committee_bits(sync_committee_signature%3A%20%26types%3A%3ASyncAggregate%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3C%5Bu8%3B%2064%5D%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_finality_branch(beacon_state%3A%20%26BeaconState%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3CVec%3CH256%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_finality_update(finality_header%3A%20%26BeaconBlockHeader%2C%20beacon_state%3A%20%26BeaconState%3CMainnetEthSpec%3E%2C%20finalized_block_body%3A%20%26BeaconBlockBody%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3CFinalizedHeaderUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%5Blight_client_snapshot_with_proof.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth_rpc_client%2Fsrc%2Flight_client_snapshot_with_proof.rs)%3A%20contains%20the%20structure%20for%20%60LightClientSnapshotWithProof%60%0A%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20pub%20struct%20LightClientSnapshotWithProof%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20beacon_header%3A%20BeaconBlockHeader%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20current_sync_committee%3A%20SyncCommittee%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20current_sync_committee_branch%3A%20Vec%3CH256%3E%2C%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A-%20%5Beth2near-block-relay-rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs)%20includes%20(but%20not%20limited%20to)%20the%20following%20additional%20components%0A%20%20-%20%5Bconfig.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fconfig.rs)%3A%0A%20%20-%20%5Blast_slot_searcher.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Flast_slot_searcher.rs)%3A%20Implementation%20of%20functions%20for%20searching%20last%20slot%20on%20NEAR%20contract.%20Supports%20both%20binary%20and%20linear%20searches.%0A%20%20%20%20-%20%60pub%20fn%20get_last_slot(%26mut%20self%2C%20last_eth_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60n%20binary_slot_search(%26self%2C%20slot%3A%20u64%2C%20finalized_slot%3A%20u64%2C%20last_eth_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%20%3A%20Search%20for%20the%20slot%20before%20the%20first%20unknown%20slot%20on%20NEAR.%20Assumptions%3A%20(1)%20start_slot%20is%20known%20on%20NEAR%20(2)%20last_slot%20is%20unknown%20on%20NEAR.%20Return%20error%20in%20case%20of%20problem%20with%20network%20connection.%0A%20%20%20%20-%20%60fn%20binsearch_slot_forward(%26self%2C%20slot%3A%20u64%2C%20max_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2Ceth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%20%7B%60%3A%20Search%20for%20the%20slot%20before%20the%20first%20unknown%20slot%20on%20NEAR.%20Assumptions%3A%20(1)%20start_slot%20is%20known%20on%20NEAR%20(2)%20last_slot%20is%20unknown%20on%20NEAR.%20Return%20error%20in%20case%20of%20problem%20with%20network%20connection.%0A%20%20%20%20-%20%60fn%20binsearch_slot_range(%26self%2C%20start_slot%3A%20u64%2C%20last_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Search%20for%20the%20slot%20before%20the%20first%20unknown%20slot%20on%20NEAR.%20Assumptions%3A%20(1)%20start_slot%20is%20known%20on%20NEAR%20(2)%20last_slot%20is%20unknown%20on%20NEAR.%20Return%20error%20in%20case%20of%20problem%20with%20network%20connection.%0A%20%20%20%20-%20%60fn%20linear_slot_search(%26self%2C%20slot%3A%20u64%2C%20finalized_slot%3A%20u64%2C%20last_eth_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20the%20last%20slot%20known%20with%20block%20known%20on%20NEAR.%20%60Slot%60%20--%20expected%20last%20known%20slot.%20%60finalized_slot%60%20--%20last%20finalized%20slot%20on%20NEAR%2C%20assume%20as%20known%20slot.%20%60last_eth_slot%60%20--%20head%20slot%20on%20Eth.%0A%20%20%20%20-%20%60fn%20linear_search_forward(%26self%2C%20slot%3A%20u64%2C%20max_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2Ceth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20the%20slot%20before%20the%20first%20unknown%20block%20on%20NEAR.%20The%20search%20range%20is%20%5Bslot%20..%20max_slot).%20If%20there%20is%20no%20unknown%20block%20in%20this%20range%20max_slot%20-%201%20will%20be%20returned.%20Assumptions%3A%20(1)%20block%20for%20slot%20is%20submitted%20to%20NEAR.%20(2)%20block%20for%20max_slot%20is%20not%20submitted%20to%20NEAR.%0A%20%20%20%20-%20%60fn%20linear_search_backward(%26self%2C%20start_slot%3A%20u64%2C%20last_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20the%20slot%20before%20the%20first%20unknown%20block%20on%20NEAR.%20The%20search%20range%20is%20%5Blast_slot%20..%20start_slot).%20If%20no%20such%20block%20are%20found%20the%20start_slot%20will%20be%20returned.%20Assumptions%3A%20(1)%20block%20for%20start_slot%20is%20submitted%20to%20NEAR%20(2)%20block%20for%20last_slot%20%2B%201%20is%20not%20submitted%20to%20NEAR.%0A%20%20%20%20-%20%60fn%20find_left_non_error_slot(%26self%2C%20left_slot%3A%20u64%2C%20right_slot%3A%20u64%2C%20step%3A%20i8%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20(u64%2C%20bool)%60%3A%20Find%20the%20leftmost%20non-empty%20slot.%20Search%20range%3A%20%5Bleft_slot%2C%20right_slot).%20Returns%20pair%3A%20(1)%20slot_id%20and%20(2)%20is%20this%20block%20already%20known%20on%20Eth%20client%20on%20NEAR.%20Assume%20that%20right_slot%20is%20non-empty%20and%20it's%20block%20were%20submitted%20to%20NEAR%2C%20so%20if%20non%20correspondent%20block%20is%20found%20we%20return%20(right_slot%2C%20false).%0A%20%20%20%20-%20%60fn%20block_known_on_near(%20%26self%2C%20slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2Ceth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Check%20if%20the%20block%20for%20current%20slot%20in%20Eth2%20already%20were%20submitted%20to%20NEAR.%20Returns%20Error%20if%20slot%20doesn't%20contain%20any%20block.%0A%20%20-%20%5Bmain.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs)%3A%20%5BCommand%20Line%20Argument%20Parser%5D(https%3A%2F%2Fdocs.rs%2Fclap%2Flatest%2Fclap%2F)%20used%20to%20run%20the%20Ethereum%20to%20Near%20Block%20Relay.%20It%20contains%20the%20following%20functions%0A%20%20%20%20-%20%60fn%20get_eth_contract_wrapper(config%3A%20%26Config)%20-%3E%20Box%3Cdyn%20ContractWrapper%3E%60%0A%20%20%20%20-%20%60fn%20get_dao_contract_wrapper(config%3A%20%26Config)%20-%3E%20Box%3Cdyn%20ContractWrapper%3E%60%0A%20%20%20%20-%20%60fn%20get_eth_client_contract(config%3A%20%26Config)%20-%3E%20Box%3Cdyn%20EthClientContractTrait%3E%60%0A%20%20%20%20-%20%60fn%20init_log(args%3A%20%26Arguments%2C%20config%3A%20%26Config)%60%0A%20%20%20%20-%20%60fn%20main()%20-%3E%20Result%3C()%2C%20Box%3Cdyn%20std%3A%3Aerror%3A%3AError%3E%3E%60%0A%20%20-%20%5Bnear_rpc_client.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fnear_rpc_client.rs)%0A%20%20%20%20-%20%60pub%20fn%20new(endpoint_url%3A%20%26str)%20-%3E%20Self%60%0A%20%20%20%20-%20%60pub%20fn%20check_account_exists(%26self%2C%20account_id%3A%20%26str)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20is_syncing(%26self)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%0A%23%23%23%20Appendix%20B%20-%20Ethereum%20Light%20Client%20Finality%20Update%20Verify%20Components%0A%0A%5Bfinality-update-verify%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Ffinality-update-verify)%20is%20called%20from%20%5Bfn%20verify_bls_signature_for_finality_update%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L422)%20to%20verify%20signatures%20as%20part%20of%20light_client%20updates.%20It%20relies%20heavily%20on%20the%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20codebase%20for%20it's%20consensus%20and%20cryptogrphic%20primitives.%20See%20%5BCryptographic%20Primitives%5D(%23cryptographic-primitives)%20for%20more%20information.%0A%0A-%20Dependencies%20in%20%5BCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2FCargo.toml)%0A%20%20-%20%60eth-types%20%3D%20%7B%20path%20%3D%22..%2F..%2Fcontracts%2Fnear%2Feth-types%2F%22%2C%20features%20%3D%20%5B%22eip1559%22%5D%7D%60%0A%20%20-%20%60bls%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60eth2-utility%20%20%3D%20%7B%20path%20%3D%22..%2F..%2Fcontracts%2Fnear%2Feth2-utility%22%7D%60%0A%20%20-%20%60tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60types%20%3D%20%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60bitvec%20%3D%20%221.0.0%22%60%0A%0A-%20Functions%20in%20%5Blib.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2Fsrc%2Flib.rs)%0A%20%20-%20%60fn%20h256_to_hash256(hash%3A%20H256)%20-%3E%20Hash256%60%0A%20%20-%20%60fn%20tree_hash_h256_to_eth_type_h256(hash%3A%20tree_hash%3A%3AHash256)%20-%3E%20eth_types%3A%3AH256%60%0A%20%20-%20%60fn%20to_lighthouse_beacon_block_header(bridge_beacon_block_header%3A%20%26BeaconBlockHeader%2C)%20-%3E%20types%3A%3ABeaconBlockHeader%60%0A%20%20-%20%60pub%20fn%20is_correct_finality_update(ethereum_network%3A%20%26str%2C%20light_client_update%3A%20%26LightClientUpdate%2C%20%20%20sync_committee%3A%20SyncCommittee%2C)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%0A%23%23%23%20Appendix%20C%20-%20Cryptographic%20Primitives%0A%0AFollowing%20are%20cryptographic%20primitives%20used%20in%20the%20%5Beth2-client%20contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-client)%20and%20%5Bfinality-update-verify%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Ffinality-update-verify).%20Many%20are%20from%20the%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20codebase.%20Specifically%20%5Bconsensus%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fconsensus)%20and%20%5Bcrypto%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto)%20functions.%0A%0ASome%20common%20primitives%0A%0A-%20%5Bbitvec%5D(https%3A%2F%2Fdocs.rs%2Fbitvec%2F1.0.1%2Fbitvec%2F)%3A%20Addresses%20memory%20by%20bits%2C%20for%20packed%20collections%20and%20bitfields%0A-%20%5Beth2_serde_utils%5D(https%3A%2F%2Fdocs.rs%2Feth2_serde_utils%2F0.1.0%2Feth2_serde_utils%2F)%3A%20Serialization%20and%20deserialization%20utilities%20useful%20for%20JSON%20representations%20of%20Ethereum%202.0%20types.%0A-%20%5Beth2_hashing%5D(https%3A%2F%2Fdocs.rs%2Feth2_hashing%2F0.2.0%2Feth2_hashing%2F)%3A%20Hashing%20primitives%20used%20in%20Ethereum%202.0%0A-%20%5Bblst%5D(https%3A%2F%2Fdocs.rs%2Fblst%2F0.3.10%2Fblst%2F)%3A%20The%20blst%20crate%20provides%20a%20rust%20interface%20to%20the%20blst%20BLS12-381%20signature%20library.%0A-%20%5Btree_hash%5D(https%3A%2F%2Fdocs.rs%2Ftree_hash%2F0.4.0%2Ftree_hash%2F)%3A%20Efficient%20Merkle-hashing%20as%20used%20in%20Ethereum%202.0%0A-%20%5Beth2_ssz_types%5D(https%3A%2F%2Fdocs.rs%2Feth2_ssz_types%2F0.2.1%2Fssz_types%2F)%3A%20Provides%20types%20with%20unique%20properties%20required%20for%20SSZ%20serialization%20and%20Merklization.%0A%0ASome%20Primitives%20from%20Lighthouse%0A%0A-%20%5Bbls%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls)%3A%20%5BBoneh%E2%80%93Lynn%E2%80%93Shacham%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBLS_digital_signature)%20digital%20signature%20support%0A%20%20-%20%5Bimpls%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls)%3A%20Implementations%0A%20%20%20%20-%20%5Bblst%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Fblst.rs)%0A%20%20%20%20-%20%5Bfake_crypto%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Ffake_crypto.rs)%0A%20%20%20%20-%20%5Bmilagro%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Fmilagro.rs)%3A%20support%20for%20%5BApache%20Milagro%5D(https%3A%2F%2Fmilagro.apache.org%2Fdocs%2Fmilagro-intro%2F)%0A%20%20%20%20-%20%5Bfunctionality%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls%2Fsrc)%0A%20%20%20%20%20%20-%20%5Bgeneric_aggregate_public_key%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_aggregate_public_key.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_aggregate_signature%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_aggregate_signature.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_keypair%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_keypair.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_public_key%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_public_key.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_public_key_bytes%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_public_key_bytes.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_secret_key%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_secret_key.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_signature%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_signature.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_signature_bytes%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_signature_bytes.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_signature_set%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_signature_set.rs)%0A%20%20%20%20%20%20-%20%5Bget_withdrawal_credentials%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fget_withdrawal_credentials.rs)%0A%20%20%20%20%20%20-%20%5Bzeroize_hash%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fzeroize_hash.rs)%0A-%20%5Bmerkle_proof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fmerkle_proof)%0A-%20%5Btree_hash%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Ftree_hash)%0A-%20%5Btypes%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Ftypes%2Fsrc)%3A%20Implements%20Ethereum%202.0%20types%20including%20but%20not%20limited%20to%0A%20%20-%20%5Battestation%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fattestation.rs)%0A%20%20-%20%5Bbeacon_block%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_block.rs)%0A%20%20-%20%5Bbeacon_committee%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_committee.rs)%0A%20%20-%20%5Bbeacon_state%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_state.rs)%0A%20%20-%20%5Bbuilder_bid%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbuilder_bid.rs)%0A%20%20-%20%5Bchain_spec%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fchain_spec.rs)%0A%20%20-%20%5Bcheckpoint%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fcheckpoint.rs)%0A%20%20-%20%5Bcontribution_and_proof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fcontribution_and_proof.rs)%3A%20A%20Validators%20aggregate%20sync%20committee%20contribution%20and%20selection%20proof.%0A%20%20-%20%5Bdeposit%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fdeposit.rs)%3A%20A%20deposit%20to%20potentially%20become%20a%20beacon%20chain%20validator.%0A%20%20-%20%5Benr_fork_id%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fenr_fork_id.rs)%3A%20Specifies%20a%20fork%20which%20allows%20nodes%20to%20identify%20each%20other%20on%20the%20network.%20This%20fork%20is%20used%20in%20a%20nodes%20local%20ENR.%0A%20%20-%20%5Beth_spec%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Feth_spec.rs)%3A%20Ethereum%20Foundation%20specifications.%0A%20%20-%20%5Bexecution_block_hash%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fexecution_block_hash.rs)%0A%20%20-%20%5Bexecution_payload%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fexecution_payload.rs)%0A%20%20-%20%5Bfork%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Ffork.rs)%3A%20Specifies%20a%20fork%20of%20the%20%60BeaconChain%60%2C%20to%20prevent%20replay%20attacks.%0A%20%20-%20%5Bfree_attestation%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Ffree_attestation.rs)%3A%20Note%3A%20this%20object%20does%20not%20actually%20exist%20in%20the%20spec.%20We%20use%20it%20for%20managing%20attestations%20that%20have%20not%20been%20aggregated.%0A%20%20-%20%5Bpayload%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fpayload.rs)%0A%20%20-%20%5Bsigned_aggregate_and_proof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fsigned_aggregate_and_proof.rs)%3A%20A%20Validators%20signed%20aggregate%20proof%20to%20publish%20on%20the%20%60beacon_aggregate_and_proof%60%20gossipsub%20topic.%0A%20%20-%20%5Bsigned_beacon_block%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fsigned_beacon_block.rs)%3A%20A%20%60BeaconBlock%60%20and%20a%20signature%20from%20its%20proposer.%0A%20%20-%20%5Bslot_data%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fslot_data.rs)%3A%20A%20trait%20providing%20a%20%60Slot%60%20getter%20for%20messages%20that%20are%20related%20to%20a%20single%20slot.%20Useful%20in%20making%20parts%20of%20attestation%20and%20sync%20committee%20processing%20generic.%0A%20%20-%20%5Bslot_epoch%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fslot_epoch.rs)%3A%20The%20%60Slot%60%20and%20%60Epoch%60%20types%20are%20defined%20as%20new%20types%20over%20u64%20to%20enforce%20type-safety%20between%20the%20two%20types.%20Note%3A%20Time%20on%20Ethereum%202.0%20Proof%20of%20Stake%20is%20divided%20into%20slots%20and%20epochs.%20One%20slot%20is%2012%20seconds.%20One%20epoch%20is%206.4%20minutes%2C%20consisting%20of%2032%20slots.%20One%20block%20can%20be%20created%20for%20each%20slot.%0A%20%20-%20%5Bsync_aggregate%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fsync_aggregate.rs)%3A%20Create%20a%20%60SyncAggregate%60%20from%20a%20slice%20of%20%60SyncCommitteeContribution%60s.%20Equivalent%20to%20%60process_sync_committee_contributions%60%20from%20the%20spec.%0A%20%20-%20%5Bsync_committee%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fsync_committee.rs)%0A%20%20-%20%5Btree_hash_impls%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Ftree_hash_impls.rs)%3A%20contains%20custom%20implementations%20of%20%60CachedTreeHash%60%20for%20ETH2-specific%20types.%20It%20makes%20some%20assumptions%20about%20the%20layouts%20and%20update%20patterns%20of%20other%20structs%20in%20this%20crate%2C%20and%20should%20be%20updated%20carefully%20whenever%20those%20structs%20are%20changed.%0A%20%20-%20%5Bvalidator%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fvalidator.rs)%3A%20Information%20about%20a%20%60BeaconChain%60%20validator.%0A%0ASome%20Smart%20Contracts%20deployed%20on%20Ethereum%0A%0A-%20%5Bnearprover%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearprover)%0A%20%20-%20%5BProofDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FProofDecoder.sol)%0A%20%20-%20%5BNearProver.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FNearProver.sol)%0A-%20%5Bnearbridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts)%0A%20%20-%20%5BNearDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearDecoder.sol)%3A%20handles%20decoing%20of%20Public%20Keys%2C%20Signatures%2C%20BlockProducers%20and%20LightClientBlocks%20using%20%60Borsh.sol%60%0A%20%20-%20%5BUtils.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FUtils.sol)%3A%20handles%20reading%20and%20writing%20to%20memory%2C%20memoryToBytes%20and%20has%20functions%20such%20as%20%60keccak256Raw%60%20and%20%60sha256Raw%60%0A%20%20-%20%5BBorsh.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FBorsh.sol)%3A%20%5BBorsh%5D(https%3A%2F%2Fborsh.io%2F)%3A%20Binary%20Object%20Representation%20Serializer%20for%20Hashing.%20It%20is%20meant%20to%20be%20used%20in%20security-critical%20projects%20as%20it%20prioritizes%20consistency%2C%20safety%2C%20speed%3B%20and%20comes%20with%20a%20strict%20specification.%0A%20%20-%20%5BEd25519.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FEd25519.sol)%3A%20%5BEd25519%5D(https%3A%2F%2Fed25519.cr.yp.to%2F)%20high-speed%20high-security%20signatures%0A%0ASome%20Primitives%20from%20NEAR%20Rainbow%20Bridge%0A%0A-%20%5Beth-types%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth-types)%3A%20utilities%20to%20serialize%20and%20encode%20eth2%20types%20using%20%5Bborsh%5D(https%3A%2F%2Fborsh.io%2F)%20and%20%5Brlp%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Frlp).%0A-%20%5Beth2-utility%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-utility)%3A%20Utility%20functions%20used%20for%20Ethereum%202.0%20Consensus.%20Functions%20include%0A%20%20-%20%60fn%20from_str(input%3A%20%26str)%20-%3E%20Result%3CNetwork%2C%20Self%3A%3AErr%3E%60%0A%20%20-%20%60pub%20fn%20new(network%3A%20%26Network)%20-%3E%20Self%60%0A%20%20-%20%60pub%20fn%20compute_fork_version(%26self%2C%20epoch%3A%20Epoch)%20-%3E%20Option%3CForkVersion%3E%60%0A%20%20-%20%60pub%20fn%20compute_fork_version_by_slot(%26self%2C%20slot%3A%20Slot)%20-%3E%20Option%3CForkVersion%3E%60%0A%20%20-%20%60pub%20const%20fn%20compute_epoch_at_slot(slot%3A%20Slot)%20-%3E%20u64%60%0A%20%20-%20%60pub%20const%20fn%20compute_sync_committee_period(slot%3A%20Slot)%20-%3E%20u64%60%0A%20%20-%20%60pub%20const%20fn%20floorlog2(x%3A%20u32)%20-%3E%20u32%60%3A%20Compute%20floor%20of%20log2%20of%20a%20u32.%0A%20%20-%20%60pub%20const%20fn%20get_subtree_index(generalized_index%3A%20u32)%20-%3E%20u32%60%0A%20%20-%20%60pub%20fn%20compute_domain(domain_constant%3A%20DomainType%2C%20fork_version%3A%20ForkVersion%2C%20genesis_validators_root%3A%20H256%2C)%20-%3E%20H256%60%0A%20%20-%20%60pub%20fn%20compute_signing_root(object_root%3A%20H256%2C%20domain%3A%20H256)%20-%3E%20H256%60%0A%20%20-%20%60pub%20fn%20get_participant_pubkeys(public_keys%3A%20%26%5BPublicKeyBytes%5D%2C%20sync_committee_bits%3A%20%26BitVec%3Cu8%2C%20Lsb0%3E%2C)%20-%3E%20Vec%3CPublicKeyBytes%3E%60%0A%20%20-%20%60pub%20fn%20convert_branch(branch%3A%20%26%5BH256%5D)%20-%3E%20Vec%3Cethereum_types%3A%3AH256%3E%60%0A%20%20-%20%60pub%20fn%20validate_beacon_block_header_update(header_update%3A%20%26HeaderUpdate)%20-%3E%20bool%60%0A%20%20-%20%60pub%20fn%20calculate_min_storage_balance_for_submitter(max_submitted_blocks_by_account%3A%20u32%2C)%20-%3E%20Balance%60%0A%0A**Nearbridge%20Cryptographic%20Primitives**%0A%0A-%20%5BEd25519.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FEd25519.sol)%3A%20Solidity%20implementation%20of%20the%20%5BEd25519%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FEdDSA)%20which%20is%20the%20EdDSA%20signature%20scheme%20using%20SHA-512%20(SHA-2)%20and%20Curve25519%20(see%20%5Bhere%5D(https%3A%2F%2Fnbeguier.medium.com%2Fa-real-world-comparison-of-the-ssh-key-algorithms-b26b0b31bfd9)).%20It%20has%20the%20following%20functions%0A%20%20-%20%60function%20pow22501(uint256%20v)%20private%20pure%20returns%20(uint256%20p22501%2C%20uint256%20p11)%60%20%3A%20Computes%20(v%5E(2%5E250-1)%2C%20v%5E11)%20mod%20p%0A%20%20-%20%60function%20check(bytes32%20k%2C%20bytes32%20r%2C%20bytes32%20s%2C%20bytes32%20m1%2C%20bytes9%20m2)%60%20%3A%20has%20the%20following%20steps%0A%20%20%20%20-%20Step%201%3A%20compute%20SHA-512(R%2C%20A%2C%20M)%0A%20%20%20%20-%20Step%202%3A%20unpack%20k%0A%20%20%20%20-%20Step%203%3A%20compute%20multiples%20of%20k%0A%20%20%20%20-%20Step%204%3A%20compute%20s*G%20-%20h*A%0A%20%20%20%20-%20Step%205%3A%20compare%20the%20points%0A-%20%5BUtils.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FUtils.sol)%3A%20A%20set%20of%20utilty%20functions%20for%20byte%20manipulation%2C%20memory%20updates%20and%20%5Bkeccak%5D(https%3A%2F%2Fkeccak.team%2Fkeccak_specs_summary.html)%20functions.%0A%20%20-%20%60function%20swapBytes2(uint16%20v)%20internal%20pure%20returns%20(uint16)%60%0A%20%20-%20%60function%20swapBytes4(uint32%20v)%20internal%20pure%20returns%20(uint32)%60%0A%20%20-%20%60function%20swapBytes8(uint64%20v)%20internal%20pure%20returns%20(uint64)%60%0A%20%20-%20%60function%20swapBytes16(uint128%20v)%20internal%20pure%20returns%20(uint128)%60%0A%20%20-%20%60function%20swapBytes32(uint256%20v)%20internal%20pure%20returns%20(uint256)%60%0A%20%20-%20%60function%20readMemory(uint%20ptr)%20internal%20pure%20returns%20(uint%20res)%60%0A%20%20-%20%60function%20writeMemory(uint%20ptr%2C%20uint%20value)%20internal%20pure%60%0A%20%20-%20%60function%20memoryToBytes(uint%20ptr%2C%20uint%20length)%20internal%20pure%20returns%20(bytes%20memory%20res)%60%0A%20%20-%20%60function%20keccak256Raw(uint%20ptr%2C%20uint%20length)%20internal%20pure%20returns%20(bytes32%20res)%60%0A%20%20-%20%60function%20sha256Raw(uint%20ptr%2C%20uint%20length)%20internal%20view%20returns%20(bytes32%20res)%60%0A-%20%5BBorsh.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FBorsh.sol)%20provides%20Binary%20Object%20Representation%20Serializer%20for%20Hashing%20%5Bborsh%5D(https%3A%2F%2Fborsh.io%2F)%20functionality%20and%20imports%20%60Utils.sols%60.%20Structures%20and%20functions%20include%0A%20%20-%20%60struct%20Data%20%7Buint%20ptr%3B%20uint%20end%3B%7D%60%0A%20%20-%20%60function%20from(bytes%20memory%20data)%20internal%20pure%20returns%20(Data%20memory%20res)%60%0A%20%20-%20%60function%20requireSpace(Data%20memory%20data%2C%20uint%20length)%20internal%20pure%60%3A%20This%20function%20assumes%20that%20length%20is%20reasonably%20small%2C%20so%20that%20data.ptr%20%2B%20length%20will%20not%20overflow.%20In%20the%20current%20code%2C%20length%20is%20always%20less%20than%202%5E32.%0A%20%20-%20%60function%20read(Data%20memory%20data%2C%20uint%20length)%20internal%20pure%20returns%20(bytes32%20res)%60%0A%20%20-%20%60function%20done(Data%20memory%20data)%20internal%20pure%60%0A%20%20-%20%60function%20peekKeccak256(Data%20memory%20data%2C%20uint%20length)%20internal%20pure%20returns%20(bytes32)%60%3A%20Same%20considerations%20as%20for%20requireSpace.%0A%20%20-%20%60function%20peekSha256(Data%20memory%20data%2C%20uint%20length)%20internal%20view%20returns%20(bytes32)%60%3A%20Same%20considerations%20as%20for%20requireSpace.%0A%20%20-%20%60function%20decodeU8(Data%20memory%20data)%20internal%20pure%20returns%20(uint8)%60%0A%20%20-%20%60function%20decodeU16(Data%20memory%20data)%20internal%20pure%20returns%20(uint16)%60%0A%20%20-%20%60function%20decodeU32(Data%20memory%20data)%20internal%20pure%20returns%20(uint32)%60%0A%20%20-%20%60function%20decodeU64(Data%20memory%20data)%20internal%20pure%20returns%20(uint64)%60%0A%20%20-%20%60function%20decodeU128(Data%20memory%20data)%20internal%20pure%20returns%20(uint128)%60%0A%20%20-%20%60function%20decodeU256(Data%20memory%20data)%20internal%20pure%20returns%20(uint256)%60%0A%20%20-%20%60function%20decodeBytes20(Data%20memory%20data)%20internal%20pure%20returns%20(bytes20)%60%0A%20%20-%20%60function%20decodeBytes32(Data%20memory%20data)%20internal%20pure%20returns%20(bytes32)%60%0A%20%20-%20%60function%20decodeBool(Data%20memory%20data)%20internal%20pure%20returns%20(bool)%60%0A%20%20-%20%60function%20skipBytes(Data%20memory%20data)%20internal%20pure%60%0A%20%20-%20%60function%20decodeBytes(Data%20memory%20data)%20internal%20pure%20returns%20(bytes%20memory%20res)%60%0A-%20%5BNearDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearDecoder.sol)%3A%20Imports%20%60Borsh.sol%60%20and%20has%20utilities%20for%20decoding%20Public%20Keys%2C%20Signatures%2C%20Block%20Producers%2C%20Block%20Headers%20and%20Light%20Client%20Blocks.%0A%20%20-%20%60function%20decodePublicKey(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(PublicKey%20memory%20res)%60%0A%20%20-%20%60function%20decodeSignature(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(Signature%20memory%20res)%60%0A%20%20-%20%60function%20decodeBlockProducer(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(BlockProducer%20memory%20res)%60%0A%20%20-%20%60function%20decodeBlockProducers(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(BlockProducer%5B%5D%20memory%20res)%60%0A%20%20-%20%60function%20decodeOptionalBlockProducers(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(OptionalBlockProducers%20memory%20res)%60%0A%20%20-%20%60function%20decodeOptionalSignature(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(OptionalSignature%20memory%20res)%60%0A%20%20-%20%60function%20decodeBlockHeaderInnerLite(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(BlockHeaderInnerLite%20memory%20res)%60%0A%20%20-%20%60function%20decodeLightClientBlock(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(LightClientBlock%20memory%20res)%60%0A-%20%5BProofDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FProofDecoder.sol)%3A%20Imports%20%60Borsh.sol%60%20and%20%60NearDecoder.sol%60%20and%20has%20utilities%20for%20decoding%20Proofs%2C%20BlockHeader%2C%20ExecutionStatus%2C%20ExecutionOutcome%20and%20MerklePaths.%20Structures%20and%20functions%20include%0A%20%20-%20%60struct%20FullOutcomeProof%20%7BExecutionOutcomeWithIdAndProof%20outcome_proof%3B%20MerklePath%20outcome_root_proof%3B%20BlockHeaderLight%20block_header_lite%3B%20MerklePath%20block_proof%3B%7D%60%0A%20%20-%20%60function%20decodeFullOutcomeProof(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(FullOutcomeProof%20memory%20proof)%60%0A%20%20-%20%60struct%20BlockHeaderLight%20%7Bbytes32%20prev_block_hash%3B%20bytes32%20inner_rest_hash%3B%20NearDecoder.BlockHeaderInnerLite%20inner_lite%3B%20bytes32%20hash%3B%7D%60%0A%20%20-%20%60function%20decodeBlockHeaderLight(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(BlockHeaderLight%20memory%20header)%60%0A%20%20-%20%60struct%20ExecutionStatus%20%7Buint8%20enumIndex%3B%20bool%20unknown%3B%20bool%20failed%3B%20bytes%20successValue%3B%20bytes32%20successReceiptId%3B%7D%60%0A%20%20%20%20-%20%60successValue%60%20indicates%20if%20the%20final%20action%20succeeded%20and%20returned%20some%20value%20or%20an%20empty%20vec.%0A%20%20%20%20-%20%60successReceiptId%60%20is%20the%20final%20action%20of%20the%20receipt%20returned%20a%20promise%20or%20the%20signed%20transaction%20was%20converted%20to%20a%20receipt.%20Contains%20the%20receipt_id%20of%20the%20generated%20receipt.%0A%20%20-%20%60function%20decodeExecutionStatus(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(ExecutionStatus%20memory%20executionStatus)%60%0A%20%20-%20%60struct%20ExecutionOutcome%20%7Bbytes%5B%5D%20logs%3B%20bytes32%5B%5D%20receipt_ids%3B%20uint64%20gas_burnt%3B%20uint128%20tokens_burnt%3B%20bytes%20executor_id%3B%20ExecutionStatus%20status%3B%20bytes32%5B%5D%20merkelization_hashes%3B%7D%60%0A%20%20%20%20-%20%60bytes%5B%5D%20logs%3B%60%3A%20Logs%20from%20this%20transaction%20or%20receipt.%0A%20%20%20%20-%20%60bytes32%5B%5D%20receipt_ids%3B%60%3A%20Receipt%20IDs%20generated%20by%20this%20transaction%20or%20receipt.%0A%20%20%20%20-%20%60uint64%20gas_burnt%3B%60%3A%20The%20amount%20of%20the%20gas%20burnt%20by%20the%20given%20transaction%20or%20receipt.%0A%20%20%20%20-%20%60uint128%20tokens_burnt%3B%60%3A%20The%20total%20number%20of%20the%20tokens%20burnt%20by%20the%20given%20transaction%20or%20receipt.%0A%20%20%20%20-%20%60bytes%20executor_id%3B%60%3A%20Hash%20of%20the%20transaction%20or%20receipt%20id%20that%20produced%20this%20outcome.%0A%20%20%20%20-%20%60ExecutionStatus%20status%60%3A%20Execution%20status.%20Contains%20the%20result%20in%20case%20of%20successful%20execution.%0A%20%20%20%20-%20%60bytes32%5B%5D%20merkelization_hashes%3B%60%0A%20%20-%20%60function%20decodeExecutionOutcome(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(ExecutionOutcome%20memory%20outcome)%60%0A%20%20-%20%60struct%20ExecutionOutcomeWithId%20%7Bbytes32%20id%3B%20ExecutionOutcome%20outcome%3B%20bytes32%20hash%3B%7D%60%0A%20%20%20%20-%20%60bytes32%20id%60%3A%20is%20the%20transaction%20hash%20or%20the%20receipt%20ID.%0A%20%20-%20%60function%20decodeExecutionOutcomeWithId(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(ExecutionOutcomeWithId%20memory%20outcome)%60%0A%20%20-%20%60struct%20MerklePathItem%20%7Bbytes32%20hash%3B%20uint8%20direction%3B%7D%60%0A%20%20%20%20-%20%60uint8%20direction%60%3A%20where%200%20%3D%20left%2C%201%20%3D%20right%0A%20%20-%20%60function%20decodeMerklePathItem(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(MerklePathItem%20memory%20item)%60%0A%20%20-%20%60struct%20MerklePath%20%7BMerklePathItem%5B%5D%20items%3B%7D%60%0A%20%20-%20%60function%20decodeMerklePath(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(MerklePath%20memory%20path)%60%0A%20%20-%20%60struct%20ExecutionOutcomeWithIdAndProof%20%7BMerklePath%20proof%3B%20bytes32%20block_hash%3B%20ExecutionOutcomeWithId%20outcome_with_id%3B%7D%60%0A%20%20-%20%60function%20decodeExecutionOutcomeWithIdAndProof(Borsh.Data%20memory%20data)internal%20view%20returns%20(ExecutionOutcomeWithIdAndProof%20memory%20outcome)%60%0A%0A%23%23%23%20Appendix%20D%20-%20NEAR%20to%20Ethereum%20block%20propagation%20costing%0A%0AThe%20following%20links%20provide%20the%20production%20Ethereum%20addresses%20and%20blockexplorer%20views%20for%20NearBridge.sol%20and%20the%20ERC20%20Locker%0A%0A-%20%5BEthereum%20Mainnet%20Bridge%20addresses%20and%20parameters%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge-client%2Ftree%2Fmain%2Fpackages%2Fclient%23ethereum-mainnet-bridge-addresses-and-parameters)%0A-%20%5BNearBridge.sol%20on%20Ethereum%20Block%20Explorer%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x3fefc5a4b1c02f21cbc8d3613643ba0635b9a873)%0A%20%20-%20%5BSample%20%60addLightClientBlock(bytes%20data)%60%20function%20call%5D(https%3A%2F%2Fetherscan.io%2Ftx%2F0xa0fbf1405747dbc1c1bda1227e46bc7c5feac36c0eeaab051022cfdb268e60cc%2Fadvanced)%0A-%20%5BNEAR%20ERC20Locker%20on%20Ethereum%20Block%20Explorer%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x23ddd3e3692d1861ed57ede224608875809e127f%23code)%0A%0AAt%20time%20of%20writing%20(Oct%2026th%2C%202022).%0A%0A-%20NEAR%20Light%20Client%20Blocks%20are%20propogated%20every%20%604%20hours%60%0A-%20Sample%20Transaction%20fee%20%600.061600109576901025%20Ether%20(%2496.56)%60%0A-%20Daily%20Transaction%20fees%20cost%20approximately%20%60%24600%60%0A-%20_Note%3A%20Infrastructure%20costs%20for%20running%20relayer%2C%20watchdog%2C%20etc%20are%20not%20included._%0A%0A%23%23%23%20Appendix%20F%20-%20NEAR%20to%20Ethereum%20block%20propagation%20components%0A%0A-%20%5Beth2near-relay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Fcommands%2Fstart%2Feth2near-relay.js)%3A%20Command%20to%20start%20the%20NEAR%20to%20Ethereum%20relay.%20See%20sample%20invocation%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fdocs%2Fdevelopment.md%23near2eth-relay)%0A-%20%5Bnear2eth-block-relay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fnear2eth%2Fnear2eth-block-relay)%20is%20written%20in%20javascript%0A%20%20-%20Has%20%5Bdependencies%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fnear2eth%2Fnear2eth-block-relay%2Fpackage.json)%20including%20%5Brainbow-bridge-utils%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Futils)%20see%20%5Bhere%5D(near-rainbow-bridge-utils)%20for%20more%20information.%20It's%20other%20dependencies%20are%20also%20included%20in%20%60rainbow-bridge-utils%60.%0A%20%20%20%20-%20%5Bethereumjs-util%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fethereumjs-util)%3A%20A%20collection%20of%20utility%20functions%20for%20Ethereum.%0A%20%20-%20Has%20the%20following%20functions%20and%20classes%0A%20%20%20%20-%20%60class%20Near2EthRelay%60%0A%20%20%20%20%20%20-%20%60async%20initialize%20(%7BnearNodeUrl%2C%20nearNetworkId%2C%20ethNodeUrl%2C%20ethMasterSk%2C%20ethClientArtifactPath%2C%20ethClientAddress%2C%20ethGasMultiplier%2C%20metricsPort%20%7D)%60%0A%20%20%20%20%20%20-%20%60async%20withdraw%20(%7BethGasMultiplier%7D)%60%0A%20%20%20%20%20%20-%20%60async%20runInternal%20(%7BsubmitInvalidBlock%2C%20near2ethRelayMinDelay%2C%20near2ethRelayMaxDelay%2C%20near2ethRelayErrorDelay%2C%20near2ethRelayBlockSelectDuration%2C%20near2ethRelayNextBlockSelectDelayMs%2C%20near2ethRelayAfterSubmitDelayMs%2C%20ethGasMultiplier%2C%20ethUseEip1559%2C%20logVerbose%7D)%60%0A%20%20%20%20%20%20-%20%60run%20(options)%20%7Breturn%20this.runInternal(%7B...options%2C%20submitInvalidBlock%3A%20false%7D)%20%7D%60%0A-%20%5BNearBridge.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearBridge.sol)%3A%20Is%20the%20NEAR%20light%20client%20deployed%20on%20ethereum.%0A%20%20-%20It%20imports%20the%20following%20contracts%20(see%20%5Bnearbridge%20cryptographic%20primitives%5D(%23nearbridge-cryptographic-primitives))%0A%20%20%20%20-%20%60import%20%22.%2FAdminControlled.sol%22%3B%60%0A%20%20%20%20-%20%60import%20%22.%2FINearBridge.sol%22%3B%60%0A%20%20%20%20-%20%60import%20%22.%2FNearDecoder.sol%22%3B%60%0A%20%20%20%20-%20%60import%20%22.%2FEd25519.sol%22%3B%60%0A%20%20-%20It%20provides%20the%20following%20structure%20for%20Bridge%20State.%20If%20there%20is%20currently%20no%20unconfirmed%20block%2C%20the%20last%20three%20fields%20are%20zero.%0A%20%20%20%20-%20%60uint%20currentHeight%3B%60%3A%20Height%20of%20the%20current%20confirmed%20block%0A%20%20%20%20-%20%60uint%20nextTimestamp%3B%60%3A%20Timestamp%20of%20the%20current%20unconfirmed%20block%0A%20%20%20%20-%20%60uint%20nextValidAt%3B%60%3A%20Timestamp%20when%20the%20current%20unconfirmed%20block%20will%20be%20confirmed%0A%20%20%20%20-%20%60uint%20numBlockProducers%3B%60%3A%20Number%20of%20block%20producers%20for%20the%20current%20unconfirmed%20block%0A%20%20-%20It%20provides%20the%20following%20storage%0A%20%20%20%20-%20%60uint%20constant%20MAX_BLOCK_PRODUCERS%20%3D%20100%3B%60%3A%20Assumed%20to%20be%20even%20and%20to%20not%20exceed%20256.%0A%20%20%20%20-%20%60struct%20Epoch%20%7Bbytes32%20epochId%3B%20uint%20numBPs%3B%20bytes%20%5BMAX_BLOCK_PRODUCERS%5D%20keys%3B%20bytes32%5BMAX_BLOCK_PRODUCERS%20%2F%202%5D%20packedStakes%3B%20uint256%20stakeThreshold%3B%7D%60%0A%20%20%20%20-%20%60uint256%20public%20lockEthAmount%3B%60%0A%20%20%20%20-%20%60uint256%20public%20lockDuration%3B%60%3A%20lockDuration%20and%20replaceDuration%20shouldn't%20be%20extremely%20big%2C%20so%20adding%20them%20to%20an%20uint64%20timestamp%20should%20not%20overflow%20uint256.%0A%20%20%20%20-%20%60uint256%20public%20replaceDuration%3B%60%3A%20replaceDuration%20is%20in%20nanoseconds%2C%20because%20it%20is%20a%20difference%20between%20NEAR%20timestamps.%0A%20%20%20%20-%20%60Ed25519%20immutable%20edwards%3B%60%0A%20%20%20%20-%20%60uint256%20public%20lastValidAt%3B%60%3A%20End%20of%20challenge%20period.%20If%20zero%2C%20_%60untrusted%60_%20fields%20and%20%60lastSubmitter%60%20are%20not%20meaningful.%0A%20%20%20%20-%20%60uint64%20curHeight%3B%60%0A%20%20%20%20-%20%60uint64%20untrustedHeight%3B%60%3A%20The%20most%20recently%20added%20block.%20May%20still%20be%20in%20its%20challenge%20period%2C%20so%20should%20not%20be%20trusted.%0A%20%20%20%20-%20%60address%20lastSubmitter%3B%60%3A%20Address%20of%20the%20account%20which%20submitted%20the%20last%20block.%0A%20%20%20%20-%20%60bool%20public%20initialized%3B%60%3A%20Whether%20the%20contract%20was%20initialized.%0A%20%20%20%20-%20%60bool%20untrustedNextEpoch%3B%60%0A%20%20%20%20-%20%60bytes32%20untrustedHash%3B%60%0A%20%20%20%20-%20%60bytes32%20untrustedMerkleRoot%3B%60%0A%20%20%20%20-%20%60bytes32%20untrustedNextHash%3B%60%0A%20%20%20%20-%20%60uint256%20untrustedTimestamp%3B%60%0A%20%20%20%20-%20%60uint256%20untrustedSignatureSet%3B%60%0A%20%20%20%20-%20%60NearDecoder.Signature%5BMAX_BLOCK_PRODUCERS%5D%20untrustedSignatures%3B%60%0A%20%20%20%20-%20%60Epoch%5B3%5D%20epochs%3B%60%0A%20%20%20%20-%20%60uint256%20curEpoch%3B%60%0A%20%20%20%20-%20%60mapping(uint64%20%3D%3E%20bytes32)%20blockHashes_%3B%60%0A%20%20%20%20-%20%60mapping(uint64%20%3D%3E%20bytes32)%20blockMerkleRoots_%3B%60%0A%20%20%20%20-%20%60mapping(address%20%3D%3E%20uint256)%20public%20override%20balanceOf%3B%60%0A%20%20-%20It%20provides%20the%20following%20functions%0A%20%20%20%20-%20%60constructor(Ed25519%20ed%2C%20uint256%20lockEthAmount_%2C%20uint256%20lockDuration_%2C%20uint256%20replaceDuration_%2C%20address%20admin_%2C%20uint256%20pausedFlags_)%60%3A%20_Note%3A%20require%20the%20%60lockDuration%60%20(in%20seconds)%20to%20be%20at%20least%20one%20second%20less%20than%20the%20%60replaceDuration%60%20(in%20nanoseconds)%20%60require(replaceDuration*%20%3E%20lockDuration*%20_%201000000000)%3B%60%0A%20%20%20%20%20%20-%20%60ethEd25519Address%60%3A%20The%20address%20of%20the%20ECDSA%20signature%20checker%20using%20Ed25519%20curve%20(see%20%5Bhere%5D(https%3A%2F%2Fnbeguier.medium.com%2Fa-real-world-comparison-of-the-ssh-key-algorithms-b26b0b31bfd9))%0A%20%20%20%20%20%20-%20%60lockEthAmount%60%3A%20The%20amount%20that%20%60BLOCK_PRODUCERS%60%20need%20to%20deposit%20(in%20wei)to%20be%20able%20to%20provide%20blocks.%20This%20amount%20will%20be%20slashed%20if%20the%20block%20is%20challenged%20and%20proven%20not%20to%20have%20a%20valid%20signature.%20Default%20value%20is%20100000000000000000000%20WEI%20%3D%20100%20ETH.%0A%20%20%20%20%20%20-%20%60lockDuration%60%20%3A%2030%20seconds%0A%20%20%20%20%20%20-%20%60replaceDuration%60%3A%2060%20seconds%20it%20is%20passed%20in%20nanoseconds%2C%20because%20it%20is%20a%20difference%20between%20NEAR%20timestamps.%0A%20%20%20%20%20%20-%20%60ethAdminAddress%60%3A%20Bridge%20Administrator%20Address%0A%20%20%20%20%20%20-%20%600%60%20%3A%20Indicates%20nothing%20is%20paused%20%60UNPAUSE_ALL%60%0A%20%20%20%20-%20%60function%20deposit()%20public%20payable%20override%20pausable(PAUSED_DEPOSIT)%60%0A%20%20%20%20-%20%60function%20withdraw()%20public%20override%20pausable(PAUSED_WITHDRAW)%60%0A%20%20%20%20-%20%60function%20challenge(address%20payable%20receiver%2C%20uint%20signatureIndex)%20external%20override%20pausable(PAUSED_CHALLENGE%60%0A%20%20%20%20-%20%60function%20checkBlockProducerSignatureInHead(uint%20signatureIndex)%20public%20view%20override%20returns%20(bool)%60%0A%20%20%20%20-%20%60function%20initWithValidators(bytes%20memory%20data)%20public%20override%20onlyAdmin%60%3A%20The%20first%20part%20of%20initialization%20--%20setting%20the%20validators%20of%20the%20current%20epoch.%0A%20%20%20%20-%20%60function%20initWithBlock(bytes%20memory%20data)%20public%20override%20onlyAdmin%60%3A%20The%20second%20part%20of%20the%20initialization%20--%20setting%20the%20current%20head.%0A%20%20%20%20-%20%60function%20bridgeState()%20public%20view%20returns%20(BridgeState%20memory%20res)%60%0A%20%20%20%20-%20%60function%20bridgeState()%20public%20view%20returns%20(BridgeState%20memory%20res)%60%0A%20%20%20%20-%20%60function%20addLightClientBlock(bytes%20memory%20data)%20public%20override%20pausable(PAUSED_ADD_BLOCK)%60%0A%20%20%20%20-%20%60function%20setBlockProducers(NearDecoder.BlockProducer%5B%5D%20memory%20src%2C%20Epoch%20storage%20epoch)%20internal%60%0A%20%20%20%20-%20%60function%20blockHashes(uint64%20height)%20public%20view%20override%20pausable(PAUSED_VERIFY)%20returns%20(bytes32%20res)%60%0A%20%20%20%20-%20%60function%20blockMerkleRoots(uint64%20height)%20public%20view%20override%20pausable(PAUSED_VERIFY)%20returns%20(bytes32%20res)%60%0A-%20%5BNearProver.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FNearProver.sol)%3A%20Is%20used%20to%20prove%20the%20validity%20of%20NEAR%20blocks%20on%20Ethereum.%0A%20%20-%20It%20imports%20the%20following%20contracts%20(see%20%5Bnearbridge%20cryptographic%20primitives%5D(%23nearbridge-cryptographic-primitives))%0A%20%20%20%20-%20%60import%20%22rainbow-bridge-sol%2Fnearbridge%2Fcontracts%2FNearDecoder.sol%22%3B%60%0A%20%20%20%20-%20%60import%20%22.%2FProofDecoder.sol%22%3B%60%0A%20%20-%20It%20has%20the%20following%20functions%0A%20%20%20%20-%20%60constructor(INearBridge%20_bridge%2C%20address%20_admin%2C%20uint%20_pausedFlags)%60%0A%20%20%20%20%20%20-%20%60_bridge%60%3A%20Interface%20to%20%60NearBridge.sol%60%0A%20%20%20%20%20%20-%20%60_admin%60%3A%20Administrator%20address%0A%20%20%20%20%20%20-%20%60_pausedFlags%60%3A%20paused%20indicator%20defaults%20to%20%60UNPAUSE_ALL%20%3D%200%60%0A%20%20%20%20-%20%60function%20proveOutcome(bytes%20memory%20proofData%2C%20uint64%20blockHeight)%60%0A%20%20%20%20-%20%60function%20_computeRoot(bytes32%20node%2C%20ProofDecoder.MerklePath%20memory%20proof)%20internal%20pure%20returns%20(bytes32%20hash)%60%0A%0A%23%23%23%20Appendix%20G%20-%20NEAR%20Rainbow%20Bridge%20Utils%0A%0A%5Brainbow-bridge-utils%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Futils)%20provides%20a%20set%20of%20utilities%20for%20the%20near%20rainbow%20bridge%20written%20in%20javascript.%0A%0A-%20It%20has%20the%20following%20%5Bdependencies%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Fpackage.json)%0A%20%20-%20%5Bbn.js%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fbn.js)%3A%20Big%20number%20implementation%20in%20pure%20javascript%0A%20%20-%20%5Bbsert%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fbsert)%3A%20Minimal%20assert%20with%20type%20checking.%0A%20%20-%20%5Bbs58%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fbs58)%3A%20JavaScript%20component%20to%20compute%20base%2058%20encoding%0A%20%20-%20%5Bchange-case%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fchange-case)%3A%20Transform%20a%20string%20between%20camelCase%2C%20PascalCase%2C%20Capital%20Case%2C%20snake_case%2C%20param-case%2C%20CONSTANT_CASE%20and%20others.%0A%20%20-%20%5Bconfigstore%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fconfigstore)%3A%20Easily%20load%20and%20save%20config%20without%20having%20to%20think%20about%20where%20and%20how%0A%20%20-%20%5Beth-object%5D(https%3A%2F%2Fgithub.com%2Fnear%2Feth-object%23383b6ea68c7050bea4cab6950c1d5a7fa553e72b)%3A%20re-usable%20and%20composable%20objects%20that%20you%20can%20just%20call%20Object.from%20to%20ingest%20new%20data%20to%20serialize%20Ethereum%20Trie%20%2F%20LevelDB%20data%20from%20hex%2C%20buffers%20and%20rpc%20into%20the%20same%20format.%0A%20%20-%20%5Beth-util-lite%5D(https%3A%2F%2Fgithub.com%2Fnear%2Feth-util-lite)%3A%20a%20low-dependency%20utility%20for%20Ethereum.%20It%20replaces%20a%20small%20subset%20of%20the%20ethereumjs-util%20and%20ethjs-util%20APIs.%0A%20%20-%20%5Blodash%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Flodash)%3A%20A%20set%20of%20utilities%20for%20working%20with%20arrays%2C%20numbers%2C%20objects%2C%20strings%2C%20etc.%0A%20%20-%20%5Bnear-api-js%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fnear-api-js)%3A%20JavaScript%20library%20to%20interact%20with%20NEAR%20Protocol%20via%20RPC%20API%0A%20%20-%20%5Bweb3%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fweb3)%3A%20Ethereum%20JavaScript%20API%0A-%20It%20provides%20the%20following%20functions%0A%20%20-%20%5Baddress-watcher%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Faddress-watcher.js)%3A%20Watches%20a%20group%20of%20near%20and%20ethereum%20acccounts%20polling%20NEAR%20and%20Ethereum%20every%20second%20and%20updating%20%60nearAccount.balanceGauge%60%2C%20%60nearAccount.stateStorageGauge%60%20and%20%60ethereumAccount.balanceGauge%60.%0A%20%20-%20%5Bborsh%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Fborsh.js)%3A%20provides%20the%20following%20functions%20for%20Binary%20Object%20Representation%20Serializer%20for%20Hashing%20%5Bborsh%5D(https%3A%2F%2Fborsh.io%2F)%0A%20%20%20%20-%20%60function%20serializeField%20(schema%2C%20value%2C%20fieldType%2C%20writer)%60%0A%20%20%20%20-%20%60function%20deserializeField%20(schema%2C%20fieldType%2C%20reader)%60%0A%20%20%20%20-%20%60function%20serialize%20(schema%2C%20fieldType%2C%20obj)%60%3A%20Serialize%20given%20object%20using%20schema%20of%20the%20form%3A%20%60%7B%20class_name%20-%3E%20%5B%20%5Bfield_name%2C%20field_type%5D%2C%20..%20%5D%2C%20..%20%7D%60%0A%20%20%20%20-%20%60class%20BinaryReader%60%3A%20Includes%20utilities%20to%20read%20numbers%2C%20strings%20arrays%20and%20burggers%0A%20%20%20%20-%20%60function%20deserialize%20(schema%2C%20fieldType%2C%20buffer)%60%0A%20%20%20%20-%20%60const%20signAndSendTransactionAsync%20%3D%20async%20(accessKey%2C%20account%2C%20receiverId%2Cactions)%20%3D%3E%60%0A%20%20%20%20-%20%60const%20txnStatus%20%3D%20async%20(account%2C%20txHash%2C%20retries%20%3D%20RETRY_TX_STATUS%2C%20wait%20%3D%201000)%20%3D%3E%60%0A%20%20%20%20-%20%60function%20getBorshTransactionLastResult%20(txResult)%60%0A%20%20%20%20-%20%60class%20BorshContract%20%7B%60%0A%20%20%20%20%20%20-%20%60constructor%20(borshSchema%2C%20account%2C%20contractId%2C%20options)%60%0A%20%20%20%20%20%20-%20%60async%20accessKeyInit%20()%60%0A%20%20%20%20-%20%60function%20borshify%20(block)%60%0A%20%20%20%20-%20%60function%20borshifyInitialValidators%20(initialValidators)%60%0A%20%20%20%20-%20%60const%20hexToBuffer%20%3D%20(hex)%20%3D%3E%60%0A%20%20%20%20-%20%60const%20readerToHex%20%3D%20(len)%20%3D%3E%60%0A%20%20-%20%5Bborshify-proof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Fborshify-proof.js)%0A%20%20%20%20-%20%60function%20borshifyOutcomeProof%20(proof)%60%0A%20%20-%20%5Brobust%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Frobust.js)%3A%20his%20module%20gives%20a%20few%20utils%20for%20robust%20error%20handling%2C%20and%20wrap%20web3%20with%20error%20handling%20and%20retry%0A%20%20-%20%5Butils%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Futils.js)%0A%20%20%20%20-%20%60async%20function%20setupNear%20(config)%60%0A%20%20%20%20-%20%60async%20function%20setupEth%20(config)%60%0A%20%20%20%20-%20%60async%20function%20setupEthNear%20(config)%60%3A%20Setup%20connection%20to%20NEAR%20and%20Ethereum%20from%20given%20configuration.%0A%20%20%20%20-%20%60function%20remove0x%20(value)%60%3A%20Remove%200x%20if%20prepended%0A%20%20%20%20-%20%60function%20normalizeHex%20(value)%60%0A%20%20%20%20-%20%60async%20function%20accountExists%20(connection%2C%20accountId)%60%0A%20%20%20%20-%20%60async%20function%20createLocalKeyStore%20(networkId%2C%20keyPath)%60%0A%20%20%20%20-%20%60function%20getWeb3%20(config)%60%0A%20%20%20%20-%20%60function%20getEthContract%20(web3%2C%20path%2C%20address)%60%0A%20%20%20%20-%20%60function%20addSecretKey%20(web3%2C%20secretKey)%60%0A%20%20%20%20-%20%60async%20function%20ethCallContract%20(contract%2C%20methodName%2C%20args)%60%3A%20Wrap%20pure%20calls%20to%20Web3%20contract%20to%20handle%20errors%2Freverts%2Fgas%20usage.%0A%0A%23%23%23%20Appendix%20H%20-%20Token%20Transfer%20Components%0A%0A_Note%3A%20This%20uses%20Ethreum%20%5BERC20%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-20)%20and%20NEAR%20%5BNEP-141%5D(https%3A%2F%2Fnomicon.io%2FStandards%2FTokens%2FFungibleToken%2FCore)%20initally%20developed%20for%20%5BNEP-21%5D(https%3A%2F%2Fgithub.com%2Fnear%2FNEPs%2Fpull%2F21)_%0A%0A-%20%5Brainbow-token-connector%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector)%0A%20%20-%20NEAR%20rust%20based%20contracts%0A%20%20%20%20-%20%5Bbridge-common%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Fbridge-common)%3A%20Common%20functions%20for%20NEAR%2C%20currently%20only%20%60pub%20fn%20parse_recipient(recipient%3A%20String)%20-%3E%20Recipient%60%0A%20%20%20%20-%20%5Bbridge-token-factory%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Fbridge-token-factory)%3A%20Functions%20for%20managing%20tokens%20on%20NEAR%20including%20but%20not%20limited%20to%20%60update_metadata%60%2C%20%60deposit%60%2C%20%60get_tokens%60%2C%20%60finish_updating_metadata%60%2C%20%60finish_updating_metadata%60%2C%20%60finish_withdraw%60%2C%20%60deploy_bridge_token%60%2C%20%60get_bridge_token_account_id%60%2C%20%60is_used_proof%60%2C%20%60record_proof%60%0A%20%20%20%20-%20%5Bbridge-token%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Fbridge-token)%3A%20Token%20functions%20on%20NEAR%20including%20but%20not%20limited%20to%20%60mint%60%20and%20%60withdraw%60%0A%20%20%20%20-%20%5Btoken-locker%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Ftoken-locker)%3A%20Token%20Locker%20functions%20on%20NEAR%20including%20but%20not%20limited%20to%20%60withdraw%60%2C%20%60finish_deposit%60%2C%20%60is_used_proof%60%0A%20%20-%20Ethereum%20solidity%20based%20contracts%0A%20%20%20%20-%20%5Berc20-bridge-token%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Ferc20-bridge-token)%3A%20Ethereum%20Bridge%20token%20contracts%20including%20but%20not%20limited%20to%0A%20%20%20%20%20%20-%20%5BBridgeToken.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FBridgeToken.sol)%0A%20%20%20%20%20%20-%20%5BBridgeTokenFactory.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FBridgeTokenFactory.sol)%0A%20%20%20%20%20%20-%20%5BBridgeTokenProxy.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FBridgeTokenProxy.sol)%0A%20%20%20%20%20%20-%20%5BProofConsumer.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FProofConsumer.sol)%0A%20%20%20%20%20%20-%20%5BResultsDecoder%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FResultsDecoder.sol)%0A%20%20%20%20-%20%5Berc20-connector%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Ferc20-connector)%3A%20has%20%5BERC20Locker.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-connector%2Fcontracts%2FERC20Locker.sol)%20which%20is%20used%20to%20lock%20and%20unlock%20tokens.%20It%20is%20linked%20to%20the%20bridge%20token%20factory%20on%20NEAR%20side.%20It%20also%20links%20to%20the%20prover%20that%20it%20uses%20to%20unlock%20the%20tokens.%20(see%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts))%0A%0A%23%23%23%20Appendix%20I%20-%20NEAR%20Rainbow%20Bridge%3A%20Component%20Overview%0A%0AThe%20following%20smart%20contracts%20are%20deployed%20on%20NEAR%20and%20work%20in%20conjunction%20with%20eth2near%20bridging%20functionality%20to%20propogate%20blocks%20from%20Ethereum%20to%20NEAR.%0A%0A**%5C*Note**%20here%20we%20will%20focus%20on%20the%20%60eth2-client%60%20for%20ETH%202.0%20Proof%20of%20Stake%20Bridging%20however%20if%20interested%20in%20however%20there%20is%20also%20an%20%60eth-client%60%20which%20was%20used%20for%20ETH%201.0%20Proof%20of%20Work%20Integration%20using%20%5Brust-ethhash%5D(https%3A%2F%2Fgithub.com%2Fnearprotocol%2Frust-ethash).%5C*%0A%0A-%20%5BSmart%20Contracts%20Deployed%20on%20NEAR%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear)%0A%20%20-%20%5Beth2-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-client)%20implements%20the%20Ethereum%20Light%20Client%20on%20Near%0A%20%20%20%20-%20it%20provides%20functions%20including%20but%20not%20limited%20to%3A%0A%20%20%20%20%20%20-%20validate%20the%20light%20client%0A%20%20%20%20%20%20-%20verify%20the%20finality%20branch%0A%20%20%20%20%20%20-%20verify%20bls%20signatures%0A%20%20%20%20%20%20-%20update%20finalized%20headers%0A%20%20%20%20%20%20-%20updates%20the%20submittes%0A%20%20%20%20%20%20-%20prune%20finalized%20blocks.%0A%20%20%20%20-%20It%20interacts%20with%20the%20beach%20chain%2C%20uses%20%5BBorsh%5D(https%3A%2F%2Fborsh.io%2F)%20for%20serialization%20and%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20for%20Ethereum%202.0%20Consensus%20and%20tree_hash%20functions%20as%20well%20as%20bls%20signatures.%20See%20%5Bhere%5D(https%3A%2F%2Flighthouse-book.sigmaprime.io%2F)%20for%20more%20information%20on%20lighthouse.%20Below%20is%20a%20list%20of%20dependencies%20from%20%5Beth2-client%2FCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2FCargo.toml)%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bdependencies%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20ethereum-types%20%3D%20%220.9.2%22%0A%20%20%20%20%20%20%20%20%20%20%20%20eth-types%20%3D%20%20%7B%20path%20%3D%20%22..%2Feth-types%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth2-utility%20%3D%20%20%7B%20path%20%3D%20%22..%2Feth2-utility%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20merkle_proof%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20bls%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20optional%20%3D%20true%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%2C%20default-features%20%3D%20false%2C%20features%20%3D%20%5B%22milagro%22%5D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20admin-controlled%20%3D%20%20%7B%20path%20%3D%20%22..%2Fadmin-controlled%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20near-sdk%20%3D%20%224.0.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20borsh%20%3D%20%220.9.3%22%0A%20%20%20%20%20%20%20%20%20%20%20%20bitvec%20%3D%20%221.0.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A-%20%5Beth2near%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near)%20supports%20the%20relaying%20of%20blocks%20and%20the%20verification%20of%20finality%20between%20etherum%20and%20Near.%20It%20has%20the%20following%20components%0A%20%20-%20%5Bcontract_wrapper%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Fcontract_wrapper)%3A%20provides%20rust%20wrappers%20for%20interacting%20with%20the%20%5Bsolidity%20contracts%20on%20near%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear)%0A%20%20%20%20-%20Contracts%20include%20(from%20%5B%60lib.rs%60%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Flib.rs))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20contract_wrapper_trait%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20dao_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20dao_eth_client_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20dao_types%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20errors%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20eth_client_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20eth_client_contract_trait%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20file_eth_client_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20near_contract_wrapper%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20sandbox_contract_wrapper%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20utils%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Bcontract_wrapper%2FCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2FCargo.toml))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bdependencies%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20borsh%20%3D%20%220.9.3%22%0A%20%20%20%20%20%20%20%20%20%20%20%20futures%20%3D%20%220.3.21%22%0A%20%20%20%20%20%20%20%20%20%20%20%20async-std%20%3D%20%221.12.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-sdk%20%3D%20%224.0.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-jsonrpc-client%20%3D%20%22%3D0.4.0-beta.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-crypto%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-primitives%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-chain-configs%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-jsonrpc-primitives%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20tokio%20%3D%20%7B%20version%20%3D%20%221.1%22%2C%20features%20%3D%20%5B%22rt%22%2C%20%22macros%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20reqwest%20%3D%20%7B%20version%20%3D%20%220.11%22%2C%20features%20%3D%20%5B%22blocking%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20serde_json%20%3D%20%221.0.74%22%0A%20%20%20%20%20%20%20%20%20%20%20%20serde%20%3D%20%7B%20version%20%3D%20%221.0%22%2C%20features%20%3D%20%5B%22derive%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth-types%20%3D%20%7B%20path%20%3D%20%22..%2F..%2Fcontracts%2Fnear%2Feth-types%2F%22%2C%20features%20%3D%20%5B%22eip1559%22%5D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20workspaces%20%3D%20%220.5.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20anyhow%20%3D%20%221.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20%5Beth2near-block-relay-rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs)%20is%20built%20in%20rust%20and%20integrates%20with%20the%20Ethereum%202.0%20lgihthouse%20consensus%20client%20to%20propogate%20blocks%20to%20near.%0A%20%20%20%20-%20Functionality%20includes%20(from%20%5Blib.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Flib.rs))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20beacon_block_body_merkle_tree%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20beacon_rpc_client%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20config%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20eth1_rpc_client%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20eth2near_relay%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20execution_block_proof%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20hand_made_finality_light_client_update%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20init_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20last_slot_searcher%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20light_client_snapshot_with_proof%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20logger%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20near_rpc_client%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20prometheus_metrics%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20relay_errors%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Beth2near-block-relay-rs%2FCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2FCargo.toml))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20types%20%3D%20%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20merkle_proof%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth2_hashing%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth2_ssz%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20eth-types%20%3D%20%7B%20path%20%3D%20%22..%2F..%2Fcontracts%2Fnear%2Feth-types%2F%22%2C%20features%20%3D%20%5B%22eip1559%22%5D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth2-utility%20%20%3D%20%7B%20path%20%3D%20%22..%2F..%2Fcontracts%2Fnear%2Feth2-utility%22%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20contract_wrapper%20%3D%20%7B%20path%20%3D%20%22..%2Fcontract_wrapper%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20finality-update-verify%20%3D%20%7B%20path%20%3D%20%22..%2Ffinality-update-verify%22%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20log%20%3D%20%7B%20version%20%3D%20%220.4%22%2C%20features%20%3D%20%5B%22std%22%2C%20%22serde%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20serde_json%20%3D%20%221.0.74%22%0A%20%20%20%20%20%20%20%20%20%20%20%20serde%20%3D%20%7B%20version%20%3D%20%221.0%22%2C%20features%20%3D%20%5B%22derive%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20ethereum-types%20%3D%20%220.9.2%22%0A%20%20%20%20%20%20%20%20%20%20%20%20reqwest%20%3D%20%7B%20version%20%3D%20%220.11%22%2C%20features%20%3D%20%5B%22blocking%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20clap%20%3D%20%7B%20version%20%3D%20%223.1.6%22%2C%20features%20%3D%20%5B%22derive%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20tokio%20%3D%20%7B%20version%20%3D%20%221.1%22%2C%20features%20%3D%20%5B%22macros%22%2C%20%22rt%22%2C%20%22time%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20env_logger%20%3D%20%220.9.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20borsh%20%3D%20%220.9.3%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-sdk%20%3D%20%224.0.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20futures%20%3D%20%7B%20version%20%3D%20%220.3.21%22%2C%20default-features%20%3D%20false%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20async-std%20%3D%20%221.12.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20hex%20%3D%20%22*%22%0A%20%20%20%20%20%20%20%20%20%20%20%20toml%20%3D%20%220.5.9%22%0A%20%20%20%20%20%20%20%20%20%20%20%20atomic_refcell%20%3D%20%220.1.8%22%0A%20%20%20%20%20%20%20%20%20%20%20%20bitvec%20%3D%20%22*%22%0A%20%20%20%20%20%20%20%20%20%20%20%20primitive-types%20%3D%20%220.7.3%22%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20near-jsonrpc-client%20%3D%20%22%3D0.4.0-beta.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-crypto%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-primitives%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-chain-configs%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-jsonrpc-primitives%20%3D%20%220.14.0%22%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20prometheus%20%3D%20%7B%20version%20%3D%20%220.9%22%2C%20features%20%3D%20%5B%22process%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20lazy_static%20%3D%20%221.4%22%0A%20%20%20%20%20%20%20%20%20%20%20%20warp%20%3D%20%220.2%22%0A%20%20%20%20%20%20%20%20%20%20%20%20thread%20%3D%20%22*%22%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20%5Beth2near-block-relay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay)%20is%20built%20using%20javascript%20and%20supports%20ETH%201.0%20Proof%20of%20Work%20(%60ethhash%60)%20using%20merkle%20patrica%20trees.%0A%20%20%20%20-%20key%20classes%20from%20%5Bindex.js%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay%2Findex.js)%20include%0A%20%20%20%20%20%20-%20%60Ethashproof%60%20%3A%20which%20has%20functions%20to%20%60getParseBlock%60%20and%20%60calculateNextEpoch%60%0A%20%20%20%20%20%20-%20%60Eth2NearRelay%60%20%3A%20which%20interacts%20with%20the%20%60ethClientContract%60%20and%20has%20a%20%60run()%60%20function%20which%20loops%20through%20relaying%20blocks%20and%20includes%20additional%20functions%20such%20as%20%60getParseBlock%60%20%2C%20%60submitBlock%60%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Bpackage.json%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay%2Fpackage.json))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%22dependencies%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22bn.js%22%3A%20%22%5E5.1.3%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22eth-object%22%3A%20%22https%3A%2F%2Fgithub.com%2Fnear%2Feth-object%23383b6ea68c7050bea4cab6950c1d5a7fa553e72b%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22eth-util-lite%22%3A%20%22near%2Feth-util-lite%23master%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22%40ethereumjs%2Fblock%22%3A%20%22%5E3.4.0%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22merkle-patricia-tree%22%3A%20%22%5E2.1.2%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22prom-client%22%3A%20%22%5E12.0.0%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22promisfy%22%3A%20%22%5E1.2.0%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22rainbow-bridge-utils%22%3A%20%221.0.0%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22got%22%3A%20%22%5E11.8.5%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20%5Bethhashproof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Fethashproof)%3A%20is%20a%20commandline%20to%20calculate%20proof%20data%20for%20an%20ethash%20POW%2C%20it%20is%20used%20by%20project%20%60SmartPool%60%20and%20a%20decentralizedbridge%20between%20Etherum%20and%20EOS%20developed%20by%20Kyber%20Network%20team.%20It%20is%20written%20in%20%60GO%60.%0A%20%20%20%20-%20Features%20Include%201.%20Calculate%20merkle%20root%20of%20the%20ethash%20dag%20dataset%20with%20given%20epoch%202.%20Calculate%20merkle%20proof%20of%20the%20pow%20(dataset%20elements%20and%20their%20merkle%20proofs)%20given%20the%20pow%20submission%20with%20given%20block%20header%203.%20Generate%20dag%20datase%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Bethahsproof%2Fgo.mod%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fethashproof%2Fgo.mod))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20require%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%20github.com%2Fdeckarep%2Fgolang-set%20v1.7.1%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20github.com%2Fedsrzf%2Fmmap-go%20v1.0.0%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20github.com%2Fethereum%2Fgo-ethereum%20v1.10.4%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20github.com%2Fhashicorp%2Fgolang-lru%20v0.5.5-0.20210104140557-80c98217689d%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20golang.org%2Fx%2Fcrypto%20v0.0.0-20210322153248-0c34fe9e7dc2%0A%20%20%20%20%20%20%20%20%20%20%20%20)%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20%5Bfinality-update-verify%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Ffinality-update-verify)%20checks%20and%20updates%20finality%20using%20the%20lighthouse%20beacon%20blocks.%0A%20%20%20%20-%20Functions%20include%20(from%20%5Blib.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2Fsrc%2Flib.rs))%0A%20%20%20%20%20%20-%20%60fn%20h256_to_hash256(hash%3A%20H256)%20-%3E%20Hash256%60%0A%20%20%20%20%20%20-%20%60fn%20tree_hash_h256_to_eth_type_h256(hash%3A%20tree_hash%3A%3AHash256)%20-%3E%20eth_types%3A%3AH256%60%0A%20%20%20%20%20%20-%20%60fn%20to_lighthouse_beacon_block_header(bridge_beacon_block_header%3A%20%26BeaconBlockHeader%2C)%20-%3E%20types%3A%3ABeaconBlockHeader%20%7Btypes%3A%3ABeaconBlockHeader%60%0A%20%20%20%20%20%20-%20%60pub%20fn%20is_correct_finality_update(ethereum_network%3A%20%26str%2C%20light_client_update%3A%20%26LightClientUpdate%2C%20sync_committee%3A%20SyncCommittee%2C%20)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Bfinality-update-verify%2FCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2FCargo.toml))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bdependencies%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20eth-types%20%3D%20%7B%20path%20%3D%22..%2F..%2Fcontracts%2Fnear%2Feth-types%2F%22%2C%20features%20%3D%20%5B%22eip1559%22%5D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20bls%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20eth2-utility%20%20%3D%20%7B%20path%20%3D%22..%2F..%2Fcontracts%2Fnear%2Feth2-utility%22%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20types%20%3D%20%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20bitvec%20%3D%20%221.0.0%22%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Bdev-dependencies%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20eth2_to_near_relay%20%3D%20%7B%20path%20%3D%20%22..%2Feth2near-block-relay-rs%22%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20serde_json%20%3D%20%221.0.74%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20serde%20%3D%20%7B%20version%20%3D%20%221.0%22%2C%20features%20%3D%20%5B%22derive%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20toml%20%3D%20%220.5.9%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0AThe%20following%20smart%20contracts%20are%20deployed%20on%20Ethereum%20and%20used%20for%20propogating%20blocks%20from%20NEAR%20to%20Ethereum.%0A%0A-%20%5BSmart%20Contracts%20deployed%20on%20Ethereum%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth)%20including%0A%20%20-%20%5BNear%20Bridge%20Contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts)%20including%20%5BNearBridge.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearBridge.sol)%20which%20the%20interface%20%5BINearBridge.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FINearBridge.sol)%0A%20%20-%20Interface%20Overview%0A%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20interface%20INearBridge%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20event%20BlockHashAdded(uint64%20indexed%20height%2C%20bytes32%20blockHash)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20event%20BlockHashReverted(uint64%20indexed%20height%2C%20bytes32%20blockHash)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20blockHashes(uint64%20blockNumber)%20external%20view%20returns%20(bytes32)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20blockMerkleRoots(uint64%20blockNumber)%20external%20view%20returns%20(bytes32)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20balanceOf(address%20wallet)%20external%20view%20returns%20(uint256)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20deposit()%20external%20payable%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20withdraw()%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20initWithValidators(bytes%20calldata%20initialValidators)%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20initWithBlock(bytes%20calldata%20data)%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20addLightClientBlock(bytes%20calldata%20data)%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20challenge(address%20payable%20receiver%2C%20uint256%20signatureIndex)%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20checkBlockProducerSignatureInHead(uint256%20signatureIndex)%20external%20view%20returns%20(bool)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20Key%20Storage%20items%20for%20epoch%20and%20block%20information%0A%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20Epoch%5B3%5D%20epochs%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20uint256%20curEpoch%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20mapping(uint64%20%3D%3E%20bytes32)%20blockHashes_%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20mapping(uint64%20%3D%3E%20bytes32)%20blockMerkleRoots_%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20mapping(address%20%3D%3E%20uint256)%20public%20override%20balanceOf%3B%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20Signing%20and%20Serializing%20Primitives%0A%20%20%20%20-%20%5BNearDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearDecoder.sol)%3A%20handles%20decoing%20of%20Public%20Keys%2C%20Signatures%2C%20BlockProducers%20and%20LightClientBlocks%20using%20%60Borsh.sol%60%0A%20%20%20%20-%20%5BUtils.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FUtils.sol)%3A%20handles%20reading%20and%20writing%20to%20memory%2C%20memoryToBytes%20and%20has%20functions%20such%20as%20%60keccak256Raw%60%20and%20%60sha256Raw%60%0A%20%20%20%20-%20%5BBorsh.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FBorsh.sol)%3A%20%5BBorsh%5D(https%3A%2F%2Fborsh.io%2F)%3A%20Binary%20Object%20Representation%20Serializer%20for%20Hashing.%20It%20is%20meant%20to%20be%20used%20in%20security-critical%20projects%20as%20it%20prioritizes%20consistency%2C%20safety%2C%20speed%3B%20and%20comes%20with%20a%20strict%20specification.%0A%20%20%20%20-%20%5BEd25519.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FEd25519.sol)%3A%20%5BEd25519%5D(https%3A%2F%2Fed25519.cr.yp.to%2F)%20high-speed%20high-security%20signatures%0A%0A%20%20-%20%5BNear%20Prover%20Contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts)%0A%20%20%20%20-%20%5BNearProver.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FNearProver.sol)%3A%20Has%20a%20%60proveOutcome%60%20which%20validates%20the%20outcome%20merkle%20proof%20and%20the%20block%20proof%20is%20valid%20using%20%60_computeRoot%60%20which%20is%20passed%20in%20a%20%60bytes32%20node%2C%20ProofDecoder.MerklePath%20memory%20proof%60%0A%20%20%20%20-%20%5BProofDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FProofDecoder.sol)%3A%20Uses%20MerklePaths%20to%20provide%20decoding%20functions%20such%20as%20%60decodeExecutionStatus%60%2C%20%60decodeExecutionOutcome%60%2C%20%60decodeExecutionOutcomeWithId%60%2C%20%60decodeMerklePathItem%60%2C%20%60decodeMerklePath%60%20and%20%60decodeExecutionOutcomeWithIdAndProof%60.%20It%20relies%20on%20the%20primitives%20%60Borsh.sol%60%20and%20%60NearDecoder.sol%60%20above.%0A%0A%23%23%23%20Appendix%20J%20-%20Ethereum%20to%20NEAR%20Walkthrough%0A%0AFollowing%20is%20a%20walkthough%20of%20a%20funds%20transfer%20from%20Ethereum%20to%20a%20target%20chain%20(In%20this%20example%20Near)%2C%20complete%20with%20light%20client%20updates%2C%20block%20propogation%20and%20proofs%20to%20ensure%20the%20transaction%20validity.%0A%0A!%5BEthereum%20to%20Near%20Funds%20Transfer%5D(%2Fposts%2F2023-02-05-ethereum-bridging-costs%2Feth2NearFundsTransfer.jpg%20%22Ethereum%20to%20NEAR%20Funds%20Transfer%22)%0A%0A**Actors**%0AFrom%20the%20diagram%20above%20you'll%20notice%20that%20there%20are%20many%20actors%20involved%2C%20below%20is%20an%20overview%20of%20the%20actors%20and%20the%20operations%20they%20perform.%0A%0A-%20Accounts%0A%20%20-%20%5BUser%20Account%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x29da2ef94deeaf2d2f9003e9354abfcb1ff04b32)%20%3A%20The%20user%20is%20the%20owner%20of%20the%20funds%20being%20transferred%20and%20is%20responsible%20for%20signing%20the%20transactions%20to%20authorize%20bridging%20them%20accross%20chains.%20In%20this%20example%20they%20have%20accounts%20on%20%5BEthereum%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x29da2ef94deeaf2d2f9003e9354abfcb1ff04b32)%20and%20%5BNEAR%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fjohnrubini.near%23tokentxns)%0A%20%20-%20%5BTarget%20Chain%20Relayer%20Acccount%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Frelayer.bridge.near)%3A%20The%20relayer%20account%20is%20responsible%20for%20relaying%20messages%20from%20Ethereum%20to%20the%20target%20chain.%20%5C*Note%20this%20is%20connected%20to%20a%20relayer%20which%20is%20responsible%20for%20tasks%20such%20as%20querying%20latest%20block%20headers%20and%20getting%20light%20client%20status%20updates.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs).%0A%20%20-%20%5BTarget%20Chain%20Bridge%20Validator%20Accounts%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator1.near)%3A%20are%20responsible%20for%20validating%20light%20client%20update%20proposals%20and%20sending%20approval%20votes%20to%20%5BDAO%20Eth%20Client%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near).%0A-%20Ethereum%20Components%0A%20%20-%20%5BERC20%20Token%20Contract%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0xdac17f958d2ee523a2206206994597c13d831ec7%23code)%3A%20this%20is%20the%20token%20contract%20securing%20the%20funds%20in%20this%20examle%20USDT%20(Tether).%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2FOpenZeppelin%2Fopenzeppelin-contracts%2Fblob%2Frelease-v4.8%2Fcontracts%2Ftoken%2FERC20%2Fpresets%2FERC20PresetMinterPauser.sol)%0A%20%20-%20%5BBridge%20Contract%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x23ddd3e3692d1861ed57ede224608875809e127f%23code)%3A%20Responsible%20for%20deposits%20and%20withdrawals%20of%20tokens%20on%20Ethereum%20as%20well%20as%20various%20proving%20and%20propogation%20mechanisms%20such%20as%20checking%20of%20Signatures%20and%20adding%20Light%20Client%20Blocks.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearBridge.sol)%0A-%20Target%20Chain%20(NEAR)%20Components%0A%20%20-%20%5BValidator%20DAO%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%3A%20Responsible%20for%20receivng%20light%20client%20update%20proposals%20from%20the%20relayer%20and%20gathering%20approval%20votes%20for%20these%20propoals%20from%20Validators%20and%20submitting%20light%20client%20updates%20once%20the%20proposal%20is%20approved%20by%20the%20Validators.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Fdao_eth_client_contract.rs)%0A%20%20-%20%5BEtherum%202%20Client%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near)%3A%20The%20Ethereum%202%20client%20is%20responsbile%20for%20processing%20light%20client%20updates%20and%20receiving%20execution%20header%20blocks%20from%20Ethereum%20via%20the%20relayer.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs).%20_Note%3A%20this%20replaced%20the%20%5BEthereum%201%20client%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near)%20source%20code%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth-client%2Fsrc%2Flib.rs)_%0A%20%20-%20%5BEthereum%20Prover%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fprover.bridge.near)%20%3A%20The%20Ethereum%20Prover%20is%20used%20to%20prove%20transactions%20are%20included%20in%20a%20valid%20block%20Header.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth-prover%2Fsrc%2Flib.rs)%0A%20%20-%20%5BBridge%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Ffactory.bridge.near%23contract)%3A%20The%20Bridge%20contract%20is%20responsible%20for%20managing%20tokens%20including%20creating%20new%20tokens%2C%20setting%20metadata%20and%20depositing%20and%20withdrawal%20of%20tokens.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Fbridge-token-factory%2Fsrc%2Flib.rs).%0A%20%20%20%20-%20%5BNEAR%20Token%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Ftoken%2Fdac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near%3Fa%3Ddac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near)%3A%20The%20target%20chain%20representation%20of%20the%20token%20(USDT)%20managed%20by%20the%20target%20chain%20bridge%20contract.%0A%0A**Sample%20TransactionFlow**%0A%0A1.%20Block%20Propogation%0A%20%20%201.%20Get%20the%20Latest%20Slot%3A%20The%20relayer%20loops%20polling%20Ethereum%20every%2012%20seconds%20to%20get%20the%20latest%20slot.%20It%20then%20checks%20if%20it%20is%20for%20a%20new%20epoch%20and%20if%20so%20(every%206%20minutes)%20submits%20an%20execution%20header%20(with%2032%20blocks%20in%20it)%20and%20a%20light%20client%20update%20with%20the%20latest%20approved%20epochs%20and%20updated%20sync_comittee.%20Relayer%20source%20code%20for%20the%20loop%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L258)%20for%20retrieving%20the%20latest%20slot%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L163)%2C%20for%20submitting%20execution%20blocks%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L399)%20and%20for%20sending%20light%20client%20updates%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L489).%0A%20%20%20%20%20%201.%20%5BSend%20Block%20Headers%20(submit_execution_header)%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FHaXUxCvA1D87QXJzPzSYXmFYNuSLbTmyuxShzWgSLvPM)%3A%20Batch%20transaction%20which%20submits%2032%20block%20headers%20to%20%5Bclient-eth2.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near)%20for%20Ethereum%20Blocks%2016493592%20to%2016493623.%20(The%20second%20slot%20in%20epoch%20%5B176%2C936%5D(https%3A%2F%2Fbeaconcha.in%2Fepoch%2F176936)%20to%20the%20first%20slot%20in%20epoch%20%5B176%2C937%5D(https%3A%2F%2Fbeaconcha.in%2Fepoch%2F176937)).%20**Executed%20every%206%20minutes%20when%20the%20first%20slot%20of%20a%20new%20epoch%20is%20found.**%0A%20%20%20%20%20%202.%20%5BCreate%20Light%20Client%20update%20proposal(add_proposal)%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FJ1tQ465Dxt4UhWy9Msn2pZCbdkWatSepqsx9sDZaX35z%23)%3A%20calls%20%5Bbridge-validator.sputnik-dao.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%20to%20add%20proposal%2017410%20for%20%5Bslot%205%2C661%2C984%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5661984)%20in%20epoch%20%5B176%2C937%5D(https%3A%2F%2Fbeaconcha.in%2Fepoch%2F176937).%0A%20%20%202.%20%5BApprove%20Proposal%20(act_proposal)%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FD5uP4BbRSUX4ZGijRfWGkR5KbFb2Kb9q1gSsFVQbYSLt)%3A%20sends%20a%20VoteApprove%20action%20for%20proposal%2017410%20from%20a%20%5Bbridge%20validator%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator1.near)%20to%20the%20%5BValidator%20DAO%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near).%0A%20%20%20%20%20%201.%20act_proposal%20in%20contract%20%5Bbridge-validator.sputnik-dao.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%0A%20%20%20%20%20%202.%20submit_beacon_chain_light_client_update%20in%20%5Bclient-eth2.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near)%0A%20%20%20%20%20%203.%20on_proposal_callback%20in%20contract%20%5Bbridge-validator.sputnik-dao.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%0A2.%20Funds%20Transfer%20Transaction%20Flow%0A%20%20%201.%20%5BLock%20Funds%20On%20Ethereum%5D(https%3A%2F%2Fetherscan.io%2Ftx%2F0xa685c59a24cc2056e10e660ce8a8bff7bbc335433698e138c77aaadf20ecb614)%3A%20Locking%2010%2C000%20USDT%20to%20send%20to%20user%20on%20NEAR.%0A%20%20%202.%20%5BDeposit%20Funds%20on%20Target%20Chain%20Bridge%20Contract%20(deposit)%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FvniyRR67ndrtvpoQ9c5ACoT4e9c283VSQsrZcN6GGto%23execution)%0A%20%20%20%20%20%201.%20deposit%20in%20contract%20factory.bridge.near%0A%20%20%20%20%20%202.%20verify_log_entry%20in%20contract%20prover.bridge.near%0A%20%20%20%20%20%203.%20block_hash_safe%20in%20contract%20client-eth2.bridge.near%0A%20%20%20%20%20%204.%20finish_deposit%20in%20contract%20factory.bridge.near%20%3A%20mint%20of%2010%2C000%20USDT.%0A%0A**TODO**%0A%0A-%20Find%20and%20review%20the%20source%20code%20for%20the%20%5Bvalidator%20light%20client%20approval%20update%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FHnzBR7x5Sxnmcm4MfRt1ghhMjJNspDaygUUKeM9T27Li%23execution).%20_Note%3A%20the%20eth2_client%20has%20a%20%5Bvalidate_light_client_update%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs%23L311)%20which%20is%20%5Bconfigurable%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs%23L42)%20and%20is%20used%20for%20debugging%20purposes._%0A%0A**Bridging%20Resources%20Required**%0A%0AHere%20is%20the%20storage%20and%20compuational%20costs%20per%20component.%0A%0A%7C%20Component%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Data%20%20%20%20%20%20%20%20%20%20%20%7C%20Storage%20%7C%20Notes%20%7C%0A%7C%20---------------------------------------------------------------------------------------------------------------------------%20%7C%20--------------%20%7C%20-------%20%7C%20-----%20%7C%0A%7C%20%5BEthereum%202%20Client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs%23L35)%20%7C%20---%20%20%20%20%20%20%20%20%20%20%20%20%7C%20---%20%20%20%20%20%7C%20---%20%20%20%7C%0A%7C%20%5BProver%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth-prover%2Fsrc%2Flib.rs)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20not%20applicable%20%7C%200%20bytes%20%7C%20%20%20%20%20%20%20%7C%0A%7C%20%5BDAO%20Contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Fdao_contract.rs)%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%7C%0A%0A**TODO**%0AReview%20the%20following%20data%20structure%20and%20elements%20and%20move%20into%20the%20table%20above%20commenting%20on%20any%20mandatory%20requirements%20and%20structures%20that%20can%20be%20improved.%0A%0A%60%60%60%0Apub%20struct%20Eth2Client%20%7B%0A%20%20%20%20%2F%2F%2F%20If%20set%2C%20only%20light%20client%20updates%20by%20the%20trusted%20signer%20will%20be%20accepted%0A%20%20%20%20trusted_signer%3A%20Option%3CAccountId%3E%2C%0A%20%20%20%20%2F%2F%2F%20Mask%20determining%20all%20paused%20functions%0A%20%20%20%20paused%3A%20Mask%2C%0A%20%20%20%20%2F%2F%2F%20Whether%20the%20client%20validates%20the%20updates.%0A%20%20%20%20%2F%2F%2F%20Should%20only%20be%20set%20to%20%60false%60%20for%20debugging%2C%20testing%2C%20and%20diagnostic%20purposes%0A%20%20%20%20validate_updates%3A%20bool%2C%0A%20%20%20%20%2F%2F%2F%20Whether%20the%20client%20verifies%20BLS%20signatures.%0A%20%20%20%20verify_bls_signatures%3A%20bool%2C%0A%20%20%20%20%2F%2F%2F%20We%20store%20the%20hashes%20of%20the%20blocks%20for%20the%20past%20%60hashes_gc_threshold%60%20headers.%0A%20%20%20%20%2F%2F%2F%20Events%20that%20happen%20past%20this%20threshold%20cannot%20be%20verified%20by%20the%20client.%0A%20%20%20%20%2F%2F%2F%20It%20is%20desirable%20that%20this%20number%20is%20larger%20than%207%20days'%20worth%20of%20headers%2C%20which%20is%20roughly%0A%20%20%20%20%2F%2F%2F%2051k%20Ethereum%20blocks.%20So%20this%20number%20should%20be%2051k%20in%20production.%0A%20%20%20%20hashes_gc_threshold%3A%20u64%2C%0A%20%20%20%20%2F%2F%2F%20Network.%20e.g.%20mainnet%2C%20kiln%0A%20%20%20%20network%3A%20Network%2C%0A%20%20%20%20%2F%2F%2F%20Hashes%20of%20the%20finalized%20execution%20blocks%20mapped%20to%20their%20numbers.%20Stores%20up%20to%20%60hashes_gc_threshold%60%20entries.%0A%20%20%20%20%2F%2F%2F%20Execution%20block%20number%20-%3E%20execution%20block%20hash%0A%20%20%20%20finalized_execution_blocks%3A%20LookupMap%3Cu64%2C%20H256%3E%2C%0A%20%20%20%20%2F%2F%2F%20All%20unfinalized%20execution%20blocks'%20headers%20hashes%20mapped%20to%20their%20%60HeaderInfo%60.%0A%20%20%20%20%2F%2F%2F%20Execution%20block%20hash%20-%3E%20ExecutionHeaderInfo%20object%0A%20%20%20%20unfinalized_headers%3A%20UnorderedMap%3CH256%2C%20ExecutionHeaderInfo%3E%2C%0A%20%20%20%20%2F%2F%2F%20%60AccountId%60s%20mapped%20to%20their%20number%20of%20submitted%20headers.%0A%20%20%20%20%2F%2F%2F%20Submitter%20account%20-%3E%20Num%20of%20submitted%20headers%0A%20%20%20%20submitters%3A%20LookupMap%3CAccountId%2C%20u32%3E%2C%0A%20%20%20%20%2F%2F%2F%20Max%20number%20of%20unfinalized%20blocks%20allowed%20to%20be%20stored%20by%20one%20submitter%20account%0A%20%20%20%20%2F%2F%2F%20This%20value%20should%20be%20at%20least%2032%20blocks%20(1%20epoch)%2C%20but%20the%20recommended%20value%20is%201024%20(32%20epochs)%0A%20%20%20%20max_submitted_blocks_by_account%3A%20u32%2C%0A%20%20%20%20%2F%2F%20The%20minimum%20balance%20that%20should%20be%20attached%20to%20register%20a%20new%20submitter%20account%0A%20%20%20%20min_storage_balance_for_submitter%3A%20Balance%2C%0A%20%20%20%20%2F%2F%2F%20Light%20client%20state%0A%20%20%20%20finalized_beacon_header%3A%20ExtendedBeaconBlockHeader%2C%0A%20%20%20%20finalized_execution_header%3A%20LazyOption%3CExecutionHeaderInfo%3E%2C%0A%20%20%20%20current_sync_committee%3A%20LazyOption%3CSyncCommittee%3E%2C%0A%20%20%20%20next_sync_committee%3A%20LazyOption%3CSyncCommittee%3E%2C%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Appendix%20K%20-%20Explorer%20and%20Interactive%20Links%0A%0A-%20Near%0A%20%20-%20eth-prover%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Frelayer.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Frelayer.bridge.near)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near)%0A%20%20-%20eth-client%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fprover.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fprover.bridge.near)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near)%0A%20%20-%20factory%20(manages%20tokens)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Ffactory.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Ffactory.bridge.near)%0A%20%20-%20dao%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%0A%20%20-%20aurora%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Faurora%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Faurora)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Frelay.aurora%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Frelay.aurora)%0A%0A-%20Ethereum%0A%20%20-%20%5Bbeaconcha.in%5D(https%3A%2F%2Fbeaconcha.in%2F)%0A%20%20%20%20-%20%5Bvalidators%5D(https%3A%2F%2Fbeaconcha.in%2Fvalidators)%0A%20%20%20%20-%20%5Bepochs%5D(https%3A%2F%2Fbeaconcha.in%2Fepochs)%0A%20%20%20%20-%20%5Bslots%5D(https%3A%2F%2Fbeaconcha.in%2Fslots)%0A%20%20%20%20-%20%5Bblocks%5D(https%3A%2F%2Fbeaconcha.in%2Fblocks)%0A%20%20%20%20-%20%5Btransactions%5D(https%3A%2F%2Fbeaconcha.in%2Ftransactions)%0A%20%20-%20Near%20Bridge%0A%20%20%20%20-%20%5BNearBridge%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x3fefc5a4b1c02f21cbc8d3613643ba0635b9a873)%0A%20%20%20%20-%20%5BERC20Locker%5D(https%3A%2F%2Fetherscan.io%2Ftx%2F0xa685c59a24cc2056e10e660ce8a8bff7bbc335433698e138c77aaadf20ecb614)%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./near-rainbow-DAQpXg4M.js"),[]),path:"/research/bridge/near-rainbow.html",type:"mdx",filePath:"research/bridge/near-rainbow.mdx",content:"%23%20Near%20Rainbow%20Bridge%0A%0A-%20date%3A%202023-02-24%0A-%20last%20updated%3A%202023-02-24%0A%0A%23%23%20Overview%0A%0ANEAR%20Rainbow%20bridge%20was%20enhanced%20to%20support%20Ethereum%202.0%20leveraging%20Ethereum%20Light%20Clients.%20This%20document%20is%20a%20review%20of%20the%20design.%0A%0AKey%20differences%20in%20supporting%20Ethereum%202.0%20(Proof%20of%20Stake)%20vs%20Proof%20of%20Work%20involves%20removing%20the%20ETHHASH%20logic%20and%20SPV%20client%20and%20potentially%20replacing%20with%20MMR%20trees%20per%20epoch%20and%20checkpoints%20similar%20to%20Harmony%20Light%20Client%20on%20Ethereum.%0A%0AThe%20%5BNEAR%20Rainbow%20bridge%5D(https%3A%2F%2Fnear.org%2Fbridge%2F)%20is%20in%20%5Bthis%20github%20repository%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge)%20and%20is%20supported%20by%20%5BAurora-labs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near).%0A%0AIt%20recently%20provided%20support%20for%20ETH%202.0%20in%20this%20%5BPull%20Request%20(762)%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fpull%2F762).%0A%0AIt%20interacts%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20for%20Ethereum%202.0%20Consensus%20and%20tree_hash%20functions%20as%20well%20as%20bls%20signatures.%0A%0AHigh%20Level%20their%20architecture%20is%20similar%20to%20the%20Horizon%20Bridge%20but%20with%20some%20key%20differences%2C%20including%20but%20not%20limited%20to%0A%0A-%20interacting%20with%20the%20beacon%20chain%20now%20for%20finality%20%60is_correct_finality_update%60%20%5Bsee%20finality-update-verify%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2Fsrc%2Flib.rs%23L36)%0A-%20Updated%20execution%20block%20proof%20to%20use%20the%20BEACONRPCClient%20and%20with%20an%20updated%20merkle%20tree%0A%20%20-%20Design%20can%20be%20found%20in%20%5BPR-762%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fpull%2F762)%0A%0A%23%23%20Approach%0A%0ANear%20Rainbow%20bridge%20uses%20a%20fradu%20proof%20approach.%0A%0A%23%23%20Proving%20Mechanisms%0A%0A%23%23%23%20NEAR%20to%20Ethereum%20watchdog%0A%0AThe%20%5Bwatchdog%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fnear2eth%2Fwatchdog%2Findex.js)%20runs%20every%2010%20seconds%20and%20validates%20blocks%20on%20%60NearBridge.sol%60%20challenging%20blocks%20with%20incorrect%20signatures.%20_Note%3A%20It%20uses%20%5Bheep-prometheus%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Fhttp-prometheus.js)%20for%20monitoring%20and%20storing%20block%20and%20producer%20information%20using%20%60gauges%60%20and%20%60counters%60._%0A%0A-%20%5Bwatchdog%20is%20started%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Fcommands%2Fstart%2Fwatchdog.js)%20from%20the%20CLI%0A-%20%5Bwatchdog%20logic%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fnear2eth%2Fwatchdog%2Findex.js)%0A%20%20-%20Initializes%20monitoring%20information%20on%20%60Prometheus%60%0A%20%20%20%20-%20%60const%20httpPrometheus%20%3D%20new%20HttpPrometheus(this.metricsPort%2C%20'near_bridge_watchdog_')%60%0A%20%20%20%20-%20%60const%20lastBlockVerified%20%3D%20httpPrometheus.gauge('last_block_verified'%2C%20'last%20block%20that%20was%20already%20verified')%60%0A%20%20%20%20-%20%60const%20totBlockProducers%20%3D%20httpPrometheus.gauge('block_producers'%2C%20'number%20of%20block%20producers%20for%20current%20block')%60%0A%20%20%20%20-%20%60const%20incorrectBlocks%20%3D%20httpPrometheus.counter('incorrect_blocks'%2C%20'number%20of%20incorrect%20blocks%20found')%60%0A%20%20%20%20-%20%60const%20challengesSubmitted%20%3D%20httpPrometheus.counter('challenges_submitted'%2C%20'number%20of%20blocks%20challenged')%60%0A%20%20-%20Loops%20%60while%20(true)%60%0A%20%20%20%20-%20Gets%20the%20%60bridgeState%60%0A%20%20%20%20-%20Loops%20through%20all%20blockProducers%20checking%20their%20signatures%0A%20%20%20%20-%20%60for%20(let%20i%20%3D%200%3B%20i%20%3C%20numBlockProducers%3B%20i%2B%2B)%60%0A%20%20%20%20%20%20-%20Check%20each%20signature%20%60this.clientContract.methods.checkBlockProducerSignatureInHead(i).call()%60%0A%20%20%20%20%20%20-%20If%20invalid%20challenge%20the%20signature%3A%20%60this.clientContract.methods.challenge(this.ethMasterAccount%2C%20i).encodeABI()%60%20calls%20%5Bchallenge%20function%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearBridge.sol%23L93)%0A%20%20%20%20%20%20%20%20-%20%60function%20challenge(address%20payable%20receiver%2C%20uint%20signatureIndex)%20external%20override%20pausable(PAUSED_CHALLENGE)%60%0A%20%20%20%20%20%20%20%20%20%20-%20checks%20block.timestamp%20is%20less%20than%20lastValidAt%20%60block.timestamp%20%3C%20lastValidAt%2C%60%0A%20%20%20%20%20%20%20%20%20%20-%20Check%20if%20the%20signature%20is%20valid%20%60!checkBlockProducerSignatureInHead(signatureIndex)%60%0A%20%20%20%20%20%20%20%20%20%20-%20slashes%20the%20last%20submitter%20%60balanceOf%5BlastSubmitter%5D%20%3D%20balanceOf%5BlastSubmitter%5D%20-%20lockEthAmount%3B%60%0A%20%20%20%20%20%20%20%20%20%20-%20resets%20lastValidAt%20%60lastValidAt%20%3D%200%3B%60%0A%20%20%20%20%20%20%20%20%20%20-%20Refunds%20half%20of%20the%20funds%20to%20the%20watchdog%20account%20%60receiver.call%7Bvalue%3A%20lockEthAmount%20%2F%202%7D(%22%22)%3B%60%0A%20%20%20%20%20%20-%20Sleeps%20for%20watchdog%20Delay%20seconds%20%60await%20sleep(watchdogDelay%20*%201000)%60%0A%0A%23%23%20Relayer%20Mechanisms%0A%0A%23%23%23%20Ethereum%20to%20NEAR%20block%20propagation%20flow%0A%0AFollowing%20is%20a%20walkthough%20of%20block%20propogation%20from%20Ethereum%20to%20NEAR.%20For%20a%20better%20understanding%20of%20the%20technical%20components%20see%20%5BAppendix%20A%5D(%23appendix-a-ethereum-to-near-block-propagation-components).%0A%0A-%20%5BLight%20Clients%20are%20deployed%20on%20Near%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L107)%3A%0A%20%20-%20%5Binit_contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L107)%3A%20The%20eth2near%20relayer%20is%20called%20with%20an%20argument%20to%20initialize%20the%20%5Beth2-client%20contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%0A%20%20%20%20-%20%5Beth_client_contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L108)%3A%20is%20created%20using%20a%20contract_wrapper%0A%20%20%20%20%20%20-%20%60let%20mut%20eth_client_contract%20%3D%20EthClientContract%3A%3Anew(get_eth_contract_wrapper(%26config))%3B%60%0A%20%20%20%20-%20%5BEthClientContract%20Wrapper%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Feth_client_contract.rs)%3A%20creates%20an%20instance%20of%20%5Beth2-client%20contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%20with%20the%20following%20arguments%0A%20%20%20%20%20%20-%20%60network%60%20-%20the%20name%20of%20Ethereum%20network%20such%20as%20%60mainnet%60%2C%20%60goerli%60%2C%20%60kiln%60%2C%20etc.%0A%20%20%20%20%20%20-%20%60finalized_execution_header%60%20-%20the%20finalized%20execution%20header%20to%20start%20initialization%20with.%0A%20%20%20%20%20%20-%20%60finalized_beacon_header%60%20-%20correspondent%20finalized%20beacon%20header.%0A%20%20%20%20%20%20-%20%60current_sync_committee%60%20-%20sync%20committee%20correspondent%20for%20finalized%20block.%0A%20%20%20%20%20%20-%20%60next_sync_committee%60%20-%20sync%20committee%20for%20the%20next%20period%20after%20period%20for%20finalized%20block.%0A%20%20%20%20%20%20-%20%60hashes_gs_threshold%60%20-%20the%20maximum%20number%20of%20stored%20finalized%20blocks.%0A%20%20%20%20%20%20-%20%60max_submitted_block_by_account%60%20-%20the%20maximum%20number%20of%20unfinalized%20blocks%20which%20one%20relay%20can%20store%20in%20the%20client's%20storage.%0A%20%20%20%20%20%20-%20%60trusted_signer%60%20-%20the%20account%20address%20of%20the%20trusted%20signer%20which%20is%20allowed%20to%20submit%20light%20client%20updates.%0A-%20%5BRelayer%20is%20Created%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L111)%3A%0A%20%20-%20%5Beth2near_relay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L111)%20is%20created%20using%20the%20following%20arguments%0A%20%20%20%20-%20%60let%20mut%20eth2near_relay%20%3D%20Eth2NearRelay%3A%3Ainit(%26config%2C%20get_eth_client_contract(%26config)%2C%20args.enable_binary_search%2C%20args.submit_only_finalized_blocks%2C)%3B%60%0A-%20%5BRelayer%20is%20Started%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs)%3A%0A%20%20-%20The%20relayer%20is%20started%20using%20%60eth2near_relay.run(None)%3B%60%0A%20%20-%20This%20executes%20the%20%5Beth2near_relay%20run%20function%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L257)%20%60pub%20fn%20run(%26mut%20self%2C%20max_iterations%3A%20Option%3Cu64%3E)%60%20which%20runs%20until%20terminated%20doing%20using%20the%20following%20loop%20%60while%20!self.terminate%60%0A%20%20%20%20-%20%60self.wait_for_synchronization()%2C%60%3A%20gets%20the%20sync%20status%0A%20%20%20%20-%20%60sleep(Duration%3A%3Afrom_secs(12))%3B%60%3A%20waits%20for%2012%20seconds%0A%20%20%20%20-%20%60self.get_max_slot_for_submission()%60%3A%20gets%20the%20maximum%20slot%20for%20submission%20from%20Ethereum%0A%20%20%20%20-%20%60self.get_last_eth2_slot_on_near%60%3A%20gets%20the%20latest%20slot%20propogated%20from%20Ethereum%20to%20NEAR%0A%20%20%20%20-%20%60if%20last_eth2_slot_on_near%20%3C%20max_slot_for_submission%60%3A%20If%20there%20are%20slots%20to%20process%0A%20%20%20%20%20%20-%20%60self.get_execution_blocks_between(last_eth2_slot_on_near%20%2B%201%2C%20max_slot_for_submission%2C)%2C%60%3A%20Get%20the%20execution%20blocks%20to%20be%20processed%0A%20%20%20%20%20%20-%20%60self.submit_execution_blocks(headers%2C%20current_slot%2C%20%26mut%20last_eth2_slot_on_near)%60%3A%20submit%20them%0A%20%20%20%20%20%20-%20%60were_submission_on_iter%20%3D%20true%3B%60%3A%20flags%20that%20there%20were%20submissions%0A%20%20%20%20-%20%60were_submission_on_iter%20%7C%3D%20self.send_light_client_updates_with_checks(last_eth2_slot_on_near)%3B%60%3A%20send%20light_client%20updates%20with%20checks%20and%20updates%20the%20submission%20flag%20to%20true%20if%20if%20passes.%20Following%20is%20some%20key%20logic%0A%20%20%20%20%20%20-%20%60self.is_enough_blocks_for_light_client_update%60%3A%20Checks%20if%20there%20are%20enough%20blocks%20for%20a%20light%20client%20update%0A%20%20%20%20%20%20%20%20-%20%60self.send_light_client_updates%60%20calls%20%60send_light_client_update%60%20which%0A%20%20%20%20%20%20%20%20%20%20-%20%60if%20last_finalized_slot_on_eth%20%3E%3D%20last_finalized_slot_on_near%20%2B%20self.max_blocks_for_finalization%60%3A%20checks%20if%20the%20gap%20is%20too%20big%20(i.e.%20we%20are%20at%20a%20new%20slot)%20between%20slot%20of%20finalized%20block%20on%20NEAR%20and%20ETH.%20If%20it%20is%20it%20sends%20a%20hand%20made%20client%20update%20(which%20will%20loop%20getting%20the%20new%20slots%20sync%20committees)%20otherwise%20it%20sends%20a%20regular%20client%20update%20(which%20propogates%20the%20block%20headers)%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.send_hand_made_light_client_update(last_finalized_slot_on_near)%3B%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20-%20%60let%20include_next_sync_committee%20%3D%20BeaconRPCClient%3A%3Aget_period_for_slot%20(last_finalized_slot_on_near)%20!%3D%20BeaconRPCClient%3A%3Aget_period_for_slot(attested_slot)%3B%60%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.send_regular_light_client_update(last_finalized_slot_on_eth%2C%20last_finalized_slot_on_near%2C)%3B%60%0A%20%20%20%20%20%20%20%20%20%20-%20%60self.send_specific_light_client_update(light_client_update)%60%20is%20called%20for%20both%20regular%20and%20hand%20made%20updates.%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.eth_client_contract.is_known_block%60%3A%20Checks%20if%20the%20block%20is%20already%20known%20on%20the%20Etherum%20Client%20Contract%20on%20NEAR%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.verify_bls_signature_for_finality_update(%26light_client_update)%60%3A%20Verifies%20the%20BLS%20signatures.%20This%20calls%20%60is_correct_finality_update%60%20in%20%60eth2near%2Ffinality-update-verify%2Fsrc%2Flib.rs%60%20%5C*%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.eth_client_contract.send_light_client_update(light_client_update.clone())%60%3A%20Updates%20the%20light%20client%20with%20the%20finalized%20block%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.beacon_rpc_client.get_block_number_for_slot(types%3A%3ASlot%3A%3Anew(light_client_update.finality_update.header_update.beacon_header.slot.as_u64()))%2C%60%3A%20Validates%20Finalized%20block%20number%20is%20correct%20on%20Ethereum%20usng%20the%20%60beacon_rpc_client%60.%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60sleep(Duration%3A%3Afrom_secs(self.sleep_time_after_submission_secs))%3B%60%3A%20sleeps%20for%20the%20configured%20submission%20sleep%20time.%0A%20%20%20%20-%20%60if%20!were_submission_on_iter%20%7Bthread%3A%3Asleep(Duration%3A%3Afrom_secs(self.sleep_time_on_sync_secs))%3B%7D%60%3A%20if%20there%20were%20submissions%20sleep%20for%20however%20many%20seconds%20were%20configured%20for%20sync%20sleep%20time.%0A%0A%23%23%23%20NEAR%20to%20Ethereum%20block%20propagation%20flow%0A%0A%5BNEAR%20Light%20Client%20Documentation%5D(https%3A%2F%2Fnomicon.io%2FChainSpec%2FLightClient)%20gives%20an%20overview%20of%20how%20light%20clients%20work.%20At%20a%20high%20level%20the%20light%20client%20needs%20to%20fetch%20at%20least%20one%20block%20per%20%5Bepoch%5D(https%3A%2F%2Fdocs.near.org%2Fconcepts%2Fbasics%2Fepoch)%20i.e.%20every%2042%2C200%20blocks%20or%20approxmiately%2012%20hours.%20Also%20Having%20the%20LightClientBlockView%20for%20block%20B%20is%20sufficient%20to%20be%20able%20to%20verify%20any%20statement%20about%20state%20or%20outcomes%20in%20any%20block%20in%20the%20ancestry%20of%20B%20(including%20B%20itself).%0A%0AThe%20current%20scripts%20and%20codebase%20indicates%20that%20a%20block%20would%20be%20fetched%20every%2030%20seconds%20with%20a%20max%20delay%20of%2010%20seconds.%20It%20feels%20that%20this%20would%20be%20expensive%20to%20update%20Ethereum%20so%20frequently.%20%5BNEAR's%20bridge%20documentation%5D(https%3A%2F%2Fnear.org%2Fbridge%2F)%20states%20_Sending%20assets%20from%20NEAR%20back%20to%20Ethereum%20currently%20takes%20a%20maximum%20of%20sixteen%20hours%20(due%20to%20Ethereum%20finality%20times)_.%20This%20seems%20to%20align%20with%20sending%20light%20client%20updates%20once%20per%20NEAR%20epoch.%20The%20block%20fetch%20period%20is%20configurable%20in%20the%20relayer.%0A%0A%3E%20The%20RPC%20returns%20the%20LightClientBlock%20for%20the%20block%20as%20far%20into%20the%20future%20from%20the%20last%20known%20hash%20as%20possible%20for%20the%20light%20client%20to%20still%20accept%20it.%20Specifically%2C%20it%20either%20returns%20the%20last%20final%20block%20of%20the%20next%20epoch%2C%20or%20the%20last%20final%20known%20block.%20If%20there's%20no%20newer%20final%20block%20than%20the%20one%20the%20light%20client%20knows%20about%2C%20the%20RPC%20returns%20an%20empty%20result.%0A%3E%0A%3E%20A%20standalone%20light%20client%20would%20bootstrap%20by%20requesting%20next%20blocks%20until%20it%20receives%20an%20empty%20result%2C%20and%20then%20periodically%20request%20the%20next%20light%20client%20block.%0A%3E%0A%3E%20A%20smart%20contract-based%20light%20client%20that%20enables%20a%20bridge%20to%20NEAR%20on%20a%20different%20blockchain%20naturally%20cannot%20request%20blocks%20itself.%20Instead%20external%20oracles%20query%20the%20next%20light%20client%20block%20from%20one%20of%20the%20full%20nodes%2C%20and%20submit%20it%20to%20the%20light%20client%20smart%20contract.%20The%20smart%20contract-based%20light%20client%20performs%20the%20same%20checks%20described%20above%2C%20so%20the%20oracle%20doesn't%20need%20to%20be%20trusted.%0A%0ABlock%20Submitters%20stake%20ETH%20to%20be%20allowed%20to%20submit%20blocks%20which%20get's%20slashed%20if%20the%20watchdog%20identifies%20blocks%20with%20invalid%20signatures.%0A%0A_Note%3A%20Have%20not%20identified%20how%20the%20block%20submitters%20are%20rewarded%20for%20submitting%20blocks.%20Currently%20have%20only%20identified%20them%20locking%20ETH%20to%20be%20able%20to%20submit%20blocks%20and%20being%20slashed%20if%20they%20submit%20blocks%20with%20invalid%20signatures._%0A%0A-%20%5BLight%20Clients%20are%20deployed%20on%20Ethereum%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Findex.js%23L518)%20via%20the%20CLI%20using%20%5Beth-contracts.js%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Finit%2Feth-contracts.js)%0A%20%20-%20%5Binit-eth-ed25519%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Findex.js%23L505)%3A%20Deploys%20%60Ed25519.sol%60%20see%20more%20information%20under%20%5Bnearbridge%20Cryptographic%20Primitives%5D(%23nearbridge-cryptographic-primitives)%0A%20%20-%20%5Binit-eth-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Findex.js%23L520)%3A%20Deploys%20%60NearBridge.sol%60%20see%20more%20information%20under%20%5BNEAR%20to%20Ethereum%20block%20propagation%20components%5D(%23near-to-ethereum-block-propagation-components).%20It%20takes%20the%20following%20arguments%0A%20%20%20%20-%20%60ethEd25519Address%60%3A%20The%20address%20of%20the%20ECDSA%20signature%20checker%20using%20Ed25519%20curve%20(see%20%5Bhere%5D(https%3A%2F%2Fnbeguier.medium.com%2Fa-real-world-comparison-of-the-ssh-key-algorithms-b26b0b31bfd9))%0A%20%20%20%20-%20%60lockEthAmount%60%3A%20The%20amount%20that%20%60BLOCK_PRODUCERS%60%20need%20to%20deposit%20(in%20wei)to%20be%20able%20to%20provide%20blocks.%20This%20amount%20will%20be%20slashed%20if%20the%20block%20is%20challenged%20and%20proven%20not%20to%20have%20a%20valid%20signature.%20Default%20value%20is%20100000000000000000000%20WEI%20%3D%20100%20ETH.%0A%20%20%20%20-%20%60lockDuration%60%20%3A%2030%20seconds%0A%20%20%20%20-%20%60replaceDuration%60%3A%2060%20seconds%20it%20is%20passed%20in%20nanoseconds%2C%20because%20it%20is%20a%20difference%20between%20NEAR%20timestamps.%0A%20%20%20%20-%20%60ethAdminAddress%60%3A%20Bridge%20Administrator%20Address%0A%20%20%20%20-%20%600%60%20%3A%20Indicates%20nothing%20is%20paused%20%60UNPAUSE_ALL%60%0A%20%20-%20%5Binit-eth-prover%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Findex.js%23L538)%3A%20Deploys%20%60NearProver.sol%60%20see%20more%20information%20under%20%5BNEAR%20to%20Ethereum%20block%20propagation%20components%5D(%23near-to-ethereum-block-propagation-components).%20It%20takes%20the%20following%20arguments%0A%20%20%20%20-%20%60ethClientAddress%60%3A%20Interface%20to%20%60NearBridge.sol%60%0A%20%20%20%20-%20%60ethAdminAddress%60%3A%20Administrator%20address%0A%20%20%20%20-%20%600%60%3A%20paused%20indicator%20defaults%20to%20%60UNPAUSE_ALL%20%3D%200%60%0A-%20%5BRelayer%20is%20Started%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Fcommands%2Fstart%2Fnear2eth-relay.js)%0A%20%20-%20Relayer%20is%20started%20using%20the%20following%20command%0A%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20cli%2Findex.js%20start%20near2eth-relay%20%5C%0A%20%20%20%20%20%20%20%20--eth-node-url%20http%3A%2F%2F127.0.0.1%3A8545%2F%20%5C%0A%20%20%20%20%20%20%20%20--eth-master-sk%200xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80%20%5C%0A%20%20%20%20%20%20%20%20--near-node-url%20https%3A%2F%2Frpc.testnet.near.org%2F%20%5C%0A%20%20%20%20%20%20%20%20--near-network-id%20testnet%20%5C%0A%20%20%20%20%20%20%20%20--eth-client-address%200xe7f1725e7734ce288f8367e1bb143e90bb3f0512%20%5C%0A%20%20%20%20%20%20%20%20--eth-use-eip-1559%20true%20%5C%0A%20%20%20%20%20%20%20%20--near2eth-relay-max-delay%2010%20%5C%0A%20%20%20%20%20%20%20%20--near2eth-relay-block-select-duration%2030%20%5C%0A%20%20%20%20%20%20%20%20--near2eth-relay-after-submit-delay-ms%201000%20%5C%0A%20%20%20%20%20%20%20%20--log-verbose%20true%20%5C%0A%20%20%20%20%20%20%20%20--daemon%20false%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A-%20%5BRelayer%20Logic%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fnear2eth%2Fnear2eth-block-relay%2Findex.js)%0A%20%20-%20Loops%20%60while%20(true)%60%0A%20%20%20%20-%20Get%20the%20bridge%20state%20(including%20%60currentHeight%60%2C%20%60nextTimestamp%60%2C%20%60nextValidAt%60%2C%20%60numBlockProducers%60%20)%0A%20%20%20%20-%20Get%20the%20%60currentBlockHash%60%20the%20hash%20of%20the%20current%20untrursted%20block%20based%20on%20%60lastValidAt%60%0A%20%20%20%20-%20Gets%20the%20%60lastBlock%60%20by%20calling%20the%20NEAR%20rpc%20%60next_light_client_block%60%20using%20the%20hash%20of%20last%20untrusted%20block%20%60bs58.encode(currentBlockHash)%60%0A%20%20%20%20-%20Get's%20the%20%60replaceDuration%60%20by%20%60clientContract.methods.replaceDuration().call()%60%20this%20will%20be%2060%20seconds%20if%20we%20deployed%20%60NearBridge.sol%60%20with%20the%20default%20values%20above%0A%20%20%20%20-%20Sets%20%60nextValidAt%60%20from%20the%20bridge%20state%20%60web3.utils.toBN(bridgeState.nextValidAt)%60%0A%20%20%20%20-%20Sets%20%60replaceDelay%60%20to%200%20then%20updates%20it%20to%20the%20%60nextTimestamp%60%20%2B%20%60replaceDuration%60%20-%20%60lastBlock.inner_lite.timestamp%60%20i.e.%20The%20new%20block%20has%20to%20be%20at%20least%2060%20seconds%20after%20the%20current%20block%20stored%20on%20the%20light%20client.%0A%20%20%20%20-%20Checks%20the%20height%20of%20the%20%60currentHeight%60%20of%20the%20bridge%20is%20less%20than%20the%20%60lastblock%60%20from%20the%20near%20light%20client%20%60(bridgeState.currentHeight%20%3C%20lastBlock.inner_lite.height)%60%0A%20%20%20%20-%20Serializes%20the%20%60lastBlock%60%20using%20Borsh%20and%20check%20that%20the%20block%20is%20suitable%0A%20%20%20%20-%20Checks%20that%20the%20%60replaceDelay%60%20has%20been%20met%2C%20if%20not%20sleeps%20until%20it%20has%0A%20%20%20%20-%20Checks%20that%20the%20Master%20Account%20(the%20one%20submitting%20the%20block)%20has%20enough%20locked%20ETH%20(if%20not%20tries%20to%20deposit%20more).%20So%20that%20it%20can%20be%20slashed%20if%20the%20block%20proposed%20is%20invalid.%0A%20%20%20%20-%20Adds%20the%20light%20client%20block%20%60await%20clientContract.methods.addLightClientBlock(nextBlockSelection.borshBlock).send%60%0A%20%20%20%20%20%20-%20Checks%20%60NearBridge.sol%60%20(the%20light%20client)%20has%20been%20initialized%0A%20%20%20%20%20%20-%20Checks%20%60balanceOf%5Bmsg.sender%5D%20%3E%3D%20lockEthAmount%60%20that%20the%20sender%20has%20locked%20enough%20Eth%20to%20allow%20them%20to%20submit%20blocks%0A%20%20%20%20%20%20-%20Decodes%20the%20nearBlock%20using%20%60Borsh.from(data)%60%20and%20%60borsh.decodeLightClientBlock()%60%0A%20%20%20%20%20%20-%20Commis%20the%20previous%20block%2C%20or%20make%20sure%20that%20it%20is%20OK%20to%20replace%20it%20using%0A%20%20%20%20%20%20%20%20-%20%60lastValidAt%20%3D%200%3B%60%0A%20%20%20%20%20%20%20%20-%20%60blockHashes_%5BcurHeight%5D%20%3D%20untrustedHash%3B%60%0A%20%20%20%20%20%20%20%20-%20%60blockMerkleRoots_%5BcurHeight%5D%20%3D%20untrustedMerkleRoot%3B%60%0A%20%20%20%20%20%20-%20Check%20that%20the%20new%20block's%20height%20is%20greater%20than%20the%20current%20one's.%20%60nearBlock.inner_lite.height%20%3E%20curHeight%60%0A%20%20%20%20%20%20-%20Check%20that%20the%20new%20block%20is%20from%20the%20same%20epoch%20as%20the%20current%20one%2C%20or%20from%20the%20next%20one.%0A%20%20%20%20%20%20-%20Check%20that%20the%20new%20block%20is%20signed%20by%20more%20than%202%2F3%20of%20the%20validators.%0A%20%20%20%20%20%20-%20If%20the%20block%20is%20from%20the%20next%20epoch%2C%20make%20sure%20that%20the%20Block%20producers%20%60next_bps%60%20are%20supplied%20and%20have%20a%20correct%20hash.%0A%20%20%20%20%20%20-%20Add%20the%20Block%20to%20the%20Light%20client%0A%20%20%20%20%20%20%20%20-%20Updates%20untrusted%20information%20to%20this%20block%20including%20%60untrustedHeight%60%2C%20%60untrustedTimestamp%60%2C%20%60untrustedHash%60%2C%20%60untrustedMerkleRoot%60%2C%20%60untrustedNextHash%60%2C%20%60untrustedSignatureSet%60%2C%20%60untrustedNextEpoch%60%0A%20%20%20%20%20%20%20%20-%20If%20%60fromNextEpoch%60%20also%20update%20the%20Block%20Producers%0A%20%20%20%20%20%20%20%20-%20Updates%20the%20%60lastSubmitter%60%20and%20%60lastValidAt%60%0A%20%20%20%20-%20Cleans%20up%20the%20selected%20block%20to%20prevent%20submitting%20the%20same%20block%20again%20%60await%20sleep(afterSubmitDelayMs)%60%0A%20%20%20%20-%20Sets%20the%20HeightGauuges%20to%20the%20correct%20block%20height%0A%20%20%20%20%20%20-%20%60clientHeightGauge.set(Number(BigInt(bridgeState.currentHeight))%60%0A%20%20%20%20%20%20-%20%60chainHeightGauge.set(Number(BigInt(lastBlock.inner_lite.height)))%60%0A%20%20%20%20-%20Sleeps%20for%20delay%20calculated%20from%20the%20maximum%20of%20the%20relayer%20days%20(10%20seconds)%20and%20differnce%20between%20the%20current%20and%20next%20block%20time%20stamps%20and%20%60await%20sleep(1000%20*%20delay)%60%0A%0A%23%23%20Light%20Client%20Functionality%0A%0A%23%23%23%20Near%20Rainbow%20Bridge%20Ethereum%20Light%20Client%20Walkthrough%0A%0AThe%20following%20is%20a%20walkthrough%20of%20how%20a%20transaction%20executed%20on%20Ethereum%20is%20propogated%20to%20NEAR's%20%5Beth2-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-client).%20See%20%5BCryptographic%20Primitives%5D(%23cryptographic-primitives)%20for%20more%20information%20on%20the%20cryptography%20used.%20and%20%5BAppendix%20B%5D(%23appendix-b-ethereum-light-client-finality-update-verify-components)%20for%20verification%20components.%0A%0A**At%20a%20high%20level%20the%20ethereum%20light%20client%20contract**%0A%0A-%20Optionally%20accepts%20client%20updates%20only%20from%20a%20trusted%20client%0A-%20Can%20pause%20functions%0A-%20Validates%20a%20sync%20committee%20exists%20for%20the%20curremt%20slot%0A-%20Validates%20sync%20committe%20has%20greater%20than%20the%20minimum%20required%20sync%20committee%20members%0A-%20Validates%202%2F3%20or%20more%20of%20the%20committe%20members%20have%20signed%20the%20blocks%0A-%20Validates%20bls%20signatures%20(i.e.%20the%20bls%20signatures%20of%20the%20sync%20comittee%20for%20the%20blocks%20propogated)%0A-%20Stores%20the%20hashes%20of%20the%20blocks%20for%20the%20past%20%60hashes_gc_threshold%60%20headers.%20Events%20that%20happen%20past%20this%20threshold%20cannot%20be%20verified%20by%20the%20client.%20It%20is%20desirable%20that%20this%20number%20is%20larger%20than%207%20days'%20worth%20of%20headers%2C%20which%20is%20roughly%2051k%20Ethereum%20blocks.%20So%20this%20number%20should%20be%2051k%20in%20production.%0A-%20Stores%20the%20Ethereum%20Network%20(e.g.%20mainnet%2C%20kiln)%0A-%20Stores%20Hashes%20of%20the%20finalized%20execution%20blocks%20mapped%20to%20their%20numbers.%0A-%20Stores%20All%20unfinalized%20execution%20blocks'%20headers%20hashes%20mapped%20to%20their%20%60HeaderInfo%60.%0A-%20Stores%20%60AccountId%60s%20mapped%20to%20their%20number%20of%20submitted%20headers.%0A-%20Stores%20Max%20number%20of%20unfinalized%20blocks%20allowed%20to%20be%20stored%20by%20one%20submitter%20account.%20This%20value%20should%20be%20at%20least%2032%20blocks%20(1%20epoch)%2C%20but%20the%20recommended%20value%20is%201024%20(32%20epochs)%0A-%20Stores%20minimum%20balance%20that%20should%20be%20attached%20to%20register%20a%20new%20submitter%20account.%0A-%20Stores%20finalized%20beacon%20header%0A-%20Stores%20finalized%20execution%20header%0A-%20Stores%20current_sync_committee%0A-%20Stores%20next_sync_committee%0A%0A%23%23%23%20Near%20Rainbow%20Bridge%20Near%20Light%20Client%20Walkthrough%0A%0AThe%20following%20is%20a%20walkthrough%20of%20how%20a%20transaction%20executed%20on%20NEAR%20is%20propogated%20to%20Ethereum's%20%5Bnearbridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge).%20See%20%5Bnearbridge%20Cryptographic%20Primitives%5D(%23nearbridge-cryptographic-primitives)%20for%20more%20information%20on%20the%20cryptography%20used.%0A%0A**NearOnEthClient%20Overview**%0A%0A_The%20following%20is%20an%20excerpt%20from%20a%20blog%20by%20near%20on%20%5Beth-near-rainbow-bridge%5D(https%3A%2F%2Fnear.org%2Fblog%2Feth-near-rainbow-bridge%2F)_%0A%0A%3E%20NearOnEthClient%20is%20an%20implementation%20of%20the%20NEAR%20light%20client%20in%20Solidity%20as%20an%20Ethereum%20contract.%20Unlike%20EthOnNearClient%20it%20does%20not%20need%20to%20verify%20every%20single%20NEAR%20header%20and%20can%20skip%20most%20of%20them%20as%20long%20as%20it%20verifies%20at%20least%20one%20header%20per%20NEAR%20epoch%2C%20which%20is%20about%2043k%20blocks%20and%20lasts%20about%20half%20a%20day.%20As%20a%20result%2C%20NearOnEthClient%20can%20memorize%20hashes%20of%20all%20submitted%20NEAR%20headers%20in%20history%2C%20so%20if%20you%20are%20making%20a%20transfer%20from%20NEAR%20to%20Ethereum%20and%20it%20gets%20interrupted%20you%20don%E2%80%99t%20need%20to%20worry%20and%20you%20can%20resume%20it%20any%20time%2C%20even%20months%20later.%20Another%20useful%20property%20of%20the%20NEAR%20light%20client%20is%20that%20every%20NEAR%20header%20contains%20a%20root%20of%20the%20merkle%20tree%20computed%20from%20all%20headers%20before%20it.%20As%20a%20result%2C%20if%20you%20have%20one%20NEAR%20header%20you%20can%20efficiently%20verify%20any%20event%20that%20happened%20in%20any%20header%20before%20it.%0A%3E%0A%3E%20Another%20useful%20property%20of%20the%20NEAR%20light%20client%20is%20that%20it%20only%20accepts%20final%20blocks%2C%20and%20final%20blocks%20cannot%20leave%20the%20canonical%20chain%20in%20NEAR.%20This%20means%20that%20NearOnEthClient%20does%20not%20need%20to%20worry%20about%20forks.%0A%3E%0A%3E%20However%2C%20unfortunately%2C%20NEAR%20uses%20%5BEd25519%5D(https%3A%2F%2Fgithub.com%2Fethereum%2FEIPs%2Fblob%2Fmaster%2FEIPS%2Feip-665.mdx)%20to%20sign%20messages%20of%20the%20validators%20who%20approve%20the%20blocks%2C%20and%20this%20signature%20is%20not%20available%20as%20an%20EVM%20precompile.%20It%20makes%20verification%20of%20all%20signatures%20of%20a%20single%20NEAR%20header%20prohibitively%20expensive.%20So%20technically%2C%20we%20cannot%20verify%20one%20NEAR%20header%20within%20one%20contract%20call%20to%20NearOnEthClient.%20Therefore%20we%20adopt%20the%20%5Boptimistic%20approach%5D(https%3A%2F%2Fmedium.com%2F%40deaneigenmann%2Foptimistic-contracts-fb75efa7ca84)%20where%20NearOnEthClient%20verifies%20everything%20in%20the%20NEAR%20header%20except%20the%20signatures.%20Then%20anyone%20can%20challenge%20a%20signature%20in%20a%20submitted%20header%20within%20a%204-hour%20challenge%20window.%20The%20challenge%20requires%20verification%20of%20a%20single%20Ed25519%20signature%20which%20would%20cost%20about%20500k%20Ethereum%20gas%20(expensive%2C%20but%20possible).%20The%20user%20submitting%20the%20NEAR%20header%20would%20have%20to%20post%20a%20bond%20in%20Ethereum%20tokens%2C%20and%20a%20successful%20challenge%20would%20burn%20half%20of%20the%20bond%20and%20return%20the%20other%20half%20to%20the%20challenger.%20The%20bond%20should%20be%20large%20enough%20to%20pay%20for%20the%20gas%20even%20if%20the%20gas%20price%20increases%20exponentially%20during%20the%204%20hours.%20For%20instance%2C%20a%2020%20ETH%20bond%20would%20cover%20gas%20price%20hikes%20up%20to%2020000%20Gwei.%20This%20optimistic%20approach%20requires%20having%20a%20watchdog%20service%20that%20monitors%20submitted%20NEAR%20headers%20and%20challenges%20any%20headers%20with%20invalid%20signatures.%20For%20added%20security%2C%20independent%20users%20can%20run%20several%20watchdog%20services.%0A%3E%0A%3E%20Once%20EIP665%20is%20accepted%2C%20Ethereum%20will%20have%20the%20Ed25519%20signature%20available%20as%20an%20EVM%20precompile.%20This%20will%20make%20watchdog%20services%20and%20the%204-hour%20challenge%20window%20unnecessary.%0A%3E%0A%3E%20At%20its%20bare%20minimum%2C%20Rainbow%20Bridge%20consists%20of%20EthOnNearClient%20and%20NearOnEthClient%20contracts%2C%20and%20three%20services%3A%20Eth2NearRelay%2C%20Near2EthRelay%2C%20and%20the%20Watchdog.%20We%20might%20argue%20that%20this%20already%20constitutes%20a%20bridge%20since%20we%20have%20established%20a%20cryptographic%20link%20between%20two%20blockchains%2C%20but%20practically%20speaking%20it%20requires%20a%20large%20portion%20of%20additional%20code%20to%20make%20application%20developers%20even%20consider%20using%20the%20Rainbow%20Bridge%20for%20their%20applications.%0A%0A_The%20following%20information%20on%20sending%20assets%20from%20NEAR%20back%20to%20Ethereum%20is%20an%20excerpt%20from%20%5Bhttps%3A%2F%2Fnear.org%2Fbridge%2F%5D(https%3A%2F%2Fnear.org%2Fbridge%2F)._%0A%0A%3E%20Sending%20assets%20from%20NEAR%20back%20to%20Ethereum%20currently%20takes%20a%20maximum%20of%20sixteen%20hours%20(due%20to%20Ethereum%20finality%20times)%20and%20costs%20around%20%2460%20(due%20to%20ETH%20gas%20costs%20and%20at%20current%20ETH%20price).%20These%20costs%20and%20speeds%20will%20improve%20in%20the%20near%20future.%0A%0A%23%23%20Token%20Lockers%0A%0A%23%23%23%20Token%20Transfer%20Process%20Flow%0A%0AThe%20%5BNEAR%20Rainbow%20Bridge%5D(https%3A%2F%2Fnear.org%2Fbridge%2F)%20uses%20ERC-20%20connectors%20which%20are%20developed%20in%20%5Brainbow-token-connector%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector)%20and%20%5Brainbow-bridge-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge-client).%20Also%20see%20%5Beth2near-fun-transfer.md%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fdocs%2Fworkflows%2Feth2near-fun-transfer.mdx).%0A%0AFollowing%20is%20an%20overview%20of%20timing%20and%20anticipated%20costs%0A%0A-%20Once%20on%20NEAR%2C%20transactions%20will%20confirm%20in%201-2%20seconds%20and%20cost%20well%20under%20%241%20in%20most%20cases.%0A-%20Since%20the%20Bridge%20requires%20transactions%20on%20Ethereum%20for%20NEAR%20and%20Ethereum%2C%20the%20following%20costs%20are%20expected.%0A-%20Sending%20assets%20from%20Ethereum%20to%20NEAR%20takes%20about%20six%20minutes%20(20%20blocks)%20and%20for%20ERC-20%20costs%20about%20%2410%20on%20average.%0A-%20Sending%20assets%20from%20NEAR%20back%20to%20Ethereum%20currently%20takes%20a%20maximum%20of%20sixteen%20hours%20(due%20to%20Ethereum%20finality%20times)%20and%20costs%20around%20%2460%20(due%20to%20ETH%20gas%20costs%20and%20at%20current%20ETH%20price).%20These%20costs%20and%20speeds%20will%20improve%20in%20the%20near%20future.%0A%0A_Note%3A%20This%20uses%20Ethreum%20%5BERC20%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-20)%20and%20NEAR%20%5BNEP-141%5D(https%3A%2F%2Fnomicon.io%2FStandards%2FTokens%2FFungibleToken%2FCore)%20initally%20developed%20for%20%5BNEP-21%5D(https%3A%2F%2Fgithub.com%2Fnear%2FNEPs%2Fpull%2F21)_%0A%0A**%5BGeneric%20ERC-20%2FNEP-141%20connector%20for%20Rainbow%20Bridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2FREADME.mdx)**%0A%0A**Specification**%0A%0A**Ethereum's%20side**%0A%0A%60%60%60solidity%0Acontract%20ERC20Locker%20%7B%0A%20%20constructor(bytes%20memory%20nearTokenFactory%2C%20INearProver%20prover)%20public%3B%0A%20%20function%20lockToken(IERC20%20token%2C%20uint256%20amount%2C%20string%20memory%20accountId)%20public%3B%0A%20%20function%20unlockToken(bytes%20memory%20proofData%2C%20uint64%20proofBlockHeader)%20public%3B%0A%7D%0A%60%60%60%0A%0A**NEAR's%20side**%0A%0A%60%60%60rust%0Astruct%20BridgeTokenFactory%20%7B%0A%20%20%20%20%2F%2F%2F%20The%20account%20of%20the%20prover%20that%20we%20can%20use%20to%20prove%0A%20%20%20%20pub%20prover_account%3A%20AccountId%2C%0A%20%20%20%20%2F%2F%2F%20Address%20of%20the%20Ethereum%20locker%20contract.%0A%20%20%20%20pub%20locker_address%3A%20%5Bu8%3B%2020%5D%2C%0A%20%20%20%20%2F%2F%2F%20Hashes%20of%20the%20events%20that%20were%20already%20used.%0A%20%20%20%20pub%20used_events%3A%20UnorderedSet%3CVec%3Cu8%3E%3E%2C%0A%20%20%20%20%2F%2F%2F%20Mapping%20from%20Ethereum%20tokens%20to%20NEAR%20tokens.%0A%20%20%20%20pub%20tokens%3A%20UnorderedMap%3CEvmAddress%2C%20AccountId%3E%3B%0A%7D%0A%0Aimpl%20BridgeTokenFactory%20%7B%0A%20%20%20%20%2F%2F%2F%20Initializes%20the%20contract.%0A%20%20%20%20%2F%2F%2F%20%60prover_account%60%3A%20NEAR%20account%20of%20the%20Near%20Prover%20contract%3B%0A%20%20%20%20%2F%2F%2F%20%60locker_address%60%3A%20Ethereum%20address%20of%20the%20locker%20contract%2C%20in%20hex.%0A%20%20%20%20%23%5Binit%5D%0A%20%20%20%20pub%20fn%20new(prover_account%3A%20AccountId%2C%20locker_address%3A%20String)%20-%3E%20Self%3B%0A%0A%20%20%20%20%2F%2F%2F%20Relays%20the%20lock%20event%20from%20Ethereum.%0A%20%20%20%20%2F%2F%2F%20Uses%20prover%20to%20validate%20that%20proof%20is%20correct%20and%20relies%20on%20a%20canonical%20Ethereum%20chain.%0A%20%20%20%20%2F%2F%2F%20Send%20%60mint%60%20action%20to%20the%20token%20that%20is%20specified%20in%20the%20proof.%0A%20%20%20%20%23%5Bpayable%5D%0A%20%20%20%20pub%20fn%20deposit(%26mut%20self%2C%20proof%3A%20Proof)%3B%0A%0A%20%20%20%20%2F%2F%2F%20A%20callback%20from%20BridgeToken%20contract%20deployed%20under%20this%20factory.%0A%20%20%20%20%2F%2F%2F%20Is%20called%20after%20tokens%20are%20burned%20there%20to%20create%20an%20receipt%20result%20%60(amount%2C%20token_address%2C%20recipient_address)%60%20for%20Ethereum%20to%20unlock%20the%20token.%0A%20%20%20%20pub%20fn%20finish_withdraw(token_account%3A%20AccountId%2C%20amount%3A%20Balance%2C%20recipient%3A%20EvmAddress)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Transfers%20given%20NEP-21%20token%20from%20%60predecessor_id%60%20to%20factory%20to%20lock.%0A%20%20%20%20%2F%2F%2F%20On%20success%2C%20leaves%20a%20receipt%20result%20%60(amount%2C%20token_address%2C%20recipient_address)%60.%0A%20%20%20%20%23%5Bpayable%5D%0A%20%20%20%20pub%20fn%20lock(%26mut%20self%2C%20token%3A%20AccountId%2C%20amount%3A%20Balance%2C%20recipient%3A%20String)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Relays%20the%20unlock%20event%20from%20Ethereum.%0A%20%20%20%20%2F%2F%2F%20Uses%20prover%20to%20validate%20that%20proof%20is%20correct%20and%20relies%20on%20a%20canonical%20Ethereum%20chain.%0A%20%20%20%20%2F%2F%2F%20Uses%20NEP-21%20%60transfer%60%20action%20to%20move%20funds%20to%20%60recipient%60%20account.%0A%20%20%20%20%23%5Bpayable%5D%0A%20%20%20%20pub%20fn%20unlock(%26mut%20self%2C%20proof%3A%20Proof)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Deploys%20BridgeToken%20contract%20for%20the%20given%20EVM%20address%20in%20hex%20code.%0A%20%20%20%20%2F%2F%2F%20The%20name%20of%20new%20NEP21%20compatible%20contract%20will%20be%20%3Chex(evm_address)%3E.%3Ccurrent_id%3E.%0A%20%20%20%20%2F%2F%2F%20Expects%20~35N%20attached%20to%20cover%20storage%20for%20BridgeToken.%0A%20%20%20%20%23%5Bpayable%5D%0A%20%20%20%20pub%20fn%20deploy_bridge_token(address%3A%20String)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Checks%20if%20Bridge%20Token%20has%20been%20successfully%20deployed%20with%20%60deploy_bridge_token%60.%0A%20%20%20%20%2F%2F%2F%20On%20success%2C%20returns%20the%20name%20of%20NEP21%20contract%20associated%20with%20given%20address%20(%3Chex(evm_address)%3E.%3Ccurrent_id%3E).%0A%20%20%20%20%2F%2F%2F%20Otherwise%2C%20returns%20%22token%20do%20not%20exists%22%20error.%0A%20%20%20%20pub%20fn%20get_bridge_token_account_id(%26self%2C%20address%3A%20String)%20-%3E%20AccountId%3B%0A%7D%0A%0Astruct%20BridgeToken%20%7B%0A%20%20%20controller%3A%20AccountId%2C%0A%20%20%20token%3A%20Token%2C%20%2F%2F%20uses%20https%3A%2F%2Fgithub.com%2Filblackdragon%2Fbalancer-near%2Ftree%2Fmaster%2Fnear-lib-rs%0A%7D%0A%0Aimpl%20BridgeToken%20%7B%0A%20%20%20%20%2F%2F%2F%20Setup%20the%20Token%20contract%20with%20given%20factory%2Fcontroller.%0A%20%20%20%20pub%20fn%20new(controller%3A%20AccountId)%20-%3E%20Self%3B%0A%0A%20%20%20%20%2F%2F%2F%20Mint%20tokens%20to%20given%20user.%20Only%20can%20be%20called%20by%20the%20controller.%0A%20%20%20%20pub%20fn%20mint(%26mut%20self%2C%20account_id%3A%20AccountId%2C%20amount%3A%20Balance)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Withdraw%20tokens%20from%20this%20contract.%0A%20%20%20%20%2F%2F%2F%20Burns%20sender's%20tokens%20and%20calls%20controller%20to%20create%20event%20for%20relaying.%0A%20%20%20%20pub%20fn%20withdraw(%26mut%20self%2C%20amount%3A%20U128%2C%20recipient%3A%20String)%20-%3E%20Promise%3B%0A%7D%0A%0Aimpl%20FungibleToken%20for%20BridgeToken%20%7B%0A%20%20%20%2F%2F%20see%20example%20https%3A%2F%2Fgithub.com%2Filblackdragon%2Fbalancer-near%2Fblob%2Fmaster%2Fbalancer-pool%2Fsrc%2Flib.rs%23L329%0A%7D%0A%60%60%60%0A%0A**Setup%20new%20ERC-20%20on%20NEAR**%0A%0ATo%20setup%20token%20contract%20on%20NEAR%20side%2C%20anyone%20can%20call%20%60%3Cbridge_token_factory%3E.deploy_bridge_token(%3Cerc20%3E)%60%20where%20%60%3Cerc20%3E%60%20is%20the%20address%20of%20the%20token.%0AWith%20this%20call%20must%20attach%20the%20amount%20of%20%24NEAR%20to%20cover%20storage%20for%20(at%20least%2030%20%24NEAR%20currently).%0A%0AThis%20will%20create%20%60%3C%3Chex(erc20)%3E.%3Cbridge_token_factory%3E%3E%60%20NEP141-compatible%20contract.%0A%0A**Usage%20flow%20Ethereum%20-%3E%20NEAR**%0A%0A1.%20User%20sends%20%60%3Cerc20%3E.approve(%3Cerc20locker%3E%2C%20%3Camount%3E)%60%20Ethereum%20transaction.%0A2.%20User%20sends%20%60%3Cerc20locker%3E.lock(%3Cerc20%3E%2C%20%3Camount%3E%2C%20%3Cdestination%3E)%60%20Ethereum%20transaction.%20This%20transaction%20will%20create%20%60Locked%60%20event.%0A3.%20Relayers%20will%20be%20sending%20Ethereum%20blocks%20to%20the%20%60EthClient%60%20on%20NEAR%20side.%0A4.%20After%20sufficient%20number%20of%20confirmations%20on%20top%20of%20the%20mined%20Ethereum%20block%20that%20contain%20the%20%60lock%60%20transaction%2C%20user%20or%20relayer%20can%20call%20%60BridgeTokenFactory.deposit(proof)%60.%20Proof%20is%20the%20extracted%20information%20from%20the%20event%20on%20Ethereum%20side.%0A5.%20%60BridgeTokenFactory.deposit%60%20function%20will%20call%20%60EthProver%60%20and%20verify%20that%20proof%20is%20correct%20and%20relies%20on%20a%20block%20with%20sufficient%20number%20of%20confirmations.%0A6.%20%60EthProver%60%20will%20return%20callback%20to%20%60BridgeTokenFactory%60%20confirming%20that%20proof%20is%20correct.%0A7.%20%60BridgeTokenFactory%60%20will%20call%20%60%3C%3Chex(erc20)%3E.%3Cbridge_token_factory%3E%3E.mint(%3Cnear_account_id%3E%2C%20%3Camount%3E)%60.%0A8.%20User%20can%20use%20%60%3C%3Chex(erc20)%3E.%3Cbridge_token_factory%3E%3E%60%20token%20in%20other%20applications%20now%20on%20NEAR.%0A%0A**Usage%20flow%20NEAR%20-%3E%20Ethereum**%0A%0A1.%20%60token-locker%60%20locks%20NEP141%20tokens%20on%20NEAR%20side.%0A%0ATo%20deposit%20funds%20into%20the%20locker%2C%20call%20%60ft_transfer_call%60%20where%20%60msg%60%20contains%20Ethereum%20address%20the%20funds%20should%20arrive%20to.%0AThis%20will%20emit%20%60%3Ctoken%3A%20String%2C%20amount%3A%20u128%2C%20recipient%20address%3A%20EthAddress%3E%60%20(which%20arrives%20to%20%60deposit%60%20on%20Ethereum%20side).%0A%0AAccepts%20%60Unlock(token%3A%20String%2C%20sender_id%3A%20EthAddress%2C%20amount%3A%20u256%2C%20recipient%3A%20String)%60%20event%20from%20Ethereum%20side%20with%20a%20proof%2C%20verifies%20its%20correctness.%0AIf%20%60recipient%60%20contains%20'%3A'%20will%20split%20it%20into%20%60%3Crecipient%2C%20msg%3E%60%20and%20do%20%60ft_transfer_call(recipient%2C%20amount%2C%20None%2C%20msg)%60.%20Otherwise%20will%20%60ft_transfer%60%20to%20%60recipient%60.%0A%0ATo%20get%20metadata%20of%20token%20to%20Ethereum%2C%20need%20to%20call%20%60log_metadata%60%2C%20which%20will%20create%20a%20result%20%60%3Ctoken%3A%20String%2C%20name%3A%20String%2C%20symbol%3A%20String%2C%20decimals%3A%20u8%2C%20blockHeight%3A%20u64%3E%60.%0A%0A2.%20%60erc20-bridge-token%60%20-%20%60BridgeTokenFactory%60%20and%20%60BridgeToken%60%20Ethereum%20contracts.%0A%0A%60BridgeTokenFactory%60%20creates%20new%20%60BridgeToken%60%20that%20correspond%20to%20specific%20token%20account%20id%20on%20NEAR%20side.%0A%0A%60BridgeTokenFactory%60%20receives%20%60deposit%60%20with%20proof%20from%20NEAR%2C%20verify%20them%20and%20mint%20appropriate%20amounts%20on%20recipient%20addresses.%0A%0ACalling%20%60withdraw%60%20will%20burn%20tokens%20of%20this%20user%20and%20will%20generate%20event%20%60%3Ctoken%3A%20String%2C%20sender_id%3A%20EthAddress%2C%20amount%3A%20u256%2C%20recipient%3A%20String%3E%60%20that%20can%20be%20relayed%20to%20%60token-factory%60.%0A%0A**Caveats**%0A%0AGenerally%2C%20this%20connector%20allows%20any%20account%20to%20call%20%60ft_transfer_call%60%20opening%20for%20potential%20malicious%20tokens%20to%20be%20bridged%20to%20Ethereum.%0AThe%20expectation%20here%20is%20that%20on%20Ethereum%20side%2C%20the%20token%20lists%20will%20handle%20this%2C%20as%20it's%20the%20same%20attack%20model%20as%20malicious%20tokens%20on%20Uniswap%20and%20other%20DEXs.%0A%0AUsing%20Ethereum%20%60BridgeTokenFactory%60%20contract%20can%20always%20resolve%20Ethereum%20address%20of%20a%20contract%20back%20to%20NEAR%20one%20to%20check%20that%20it%20is%20indeed%20bridging%20token%20from%20NEAR%20and%20is%20created%20by%20this%20factory.%0A%0A**Testing**%0A%0ATesting%20Ethereum%20side%0A%0A%60%60%60%0Acd%20erc20-connector%0Ayarn%0Ayarn%20run%20test%0A%60%60%60%0A%0ATesting%20NEAR%20side%0A%0A%60%60%60%0Amake%20res%2Fbridge_token_factory.wasm%0Acargo%20test%20--all%0A%60%60%60%0A%0A%23%23%20Multi-chain%20support%0A%0A%23%23%20Economics%0A%0A%23%23%20References%0A%0A-%20Ethereum%202.0%20Specifications%0A%20%20-%20%5BBeacon%20Chain%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fmaster%2Fspecs%2Fphase0%2Fbeacon-chain.mdx)%0A%20%20-%20%5BExtended%20light%20client%20protocol%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fextended_light_client_protocol)%0A%20%20-%20%5BAltair%20Light%20Client%20--%20Light%20Client%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%0A%20%20-%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%0A%20%20-%20%5BBeacon%20Chain%20Fork%20Choice%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Ffork-choice.mdx)%0A%0A-%20Proving%20Mechanisms%0A%20%20-%20%5BLighthouse%20Documentation%5D(https%3A%2F%2Flighthouse-book.sigmaprime.io%2F)%3A%20ETH%202.0%20Consensus%20Client%20Lighthouse%20documentation%0A%20%20-%20%5BLighthouse%20Github%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse)%3A%20ETH%202.0%20Consensus%20Client%20Lighthouse%20Github%0A%20%20-%20%5BLighthouse%3A%20Blog%5D(https%3A%2F%2Flighthouse-blog.sigmaprime.io%2F)%3A%20ETH%202.0%20Consensus%20Client%20Lighthouse%20Blog%0A%20%20-%20%5Beth2near-block-relay-rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs)%0A%20%20-%20%5Bnearbridge%20contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge)%0A%20%20-%20%5Bnearprover%20contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearprover)%0A-%20Prysm%20Light%20Client%20Work%0A%20%20-%20%5BPrysm%3A%20Light-client%20(WORK%20IN%20PROGRESS)%5D(https%3A%2F%2Fgithub.com%2Fjinfwhuang%2Fprysm%2Fpull%2F5)%0A%20%20-%20%5BPrysm%3A%20Light-client%20Client%20WIP%5D(https%3A%2F%2Fgithub.com%2Fjinfwhuang%2Fprysm%2Ftree%2Fjin-light%2Fcmd%2Flight-client%23light-client-client)%3A%20An%20independent%20light%20client%20client%0A%20%20-%20%5BPrysm%3A%20light-client%20server%20PR%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fpull%2F10034)%3A%20a%20feature%20PR%20that%20implements%20the%20basic%20production%20level%20changes%20to%20Prysm%20to%20comply%20as%20a%20light-client%20server%20to%20begin%20serving%20light%20client%20requests%0A-%20Harmony%20Merkle%20Mount%20Range%0A%20%20-%20Harmony%20%5BMMR%20PR%20Review%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F3872)%20and%20%5Blatest%20PR%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198%2Ffiles)%20uses%20Merkle%20Mountain%20Ranges%20to%20facilitate%20light%20client%20development%20against%20Harmony's%20sharded%20Proof%20of%20Stake%20Chain%0A%0A%23%23%20Appendices%0A%0A%23%23%23%20Appendix%20A%20-%20Ethereum%20to%20NEAR%20block%20propagation%20components%0A%0A-%20%5BEthClientContract%20Wrapper%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Feth_client_contract.rs)%3A%20supports%20%5Beth2-client%20contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%20functions%20%60impl%20EthClientContractTrait%20for%20EthClientContract%60%0A%20%20-%20%60fn%20get_last_submitted_slot(%26self)%20-%3E%20u64%60%0A%20%20-%20%60fn%20is_known_block(%26self%2C%20execution_block_hash%3A%20%26H256)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20send_light_client_update(%26mut%20self%2C%20light_client_update%3A%20LightClientUpdate%2C)%20-%3E%20Result%3CFinalExecutionOutcomeView%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_finalized_beacon_block_hash(%26self)%20-%3E%20Result%3CH256%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_finalized_beacon_block_slot(%26self)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20send_headers(%26mut%20self%2C%20headers%3A%20%26%5BBlockHeader%5D%2C%20end_slot%3A%20u64%2C)%20-%3E%20Result%3CFinalExecutionOutcomeView%2C%20Box%3Cdyn%20std%3A%3Aerror%3A%3AError%3E%3E%60%0A%20%20-%20%60fn%20get_min_deposit(%26self)%20-%3E%20Result%3CBalance%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20register_submitter(%26self)%20-%3E%20Result%3CFinalExecutionOutcomeView%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20is_submitter_registered(%26self%2Caccount_id%3A%20Option%3CAccountId%3E%2C)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_light_client_state(%26self)%20-%3E%20Result%3CLightClientState%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_num_of_submitted_blocks_by_account(%26self)%20-%3E%20Result%3Cu32%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_max_submitted_blocks_by_account(%26self)%20-%3E%20Result%3Cu32%2C%20Box%3Cdyn%20Error%3E%3E%60%0A-%20%5Beth2-client%20contract%20storage%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%3A%0A%20%20-%20High%20level%20storage%20overview%0A%20%20-%20provides%20the%20%60Eth2Client%60%20public%20data%20stucture%0A%0A%20%20%20%20%60%60%60%0A%20%20%20%20pub%20struct%20Eth2Client%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20If%20set%2C%20only%20light%20client%20updates%20by%20the%20trusted%20signer%20will%20be%20accepted%0A%20%20%20%20%20%20%20%20trusted_signer%3A%20Option%3CAccountId%3E%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Mask%20determining%20all%20paused%20functions%0A%20%20%20%20%20%20%20%20paused%3A%20Mask%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Whether%20the%20client%20validates%20the%20updates.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Should%20only%20be%20set%20to%20%60false%60%20for%20debugging%2C%20testing%2C%20and%20diagnostic%20purposes%0A%20%20%20%20%20%20%20%20validate_updates%3A%20bool%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Whether%20the%20client%20verifies%20BLS%20signatures.%0A%20%20%20%20%20%20%20%20verify_bls_signatures%3A%20bool%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20We%20store%20the%20hashes%20of%20the%20blocks%20for%20the%20past%20%60hashes_gc_threshold%60%20headers.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Events%20that%20happen%20past%20this%20threshold%20cannot%20be%20verified%20by%20the%20client.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20It%20is%20desirable%20that%20this%20number%20is%20larger%20than%207%20days'%20worth%20of%20headers%2C%20which%20is%20roughly%0A%20%20%20%20%20%20%20%20%2F%2F%2F%2051k%20Ethereum%20blocks.%20So%20this%20number%20should%20be%2051k%20in%20production.%0A%20%20%20%20%20%20%20%20hashes_gc_threshold%3A%20u64%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Network.%20e.g.%20mainnet%2C%20kiln%0A%20%20%20%20%20%20%20%20network%3A%20Network%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Hashes%20of%20the%20finalized%20execution%20blocks%20mapped%20to%20their%20numbers.%20Stores%20up%20to%20%60hashes_gc_threshold%60%20entries.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Execution%20block%20number%20-%3E%20execution%20block%20hash%0A%20%20%20%20%20%20%20%20finalized_execution_blocks%3A%20LookupMap%3Cu64%2C%20H256%3E%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20All%20unfinalized%20execution%20blocks'%20headers%20hashes%20mapped%20to%20their%20%60HeaderInfo%60.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Execution%20block%20hash%20-%3E%20ExecutionHeaderInfo%20object%0A%20%20%20%20%20%20%20%20unfinalized_headers%3A%20UnorderedMap%3CH256%2C%20ExecutionHeaderInfo%3E%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20%60AccountId%60s%20mapped%20to%20their%20number%20of%20submitted%20headers.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Submitter%20account%20-%3E%20Num%20of%20submitted%20headers%0A%20%20%20%20%20%20%20%20submitters%3A%20LookupMap%3CAccountId%2C%20u32%3E%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Max%20number%20of%20unfinalized%20blocks%20allowed%20to%20be%20stored%20by%20one%20submitter%20account%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20This%20value%20should%20be%20at%20least%2032%20blocks%20(1%20epoch)%2C%20but%20the%20recommended%20value%20is%201024%20(32%20epochs)%0A%20%20%20%20%20%20%20%20max_submitted_blocks_by_account%3A%20u32%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20The%20minimum%20balance%20that%20should%20be%20attached%20to%20register%20a%20new%20submitter%20account%0A%20%20%20%20%20%20%20%20min_storage_balance_for_submitter%3A%20Balance%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Light%20client%20state%0A%20%20%20%20%20%20%20%20finalized_beacon_header%3A%20ExtendedBeaconBlockHeader%2C%0A%20%20%20%20%20%20%20%20finalized_execution_header%3A%20LazyOption%3CExecutionHeaderInfo%3E%2C%0A%20%20%20%20%20%20%20%20current_sync_committee%3A%20LazyOption%3CSyncCommittee%3E%2C%0A%20%20%20%20%20%20%20%20next_sync_committee%3A%20LazyOption%3CSyncCommittee%3E%2C%0A%20%20%20%20%7D%0A%20%20%20%20%60%60%60%0A%0A-%20%5Beth2-client%20dependencies%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2FCargo.toml)%20relys%20heavily%20on%20the%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20codebase%20for%20it's%20consensus%20and%20cryptogrphic%20primitives.%20See%20%5BCryptographic%20Primitives%5D(%23cryptographic-primitives)%20for%20more%20information.%0A%20%20-%20%60ethereum-types%20%3D%20%220.9.2%22%60%0A%20%20-%20%60eth-types%20%3D%20%20%7B%20path%20%3D%20%22..%2Feth-types%22%20%7D%60%0A%20%20-%20%60eth2-utility%20%3D%20%20%7B%20path%20%3D%20%22..%2Feth2-utility%22%20%7D%60%0A%20%20-%20%60tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60merkle_proof%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60bls%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20optional%20%3D%20true%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%2C%20default-features%20%3D%20false%2C%20features%20%3D%20%5B%22milagro%22%5D%7D%60%0A%20%20-%20%60admin-controlled%20%3D%20%20%7B%20path%20%3D%20%22..%2Fadmin-controlled%22%20%7D%60%0A%20%20-%20%60near-sdk%20%3D%20%224.0.0%22%60%0A%20%20-%20%60borsh%20%3D%20%220.9.3%22%60%0A%20%20-%20%60bitvec%20%3D%20%221.0.0%22%60%0A%0A-%20%5Beth2-client%20contract%20functions%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%3A%20provides%20the%20following%20functions%20in%20%60impl%20Eth2Client%60%0A%20%20-%20%60fn%20validate_light_client_update(%26self%2C%20update%3A%20%26LightClientUpdate)%60%0A%20%20-%20%60fn%20verify_finality_branch(%26self%2C%20update%3A%20%26LightClientUpdate%2C%20finalized_period%3A%20u64)%60%0A%20%20-%20%60fn%20verify_bls_signatures(%26self%2C%20update%3A%20%26LightClientUpdate%2C%20sync_committee_bits%3A%20BitVec%3Cu8%3E%2C%20finalized_period%3A%20u64%2C)%60%0A%20%20-%20%60fn%20update_finalized_header(%26mut%20self%2C%20finalized_header%3A%20ExtendedBeaconBlockHeader)%60%0A%20%20-%20%60fn%20commit_light_client_update(%26mut%20self%2C%20update%3A%20LightClientUpdate)%60%0A%20%20-%20%60fn%20gc_finalized_execution_blocks(%26mut%20self%2C%20mut%20header_number%3A%20u64)%60%0A%20%20-%20%60fn%20update_submitter(%26mut%20self%2C%20submitter%3A%20%26AccountId%2C%20value%3A%20i64)%60%0A%20%20-%20%60fn%20is_light_client_update_allowed(%26self)%60%0A-%20%5BEth2NearRelay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L84)%3A%20has%20the%20following%20public%20structure%0A%0A%20%20%60%60%60%0A%20%20pub%20struct%20Eth2NearRelay%20%7B%0A%20%20%20%20%20%20beacon_rpc_client%3A%20BeaconRPCClient%2C%0A%20%20%20%20%20%20eth1_rpc_client%3A%20Eth1RPCClient%2C%0A%20%20%20%20%20%20near_rpc_client%3A%20NearRPCClient%2C%0A%20%20%20%20%20%20eth_client_contract%3A%20Box%3Cdyn%20EthClientContractTrait%3E%2C%0A%20%20%20%20%20%20headers_batch_size%3A%20u64%2C%0A%20%20%20%20%20%20ethereum_network%3A%20String%2C%0A%20%20%20%20%20%20interval_between_light_client_updates_submission_in_epochs%3A%20u64%2C%0A%20%20%20%20%20%20max_blocks_for_finalization%3A%20u64%2C%0A%20%20%20%20%20%20near_network_name%3A%20String%2C%0A%20%20%20%20%20%20last_slot_searcher%3A%20LastSlotSearcher%2C%0A%20%20%20%20%20%20terminate%3A%20bool%2C%0A%20%20%20%20%20%20submit_only_finalized_blocks%3A%20bool%2C%0A%20%20%20%20%20%20next_light_client_update%3A%20Option%3CLightClientUpdate%3E%2C%0A%20%20%20%20%20%20sleep_time_on_sync_secs%3A%20u64%2C%0A%20%20%20%20%20%20sleep_time_after_submission_secs%3A%20u64%2C%0A%20%20%20%20%20%20max_submitted_blocks_by_account%3A%20u32%2C%0A%20%20%7D%0A%20%20%60%60%60%0A%0A-%20%5BEth2NearRelay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L103)%3A%20Implements%20the%20following%20functions%0A%20%20-%20%60fn%20get_max_slot_for_submission(%26self)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_last_eth2_slot_on_near(%26mut%20self%2C%20max_slot%3A%20u64)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_last_finalized_slot_on_near(%26self)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_last_finalized_slot_on_eth(%26self)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20**%60pub%20fn%20run(%26mut%20self%2C%20max_iterations%3A%20Option%3Cu64%3E)%60**%0A%20%20-%20%60fn%20wait_for_synchronization(%26self)%20-%3E%20Result%3C()%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_light_client_update_from_file(config%3A%20%26Config%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C)%20-%3E%20Result%3COption%3CLightClientUpdate%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20set_terminate(%26mut%20self%2C%20iter_id%3A%20u64%2C%20max_iterations%3A%20Option%3Cu64%3E)%60%0A%20%20-%20%60fn%20get_execution_blocks_between(%26self%2C%20start_slot%3A%20u64%2C%20last_eth2_slot_on_eth_chain%3A%20u64%2C)%20-%3E%20Result%3C(Vec%3CBlockHeader%3E%2C%20u64)%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20submit_execution_blocks(%26mut%20self%2C%20headers%3A%20Vec%3CBlockHeader%3E%2C%20current_slot%3A%20u64%2Clast_eth2_slot_on_near%3A%20%26mut%20u64%2C)%60%0A%20%20-%20%60fn%20verify_bls_signature_for_finality_update(%26mut%20self%2C%20light_client_update%3A%20%26LightClientUpdate%2C)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_execution_block_by_slot(%26self%2C%20slot%3A%20u64)%20-%3E%20Result%3CBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%0A-%20%5BEth2NearRelay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L461)%3A%20has%20a%20second%20implementation%20of%20functions%20for%20submitting%20light%20client%20updates%0A%20%20-%20%60fn%20is_enough_blocks_for_light_client_update(%26self%2C%20last_submitted_slot%3A%20u64%2Clast_finalized_slot_on_near%3A%20u64%2C%20last_finalized_slot_on_eth%3A%20u64%2C)%20-%3E%20bool%60%0A%20%20-%20%60fn%20is_shot_run_mode(%26self)%20-%3E%20bool%60%0A%20%20-%20%60fn%20send_light_client_updates_with_checks(%26mut%20self%2C%20last_submitted_slot%3A%20u64)%20-%3E%20bool%60%0A%20%20-%20%60fn%20send_light_client_updates(%26mut%20self%2C%20last_submitted_slot%3A%20u64%2C%20last_finalized_slot_on_near%3A%20u64%2C%20last_finalized_slot_on_eth%3A%20u64%2C)%60%0A%20%20-%20%60fn%20send_light_client_update_from_file(%26mut%20self%2C%20last_submitted_slot%3A%20u64)%60%0A%20%20-%20%60fn%20send_regular_light_client_update(%26mut%20self%2C%20last_finalized_slot_on_eth%3A%20u64%2Clast_finalized_slot_on_near%3A%20u64%2C)%60%0A%20%20-%20%60fn%20get_attested_slot(%26mut%20self%2C%20last_finalized_slot_on_near%3A%20u64%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20send_hand_made_light_client_update(%26mut%20self%2C%20last_finalized_slot_on_near%3A%20u64)%60%0A%20%20-%20%60fn%20send_specific_light_client_update(%26mut%20self%2C%20light_client_update%3A%20LightClientUpdate)%60%0A%0A-%20%5Beth2-contract-init%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2-contract-init)%20includes%20(but%20not%20limited%20to)%20the%20following%20additional%20components%0A%20%20-%20%5Binit_contract.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2-contract-init%2Fsrc%2Finit_contract.rs)%3A%20Verifies%20light%20client%20snapshot%20and%20initializes%20the%20Ethereum%20Light%20Contract%20on%20Near.%0A%20%20%20%20-%20%60pub%20fn%20verify_light_client_snapshot(block_root%3A%20String%2C%20light_client_snapshot%3A%20%26LightClientSnapshotWithProof%2C)%20-%3E%20bool%60%3A%20Verifies%20the%20light%20client%20by%20checking%20the%20snapshot%20format%20getting%20the%20current%20consensus%20branch%20and%20verifying%20it%20via%20a%20merkle%20proof.%0A%20%20%20%20-%20%60pub%20fn%20init_contract(config%3A%20%26Config%2C%20eth_client_contract%3A%20%26mut%20EthClientContract%2C%20mut%20init_block_root%3A%20String%2C)%20-%3E%20Result%3C()%2C%20Box%3Cdyn%20std%3A%3Aerror%3A%3AError%3E%3E%60%3A%20Initializes%20the%20Ethereum%20Light%20Client%20Contract%20on%20Near.%0A-%20%5Beth_rpc_client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth_rpc_client)%20includes%20(but%20not%20limited%20to)%20the%20following%20additional%20components%0A%20%20-%20%5Beth1_rpc_client.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth1_rpc_client.rs)%3A%20Is%20used%20to%20get%20block%20headers%20and%20check%20sync%20status.%20It%20has%20the%20following%20functions%0A%20%20%20%20-%20%60pub%20fn%20new(endpoint_url%3A%20%26str)%20-%3E%20Self%60%0A%20%20%20%20-%20%60pub%20fn%20get_block_header_by_number(%26self%2C%20number%3A%20u64)%20-%3E%20Result%3CBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20is_syncing(%26self)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%5Bexecution_block_proof.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fexecution_block_proof.rs)%3A%20%60ExecutionBlockProof%60%20contains%20a%20%60block_hash%60%20(execution%20block)%20and%20a%20proof%20of%20its%20inclusion%20in%20the%20%60BeaconBlockBody%60%20tree%20hash.%20The%20%60block_hash%60%20is%20the%2012th%20field%20in%20execution_payload%2C%20which%20is%20the%209th%20field%20in%20%60BeaconBlockBody%60.%20The%20first%204%20elements%20in%20proof%20correspondent%20to%20the%20proof%20of%20inclusion%20of%20%60block_hash%60%20in%20Merkle%20tree%20built%20for%20%60ExecutionPayload%60.%20The%20last%204%20elements%20of%20the%20proof%20of%20%60ExecutionPayload%60%20in%20the%20Merkle%20tree%20are%20built%20on%20high-level%20%60BeaconBlockBody%60%20fields.%20The%20proof%20starts%20from%20the%20leaf.%20It%20has%20the%20following%20structure%20and%20functions%0A%20%20%20%20-%20%60pub%20struct%20ExecutionBlockProof%20%7Bblock_hash%3A%20H256%2C%20proof%3A%20%5BH256%3B%20Self%3A%3APROOF_SIZE%5D%2C%7D%60%0A%20%20%20%20-%20%60pub%20fn%20construct_from_raw_data(block_hash%3A%20%26H256%2C%20proof%3A%20%26%5BH256%3B%20Self%3A%3APROOF_SIZE%5D)%20-%3E%20Self%60%0A%20%20%20%20-%20%60pub%20fn%20construct_from_beacon_block_body(beacon_block_body%3A%20%26BeaconBlockBody%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3CSelf%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_proof(%26self)%20-%3E%20%5BH256%3B%20Self%3A%3APROOF_SIZE%5D%60%0A%20%20%20%20-%20%60pub%20fn%20get_execution_block_hash(%26self)%20-%3E%20H256%60%0A%20%20%20%20-%20%60pub%20fn%20verify_proof_for_hash(%26self%2C%20beacon_block_body_hash%3A%20%26H256%2C)%20-%3E%20Result%3Cbool%2C%20IncorrectBranchLength%3E%60%0A%20%20%20%20-%20%60fn%20merkle_root_from_branch(leaf%3A%20H256%2C%20branch%3A%20%26%5BH256%5D%2C%20depth%3A%20usize%2C%20index%3A%20usize%2C)%20-%3E%20Result%3CH256%2C%20IncorrectBranchLength%3E%60%0A%20%20-%20%5Bbeacon_block_body_merkle_tree.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth_rpc_client%2Fsrc%2Fbeacon_block_body_merkle_tree.rs)%3A%20implements%20merkle%20trees%20for%20the%20Beacon%20and%20the%20ExecutionPayload%0A%20%20%20%20-%20%60BeaconBlockBodyMerkleTree%60%20is%20built%20on%20the%20%60BeaconBlockBody%60%20data%20structure%2C%20where%20the%20leaves%20of%20the%20Merkle%20Tree%20are%20the%20hashes%20of%20the%20high-level%20fields%20of%20the%20%60BeaconBlockBody%60.%20The%20hashes%20of%20each%20element%20are%20produced%20by%20using%20%60ssz%60%20serialization.%0A%20%20%20%20-%20%60ExecutionPayloadMerkleTree%60%20is%20a%20built%20on%20the%20%60ExecutionPayload%60%20data%20structure%2C%20where%20the%20leaves%20of%20the%20Merkle%20Tree%20are%20the%20hashes%20of%20the%20high-level%20fields%20of%20the%20%60ExecutionPayload%60.%20The%20hashes%20of%20each%20element%20are%20produced%20by%20using%20%60ssz%60%20serialization.%20%60ExecutionPayload%60%20is%20one%20of%20the%20field%20in%20BeaconBlockBody.%20The%20hash%20of%20the%20root%20of%20%60ExecutionPlayloadMerkleTree%60%20is%20the%209th%20leaf%20in%20BeaconBlockBody%20Merkle%20Tree.%0A%20%20-%20%5Bbeacon_rpc_client.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth_rpc_client%2Fsrc%2Fbeacon_rpc_client.rs)%3A%20allows%20getting%20beacon%20block%20body%2C%20beacon%20block%20header%20and%20light%20client%20updates%20using%20%5BBeacon%20RPC%20API%5D(https%3A%2F%2Fethereum.github.io%2Fbeacon-APIs%2F).%20It%20has%20the%20following%20functions%0A%20%20%20%20-%20%60pub%20fn%20new(endpoint_url%3A%20%26str%2C%20timeout_seconds%3A%20u64%2C%20timeout_state_seconds%3A%20u64)%20-%3E%20Self%60%3A%20Creates%20%60BeaconRPCClient%60%20for%20the%20given%20BeaconAPI%20%60endpoint_url%60%0A%20%20%20%20-%20%60pub%20fn%20get_beacon_block_body_for_block_id(%26self%2C%20block_id%3A%20%26str%2C)%20-%3E%20Result%3CBeaconBlockBody%3CMainnetEthSpec%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20%60BeaconBlockBody%60%20struct%20for%20the%20given%20%60block_id%60.%20It%20uses%20the%20following%20arguments%0A%20%20%20%20%20%20-%20%60block_id%60%20-%20Block%20identifier.%20Can%20be%20one%20of%3A%20%60%22head%22%20(canonical%20head%20in%20node's%20view)%2C%22genesis%22%2C%20%22finalized%22%2C%20%3Cslot%3E%2C%20%3Chex%20encoded%20blockRoot%20with%200x%20prefix%3E%60(see%20%5Bbeacon-APIs%2F%23%2FBeacon%2FgetBlockV2%5D(https%3A%2F%2Fethereum.github.io%2Fbeacon-APIs%2F%23%2FBeacon%2FgetBlockV2)).%0A%20%20%20%20-%20%60pub%20fn%20get_beacon_block_header_for_block_id(%26self%2C%20block_id%3A%20%26str%2C)%20-%3E%20Result%3Ctypes%3A%3ABeaconBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20%60BeaconBlockHeader%60%20struct%20for%20the%20given%20%60block_id%60.%20It%20uses%20the%20following%20arguments%0A%20%20%20%20%20%20-%20%60block_id%60%20-%20Block%20identifier.%20Can%20be%20one%20of%3A%20%60%22head%22%20(canonical%20head%20in%20node's%20view)%2C%22genesis%22%2C%20%22finalized%22%2C%20%3Cslot%3E%2C%20%3Chex%20encoded%20blockRoot%20with%200x%20prefix%3E%60(see%20%5Bbeacon-APIs%2F%23%2FBeacon%2FgetBlockV2%5D(https%3A%2F%2Fethereum.github.io%2Fbeacon-APIs%2F%23%2FBeacon%2FgetBlockV2)).%0A%20%20%20%20-%20%60pub%20fn%20get_light_client_update(%26self%2C%20period%3A%20u64%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20%60LightClientUpdate%60%20struct%20for%20the%20given%20%60period%60.%20It%20uses%20the%20following%20arguments%0A%20%20%20%20%20%20-%20%60period%60%20-%20period%20id%20for%20which%20%60LightClientUpdate%60%20is%20fetched.%20On%20Mainnet%2C%20one%20period%20consists%20of%20256%20epochs%2C%20and%20one%20epoch%20consists%20of%2032%20slots%0A%20%20%20%20-%20%60pub%20fn%20get_bootstrap(%26self%2C%20block_root%3A%20String%2C)%20-%3E%20Result%3CLightClientSnapshotWithProof%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Fetch%20a%20bootstrapping%20state%20with%20a%20proof%20to%20a%20trusted%20block%20root.%20The%20trusted%20block%20root%20should%20be%20fetched%20with%20similar%20means%20to%20a%20weak%20subjectivity%20checkpoint.%20Only%20block%20roots%20for%20checkpoints%20are%20guaranteed%20to%20be%20available.%0A%20%20%20%20-%20%60pub%20fn%20get_checkpoint_root(%26self)%20-%3E%20Result%3CString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_last_finalized_slot_number(%26self)%20-%3E%20Result%3Ctypes%3A%3ASlot%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Return%20the%20last%20finalized%20slot%20in%20the%20Beacon%20chain%0A%20%20%20%20-%20%60pub%20fn%20get_last_slot_number(%26self)%20-%3E%20Result%3Ctypes%3A%3ASlot%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Return%20the%20last%20slot%20in%20the%20Beacon%20chain%0A%20%20%20%20-%20%60pub%20fn%20get_slot_by_beacon_block_root(%26self%2C%20beacon_block_hash%3A%20H256%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_block_number_for_slot(%26self%2C%20slot%3A%20types%3A%3ASlot)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_finality_light_client_update(%26self)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_finality_light_client_update_with_sync_commity_update(%26self%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_beacon_state(%26self%2C%20state_id%3A%20%26str%2C)%20-%3E%20Result%3CBeaconState%3CMainnetEthSpec%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20is_syncing(%26self)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_json_from_client(client%3A%20%26Client%2C%20url%3A%20%26str)%20-%3E%20Result%3CString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_json_from_raw_request(%26self%2C%20url%3A%20%26str)%20-%3E%20Result%3CString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_body_json_from_rpc_result(block_json_str%3A%20%26str%2C)%20-%3E%20Result%3Cstd%3A%3Astring%3A%3AString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_header_json_from_rpc_result(json_str%3A%20%26str%2C)%20-%3E%20Result%3Cstd%3A%3Astring%3A%3AString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_attested_header_from_light_client_update_json_str(light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CBeaconBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_sync_aggregate_from_light_client_update_json_str(light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CSyncAggregate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_signature_slot(%26self%2C%20light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CSlot%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20%60signature_slot%60%20is%20not%20provided%20in%20the%20current%20API.%20The%20slot%20is%20brute-forced%20until%20%60SyncAggregate%60%20in%20%60BeconBlockBody%60%20in%20the%20current%20slot%20is%20equal%20to%20%60SyncAggregate%60%20in%20%60LightClientUpdate%60%0A%20%20%20%20-%20%60fn%20get_finality_update_from_light_client_update_json_str(%26self%2C%20light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CFinalizedHeaderUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_sync_committee_update_from_light_client_update_json_str(light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CSyncCommitteeUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_period_for_slot(slot%3A%20u64)%20-%3E%20u64%60%0A%20%20%20%20-%20%60pub%20fn%20get_non_empty_beacon_block_header(%26self%2C%20start_slot%3A%20u64%2C)%20-%3E%20Result%3Ctypes%3A%3ABeaconBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20check_block_found_for_slot(%26self%2C%20json_str%3A%20%26str)%20-%3E%20Result%3C()%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%5Bhand_made_finality_light_client_update.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth_rpc_client%2Fsrc%2Fhand_made_finality_light_client_update.rs)%3A%20Has%20two%20implementations%0A%20%20%20%20-%20The%20first%20implementation%20which%20calls%20functions%20in%20the%20second%0A%20%20%20%20%20%20-%20%60pub%20fn%20get_finality_light_client_update(beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20attested_slot%3A%20u64%2C%20include_next_sync_committee%3A%20bool%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60pub%20fn%20get_finality_light_client_update_from_file(beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20file_name%3A%20%26str%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60pub%20fn%20get_light_client_update_from_file_with_next_sync_committee(beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20attested_state_file_name%3A%20%26str%2C%20finality_state_file_name%3A%20%26str%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20The%20second%20implementation%0A%20%20%20%20%20%20-%20%60fn%20get_attested_slot_with_enough_sync_committee_bits_sum(beacon_rpc_client%3A%20%26BeaconRPCClient%2Cattested_slot%3A%20u64%2C)%20-%3E%20Result%3C(u64%2C%20u64)%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_state_from_file(file_name%3A%20%26str)%20-%3E%20Result%3CBeaconState%3CMainnetEthSpec%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_finality_light_client_update_for_state(beacon_rpc_client%3A%20%26BeaconRPCClient%2Cattested_slot%3A%20u64%2C%20signature_slot%3A%20u64%2C%20beacon_state%3A%20BeaconState%3CMainnetEthSpec%3E%2C%20finality_beacon_state%3A%20Option%3CBeaconState%3CMainnetEthSpec%3E%3E%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_next_sync_committee(beacon_state%3A%20%26BeaconState%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3CSyncCommitteeUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20from_lighthouse_beacon_header(beacon_header%3A%20%26BeaconBlockHeader%2C)%20-%3E%20eth_types%3A%3Aeth2%3A%3ABeaconBlockHeader%60%0A%20%20%20%20%20%20-%20%60fn%20get_sync_committee_bits(sync_committee_signature%3A%20%26types%3A%3ASyncAggregate%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3C%5Bu8%3B%2064%5D%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_finality_branch(beacon_state%3A%20%26BeaconState%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3CVec%3CH256%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_finality_update(finality_header%3A%20%26BeaconBlockHeader%2C%20beacon_state%3A%20%26BeaconState%3CMainnetEthSpec%3E%2C%20finalized_block_body%3A%20%26BeaconBlockBody%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3CFinalizedHeaderUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%5Blight_client_snapshot_with_proof.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth_rpc_client%2Fsrc%2Flight_client_snapshot_with_proof.rs)%3A%20contains%20the%20structure%20for%20%60LightClientSnapshotWithProof%60%0A%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20pub%20struct%20LightClientSnapshotWithProof%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20beacon_header%3A%20BeaconBlockHeader%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20current_sync_committee%3A%20SyncCommittee%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20current_sync_committee_branch%3A%20Vec%3CH256%3E%2C%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A-%20%5Beth2near-block-relay-rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs)%20includes%20(but%20not%20limited%20to)%20the%20following%20additional%20components%0A%20%20-%20%5Bconfig.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fconfig.rs)%3A%0A%20%20-%20%5Blast_slot_searcher.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Flast_slot_searcher.rs)%3A%20Implementation%20of%20functions%20for%20searching%20last%20slot%20on%20NEAR%20contract.%20Supports%20both%20binary%20and%20linear%20searches.%0A%20%20%20%20-%20%60pub%20fn%20get_last_slot(%26mut%20self%2C%20last_eth_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60n%20binary_slot_search(%26self%2C%20slot%3A%20u64%2C%20finalized_slot%3A%20u64%2C%20last_eth_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%20%3A%20Search%20for%20the%20slot%20before%20the%20first%20unknown%20slot%20on%20NEAR.%20Assumptions%3A%20(1)%20start_slot%20is%20known%20on%20NEAR%20(2)%20last_slot%20is%20unknown%20on%20NEAR.%20Return%20error%20in%20case%20of%20problem%20with%20network%20connection.%0A%20%20%20%20-%20%60fn%20binsearch_slot_forward(%26self%2C%20slot%3A%20u64%2C%20max_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2Ceth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%20%7B%60%3A%20Search%20for%20the%20slot%20before%20the%20first%20unknown%20slot%20on%20NEAR.%20Assumptions%3A%20(1)%20start_slot%20is%20known%20on%20NEAR%20(2)%20last_slot%20is%20unknown%20on%20NEAR.%20Return%20error%20in%20case%20of%20problem%20with%20network%20connection.%0A%20%20%20%20-%20%60fn%20binsearch_slot_range(%26self%2C%20start_slot%3A%20u64%2C%20last_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Search%20for%20the%20slot%20before%20the%20first%20unknown%20slot%20on%20NEAR.%20Assumptions%3A%20(1)%20start_slot%20is%20known%20on%20NEAR%20(2)%20last_slot%20is%20unknown%20on%20NEAR.%20Return%20error%20in%20case%20of%20problem%20with%20network%20connection.%0A%20%20%20%20-%20%60fn%20linear_slot_search(%26self%2C%20slot%3A%20u64%2C%20finalized_slot%3A%20u64%2C%20last_eth_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20the%20last%20slot%20known%20with%20block%20known%20on%20NEAR.%20%60Slot%60%20--%20expected%20last%20known%20slot.%20%60finalized_slot%60%20--%20last%20finalized%20slot%20on%20NEAR%2C%20assume%20as%20known%20slot.%20%60last_eth_slot%60%20--%20head%20slot%20on%20Eth.%0A%20%20%20%20-%20%60fn%20linear_search_forward(%26self%2C%20slot%3A%20u64%2C%20max_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2Ceth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20the%20slot%20before%20the%20first%20unknown%20block%20on%20NEAR.%20The%20search%20range%20is%20%5Bslot%20..%20max_slot).%20If%20there%20is%20no%20unknown%20block%20in%20this%20range%20max_slot%20-%201%20will%20be%20returned.%20Assumptions%3A%20(1)%20block%20for%20slot%20is%20submitted%20to%20NEAR.%20(2)%20block%20for%20max_slot%20is%20not%20submitted%20to%20NEAR.%0A%20%20%20%20-%20%60fn%20linear_search_backward(%26self%2C%20start_slot%3A%20u64%2C%20last_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20the%20slot%20before%20the%20first%20unknown%20block%20on%20NEAR.%20The%20search%20range%20is%20%5Blast_slot%20..%20start_slot).%20If%20no%20such%20block%20are%20found%20the%20start_slot%20will%20be%20returned.%20Assumptions%3A%20(1)%20block%20for%20start_slot%20is%20submitted%20to%20NEAR%20(2)%20block%20for%20last_slot%20%2B%201%20is%20not%20submitted%20to%20NEAR.%0A%20%20%20%20-%20%60fn%20find_left_non_error_slot(%26self%2C%20left_slot%3A%20u64%2C%20right_slot%3A%20u64%2C%20step%3A%20i8%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20(u64%2C%20bool)%60%3A%20Find%20the%20leftmost%20non-empty%20slot.%20Search%20range%3A%20%5Bleft_slot%2C%20right_slot).%20Returns%20pair%3A%20(1)%20slot_id%20and%20(2)%20is%20this%20block%20already%20known%20on%20Eth%20client%20on%20NEAR.%20Assume%20that%20right_slot%20is%20non-empty%20and%20it's%20block%20were%20submitted%20to%20NEAR%2C%20so%20if%20non%20correspondent%20block%20is%20found%20we%20return%20(right_slot%2C%20false).%0A%20%20%20%20-%20%60fn%20block_known_on_near(%20%26self%2C%20slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2Ceth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Check%20if%20the%20block%20for%20current%20slot%20in%20Eth2%20already%20were%20submitted%20to%20NEAR.%20Returns%20Error%20if%20slot%20doesn't%20contain%20any%20block.%0A%20%20-%20%5Bmain.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs)%3A%20%5BCommand%20Line%20Argument%20Parser%5D(https%3A%2F%2Fdocs.rs%2Fclap%2Flatest%2Fclap%2F)%20used%20to%20run%20the%20Ethereum%20to%20Near%20Block%20Relay.%20It%20contains%20the%20following%20functions%0A%20%20%20%20-%20%60fn%20get_eth_contract_wrapper(config%3A%20%26Config)%20-%3E%20Box%3Cdyn%20ContractWrapper%3E%60%0A%20%20%20%20-%20%60fn%20get_dao_contract_wrapper(config%3A%20%26Config)%20-%3E%20Box%3Cdyn%20ContractWrapper%3E%60%0A%20%20%20%20-%20%60fn%20get_eth_client_contract(config%3A%20%26Config)%20-%3E%20Box%3Cdyn%20EthClientContractTrait%3E%60%0A%20%20%20%20-%20%60fn%20init_log(args%3A%20%26Arguments%2C%20config%3A%20%26Config)%60%0A%20%20%20%20-%20%60fn%20main()%20-%3E%20Result%3C()%2C%20Box%3Cdyn%20std%3A%3Aerror%3A%3AError%3E%3E%60%0A%20%20-%20%5Bnear_rpc_client.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fnear_rpc_client.rs)%0A%20%20%20%20-%20%60pub%20fn%20new(endpoint_url%3A%20%26str)%20-%3E%20Self%60%0A%20%20%20%20-%20%60pub%20fn%20check_account_exists(%26self%2C%20account_id%3A%20%26str)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20is_syncing(%26self)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%0A%23%23%23%20Appendix%20B%20-%20Ethereum%20Light%20Client%20Finality%20Update%20Verify%20Components%0A%0A%5Bfinality-update-verify%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Ffinality-update-verify)%20is%20called%20from%20%5Bfn%20verify_bls_signature_for_finality_update%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L422)%20to%20verify%20signatures%20as%20part%20of%20light_client%20updates.%20It%20relies%20heavily%20on%20the%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20codebase%20for%20it's%20consensus%20and%20cryptogrphic%20primitives.%20See%20%5BCryptographic%20Primitives%5D(%23cryptographic-primitives)%20for%20more%20information.%0A%0A-%20Dependencies%20in%20%5BCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2FCargo.toml)%0A%20%20-%20%60eth-types%20%3D%20%7B%20path%20%3D%22..%2F..%2Fcontracts%2Fnear%2Feth-types%2F%22%2C%20features%20%3D%20%5B%22eip1559%22%5D%7D%60%0A%20%20-%20%60bls%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60eth2-utility%20%20%3D%20%7B%20path%20%3D%22..%2F..%2Fcontracts%2Fnear%2Feth2-utility%22%7D%60%0A%20%20-%20%60tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60types%20%3D%20%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60bitvec%20%3D%20%221.0.0%22%60%0A%0A-%20Functions%20in%20%5Blib.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2Fsrc%2Flib.rs)%0A%20%20-%20%60fn%20h256_to_hash256(hash%3A%20H256)%20-%3E%20Hash256%60%0A%20%20-%20%60fn%20tree_hash_h256_to_eth_type_h256(hash%3A%20tree_hash%3A%3AHash256)%20-%3E%20eth_types%3A%3AH256%60%0A%20%20-%20%60fn%20to_lighthouse_beacon_block_header(bridge_beacon_block_header%3A%20%26BeaconBlockHeader%2C)%20-%3E%20types%3A%3ABeaconBlockHeader%60%0A%20%20-%20%60pub%20fn%20is_correct_finality_update(ethereum_network%3A%20%26str%2C%20light_client_update%3A%20%26LightClientUpdate%2C%20%20%20sync_committee%3A%20SyncCommittee%2C)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%0A%23%23%23%20Appendix%20C%20-%20Cryptographic%20Primitives%0A%0AFollowing%20are%20cryptographic%20primitives%20used%20in%20the%20%5Beth2-client%20contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-client)%20and%20%5Bfinality-update-verify%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Ffinality-update-verify).%20Many%20are%20from%20the%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20codebase.%20Specifically%20%5Bconsensus%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fconsensus)%20and%20%5Bcrypto%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto)%20functions.%0A%0ASome%20common%20primitives%0A%0A-%20%5Bbitvec%5D(https%3A%2F%2Fdocs.rs%2Fbitvec%2F1.0.1%2Fbitvec%2F)%3A%20Addresses%20memory%20by%20bits%2C%20for%20packed%20collections%20and%20bitfields%0A-%20%5Beth2_serde_utils%5D(https%3A%2F%2Fdocs.rs%2Feth2_serde_utils%2F0.1.0%2Feth2_serde_utils%2F)%3A%20Serialization%20and%20deserialization%20utilities%20useful%20for%20JSON%20representations%20of%20Ethereum%202.0%20types.%0A-%20%5Beth2_hashing%5D(https%3A%2F%2Fdocs.rs%2Feth2_hashing%2F0.2.0%2Feth2_hashing%2F)%3A%20Hashing%20primitives%20used%20in%20Ethereum%202.0%0A-%20%5Bblst%5D(https%3A%2F%2Fdocs.rs%2Fblst%2F0.3.10%2Fblst%2F)%3A%20The%20blst%20crate%20provides%20a%20rust%20interface%20to%20the%20blst%20BLS12-381%20signature%20library.%0A-%20%5Btree_hash%5D(https%3A%2F%2Fdocs.rs%2Ftree_hash%2F0.4.0%2Ftree_hash%2F)%3A%20Efficient%20Merkle-hashing%20as%20used%20in%20Ethereum%202.0%0A-%20%5Beth2_ssz_types%5D(https%3A%2F%2Fdocs.rs%2Feth2_ssz_types%2F0.2.1%2Fssz_types%2F)%3A%20Provides%20types%20with%20unique%20properties%20required%20for%20SSZ%20serialization%20and%20Merklization.%0A%0ASome%20Primitives%20from%20Lighthouse%0A%0A-%20%5Bbls%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls)%3A%20%5BBoneh%E2%80%93Lynn%E2%80%93Shacham%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBLS_digital_signature)%20digital%20signature%20support%0A%20%20-%20%5Bimpls%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls)%3A%20Implementations%0A%20%20%20%20-%20%5Bblst%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Fblst.rs)%0A%20%20%20%20-%20%5Bfake_crypto%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Ffake_crypto.rs)%0A%20%20%20%20-%20%5Bmilagro%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Fmilagro.rs)%3A%20support%20for%20%5BApache%20Milagro%5D(https%3A%2F%2Fmilagro.apache.org%2Fdocs%2Fmilagro-intro%2F)%0A%20%20%20%20-%20%5Bfunctionality%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls%2Fsrc)%0A%20%20%20%20%20%20-%20%5Bgeneric_aggregate_public_key%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_aggregate_public_key.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_aggregate_signature%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_aggregate_signature.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_keypair%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_keypair.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_public_key%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_public_key.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_public_key_bytes%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_public_key_bytes.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_secret_key%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_secret_key.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_signature%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_signature.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_signature_bytes%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_signature_bytes.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_signature_set%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_signature_set.rs)%0A%20%20%20%20%20%20-%20%5Bget_withdrawal_credentials%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fget_withdrawal_credentials.rs)%0A%20%20%20%20%20%20-%20%5Bzeroize_hash%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fzeroize_hash.rs)%0A-%20%5Bmerkle_proof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fmerkle_proof)%0A-%20%5Btree_hash%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Ftree_hash)%0A-%20%5Btypes%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Ftypes%2Fsrc)%3A%20Implements%20Ethereum%202.0%20types%20including%20but%20not%20limited%20to%0A%20%20-%20%5Battestation%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fattestation.rs)%0A%20%20-%20%5Bbeacon_block%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_block.rs)%0A%20%20-%20%5Bbeacon_committee%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_committee.rs)%0A%20%20-%20%5Bbeacon_state%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_state.rs)%0A%20%20-%20%5Bbuilder_bid%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbuilder_bid.rs)%0A%20%20-%20%5Bchain_spec%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fchain_spec.rs)%0A%20%20-%20%5Bcheckpoint%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fcheckpoint.rs)%0A%20%20-%20%5Bcontribution_and_proof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fcontribution_and_proof.rs)%3A%20A%20Validators%20aggregate%20sync%20committee%20contribution%20and%20selection%20proof.%0A%20%20-%20%5Bdeposit%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fdeposit.rs)%3A%20A%20deposit%20to%20potentially%20become%20a%20beacon%20chain%20validator.%0A%20%20-%20%5Benr_fork_id%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fenr_fork_id.rs)%3A%20Specifies%20a%20fork%20which%20allows%20nodes%20to%20identify%20each%20other%20on%20the%20network.%20This%20fork%20is%20used%20in%20a%20nodes%20local%20ENR.%0A%20%20-%20%5Beth_spec%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Feth_spec.rs)%3A%20Ethereum%20Foundation%20specifications.%0A%20%20-%20%5Bexecution_block_hash%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fexecution_block_hash.rs)%0A%20%20-%20%5Bexecution_payload%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fexecution_payload.rs)%0A%20%20-%20%5Bfork%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Ffork.rs)%3A%20Specifies%20a%20fork%20of%20the%20%60BeaconChain%60%2C%20to%20prevent%20replay%20attacks.%0A%20%20-%20%5Bfree_attestation%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Ffree_attestation.rs)%3A%20Note%3A%20this%20object%20does%20not%20actually%20exist%20in%20the%20spec.%20We%20use%20it%20for%20managing%20attestations%20that%20have%20not%20been%20aggregated.%0A%20%20-%20%5Bpayload%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fpayload.rs)%0A%20%20-%20%5Bsigned_aggregate_and_proof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fsigned_aggregate_and_proof.rs)%3A%20A%20Validators%20signed%20aggregate%20proof%20to%20publish%20on%20the%20%60beacon_aggregate_and_proof%60%20gossipsub%20topic.%0A%20%20-%20%5Bsigned_beacon_block%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fsigned_beacon_block.rs)%3A%20A%20%60BeaconBlock%60%20and%20a%20signature%20from%20its%20proposer.%0A%20%20-%20%5Bslot_data%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fslot_data.rs)%3A%20A%20trait%20providing%20a%20%60Slot%60%20getter%20for%20messages%20that%20are%20related%20to%20a%20single%20slot.%20Useful%20in%20making%20parts%20of%20attestation%20and%20sync%20committee%20processing%20generic.%0A%20%20-%20%5Bslot_epoch%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fslot_epoch.rs)%3A%20The%20%60Slot%60%20and%20%60Epoch%60%20types%20are%20defined%20as%20new%20types%20over%20u64%20to%20enforce%20type-safety%20between%20the%20two%20types.%20Note%3A%20Time%20on%20Ethereum%202.0%20Proof%20of%20Stake%20is%20divided%20into%20slots%20and%20epochs.%20One%20slot%20is%2012%20seconds.%20One%20epoch%20is%206.4%20minutes%2C%20consisting%20of%2032%20slots.%20One%20block%20can%20be%20created%20for%20each%20slot.%0A%20%20-%20%5Bsync_aggregate%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fsync_aggregate.rs)%3A%20Create%20a%20%60SyncAggregate%60%20from%20a%20slice%20of%20%60SyncCommitteeContribution%60s.%20Equivalent%20to%20%60process_sync_committee_contributions%60%20from%20the%20spec.%0A%20%20-%20%5Bsync_committee%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fsync_committee.rs)%0A%20%20-%20%5Btree_hash_impls%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Ftree_hash_impls.rs)%3A%20contains%20custom%20implementations%20of%20%60CachedTreeHash%60%20for%20ETH2-specific%20types.%20It%20makes%20some%20assumptions%20about%20the%20layouts%20and%20update%20patterns%20of%20other%20structs%20in%20this%20crate%2C%20and%20should%20be%20updated%20carefully%20whenever%20those%20structs%20are%20changed.%0A%20%20-%20%5Bvalidator%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fvalidator.rs)%3A%20Information%20about%20a%20%60BeaconChain%60%20validator.%0A%0ASome%20Smart%20Contracts%20deployed%20on%20Ethereum%0A%0A-%20%5Bnearprover%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearprover)%0A%20%20-%20%5BProofDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FProofDecoder.sol)%0A%20%20-%20%5BNearProver.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FNearProver.sol)%0A-%20%5Bnearbridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts)%0A%20%20-%20%5BNearDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearDecoder.sol)%3A%20handles%20decoing%20of%20Public%20Keys%2C%20Signatures%2C%20BlockProducers%20and%20LightClientBlocks%20using%20%60Borsh.sol%60%0A%20%20-%20%5BUtils.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FUtils.sol)%3A%20handles%20reading%20and%20writing%20to%20memory%2C%20memoryToBytes%20and%20has%20functions%20such%20as%20%60keccak256Raw%60%20and%20%60sha256Raw%60%0A%20%20-%20%5BBorsh.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FBorsh.sol)%3A%20%5BBorsh%5D(https%3A%2F%2Fborsh.io%2F)%3A%20Binary%20Object%20Representation%20Serializer%20for%20Hashing.%20It%20is%20meant%20to%20be%20used%20in%20security-critical%20projects%20as%20it%20prioritizes%20consistency%2C%20safety%2C%20speed%3B%20and%20comes%20with%20a%20strict%20specification.%0A%20%20-%20%5BEd25519.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FEd25519.sol)%3A%20%5BEd25519%5D(https%3A%2F%2Fed25519.cr.yp.to%2F)%20high-speed%20high-security%20signatures%0A%0ASome%20Primitives%20from%20NEAR%20Rainbow%20Bridge%0A%0A-%20%5Beth-types%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth-types)%3A%20utilities%20to%20serialize%20and%20encode%20eth2%20types%20using%20%5Bborsh%5D(https%3A%2F%2Fborsh.io%2F)%20and%20%5Brlp%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Frlp).%0A-%20%5Beth2-utility%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-utility)%3A%20Utility%20functions%20used%20for%20Ethereum%202.0%20Consensus.%20Functions%20include%0A%20%20-%20%60fn%20from_str(input%3A%20%26str)%20-%3E%20Result%3CNetwork%2C%20Self%3A%3AErr%3E%60%0A%20%20-%20%60pub%20fn%20new(network%3A%20%26Network)%20-%3E%20Self%60%0A%20%20-%20%60pub%20fn%20compute_fork_version(%26self%2C%20epoch%3A%20Epoch)%20-%3E%20Option%3CForkVersion%3E%60%0A%20%20-%20%60pub%20fn%20compute_fork_version_by_slot(%26self%2C%20slot%3A%20Slot)%20-%3E%20Option%3CForkVersion%3E%60%0A%20%20-%20%60pub%20const%20fn%20compute_epoch_at_slot(slot%3A%20Slot)%20-%3E%20u64%60%0A%20%20-%20%60pub%20const%20fn%20compute_sync_committee_period(slot%3A%20Slot)%20-%3E%20u64%60%0A%20%20-%20%60pub%20const%20fn%20floorlog2(x%3A%20u32)%20-%3E%20u32%60%3A%20Compute%20floor%20of%20log2%20of%20a%20u32.%0A%20%20-%20%60pub%20const%20fn%20get_subtree_index(generalized_index%3A%20u32)%20-%3E%20u32%60%0A%20%20-%20%60pub%20fn%20compute_domain(domain_constant%3A%20DomainType%2C%20fork_version%3A%20ForkVersion%2C%20genesis_validators_root%3A%20H256%2C)%20-%3E%20H256%60%0A%20%20-%20%60pub%20fn%20compute_signing_root(object_root%3A%20H256%2C%20domain%3A%20H256)%20-%3E%20H256%60%0A%20%20-%20%60pub%20fn%20get_participant_pubkeys(public_keys%3A%20%26%5BPublicKeyBytes%5D%2C%20sync_committee_bits%3A%20%26BitVec%3Cu8%2C%20Lsb0%3E%2C)%20-%3E%20Vec%3CPublicKeyBytes%3E%60%0A%20%20-%20%60pub%20fn%20convert_branch(branch%3A%20%26%5BH256%5D)%20-%3E%20Vec%3Cethereum_types%3A%3AH256%3E%60%0A%20%20-%20%60pub%20fn%20validate_beacon_block_header_update(header_update%3A%20%26HeaderUpdate)%20-%3E%20bool%60%0A%20%20-%20%60pub%20fn%20calculate_min_storage_balance_for_submitter(max_submitted_blocks_by_account%3A%20u32%2C)%20-%3E%20Balance%60%0A%0A**Nearbridge%20Cryptographic%20Primitives**%0A%0A-%20%5BEd25519.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FEd25519.sol)%3A%20Solidity%20implementation%20of%20the%20%5BEd25519%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FEdDSA)%20which%20is%20the%20EdDSA%20signature%20scheme%20using%20SHA-512%20(SHA-2)%20and%20Curve25519%20(see%20%5Bhere%5D(https%3A%2F%2Fnbeguier.medium.com%2Fa-real-world-comparison-of-the-ssh-key-algorithms-b26b0b31bfd9)).%20It%20has%20the%20following%20functions%0A%20%20-%20%60function%20pow22501(uint256%20v)%20private%20pure%20returns%20(uint256%20p22501%2C%20uint256%20p11)%60%20%3A%20Computes%20(v%5E(2%5E250-1)%2C%20v%5E11)%20mod%20p%0A%20%20-%20%60function%20check(bytes32%20k%2C%20bytes32%20r%2C%20bytes32%20s%2C%20bytes32%20m1%2C%20bytes9%20m2)%60%20%3A%20has%20the%20following%20steps%0A%20%20%20%20-%20Step%201%3A%20compute%20SHA-512(R%2C%20A%2C%20M)%0A%20%20%20%20-%20Step%202%3A%20unpack%20k%0A%20%20%20%20-%20Step%203%3A%20compute%20multiples%20of%20k%0A%20%20%20%20-%20Step%204%3A%20compute%20s*G%20-%20h*A%0A%20%20%20%20-%20Step%205%3A%20compare%20the%20points%0A-%20%5BUtils.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FUtils.sol)%3A%20A%20set%20of%20utilty%20functions%20for%20byte%20manipulation%2C%20memory%20updates%20and%20%5Bkeccak%5D(https%3A%2F%2Fkeccak.team%2Fkeccak_specs_summary.html)%20functions.%0A%20%20-%20%60function%20swapBytes2(uint16%20v)%20internal%20pure%20returns%20(uint16)%60%0A%20%20-%20%60function%20swapBytes4(uint32%20v)%20internal%20pure%20returns%20(uint32)%60%0A%20%20-%20%60function%20swapBytes8(uint64%20v)%20internal%20pure%20returns%20(uint64)%60%0A%20%20-%20%60function%20swapBytes16(uint128%20v)%20internal%20pure%20returns%20(uint128)%60%0A%20%20-%20%60function%20swapBytes32(uint256%20v)%20internal%20pure%20returns%20(uint256)%60%0A%20%20-%20%60function%20readMemory(uint%20ptr)%20internal%20pure%20returns%20(uint%20res)%60%0A%20%20-%20%60function%20writeMemory(uint%20ptr%2C%20uint%20value)%20internal%20pure%60%0A%20%20-%20%60function%20memoryToBytes(uint%20ptr%2C%20uint%20length)%20internal%20pure%20returns%20(bytes%20memory%20res)%60%0A%20%20-%20%60function%20keccak256Raw(uint%20ptr%2C%20uint%20length)%20internal%20pure%20returns%20(bytes32%20res)%60%0A%20%20-%20%60function%20sha256Raw(uint%20ptr%2C%20uint%20length)%20internal%20view%20returns%20(bytes32%20res)%60%0A-%20%5BBorsh.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FBorsh.sol)%20provides%20Binary%20Object%20Representation%20Serializer%20for%20Hashing%20%5Bborsh%5D(https%3A%2F%2Fborsh.io%2F)%20functionality%20and%20imports%20%60Utils.sols%60.%20Structures%20and%20functions%20include%0A%20%20-%20%60struct%20Data%20%7Buint%20ptr%3B%20uint%20end%3B%7D%60%0A%20%20-%20%60function%20from(bytes%20memory%20data)%20internal%20pure%20returns%20(Data%20memory%20res)%60%0A%20%20-%20%60function%20requireSpace(Data%20memory%20data%2C%20uint%20length)%20internal%20pure%60%3A%20This%20function%20assumes%20that%20length%20is%20reasonably%20small%2C%20so%20that%20data.ptr%20%2B%20length%20will%20not%20overflow.%20In%20the%20current%20code%2C%20length%20is%20always%20less%20than%202%5E32.%0A%20%20-%20%60function%20read(Data%20memory%20data%2C%20uint%20length)%20internal%20pure%20returns%20(bytes32%20res)%60%0A%20%20-%20%60function%20done(Data%20memory%20data)%20internal%20pure%60%0A%20%20-%20%60function%20peekKeccak256(Data%20memory%20data%2C%20uint%20length)%20internal%20pure%20returns%20(bytes32)%60%3A%20Same%20considerations%20as%20for%20requireSpace.%0A%20%20-%20%60function%20peekSha256(Data%20memory%20data%2C%20uint%20length)%20internal%20view%20returns%20(bytes32)%60%3A%20Same%20considerations%20as%20for%20requireSpace.%0A%20%20-%20%60function%20decodeU8(Data%20memory%20data)%20internal%20pure%20returns%20(uint8)%60%0A%20%20-%20%60function%20decodeU16(Data%20memory%20data)%20internal%20pure%20returns%20(uint16)%60%0A%20%20-%20%60function%20decodeU32(Data%20memory%20data)%20internal%20pure%20returns%20(uint32)%60%0A%20%20-%20%60function%20decodeU64(Data%20memory%20data)%20internal%20pure%20returns%20(uint64)%60%0A%20%20-%20%60function%20decodeU128(Data%20memory%20data)%20internal%20pure%20returns%20(uint128)%60%0A%20%20-%20%60function%20decodeU256(Data%20memory%20data)%20internal%20pure%20returns%20(uint256)%60%0A%20%20-%20%60function%20decodeBytes20(Data%20memory%20data)%20internal%20pure%20returns%20(bytes20)%60%0A%20%20-%20%60function%20decodeBytes32(Data%20memory%20data)%20internal%20pure%20returns%20(bytes32)%60%0A%20%20-%20%60function%20decodeBool(Data%20memory%20data)%20internal%20pure%20returns%20(bool)%60%0A%20%20-%20%60function%20skipBytes(Data%20memory%20data)%20internal%20pure%60%0A%20%20-%20%60function%20decodeBytes(Data%20memory%20data)%20internal%20pure%20returns%20(bytes%20memory%20res)%60%0A-%20%5BNearDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearDecoder.sol)%3A%20Imports%20%60Borsh.sol%60%20and%20has%20utilities%20for%20decoding%20Public%20Keys%2C%20Signatures%2C%20Block%20Producers%2C%20Block%20Headers%20and%20Light%20Client%20Blocks.%0A%20%20-%20%60function%20decodePublicKey(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(PublicKey%20memory%20res)%60%0A%20%20-%20%60function%20decodeSignature(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(Signature%20memory%20res)%60%0A%20%20-%20%60function%20decodeBlockProducer(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(BlockProducer%20memory%20res)%60%0A%20%20-%20%60function%20decodeBlockProducers(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(BlockProducer%5B%5D%20memory%20res)%60%0A%20%20-%20%60function%20decodeOptionalBlockProducers(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(OptionalBlockProducers%20memory%20res)%60%0A%20%20-%20%60function%20decodeOptionalSignature(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(OptionalSignature%20memory%20res)%60%0A%20%20-%20%60function%20decodeBlockHeaderInnerLite(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(BlockHeaderInnerLite%20memory%20res)%60%0A%20%20-%20%60function%20decodeLightClientBlock(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(LightClientBlock%20memory%20res)%60%0A-%20%5BProofDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FProofDecoder.sol)%3A%20Imports%20%60Borsh.sol%60%20and%20%60NearDecoder.sol%60%20and%20has%20utilities%20for%20decoding%20Proofs%2C%20BlockHeader%2C%20ExecutionStatus%2C%20ExecutionOutcome%20and%20MerklePaths.%20Structures%20and%20functions%20include%0A%20%20-%20%60struct%20FullOutcomeProof%20%7BExecutionOutcomeWithIdAndProof%20outcome_proof%3B%20MerklePath%20outcome_root_proof%3B%20BlockHeaderLight%20block_header_lite%3B%20MerklePath%20block_proof%3B%7D%60%0A%20%20-%20%60function%20decodeFullOutcomeProof(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(FullOutcomeProof%20memory%20proof)%60%0A%20%20-%20%60struct%20BlockHeaderLight%20%7Bbytes32%20prev_block_hash%3B%20bytes32%20inner_rest_hash%3B%20NearDecoder.BlockHeaderInnerLite%20inner_lite%3B%20bytes32%20hash%3B%7D%60%0A%20%20-%20%60function%20decodeBlockHeaderLight(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(BlockHeaderLight%20memory%20header)%60%0A%20%20-%20%60struct%20ExecutionStatus%20%7Buint8%20enumIndex%3B%20bool%20unknown%3B%20bool%20failed%3B%20bytes%20successValue%3B%20bytes32%20successReceiptId%3B%7D%60%0A%20%20%20%20-%20%60successValue%60%20indicates%20if%20the%20final%20action%20succeeded%20and%20returned%20some%20value%20or%20an%20empty%20vec.%0A%20%20%20%20-%20%60successReceiptId%60%20is%20the%20final%20action%20of%20the%20receipt%20returned%20a%20promise%20or%20the%20signed%20transaction%20was%20converted%20to%20a%20receipt.%20Contains%20the%20receipt_id%20of%20the%20generated%20receipt.%0A%20%20-%20%60function%20decodeExecutionStatus(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(ExecutionStatus%20memory%20executionStatus)%60%0A%20%20-%20%60struct%20ExecutionOutcome%20%7Bbytes%5B%5D%20logs%3B%20bytes32%5B%5D%20receipt_ids%3B%20uint64%20gas_burnt%3B%20uint128%20tokens_burnt%3B%20bytes%20executor_id%3B%20ExecutionStatus%20status%3B%20bytes32%5B%5D%20merkelization_hashes%3B%7D%60%0A%20%20%20%20-%20%60bytes%5B%5D%20logs%3B%60%3A%20Logs%20from%20this%20transaction%20or%20receipt.%0A%20%20%20%20-%20%60bytes32%5B%5D%20receipt_ids%3B%60%3A%20Receipt%20IDs%20generated%20by%20this%20transaction%20or%20receipt.%0A%20%20%20%20-%20%60uint64%20gas_burnt%3B%60%3A%20The%20amount%20of%20the%20gas%20burnt%20by%20the%20given%20transaction%20or%20receipt.%0A%20%20%20%20-%20%60uint128%20tokens_burnt%3B%60%3A%20The%20total%20number%20of%20the%20tokens%20burnt%20by%20the%20given%20transaction%20or%20receipt.%0A%20%20%20%20-%20%60bytes%20executor_id%3B%60%3A%20Hash%20of%20the%20transaction%20or%20receipt%20id%20that%20produced%20this%20outcome.%0A%20%20%20%20-%20%60ExecutionStatus%20status%60%3A%20Execution%20status.%20Contains%20the%20result%20in%20case%20of%20successful%20execution.%0A%20%20%20%20-%20%60bytes32%5B%5D%20merkelization_hashes%3B%60%0A%20%20-%20%60function%20decodeExecutionOutcome(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(ExecutionOutcome%20memory%20outcome)%60%0A%20%20-%20%60struct%20ExecutionOutcomeWithId%20%7Bbytes32%20id%3B%20ExecutionOutcome%20outcome%3B%20bytes32%20hash%3B%7D%60%0A%20%20%20%20-%20%60bytes32%20id%60%3A%20is%20the%20transaction%20hash%20or%20the%20receipt%20ID.%0A%20%20-%20%60function%20decodeExecutionOutcomeWithId(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(ExecutionOutcomeWithId%20memory%20outcome)%60%0A%20%20-%20%60struct%20MerklePathItem%20%7Bbytes32%20hash%3B%20uint8%20direction%3B%7D%60%0A%20%20%20%20-%20%60uint8%20direction%60%3A%20where%200%20%3D%20left%2C%201%20%3D%20right%0A%20%20-%20%60function%20decodeMerklePathItem(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(MerklePathItem%20memory%20item)%60%0A%20%20-%20%60struct%20MerklePath%20%7BMerklePathItem%5B%5D%20items%3B%7D%60%0A%20%20-%20%60function%20decodeMerklePath(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(MerklePath%20memory%20path)%60%0A%20%20-%20%60struct%20ExecutionOutcomeWithIdAndProof%20%7BMerklePath%20proof%3B%20bytes32%20block_hash%3B%20ExecutionOutcomeWithId%20outcome_with_id%3B%7D%60%0A%20%20-%20%60function%20decodeExecutionOutcomeWithIdAndProof(Borsh.Data%20memory%20data)internal%20view%20returns%20(ExecutionOutcomeWithIdAndProof%20memory%20outcome)%60%0A%0A%23%23%23%20Appendix%20D%20-%20NEAR%20to%20Ethereum%20block%20propagation%20costing%0A%0AThe%20following%20links%20provide%20the%20production%20Ethereum%20addresses%20and%20blockexplorer%20views%20for%20NearBridge.sol%20and%20the%20ERC20%20Locker%0A%0A-%20%5BEthereum%20Mainnet%20Bridge%20addresses%20and%20parameters%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge-client%2Ftree%2Fmain%2Fpackages%2Fclient%23ethereum-mainnet-bridge-addresses-and-parameters)%0A-%20%5BNearBridge.sol%20on%20Ethereum%20Block%20Explorer%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x3fefc5a4b1c02f21cbc8d3613643ba0635b9a873)%0A%20%20-%20%5BSample%20%60addLightClientBlock(bytes%20data)%60%20function%20call%5D(https%3A%2F%2Fetherscan.io%2Ftx%2F0xa0fbf1405747dbc1c1bda1227e46bc7c5feac36c0eeaab051022cfdb268e60cc%2Fadvanced)%0A-%20%5BNEAR%20ERC20Locker%20on%20Ethereum%20Block%20Explorer%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x23ddd3e3692d1861ed57ede224608875809e127f%23code)%0A%0AAt%20time%20of%20writing%20(Oct%2026th%2C%202022).%0A%0A-%20NEAR%20Light%20Client%20Blocks%20are%20propogated%20every%20%604%20hours%60%0A-%20Sample%20Transaction%20fee%20%600.061600109576901025%20Ether%20(%2496.56)%60%0A-%20Daily%20Transaction%20fees%20cost%20approximately%20%60%24600%60%0A-%20_Note%3A%20Infrastructure%20costs%20for%20running%20relayer%2C%20watchdog%2C%20etc%20are%20not%20included._%0A%0A%23%23%23%20Appendix%20F%20-%20NEAR%20to%20Ethereum%20block%20propagation%20components%0A%0A-%20%5Beth2near-relay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Fcommands%2Fstart%2Feth2near-relay.js)%3A%20Command%20to%20start%20the%20NEAR%20to%20Ethereum%20relay.%20See%20sample%20invocation%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fdocs%2Fdevelopment.md%23near2eth-relay)%0A-%20%5Bnear2eth-block-relay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fnear2eth%2Fnear2eth-block-relay)%20is%20written%20in%20javascript%0A%20%20-%20Has%20%5Bdependencies%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fnear2eth%2Fnear2eth-block-relay%2Fpackage.json)%20including%20%5Brainbow-bridge-utils%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Futils)%20see%20%5Bhere%5D(near-rainbow-bridge-utils)%20for%20more%20information.%20It's%20other%20dependencies%20are%20also%20included%20in%20%60rainbow-bridge-utils%60.%0A%20%20%20%20-%20%5Bethereumjs-util%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fethereumjs-util)%3A%20A%20collection%20of%20utility%20functions%20for%20Ethereum.%0A%20%20-%20Has%20the%20following%20functions%20and%20classes%0A%20%20%20%20-%20%60class%20Near2EthRelay%60%0A%20%20%20%20%20%20-%20%60async%20initialize%20(%7BnearNodeUrl%2C%20nearNetworkId%2C%20ethNodeUrl%2C%20ethMasterSk%2C%20ethClientArtifactPath%2C%20ethClientAddress%2C%20ethGasMultiplier%2C%20metricsPort%20%7D)%60%0A%20%20%20%20%20%20-%20%60async%20withdraw%20(%7BethGasMultiplier%7D)%60%0A%20%20%20%20%20%20-%20%60async%20runInternal%20(%7BsubmitInvalidBlock%2C%20near2ethRelayMinDelay%2C%20near2ethRelayMaxDelay%2C%20near2ethRelayErrorDelay%2C%20near2ethRelayBlockSelectDuration%2C%20near2ethRelayNextBlockSelectDelayMs%2C%20near2ethRelayAfterSubmitDelayMs%2C%20ethGasMultiplier%2C%20ethUseEip1559%2C%20logVerbose%7D)%60%0A%20%20%20%20%20%20-%20%60run%20(options)%20%7Breturn%20this.runInternal(%7B...options%2C%20submitInvalidBlock%3A%20false%7D)%20%7D%60%0A-%20%5BNearBridge.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearBridge.sol)%3A%20Is%20the%20NEAR%20light%20client%20deployed%20on%20ethereum.%0A%20%20-%20It%20imports%20the%20following%20contracts%20(see%20%5Bnearbridge%20cryptographic%20primitives%5D(%23nearbridge-cryptographic-primitives))%0A%20%20%20%20-%20%60import%20%22.%2FAdminControlled.sol%22%3B%60%0A%20%20%20%20-%20%60import%20%22.%2FINearBridge.sol%22%3B%60%0A%20%20%20%20-%20%60import%20%22.%2FNearDecoder.sol%22%3B%60%0A%20%20%20%20-%20%60import%20%22.%2FEd25519.sol%22%3B%60%0A%20%20-%20It%20provides%20the%20following%20structure%20for%20Bridge%20State.%20If%20there%20is%20currently%20no%20unconfirmed%20block%2C%20the%20last%20three%20fields%20are%20zero.%0A%20%20%20%20-%20%60uint%20currentHeight%3B%60%3A%20Height%20of%20the%20current%20confirmed%20block%0A%20%20%20%20-%20%60uint%20nextTimestamp%3B%60%3A%20Timestamp%20of%20the%20current%20unconfirmed%20block%0A%20%20%20%20-%20%60uint%20nextValidAt%3B%60%3A%20Timestamp%20when%20the%20current%20unconfirmed%20block%20will%20be%20confirmed%0A%20%20%20%20-%20%60uint%20numBlockProducers%3B%60%3A%20Number%20of%20block%20producers%20for%20the%20current%20unconfirmed%20block%0A%20%20-%20It%20provides%20the%20following%20storage%0A%20%20%20%20-%20%60uint%20constant%20MAX_BLOCK_PRODUCERS%20%3D%20100%3B%60%3A%20Assumed%20to%20be%20even%20and%20to%20not%20exceed%20256.%0A%20%20%20%20-%20%60struct%20Epoch%20%7Bbytes32%20epochId%3B%20uint%20numBPs%3B%20bytes%20%5BMAX_BLOCK_PRODUCERS%5D%20keys%3B%20bytes32%5BMAX_BLOCK_PRODUCERS%20%2F%202%5D%20packedStakes%3B%20uint256%20stakeThreshold%3B%7D%60%0A%20%20%20%20-%20%60uint256%20public%20lockEthAmount%3B%60%0A%20%20%20%20-%20%60uint256%20public%20lockDuration%3B%60%3A%20lockDuration%20and%20replaceDuration%20shouldn't%20be%20extremely%20big%2C%20so%20adding%20them%20to%20an%20uint64%20timestamp%20should%20not%20overflow%20uint256.%0A%20%20%20%20-%20%60uint256%20public%20replaceDuration%3B%60%3A%20replaceDuration%20is%20in%20nanoseconds%2C%20because%20it%20is%20a%20difference%20between%20NEAR%20timestamps.%0A%20%20%20%20-%20%60Ed25519%20immutable%20edwards%3B%60%0A%20%20%20%20-%20%60uint256%20public%20lastValidAt%3B%60%3A%20End%20of%20challenge%20period.%20If%20zero%2C%20_%60untrusted%60_%20fields%20and%20%60lastSubmitter%60%20are%20not%20meaningful.%0A%20%20%20%20-%20%60uint64%20curHeight%3B%60%0A%20%20%20%20-%20%60uint64%20untrustedHeight%3B%60%3A%20The%20most%20recently%20added%20block.%20May%20still%20be%20in%20its%20challenge%20period%2C%20so%20should%20not%20be%20trusted.%0A%20%20%20%20-%20%60address%20lastSubmitter%3B%60%3A%20Address%20of%20the%20account%20which%20submitted%20the%20last%20block.%0A%20%20%20%20-%20%60bool%20public%20initialized%3B%60%3A%20Whether%20the%20contract%20was%20initialized.%0A%20%20%20%20-%20%60bool%20untrustedNextEpoch%3B%60%0A%20%20%20%20-%20%60bytes32%20untrustedHash%3B%60%0A%20%20%20%20-%20%60bytes32%20untrustedMerkleRoot%3B%60%0A%20%20%20%20-%20%60bytes32%20untrustedNextHash%3B%60%0A%20%20%20%20-%20%60uint256%20untrustedTimestamp%3B%60%0A%20%20%20%20-%20%60uint256%20untrustedSignatureSet%3B%60%0A%20%20%20%20-%20%60NearDecoder.Signature%5BMAX_BLOCK_PRODUCERS%5D%20untrustedSignatures%3B%60%0A%20%20%20%20-%20%60Epoch%5B3%5D%20epochs%3B%60%0A%20%20%20%20-%20%60uint256%20curEpoch%3B%60%0A%20%20%20%20-%20%60mapping(uint64%20%3D%3E%20bytes32)%20blockHashes_%3B%60%0A%20%20%20%20-%20%60mapping(uint64%20%3D%3E%20bytes32)%20blockMerkleRoots_%3B%60%0A%20%20%20%20-%20%60mapping(address%20%3D%3E%20uint256)%20public%20override%20balanceOf%3B%60%0A%20%20-%20It%20provides%20the%20following%20functions%0A%20%20%20%20-%20%60constructor(Ed25519%20ed%2C%20uint256%20lockEthAmount_%2C%20uint256%20lockDuration_%2C%20uint256%20replaceDuration_%2C%20address%20admin_%2C%20uint256%20pausedFlags_)%60%3A%20_Note%3A%20require%20the%20%60lockDuration%60%20(in%20seconds)%20to%20be%20at%20least%20one%20second%20less%20than%20the%20%60replaceDuration%60%20(in%20nanoseconds)%20%60require(replaceDuration*%20%3E%20lockDuration*%20_%201000000000)%3B%60%0A%20%20%20%20%20%20-%20%60ethEd25519Address%60%3A%20The%20address%20of%20the%20ECDSA%20signature%20checker%20using%20Ed25519%20curve%20(see%20%5Bhere%5D(https%3A%2F%2Fnbeguier.medium.com%2Fa-real-world-comparison-of-the-ssh-key-algorithms-b26b0b31bfd9))%0A%20%20%20%20%20%20-%20%60lockEthAmount%60%3A%20The%20amount%20that%20%60BLOCK_PRODUCERS%60%20need%20to%20deposit%20(in%20wei)to%20be%20able%20to%20provide%20blocks.%20This%20amount%20will%20be%20slashed%20if%20the%20block%20is%20challenged%20and%20proven%20not%20to%20have%20a%20valid%20signature.%20Default%20value%20is%20100000000000000000000%20WEI%20%3D%20100%20ETH.%0A%20%20%20%20%20%20-%20%60lockDuration%60%20%3A%2030%20seconds%0A%20%20%20%20%20%20-%20%60replaceDuration%60%3A%2060%20seconds%20it%20is%20passed%20in%20nanoseconds%2C%20because%20it%20is%20a%20difference%20between%20NEAR%20timestamps.%0A%20%20%20%20%20%20-%20%60ethAdminAddress%60%3A%20Bridge%20Administrator%20Address%0A%20%20%20%20%20%20-%20%600%60%20%3A%20Indicates%20nothing%20is%20paused%20%60UNPAUSE_ALL%60%0A%20%20%20%20-%20%60function%20deposit()%20public%20payable%20override%20pausable(PAUSED_DEPOSIT)%60%0A%20%20%20%20-%20%60function%20withdraw()%20public%20override%20pausable(PAUSED_WITHDRAW)%60%0A%20%20%20%20-%20%60function%20challenge(address%20payable%20receiver%2C%20uint%20signatureIndex)%20external%20override%20pausable(PAUSED_CHALLENGE%60%0A%20%20%20%20-%20%60function%20checkBlockProducerSignatureInHead(uint%20signatureIndex)%20public%20view%20override%20returns%20(bool)%60%0A%20%20%20%20-%20%60function%20initWithValidators(bytes%20memory%20data)%20public%20override%20onlyAdmin%60%3A%20The%20first%20part%20of%20initialization%20--%20setting%20the%20validators%20of%20the%20current%20epoch.%0A%20%20%20%20-%20%60function%20initWithBlock(bytes%20memory%20data)%20public%20override%20onlyAdmin%60%3A%20The%20second%20part%20of%20the%20initialization%20--%20setting%20the%20current%20head.%0A%20%20%20%20-%20%60function%20bridgeState()%20public%20view%20returns%20(BridgeState%20memory%20res)%60%0A%20%20%20%20-%20%60function%20bridgeState()%20public%20view%20returns%20(BridgeState%20memory%20res)%60%0A%20%20%20%20-%20%60function%20addLightClientBlock(bytes%20memory%20data)%20public%20override%20pausable(PAUSED_ADD_BLOCK)%60%0A%20%20%20%20-%20%60function%20setBlockProducers(NearDecoder.BlockProducer%5B%5D%20memory%20src%2C%20Epoch%20storage%20epoch)%20internal%60%0A%20%20%20%20-%20%60function%20blockHashes(uint64%20height)%20public%20view%20override%20pausable(PAUSED_VERIFY)%20returns%20(bytes32%20res)%60%0A%20%20%20%20-%20%60function%20blockMerkleRoots(uint64%20height)%20public%20view%20override%20pausable(PAUSED_VERIFY)%20returns%20(bytes32%20res)%60%0A-%20%5BNearProver.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FNearProver.sol)%3A%20Is%20used%20to%20prove%20the%20validity%20of%20NEAR%20blocks%20on%20Ethereum.%0A%20%20-%20It%20imports%20the%20following%20contracts%20(see%20%5Bnearbridge%20cryptographic%20primitives%5D(%23nearbridge-cryptographic-primitives))%0A%20%20%20%20-%20%60import%20%22rainbow-bridge-sol%2Fnearbridge%2Fcontracts%2FNearDecoder.sol%22%3B%60%0A%20%20%20%20-%20%60import%20%22.%2FProofDecoder.sol%22%3B%60%0A%20%20-%20It%20has%20the%20following%20functions%0A%20%20%20%20-%20%60constructor(INearBridge%20_bridge%2C%20address%20_admin%2C%20uint%20_pausedFlags)%60%0A%20%20%20%20%20%20-%20%60_bridge%60%3A%20Interface%20to%20%60NearBridge.sol%60%0A%20%20%20%20%20%20-%20%60_admin%60%3A%20Administrator%20address%0A%20%20%20%20%20%20-%20%60_pausedFlags%60%3A%20paused%20indicator%20defaults%20to%20%60UNPAUSE_ALL%20%3D%200%60%0A%20%20%20%20-%20%60function%20proveOutcome(bytes%20memory%20proofData%2C%20uint64%20blockHeight)%60%0A%20%20%20%20-%20%60function%20_computeRoot(bytes32%20node%2C%20ProofDecoder.MerklePath%20memory%20proof)%20internal%20pure%20returns%20(bytes32%20hash)%60%0A%0A%23%23%23%20Appendix%20G%20-%20NEAR%20Rainbow%20Bridge%20Utils%0A%0A%5Brainbow-bridge-utils%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Futils)%20provides%20a%20set%20of%20utilities%20for%20the%20near%20rainbow%20bridge%20written%20in%20javascript.%0A%0A-%20It%20has%20the%20following%20%5Bdependencies%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Fpackage.json)%0A%20%20-%20%5Bbn.js%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fbn.js)%3A%20Big%20number%20implementation%20in%20pure%20javascript%0A%20%20-%20%5Bbsert%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fbsert)%3A%20Minimal%20assert%20with%20type%20checking.%0A%20%20-%20%5Bbs58%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fbs58)%3A%20JavaScript%20component%20to%20compute%20base%2058%20encoding%0A%20%20-%20%5Bchange-case%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fchange-case)%3A%20Transform%20a%20string%20between%20camelCase%2C%20PascalCase%2C%20Capital%20Case%2C%20snake_case%2C%20param-case%2C%20CONSTANT_CASE%20and%20others.%0A%20%20-%20%5Bconfigstore%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fconfigstore)%3A%20Easily%20load%20and%20save%20config%20without%20having%20to%20think%20about%20where%20and%20how%0A%20%20-%20%5Beth-object%5D(https%3A%2F%2Fgithub.com%2Fnear%2Feth-object%23383b6ea68c7050bea4cab6950c1d5a7fa553e72b)%3A%20re-usable%20and%20composable%20objects%20that%20you%20can%20just%20call%20Object.from%20to%20ingest%20new%20data%20to%20serialize%20Ethereum%20Trie%20%2F%20LevelDB%20data%20from%20hex%2C%20buffers%20and%20rpc%20into%20the%20same%20format.%0A%20%20-%20%5Beth-util-lite%5D(https%3A%2F%2Fgithub.com%2Fnear%2Feth-util-lite)%3A%20a%20low-dependency%20utility%20for%20Ethereum.%20It%20replaces%20a%20small%20subset%20of%20the%20ethereumjs-util%20and%20ethjs-util%20APIs.%0A%20%20-%20%5Blodash%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Flodash)%3A%20A%20set%20of%20utilities%20for%20working%20with%20arrays%2C%20numbers%2C%20objects%2C%20strings%2C%20etc.%0A%20%20-%20%5Bnear-api-js%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fnear-api-js)%3A%20JavaScript%20library%20to%20interact%20with%20NEAR%20Protocol%20via%20RPC%20API%0A%20%20-%20%5Bweb3%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fweb3)%3A%20Ethereum%20JavaScript%20API%0A-%20It%20provides%20the%20following%20functions%0A%20%20-%20%5Baddress-watcher%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Faddress-watcher.js)%3A%20Watches%20a%20group%20of%20near%20and%20ethereum%20acccounts%20polling%20NEAR%20and%20Ethereum%20every%20second%20and%20updating%20%60nearAccount.balanceGauge%60%2C%20%60nearAccount.stateStorageGauge%60%20and%20%60ethereumAccount.balanceGauge%60.%0A%20%20-%20%5Bborsh%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Fborsh.js)%3A%20provides%20the%20following%20functions%20for%20Binary%20Object%20Representation%20Serializer%20for%20Hashing%20%5Bborsh%5D(https%3A%2F%2Fborsh.io%2F)%0A%20%20%20%20-%20%60function%20serializeField%20(schema%2C%20value%2C%20fieldType%2C%20writer)%60%0A%20%20%20%20-%20%60function%20deserializeField%20(schema%2C%20fieldType%2C%20reader)%60%0A%20%20%20%20-%20%60function%20serialize%20(schema%2C%20fieldType%2C%20obj)%60%3A%20Serialize%20given%20object%20using%20schema%20of%20the%20form%3A%20%60%7B%20class_name%20-%3E%20%5B%20%5Bfield_name%2C%20field_type%5D%2C%20..%20%5D%2C%20..%20%7D%60%0A%20%20%20%20-%20%60class%20BinaryReader%60%3A%20Includes%20utilities%20to%20read%20numbers%2C%20strings%20arrays%20and%20burggers%0A%20%20%20%20-%20%60function%20deserialize%20(schema%2C%20fieldType%2C%20buffer)%60%0A%20%20%20%20-%20%60const%20signAndSendTransactionAsync%20%3D%20async%20(accessKey%2C%20account%2C%20receiverId%2Cactions)%20%3D%3E%60%0A%20%20%20%20-%20%60const%20txnStatus%20%3D%20async%20(account%2C%20txHash%2C%20retries%20%3D%20RETRY_TX_STATUS%2C%20wait%20%3D%201000)%20%3D%3E%60%0A%20%20%20%20-%20%60function%20getBorshTransactionLastResult%20(txResult)%60%0A%20%20%20%20-%20%60class%20BorshContract%20%7B%60%0A%20%20%20%20%20%20-%20%60constructor%20(borshSchema%2C%20account%2C%20contractId%2C%20options)%60%0A%20%20%20%20%20%20-%20%60async%20accessKeyInit%20()%60%0A%20%20%20%20-%20%60function%20borshify%20(block)%60%0A%20%20%20%20-%20%60function%20borshifyInitialValidators%20(initialValidators)%60%0A%20%20%20%20-%20%60const%20hexToBuffer%20%3D%20(hex)%20%3D%3E%60%0A%20%20%20%20-%20%60const%20readerToHex%20%3D%20(len)%20%3D%3E%60%0A%20%20-%20%5Bborshify-proof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Fborshify-proof.js)%0A%20%20%20%20-%20%60function%20borshifyOutcomeProof%20(proof)%60%0A%20%20-%20%5Brobust%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Frobust.js)%3A%20his%20module%20gives%20a%20few%20utils%20for%20robust%20error%20handling%2C%20and%20wrap%20web3%20with%20error%20handling%20and%20retry%0A%20%20-%20%5Butils%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Futils.js)%0A%20%20%20%20-%20%60async%20function%20setupNear%20(config)%60%0A%20%20%20%20-%20%60async%20function%20setupEth%20(config)%60%0A%20%20%20%20-%20%60async%20function%20setupEthNear%20(config)%60%3A%20Setup%20connection%20to%20NEAR%20and%20Ethereum%20from%20given%20configuration.%0A%20%20%20%20-%20%60function%20remove0x%20(value)%60%3A%20Remove%200x%20if%20prepended%0A%20%20%20%20-%20%60function%20normalizeHex%20(value)%60%0A%20%20%20%20-%20%60async%20function%20accountExists%20(connection%2C%20accountId)%60%0A%20%20%20%20-%20%60async%20function%20createLocalKeyStore%20(networkId%2C%20keyPath)%60%0A%20%20%20%20-%20%60function%20getWeb3%20(config)%60%0A%20%20%20%20-%20%60function%20getEthContract%20(web3%2C%20path%2C%20address)%60%0A%20%20%20%20-%20%60function%20addSecretKey%20(web3%2C%20secretKey)%60%0A%20%20%20%20-%20%60async%20function%20ethCallContract%20(contract%2C%20methodName%2C%20args)%60%3A%20Wrap%20pure%20calls%20to%20Web3%20contract%20to%20handle%20errors%2Freverts%2Fgas%20usage.%0A%0A%23%23%23%20Appendix%20H%20-%20Token%20Transfer%20Components%0A%0A_Note%3A%20This%20uses%20Ethreum%20%5BERC20%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-20)%20and%20NEAR%20%5BNEP-141%5D(https%3A%2F%2Fnomicon.io%2FStandards%2FTokens%2FFungibleToken%2FCore)%20initally%20developed%20for%20%5BNEP-21%5D(https%3A%2F%2Fgithub.com%2Fnear%2FNEPs%2Fpull%2F21)_%0A%0A-%20%5Brainbow-token-connector%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector)%0A%20%20-%20NEAR%20rust%20based%20contracts%0A%20%20%20%20-%20%5Bbridge-common%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Fbridge-common)%3A%20Common%20functions%20for%20NEAR%2C%20currently%20only%20%60pub%20fn%20parse_recipient(recipient%3A%20String)%20-%3E%20Recipient%60%0A%20%20%20%20-%20%5Bbridge-token-factory%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Fbridge-token-factory)%3A%20Functions%20for%20managing%20tokens%20on%20NEAR%20including%20but%20not%20limited%20to%20%60update_metadata%60%2C%20%60deposit%60%2C%20%60get_tokens%60%2C%20%60finish_updating_metadata%60%2C%20%60finish_updating_metadata%60%2C%20%60finish_withdraw%60%2C%20%60deploy_bridge_token%60%2C%20%60get_bridge_token_account_id%60%2C%20%60is_used_proof%60%2C%20%60record_proof%60%0A%20%20%20%20-%20%5Bbridge-token%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Fbridge-token)%3A%20Token%20functions%20on%20NEAR%20including%20but%20not%20limited%20to%20%60mint%60%20and%20%60withdraw%60%0A%20%20%20%20-%20%5Btoken-locker%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Ftoken-locker)%3A%20Token%20Locker%20functions%20on%20NEAR%20including%20but%20not%20limited%20to%20%60withdraw%60%2C%20%60finish_deposit%60%2C%20%60is_used_proof%60%0A%20%20-%20Ethereum%20solidity%20based%20contracts%0A%20%20%20%20-%20%5Berc20-bridge-token%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Ferc20-bridge-token)%3A%20Ethereum%20Bridge%20token%20contracts%20including%20but%20not%20limited%20to%0A%20%20%20%20%20%20-%20%5BBridgeToken.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FBridgeToken.sol)%0A%20%20%20%20%20%20-%20%5BBridgeTokenFactory.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FBridgeTokenFactory.sol)%0A%20%20%20%20%20%20-%20%5BBridgeTokenProxy.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FBridgeTokenProxy.sol)%0A%20%20%20%20%20%20-%20%5BProofConsumer.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FProofConsumer.sol)%0A%20%20%20%20%20%20-%20%5BResultsDecoder%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FResultsDecoder.sol)%0A%20%20%20%20-%20%5Berc20-connector%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Ferc20-connector)%3A%20has%20%5BERC20Locker.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-connector%2Fcontracts%2FERC20Locker.sol)%20which%20is%20used%20to%20lock%20and%20unlock%20tokens.%20It%20is%20linked%20to%20the%20bridge%20token%20factory%20on%20NEAR%20side.%20It%20also%20links%20to%20the%20prover%20that%20it%20uses%20to%20unlock%20the%20tokens.%20(see%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts))%0A%0A%23%23%23%20Appendix%20I%20-%20NEAR%20Rainbow%20Bridge%3A%20Component%20Overview%0A%0AThe%20following%20smart%20contracts%20are%20deployed%20on%20NEAR%20and%20work%20in%20conjunction%20with%20eth2near%20bridging%20functionality%20to%20propogate%20blocks%20from%20Ethereum%20to%20NEAR.%0A%0A**%5C*Note**%20here%20we%20will%20focus%20on%20the%20%60eth2-client%60%20for%20ETH%202.0%20Proof%20of%20Stake%20Bridging%20however%20if%20interested%20in%20however%20there%20is%20also%20an%20%60eth-client%60%20which%20was%20used%20for%20ETH%201.0%20Proof%20of%20Work%20Integration%20using%20%5Brust-ethhash%5D(https%3A%2F%2Fgithub.com%2Fnearprotocol%2Frust-ethash).%5C*%0A%0A-%20%5BSmart%20Contracts%20Deployed%20on%20NEAR%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear)%0A%20%20-%20%5Beth2-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-client)%20implements%20the%20Ethereum%20Light%20Client%20on%20Near%0A%20%20%20%20-%20it%20provides%20functions%20including%20but%20not%20limited%20to%3A%0A%20%20%20%20%20%20-%20validate%20the%20light%20client%0A%20%20%20%20%20%20-%20verify%20the%20finality%20branch%0A%20%20%20%20%20%20-%20verify%20bls%20signatures%0A%20%20%20%20%20%20-%20update%20finalized%20headers%0A%20%20%20%20%20%20-%20updates%20the%20submittes%0A%20%20%20%20%20%20-%20prune%20finalized%20blocks.%0A%20%20%20%20-%20It%20interacts%20with%20the%20beach%20chain%2C%20uses%20%5BBorsh%5D(https%3A%2F%2Fborsh.io%2F)%20for%20serialization%20and%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20for%20Ethereum%202.0%20Consensus%20and%20tree_hash%20functions%20as%20well%20as%20bls%20signatures.%20See%20%5Bhere%5D(https%3A%2F%2Flighthouse-book.sigmaprime.io%2F)%20for%20more%20information%20on%20lighthouse.%20Below%20is%20a%20list%20of%20dependencies%20from%20%5Beth2-client%2FCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2FCargo.toml)%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bdependencies%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20ethereum-types%20%3D%20%220.9.2%22%0A%20%20%20%20%20%20%20%20%20%20%20%20eth-types%20%3D%20%20%7B%20path%20%3D%20%22..%2Feth-types%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth2-utility%20%3D%20%20%7B%20path%20%3D%20%22..%2Feth2-utility%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20merkle_proof%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20bls%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20optional%20%3D%20true%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%2C%20default-features%20%3D%20false%2C%20features%20%3D%20%5B%22milagro%22%5D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20admin-controlled%20%3D%20%20%7B%20path%20%3D%20%22..%2Fadmin-controlled%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20near-sdk%20%3D%20%224.0.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20borsh%20%3D%20%220.9.3%22%0A%20%20%20%20%20%20%20%20%20%20%20%20bitvec%20%3D%20%221.0.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A-%20%5Beth2near%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near)%20supports%20the%20relaying%20of%20blocks%20and%20the%20verification%20of%20finality%20between%20etherum%20and%20Near.%20It%20has%20the%20following%20components%0A%20%20-%20%5Bcontract_wrapper%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Fcontract_wrapper)%3A%20provides%20rust%20wrappers%20for%20interacting%20with%20the%20%5Bsolidity%20contracts%20on%20near%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear)%0A%20%20%20%20-%20Contracts%20include%20(from%20%5B%60lib.rs%60%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Flib.rs))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20contract_wrapper_trait%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20dao_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20dao_eth_client_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20dao_types%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20errors%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20eth_client_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20eth_client_contract_trait%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20file_eth_client_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20near_contract_wrapper%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20sandbox_contract_wrapper%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20utils%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Bcontract_wrapper%2FCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2FCargo.toml))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bdependencies%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20borsh%20%3D%20%220.9.3%22%0A%20%20%20%20%20%20%20%20%20%20%20%20futures%20%3D%20%220.3.21%22%0A%20%20%20%20%20%20%20%20%20%20%20%20async-std%20%3D%20%221.12.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-sdk%20%3D%20%224.0.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-jsonrpc-client%20%3D%20%22%3D0.4.0-beta.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-crypto%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-primitives%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-chain-configs%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-jsonrpc-primitives%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20tokio%20%3D%20%7B%20version%20%3D%20%221.1%22%2C%20features%20%3D%20%5B%22rt%22%2C%20%22macros%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20reqwest%20%3D%20%7B%20version%20%3D%20%220.11%22%2C%20features%20%3D%20%5B%22blocking%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20serde_json%20%3D%20%221.0.74%22%0A%20%20%20%20%20%20%20%20%20%20%20%20serde%20%3D%20%7B%20version%20%3D%20%221.0%22%2C%20features%20%3D%20%5B%22derive%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth-types%20%3D%20%7B%20path%20%3D%20%22..%2F..%2Fcontracts%2Fnear%2Feth-types%2F%22%2C%20features%20%3D%20%5B%22eip1559%22%5D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20workspaces%20%3D%20%220.5.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20anyhow%20%3D%20%221.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20%5Beth2near-block-relay-rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs)%20is%20built%20in%20rust%20and%20integrates%20with%20the%20Ethereum%202.0%20lgihthouse%20consensus%20client%20to%20propogate%20blocks%20to%20near.%0A%20%20%20%20-%20Functionality%20includes%20(from%20%5Blib.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Flib.rs))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20beacon_block_body_merkle_tree%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20beacon_rpc_client%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20config%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20eth1_rpc_client%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20eth2near_relay%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20execution_block_proof%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20hand_made_finality_light_client_update%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20init_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20last_slot_searcher%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20light_client_snapshot_with_proof%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20logger%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20near_rpc_client%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20prometheus_metrics%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20relay_errors%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Beth2near-block-relay-rs%2FCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2FCargo.toml))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20types%20%3D%20%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20merkle_proof%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth2_hashing%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth2_ssz%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20eth-types%20%3D%20%7B%20path%20%3D%20%22..%2F..%2Fcontracts%2Fnear%2Feth-types%2F%22%2C%20features%20%3D%20%5B%22eip1559%22%5D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth2-utility%20%20%3D%20%7B%20path%20%3D%20%22..%2F..%2Fcontracts%2Fnear%2Feth2-utility%22%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20contract_wrapper%20%3D%20%7B%20path%20%3D%20%22..%2Fcontract_wrapper%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20finality-update-verify%20%3D%20%7B%20path%20%3D%20%22..%2Ffinality-update-verify%22%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20log%20%3D%20%7B%20version%20%3D%20%220.4%22%2C%20features%20%3D%20%5B%22std%22%2C%20%22serde%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20serde_json%20%3D%20%221.0.74%22%0A%20%20%20%20%20%20%20%20%20%20%20%20serde%20%3D%20%7B%20version%20%3D%20%221.0%22%2C%20features%20%3D%20%5B%22derive%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20ethereum-types%20%3D%20%220.9.2%22%0A%20%20%20%20%20%20%20%20%20%20%20%20reqwest%20%3D%20%7B%20version%20%3D%20%220.11%22%2C%20features%20%3D%20%5B%22blocking%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20clap%20%3D%20%7B%20version%20%3D%20%223.1.6%22%2C%20features%20%3D%20%5B%22derive%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20tokio%20%3D%20%7B%20version%20%3D%20%221.1%22%2C%20features%20%3D%20%5B%22macros%22%2C%20%22rt%22%2C%20%22time%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20env_logger%20%3D%20%220.9.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20borsh%20%3D%20%220.9.3%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-sdk%20%3D%20%224.0.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20futures%20%3D%20%7B%20version%20%3D%20%220.3.21%22%2C%20default-features%20%3D%20false%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20async-std%20%3D%20%221.12.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20hex%20%3D%20%22*%22%0A%20%20%20%20%20%20%20%20%20%20%20%20toml%20%3D%20%220.5.9%22%0A%20%20%20%20%20%20%20%20%20%20%20%20atomic_refcell%20%3D%20%220.1.8%22%0A%20%20%20%20%20%20%20%20%20%20%20%20bitvec%20%3D%20%22*%22%0A%20%20%20%20%20%20%20%20%20%20%20%20primitive-types%20%3D%20%220.7.3%22%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20near-jsonrpc-client%20%3D%20%22%3D0.4.0-beta.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-crypto%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-primitives%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-chain-configs%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-jsonrpc-primitives%20%3D%20%220.14.0%22%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20prometheus%20%3D%20%7B%20version%20%3D%20%220.9%22%2C%20features%20%3D%20%5B%22process%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20lazy_static%20%3D%20%221.4%22%0A%20%20%20%20%20%20%20%20%20%20%20%20warp%20%3D%20%220.2%22%0A%20%20%20%20%20%20%20%20%20%20%20%20thread%20%3D%20%22*%22%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20%5Beth2near-block-relay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay)%20is%20built%20using%20javascript%20and%20supports%20ETH%201.0%20Proof%20of%20Work%20(%60ethhash%60)%20using%20merkle%20patrica%20trees.%0A%20%20%20%20-%20key%20classes%20from%20%5Bindex.js%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay%2Findex.js)%20include%0A%20%20%20%20%20%20-%20%60Ethashproof%60%20%3A%20which%20has%20functions%20to%20%60getParseBlock%60%20and%20%60calculateNextEpoch%60%0A%20%20%20%20%20%20-%20%60Eth2NearRelay%60%20%3A%20which%20interacts%20with%20the%20%60ethClientContract%60%20and%20has%20a%20%60run()%60%20function%20which%20loops%20through%20relaying%20blocks%20and%20includes%20additional%20functions%20such%20as%20%60getParseBlock%60%20%2C%20%60submitBlock%60%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Bpackage.json%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay%2Fpackage.json))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%22dependencies%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22bn.js%22%3A%20%22%5E5.1.3%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22eth-object%22%3A%20%22https%3A%2F%2Fgithub.com%2Fnear%2Feth-object%23383b6ea68c7050bea4cab6950c1d5a7fa553e72b%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22eth-util-lite%22%3A%20%22near%2Feth-util-lite%23master%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22%40ethereumjs%2Fblock%22%3A%20%22%5E3.4.0%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22merkle-patricia-tree%22%3A%20%22%5E2.1.2%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22prom-client%22%3A%20%22%5E12.0.0%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22promisfy%22%3A%20%22%5E1.2.0%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22rainbow-bridge-utils%22%3A%20%221.0.0%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22got%22%3A%20%22%5E11.8.5%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20%5Bethhashproof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Fethashproof)%3A%20is%20a%20commandline%20to%20calculate%20proof%20data%20for%20an%20ethash%20POW%2C%20it%20is%20used%20by%20project%20%60SmartPool%60%20and%20a%20decentralizedbridge%20between%20Etherum%20and%20EOS%20developed%20by%20Kyber%20Network%20team.%20It%20is%20written%20in%20%60GO%60.%0A%20%20%20%20-%20Features%20Include%201.%20Calculate%20merkle%20root%20of%20the%20ethash%20dag%20dataset%20with%20given%20epoch%202.%20Calculate%20merkle%20proof%20of%20the%20pow%20(dataset%20elements%20and%20their%20merkle%20proofs)%20given%20the%20pow%20submission%20with%20given%20block%20header%203.%20Generate%20dag%20datase%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Bethahsproof%2Fgo.mod%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fethashproof%2Fgo.mod))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20require%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%20github.com%2Fdeckarep%2Fgolang-set%20v1.7.1%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20github.com%2Fedsrzf%2Fmmap-go%20v1.0.0%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20github.com%2Fethereum%2Fgo-ethereum%20v1.10.4%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20github.com%2Fhashicorp%2Fgolang-lru%20v0.5.5-0.20210104140557-80c98217689d%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20golang.org%2Fx%2Fcrypto%20v0.0.0-20210322153248-0c34fe9e7dc2%0A%20%20%20%20%20%20%20%20%20%20%20%20)%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20%5Bfinality-update-verify%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Ffinality-update-verify)%20checks%20and%20updates%20finality%20using%20the%20lighthouse%20beacon%20blocks.%0A%20%20%20%20-%20Functions%20include%20(from%20%5Blib.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2Fsrc%2Flib.rs))%0A%20%20%20%20%20%20-%20%60fn%20h256_to_hash256(hash%3A%20H256)%20-%3E%20Hash256%60%0A%20%20%20%20%20%20-%20%60fn%20tree_hash_h256_to_eth_type_h256(hash%3A%20tree_hash%3A%3AHash256)%20-%3E%20eth_types%3A%3AH256%60%0A%20%20%20%20%20%20-%20%60fn%20to_lighthouse_beacon_block_header(bridge_beacon_block_header%3A%20%26BeaconBlockHeader%2C)%20-%3E%20types%3A%3ABeaconBlockHeader%20%7Btypes%3A%3ABeaconBlockHeader%60%0A%20%20%20%20%20%20-%20%60pub%20fn%20is_correct_finality_update(ethereum_network%3A%20%26str%2C%20light_client_update%3A%20%26LightClientUpdate%2C%20sync_committee%3A%20SyncCommittee%2C%20)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Bfinality-update-verify%2FCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2FCargo.toml))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bdependencies%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20eth-types%20%3D%20%7B%20path%20%3D%22..%2F..%2Fcontracts%2Fnear%2Feth-types%2F%22%2C%20features%20%3D%20%5B%22eip1559%22%5D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20bls%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20eth2-utility%20%20%3D%20%7B%20path%20%3D%22..%2F..%2Fcontracts%2Fnear%2Feth2-utility%22%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20types%20%3D%20%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20bitvec%20%3D%20%221.0.0%22%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Bdev-dependencies%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20eth2_to_near_relay%20%3D%20%7B%20path%20%3D%20%22..%2Feth2near-block-relay-rs%22%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20serde_json%20%3D%20%221.0.74%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20serde%20%3D%20%7B%20version%20%3D%20%221.0%22%2C%20features%20%3D%20%5B%22derive%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20toml%20%3D%20%220.5.9%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0AThe%20following%20smart%20contracts%20are%20deployed%20on%20Ethereum%20and%20used%20for%20propogating%20blocks%20from%20NEAR%20to%20Ethereum.%0A%0A-%20%5BSmart%20Contracts%20deployed%20on%20Ethereum%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth)%20including%0A%20%20-%20%5BNear%20Bridge%20Contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts)%20including%20%5BNearBridge.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearBridge.sol)%20which%20the%20interface%20%5BINearBridge.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FINearBridge.sol)%0A%20%20-%20Interface%20Overview%0A%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20interface%20INearBridge%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20event%20BlockHashAdded(uint64%20indexed%20height%2C%20bytes32%20blockHash)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20event%20BlockHashReverted(uint64%20indexed%20height%2C%20bytes32%20blockHash)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20blockHashes(uint64%20blockNumber)%20external%20view%20returns%20(bytes32)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20blockMerkleRoots(uint64%20blockNumber)%20external%20view%20returns%20(bytes32)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20balanceOf(address%20wallet)%20external%20view%20returns%20(uint256)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20deposit()%20external%20payable%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20withdraw()%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20initWithValidators(bytes%20calldata%20initialValidators)%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20initWithBlock(bytes%20calldata%20data)%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20addLightClientBlock(bytes%20calldata%20data)%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20challenge(address%20payable%20receiver%2C%20uint256%20signatureIndex)%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20checkBlockProducerSignatureInHead(uint256%20signatureIndex)%20external%20view%20returns%20(bool)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20Key%20Storage%20items%20for%20epoch%20and%20block%20information%0A%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20Epoch%5B3%5D%20epochs%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20uint256%20curEpoch%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20mapping(uint64%20%3D%3E%20bytes32)%20blockHashes_%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20mapping(uint64%20%3D%3E%20bytes32)%20blockMerkleRoots_%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20mapping(address%20%3D%3E%20uint256)%20public%20override%20balanceOf%3B%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20Signing%20and%20Serializing%20Primitives%0A%20%20%20%20-%20%5BNearDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearDecoder.sol)%3A%20handles%20decoing%20of%20Public%20Keys%2C%20Signatures%2C%20BlockProducers%20and%20LightClientBlocks%20using%20%60Borsh.sol%60%0A%20%20%20%20-%20%5BUtils.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FUtils.sol)%3A%20handles%20reading%20and%20writing%20to%20memory%2C%20memoryToBytes%20and%20has%20functions%20such%20as%20%60keccak256Raw%60%20and%20%60sha256Raw%60%0A%20%20%20%20-%20%5BBorsh.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FBorsh.sol)%3A%20%5BBorsh%5D(https%3A%2F%2Fborsh.io%2F)%3A%20Binary%20Object%20Representation%20Serializer%20for%20Hashing.%20It%20is%20meant%20to%20be%20used%20in%20security-critical%20projects%20as%20it%20prioritizes%20consistency%2C%20safety%2C%20speed%3B%20and%20comes%20with%20a%20strict%20specification.%0A%20%20%20%20-%20%5BEd25519.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FEd25519.sol)%3A%20%5BEd25519%5D(https%3A%2F%2Fed25519.cr.yp.to%2F)%20high-speed%20high-security%20signatures%0A%0A%20%20-%20%5BNear%20Prover%20Contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts)%0A%20%20%20%20-%20%5BNearProver.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FNearProver.sol)%3A%20Has%20a%20%60proveOutcome%60%20which%20validates%20the%20outcome%20merkle%20proof%20and%20the%20block%20proof%20is%20valid%20using%20%60_computeRoot%60%20which%20is%20passed%20in%20a%20%60bytes32%20node%2C%20ProofDecoder.MerklePath%20memory%20proof%60%0A%20%20%20%20-%20%5BProofDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FProofDecoder.sol)%3A%20Uses%20MerklePaths%20to%20provide%20decoding%20functions%20such%20as%20%60decodeExecutionStatus%60%2C%20%60decodeExecutionOutcome%60%2C%20%60decodeExecutionOutcomeWithId%60%2C%20%60decodeMerklePathItem%60%2C%20%60decodeMerklePath%60%20and%20%60decodeExecutionOutcomeWithIdAndProof%60.%20It%20relies%20on%20the%20primitives%20%60Borsh.sol%60%20and%20%60NearDecoder.sol%60%20above.%0A%0A%23%23%23%20Appendix%20J%20-%20Ethereum%20to%20NEAR%20Walkthrough%0A%0AFollowing%20is%20a%20walkthough%20of%20a%20funds%20transfer%20from%20Ethereum%20to%20a%20target%20chain%20(In%20this%20example%20Near)%2C%20complete%20with%20light%20client%20updates%2C%20block%20propogation%20and%20proofs%20to%20ensure%20the%20transaction%20validity.%0A%0A!%5BEthereum%20to%20Near%20Funds%20Transfer%5D(%2Fposts%2F2023-02-05-ethereum-bridging-costs%2Feth2NearFundsTransfer.jpg%20%22Ethereum%20to%20NEAR%20Funds%20Transfer%22)%0A%0A**Actors**%0AFrom%20the%20diagram%20above%20you'll%20notice%20that%20there%20are%20many%20actors%20involved%2C%20below%20is%20an%20overview%20of%20the%20actors%20and%20the%20operations%20they%20perform.%0A%0A-%20Accounts%0A%20%20-%20%5BUser%20Account%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x29da2ef94deeaf2d2f9003e9354abfcb1ff04b32)%20%3A%20The%20user%20is%20the%20owner%20of%20the%20funds%20being%20transferred%20and%20is%20responsible%20for%20signing%20the%20transactions%20to%20authorize%20bridging%20them%20accross%20chains.%20In%20this%20example%20they%20have%20accounts%20on%20%5BEthereum%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x29da2ef94deeaf2d2f9003e9354abfcb1ff04b32)%20and%20%5BNEAR%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fjohnrubini.near%23tokentxns)%0A%20%20-%20%5BTarget%20Chain%20Relayer%20Acccount%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Frelayer.bridge.near)%3A%20The%20relayer%20account%20is%20responsible%20for%20relaying%20messages%20from%20Ethereum%20to%20the%20target%20chain.%20%5C*Note%20this%20is%20connected%20to%20a%20relayer%20which%20is%20responsible%20for%20tasks%20such%20as%20querying%20latest%20block%20headers%20and%20getting%20light%20client%20status%20updates.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs).%0A%20%20-%20%5BTarget%20Chain%20Bridge%20Validator%20Accounts%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator1.near)%3A%20are%20responsible%20for%20validating%20light%20client%20update%20proposals%20and%20sending%20approval%20votes%20to%20%5BDAO%20Eth%20Client%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near).%0A-%20Ethereum%20Components%0A%20%20-%20%5BERC20%20Token%20Contract%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0xdac17f958d2ee523a2206206994597c13d831ec7%23code)%3A%20this%20is%20the%20token%20contract%20securing%20the%20funds%20in%20this%20examle%20USDT%20(Tether).%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2FOpenZeppelin%2Fopenzeppelin-contracts%2Fblob%2Frelease-v4.8%2Fcontracts%2Ftoken%2FERC20%2Fpresets%2FERC20PresetMinterPauser.sol)%0A%20%20-%20%5BBridge%20Contract%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x23ddd3e3692d1861ed57ede224608875809e127f%23code)%3A%20Responsible%20for%20deposits%20and%20withdrawals%20of%20tokens%20on%20Ethereum%20as%20well%20as%20various%20proving%20and%20propogation%20mechanisms%20such%20as%20checking%20of%20Signatures%20and%20adding%20Light%20Client%20Blocks.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearBridge.sol)%0A-%20Target%20Chain%20(NEAR)%20Components%0A%20%20-%20%5BValidator%20DAO%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%3A%20Responsible%20for%20receivng%20light%20client%20update%20proposals%20from%20the%20relayer%20and%20gathering%20approval%20votes%20for%20these%20propoals%20from%20Validators%20and%20submitting%20light%20client%20updates%20once%20the%20proposal%20is%20approved%20by%20the%20Validators.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Fdao_eth_client_contract.rs)%0A%20%20-%20%5BEtherum%202%20Client%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near)%3A%20The%20Ethereum%202%20client%20is%20responsbile%20for%20processing%20light%20client%20updates%20and%20receiving%20execution%20header%20blocks%20from%20Ethereum%20via%20the%20relayer.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs).%20_Note%3A%20this%20replaced%20the%20%5BEthereum%201%20client%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near)%20source%20code%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth-client%2Fsrc%2Flib.rs)_%0A%20%20-%20%5BEthereum%20Prover%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fprover.bridge.near)%20%3A%20The%20Ethereum%20Prover%20is%20used%20to%20prove%20transactions%20are%20included%20in%20a%20valid%20block%20Header.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth-prover%2Fsrc%2Flib.rs)%0A%20%20-%20%5BBridge%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Ffactory.bridge.near%23contract)%3A%20The%20Bridge%20contract%20is%20responsible%20for%20managing%20tokens%20including%20creating%20new%20tokens%2C%20setting%20metadata%20and%20depositing%20and%20withdrawal%20of%20tokens.%20Source%20code%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Fbridge-token-factory%2Fsrc%2Flib.rs).%0A%20%20%20%20-%20%5BNEAR%20Token%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Ftoken%2Fdac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near%3Fa%3Ddac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near)%3A%20The%20target%20chain%20representation%20of%20the%20token%20(USDT)%20managed%20by%20the%20target%20chain%20bridge%20contract.%0A%0A**Sample%20TransactionFlow**%0A%0A1.%20Block%20Propogation%0A%20%20%201.%20Get%20the%20Latest%20Slot%3A%20The%20relayer%20loops%20polling%20Ethereum%20every%2012%20seconds%20to%20get%20the%20latest%20slot.%20It%20then%20checks%20if%20it%20is%20for%20a%20new%20epoch%20and%20if%20so%20(every%206%20minutes)%20submits%20an%20execution%20header%20(with%2032%20blocks%20in%20it)%20and%20a%20light%20client%20update%20with%20the%20latest%20approved%20epochs%20and%20updated%20sync_comittee.%20Relayer%20source%20code%20for%20the%20loop%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L258)%20for%20retrieving%20the%20latest%20slot%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L163)%2C%20for%20submitting%20execution%20blocks%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L399)%20and%20for%20sending%20light%20client%20updates%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L489).%0A%20%20%20%20%20%201.%20%5BSend%20Block%20Headers%20(submit_execution_header)%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FHaXUxCvA1D87QXJzPzSYXmFYNuSLbTmyuxShzWgSLvPM)%3A%20Batch%20transaction%20which%20submits%2032%20block%20headers%20to%20%5Bclient-eth2.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near)%20for%20Ethereum%20Blocks%2016493592%20to%2016493623.%20(The%20second%20slot%20in%20epoch%20%5B176%2C936%5D(https%3A%2F%2Fbeaconcha.in%2Fepoch%2F176936)%20to%20the%20first%20slot%20in%20epoch%20%5B176%2C937%5D(https%3A%2F%2Fbeaconcha.in%2Fepoch%2F176937)).%20**Executed%20every%206%20minutes%20when%20the%20first%20slot%20of%20a%20new%20epoch%20is%20found.**%0A%20%20%20%20%20%202.%20%5BCreate%20Light%20Client%20update%20proposal(add_proposal)%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FJ1tQ465Dxt4UhWy9Msn2pZCbdkWatSepqsx9sDZaX35z%23)%3A%20calls%20%5Bbridge-validator.sputnik-dao.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%20to%20add%20proposal%2017410%20for%20%5Bslot%205%2C661%2C984%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5661984)%20in%20epoch%20%5B176%2C937%5D(https%3A%2F%2Fbeaconcha.in%2Fepoch%2F176937).%0A%20%20%202.%20%5BApprove%20Proposal%20(act_proposal)%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FD5uP4BbRSUX4ZGijRfWGkR5KbFb2Kb9q1gSsFVQbYSLt)%3A%20sends%20a%20VoteApprove%20action%20for%20proposal%2017410%20from%20a%20%5Bbridge%20validator%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator1.near)%20to%20the%20%5BValidator%20DAO%20Contract%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near).%0A%20%20%20%20%20%201.%20act_proposal%20in%20contract%20%5Bbridge-validator.sputnik-dao.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%0A%20%20%20%20%20%202.%20submit_beacon_chain_light_client_update%20in%20%5Bclient-eth2.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near)%0A%20%20%20%20%20%203.%20on_proposal_callback%20in%20contract%20%5Bbridge-validator.sputnik-dao.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%0A2.%20Funds%20Transfer%20Transaction%20Flow%0A%20%20%201.%20%5BLock%20Funds%20On%20Ethereum%5D(https%3A%2F%2Fetherscan.io%2Ftx%2F0xa685c59a24cc2056e10e660ce8a8bff7bbc335433698e138c77aaadf20ecb614)%3A%20Locking%2010%2C000%20USDT%20to%20send%20to%20user%20on%20NEAR.%0A%20%20%202.%20%5BDeposit%20Funds%20on%20Target%20Chain%20Bridge%20Contract%20(deposit)%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FvniyRR67ndrtvpoQ9c5ACoT4e9c283VSQsrZcN6GGto%23execution)%0A%20%20%20%20%20%201.%20deposit%20in%20contract%20factory.bridge.near%0A%20%20%20%20%20%202.%20verify_log_entry%20in%20contract%20prover.bridge.near%0A%20%20%20%20%20%203.%20block_hash_safe%20in%20contract%20client-eth2.bridge.near%0A%20%20%20%20%20%204.%20finish_deposit%20in%20contract%20factory.bridge.near%20%3A%20mint%20of%2010%2C000%20USDT.%0A%0A**TODO**%0A%0A-%20Find%20and%20review%20the%20source%20code%20for%20the%20%5Bvalidator%20light%20client%20approval%20update%5D(https%3A%2F%2Fnearblocks.io%2Ftxns%2FHnzBR7x5Sxnmcm4MfRt1ghhMjJNspDaygUUKeM9T27Li%23execution).%20_Note%3A%20the%20eth2_client%20has%20a%20%5Bvalidate_light_client_update%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs%23L311)%20which%20is%20%5Bconfigurable%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs%23L42)%20and%20is%20used%20for%20debugging%20purposes._%0A%0A**Bridging%20Resources%20Required**%0A%0AHere%20is%20the%20storage%20and%20compuational%20costs%20per%20component.%0A%0A%7C%20Component%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Data%20%20%20%20%20%20%20%20%20%20%20%7C%20Storage%20%7C%20Notes%20%7C%0A%7C%20---------------------------------------------------------------------------------------------------------------------------%20%7C%20--------------%20%7C%20-------%20%7C%20-----%20%7C%0A%7C%20%5BEthereum%202%20Client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs%23L35)%20%7C%20---%20%20%20%20%20%20%20%20%20%20%20%20%7C%20---%20%20%20%20%20%7C%20---%20%20%20%7C%0A%7C%20%5BProver%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth-prover%2Fsrc%2Flib.rs)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20not%20applicable%20%7C%200%20bytes%20%7C%20%20%20%20%20%20%20%7C%0A%7C%20%5BDAO%20Contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Fdao_contract.rs)%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%7C%0A%0A**TODO**%0AReview%20the%20following%20data%20structure%20and%20elements%20and%20move%20into%20the%20table%20above%20commenting%20on%20any%20mandatory%20requirements%20and%20structures%20that%20can%20be%20improved.%0A%0A%60%60%60%0Apub%20struct%20Eth2Client%20%7B%0A%20%20%20%20%2F%2F%2F%20If%20set%2C%20only%20light%20client%20updates%20by%20the%20trusted%20signer%20will%20be%20accepted%0A%20%20%20%20trusted_signer%3A%20Option%3CAccountId%3E%2C%0A%20%20%20%20%2F%2F%2F%20Mask%20determining%20all%20paused%20functions%0A%20%20%20%20paused%3A%20Mask%2C%0A%20%20%20%20%2F%2F%2F%20Whether%20the%20client%20validates%20the%20updates.%0A%20%20%20%20%2F%2F%2F%20Should%20only%20be%20set%20to%20%60false%60%20for%20debugging%2C%20testing%2C%20and%20diagnostic%20purposes%0A%20%20%20%20validate_updates%3A%20bool%2C%0A%20%20%20%20%2F%2F%2F%20Whether%20the%20client%20verifies%20BLS%20signatures.%0A%20%20%20%20verify_bls_signatures%3A%20bool%2C%0A%20%20%20%20%2F%2F%2F%20We%20store%20the%20hashes%20of%20the%20blocks%20for%20the%20past%20%60hashes_gc_threshold%60%20headers.%0A%20%20%20%20%2F%2F%2F%20Events%20that%20happen%20past%20this%20threshold%20cannot%20be%20verified%20by%20the%20client.%0A%20%20%20%20%2F%2F%2F%20It%20is%20desirable%20that%20this%20number%20is%20larger%20than%207%20days'%20worth%20of%20headers%2C%20which%20is%20roughly%0A%20%20%20%20%2F%2F%2F%2051k%20Ethereum%20blocks.%20So%20this%20number%20should%20be%2051k%20in%20production.%0A%20%20%20%20hashes_gc_threshold%3A%20u64%2C%0A%20%20%20%20%2F%2F%2F%20Network.%20e.g.%20mainnet%2C%20kiln%0A%20%20%20%20network%3A%20Network%2C%0A%20%20%20%20%2F%2F%2F%20Hashes%20of%20the%20finalized%20execution%20blocks%20mapped%20to%20their%20numbers.%20Stores%20up%20to%20%60hashes_gc_threshold%60%20entries.%0A%20%20%20%20%2F%2F%2F%20Execution%20block%20number%20-%3E%20execution%20block%20hash%0A%20%20%20%20finalized_execution_blocks%3A%20LookupMap%3Cu64%2C%20H256%3E%2C%0A%20%20%20%20%2F%2F%2F%20All%20unfinalized%20execution%20blocks'%20headers%20hashes%20mapped%20to%20their%20%60HeaderInfo%60.%0A%20%20%20%20%2F%2F%2F%20Execution%20block%20hash%20-%3E%20ExecutionHeaderInfo%20object%0A%20%20%20%20unfinalized_headers%3A%20UnorderedMap%3CH256%2C%20ExecutionHeaderInfo%3E%2C%0A%20%20%20%20%2F%2F%2F%20%60AccountId%60s%20mapped%20to%20their%20number%20of%20submitted%20headers.%0A%20%20%20%20%2F%2F%2F%20Submitter%20account%20-%3E%20Num%20of%20submitted%20headers%0A%20%20%20%20submitters%3A%20LookupMap%3CAccountId%2C%20u32%3E%2C%0A%20%20%20%20%2F%2F%2F%20Max%20number%20of%20unfinalized%20blocks%20allowed%20to%20be%20stored%20by%20one%20submitter%20account%0A%20%20%20%20%2F%2F%2F%20This%20value%20should%20be%20at%20least%2032%20blocks%20(1%20epoch)%2C%20but%20the%20recommended%20value%20is%201024%20(32%20epochs)%0A%20%20%20%20max_submitted_blocks_by_account%3A%20u32%2C%0A%20%20%20%20%2F%2F%20The%20minimum%20balance%20that%20should%20be%20attached%20to%20register%20a%20new%20submitter%20account%0A%20%20%20%20min_storage_balance_for_submitter%3A%20Balance%2C%0A%20%20%20%20%2F%2F%2F%20Light%20client%20state%0A%20%20%20%20finalized_beacon_header%3A%20ExtendedBeaconBlockHeader%2C%0A%20%20%20%20finalized_execution_header%3A%20LazyOption%3CExecutionHeaderInfo%3E%2C%0A%20%20%20%20current_sync_committee%3A%20LazyOption%3CSyncCommittee%3E%2C%0A%20%20%20%20next_sync_committee%3A%20LazyOption%3CSyncCommittee%3E%2C%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Appendix%20K%20-%20Explorer%20and%20Interactive%20Links%0A%0A-%20Near%0A%20%20-%20eth-prover%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Frelayer.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Frelayer.bridge.near)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient-eth2.bridge.near)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near)%0A%20%20-%20eth-client%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fprover.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fprover.bridge.near)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fclient.bridge.near)%0A%20%20-%20factory%20(manages%20tokens)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Ffactory.bridge.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Ffactory.bridge.near)%0A%20%20-%20dao%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Fbridge-validator.sputnik-dao.near)%0A%20%20-%20aurora%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Faurora%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Faurora)%0A%20%20%20%20-%20%5Bhttps%3A%2F%2Fnearblocks.io%2Faddress%2Frelay.aurora%5D(https%3A%2F%2Fnearblocks.io%2Faddress%2Frelay.aurora)%0A%0A-%20Ethereum%0A%20%20-%20%5Bbeaconcha.in%5D(https%3A%2F%2Fbeaconcha.in%2F)%0A%20%20%20%20-%20%5Bvalidators%5D(https%3A%2F%2Fbeaconcha.in%2Fvalidators)%0A%20%20%20%20-%20%5Bepochs%5D(https%3A%2F%2Fbeaconcha.in%2Fepochs)%0A%20%20%20%20-%20%5Bslots%5D(https%3A%2F%2Fbeaconcha.in%2Fslots)%0A%20%20%20%20-%20%5Bblocks%5D(https%3A%2F%2Fbeaconcha.in%2Fblocks)%0A%20%20%20%20-%20%5Btransactions%5D(https%3A%2F%2Fbeaconcha.in%2Ftransactions)%0A%20%20-%20Near%20Bridge%0A%20%20%20%20-%20%5BNearBridge%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x3fefc5a4b1c02f21cbc8d3613643ba0635b9a873)%0A%20%20%20%20-%20%5BERC20Locker%5D(https%3A%2F%2Fetherscan.io%2Ftx%2F0xa685c59a24cc2056e10e660ce8a8bff7bbc335433698e138c77aaadf20ecb614)%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./polymerlabs-BUwdOg2Y.js"),[]),path:"/research/bridge/polymerlabs",type:"mdx",filePath:"research/bridge/polymerlabs.mdx",content:"%23%20Polymer%20Labs%0A%0A-%20date%3A%202023-02-24%0A-%20last%20updated%3A%202023-02-24%0A%0A%23%23%20Overview%0A%0APolymer%E2%80%99s%5B%5Eov-1%5D%20modular%20IBC%5B%5Eov-2%5D%20design%20allows%20for%20chains%2C%20like%20Ethereum%5B%5Eov-3%5D%2C%20to%20easily%20integrate%20IBC%20transport%20and%20become%20interoperable%20across%20all%20ecosystems%20in%20a%20decentralized%20manner.%0A%0AOur%20protocol%20combines%20a%20novel%20consensus%20engine%5B%5Eov-4%5D%2C%20zero%20knowledge%20technology%5B%5Eov-5%5D%2C%20and%20modular%20IBC%5B%5Eov-6%5D%20to%20create%20the%20most%20efficient%20and%20scalable%20IBC%20routing%20solution.%0APolymer%20is%20the%20first%20chain%20dedicated%20to%20the%20routing%20of%20IBC%20packets.%0A%0A%23%23%20Approach%0A%0A%23%23%20Sample%20Process%20Flow%0A%0A%23%23%20Design%20Notes%0A%0A%23%23%20Code%20Review%0A%0A-%20%5Bplonky2%5D(https%3A%2F%2Fgithub.com%2Fmir-protocol%2Fplonky2)%3A%20a%20SNARK%20implementation%20based%20on%20techniques%20from%20PLONK%20and%20FRI.%20It%20has%20since%20expanded%20to%20include%20tools%20such%20as%20Starky%2C%20a%20highly%20performant%20STARK%20implementation.%0A%20%20-%20%5Bplonky2-solidity-verifier%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-solidity-verifier)%0A%20%20-%20%5Bplonky2-circom%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-circom)%3A%20Plonky2%20verifier%20in%20Circom%0A%20%20-%20%5Bplonky2-ed25519%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-ed25519)%3A%20SNARK%20verification%20circuits%20of%20a%20digital%20signature%20scheme%20Ed25519%20implemented%20with%20Plonky2.%0A%20%20-%20%5Bplonky2-sha256%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-sha256)%3A%20SNARK%20circuits%20of%20a%20cryptographic%20hash%20function%20SHA-256%20implemented%20with%20Plonky2.%0A%20%20-%20%5Bplonky2-sha512%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-sha512)%3A%20SNARK%20circuits%20of%20a%20cryptographic%20hash%20function%20SHA-512%20implemented%20with%20Plonky2.%0A%20%20-%20%5Bplonky2-pairing%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-pairing)%0A%0A%23%23%23%20Signing%20Mechanisms%0A%0A%23%23%23%20Cryptographic%20Primitives%0A%0A%23%23%23%20Proving%20Mechanisms%0A%0A%23%23%23%20Relayer%20Mechanisms%0A%0A%23%23%23%20Light%20Client%20Functionality%0A%0A%23%23%23%20Token%20Lockers%0A%0A%23%23%20References%0A%0A%23%23%20Appendices%0A%0A%23%23%20Footnotes%0A%0A%5B%5Eov-1%5D%3A%20%5BAn%20Introduction%20to%20Polymer%20Labs%2C%20Cosmos%2C%20and%20IBC%20(Inter-Blockchain%20Communication)%5D(https%3A%2F%2Fpolymerlabs.medium.com%2Fan-introduction-to-polymer-labs-cosmos-and-ibc-inter-blockchain-communication-b9f941ee2cdb)%3A%20Polymer%20Chain%20provides%20a%20seamless%20way%20to%20provide%20cross%20chain%20communication%20by%20utilizing%20IBC%20to%20connect%20chains%20even%20when%20they%20may%20not%20support%20IBC%20natively.%0A%0A%5B%5Eov-2%5D%3A%20%5BINTER%E2%80%91BLOCKCHAIN%20COMMUNICATION%20PROTOCOL%5D(https%3A%2F%2Fibcprotocol.org%2F)%3A%20IBC%20is%20an%20interoperability%20protocol%20for%20communicating%20arbitrary%20data%20between%20arbitrary%20state%20machines.%0A%0A%5B%5Eov-3%5D%3A%20%5BThe%20Multi-hop%20IBC%20upgrade%20will%20take%20IBC%20to%20Ethereum%20and%20beyond%5D(https%3A%2F%2Fpolymerlabs.medium.com%2Fthe-multi-hop-ibc-upgrade-will-take-ibc-to-ethereum-and-beyond-b4bee43523e)%3A%20A%20discussion%20on%20some%20key%20areas%20of%20improvement%20that%20Polymer%20is%20tackling%20to%20upgrade%20IBC%20functionality%20and%20expand%20the%20IBC%20network%20across%20the%20industry.%0A%0A%5B%5Eov-4%5D%3A%20%5BzkMint%3A%20The%20First%20ZK-friendly%20Tendermint%20Consensus%20Engine%5D(https%3A%2F%2Fpolymerlabs.medium.com%2Fzkmint-the-first-zk-friendly-tendermint-consensus-engine-116000b9d4f9)%3A%20Polymer%E2%80%99s%20solution%20that%20optimizes%20IBC%20across%20all%20major%20chains.%0A%0A%5B%5Eov-5%5D%3A%20%5BDeveloping%20the%20Most%20Truly%20Decentralized%20Interoperability%20Solution%20%3A%20Polymer%20ZK-IBC%5D(https%3A%2F%2Fpolymerlabs.medium.com%2Fdeveloping-the-most-truly-decentralized-interoperability-solution-polymer-zk-ibc-f0287ea84a2b)%3A%20ZK-IBC%20allows%20different%20blockchain%20protocols%20to%20communicate%20with%20each%20other%20without%20trusting%20third%20parties.%20It%20does%20this%20by%20verifying%20the%20blockchain%20consensus%20on-chain.%0A%0A%5B%5Eov-6%5D%3A%20%5BModular%20IBC%20for%20the%20Modular%20World%5D(https%3A%2F%2Fpolymerlabs.medium.com%2Fmodular-ibc-for-the-modular-world-9fc021f6322e)%3A%20IBC%20network%20topology%20is%20changing%20from%20a%20homogenous%20and%20densely%20connected%20network%20to%20a%20heterogenous%20and%20sparsely%20connected%20network.%20Modular%20IBC%20adapts%20the%20IBC%20protocol%20to%20this%20dynamic%20environment.%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./polymerlabs-BUwdOg2Y.js"),[]),path:"/research/bridge/polymerlabs.html",type:"mdx",filePath:"research/bridge/polymerlabs.mdx",content:"%23%20Polymer%20Labs%0A%0A-%20date%3A%202023-02-24%0A-%20last%20updated%3A%202023-02-24%0A%0A%23%23%20Overview%0A%0APolymer%E2%80%99s%5B%5Eov-1%5D%20modular%20IBC%5B%5Eov-2%5D%20design%20allows%20for%20chains%2C%20like%20Ethereum%5B%5Eov-3%5D%2C%20to%20easily%20integrate%20IBC%20transport%20and%20become%20interoperable%20across%20all%20ecosystems%20in%20a%20decentralized%20manner.%0A%0AOur%20protocol%20combines%20a%20novel%20consensus%20engine%5B%5Eov-4%5D%2C%20zero%20knowledge%20technology%5B%5Eov-5%5D%2C%20and%20modular%20IBC%5B%5Eov-6%5D%20to%20create%20the%20most%20efficient%20and%20scalable%20IBC%20routing%20solution.%0APolymer%20is%20the%20first%20chain%20dedicated%20to%20the%20routing%20of%20IBC%20packets.%0A%0A%23%23%20Approach%0A%0A%23%23%20Sample%20Process%20Flow%0A%0A%23%23%20Design%20Notes%0A%0A%23%23%20Code%20Review%0A%0A-%20%5Bplonky2%5D(https%3A%2F%2Fgithub.com%2Fmir-protocol%2Fplonky2)%3A%20a%20SNARK%20implementation%20based%20on%20techniques%20from%20PLONK%20and%20FRI.%20It%20has%20since%20expanded%20to%20include%20tools%20such%20as%20Starky%2C%20a%20highly%20performant%20STARK%20implementation.%0A%20%20-%20%5Bplonky2-solidity-verifier%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-solidity-verifier)%0A%20%20-%20%5Bplonky2-circom%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-circom)%3A%20Plonky2%20verifier%20in%20Circom%0A%20%20-%20%5Bplonky2-ed25519%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-ed25519)%3A%20SNARK%20verification%20circuits%20of%20a%20digital%20signature%20scheme%20Ed25519%20implemented%20with%20Plonky2.%0A%20%20-%20%5Bplonky2-sha256%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-sha256)%3A%20SNARK%20circuits%20of%20a%20cryptographic%20hash%20function%20SHA-256%20implemented%20with%20Plonky2.%0A%20%20-%20%5Bplonky2-sha512%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-sha512)%3A%20SNARK%20circuits%20of%20a%20cryptographic%20hash%20function%20SHA-512%20implemented%20with%20Plonky2.%0A%20%20-%20%5Bplonky2-pairing%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-pairing)%0A%0A%23%23%23%20Signing%20Mechanisms%0A%0A%23%23%23%20Cryptographic%20Primitives%0A%0A%23%23%23%20Proving%20Mechanisms%0A%0A%23%23%23%20Relayer%20Mechanisms%0A%0A%23%23%23%20Light%20Client%20Functionality%0A%0A%23%23%23%20Token%20Lockers%0A%0A%23%23%20References%0A%0A%23%23%20Appendices%0A%0A%23%23%20Footnotes%0A%0A%5B%5Eov-1%5D%3A%20%5BAn%20Introduction%20to%20Polymer%20Labs%2C%20Cosmos%2C%20and%20IBC%20(Inter-Blockchain%20Communication)%5D(https%3A%2F%2Fpolymerlabs.medium.com%2Fan-introduction-to-polymer-labs-cosmos-and-ibc-inter-blockchain-communication-b9f941ee2cdb)%3A%20Polymer%20Chain%20provides%20a%20seamless%20way%20to%20provide%20cross%20chain%20communication%20by%20utilizing%20IBC%20to%20connect%20chains%20even%20when%20they%20may%20not%20support%20IBC%20natively.%0A%0A%5B%5Eov-2%5D%3A%20%5BINTER%E2%80%91BLOCKCHAIN%20COMMUNICATION%20PROTOCOL%5D(https%3A%2F%2Fibcprotocol.org%2F)%3A%20IBC%20is%20an%20interoperability%20protocol%20for%20communicating%20arbitrary%20data%20between%20arbitrary%20state%20machines.%0A%0A%5B%5Eov-3%5D%3A%20%5BThe%20Multi-hop%20IBC%20upgrade%20will%20take%20IBC%20to%20Ethereum%20and%20beyond%5D(https%3A%2F%2Fpolymerlabs.medium.com%2Fthe-multi-hop-ibc-upgrade-will-take-ibc-to-ethereum-and-beyond-b4bee43523e)%3A%20A%20discussion%20on%20some%20key%20areas%20of%20improvement%20that%20Polymer%20is%20tackling%20to%20upgrade%20IBC%20functionality%20and%20expand%20the%20IBC%20network%20across%20the%20industry.%0A%0A%5B%5Eov-4%5D%3A%20%5BzkMint%3A%20The%20First%20ZK-friendly%20Tendermint%20Consensus%20Engine%5D(https%3A%2F%2Fpolymerlabs.medium.com%2Fzkmint-the-first-zk-friendly-tendermint-consensus-engine-116000b9d4f9)%3A%20Polymer%E2%80%99s%20solution%20that%20optimizes%20IBC%20across%20all%20major%20chains.%0A%0A%5B%5Eov-5%5D%3A%20%5BDeveloping%20the%20Most%20Truly%20Decentralized%20Interoperability%20Solution%20%3A%20Polymer%20ZK-IBC%5D(https%3A%2F%2Fpolymerlabs.medium.com%2Fdeveloping-the-most-truly-decentralized-interoperability-solution-polymer-zk-ibc-f0287ea84a2b)%3A%20ZK-IBC%20allows%20different%20blockchain%20protocols%20to%20communicate%20with%20each%20other%20without%20trusting%20third%20parties.%20It%20does%20this%20by%20verifying%20the%20blockchain%20consensus%20on-chain.%0A%0A%5B%5Eov-6%5D%3A%20%5BModular%20IBC%20for%20the%20Modular%20World%5D(https%3A%2F%2Fpolymerlabs.medium.com%2Fmodular-ibc-for-the-modular-world-9fc021f6322e)%3A%20IBC%20network%20topology%20is%20changing%20from%20a%20homogenous%20and%20densely%20connected%20network%20to%20a%20heterogenous%20and%20sparsely%20connected%20network.%20Modular%20IBC%20adapts%20the%20IBC%20protocol%20to%20this%20dynamic%20environment.%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./snowbridge-DmM2nQj2.js"),[]),path:"/research/bridge/snowbridge",type:"mdx",filePath:"research/bridge/snowbridge.mdx",content:"%23%20Snowbridge%0A%0A-%20date%3A%202023-02-24%0A-%20last-updated%3A%202023-02-24%0A%0A%23%23%20Overview%0A%0ASnowbridge%20is%20a%20general%20purpose%2C%20trustless%20and%20decentralized%20bridge%20between%20Polkadot%20and%20Ethereum.%20The%20goal%20is%20to%20launch%20as%20common-good%20bridge%20on%20the%20proposed%20BridgeHub%20parachain.%0A**Quick%20Links**%0A%0A-%20Bridge%20Type%20%3A%20Proof%20Based%20Validity%20Proofs%0A-%20%5BDesign%5D(https%3A%2F%2Fdocs.snowbridge.network%2Farchitecture%2Foverview)%3A%20bridge%20has%20a%20layered%20architecture%2C%20inspired%20by%20networking%20protocols%20such%20as%20TCP%2FIP.%20At%20the%20lowest%20level%20we%20have%20channels%2C%20which%20send%20messages%20across%20the%20bridge.%20At%20the%20highest%20level%2C%20we%20have%20apps%2C%20which%20can%20invoke%20methods%20on%20apps%20living%20on%20foreign%20chains.%0A-%20%5BDocs%5D(https%3A%2F%2Fdocs.snowbridge.network%2F)%3A%20Snowbridge%20documentation%0A-%20%5BImplementation%20snowfork%20snowbridge%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge)%3A%20A%20trustless%20bridge%20between%20Polkadot%20and%20Ethereum.%0A-%20FronteEnd%3A%20Still%20Under%20Development%0A-%20%5BExplorer%5D(https%3A%2F%2Fpolkadot.subscan.io%2Fparachain)%3A%20Can%20be%20used%20to%20review%20if%20a%20common%20good%20parachain%20is%20deployed.%20Bridge%20messages%20will%20be%20displayed%20as%20Cross%20Chain%20Messages%20(XCM)%20on%20this%20%5Bxcm%20dashboard%5D(https%3A%2F%2Fpolkadot.subscan.io%2Fxcm_dashboard).%0A-%20%5BRoadmap%5D(https%3A%2F%2Fgateway.pinata.cloud%2Fipfs%2FQmfYGxQvyjVrgm9ajfzCysbuvLXdsRxP5R5HFjWcrj2yYY)%3A%20The%20%5BSnowbridge%20Funding%20Proposal%5D(https%3A%2F%2Fpolkadot.polkassembly.io%2Fpost%2F1341)%20includes%20a%20link%20to%20the%20%5Broadmap%5D(https%3A%2F%2Fgateway.pinata.cloud%2Fipfs%2FQmfYGxQvyjVrgm9ajfzCysbuvLXdsRxP5R5HFjWcrj2yYY)%20which%20details%20the%20milestones%20and%20rollout.%0A%0A%23%23%20Design%20Notes%0A%0A**%5Blight-client%20verification%20polkadot%5D(https%3A%2F%2Fdocs.snowbridge.network%2Farchitecture%2Fverification%2Fpolkadot)**%0A%0AWe%20use%20Polkadot%E2%80%99s%20BEEFY%20gadget%20to%20implement%20an%20efficient%20light%20client%20that%20only%20needs%20to%20verify%20a%20very%20small%20subset%20of%20relay%20chain%20validator%20signatures.%20BEEFY%20is%20live%20on%20Rococo%2C%20and%20is%20awaiting%20deployment%20on%20Kusama%20and%20Polkadot.%0AFundamentally%2C%20the%20BEEFY%20light%20client%20allows%20the%20bridge%20to%20prove%20that%20a%20specified%20parachain%20header%20was%20finalized%20by%20the%20relay%20chain.%0A%0A**%5BBEEFY%20light%20client%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fparity-bridges-common%2Fblob%2Fmaster%2Fmodules%2Fbeefy%2Fsrc%2Flib.rs)**%0A%0A%3E%20BEEFY%20bridge%20pallet.%0A%3E%0A%3E%20This%20pallet%20is%20an%20on-chain%20BEEFY%20light%20client%20for%20Substrate-based%20chains%20that%20are%20using%20the%20following%20pallets%20bundle%3A%20%60pallet-mmr%60%2C%20%60pallet-beefy%60%20and%20%60pallet-beefy-mmr%60.%0A%3E%0A%3E%20The%20pallet%20is%20able%20to%20verify%20MMR%20leaf%20proofs%20and%20BEEFY%20commitments%2C%20so%20it%20has%20access%20to%20the%20following%20data%20of%20the%20bridged%20chain%3A%0A%3E%0A%3E%20-%20header%20hashes%0A%3E%20-%20changes%20of%20BEEFY%20authorities%0A%3E%20-%20extra%20data%20of%20MMR%20leafs%0A%3E%0A%3E%20Given%20the%20header%20hash%2C%20other%20pallets%20are%20able%20to%20verify%20header-based%20proofs%20(e.g.%20storage%20proofs%2C%20transaction%20inclusion%20proofs%2C%20etc.).%0A%0A**%5Blight-client%20verification%20ethereum%5D(https%3A%2F%2Fdocs.snowbridge.network%2Farchitecture%2Fverification%2Fethereum)**%0A%0AWe%20have%20implemented%20a%20Proof-of-Stake%20(PoS)%20light%20client%20for%20the%20Beacon%20chain.%20This%20client%20deprecates%20the%20older%20PoW%20light%20client%20we%20developed%20in%202020.%0A%0AThe%20beacon%20client%20tracks%20the%20beacon%20chain%2C%20the%20new%20Ethereum%20chain%20that%20will%20replace%20Ethereum's%20Proof-of-Work%20consensus%20method%20around%20mid-September%2C%20called%20the%20Merge.%20The%20work%20we%20have%20done%20consists%20of%20the%20following%20parts%3A%0A%0A-%20Beacon%20Client%20pallet%0A%20%20-%20Initial%20chain%20snapshot%20(forms%20part%20of%20the%20Genesis%20Config)%0A%20%20-%20Sync%20committee%20updates%0A%20%20-%20Finalized%20beacon%20header%20updates%0A%20%20-%20Execution%20header%20updates%0A%20%20-%20Message%20verification%0A-%20Beacon%20Relayer%0A%20%20-%20Sends%20data%20from%20a%20beacon%20node%20to%20the%20beacon%20client%0A%0A%23%23%20Code%20Review%0A%0A%23%23%23%20Signing%20Mechanisms%0A%0A-%20%5Bsecp256k1%5D(https%3A%2F%2Fwww.secg.org%2Fsec2-v2.pdf)%0A%20%20-%20%5Bsnowbridge%20secp256k1%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Fcrypto%2Fsecp256k1)%0A-%20%5Bsr25519%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-cryptography%23what-is-sr25519-and-where-did-it-come-from)%3A%20schnorr%20over%20ristretto25519%0A%20%20-%20%5Bsnowbridge%20sr25519%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Fcrypto%2Fsecp256k1)%0A%0A%23%23%23%20Cryptographic%20Primitives%0A%0A-%20%5Bkeccak256%5D(https%3A%2F%2Fkeccak.team%2Fkeccak.html)%20hash%20function%0A%20%20-%20%5Bsnowbridge%20keccak%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Fcrypto%2Fkeccak%2Fkeccak.go)%0A-%20%5Bmerkle%20trees%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FMerkle_tree)%0A%20%20-%20%5Bsnowbridge%20merkle.go%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Fcrypto%2Fmerkle%2Fmerkle.go)%0A%20%20-%20%5Bsnowbridge%20merkleization.rs%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fparachain%2Fpallets%2Fethereum-beacon-client%2Fsrc%2Fmerkleization.rs)%0A-%20%5Bmerkle_proof%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fssz%2Fmerkle-proofs.mdx)%20%5Bexplainer%5D(https%3A%2F%2Fsoliditydeveloper.com%2Fmerkle-tree)%0A%20%20-%20%5Bsnowbridge%20simplified_mmr_proof.go%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Fcrypto%2Fmerkle%2Fsimplified_mmr_proof.go)%0A%20%20-%20%5Bsnowbridge%20merkle-proof%20rust%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Fparachain%2Fpallets%2Fbasic-channel%2Fmerkle-proof)%0A%20%20-%20%5Bsnowbridge%20MerkleProof.sol%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fcore%2Fpackages%2Fcontracts%2Fcontracts%2Futils%2FMerkleProof.sol)%0A-%20%5BMerkle%20Mountain%20Range%5D(https%3A%2F%2Fdocs.grin.mw%2Fwiki%2Fchain-state%2Fmerkle-mountain-range%2F)%0A%20%20-%20%5Bsnowbridge%20MMRProof.sol%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fcore%2Fpackages%2Fcontracts%2Fcontracts%2Futils%2FMMRProof.sol)%0A%20%20-%20%5Bsnowfork%20merkle-mountain-range%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fmerkle-mountain-range)%0A-%20%5BSimple%20Serialize%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fssz%2F)%0A%20%20-%20%5Bsnowbridge%20ssz.rs%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fparachain%2Fpallets%2Fethereum-beacon-client%2Fsrc%2Fssz.rs)%0A%0A%23%23%23%20Proving%20Mechanisms%0A%0A-%20%5BBeefy%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-consensus%23bridging-beefy)%0A%20%20-%20%5Bsnowbridge%20BeefyClient.sol%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fcore%2Fpackages%2Fcontracts%2Fcontracts%2FBeefyClient.sol)%0A%0A-%20%5Bsnowbridge%20ethereum-beacon-client%20rust%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Fparachain%2Fpallets%2Fethereum-beacon-client)%0A-%20%5Bsnowbridge%20ethereum-light-client%20rust%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Fparachain%2Fpallets%2Fethereum-light-client)%0A%0A%23%23%23%20Relayer%20Mechanisms%0A%0AThe%20%5Brelays%20folder%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Frelays)%20has%20multiple%20relayers%20controlled%20by%20%5Bexecution%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fexecution%2Fmain.go).%20All%20written%20in%20go.%0A%0A-%20Relaying%20from%20Ethereum%20to%20Polkadot%0A%20%20-%20%5Bbeacon%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Frelays%2Fbeacon)%3A%20Responsible%20for%20retrieving%20state%20from%20the%20beacon%20chain%20including%0A%20%20%20%20-%20%5Bsynching%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go)%3A%0A%20%20%20%20%20%20-%20%5BHeader%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L47)%0A%20%20%20%20%20%20-%20%5BCurrentSyncCommittee%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L55)%0A%20%20%20%20%20%20-%20%5BSyncAggregate%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23LL60C12-L60C12)%0A%20%20%20%20-%20functions%20include%0A%20%20%20%20%20%20-%20%5BGetSyncPeriodsToFetch%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L65)%0A%20%20%20%20%20%20-%20%5BGetInitialSync%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L83)%0A%20%20%20%20%20%20-%20%5BGetSyncCommitteePeriodUpdate%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L118)%0A%20%20%20%20%20%20-%20%5BGetBlockRoots%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L187)%0A%20%20%20%20%20%20-%20%5BGetFinalizedUpdate%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L252)%0A%20%20%20%20%20%20-%20%5BHasFinalizedHeaderChanged%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L305)%0A%20%20%20%20%20%20-%20%5BGetLatestFinalizedHeader%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L326)%0A%20%20%20%20%20%20-%20%5BgetNextBlockRootBySlot%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L379)%0A%20%20%20%20%20%20-%20%5BGetNextHeaderUpdateBySlotWithAncestryProof%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L425)%0A%20%20%20%20%20%20-%20%5BGetNextHeaderUpdateBySlot%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L434)%0A%20%20%20%20%20%20-%20%5BGetHeaderUpdateWithAncestryProof%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L457)%0A%20%20%20%20%20%20-%20%5BgetBlockHeaderAncestryProof%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L495)%0A%20%20%20%20%20%20-%20%5BGetSyncAggregate%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L520)%0A%20%20%20%20%20%20-%20%5BGetSyncAggregateForSlot%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L534)%0A%20%20-%20%5Bethereum%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Frelays%2Fethereum)%3A%20Responsible%20for%20retreiving%20block%20headers%20from%20the%20execution%20chain.%0A-%20Relaying%20from%20Polkadot%20to%20Etherem%0A%20%20-%20%5Bparachain%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Frelays%2Fparachain)%0A%20%20-%20%5Bbeefy%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Frelays%2Fbeefy)%0A%0A%23%23%23%20Light%20Client%20Functionality%0A%0A-%20%5BBeefy%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-consensus%23bridging-beefy)%0A%20%20-%20%5Bsnowbridge%20BeefyClient.sol%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fcore%2Fpackages%2Fcontracts%2Fcontracts%2FBeefyClient.sol)%0A%0A-%20%5Bsnowbridge%20ethereum-beacon-client%20rust%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Fparachain%2Fpallets%2Fethereum-beacon-client)%0A-%20%5Bsnowbridge%20ethereum-light-client%20rust%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Fparachain%2Fpallets%2Fethereum-light-client)%0A%0A%23%23%23%20Token%20Lockers%0A%0A-%20%5Bsnowbridge%20ERC20Vault.sol%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fcore%2Fpackages%2Fcontracts%2Fcontracts%2FERC20Vault.sol)%0A%0A%23%23%20References%0A%0A%23%23%20Appendices%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./snowbridge-DmM2nQj2.js"),[]),path:"/research/bridge/snowbridge.html",type:"mdx",filePath:"research/bridge/snowbridge.mdx",content:"%23%20Snowbridge%0A%0A-%20date%3A%202023-02-24%0A-%20last-updated%3A%202023-02-24%0A%0A%23%23%20Overview%0A%0ASnowbridge%20is%20a%20general%20purpose%2C%20trustless%20and%20decentralized%20bridge%20between%20Polkadot%20and%20Ethereum.%20The%20goal%20is%20to%20launch%20as%20common-good%20bridge%20on%20the%20proposed%20BridgeHub%20parachain.%0A**Quick%20Links**%0A%0A-%20Bridge%20Type%20%3A%20Proof%20Based%20Validity%20Proofs%0A-%20%5BDesign%5D(https%3A%2F%2Fdocs.snowbridge.network%2Farchitecture%2Foverview)%3A%20bridge%20has%20a%20layered%20architecture%2C%20inspired%20by%20networking%20protocols%20such%20as%20TCP%2FIP.%20At%20the%20lowest%20level%20we%20have%20channels%2C%20which%20send%20messages%20across%20the%20bridge.%20At%20the%20highest%20level%2C%20we%20have%20apps%2C%20which%20can%20invoke%20methods%20on%20apps%20living%20on%20foreign%20chains.%0A-%20%5BDocs%5D(https%3A%2F%2Fdocs.snowbridge.network%2F)%3A%20Snowbridge%20documentation%0A-%20%5BImplementation%20snowfork%20snowbridge%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge)%3A%20A%20trustless%20bridge%20between%20Polkadot%20and%20Ethereum.%0A-%20FronteEnd%3A%20Still%20Under%20Development%0A-%20%5BExplorer%5D(https%3A%2F%2Fpolkadot.subscan.io%2Fparachain)%3A%20Can%20be%20used%20to%20review%20if%20a%20common%20good%20parachain%20is%20deployed.%20Bridge%20messages%20will%20be%20displayed%20as%20Cross%20Chain%20Messages%20(XCM)%20on%20this%20%5Bxcm%20dashboard%5D(https%3A%2F%2Fpolkadot.subscan.io%2Fxcm_dashboard).%0A-%20%5BRoadmap%5D(https%3A%2F%2Fgateway.pinata.cloud%2Fipfs%2FQmfYGxQvyjVrgm9ajfzCysbuvLXdsRxP5R5HFjWcrj2yYY)%3A%20The%20%5BSnowbridge%20Funding%20Proposal%5D(https%3A%2F%2Fpolkadot.polkassembly.io%2Fpost%2F1341)%20includes%20a%20link%20to%20the%20%5Broadmap%5D(https%3A%2F%2Fgateway.pinata.cloud%2Fipfs%2FQmfYGxQvyjVrgm9ajfzCysbuvLXdsRxP5R5HFjWcrj2yYY)%20which%20details%20the%20milestones%20and%20rollout.%0A%0A%23%23%20Design%20Notes%0A%0A**%5Blight-client%20verification%20polkadot%5D(https%3A%2F%2Fdocs.snowbridge.network%2Farchitecture%2Fverification%2Fpolkadot)**%0A%0AWe%20use%20Polkadot%E2%80%99s%20BEEFY%20gadget%20to%20implement%20an%20efficient%20light%20client%20that%20only%20needs%20to%20verify%20a%20very%20small%20subset%20of%20relay%20chain%20validator%20signatures.%20BEEFY%20is%20live%20on%20Rococo%2C%20and%20is%20awaiting%20deployment%20on%20Kusama%20and%20Polkadot.%0AFundamentally%2C%20the%20BEEFY%20light%20client%20allows%20the%20bridge%20to%20prove%20that%20a%20specified%20parachain%20header%20was%20finalized%20by%20the%20relay%20chain.%0A%0A**%5BBEEFY%20light%20client%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fparity-bridges-common%2Fblob%2Fmaster%2Fmodules%2Fbeefy%2Fsrc%2Flib.rs)**%0A%0A%3E%20BEEFY%20bridge%20pallet.%0A%3E%0A%3E%20This%20pallet%20is%20an%20on-chain%20BEEFY%20light%20client%20for%20Substrate-based%20chains%20that%20are%20using%20the%20following%20pallets%20bundle%3A%20%60pallet-mmr%60%2C%20%60pallet-beefy%60%20and%20%60pallet-beefy-mmr%60.%0A%3E%0A%3E%20The%20pallet%20is%20able%20to%20verify%20MMR%20leaf%20proofs%20and%20BEEFY%20commitments%2C%20so%20it%20has%20access%20to%20the%20following%20data%20of%20the%20bridged%20chain%3A%0A%3E%0A%3E%20-%20header%20hashes%0A%3E%20-%20changes%20of%20BEEFY%20authorities%0A%3E%20-%20extra%20data%20of%20MMR%20leafs%0A%3E%0A%3E%20Given%20the%20header%20hash%2C%20other%20pallets%20are%20able%20to%20verify%20header-based%20proofs%20(e.g.%20storage%20proofs%2C%20transaction%20inclusion%20proofs%2C%20etc.).%0A%0A**%5Blight-client%20verification%20ethereum%5D(https%3A%2F%2Fdocs.snowbridge.network%2Farchitecture%2Fverification%2Fethereum)**%0A%0AWe%20have%20implemented%20a%20Proof-of-Stake%20(PoS)%20light%20client%20for%20the%20Beacon%20chain.%20This%20client%20deprecates%20the%20older%20PoW%20light%20client%20we%20developed%20in%202020.%0A%0AThe%20beacon%20client%20tracks%20the%20beacon%20chain%2C%20the%20new%20Ethereum%20chain%20that%20will%20replace%20Ethereum's%20Proof-of-Work%20consensus%20method%20around%20mid-September%2C%20called%20the%20Merge.%20The%20work%20we%20have%20done%20consists%20of%20the%20following%20parts%3A%0A%0A-%20Beacon%20Client%20pallet%0A%20%20-%20Initial%20chain%20snapshot%20(forms%20part%20of%20the%20Genesis%20Config)%0A%20%20-%20Sync%20committee%20updates%0A%20%20-%20Finalized%20beacon%20header%20updates%0A%20%20-%20Execution%20header%20updates%0A%20%20-%20Message%20verification%0A-%20Beacon%20Relayer%0A%20%20-%20Sends%20data%20from%20a%20beacon%20node%20to%20the%20beacon%20client%0A%0A%23%23%20Code%20Review%0A%0A%23%23%23%20Signing%20Mechanisms%0A%0A-%20%5Bsecp256k1%5D(https%3A%2F%2Fwww.secg.org%2Fsec2-v2.pdf)%0A%20%20-%20%5Bsnowbridge%20secp256k1%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Fcrypto%2Fsecp256k1)%0A-%20%5Bsr25519%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-cryptography%23what-is-sr25519-and-where-did-it-come-from)%3A%20schnorr%20over%20ristretto25519%0A%20%20-%20%5Bsnowbridge%20sr25519%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Fcrypto%2Fsecp256k1)%0A%0A%23%23%23%20Cryptographic%20Primitives%0A%0A-%20%5Bkeccak256%5D(https%3A%2F%2Fkeccak.team%2Fkeccak.html)%20hash%20function%0A%20%20-%20%5Bsnowbridge%20keccak%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Fcrypto%2Fkeccak%2Fkeccak.go)%0A-%20%5Bmerkle%20trees%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FMerkle_tree)%0A%20%20-%20%5Bsnowbridge%20merkle.go%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Fcrypto%2Fmerkle%2Fmerkle.go)%0A%20%20-%20%5Bsnowbridge%20merkleization.rs%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fparachain%2Fpallets%2Fethereum-beacon-client%2Fsrc%2Fmerkleization.rs)%0A-%20%5Bmerkle_proof%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fssz%2Fmerkle-proofs.mdx)%20%5Bexplainer%5D(https%3A%2F%2Fsoliditydeveloper.com%2Fmerkle-tree)%0A%20%20-%20%5Bsnowbridge%20simplified_mmr_proof.go%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Fcrypto%2Fmerkle%2Fsimplified_mmr_proof.go)%0A%20%20-%20%5Bsnowbridge%20merkle-proof%20rust%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Fparachain%2Fpallets%2Fbasic-channel%2Fmerkle-proof)%0A%20%20-%20%5Bsnowbridge%20MerkleProof.sol%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fcore%2Fpackages%2Fcontracts%2Fcontracts%2Futils%2FMerkleProof.sol)%0A-%20%5BMerkle%20Mountain%20Range%5D(https%3A%2F%2Fdocs.grin.mw%2Fwiki%2Fchain-state%2Fmerkle-mountain-range%2F)%0A%20%20-%20%5Bsnowbridge%20MMRProof.sol%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fcore%2Fpackages%2Fcontracts%2Fcontracts%2Futils%2FMMRProof.sol)%0A%20%20-%20%5Bsnowfork%20merkle-mountain-range%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fmerkle-mountain-range)%0A-%20%5BSimple%20Serialize%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fssz%2F)%0A%20%20-%20%5Bsnowbridge%20ssz.rs%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fparachain%2Fpallets%2Fethereum-beacon-client%2Fsrc%2Fssz.rs)%0A%0A%23%23%23%20Proving%20Mechanisms%0A%0A-%20%5BBeefy%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-consensus%23bridging-beefy)%0A%20%20-%20%5Bsnowbridge%20BeefyClient.sol%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fcore%2Fpackages%2Fcontracts%2Fcontracts%2FBeefyClient.sol)%0A%0A-%20%5Bsnowbridge%20ethereum-beacon-client%20rust%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Fparachain%2Fpallets%2Fethereum-beacon-client)%0A-%20%5Bsnowbridge%20ethereum-light-client%20rust%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Fparachain%2Fpallets%2Fethereum-light-client)%0A%0A%23%23%23%20Relayer%20Mechanisms%0A%0AThe%20%5Brelays%20folder%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Frelays)%20has%20multiple%20relayers%20controlled%20by%20%5Bexecution%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fexecution%2Fmain.go).%20All%20written%20in%20go.%0A%0A-%20Relaying%20from%20Ethereum%20to%20Polkadot%0A%20%20-%20%5Bbeacon%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Frelays%2Fbeacon)%3A%20Responsible%20for%20retrieving%20state%20from%20the%20beacon%20chain%20including%0A%20%20%20%20-%20%5Bsynching%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go)%3A%0A%20%20%20%20%20%20-%20%5BHeader%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L47)%0A%20%20%20%20%20%20-%20%5BCurrentSyncCommittee%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L55)%0A%20%20%20%20%20%20-%20%5BSyncAggregate%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23LL60C12-L60C12)%0A%20%20%20%20-%20functions%20include%0A%20%20%20%20%20%20-%20%5BGetSyncPeriodsToFetch%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L65)%0A%20%20%20%20%20%20-%20%5BGetInitialSync%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L83)%0A%20%20%20%20%20%20-%20%5BGetSyncCommitteePeriodUpdate%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L118)%0A%20%20%20%20%20%20-%20%5BGetBlockRoots%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L187)%0A%20%20%20%20%20%20-%20%5BGetFinalizedUpdate%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L252)%0A%20%20%20%20%20%20-%20%5BHasFinalizedHeaderChanged%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L305)%0A%20%20%20%20%20%20-%20%5BGetLatestFinalizedHeader%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L326)%0A%20%20%20%20%20%20-%20%5BgetNextBlockRootBySlot%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L379)%0A%20%20%20%20%20%20-%20%5BGetNextHeaderUpdateBySlotWithAncestryProof%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L425)%0A%20%20%20%20%20%20-%20%5BGetNextHeaderUpdateBySlot%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L434)%0A%20%20%20%20%20%20-%20%5BGetHeaderUpdateWithAncestryProof%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L457)%0A%20%20%20%20%20%20-%20%5BgetBlockHeaderAncestryProof%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L495)%0A%20%20%20%20%20%20-%20%5BGetSyncAggregate%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L520)%0A%20%20%20%20%20%20-%20%5BGetSyncAggregateForSlot%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Frelays%2Fbeacon%2Fheader%2Fsyncer%2Fsyncer.go%23L534)%0A%20%20-%20%5Bethereum%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Frelays%2Fethereum)%3A%20Responsible%20for%20retreiving%20block%20headers%20from%20the%20execution%20chain.%0A-%20Relaying%20from%20Polkadot%20to%20Etherem%0A%20%20-%20%5Bparachain%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Frelays%2Fparachain)%0A%20%20-%20%5Bbeefy%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Frelays%2Fbeefy)%0A%0A%23%23%23%20Light%20Client%20Functionality%0A%0A-%20%5BBeefy%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-consensus%23bridging-beefy)%0A%20%20-%20%5Bsnowbridge%20BeefyClient.sol%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fcore%2Fpackages%2Fcontracts%2Fcontracts%2FBeefyClient.sol)%0A%0A-%20%5Bsnowbridge%20ethereum-beacon-client%20rust%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Fparachain%2Fpallets%2Fethereum-beacon-client)%0A-%20%5Bsnowbridge%20ethereum-light-client%20rust%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Fparachain%2Fpallets%2Fethereum-light-client)%0A%0A%23%23%23%20Token%20Lockers%0A%0A-%20%5Bsnowbridge%20ERC20Vault.sol%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fcore%2Fpackages%2Fcontracts%2Fcontracts%2FERC20Vault.sol)%0A%0A%23%23%20References%0A%0A%23%23%20Appendices%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./succinct-CT2iy0WO.js"),[]),path:"/research/bridge/succinct",type:"mdx",filePath:"research/bridge/succinct.mdx",content:"%23%20Succinct%20Labs%0A%0A-%20date%3A%202023-02-24%0A-%20last%20updated%3A%202023-02-24%0A%0A%23%23%20Overview%0A%0ASuccinct%5B%5Eov-1%5D%20is%20building%20Telepathy%5B%5Eov-2%5D%20a%20zkSNARK%20circuit%20that%20verifies%20Ethereum%20validator%20signatures%2C%20allowing%20for%20a%20gas-efficient%20light%20client%20to%20run%20as%20a%20smart%20contract%20on%20any%20EVM%20chain.%0A%0A-%20%5Bsuccint%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs)%0A%20%20-%20https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Fplonky2-ecdsa%0A%20%20-%20https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Fgnark-plonky2-verifier%0A%20%20-%20https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Ftelepathy-contracts%0A%20%20%20%20-%20%5BArbitrary%20Message%20Bridge%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Ftelepathy-contracts%2Ftree%2Fmain%2Fsrc%2Famb)%0A%20%20%20%20-%20https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Foptimism-bedrock-contracts%0A%20%20%20%20-%20https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Fv3-core%20(Business%20Source%20License%202023-04-01)%0A%0A%23%23%20Succinct%20Bridge%20Overview%0A%0A1.%20%5BSuccinct%20Blog%20Oct%2029%2C%202022%5D(https%3A%2F%2Fblog.succinct.xyz%2Fblog%2Fproof-of-consensus)%3A%20Proof%20of%20Consensus%20Bridging%20between%20Ethereum%20and%20Gnosis%20Chain%0A%0A%3E%20The%20on-chain%20light%20client%20recreates%20the%20light%20client%20spec%20in%20Solidity%20(code%20here).%20In%20particular%2C%20we%20implement%20the%20process_light_client_finality_update%20function%20inside%20the%20step%20function%20in%20our%20smart%20contract.%20Then%2C%20inside%20step%2C%20where%20we%20would%20typically%20verify%20an%20aggregate%20BLS%20signature%2C%20we%20instead%20replace%20it%20with%20verification%20of%20a%20single%20Groth16%20zkSNARK%20to%20reduce%20gas%20costs.%0A%3E%0A%3E%20Recall%20that%20the%20validator%20set%20of%20the%20sync%20committee%20rotates%20every%2027%20hours.%20On%20chain%2C%20we%20keep%20track%20of%20a%20commitment%20to%20the%20set%20of%20validators%20in%20the%20mapping%20syncCommitteeRootByPeriod.%20To%20update%20this%20mapping%20for%20the%20next%20period%2C%20we%20verify%20the%20merkle%20inclusion%20proof%20that%20the%20current%20validator%20set%20signs%20for%20the%20commitment%20for%20the%20next%20validator%20set.%20This%20computation%20happens%20inside%20the%20updateSyncCommittee%20function.%0A%3E%0A%3E%20Unfortunately%2C%20the%20commitment%20the%20validators%20sign%20is%20an%20SSZ%20commitment%20(simple%20serialization%2C%20Eth%20PoS%20serialization%20format)%20that%20is%20quite%20SNARK%20unfriendly%2C%20as%20it%20uses%20the%20SHA-256%20hash%20function.%20It%20takes%20~70%20million%20constraints%20in%20a%20Groth16%20circuit%20to%20compute%20the%20serialization%20of%20512%20validator%20BLS%20public%20keys%20to%20its%20corresponding%20SSZ%20commitment.%20Because%20we%20don%E2%80%99t%20want%20to%20do%20this%20for%20every%20single%20header%20verification%20proof%20(which%20happens%20every%206%20minutes%2C%20i.e.%20once%20per%20epoch)%2C%20we%20use%20an%20additional%20SNARK%20(the%20commitmentMappingProof%20argument)%20to%20provably%20map%20an%20SSZ%20commitment%20to%20a%20SNARK-friendly%20Poseidon%20commitment%2C%20that%20is%20stored%20in%20the%20mapping%20sszToPoseidon.%20For%20each%20BLS%20signature%20verification%2C%20we%20pass%20in%20the%20poseidon%20commitment%20of%20the%20sync%20committee%20validators%20as%20public%20input%20to%20ensure%20that%20the%20BLS%20signature%20we%20are%20verifying%20is%20from%20the%20correct%20public%20keys.%20Overall%20this%20approach%20(using%202%20SNARKs)%20saves%20us%2070M%20constraints%20on%20the%20BLS%20signature%20verification%20SNARK%2C%20which%20we%20must%20run%20for%20every%20update%20we%20wish%20to%20submit%20to%20the%20light%20client.%20The%20commitment%20mapping%20SNARK%20must%20only%20be%20run%20every%20sync%20committee%20period%20(roughly%20once%20every%2027%20hours).%0A%3E%0A%3E%20Toolchain%0A%3E%20We%20use%20the%20Circom%20programming%20language%20and%20the%20Groth16%20proving%20system%20to%20generate%20our%20zkSNARKs.%20While%20a%20newer%20proof%20system%20(like%20PLONK%20arithmetization%20%2B%20KZG%20or%20FRI)%20would%20improve%20proving%20time%2C%20we%20believe%20Circom%20is%20the%20most%20production-ready%20zkSNARK%20stack%20today.%20In%20particular%2C%20Tornado%20Cash%E2%80%99s%20circuits%20are%20built%20on%20top%20of%20Circom%20and%20have%20been%20used%20for%20several%20years.%20Additionally%2C%20the%20on-chain%20verification%20cost%20of%20a%20Groth16%20zkSNARK%20is%20the%20cheapest%20of%20all%20proving%20systems%20available%20today.%0A%0A2.%20%5Beth-proof-of-consensus%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus)%3A%20github%20repository%0A3.%20%5BGIP-57%5D(https%3A%2F%2Fforum.gnosis.io%2Ft%2Fgip-57-should-gnosis-dao-support-research-of-a-zksnark-enabled-light-client-and-bridge%2F5421)%3A%20%24600%2C000%20Grant%20from%20Gnosis%20to%20Succinct%20to%20support%0A4.%20%5BSuccinct%20Tweet%5D(https%3A%2F%2Ftwitter.com%2Fsuccinctlabs%2Fstatus%2F1572299292177481729)%20%3A%20Succinct%20tweet%20giving%20an%20overview%20of%20the%20bridge%0A5.%20%5BSuccinct%20Blog%20Sep%2020%2C%202022%5D(https%3A%2F%2Fblog.succinct.xyz%2Fpost%2F2022%2F09%2F20%2Fproof-of-consensus)%3A%20Towards%20the%20endgame%20of%20blockchain%20interoperability%20with%20proof%20of%20consensus%0A6.%20%5BGIP-57%5D(https%3A%2F%2Fforum.gnosis.io%2Ft%2Fgip-57-should-gnosis-dao-support-research-of-a-zksnark-enabled-light-client-and-bridge%2F5421)%3A%20%24600%2C000%20Grant%20from%20Gnosis%20to%20Succinct%20to%20support%20research%20of%20a%20zkSNARK-enabled%20light%20client%20and%20bridge.%0A7.%20%5BSuccinct%20Video%5D(https%3A%2F%2Fyoutu.be%2FcMSayTJA1B4)%3A%20ZK8%3A%20Succinct%20Verification%20of%20Consensus%20with%20zkSNARKs%20-%20Uma%20Roy%20%26%20John%20Guibas%20-%20Succinct%20Labs%0A%0A%23%23%20Trusted%20Setup%0A%0A%23%23%23%20Best%20Practices%20for%20Setup%0A%0A1.%20%5BBest%20Practices%20for%20Large%20Circuits%5D(https%3A%2F%2Fhackmd.io%2FV-7Aal05Tiy-ozmzTGBYPA)%3A%20compiling%20and%20generating%20Groth16%20proofs%20for%20large%20ZK%20circuits%20using%20the%20circom%20%2F%20snarkjs%20toolstack.%0A%0A%3E%20For%20such%20large%20circuits%2C%20you%20need%20a%20machine%20with%20an%20Intel%20processor%2C%20lots%20of%20RAM%20and%20a%20large%20hard%20drive%20with%20swap%20enabled.%20For%20example%2C%20the%20zkPairing%20project%20used%20an%20AWS%20r5.8xlarge%20instance%20with%2032-core%203.1GHz%2C%20256G%20RAM%20machine%20with%201T%20hard%20drive%20and%20400G%20swap.%0A%3E%0A%3E%20Compilation%3A%20for%20circuits%20with%20%3E20M%20constraints%2C%20one%20should%20not%20compile%20to%20WebAssembly%20because%20witness%20generation%20will%20exceed%20the%20memory%20cap%20of%20WebAssembly.%20For%20this%20reason%2C%20one%20must%20compile%20with%20the%20C%2B%2B%20flag%20and%20remove%20the%20wasm%20flag.%0A%0A2.%20%5BHermez%20Zero-Knowledge%20Proofs%5D(https%3A%2F%2Fblog.hermez.io%2Fhermez-zero-knowledge-proofs%2F)%3A%20Overview%20of%20the%20Hermez%20Trusted%20Setupi%0A%0A%5BMachine%5D(https%3A%2F%2Faws.amazon.com%2Fec2%2Fpricing%2Fon-demand%2F)%3A%20AWS%20r5.8xlarge%20instance%20with%2032-core%203.1GHz%2C%20256G%20RAM%20machine%20with%201T%20hard%20drive%20and%20400G%20swap.%20%242.016%20per%20hour%0A%0A%23%23%23%20Trusted%20Ceremony%20(Powers%20of%20Tau)%0A%0A1.%20%5BPerpetual%20Powers%20of%20Tau%5D(https%3A%2F%2Fgithub.com%2Fweijiekoh%2Fperpetualpowersoftau)%3A%20The%20goal%20is%20to%20securely%20generate%20zk-SNARK%0A2.%20%5Bsnarkjs%20Prepare%20phase%202%5D(https%3A%2F%2Fgithub.com%2Fiden3%2Fsnarkjs%2Fblob%2Fmaster%2FREADME.md%237-prepare-phase-2)%3A%20Provide%20instructions%20on%20prepare%20phase%202%20and%20links%20to%20the%20Powers%20of%20Tau%20files.%0A3.%20%5BPowers%20of%20Tau%20files%20on%20Dropbox%5D(https%3A%2F%2Fwww.dropbox.com%2Fsh%2Fmn47gnepqu88mzl%2FAACaJkBU7mmCq8uU8ml0-0fma%3Fdl%3D0)%3A%0A%0A%5BDownload%20powersOfTau28_hez_final_27.ptau%5D(https%3A%2F%2Fhermez.s3-eu-west-1.amazonaws.com%2FpowersOfTau28_hez_final_27.ptau)%3A%20144%20GB%20file%20containing%20the%20encrypted%20evaluation%20of%20the%20Lagrange%20polynomials%20at%20tau%20for%20tau%2C%20alpha*tau%20and%20beta*tau.%20It%20takes%20the%20beacon%20ptau%20file%20we%20generated%20in%20the%20previous%20step%2C%20and%20outputs%20a%20final%20ptau%20file%20which%20will%20be%20used%20to%20generate%20the%20circuit%20proving%20and%20verification%20keys.%0A%0A%23%23%23%20Example%20Build%0A%0A1.%20%5Bbuild_aggregate_bls_verify.sh%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Faggregate_bls_verify.circom)%0A%0A%60%60%60%0A%23!%2Fbin%2Fbash%0APHASE1%3D%2Fhome%2Fubuntu%2FpowersOfTau28_hez_final_27.ptau%0ABUILD_DIR%3D..%2Fbuild%0ACIRCUIT_NAME%3Dtest_aggregate_bls_verify_512%0ATEST_DIR%3D..%2Ftest%0AOUTPUT_DIR%3D%22%24BUILD_DIR%22%2F%22%24CIRCUIT_NAME%22_cpp%0A%0Arun()%20%7B%0A%20%20%20%20if%20%5B%20!%20-d%20%22%24BUILD_DIR%22%20%5D%3B%20then%0A%20%20%20%20%20%20%20%20echo%20%22No%20build%20directory%20found.%20Creating%20build%20directory...%22%0A%20%20%20%20%20%20%20%20mkdir%20-p%20%22%24BUILD_DIR%22%0A%20%20%20%20fi%0A%0A%20%20%20%20%23%20echo%20%22****COMPILING%20CIRCUIT****%22%0A%20%20%20%20%23%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20%23%20circom%20%22%24TEST_DIR%22%2Fcircuits%2F%22%24CIRCUIT_NAME%22.circom%20--O1%20--r1cs%20--sym%20--c%20--output%20%22%24BUILD_DIR%22%0A%20%20%20%20%23%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20%23%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20%23%20echo%20%22****Running%20make%20to%20make%20witness%20generation%20binary****%22%0A%20%20%20%20%23%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20%23%20make%20-C%20%22%24OUTPUT_DIR%22%0A%20%20%20%20%23%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20%23%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****Executing%20witness%20generation****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20.%2F%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22%20%22%24TEST_DIR%22%2Finput_aggregate_bls_verify_512.json%20witness.wtns%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****Converting%20witness%20to%20json****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20npx%20snarkjs%20wej%20%22%24OUTPUT_DIR%22%2Fwitness.wtns%20%22%24OUTPUT_DIR%22%2Fwitness.json%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****GENERATING%20ZKEY%200****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20npx%20--trace-gc%20--trace-gc-ignore-scavenger%20--max-old-space-size%3D2048000%20--initial-old-space-size%3D2048000%20--no-global-gc-scheduling%20--no-incremental-marking%20--max-semi-space-size%3D1024%20--initial-heap-size%3D2048000%20--expose-gc%20snarkjs%20zkey%20new%20%22%24BUILD_DIR%22%2F%22%24CIRCUIT_NAME%22.r1cs%20%22%24PHASE1%22%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_p1.zkey%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****CONTRIBUTE%20TO%20PHASE%202%20CEREMONY****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20npx%20snarkjs%20zkey%20contribute%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_p1.zkey%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_p2.zkey%20-n%3D%22First%20phase2%20contribution%22%20-e%3D%22some%20random%20text%20for%20entropy%22%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****VERIFYING%20FINAL%20ZKEY****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20npx%20--trace-gc%20--trace-gc-ignore-scavenger%20--max-old-space-size%3D2048000%20--initial-old-space-size%3D2048000%20--no-global-gc-scheduling%20--no-incremental-marking%20--max-semi-space-size%3D1024%20--initial-heap-size%3D2048000%20--expose-gc%20npx%20snarkjs%20zkey%20verify%20%22%24BUILD_DIR%22%2F%22%24CIRCUIT_NAME%22.r1cs%20%22%24PHASE1%22%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_p2.zkey%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****EXPORTING%20VKEY****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20npx%20snarkjs%20zkey%20export%20verificationkey%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_p2.zkey%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_vkey.json%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****GENERATING%20PROOF%20FOR%20SAMPLE%20INPUT****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20~%2Frapidsnark%2Fbuild%2Fprover%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_p2.zkey%20%22%24OUTPUT_DIR%22%2Fwitness.wtns%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_proof.json%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_public.json%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****VERIFYING%20PROOF%20FOR%20SAMPLE%20INPUT****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20npx%20snarkjs%20groth16%20verify%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_vkey.json%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_public.json%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_proof.json%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****EXPORTING%20SOLIDITY%20SMART%20CONTRACT****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20npx%20snarkjs%20zkey%20export%20solidityverifier%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_p2.zkey%20verifier.sol%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%7D%0A%0Amkdir%20-p%20logs%0Arun%202%3E%261%20%7C%20tee%20logs%2F%22%24CIRCUIT_NAME%22_%24(date%20'%2B%25Y-%25m-%25d-%25H-%25M').log%0A%60%60%60%0A%0A%23%23%20circuits%0A%0A1.%20%5BCircom%20Documentation%5D(https%3A%2F%2Fdocs.circom.io%2Fgetting-started%2Finstallation%2F)%3A%20Circom%20is%20a%20novel%20domain-specific%20language%20for%20defining%20arithmetic%20circuits%20that%20can%20be%20used%20to%20generate%20zero-knowledge%20proofs.%0A2.%20%5BCircom%20github%5D(https%3A%2F%2Fgithub.com%2Fiden3%2Fcircom)%0A3.%20%5Bcircomlib%20github%5D(https%3A%2F%2Fgithub.com%2Fiden3%2Fcircomlib)%20contains%20a%20library%20of%20circuit%20templates.%0A4.%20%5BzkPairing%20Docs%5D(https%3A%2F%2F0xparc.org%2Fblog%2Fzk-pairing-1)%3A%20zkSNARKs%20for%20Elliptic%20Curve%20Pairings%20(Part%201)%0A5.%20%5Bcircom-paring%20github%5D(https%3A%2F%2Fgithub.com%2Fyi-sun%2Fcircom-pairing)%3A%20proof-of-concept%20implementations%20of%20elliptic%20curve%20pairings%20(in%20particular%2C%20the%20optimal%20Ate%20pairing%20and%20Tate%20pairing)%20for%20the%20BLS12-381%20curve%20in%20circom.%0A6.%20%5BBatch%20ECDSA%20Verification%20(github)%5D(https%3A%2F%2Fgithub.com%2Fpuma314%2Fbatch-ecdsa)%3A%20Implementation%20of%20batch%20ECDSA%20verification%20in%20circom.%0A7.%20%5Bcircom-ecdsa%20(github)%5D(https%3A%2F%2Fgithub.com%2F0xPARC%2Fcircom-ecdsa)%3A%20proof-of-concept%20implementations%20of%20ECDSA%20operations%20in%20circom.%0A8.%20%5Bsnarkjs%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fsnarkjs)%3A%20This%20is%20a%20JavaScript%20and%20Pure%20Web%20Assembly%20implementation%20of%20zkSNARK%20and%20PLONK%20schemes.%20It%20uses%20the%20Groth16%20Protocol%20(3%20point%20only%20and%203%20pairings)%20and%20PLONK.%0A9.%20%5Bsnarkjs%20Prepare%20phase%202%5D(https%3A%2F%2Fgithub.com%2Fiden3%2Fsnarkjs%2Fblob%2Fmaster%2FREADME.md%237-prepare-phase-2)%3A%20Provide%20instructions%20on%20prepare%20phase%202%20and%20links%20to%20the%20Powers%20of%20Tau%20files.%0A10.%20%5BPerpetual%20Powers%20of%20Tau%5D(https%3A%2F%2Fgithub.com%2Fweijiekoh%2Fperpetualpowersoftau)%3A%20The%20goal%20is%20to%20securely%20generate%20zk-SNARK%20parameters%20for%20circuits%20of%20up%20to%202%20%5E%2028%20(260%2B%20million)%20constraints.%0A11.%20%5BPowers%20of%20Tau%20files%20on%20Dropbox%5D(https%3A%2F%2Fwww.dropbox.com%2Fsh%2Fmn47gnepqu88mzl%2FAACaJkBU7mmCq8uU8ml0-0fma%3Fdl%3D0)%3A%0A12.%20%5Beth-proof-of-consensus%3A%20circuits%20aggregate_bls_verify.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Faggregate_bls_verify.circom)%3A%20example%20circuit%20with%20the%20following%20includes%0A%0A%60%60%60%0Ainclude%20%22..%2Fcircom-pairing%2Fcircuits%2Fbls_signature.circom%22%3B%0Ainclude%20%22..%2Fcircom-pairing%2Fcircuits%2Fcurve.circom%22%3B%0Ainclude%20%22..%2Fcircom-pairing%2Fcircuits%2Fbls12_381_func.circom%22%3B%0Ainclude%20%22.%2Fsha256_bytes.circom%22%3B%0A%60%60%60%0A%0A%23%23%20Contracts%0A%0ABuilt%20using%20%5Bfoundry%5D(https%3A%2F%2Fbook.getfoundry.sh%2F)(%5Bgithub%5D(https%3A%2F%2Fgithub.com%2Ffoundry-rs%2Ffoundry))%20and%20%5Bforge%5D(https%3A%2F%2Fbook.getfoundry.sh%2Fforge%2F).%20Verifiers%20(%5BLight%20Client%20Contracts%5D(%23light-client-contracts))%20can%20be%20%5Bgenerated%5D(https%3A%2F%2Fdocs.circom.io%2Fgetting-started%2Fproving-circuits%2F%23verifying-from-a-smart-contract)%20from%20%5Bcircuits%5D(%23circuits)%20using%20%5Bsnarkjs%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fsnarkjs)%0A%0A%23%23%23%20Library%20Contracts%0A%0A1.%20%5Beth-proof-of-consensus%2Fcontracts%2Flib%2F%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Flib)%0A%20%20%201.%20%5BRLP%20decoder%2Freader%5D(https%3A%2F%2Fgithub.com%2Fhamdiallam%2FSolidity-RLP)%3A%20The%20reader%20contract%20provides%20an%20interface%20to%20first%20take%20RLP%20encoded%20bytes%20and%20convert%20them%20into%20an%20internal%20data%20structure%2C%20RLPItem%20through%20the%20function%2C%20toRlpItem(bytes).%0A%20%20%202.%20%5Bcurve-merkle-oracle%5D(https%3A%2F%2Fgithub.com%2Flidofinance%2Fcurve-merkle-oracle)%3A%20Trustless%20price%20oracle%20for%20ETH%2FstETH%20Curve%20pool.%0A%0A%3E%20Mechanics%0A%3E%20The%20oracle%20works%20by%20generating%20and%20verifying%20Merkle%20Patricia%20proofs%20of%20the%20following%20Ethereum%20state%3A%0A%3E%0A%3E%20Curve%20stETH%2FETH%20pool%20contract%20account%20and%20the%20following%20slots%20from%20its%20storage%20trie%3A%0A%3E%0A%3E%20admin_balances%5B0%5D%0A%3E%20admin_balances%5B1%5D%0A%3E%20stETH%20contract%20account%20and%20the%20following%20slots%20from%20its%20storage%20trie%3A%0A%3E%0A%3E%20shares%5B0xDC24316b9AE028F1497c275EB9192a3Ea0f67022%5D%0A%3E%20keccak256(%22lido.StETH.totalShares%22)%0A%3E%20keccak256(%22lido.Lido.beaconBalance%22)%0A%3E%20keccak256(%22lido.Lido.bufferedEther%22)%0A%3E%20keccak256(%22lido.Lido.depositedValidators%22)%0A%3E%20keccak256(%22lido.Lido.beaconValidators%22)%0A%0A%23%23%23%20Light%20Client%20Contracts%0A%0A1.%20%5Beth-proof-of-consensus%3A%20lightclient%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Flightclient)%0A%20%20%201.%20%5BBeaconLightClient.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol)%0A%20%20%202.%20%5BPoseidonCommitmentVerifier.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FPoseidonCommitmentVerifier.sol)%0A%20%20%203.%20%5BBLSAggregatedSignatureVerifier.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBLSAggregatedSignatureVerifier.sol)%0A%0A%23%23%23%20Bridge%20Contracts%0A%0A1.%20%5Beth-proof-of-consensus%3A%20amb%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Famb)%3A%20Arbitrary%20Message%20Bridge%0A%20%20%201.%20%5BEthereum%20Magicians%3A%20A%20standard%20interface%20for%20arbitrary%20message%20bridges%20between%20chains%2Flayers%5D(https%3A%2F%2Fethereum-magicians.org%2Ft%2Fa-standard-interface-for-arbitrary-message-bridges-between-chains-layers%2F6163)%0A%20%20%202.%20%5BToken%20BridgeL%20ETH-xDai%20Arbitrary%20Message%20Bridge%5D(https%3A%2F%2Fdocs.tokenbridge.net%2Feth-xdai-amb-bridge%2Fabout-the-eth-xdai-amb)%3A%20An%20Arbitrary%20Message%20Bridge%20(AMB)%20between%20the%20Ethereum%20Mainnet%20and%20the%20xDai%20chain%0A2.%20%5Beth-proof-of-consensus%3A%20bridge%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Fbridge)%0A%0A%23%23%23%20Additional%20Contracts%0A%0A1.%20%5Btokenbridge-contracts%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Ftokenbridge-contracts)%3A%20core%20functionality%20for%20the%20POA%20bridge.%20They%20implement%20the%20logic%20to%20relay%20assests%20between%20two%20EVM-based%20blockchain%20networks.%20The%20contracts%20collect%20bridge%20validator's%20signatures%20to%20approve%20and%20facilitate%20relay%20operations.%20(forked%20from%20%5Bomni%5D(https%3A%2F%2Fgithub.com%2Fomni%2Ftokenbridge-contracts))%0A%0A%23%23%20Relayer%0A%0A_Note%3A%20no%20public%20repository%20for%20relay%20functionality%20was%20found%20in%20%5Bsuccinctlabs%20github%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs)._%0A%0A**TODO**%3A%20This%20section%20should%20give%20an%20overview%20of%0A%0A-%20Communication%20Protocol%0A-%20Message%20Formatting%0A-%20Relayer%20CodeBase%0A-%20Relayers%20Roles%20%3A%20Creating%20Proofs%20relaying%20blocks%20etc.%0A-%20Economic%20incentives.%0A%0AAdditional%20References%0A%0A1.%20%5BBeaconLightClient%20on%20Gnosis%20Chain%5D(https%3A%2F%2Fblockscout.com%2Fxdai%2Fmainnet%2Faddress%2F0xa3ae36abaD813241b75b3Bb0e9E7a37aeFD70807)%3A%20Transactions%20every%2050%20blocks%20on%20Gnosis%20i.e.%20approximately%20every%203%20minutes%0A2.%20%5BSuccinct%20Blog%20Oct%2029%2C%202022%5D(https%3A%2F%2Fblog.succinct.xyz%2Fblog%2Fproof-of-consensus%2F)%3A%20Proof%20of%20Consensus%20Bridging%20between%20Ethereum%20and%20Gnosis%20Chain%0A%0A%3E%20On%20Gnosis%20Chain%2C%20after%20the%20Ethereum%20block%20in%20which%20the%20deposit%20transaction%20was%20included%20is%20finalized%20(generally%202%20epochs%2C%20~12%20minutes)%20and%20the%20light%20client%20has%20been%20updated%20with%20a%20block%20of%20height%20greater%20than%20or%20equal%20to%20this%20block%2C%20our%20relayer%20automatically%20submits%20an%20executeMessage%20transaction%20to%20the%20Gnosis%20AMB.%0A%0A%23%23%20Appendices%0A%0A%23%23%20Footnotes%0A%0A%5B%5Eov-1%5D%3A%20%5BSuccint%5D(https%3A%2F%2Fwww.succinct.xyz%2F)%3A%20Building%20the%20end%20game%20of%20interoperability%20with%20zkSNARKs%0A%0A%5B%5Eov-2%5D%3A%20%5BTelepathy%5D(https%3A%2F%2Fdocs.telepathy.xyz%2F)%3A%20a%20zkSNARK%20circuit%20that%20verifies%20Ethereum%20validator%20signatures%2C%20allowing%20for%20a%20gas-efficient%20light%20client%20to%20run%20as%20a%20smart%20contract%20on%20any%20EVM%20chain.%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./succinct-CT2iy0WO.js"),[]),path:"/research/bridge/succinct.html",type:"mdx",filePath:"research/bridge/succinct.mdx",content:"%23%20Succinct%20Labs%0A%0A-%20date%3A%202023-02-24%0A-%20last%20updated%3A%202023-02-24%0A%0A%23%23%20Overview%0A%0ASuccinct%5B%5Eov-1%5D%20is%20building%20Telepathy%5B%5Eov-2%5D%20a%20zkSNARK%20circuit%20that%20verifies%20Ethereum%20validator%20signatures%2C%20allowing%20for%20a%20gas-efficient%20light%20client%20to%20run%20as%20a%20smart%20contract%20on%20any%20EVM%20chain.%0A%0A-%20%5Bsuccint%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs)%0A%20%20-%20https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Fplonky2-ecdsa%0A%20%20-%20https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Fgnark-plonky2-verifier%0A%20%20-%20https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Ftelepathy-contracts%0A%20%20%20%20-%20%5BArbitrary%20Message%20Bridge%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Ftelepathy-contracts%2Ftree%2Fmain%2Fsrc%2Famb)%0A%20%20%20%20-%20https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Foptimism-bedrock-contracts%0A%20%20%20%20-%20https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Fv3-core%20(Business%20Source%20License%202023-04-01)%0A%0A%23%23%20Succinct%20Bridge%20Overview%0A%0A1.%20%5BSuccinct%20Blog%20Oct%2029%2C%202022%5D(https%3A%2F%2Fblog.succinct.xyz%2Fblog%2Fproof-of-consensus)%3A%20Proof%20of%20Consensus%20Bridging%20between%20Ethereum%20and%20Gnosis%20Chain%0A%0A%3E%20The%20on-chain%20light%20client%20recreates%20the%20light%20client%20spec%20in%20Solidity%20(code%20here).%20In%20particular%2C%20we%20implement%20the%20process_light_client_finality_update%20function%20inside%20the%20step%20function%20in%20our%20smart%20contract.%20Then%2C%20inside%20step%2C%20where%20we%20would%20typically%20verify%20an%20aggregate%20BLS%20signature%2C%20we%20instead%20replace%20it%20with%20verification%20of%20a%20single%20Groth16%20zkSNARK%20to%20reduce%20gas%20costs.%0A%3E%0A%3E%20Recall%20that%20the%20validator%20set%20of%20the%20sync%20committee%20rotates%20every%2027%20hours.%20On%20chain%2C%20we%20keep%20track%20of%20a%20commitment%20to%20the%20set%20of%20validators%20in%20the%20mapping%20syncCommitteeRootByPeriod.%20To%20update%20this%20mapping%20for%20the%20next%20period%2C%20we%20verify%20the%20merkle%20inclusion%20proof%20that%20the%20current%20validator%20set%20signs%20for%20the%20commitment%20for%20the%20next%20validator%20set.%20This%20computation%20happens%20inside%20the%20updateSyncCommittee%20function.%0A%3E%0A%3E%20Unfortunately%2C%20the%20commitment%20the%20validators%20sign%20is%20an%20SSZ%20commitment%20(simple%20serialization%2C%20Eth%20PoS%20serialization%20format)%20that%20is%20quite%20SNARK%20unfriendly%2C%20as%20it%20uses%20the%20SHA-256%20hash%20function.%20It%20takes%20~70%20million%20constraints%20in%20a%20Groth16%20circuit%20to%20compute%20the%20serialization%20of%20512%20validator%20BLS%20public%20keys%20to%20its%20corresponding%20SSZ%20commitment.%20Because%20we%20don%E2%80%99t%20want%20to%20do%20this%20for%20every%20single%20header%20verification%20proof%20(which%20happens%20every%206%20minutes%2C%20i.e.%20once%20per%20epoch)%2C%20we%20use%20an%20additional%20SNARK%20(the%20commitmentMappingProof%20argument)%20to%20provably%20map%20an%20SSZ%20commitment%20to%20a%20SNARK-friendly%20Poseidon%20commitment%2C%20that%20is%20stored%20in%20the%20mapping%20sszToPoseidon.%20For%20each%20BLS%20signature%20verification%2C%20we%20pass%20in%20the%20poseidon%20commitment%20of%20the%20sync%20committee%20validators%20as%20public%20input%20to%20ensure%20that%20the%20BLS%20signature%20we%20are%20verifying%20is%20from%20the%20correct%20public%20keys.%20Overall%20this%20approach%20(using%202%20SNARKs)%20saves%20us%2070M%20constraints%20on%20the%20BLS%20signature%20verification%20SNARK%2C%20which%20we%20must%20run%20for%20every%20update%20we%20wish%20to%20submit%20to%20the%20light%20client.%20The%20commitment%20mapping%20SNARK%20must%20only%20be%20run%20every%20sync%20committee%20period%20(roughly%20once%20every%2027%20hours).%0A%3E%0A%3E%20Toolchain%0A%3E%20We%20use%20the%20Circom%20programming%20language%20and%20the%20Groth16%20proving%20system%20to%20generate%20our%20zkSNARKs.%20While%20a%20newer%20proof%20system%20(like%20PLONK%20arithmetization%20%2B%20KZG%20or%20FRI)%20would%20improve%20proving%20time%2C%20we%20believe%20Circom%20is%20the%20most%20production-ready%20zkSNARK%20stack%20today.%20In%20particular%2C%20Tornado%20Cash%E2%80%99s%20circuits%20are%20built%20on%20top%20of%20Circom%20and%20have%20been%20used%20for%20several%20years.%20Additionally%2C%20the%20on-chain%20verification%20cost%20of%20a%20Groth16%20zkSNARK%20is%20the%20cheapest%20of%20all%20proving%20systems%20available%20today.%0A%0A2.%20%5Beth-proof-of-consensus%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus)%3A%20github%20repository%0A3.%20%5BGIP-57%5D(https%3A%2F%2Fforum.gnosis.io%2Ft%2Fgip-57-should-gnosis-dao-support-research-of-a-zksnark-enabled-light-client-and-bridge%2F5421)%3A%20%24600%2C000%20Grant%20from%20Gnosis%20to%20Succinct%20to%20support%0A4.%20%5BSuccinct%20Tweet%5D(https%3A%2F%2Ftwitter.com%2Fsuccinctlabs%2Fstatus%2F1572299292177481729)%20%3A%20Succinct%20tweet%20giving%20an%20overview%20of%20the%20bridge%0A5.%20%5BSuccinct%20Blog%20Sep%2020%2C%202022%5D(https%3A%2F%2Fblog.succinct.xyz%2Fpost%2F2022%2F09%2F20%2Fproof-of-consensus)%3A%20Towards%20the%20endgame%20of%20blockchain%20interoperability%20with%20proof%20of%20consensus%0A6.%20%5BGIP-57%5D(https%3A%2F%2Fforum.gnosis.io%2Ft%2Fgip-57-should-gnosis-dao-support-research-of-a-zksnark-enabled-light-client-and-bridge%2F5421)%3A%20%24600%2C000%20Grant%20from%20Gnosis%20to%20Succinct%20to%20support%20research%20of%20a%20zkSNARK-enabled%20light%20client%20and%20bridge.%0A7.%20%5BSuccinct%20Video%5D(https%3A%2F%2Fyoutu.be%2FcMSayTJA1B4)%3A%20ZK8%3A%20Succinct%20Verification%20of%20Consensus%20with%20zkSNARKs%20-%20Uma%20Roy%20%26%20John%20Guibas%20-%20Succinct%20Labs%0A%0A%23%23%20Trusted%20Setup%0A%0A%23%23%23%20Best%20Practices%20for%20Setup%0A%0A1.%20%5BBest%20Practices%20for%20Large%20Circuits%5D(https%3A%2F%2Fhackmd.io%2FV-7Aal05Tiy-ozmzTGBYPA)%3A%20compiling%20and%20generating%20Groth16%20proofs%20for%20large%20ZK%20circuits%20using%20the%20circom%20%2F%20snarkjs%20toolstack.%0A%0A%3E%20For%20such%20large%20circuits%2C%20you%20need%20a%20machine%20with%20an%20Intel%20processor%2C%20lots%20of%20RAM%20and%20a%20large%20hard%20drive%20with%20swap%20enabled.%20For%20example%2C%20the%20zkPairing%20project%20used%20an%20AWS%20r5.8xlarge%20instance%20with%2032-core%203.1GHz%2C%20256G%20RAM%20machine%20with%201T%20hard%20drive%20and%20400G%20swap.%0A%3E%0A%3E%20Compilation%3A%20for%20circuits%20with%20%3E20M%20constraints%2C%20one%20should%20not%20compile%20to%20WebAssembly%20because%20witness%20generation%20will%20exceed%20the%20memory%20cap%20of%20WebAssembly.%20For%20this%20reason%2C%20one%20must%20compile%20with%20the%20C%2B%2B%20flag%20and%20remove%20the%20wasm%20flag.%0A%0A2.%20%5BHermez%20Zero-Knowledge%20Proofs%5D(https%3A%2F%2Fblog.hermez.io%2Fhermez-zero-knowledge-proofs%2F)%3A%20Overview%20of%20the%20Hermez%20Trusted%20Setupi%0A%0A%5BMachine%5D(https%3A%2F%2Faws.amazon.com%2Fec2%2Fpricing%2Fon-demand%2F)%3A%20AWS%20r5.8xlarge%20instance%20with%2032-core%203.1GHz%2C%20256G%20RAM%20machine%20with%201T%20hard%20drive%20and%20400G%20swap.%20%242.016%20per%20hour%0A%0A%23%23%23%20Trusted%20Ceremony%20(Powers%20of%20Tau)%0A%0A1.%20%5BPerpetual%20Powers%20of%20Tau%5D(https%3A%2F%2Fgithub.com%2Fweijiekoh%2Fperpetualpowersoftau)%3A%20The%20goal%20is%20to%20securely%20generate%20zk-SNARK%0A2.%20%5Bsnarkjs%20Prepare%20phase%202%5D(https%3A%2F%2Fgithub.com%2Fiden3%2Fsnarkjs%2Fblob%2Fmaster%2FREADME.md%237-prepare-phase-2)%3A%20Provide%20instructions%20on%20prepare%20phase%202%20and%20links%20to%20the%20Powers%20of%20Tau%20files.%0A3.%20%5BPowers%20of%20Tau%20files%20on%20Dropbox%5D(https%3A%2F%2Fwww.dropbox.com%2Fsh%2Fmn47gnepqu88mzl%2FAACaJkBU7mmCq8uU8ml0-0fma%3Fdl%3D0)%3A%0A%0A%5BDownload%20powersOfTau28_hez_final_27.ptau%5D(https%3A%2F%2Fhermez.s3-eu-west-1.amazonaws.com%2FpowersOfTau28_hez_final_27.ptau)%3A%20144%20GB%20file%20containing%20the%20encrypted%20evaluation%20of%20the%20Lagrange%20polynomials%20at%20tau%20for%20tau%2C%20alpha*tau%20and%20beta*tau.%20It%20takes%20the%20beacon%20ptau%20file%20we%20generated%20in%20the%20previous%20step%2C%20and%20outputs%20a%20final%20ptau%20file%20which%20will%20be%20used%20to%20generate%20the%20circuit%20proving%20and%20verification%20keys.%0A%0A%23%23%23%20Example%20Build%0A%0A1.%20%5Bbuild_aggregate_bls_verify.sh%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Faggregate_bls_verify.circom)%0A%0A%60%60%60%0A%23!%2Fbin%2Fbash%0APHASE1%3D%2Fhome%2Fubuntu%2FpowersOfTau28_hez_final_27.ptau%0ABUILD_DIR%3D..%2Fbuild%0ACIRCUIT_NAME%3Dtest_aggregate_bls_verify_512%0ATEST_DIR%3D..%2Ftest%0AOUTPUT_DIR%3D%22%24BUILD_DIR%22%2F%22%24CIRCUIT_NAME%22_cpp%0A%0Arun()%20%7B%0A%20%20%20%20if%20%5B%20!%20-d%20%22%24BUILD_DIR%22%20%5D%3B%20then%0A%20%20%20%20%20%20%20%20echo%20%22No%20build%20directory%20found.%20Creating%20build%20directory...%22%0A%20%20%20%20%20%20%20%20mkdir%20-p%20%22%24BUILD_DIR%22%0A%20%20%20%20fi%0A%0A%20%20%20%20%23%20echo%20%22****COMPILING%20CIRCUIT****%22%0A%20%20%20%20%23%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20%23%20circom%20%22%24TEST_DIR%22%2Fcircuits%2F%22%24CIRCUIT_NAME%22.circom%20--O1%20--r1cs%20--sym%20--c%20--output%20%22%24BUILD_DIR%22%0A%20%20%20%20%23%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20%23%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20%23%20echo%20%22****Running%20make%20to%20make%20witness%20generation%20binary****%22%0A%20%20%20%20%23%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20%23%20make%20-C%20%22%24OUTPUT_DIR%22%0A%20%20%20%20%23%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20%23%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****Executing%20witness%20generation****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20.%2F%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22%20%22%24TEST_DIR%22%2Finput_aggregate_bls_verify_512.json%20witness.wtns%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****Converting%20witness%20to%20json****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20npx%20snarkjs%20wej%20%22%24OUTPUT_DIR%22%2Fwitness.wtns%20%22%24OUTPUT_DIR%22%2Fwitness.json%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****GENERATING%20ZKEY%200****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20npx%20--trace-gc%20--trace-gc-ignore-scavenger%20--max-old-space-size%3D2048000%20--initial-old-space-size%3D2048000%20--no-global-gc-scheduling%20--no-incremental-marking%20--max-semi-space-size%3D1024%20--initial-heap-size%3D2048000%20--expose-gc%20snarkjs%20zkey%20new%20%22%24BUILD_DIR%22%2F%22%24CIRCUIT_NAME%22.r1cs%20%22%24PHASE1%22%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_p1.zkey%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****CONTRIBUTE%20TO%20PHASE%202%20CEREMONY****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20npx%20snarkjs%20zkey%20contribute%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_p1.zkey%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_p2.zkey%20-n%3D%22First%20phase2%20contribution%22%20-e%3D%22some%20random%20text%20for%20entropy%22%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****VERIFYING%20FINAL%20ZKEY****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20npx%20--trace-gc%20--trace-gc-ignore-scavenger%20--max-old-space-size%3D2048000%20--initial-old-space-size%3D2048000%20--no-global-gc-scheduling%20--no-incremental-marking%20--max-semi-space-size%3D1024%20--initial-heap-size%3D2048000%20--expose-gc%20npx%20snarkjs%20zkey%20verify%20%22%24BUILD_DIR%22%2F%22%24CIRCUIT_NAME%22.r1cs%20%22%24PHASE1%22%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_p2.zkey%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****EXPORTING%20VKEY****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20npx%20snarkjs%20zkey%20export%20verificationkey%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_p2.zkey%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_vkey.json%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****GENERATING%20PROOF%20FOR%20SAMPLE%20INPUT****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20~%2Frapidsnark%2Fbuild%2Fprover%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_p2.zkey%20%22%24OUTPUT_DIR%22%2Fwitness.wtns%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_proof.json%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_public.json%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****VERIFYING%20PROOF%20FOR%20SAMPLE%20INPUT****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20npx%20snarkjs%20groth16%20verify%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_vkey.json%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_public.json%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_proof.json%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%0A%20%20%20%20echo%20%22****EXPORTING%20SOLIDITY%20SMART%20CONTRACT****%22%0A%20%20%20%20start%3D%60date%20%2B%25s%60%0A%20%20%20%20npx%20snarkjs%20zkey%20export%20solidityverifier%20%22%24OUTPUT_DIR%22%2F%22%24CIRCUIT_NAME%22_p2.zkey%20verifier.sol%0A%20%20%20%20end%3D%60date%20%2B%25s%60%0A%20%20%20%20echo%20%22DONE%20(%24((end-start))s)%22%0A%7D%0A%0Amkdir%20-p%20logs%0Arun%202%3E%261%20%7C%20tee%20logs%2F%22%24CIRCUIT_NAME%22_%24(date%20'%2B%25Y-%25m-%25d-%25H-%25M').log%0A%60%60%60%0A%0A%23%23%20circuits%0A%0A1.%20%5BCircom%20Documentation%5D(https%3A%2F%2Fdocs.circom.io%2Fgetting-started%2Finstallation%2F)%3A%20Circom%20is%20a%20novel%20domain-specific%20language%20for%20defining%20arithmetic%20circuits%20that%20can%20be%20used%20to%20generate%20zero-knowledge%20proofs.%0A2.%20%5BCircom%20github%5D(https%3A%2F%2Fgithub.com%2Fiden3%2Fcircom)%0A3.%20%5Bcircomlib%20github%5D(https%3A%2F%2Fgithub.com%2Fiden3%2Fcircomlib)%20contains%20a%20library%20of%20circuit%20templates.%0A4.%20%5BzkPairing%20Docs%5D(https%3A%2F%2F0xparc.org%2Fblog%2Fzk-pairing-1)%3A%20zkSNARKs%20for%20Elliptic%20Curve%20Pairings%20(Part%201)%0A5.%20%5Bcircom-paring%20github%5D(https%3A%2F%2Fgithub.com%2Fyi-sun%2Fcircom-pairing)%3A%20proof-of-concept%20implementations%20of%20elliptic%20curve%20pairings%20(in%20particular%2C%20the%20optimal%20Ate%20pairing%20and%20Tate%20pairing)%20for%20the%20BLS12-381%20curve%20in%20circom.%0A6.%20%5BBatch%20ECDSA%20Verification%20(github)%5D(https%3A%2F%2Fgithub.com%2Fpuma314%2Fbatch-ecdsa)%3A%20Implementation%20of%20batch%20ECDSA%20verification%20in%20circom.%0A7.%20%5Bcircom-ecdsa%20(github)%5D(https%3A%2F%2Fgithub.com%2F0xPARC%2Fcircom-ecdsa)%3A%20proof-of-concept%20implementations%20of%20ECDSA%20operations%20in%20circom.%0A8.%20%5Bsnarkjs%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fsnarkjs)%3A%20This%20is%20a%20JavaScript%20and%20Pure%20Web%20Assembly%20implementation%20of%20zkSNARK%20and%20PLONK%20schemes.%20It%20uses%20the%20Groth16%20Protocol%20(3%20point%20only%20and%203%20pairings)%20and%20PLONK.%0A9.%20%5Bsnarkjs%20Prepare%20phase%202%5D(https%3A%2F%2Fgithub.com%2Fiden3%2Fsnarkjs%2Fblob%2Fmaster%2FREADME.md%237-prepare-phase-2)%3A%20Provide%20instructions%20on%20prepare%20phase%202%20and%20links%20to%20the%20Powers%20of%20Tau%20files.%0A10.%20%5BPerpetual%20Powers%20of%20Tau%5D(https%3A%2F%2Fgithub.com%2Fweijiekoh%2Fperpetualpowersoftau)%3A%20The%20goal%20is%20to%20securely%20generate%20zk-SNARK%20parameters%20for%20circuits%20of%20up%20to%202%20%5E%2028%20(260%2B%20million)%20constraints.%0A11.%20%5BPowers%20of%20Tau%20files%20on%20Dropbox%5D(https%3A%2F%2Fwww.dropbox.com%2Fsh%2Fmn47gnepqu88mzl%2FAACaJkBU7mmCq8uU8ml0-0fma%3Fdl%3D0)%3A%0A12.%20%5Beth-proof-of-consensus%3A%20circuits%20aggregate_bls_verify.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Faggregate_bls_verify.circom)%3A%20example%20circuit%20with%20the%20following%20includes%0A%0A%60%60%60%0Ainclude%20%22..%2Fcircom-pairing%2Fcircuits%2Fbls_signature.circom%22%3B%0Ainclude%20%22..%2Fcircom-pairing%2Fcircuits%2Fcurve.circom%22%3B%0Ainclude%20%22..%2Fcircom-pairing%2Fcircuits%2Fbls12_381_func.circom%22%3B%0Ainclude%20%22.%2Fsha256_bytes.circom%22%3B%0A%60%60%60%0A%0A%23%23%20Contracts%0A%0ABuilt%20using%20%5Bfoundry%5D(https%3A%2F%2Fbook.getfoundry.sh%2F)(%5Bgithub%5D(https%3A%2F%2Fgithub.com%2Ffoundry-rs%2Ffoundry))%20and%20%5Bforge%5D(https%3A%2F%2Fbook.getfoundry.sh%2Fforge%2F).%20Verifiers%20(%5BLight%20Client%20Contracts%5D(%23light-client-contracts))%20can%20be%20%5Bgenerated%5D(https%3A%2F%2Fdocs.circom.io%2Fgetting-started%2Fproving-circuits%2F%23verifying-from-a-smart-contract)%20from%20%5Bcircuits%5D(%23circuits)%20using%20%5Bsnarkjs%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fsnarkjs)%0A%0A%23%23%23%20Library%20Contracts%0A%0A1.%20%5Beth-proof-of-consensus%2Fcontracts%2Flib%2F%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Flib)%0A%20%20%201.%20%5BRLP%20decoder%2Freader%5D(https%3A%2F%2Fgithub.com%2Fhamdiallam%2FSolidity-RLP)%3A%20The%20reader%20contract%20provides%20an%20interface%20to%20first%20take%20RLP%20encoded%20bytes%20and%20convert%20them%20into%20an%20internal%20data%20structure%2C%20RLPItem%20through%20the%20function%2C%20toRlpItem(bytes).%0A%20%20%202.%20%5Bcurve-merkle-oracle%5D(https%3A%2F%2Fgithub.com%2Flidofinance%2Fcurve-merkle-oracle)%3A%20Trustless%20price%20oracle%20for%20ETH%2FstETH%20Curve%20pool.%0A%0A%3E%20Mechanics%0A%3E%20The%20oracle%20works%20by%20generating%20and%20verifying%20Merkle%20Patricia%20proofs%20of%20the%20following%20Ethereum%20state%3A%0A%3E%0A%3E%20Curve%20stETH%2FETH%20pool%20contract%20account%20and%20the%20following%20slots%20from%20its%20storage%20trie%3A%0A%3E%0A%3E%20admin_balances%5B0%5D%0A%3E%20admin_balances%5B1%5D%0A%3E%20stETH%20contract%20account%20and%20the%20following%20slots%20from%20its%20storage%20trie%3A%0A%3E%0A%3E%20shares%5B0xDC24316b9AE028F1497c275EB9192a3Ea0f67022%5D%0A%3E%20keccak256(%22lido.StETH.totalShares%22)%0A%3E%20keccak256(%22lido.Lido.beaconBalance%22)%0A%3E%20keccak256(%22lido.Lido.bufferedEther%22)%0A%3E%20keccak256(%22lido.Lido.depositedValidators%22)%0A%3E%20keccak256(%22lido.Lido.beaconValidators%22)%0A%0A%23%23%23%20Light%20Client%20Contracts%0A%0A1.%20%5Beth-proof-of-consensus%3A%20lightclient%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Flightclient)%0A%20%20%201.%20%5BBeaconLightClient.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol)%0A%20%20%202.%20%5BPoseidonCommitmentVerifier.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FPoseidonCommitmentVerifier.sol)%0A%20%20%203.%20%5BBLSAggregatedSignatureVerifier.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBLSAggregatedSignatureVerifier.sol)%0A%0A%23%23%23%20Bridge%20Contracts%0A%0A1.%20%5Beth-proof-of-consensus%3A%20amb%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Famb)%3A%20Arbitrary%20Message%20Bridge%0A%20%20%201.%20%5BEthereum%20Magicians%3A%20A%20standard%20interface%20for%20arbitrary%20message%20bridges%20between%20chains%2Flayers%5D(https%3A%2F%2Fethereum-magicians.org%2Ft%2Fa-standard-interface-for-arbitrary-message-bridges-between-chains-layers%2F6163)%0A%20%20%202.%20%5BToken%20BridgeL%20ETH-xDai%20Arbitrary%20Message%20Bridge%5D(https%3A%2F%2Fdocs.tokenbridge.net%2Feth-xdai-amb-bridge%2Fabout-the-eth-xdai-amb)%3A%20An%20Arbitrary%20Message%20Bridge%20(AMB)%20between%20the%20Ethereum%20Mainnet%20and%20the%20xDai%20chain%0A2.%20%5Beth-proof-of-consensus%3A%20bridge%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Fbridge)%0A%0A%23%23%23%20Additional%20Contracts%0A%0A1.%20%5Btokenbridge-contracts%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Ftokenbridge-contracts)%3A%20core%20functionality%20for%20the%20POA%20bridge.%20They%20implement%20the%20logic%20to%20relay%20assests%20between%20two%20EVM-based%20blockchain%20networks.%20The%20contracts%20collect%20bridge%20validator's%20signatures%20to%20approve%20and%20facilitate%20relay%20operations.%20(forked%20from%20%5Bomni%5D(https%3A%2F%2Fgithub.com%2Fomni%2Ftokenbridge-contracts))%0A%0A%23%23%20Relayer%0A%0A_Note%3A%20no%20public%20repository%20for%20relay%20functionality%20was%20found%20in%20%5Bsuccinctlabs%20github%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs)._%0A%0A**TODO**%3A%20This%20section%20should%20give%20an%20overview%20of%0A%0A-%20Communication%20Protocol%0A-%20Message%20Formatting%0A-%20Relayer%20CodeBase%0A-%20Relayers%20Roles%20%3A%20Creating%20Proofs%20relaying%20blocks%20etc.%0A-%20Economic%20incentives.%0A%0AAdditional%20References%0A%0A1.%20%5BBeaconLightClient%20on%20Gnosis%20Chain%5D(https%3A%2F%2Fblockscout.com%2Fxdai%2Fmainnet%2Faddress%2F0xa3ae36abaD813241b75b3Bb0e9E7a37aeFD70807)%3A%20Transactions%20every%2050%20blocks%20on%20Gnosis%20i.e.%20approximately%20every%203%20minutes%0A2.%20%5BSuccinct%20Blog%20Oct%2029%2C%202022%5D(https%3A%2F%2Fblog.succinct.xyz%2Fblog%2Fproof-of-consensus%2F)%3A%20Proof%20of%20Consensus%20Bridging%20between%20Ethereum%20and%20Gnosis%20Chain%0A%0A%3E%20On%20Gnosis%20Chain%2C%20after%20the%20Ethereum%20block%20in%20which%20the%20deposit%20transaction%20was%20included%20is%20finalized%20(generally%202%20epochs%2C%20~12%20minutes)%20and%20the%20light%20client%20has%20been%20updated%20with%20a%20block%20of%20height%20greater%20than%20or%20equal%20to%20this%20block%2C%20our%20relayer%20automatically%20submits%20an%20executeMessage%20transaction%20to%20the%20Gnosis%20AMB.%0A%0A%23%23%20Appendices%0A%0A%23%23%20Footnotes%0A%0A%5B%5Eov-1%5D%3A%20%5BSuccint%5D(https%3A%2F%2Fwww.succinct.xyz%2F)%3A%20Building%20the%20end%20game%20of%20interoperability%20with%20zkSNARKs%0A%0A%5B%5Eov-2%5D%3A%20%5BTelepathy%5D(https%3A%2F%2Fdocs.telepathy.xyz%2F)%3A%20a%20zkSNARK%20circuit%20that%20verifies%20Ethereum%20validator%20signatures%2C%20allowing%20for%20a%20gas-efficient%20light%20client%20to%20run%20as%20a%20smart%20contract%20on%20any%20EVM%20chain.%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./avalanche-xa19hNm8.js"),[]),path:"/research/chains/avalanche",type:"mdx",filePath:"research/chains/avalanche.mdx",content:"%23%20Avalanche%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AAvalanche%20is%20good%20candidate%20because%20it%20samples%20from%20a%20large%20number%20of%20validators%20to%20produce%20blocks%2C%20uses%20generic%20methods%20for%20signing%20blocks%20(RSA%20on%20a%20X.509%20certificate)%2C%20is%20moving%20to%20transition%20to%20BLS%20signatures%20for%20validators%2C%20and%20has%20numerous%20subnets.%0A%0AIn%20Avalanche%2C%20there%20are%20two%20types%20of%20consensus%20mechanisms%20(Avalanche%2C%20partially%20ordered%2C%20and%20Snowman%2C%20linearly%20ordered%20similar%20to%20other%20blockchains).%20Users%20can%20create%20arbitrary%20subnets%20in%20Avalanche%2C%20and%20any%20validator%20is%20free%20to%20participate%20the%20consensus%20for%20any%20subnet%5B%5Eov-1%5D%2C%20besides%20the%20mandatory%20participation%20of%20the%20special%20subnet%20-%20the%20Primary%20Network.%20Each%20subnet%20has%20three%20types%20of%20chains%2C%20each%20with%20different%20roles%20and%20runs%20different%20consensus%20mechanism%20and%20process%20different%20transaction%20types%3A%20(1)%20P-Chain%2C%20which%20defines%20validator%20sets%20and%20process%20validator%20related%20transactions%3B%20(2)%20X-Chain%2C%20for%20exchanging%20assets%2C%20where%20blocks%20are%20partially%20ordered%3B%20(3)%20C-Chain%2C%20which%20runs%20an%20EVM%20and%20handles%20smart%20contract%20interactions%20%5B%5Eov-2%5D.%0A%0A_Note%3A%20On%20march%2023rd%2C%202023%20Avalanche%20published%20an%20article%5B%5Eov-18%5D%20giving%20an%20overviow%20of%20the%20Cortina%20release%2C%20it's%20move%20to%20linearize%20the%20X-chain%20to%20enable%20support%20for%20WARP%20messaging._%0A%0AWe%20limit%20our%20scope%20to%20only%20the%20**Primary%20Network**%2C%20since%20any%20bridging%20implementation%20is%20likely%20replicable%20in%20subnets%2C%20and%20subnets%20are%20likely%20to%20be%20interoperable%20soon.%20For%20trustless%20bridging%2C%20only%20events%20from%20**C-Chain**%20are%20relevant%2C%20since%20the%20bridge%20must%20be%20a%20smart%20contract%20and%20all%20cross-chain%20operations%20can%20be%20conveniently%20wrapped%20inside%20contract%20interactions.%0A%0AThe%20active%20Avalanche%20validator%20set%20is%20unrestricted%20and%20permissionless%2C%20and%20has%20more%20than%201000%20members%20at%20this%20time%20%5B%5Eov-3%5D.%20Block%20proposers%20are%20randomly%20sampled%20from%20the%20active%20validator%20set%2C%20therefore%20any%20validator%20could%20potentially%20sign%20a%20block%20%5B%5Eov-4%5D.%20The%20validators%20use%20X.509%20(TLS)certificate%20to%20sign%20and%20verify%20blocks%20%5B%5Eov-5%5D%2C%20and%20the%20block%20headers%20contain%20both%20the%20certificate%20and%20the%20signature%20%5B%5Eov-6%5D.%20Neither%20Avalanche%20documentation%20or%20code%20specifies%20the%20key%20and%20signing%20algorithms%20for%20the%20X.509%20certificate%2C%20but%20the%20certificate%20auto-generated%20by%20the%20code%20(invoked%20via%20validator%20command-line%20tools)%20creates%204096-bit%20RSA%20key%20by%20default%20%5B%5Eov-7%5D.%0A%0AIn%20recent%20releases%5B%5Eov-8%5D%20%5B%5Eov-9%5D%20%5B%5Eov-10%5D%20%5B%5Eov-11%5D%20%5B%5Eov-12%5D%20%5B%5Eov-13%5D%20of%20Avalanche%2C%20validators%20may%20also%20load%20or%20generate%20an%20optional%20BLS%20key.%20This%20is%20to%20support%20Avalanche%20Warp%20Messaging%20(AWM)%20%5B%5Eov-14%5D%20%5B%5Eov-15%5D%20supporting%20inter-subnet%20messaging.%20This%20suggests%20the%20protocol%20may%20replace%20its%20signature%20scheme%20from%20RSA%20to%20BLS%20in%20the%20near%20future.%0A%0A_Note%20that%20RSA%20signature%20can%20be%20cheaply%20verified%20on-chain%2C%20per%20EIP-198%20%5B%5Eov-16%5D%20.%20Solidity%20libraries%20%5B%5Eov-17%5D%20are%20also%20available%20for%20RSA%20signature%20verification.%20In%20the%20worst%20case%2C%20even%20if%20any%20validator%20chooses%20to%20use%20a%20non-RSA%20custom-made%20certificate%2C%20most%20of%20the%20signing%20algorithms%20(ECDSA%2C%20EDDSA)%20supported%20by%20chosen%20crypto%20library%20in%20Go%20can%20also%20be%20verified%20on-chain._%0A%0A%23%23%20Consensus%20Mechanisms%0A%0AThere%20are%20two%20main%20consensus%20algorithms%3A%20Avalanche%20and%20Snowman.%20As%20stated%20above%20our%20focus%20is%20bridging%20from%20the%20**C-Chain**%20(contract(C)%20Chain)%20which%20uses%20%5BSnowman%20Consensus%5D(%23snowman-consensus).%0A%0A%23%23%23%20Avalanche%20Primary%20Network%0A%0AAvalanche%20is%20a%20network%20of%20blockchains%5B%5Econ-1%5D%2C%20this%20diagram%20gives%20an%20overview%20of%20the%20avalanche%20primiary%20network.%0A%0A!%5BAvalanche%20Primary%20Network%5D(%2Fimages%2Fresearch%2Favalanche-primary-network.png%20%22Avalanche%20Primary%20Network%22)%0A%0A%23%23%23%20Avalanche%20Consensus%0A%0AFollowing%20is%20an%20excerpt%20from%20the%20Avalanche%20Consensus%20Whitepaper%20%5B%5Econ-2%5D%2C%20it%20is%20also%20recommended%20reviewing%20Avalanche%20Blockchain%20Consensus%20Documentation%20%5B%5Econ-3%5D.%0A%0A%3E%20This%20paper%20introduces%20a%20family%20of%20leaderless%20Byzantine%20fault%20tolerance%20protocols%2C%20built%20around%20a%20metastable%20mechanism%20via%20network%20subsampling.%20These%20protocols%20provide%20a%20strong%20probabilistic%20safety%20guarantee%20in%20the%20presence%20of%20Byzantine%20adversaries%20while%20their%20concurrent%20and%20leaderless%20nature%20enables%20them%20to%20achieve%20high%20throughput%20and%20scalability.%20Unlike%20blockchains%20that%20rely%20on%20proof-of-work%2C%20they%20are%20quiescent%20and%20green.%20Unlike%20traditional%20consensus%20protocols%20where%20one%20or%20more%20nodes%20typically%20process%20linear%20bits%20in%20the%20number%20of%20total%20nodes%20per%20decision%2C%20no%20node%20processes%20more%20than%20logarithmic%20bits.%20It%20does%20not%20require%20accurate%20knowledge%20of%20all%20participants%20and%20exposes%20new%20possible%20tradeoffs%20and%20improvements%20in%20safety%20and%20liveness%20for%20building%20consensus%20protocols.%0A%3E%0A%3E%20The%20paper%20describes%20the%20Snow%20protocol%20family%2C%20analyzes%20its%20guarantees%2C%20and%20describes%20how%20it%20can%20be%20used%20to%20construct%20the%20core%20of%20an%20internet-scale%20electronic%20payment%20system%20called%20Avalanche%2C%20which%20is%20evaluated%20in%20a%20large%20scale%20deployment.%20Experiments%20demonstrate%20that%20the%20system%20can%20achieve%20high%20throughput%20(3400%20tps)%2C%20provide%20low%20confirmation%20latency%20(1.35%20sec)%2C%20and%20scale%20well%20compared%20to%20existing%20systems%20that%20deliver%20similar%20functionality.%20For%20our%20implementation%20and%20setup%2C%20the%20bottleneck%20of%20the%20system%20is%20in%20transaction%20verification.%0A%0A!%5BAvalanche%20Consensus%5D(%2Fimages%2Fresearch%2Favalanche-consensus.png%20%22Avalanche%20Consensus%22)%0A%0A%23%23%23%20Snowman%20Consensus%0A%0ASnowman%20consensus%20is%20one%20of%20the%20consensus%20mechanisms%20for%20single%20blockchains%20supported%20by%20snow%20%5B%5Econ-4%5D%2C%20the%20following%20excerp%20and%20diagram%20give%20an%20overview%20of%20how%20a%20blockchain%20(in%20our%20case%20the%20C-chain)%20can%20leverage%20one%20of%20snows%20mulitple%20conensus%20mechanisms%20(in%20our%20case%20snowman).%0A%0A%3E%20Each%20blockchain%20on%20Avalanche%20has%20several%20components%3A%20the%20virtual%20machine%2C%20database%2C%20consensus%20engine%2C%20sender%2C%20and%20handler.%20These%20components%20help%20the%20chain%20run%20smoothly.%20Blockchains%20also%20interact%20with%20the%20P2P%20layer%20and%20the%20chain%20router%20to%20send%20and%20receive%20messages.%0A%0A!%5BAvalanche%20flow%20of%20a%20single%20blockchain%5D(%2Fimages%2Fresearch%2Favalanche-flow.png%20%22Avalanche%20Flow%20of%20a%20single%20blockchain%22)%0A%0AIn%20the%20case%20of%20the%20C-Chain%2C%20avalanche%20uses%20coreth%5B%5Econ-5%5D%20a%20modified%20version%20of%20geth%2C%20as%20it's%20vm%20to%20provide%20EVM%20support.%20It%20also%20uses%20Snowman%2B%2B%20%5B%5Econ-7%5D%20as%20a%20congestion%20controle%20mechanism%2C%20effectively%20pre-selecting%20a%20set%20of%20proposers%20and%20giving%20them%20a%20submission%20window%20to%20submit%20blocks.%20If%20they%20fail%20to%20submit%20within%20their%20WindowDuration%20then%20any%20other%20validator%20can%20issue%20the%20block.%0A%0ABelow%20is%20an%20excerpt%20of%20how%20Snowman%20vms%20%5B%5Econ-6%5D%20and%20the%20consensus%20engine%20work.%0A%0A%3E%20**Implementing%20the%20Snowman%20VM%20Block**%0A%3E%20From%20the%20perspective%20of%20the%20consensus%20engine%2C%20the%20state%20of%20the%20VM%20can%20be%20defined%20as%20a%20linear%20chain%20starting%20from%20the%20genesis%20block%20through%20to%20the%20last%20accepted%20block.%0A%3E%0A%3E%20Following%20the%20last%20accepted%20block%2C%20the%20consensus%20engine%20may%20have%20any%20number%20of%20different%20blocks%20that%20are%20processing.%20The%20configuration%20of%20the%20processing%20set%20can%20be%20defined%20as%20a%20tree%20with%20the%20last%20accepted%20block%20as%20the%20root.%0A%3E%0A%3E%20In%20practice%2C%20this%20looks%20like%20the%20following%3A%0A%3E%0A%3E%20%60%60%60text%0A%3E%20%20%20%20G%0A%3E%20%20%20%20%7C%0A%3E%20%20%20%20.%0A%3E%20%20%20%20.%0A%3E%20%20%20%20.%0A%3E%20%20%20%20%7C%0A%3E%20%20%20%20L%0A%3E%20%20%20%20%7C%0A%3E%20%20%20%20A%0A%3E%20%20%2F%20%20%20%5C%0A%3E%20B%20%20%20%20%20C%0A%3E%20%60%60%60%0A%0A%23%23%20Signing%20Mechanisms%0A%0A%23%23%23%20Consensus%20Signing%20Mechanism%0A%0AAvalanche%20is%20not%20prescriptive%20about%20addressing%20schemes%2C%20choosing%20to%20instead%20leave%20addressing%20up%20to%20each%20blockchain%20%5B%5Esig-1%5D.%0A%0AAvalanche%20uses%20Transport%20Layer%20Security%2C%20TLS%2C%20to%20protect%20node-to-node%20communications%20from%20eavesdroppers.%20TLS%20combines%20the%20practicality%20of%20public-key%20cryptography%20with%20the%20efficiency%20of%20symmetric-key%20cryptography.%0A%0A%23%23%23%20Inter-Subnet%20Message%20Signing%20Mechanism%0A%0AAvalanche%20Warp%20Messaging%20(AWM)%5B%5Eov-14%5D%20%5B%5Eov-15%5D%20enables%20Subnet%20Validators%20to%20collectively%20produce%20a%20BLS%20Multi-Signature%20that%20attests%20to%20the%20validity%20of%20an%20arbitrary%20message%20(e.g.%2C%20transfer%2C%20contract%20data%2C%20etc.)%20that%20can%20be%20verified%20by%20any%20other%20Subnet.%0A%0A%23%23%23%20Transaction%20Signing%20Mechanism%0A%0AThe%20addressing%20scheme%20of%20the%20X-Chain%20and%20the%20P-Chain%20relies%20on%20secp256k1.%20Avalanche%20follows%20a%20similar%20approach%20as%20Bitcoin%20and%20hashes%20the%20ECDSA%20public%20key.%20The%2033-byte%20compressed%20representation%20of%20the%20public%20key%20is%20hashed%20with%20sha256%20once.%20The%20result%20is%20then%20hashed%20with%20ripemd160%20to%20yield%20a%2020-byte%20address.%0A%0AThe%20Avalanche%20virtual%20machine%20uses%20elliptic%20curve%20cryptography%2C%20specifically%20secp256k1%2C%20for%20its%20signatures%20on%20the%20blockchain.%0A%0A%23%23%20Verification%20Walkthrough%0A%0A1.%20Transactions%20are%20gossiped%20via%20P2P%20mechanisms%20in%20coreth%0A%0A%60%60%60go%0A%2F%2F%20Block%20represents%20an%20entire%20block%20in%20the%20Ethereum%20blockchain.%0Atype%20Block%20struct%20%7B%0A%20header%20%20%20%20%20%20%20*Header%0A%20uncles%20%20%20%20%20%20%20%5B%5D*Header%0A%20transactions%20Transactions%0A%0A%20%2F%2F%20Coreth%20specific%20data%20structures%20to%20support%20atomic%20transactions%0A%20version%20uint32%0A%20extdata%20*%5B%5Dbyte%0A%0A%20%2F%2F%20caches%0A%20hash%20atomic.Value%0A%20size%20atomic.Value%0A%7D%0A%0A%2F%2F%20Header%20represents%20a%20block%20header%20in%20the%20Ethereum%20blockchain.%0Atype%20Header%20struct%20%7B%0A%20ParentHash%20%20common.Hash%20%20%20%20%60json%3A%22parentHash%22%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20UncleHash%20%20%20common.Hash%20%20%20%20%60json%3A%22sha3Uncles%22%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Coinbase%20%20%20%20common.Address%20%60json%3A%22miner%22%20%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Root%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22stateRoot%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20TxHash%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22transactionsRoot%22%20gencodec%3A%22required%22%60%0A%20ReceiptHash%20common.Hash%20%20%20%20%60json%3A%22receiptsRoot%22%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Bloom%20%20%20%20%20%20%20Bloom%20%20%20%20%20%20%20%20%20%20%60json%3A%22logsBloom%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Difficulty%20%20*big.Int%20%20%20%20%20%20%20%60json%3A%22difficulty%22%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Number%20%20%20%20%20%20*big.Int%20%20%20%20%20%20%20%60json%3A%22number%22%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20GasLimit%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%60json%3A%22gasLimit%22%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20GasUsed%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%60json%3A%22gasUsed%22%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Time%20%20%20%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%60json%3A%22timestamp%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Extra%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%20%20%20%60json%3A%22extraData%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20MixDigest%20%20%20common.Hash%20%20%20%20%60json%3A%22mixHash%22%60%0A%20Nonce%20%20%20%20%20%20%20BlockNonce%20%20%20%20%20%60json%3A%22nonce%22%60%0A%20ExtDataHash%20common.Hash%20%20%20%20%60json%3A%22extDataHash%22%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%0A%20%2F%2F%20BaseFee%20was%20added%20by%20EIP-1559%20and%20is%20ignored%20in%20legacy%20headers.%0A%20BaseFee%20*big.Int%20%60json%3A%22baseFeePerGas%22%20rlp%3A%22optional%22%60%0A%0A%20%2F%2F%20ExtDataGasUsed%20was%20added%20by%20Apricot%20Phase%204%20and%20is%20ignored%20in%20legacy%0A%20%2F%2F%20headers.%0A%20%2F%2F%0A%20%2F%2F%20It%20is%20not%20a%20uint64%20like%20GasLimit%20or%20GasUsed%20because%20it%20is%20not%20possible%20to%0A%20%2F%2F%20correctly%20encode%20this%20field%20optionally%20with%20uint64.%0A%20ExtDataGasUsed%20*big.Int%20%60json%3A%22extDataGasUsed%22%20rlp%3A%22optional%22%60%0A%0A%20%2F%2F%20BlockGasCost%20was%20added%20by%20Apricot%20Phase%204%20and%20is%20ignored%20in%20legacy%0A%20%2F%2F%20headers.%0A%20BlockGasCost%20*big.Int%20%60json%3A%22blockGasCost%22%20rlp%3A%22optional%22%60%0A%7D%0A%0A%60%60%60%0A%0A2.%20The%20block%20is%20then%20wrapped%20into%20an%20%60innerBlock%60%20by%20%5Bsnowman%2B%2B%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2FREADME.mdx)%20and%20has%20the%20following%20interfaces%0A%0A%60%60%60go%0Atype%20Block%20interface%20%7B%0A%20ID()%20ids.ID%0A%20ParentID()%20ids.ID%0A%20Block()%20%5B%5Dbyte%0A%20Bytes()%20%5B%5Dbyte%0A%0A%20initialize(bytes%20%5B%5Dbyte)%20error%0A%7D%0A%0Atype%20SignedBlock%20interface%20%7B%0A%20Block%0A%0A%20PChainHeight()%20uint64%0A%20Timestamp()%20time.Time%0A%20Proposer()%20ids.NodeID%0A%0A%20Verify(shouldHaveProposer%20bool%2C%20chainID%20ids.ID)%20error%0A%7D%0A%0Atype%20statelessUnsignedBlock%20struct%20%7B%0A%20ParentID%20%20%20%20%20ids.ID%20%60serialize%3A%22true%22%60%0A%20Timestamp%20%20%20%20int64%20%20%60serialize%3A%22true%22%60%0A%20PChainHeight%20uint64%20%60serialize%3A%22true%22%60%0A%20Certificate%20%20%5B%5Dbyte%20%60serialize%3A%22true%22%60%0A%20Block%20%20%20%20%20%20%20%20%5B%5Dbyte%20%60serialize%3A%22true%22%60%0A%7D%0A%0Atype%20statelessBlock%20struct%20%7B%0A%20StatelessBlock%20statelessUnsignedBlock%20%60serialize%3A%22true%22%60%0A%20Signature%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%60serialize%3A%22true%22%60%0A%0A%20id%20%20%20%20%20%20%20%20ids.ID%0A%20timestamp%20time.Time%0A%20cert%20%20%20%20%20%20*x509.Certificate%0A%20proposer%20%20ids.NodeID%0A%20bytes%20%20%20%20%20%5B%5Dbyte%0A%7D%0A%60%60%60%0A%0AThe%20block%20is%20initialized%20using%20%5Bblock.Build%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fproposervm%2Fblock.go%23L231)%20which%20currently%20uses%20%60StakingCertLeaf%60%20not%20%60StakingBLSKey%60%0A%0A%60%60%60go%0A%20statelessChild%2C%20err%20%3D%20block.Build(%0A%20%20parentID%2C%0A%20%20newTimestamp%2C%0A%20%20pChainHeight%2C%0A%20%20p.vm.ctx.StakingCertLeaf%2C%0A%20%20innerBlock.Bytes()%2C%0A%20%20p.vm.ctx.ChainID%2C%0A%20%20p.vm.ctx.StakingLeafSigner%2C%0A%20)%0A%60%60%60%0A%0AThe%20%5BBuild%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fproposervm%2Fblock%2Fbuild.go%23L41)%20function%20takes%20the%20%60StakingCertLeaf%60%20as%20input%20for%20%60cert%20*x509.Certificate%60%0A%0A%60%60%60%0Afunc%20Build(%0A%20parentID%20ids.ID%2C%0A%20timestamp%20time.Time%2C%0A%20pChainHeight%20uint64%2C%0A%20cert%20*x509.Certificate%2C%0A%20blockBytes%20%5B%5Dbyte%2C%0A%20chainID%20ids.ID%2C%0A%20key%20crypto.Signer%2C%0A)%0A%60%60%60%0A%0ASignatures%20are%20verified%20using%20%5BVerify%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fproposervm%2Fblock%2Fblock.go%23L119)%20which%20checks%20the%20signature%20as%20follows%0A%0A%60%60%60go%0A%20return%20b.cert.CheckSignature(b.cert.SignatureAlgorithm%2C%20headerBytes%2C%20b.Signature)%0A%60%60%60%0A%0A%23%23%20Code%20Review%0A%0AFolllowing%20is%20a%20review%20of%20.%20Avalanche%20also%20has%20a%20%5Bcoreth%20codebase%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Fcoreth)%20which%20was%20inspired%20by%20%5Bgeth%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum).%20Please%20see%20%5Bhere%5D(.%2Fethereum-1-0.mdx)%20for%20a%20code%20review%20of%20geth.%20Following%20is%20an%20excerpt%20from%20%5Bcoreth%20README.md%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Fcoreth%2Fblob%2Fmaster%2FREADME.mdx).%0A%0A%3E%20Coreth%20(from%20core%20Ethereum)%20is%20the%20Virtual%20Machine%20(VM)%20that%20defines%20the%20Contract%20Chain%20(C-Chain).%20This%20chain%20implements%20the%20Ethereum%20Virtual%20Machine%20and%20supports%20Solidity%20smart%20contracts%20as%20well%20as%20most%20other%20Ethereum%20client%20functionality.%0A%0A%23%23%23%20Signing%0A%0A-%20%5BAvalanche%20Signing%20Codebase%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcrypto)%0A%20%20-%20%5BgetStakingSigner%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fconfig%2Fconfig.go%23L688)%3A%20Configuration%20retrieving%20validators%20BLS%20key.%20(go)%0A%20%20-%20%5BSigner%20Interface%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fplatformvm%2Fsigner%2Fsigner.go)%3A%20returns%20the%20public%20BLS%20key%20if%20it%20exists.%20(go)%0A%20%20-%20%5Bbls%20signature%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Futils%2Fcrypto%2Fbls%2Fsignature.go)%3A%20Includes%20functions%20%60SignatureToBytes%60%2C%20%60SignatureFromBytes%60%20and%20%60AggregateSignatures%60%20aggregates%20a%20non-zero%20number%20of%20signatures%20into%20a%20single%20aggregated%20signature.%0A%20%20-%20%5Bsecp256kr1%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Futils%2Fcrypto%2Fsecp256k1r.go)%3A%20Avalanches%20implementation%20of%20the%20ECSDA%20secp256k1r%20curve%20(go)%0A%20%20-%20%5Btx.go%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fplatformvm%2Ftxs%2Ftx.go%23L38)%3A%20Includes%20function%20for%20signing%20transactions%20using%20a%20Secp256k1r%20private%20key.%0A%0A%23%23%23%20Consensus%0A%0A-%20%5BAvalanche%20ConsensusContext%20Codebase%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fsnow%2Fcontext.go%23L63)%3A%20Context%20is%20information%20about%20the%20current%20executio%20including%20%60NetworkID%60%20is%20the%20ID%20of%20the%20network%20this%20context%20exists%20within.%20%60ChainID%60%20is%20the%20ID%20of%20the%20chain%20this%20context%20exists%20within.%20%60NodeID%60%20is%20the%20ID%20of%20this%20node.%20(go)%0A-%20%5BAvalanche%20Consensus%20CodeBase%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fsnow%2Fconsensus)%3A%20Contains%20consenus%20engines%20snowball%2C%20snowman%2C%20snowstorm%20and%20avalanche%20(go)%0A%20%20-%20%5BAvalanche%20snow%20README.md%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fsnow%2FREADME.mdx)%3A%20Documentation%20of%20the%20folow%20of%20a%20Single%20Blockchain.%0A%20%20-%20%5Bconsensus.go%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fsnow%2Fconsensus%2Favalanche%2Fconsensus.go)%3A%20Consensus%20code%20(go).%20_Consensus%20represents%20a%20general%20avalanche%20instance%20that%20can%20be%20used%20directly%20to%20process%20a%20series%20of%20partially%20ordered%20elements._%0A%20%20-%20%5Bavalanche%20poll%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fsnow%2Fconsensus%2Favalanche%2Fpoll)%3A%20Avalanches%20Polling%20(validator%20voting)%20mechanism%20(go).%0A%20%20-%20%5Bsnowman%20consensus.go%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fsnow%2Fconsensus%2Fsnowman%2Fconsensus.go)%3A%20Snowman%20consenus%20code%20(go).%20_represents%20a%20general%20snowman%20instance%20that%20can%20be%20used%20directly%20to%20process%20a%20series%20of%20dependent%20operations._%0A%20%20-%20%5Bavalanche%20snowman%20poll%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fsnow%2Fconsensus%2Fsnowman%2Fpoll)%3A%20Snowman%20Polling%20(validator%20voting)%20mechanism%20(go).%0A%0A%23%23%23%20Cryptographic%20Primitives%0A%0A**general%20primitives**%0A%0A-%20%5Bbag%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fbag)%3A%20Mulitset%20with%20the%20ability%20to%20set%20thresholds%20add%20elements%2C%20compare%20against%20other%20bags%2C%20filter%2C%20split%20and%20return%20all%20elements%20which%20have%20been%20added%20a%20number%20of%20times.%0A-%20%5Bbeacon%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fbeacon)%3A%20Beacons%20are%20a%20structure%20contiaining%20the%20NodeId%20and%20IPPort.%0A-%20%5Bbloom%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fbloom)%3A%20Avalanches%20implementation%20of%20BloomFilteres%0A-%20%5Bbufer%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fbuffer)%3A%20Buffer%20with%20queuing%20mechanisms%20including%20an%20unbounded%20deque%20%5Bdouble-ended%20queue%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FDouble-ended_queue).%20Not%20safe%20for%20concurrent%20access.%0A-%20%5Bcb58%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcb58)%3A%20%5BCB58%5D(https%3A%2F%2Fsupport.avax.network%2Fen%2Farticles%2F4587395-what-is-cb58)%20is%20a%20format%20used%20to%20represent%20keys%2C%20addresses%2C%20and%20other%20binary%20values%20in%20web%20wallets%20and%20APIs.%20CB58%20is%20the%20concatenation%20of%20the%20data%20bytes%20and%20a%20checksum.%20The%20checksum%20is%20created%20by%20taking%20the%20last%20four%20bytes%20of%20the%20SHA256%20hash%20of%20the%20data%20bytes.%0A-%20%5Bcompare%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcompare)%3A%20Compares%20slices%20and%20returns%20true%20iff%20the%20slices%20have%20the%20same%20elements%2C%20regardless%20of%20order.%0A-%20%5Bcompression%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcompression)%3A%20compresss%20and%20decompresses%20messages%20using%20gzip%20compression.%0A-%20%5Bconstants%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fconstants)%3A%20Constants%20for%20avalanche%20including%20aliases%2C%20applications%2C%20network_ids%2C%20network%20constantns%20and%20vm_ids.%0A-%20%5Bcrypto%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcrypto)%0A%20%20-%20%5Bbls%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcrypto%2Fbls)%3A%20Provides%20the%20interface%20to%20the%20%5Bblst%5D(https%3A%2F%2Fgithub.com%2Fsupranational%2Fblst%2F)%20BLS12-381%20signature%20library.%0A%20%20-%20%5Bkeychain%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcrypto%2Fkeychain)%3A%20implements%20functions%20for%20a%20keychain%20to%20return%20its%20main%20address%20and%20to%20sign%20a%20hash.%0A%20%20-%20%5Bledger%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcrypto%2Fledger)%3A%20Ledger%20is%20a%20wrapper%20around%20the%20low-level%20Ledger%20Device%20interface%20that%20provides%20Avalanche-specific%20access.%0A%20%20-%20%5Bsecp256k1%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcrypto%2Fsecp256k1)%3A%20Avalanche%20implementation%20of%20%5Bsecp256k1%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F1808.02988.pdf)%0A-%20%5Bdynamicip%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fdynamicip)%3A%20Updates%20and%20resolves%20public%20IP's%20using%20%5Bifconfig's%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FIfconfig)%20format.%0A-%20%5Bfilesystem%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Ffilesystem)%3A%20Reads%20and%20renames%20files.%0A-%20%5Bformatting%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fformatting)%3A%20Formats%20addresses.%20Parse%20takes%20in%20an%20address%20string%20and%20splits%20returns%20the%20corresponding%20parts.%20This%20returns%20the%20chain%20ID%20alias%2C%20bech32%20HRP%2C%20address%20bytes%2C%20and%20an%20error%20if%20it%20occurs.%0A-%20%5Bhashing%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fhashing)%3A%20see%20hash%20functions%20below.%0A-%20%5Bips%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fips)%3A%20ip%20utlitilties%20including%20claim%20(A%20self%20contained%20proof%20that%20a%20peer%20is%20claiming%20ownership%20of%20an%20IPPort%20at%20a%20given%20time.)%20and%20lookup%20(Lookup%20attempts%20to%20resolve%20a%20hostname%20to%20a%20single%20IP.%20If%20multiple%20IPs%20are%20found.%0A-%20%5Bjson%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fjson)%3B%20utilities%20for%20marshalling%20and%20unmarshalling%20json.%0A-%20%5Blinkedhashmap%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Flinkedhashmap)%3A%20is%20a%20hashmap%20that%20keeps%20track%20of%20the%20oldest%20pairing%20and%20the%20newest%20pairing.%20hashmap%20provides%20an%20O(1)%20mapping%20from%20a%20%5Bcomparable%5D(https%3A%2F%2Fgo.dev%2Fref%2Fspec%23Comparison_operators)%20key%20to%20any%20value.%0A-%20%5Bmath%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fmath)%3A%20mathematic%20functions%0A-%20%5Bmetric%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fmetric)%3A%20Provide%20metrics%20by%20integrating%20with%20%5BPrometheus%5D(https%3A%2F%2Fprometheus.io%2F).%0A-%20%5Bpassword%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fpassword)%3A%20Implements%20password%20Hashing%20using%20%5BArgon2%5D(https%3A%2F%2Fpkg.go.dev%2Fgolang.org%2Fx%2Fcrypto%2Fargon2)%0A-%20%5Bperms%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fperms)%3A%20provides%20the%20ability%20to%20modify%20file%20permissions.%0A-%20%5Bprofiler%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fprofiler)%3A%20Profiler%20provides%20helper%20methods%20for%20measuring%20the%20current%20performance%20of%20processes%2F%0A-%20%5Bresource%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fresource)%3A%20provides%20resource%20usage%20information%20including%20active%20cpu%20and%20disk%20usage.%0A-%20%5Brpc%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Frpc)%3A%20Manages%20requests%20for%20avalanche%20rpc%20endpoints.%0A-%20%5Bsampler%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fsampler)%3A%20sample%20a%20specified%20valued%20based%20on%20a%20provided%20weighted%20distribution.%20Sampling%20is%20performed%20by%20executing%20a%20modified%20binary%20search%20over%20the%20provided%20elements.%20Rather%20than%20cutting%20the%20remaining%20dataset%20in%20half%2C%20the%20algorithm%20attempt%20to%20just%20in%20to%20where%20it%20think%20the%20value%20will%20be%20assuming%20a%20linear%20distribution%20of%20the%20element%20weights.%0A-%20%5Bset%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fset)%3A%20Return%20a%20new%20set%20with%20initial%20capacity%20%5Bsize%5D.%20More%20or%20less%20than%20%5Bsize%5D%20elements%20can%20be%20added%20to%20this%20set.%20Using%20NewSet()%20rather%20than%20Set%5BT%5D%7B%7D%20is%20just%20an%20optimization%20that%20can%20be%20used%20if%20you%20know%20how%20many%20elements%20will%20be%20put%20in%20this%20set.%0A-%20%5Bstorage%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fstorage)%3A%20File%20system%20storage%0A-%20%5Btimer%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Ftimer)%3A%20Timer%20wraps%20a%20timer%20object.%20This%20allows%20a%20user%20to%20specify%20a%20handler.%20Once%20specifying%20the%20handler%2C%20the%20dispatch%20thread%20can%20be%20called.%20The%20dispatcher%20will%20only%20return%20after%20calling%20Stop.%20SetTimeoutIn%20will%20result%20in%20calling%20the%20handler%20in%20the%20specified%20amount%20of%20time.%0A-%20%5Bulimit%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fulimit)%3A%20Manages%20resource%20limits.%0A-%20%5Bunits%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Funits)%3A%20Unit%20Constants%20(e.g.%20%60Avax%20%20%20%20%20%20uint64%20%3D%201000%20*%20MilliAvax%60%20)%0A-%20%5Bwindow%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fwindow)%3A%20an%20interface%20which%20represents%20a%20sliding%20window%20of%20elements.%0A-%20%5Bwrappers%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fwrappers)%3A%20Wrappers%20for%20packing%20and%20unpacking%20data.%0A%0A**hash%20functions**%0A%0A-%20%5Bhashing%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fhashing)%0A%20%20-%20%5Bsha256%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Futils%2Fhashing%2Fhashing.go%23L7)%3A%20Implements%20%5BSHA256%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSHA-2)%20hashing.%0A%20%20-%20%5Bripmed160%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Futils%2Fhashing%2Fhashing.go%23LL11C2-L11C2)%3A%20Implements%20%5BRIPEMD%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FRIPEMD)%20(RIPE%20Message%20Digest)%2C%20a%20family%20of%20cryptographic%20hash%20functions%20developed%20in%201992%20(the%20original%20RIPEMD)%20and%201996%20(other%20variants).%20There%20are%20five%20functions%20in%20the%20family%3A%20RIPEMD%2C%20RIPEMD-128%2C%20RIPEMD-160%2C%20RIPEMD-256%2C%20and%20RIPEMD-320%2C%20of%20which%20RIPEMD-160%20is%20the%20most%20common.%0A%20%20-%20%5Bring%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Futils%2Fhashing%2Fconsistent%2Fring.go)%3A%20Ring%20is%20an%20interface%20for%20a%20consistent%20%5Bhashing%20ring%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FConsistent_hashing).%0A-%20%5BArgon2%20password%20hashing%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fpassword)%3A%20Implements%20password%20Hashing%20using%20%5BArgon2%5D(https%3A%2F%2Fpkg.go.dev%2Fgolang.org%2Fx%2Fcrypto%2Fargon2)%0A%0A**encryption**%0A%0A**random%20number%20generators**%0A%0A**serilization**%0A%0A**virtual%20machines**%0A%0A-%20%5Bvms%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fvms)%3A%20Avalanche%20Virtual%20Machines%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BScalable%20and%20Probabilistic%20Leaderless%20BFT%20Consensus%20through%20Metastability%5D(https%3A%2F%2Fassets.website-files.com%2F5d80307810123f5ffbb34d6e%2F6009805681b416f34dcae012_Avalanche%2520Consensus%2520Whitepaper.pdf)%3A%20This%20paper%20introduces%20a%20family%20of%20leaderless%20Byzantine%20fault%20tolerance%20protocols%2C%20built%20around%20a%20metastable%20mechanism%20via%20network%20subsampling.%0A-%20%5BAvalanche%20Blockchain%20Consensus%20Documentation%5D(https%3A%2F%2Fdocs.avax.network%2Foverview%2Fgetting-started%2Favalanche-consensus)%3A%20Overive%20of%20the%20Snowball%20Algorithm%20used%20for%20Avalanche%20Consenus%20and%20it's%20use%20of%20Directed%20Acyclic%20Graphs%20(DAGs).%0A-%20%5BAvalanche%20Subnet%20Overview%20Documentation%5D(https%3A%2F%2Fdocs.avax.network%2Fsubnets)%3A%20Overview%20of%20Avalanches%20Subnets%20and%20their%20use%20of%20Avalanche's%203%20built-in%20blockchains%3A%20Platform%20Chain%20(P-Chain)%2C%20Contract%20Chain%20(C-Chain)%20and%20Exchange%20Chain%20(X-Chain).%0A-%20%5BAvalanche%20Get%20Current%20Validator%20Documentation%5D(https%3A%2F%2Fdocs.avax.network%2Fapis%2Favalanchego%2Fapis%2Fp-chain%23platformgetcurrentvalidators)%3A%20List%20the%20current%20validators%20of%20the%20given%20Subnet.%20Signer%20is%20the%20node's%20BLS%20public%20key%20and%20proof%20of%20possession.%0A-%20%5BAvalanche%20Get%20Node%20Id%20Documentation%5D(https%3A%2F%2Fdocs.avax.network%2Fapis%2Favalanchego%2Fapis%2Finfo%23infogetnodeid)%3A%20Get%20the%20ID%20of%20this%20node.%20nodePOP%20is%20this%20node's%20BLS%20key%20and%20proof%20of%20possession.%0A-%20%5BAvalanche%20Platform%20Transaction%20Format%20Documentation%5D(https%3A%2F%2Fdocs.avax.network%2Fspecs%2Fplatform-transaction-serialization)%3A%20Documenation%20on%20how%20transactions%20are%20serialized%20and%20the%20use%20of%20the%20primitive%20serialization%20format%20for%20packing%20and%20secp256k1%20for%20cryptographic%20user%20identification.%0A%0A-%20%5BAvalanche%20Network%20Status%20Dashboard%5D(https%3A%2F%2Fstats.avax.network%2Fdashboard%2Fnetwork-status%2F)%3A%0A%0A**Signing**%0A%0A-%20%5BAvalanche%20Cryptographic%20Primitive%20Documentation%5D(https%3A%2F%2Fdocs.avax.network%2Fspecs%2Fcryptographic-primitives)%3A%20Overview%20of%20Avalanches%20cryptographic%20primitives%20focusing%20on%20it's%20use%20of%20TLS%20AND%20Secp256k1.%0A-%20Avalanche%20BLS%20Support%20Release%20Documentation%0A%20%20-%20%5BRelease%20v1.8.6%3A%20Apricot%20Phase%206%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Freleases%2Ftag%2Fv1.8.6)%3A%20Adds%20BLS%20key%20file%20and%20exposes%20blos%20proof%20of%20posession%0A%20%20-%20%5BRelease%20v1.9.1%3A%20Banff.1%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Freleases%2Ftag%2Fv1.9.1)%3A%20Added%20BLS%20signer%20to%20the%20snow.Context%0A%20%20-%20%5BRelease%20v1.9.2%3A%20Banff.2%20-%20Additional%20BLS%20Support%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Freleases%2Ftag%2Fv1.9.2)%3A%20Added%20bls%20proof%20of%20possession%20to%20%60platform.getCurrentValidators%60%20and%20%60platform.getPendingValidators%60.%20Added%20bls%20public%20key%20to%20in-memory%20staker%20objects.%20Improved%20memory%20clearing%20of%20bls%20secret%20keys.%0A-%20Avalanch%20BLS%20Relevant%20Commits%0A%20%20-%20%5BAdd%20BLS%20key%20to%20AddPermissionlessValidatorTx%20for%20the%20Primary%20Network%20(%231987)%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fcommit%2Ffb6bb81f499b4b8c0f903c8745f5b7fbd8d97668)%0A%20%20-%20%5BAdd%20BLS%20signer%20to%20snow.Context%20(%232069)%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fcommit%2F5176495568e512b2ebbfb1102dfd59541ccaa578)%0A%0A**Staking**%0A%0A-%20%5BAvalanche%20Staking%20Documentation%5D(https%3A%2F%2Fdocs.avax.network%2Fnodes%2Fvalidate%2Fstaking%23staking-parameters-on-avalanche)%3A%20Staking%20Parameters%20on%20Avalanche%0A%0A**Additional**%0A%0A-%20%5BUTXO%20Codebase%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fplatformvm%2Futxo%2Fhandler.go)%3A%20Unsigned%20Transaction%20Output%20Handling.%0A-%20%5Bxsvm%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Fxsvm)%3A%20Cross%20Subnet%20Asset%20Transfers%20README%20Overview%0A%0A%23%23%20Footnotes%0A%0AOverview%0A%0A%5B%5Eov-1%5D%3A%20%5BAvalanche%20introductory%20documentation%5D(https%3A%2F%2Fdocs.avax.network%2Foverview%2Fgetting-started%2Favalanche-platform)%3A%20Avalanche%20is%20a%20heterogeneous%20network%20of%20blockchains%20allowing%20separate%20chains%20to%20be%20created%20for%20different%20applications.%0A%0A%5B%5Eov-2%5D%3A%20%5BSnowman%20VM%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2FREADME.mdx)%3A%20To%20the%20consensus%20engine%2C%20the%20Snowman%20VM%20is%20a%20black%20box%20that%20handles%20all%20block%20building%2C%20parsing%2C%20and%20storage%20and%20provides%20a%20simple%20block%20interface%20for%20the%20consensus%20engine%20to%20call%20as%20it%20decides%20blocks.%0A%0A%5B%5Eov-3%5D%3A%20%5BAvalanche%20explorer%5D(https%3A%2F%2Fsubnets.avax.network%2F)%3A%20Block%20Explorere%20showing%20subnets%2C%20totoal%20blockchains%2C%20total%20validators%20and%20totals%20stake%20amount.%0A%0A%5B%5Eov-4%5D%3A%20%5BSnowman%2B%2B%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fproposervm%2FREADME.mdx)%3A%20a%20congestion%20control%20mechanism%20available%20for%20snowman%20VMs.%0A%0A%5B%5Eov-5%5D%3A%20%5Bblock%20verify%20function%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fproposervm%2Fblock%2Fblock.go%23L119)%3A%20statelessBlock%20Verify%20function%20in%20proposervm.%0A%0A%5B%5Eov-6%5D%3A%20%5Bblock%20structure%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fproposervm%2Fblock%2Fblock.go%23L51)%3A%20statelessBlock%20structure%20in%20proposervm.%0A%0A%5B%5Eov-7%5D%3A%20%5BNewCertAndKeyBytes%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fstaking%2Ftls.go%23L120)%3A%20Creates%20a%20new%20staking%20private%20key%20%2F%20staking%20certificate%20pair.%20Returns%20the%20PEM%20byte%20representations%20of%20both.%0A%0AAvalanche%20BLS%20Support%20Release%20Documentation%0A%0A%5B%5Eov-8%5D%3A%20%5Brelease%20notes%20on%20GitHub%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Freleases%2Ftag%2Fv1.9.2)%20and%20%5Bcode%20commit%20search%20result%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fsearch%3Fq%3Dbls%26type%3Dcommits)%0A%0A%5B%5Eov-9%5D%3A%20%5BRelease%20v1.8.6%3A%20Apricot%20Phase%206%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Freleases%2Ftag%2Fv1.8.6)%3A%20Adds%20BLS%20key%20file%20and%20exposes%20blos%20proof%20of%20posession%0A%0A%5B%5Eov-10%5D%3A%20%5BRelease%20v1.9.1%3A%20Banff.1%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Freleases%2Ftag%2Fv1.9.1)%3A%20Added%20BLS%20signer%20to%20the%20snow.Context%0A%0A%5B%5Eov-11%5D%3A%20%5BRelease%20v1.9.2%3A%20Banff.2%20-%20Additional%20BLS%20Support%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Freleases%2Ftag%2Fv1.9.2)%3A%20Added%20bls%20proof%20of%20possession%20to%20%60platform.getCurrentValidators%60%20and%20%60platform.getPendingValidators%60.%20Added%20bls%20public%20key%20to%20in-memory%20staker%20objects.%20Improved%20memory%20clearing%20of%20bls%20secret%20keys.%0A%0AAvalanche%20BLS%20Relevant%20Commits%0A%0A%5B%5Eov-12%5D%3A%20%5BAdd%20BLS%20key%20to%20AddPermissionlessValidatorTx%20for%20the%20Primary%20Network%20(%231987)%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fcommit%2Ffb6bb81f499b4b8c0f903c8745f5b7fbd8d97668)%0A%0A%5B%5Eov-13%5D%3A%20%5BAdd%20BLS%20signer%20to%20snow.Context%20(%232069)%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fcommit%2F5176495568e512b2ebbfb1102dfd59541ccaa578)%0A%0AWarp%20Messaging%0A%0A%5B%5Eov-14%5D%3A%20%5BAvalanche%20Warp%20Messaging%20(AWM)%5D(https%3A%2F%2Fmedium.com%2Favalancheavax%2Favalanche-warp-messaging-awm-launches-with-the-first-native-subnet-to-subnet-message-on-avalanche-c0ceec32144a)%3A%20AWM%20enables%20Subnet%20Validators%20to%20collectively%20produce%20a%20BLS%20Multi-Signature%20that%20attests%20to%20the%20validity%20of%20an%20arbitrary%20message%20(e.g.%2C%20transfer%2C%20contract%20data%2C%20etc.)%20that%20can%20be%20verified%20by%20any%20other%20Subnet.%0A%0A%5B%5Eov-15%5D%3A%20%5Bavalanchego%20warp%20codebase%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fvms%2Fplatformvm%2Fwarp)%3A%20Codebase%20supporting%20bls%20signing%20of%20inter-subnet%20messages.%0A%0ARSA%20Support%0A%0A%5B%5Eov-16%5D%3A%20%5BEIP-198%5D(https%3A%2F%2Fgithub.com%2Fethereum%2FEIPs%2Fblob%2Ff2db669da93ca4ce1605866e147bfa4f56303fc6%2FEIPS%2Feip-198.mdx)%3A%20Big%20integer%20modular%20exponentiation.%20Pre-compile%20for%20Ethereum%20which%20allows%20for%20efficient%20RSA%20verification%20inside%20of%20the%20EVM%2C%20as%20well%20as%20other%20forms%20of%20number%20theory-based%20cryptography.%0A%0A%5B%5Eov-17%5D%3A%20%5BSolRsaVerify%5D(https%3A%2F%2Fgithub.com%2Fadria0%2FSolRsaVerify)%3A%20Solidity%20Library%20which%20allows%20verification%20of%20RSA%20Sha256%20Pkcs1.5%20Signatures%0A%0A%5B%5Eov-18%5D%3A%20%5BCortina%3A%20X-Chain%20Linearization%5D(https%3A%2F%2Fmedium.com%2Favalancheavax%2Fcortina-x-chain-linearization-a1d9305553f6)%3A%20This%20upgrade%20linearizes%20the%20X-chain%2C%20introduces%20delegation%20batching%20to%20the%20P-chain%2C%20and%20increases%20the%20maximum%20block%20size%20on%20the%20C-chain.%20(Release%20notes%20are%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Freleases)%20and%20changelog%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fcompare%2Fv1.9.16...v1.10.0))%0A%0Aconsensus%0A%0A%5B%5Econ-1%5D%3A%20%5BAvalanche%20Platform%5D(https%3A%2F%2Fdocs.avax.network%2Foverview%2Fgetting-started%2Favalanche-platform)%3A%20Avalanche%20is%20a%20heterogeneous%20network%20of%20blockchains.%20The%20Primary%20Network%20is%20a%20special%20Subnet%20that%20contains%20all%20validators%20(including%20validators%20of%20any%20custom%20Subnets).%0A%0A%5B%5Econ-2%5D%3A%20%5BAvalanche%20Consensus%20Whitepaper%5D(https%3A%2F%2Fassets.website-files.com%2F5d80307810123f5ffbb34d6e%2F6009805681b416f34dcae012_Avalanche%2520Consensus%2520Whitepaper.pdf)%3A%20Scalable%20and%20Probabilistic%20Leaderless%20BFT%20Consensus%20through%20Metastability.%20This%20paper%20introduces%20a%20family%20of%20leaderless%20Byzantine%20fault%20tolerance%20protocols%2C%20built%20around%20a%20metastable%20mechanism%20via%20network%20subsampling.%0A%0A%5B%5Econ-3%5D%3A%20%5BAvalanche%20Docs%3A%20Consensus%5D(https%3A%2F%2Fdocs.avax.network%2Foverview%2Fgetting-started%2Favalanche-consensus)%3A%20a%20consensus%20protocol%20that%20is%20scalable%2C%20robust%2C%20and%20decentralized.%20It%20has%20low%20latency%20and%20high%20throughput.%20It%20is%20energy%20efficient%20and%20does%20not%20require%20special%20computer%20hardware.%0A%0A%5B%5Econ-4%5D%3A%20%5BSnow%20README.md%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fsnow%2FREADME.mdx)%3A%20Each%20blockchain%20on%20Avalanche%20has%20several%20components%3A%20the%20virtual%20machine%2C%20database%2C%20consensus%20engine%2C%20sender%2C%20and%20handler.%20These%20components%20help%20the%20chain%20run%20smoothly.%20Blockchains%20also%20interact%20with%20the%20P2P%20layer%20and%20the%20chain%20router%20to%20send%20and%20receive%20messages.%0A%0A%5B%5Econ-5%5D%3A%20%5BCoreth%20and%20the%20C-Chain%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Fcoreth%2Ftree%2Fmaster%23readme)%3A%20Coreth%20is%20a%20dependency%20of%20AvalancheGo%20which%20is%20used%20to%20implement%20the%20EVM%20based%20Virtual%20Machine%20for%20the%20Avalanche%20C-Chain.%0A%0A%5B%5Econ-6%5D%3A%20%5BSnowman%20VM's%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2FREADME.mdx)%3A%20To%20the%20consensus%20engine%2C%20the%20Snowman%20VM%20is%20a%20black%20box%20that%20handles%20all%20block%20building%2C%20parsing%2C%20and%20storage%20and%20provides%20a%20simple%20block%20interface%20for%20the%20consensus%20engine%20to%20call%20as%20it%20decides%20blocks.%0A%0A%5B%5Econ-7%5D%3A%20%5BSnowman%2B%2B%3A%20congestion%20control%20for%20Snowman%20VMs%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fproposervm%2FREADME.mdx)%3A%20Snowman%2B%2B%20introduces%20a%20soft%20proposer%20mechanism%20which%20attempts%20to%20select%20a%20single%20proposer%20with%20the%20power%20to%20issue%20a%20block%2C%20but%20opens%20up%20block%20production%20to%20every%20validator%20if%20sufficient%20time%20has%20passed%20without%20blocks%20being%20generated.%0A%0Asigning%0A%0A%5B%5Esig-1%5D%3A%20%5BAvalanche%20Cryptographic%20Primitive%20Documentation%5D(https%3A%2F%2Fdocs.avax.network%2Fspecs%2Fcryptographic-primitives)%3A%20Overview%20of%20Avalanches%20cryptographic%20primitives%20focusing%20on%20it's%20use%20of%20TLS%20AND%20Secp256k1.%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./avalanche-xa19hNm8.js"),[]),path:"/research/chains/avalanche.html",type:"mdx",filePath:"research/chains/avalanche.mdx",content:"%23%20Avalanche%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AAvalanche%20is%20good%20candidate%20because%20it%20samples%20from%20a%20large%20number%20of%20validators%20to%20produce%20blocks%2C%20uses%20generic%20methods%20for%20signing%20blocks%20(RSA%20on%20a%20X.509%20certificate)%2C%20is%20moving%20to%20transition%20to%20BLS%20signatures%20for%20validators%2C%20and%20has%20numerous%20subnets.%0A%0AIn%20Avalanche%2C%20there%20are%20two%20types%20of%20consensus%20mechanisms%20(Avalanche%2C%20partially%20ordered%2C%20and%20Snowman%2C%20linearly%20ordered%20similar%20to%20other%20blockchains).%20Users%20can%20create%20arbitrary%20subnets%20in%20Avalanche%2C%20and%20any%20validator%20is%20free%20to%20participate%20the%20consensus%20for%20any%20subnet%5B%5Eov-1%5D%2C%20besides%20the%20mandatory%20participation%20of%20the%20special%20subnet%20-%20the%20Primary%20Network.%20Each%20subnet%20has%20three%20types%20of%20chains%2C%20each%20with%20different%20roles%20and%20runs%20different%20consensus%20mechanism%20and%20process%20different%20transaction%20types%3A%20(1)%20P-Chain%2C%20which%20defines%20validator%20sets%20and%20process%20validator%20related%20transactions%3B%20(2)%20X-Chain%2C%20for%20exchanging%20assets%2C%20where%20blocks%20are%20partially%20ordered%3B%20(3)%20C-Chain%2C%20which%20runs%20an%20EVM%20and%20handles%20smart%20contract%20interactions%20%5B%5Eov-2%5D.%0A%0A_Note%3A%20On%20march%2023rd%2C%202023%20Avalanche%20published%20an%20article%5B%5Eov-18%5D%20giving%20an%20overviow%20of%20the%20Cortina%20release%2C%20it's%20move%20to%20linearize%20the%20X-chain%20to%20enable%20support%20for%20WARP%20messaging._%0A%0AWe%20limit%20our%20scope%20to%20only%20the%20**Primary%20Network**%2C%20since%20any%20bridging%20implementation%20is%20likely%20replicable%20in%20subnets%2C%20and%20subnets%20are%20likely%20to%20be%20interoperable%20soon.%20For%20trustless%20bridging%2C%20only%20events%20from%20**C-Chain**%20are%20relevant%2C%20since%20the%20bridge%20must%20be%20a%20smart%20contract%20and%20all%20cross-chain%20operations%20can%20be%20conveniently%20wrapped%20inside%20contract%20interactions.%0A%0AThe%20active%20Avalanche%20validator%20set%20is%20unrestricted%20and%20permissionless%2C%20and%20has%20more%20than%201000%20members%20at%20this%20time%20%5B%5Eov-3%5D.%20Block%20proposers%20are%20randomly%20sampled%20from%20the%20active%20validator%20set%2C%20therefore%20any%20validator%20could%20potentially%20sign%20a%20block%20%5B%5Eov-4%5D.%20The%20validators%20use%20X.509%20(TLS)certificate%20to%20sign%20and%20verify%20blocks%20%5B%5Eov-5%5D%2C%20and%20the%20block%20headers%20contain%20both%20the%20certificate%20and%20the%20signature%20%5B%5Eov-6%5D.%20Neither%20Avalanche%20documentation%20or%20code%20specifies%20the%20key%20and%20signing%20algorithms%20for%20the%20X.509%20certificate%2C%20but%20the%20certificate%20auto-generated%20by%20the%20code%20(invoked%20via%20validator%20command-line%20tools)%20creates%204096-bit%20RSA%20key%20by%20default%20%5B%5Eov-7%5D.%0A%0AIn%20recent%20releases%5B%5Eov-8%5D%20%5B%5Eov-9%5D%20%5B%5Eov-10%5D%20%5B%5Eov-11%5D%20%5B%5Eov-12%5D%20%5B%5Eov-13%5D%20of%20Avalanche%2C%20validators%20may%20also%20load%20or%20generate%20an%20optional%20BLS%20key.%20This%20is%20to%20support%20Avalanche%20Warp%20Messaging%20(AWM)%20%5B%5Eov-14%5D%20%5B%5Eov-15%5D%20supporting%20inter-subnet%20messaging.%20This%20suggests%20the%20protocol%20may%20replace%20its%20signature%20scheme%20from%20RSA%20to%20BLS%20in%20the%20near%20future.%0A%0A_Note%20that%20RSA%20signature%20can%20be%20cheaply%20verified%20on-chain%2C%20per%20EIP-198%20%5B%5Eov-16%5D%20.%20Solidity%20libraries%20%5B%5Eov-17%5D%20are%20also%20available%20for%20RSA%20signature%20verification.%20In%20the%20worst%20case%2C%20even%20if%20any%20validator%20chooses%20to%20use%20a%20non-RSA%20custom-made%20certificate%2C%20most%20of%20the%20signing%20algorithms%20(ECDSA%2C%20EDDSA)%20supported%20by%20chosen%20crypto%20library%20in%20Go%20can%20also%20be%20verified%20on-chain._%0A%0A%23%23%20Consensus%20Mechanisms%0A%0AThere%20are%20two%20main%20consensus%20algorithms%3A%20Avalanche%20and%20Snowman.%20As%20stated%20above%20our%20focus%20is%20bridging%20from%20the%20**C-Chain**%20(contract(C)%20Chain)%20which%20uses%20%5BSnowman%20Consensus%5D(%23snowman-consensus).%0A%0A%23%23%23%20Avalanche%20Primary%20Network%0A%0AAvalanche%20is%20a%20network%20of%20blockchains%5B%5Econ-1%5D%2C%20this%20diagram%20gives%20an%20overview%20of%20the%20avalanche%20primiary%20network.%0A%0A!%5BAvalanche%20Primary%20Network%5D(%2Fimages%2Fresearch%2Favalanche-primary-network.png%20%22Avalanche%20Primary%20Network%22)%0A%0A%23%23%23%20Avalanche%20Consensus%0A%0AFollowing%20is%20an%20excerpt%20from%20the%20Avalanche%20Consensus%20Whitepaper%20%5B%5Econ-2%5D%2C%20it%20is%20also%20recommended%20reviewing%20Avalanche%20Blockchain%20Consensus%20Documentation%20%5B%5Econ-3%5D.%0A%0A%3E%20This%20paper%20introduces%20a%20family%20of%20leaderless%20Byzantine%20fault%20tolerance%20protocols%2C%20built%20around%20a%20metastable%20mechanism%20via%20network%20subsampling.%20These%20protocols%20provide%20a%20strong%20probabilistic%20safety%20guarantee%20in%20the%20presence%20of%20Byzantine%20adversaries%20while%20their%20concurrent%20and%20leaderless%20nature%20enables%20them%20to%20achieve%20high%20throughput%20and%20scalability.%20Unlike%20blockchains%20that%20rely%20on%20proof-of-work%2C%20they%20are%20quiescent%20and%20green.%20Unlike%20traditional%20consensus%20protocols%20where%20one%20or%20more%20nodes%20typically%20process%20linear%20bits%20in%20the%20number%20of%20total%20nodes%20per%20decision%2C%20no%20node%20processes%20more%20than%20logarithmic%20bits.%20It%20does%20not%20require%20accurate%20knowledge%20of%20all%20participants%20and%20exposes%20new%20possible%20tradeoffs%20and%20improvements%20in%20safety%20and%20liveness%20for%20building%20consensus%20protocols.%0A%3E%0A%3E%20The%20paper%20describes%20the%20Snow%20protocol%20family%2C%20analyzes%20its%20guarantees%2C%20and%20describes%20how%20it%20can%20be%20used%20to%20construct%20the%20core%20of%20an%20internet-scale%20electronic%20payment%20system%20called%20Avalanche%2C%20which%20is%20evaluated%20in%20a%20large%20scale%20deployment.%20Experiments%20demonstrate%20that%20the%20system%20can%20achieve%20high%20throughput%20(3400%20tps)%2C%20provide%20low%20confirmation%20latency%20(1.35%20sec)%2C%20and%20scale%20well%20compared%20to%20existing%20systems%20that%20deliver%20similar%20functionality.%20For%20our%20implementation%20and%20setup%2C%20the%20bottleneck%20of%20the%20system%20is%20in%20transaction%20verification.%0A%0A!%5BAvalanche%20Consensus%5D(%2Fimages%2Fresearch%2Favalanche-consensus.png%20%22Avalanche%20Consensus%22)%0A%0A%23%23%23%20Snowman%20Consensus%0A%0ASnowman%20consensus%20is%20one%20of%20the%20consensus%20mechanisms%20for%20single%20blockchains%20supported%20by%20snow%20%5B%5Econ-4%5D%2C%20the%20following%20excerp%20and%20diagram%20give%20an%20overview%20of%20how%20a%20blockchain%20(in%20our%20case%20the%20C-chain)%20can%20leverage%20one%20of%20snows%20mulitple%20conensus%20mechanisms%20(in%20our%20case%20snowman).%0A%0A%3E%20Each%20blockchain%20on%20Avalanche%20has%20several%20components%3A%20the%20virtual%20machine%2C%20database%2C%20consensus%20engine%2C%20sender%2C%20and%20handler.%20These%20components%20help%20the%20chain%20run%20smoothly.%20Blockchains%20also%20interact%20with%20the%20P2P%20layer%20and%20the%20chain%20router%20to%20send%20and%20receive%20messages.%0A%0A!%5BAvalanche%20flow%20of%20a%20single%20blockchain%5D(%2Fimages%2Fresearch%2Favalanche-flow.png%20%22Avalanche%20Flow%20of%20a%20single%20blockchain%22)%0A%0AIn%20the%20case%20of%20the%20C-Chain%2C%20avalanche%20uses%20coreth%5B%5Econ-5%5D%20a%20modified%20version%20of%20geth%2C%20as%20it's%20vm%20to%20provide%20EVM%20support.%20It%20also%20uses%20Snowman%2B%2B%20%5B%5Econ-7%5D%20as%20a%20congestion%20controle%20mechanism%2C%20effectively%20pre-selecting%20a%20set%20of%20proposers%20and%20giving%20them%20a%20submission%20window%20to%20submit%20blocks.%20If%20they%20fail%20to%20submit%20within%20their%20WindowDuration%20then%20any%20other%20validator%20can%20issue%20the%20block.%0A%0ABelow%20is%20an%20excerpt%20of%20how%20Snowman%20vms%20%5B%5Econ-6%5D%20and%20the%20consensus%20engine%20work.%0A%0A%3E%20**Implementing%20the%20Snowman%20VM%20Block**%0A%3E%20From%20the%20perspective%20of%20the%20consensus%20engine%2C%20the%20state%20of%20the%20VM%20can%20be%20defined%20as%20a%20linear%20chain%20starting%20from%20the%20genesis%20block%20through%20to%20the%20last%20accepted%20block.%0A%3E%0A%3E%20Following%20the%20last%20accepted%20block%2C%20the%20consensus%20engine%20may%20have%20any%20number%20of%20different%20blocks%20that%20are%20processing.%20The%20configuration%20of%20the%20processing%20set%20can%20be%20defined%20as%20a%20tree%20with%20the%20last%20accepted%20block%20as%20the%20root.%0A%3E%0A%3E%20In%20practice%2C%20this%20looks%20like%20the%20following%3A%0A%3E%0A%3E%20%60%60%60text%0A%3E%20%20%20%20G%0A%3E%20%20%20%20%7C%0A%3E%20%20%20%20.%0A%3E%20%20%20%20.%0A%3E%20%20%20%20.%0A%3E%20%20%20%20%7C%0A%3E%20%20%20%20L%0A%3E%20%20%20%20%7C%0A%3E%20%20%20%20A%0A%3E%20%20%2F%20%20%20%5C%0A%3E%20B%20%20%20%20%20C%0A%3E%20%60%60%60%0A%0A%23%23%20Signing%20Mechanisms%0A%0A%23%23%23%20Consensus%20Signing%20Mechanism%0A%0AAvalanche%20is%20not%20prescriptive%20about%20addressing%20schemes%2C%20choosing%20to%20instead%20leave%20addressing%20up%20to%20each%20blockchain%20%5B%5Esig-1%5D.%0A%0AAvalanche%20uses%20Transport%20Layer%20Security%2C%20TLS%2C%20to%20protect%20node-to-node%20communications%20from%20eavesdroppers.%20TLS%20combines%20the%20practicality%20of%20public-key%20cryptography%20with%20the%20efficiency%20of%20symmetric-key%20cryptography.%0A%0A%23%23%23%20Inter-Subnet%20Message%20Signing%20Mechanism%0A%0AAvalanche%20Warp%20Messaging%20(AWM)%5B%5Eov-14%5D%20%5B%5Eov-15%5D%20enables%20Subnet%20Validators%20to%20collectively%20produce%20a%20BLS%20Multi-Signature%20that%20attests%20to%20the%20validity%20of%20an%20arbitrary%20message%20(e.g.%2C%20transfer%2C%20contract%20data%2C%20etc.)%20that%20can%20be%20verified%20by%20any%20other%20Subnet.%0A%0A%23%23%23%20Transaction%20Signing%20Mechanism%0A%0AThe%20addressing%20scheme%20of%20the%20X-Chain%20and%20the%20P-Chain%20relies%20on%20secp256k1.%20Avalanche%20follows%20a%20similar%20approach%20as%20Bitcoin%20and%20hashes%20the%20ECDSA%20public%20key.%20The%2033-byte%20compressed%20representation%20of%20the%20public%20key%20is%20hashed%20with%20sha256%20once.%20The%20result%20is%20then%20hashed%20with%20ripemd160%20to%20yield%20a%2020-byte%20address.%0A%0AThe%20Avalanche%20virtual%20machine%20uses%20elliptic%20curve%20cryptography%2C%20specifically%20secp256k1%2C%20for%20its%20signatures%20on%20the%20blockchain.%0A%0A%23%23%20Verification%20Walkthrough%0A%0A1.%20Transactions%20are%20gossiped%20via%20P2P%20mechanisms%20in%20coreth%0A%0A%60%60%60go%0A%2F%2F%20Block%20represents%20an%20entire%20block%20in%20the%20Ethereum%20blockchain.%0Atype%20Block%20struct%20%7B%0A%20header%20%20%20%20%20%20%20*Header%0A%20uncles%20%20%20%20%20%20%20%5B%5D*Header%0A%20transactions%20Transactions%0A%0A%20%2F%2F%20Coreth%20specific%20data%20structures%20to%20support%20atomic%20transactions%0A%20version%20uint32%0A%20extdata%20*%5B%5Dbyte%0A%0A%20%2F%2F%20caches%0A%20hash%20atomic.Value%0A%20size%20atomic.Value%0A%7D%0A%0A%2F%2F%20Header%20represents%20a%20block%20header%20in%20the%20Ethereum%20blockchain.%0Atype%20Header%20struct%20%7B%0A%20ParentHash%20%20common.Hash%20%20%20%20%60json%3A%22parentHash%22%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20UncleHash%20%20%20common.Hash%20%20%20%20%60json%3A%22sha3Uncles%22%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Coinbase%20%20%20%20common.Address%20%60json%3A%22miner%22%20%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Root%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22stateRoot%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20TxHash%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22transactionsRoot%22%20gencodec%3A%22required%22%60%0A%20ReceiptHash%20common.Hash%20%20%20%20%60json%3A%22receiptsRoot%22%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Bloom%20%20%20%20%20%20%20Bloom%20%20%20%20%20%20%20%20%20%20%60json%3A%22logsBloom%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Difficulty%20%20*big.Int%20%20%20%20%20%20%20%60json%3A%22difficulty%22%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Number%20%20%20%20%20%20*big.Int%20%20%20%20%20%20%20%60json%3A%22number%22%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20GasLimit%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%60json%3A%22gasLimit%22%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20GasUsed%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%60json%3A%22gasUsed%22%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Time%20%20%20%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%60json%3A%22timestamp%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Extra%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%20%20%20%60json%3A%22extraData%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20MixDigest%20%20%20common.Hash%20%20%20%20%60json%3A%22mixHash%22%60%0A%20Nonce%20%20%20%20%20%20%20BlockNonce%20%20%20%20%20%60json%3A%22nonce%22%60%0A%20ExtDataHash%20common.Hash%20%20%20%20%60json%3A%22extDataHash%22%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%0A%20%2F%2F%20BaseFee%20was%20added%20by%20EIP-1559%20and%20is%20ignored%20in%20legacy%20headers.%0A%20BaseFee%20*big.Int%20%60json%3A%22baseFeePerGas%22%20rlp%3A%22optional%22%60%0A%0A%20%2F%2F%20ExtDataGasUsed%20was%20added%20by%20Apricot%20Phase%204%20and%20is%20ignored%20in%20legacy%0A%20%2F%2F%20headers.%0A%20%2F%2F%0A%20%2F%2F%20It%20is%20not%20a%20uint64%20like%20GasLimit%20or%20GasUsed%20because%20it%20is%20not%20possible%20to%0A%20%2F%2F%20correctly%20encode%20this%20field%20optionally%20with%20uint64.%0A%20ExtDataGasUsed%20*big.Int%20%60json%3A%22extDataGasUsed%22%20rlp%3A%22optional%22%60%0A%0A%20%2F%2F%20BlockGasCost%20was%20added%20by%20Apricot%20Phase%204%20and%20is%20ignored%20in%20legacy%0A%20%2F%2F%20headers.%0A%20BlockGasCost%20*big.Int%20%60json%3A%22blockGasCost%22%20rlp%3A%22optional%22%60%0A%7D%0A%0A%60%60%60%0A%0A2.%20The%20block%20is%20then%20wrapped%20into%20an%20%60innerBlock%60%20by%20%5Bsnowman%2B%2B%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2FREADME.mdx)%20and%20has%20the%20following%20interfaces%0A%0A%60%60%60go%0Atype%20Block%20interface%20%7B%0A%20ID()%20ids.ID%0A%20ParentID()%20ids.ID%0A%20Block()%20%5B%5Dbyte%0A%20Bytes()%20%5B%5Dbyte%0A%0A%20initialize(bytes%20%5B%5Dbyte)%20error%0A%7D%0A%0Atype%20SignedBlock%20interface%20%7B%0A%20Block%0A%0A%20PChainHeight()%20uint64%0A%20Timestamp()%20time.Time%0A%20Proposer()%20ids.NodeID%0A%0A%20Verify(shouldHaveProposer%20bool%2C%20chainID%20ids.ID)%20error%0A%7D%0A%0Atype%20statelessUnsignedBlock%20struct%20%7B%0A%20ParentID%20%20%20%20%20ids.ID%20%60serialize%3A%22true%22%60%0A%20Timestamp%20%20%20%20int64%20%20%60serialize%3A%22true%22%60%0A%20PChainHeight%20uint64%20%60serialize%3A%22true%22%60%0A%20Certificate%20%20%5B%5Dbyte%20%60serialize%3A%22true%22%60%0A%20Block%20%20%20%20%20%20%20%20%5B%5Dbyte%20%60serialize%3A%22true%22%60%0A%7D%0A%0Atype%20statelessBlock%20struct%20%7B%0A%20StatelessBlock%20statelessUnsignedBlock%20%60serialize%3A%22true%22%60%0A%20Signature%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%60serialize%3A%22true%22%60%0A%0A%20id%20%20%20%20%20%20%20%20ids.ID%0A%20timestamp%20time.Time%0A%20cert%20%20%20%20%20%20*x509.Certificate%0A%20proposer%20%20ids.NodeID%0A%20bytes%20%20%20%20%20%5B%5Dbyte%0A%7D%0A%60%60%60%0A%0AThe%20block%20is%20initialized%20using%20%5Bblock.Build%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fproposervm%2Fblock.go%23L231)%20which%20currently%20uses%20%60StakingCertLeaf%60%20not%20%60StakingBLSKey%60%0A%0A%60%60%60go%0A%20statelessChild%2C%20err%20%3D%20block.Build(%0A%20%20parentID%2C%0A%20%20newTimestamp%2C%0A%20%20pChainHeight%2C%0A%20%20p.vm.ctx.StakingCertLeaf%2C%0A%20%20innerBlock.Bytes()%2C%0A%20%20p.vm.ctx.ChainID%2C%0A%20%20p.vm.ctx.StakingLeafSigner%2C%0A%20)%0A%60%60%60%0A%0AThe%20%5BBuild%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fproposervm%2Fblock%2Fbuild.go%23L41)%20function%20takes%20the%20%60StakingCertLeaf%60%20as%20input%20for%20%60cert%20*x509.Certificate%60%0A%0A%60%60%60%0Afunc%20Build(%0A%20parentID%20ids.ID%2C%0A%20timestamp%20time.Time%2C%0A%20pChainHeight%20uint64%2C%0A%20cert%20*x509.Certificate%2C%0A%20blockBytes%20%5B%5Dbyte%2C%0A%20chainID%20ids.ID%2C%0A%20key%20crypto.Signer%2C%0A)%0A%60%60%60%0A%0ASignatures%20are%20verified%20using%20%5BVerify%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fproposervm%2Fblock%2Fblock.go%23L119)%20which%20checks%20the%20signature%20as%20follows%0A%0A%60%60%60go%0A%20return%20b.cert.CheckSignature(b.cert.SignatureAlgorithm%2C%20headerBytes%2C%20b.Signature)%0A%60%60%60%0A%0A%23%23%20Code%20Review%0A%0AFolllowing%20is%20a%20review%20of%20.%20Avalanche%20also%20has%20a%20%5Bcoreth%20codebase%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Fcoreth)%20which%20was%20inspired%20by%20%5Bgeth%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum).%20Please%20see%20%5Bhere%5D(.%2Fethereum-1-0.mdx)%20for%20a%20code%20review%20of%20geth.%20Following%20is%20an%20excerpt%20from%20%5Bcoreth%20README.md%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Fcoreth%2Fblob%2Fmaster%2FREADME.mdx).%0A%0A%3E%20Coreth%20(from%20core%20Ethereum)%20is%20the%20Virtual%20Machine%20(VM)%20that%20defines%20the%20Contract%20Chain%20(C-Chain).%20This%20chain%20implements%20the%20Ethereum%20Virtual%20Machine%20and%20supports%20Solidity%20smart%20contracts%20as%20well%20as%20most%20other%20Ethereum%20client%20functionality.%0A%0A%23%23%23%20Signing%0A%0A-%20%5BAvalanche%20Signing%20Codebase%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcrypto)%0A%20%20-%20%5BgetStakingSigner%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fconfig%2Fconfig.go%23L688)%3A%20Configuration%20retrieving%20validators%20BLS%20key.%20(go)%0A%20%20-%20%5BSigner%20Interface%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fplatformvm%2Fsigner%2Fsigner.go)%3A%20returns%20the%20public%20BLS%20key%20if%20it%20exists.%20(go)%0A%20%20-%20%5Bbls%20signature%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Futils%2Fcrypto%2Fbls%2Fsignature.go)%3A%20Includes%20functions%20%60SignatureToBytes%60%2C%20%60SignatureFromBytes%60%20and%20%60AggregateSignatures%60%20aggregates%20a%20non-zero%20number%20of%20signatures%20into%20a%20single%20aggregated%20signature.%0A%20%20-%20%5Bsecp256kr1%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Futils%2Fcrypto%2Fsecp256k1r.go)%3A%20Avalanches%20implementation%20of%20the%20ECSDA%20secp256k1r%20curve%20(go)%0A%20%20-%20%5Btx.go%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fplatformvm%2Ftxs%2Ftx.go%23L38)%3A%20Includes%20function%20for%20signing%20transactions%20using%20a%20Secp256k1r%20private%20key.%0A%0A%23%23%23%20Consensus%0A%0A-%20%5BAvalanche%20ConsensusContext%20Codebase%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fsnow%2Fcontext.go%23L63)%3A%20Context%20is%20information%20about%20the%20current%20executio%20including%20%60NetworkID%60%20is%20the%20ID%20of%20the%20network%20this%20context%20exists%20within.%20%60ChainID%60%20is%20the%20ID%20of%20the%20chain%20this%20context%20exists%20within.%20%60NodeID%60%20is%20the%20ID%20of%20this%20node.%20(go)%0A-%20%5BAvalanche%20Consensus%20CodeBase%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fsnow%2Fconsensus)%3A%20Contains%20consenus%20engines%20snowball%2C%20snowman%2C%20snowstorm%20and%20avalanche%20(go)%0A%20%20-%20%5BAvalanche%20snow%20README.md%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fsnow%2FREADME.mdx)%3A%20Documentation%20of%20the%20folow%20of%20a%20Single%20Blockchain.%0A%20%20-%20%5Bconsensus.go%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fsnow%2Fconsensus%2Favalanche%2Fconsensus.go)%3A%20Consensus%20code%20(go).%20_Consensus%20represents%20a%20general%20avalanche%20instance%20that%20can%20be%20used%20directly%20to%20process%20a%20series%20of%20partially%20ordered%20elements._%0A%20%20-%20%5Bavalanche%20poll%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fsnow%2Fconsensus%2Favalanche%2Fpoll)%3A%20Avalanches%20Polling%20(validator%20voting)%20mechanism%20(go).%0A%20%20-%20%5Bsnowman%20consensus.go%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fsnow%2Fconsensus%2Fsnowman%2Fconsensus.go)%3A%20Snowman%20consenus%20code%20(go).%20_represents%20a%20general%20snowman%20instance%20that%20can%20be%20used%20directly%20to%20process%20a%20series%20of%20dependent%20operations._%0A%20%20-%20%5Bavalanche%20snowman%20poll%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fsnow%2Fconsensus%2Fsnowman%2Fpoll)%3A%20Snowman%20Polling%20(validator%20voting)%20mechanism%20(go).%0A%0A%23%23%23%20Cryptographic%20Primitives%0A%0A**general%20primitives**%0A%0A-%20%5Bbag%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fbag)%3A%20Mulitset%20with%20the%20ability%20to%20set%20thresholds%20add%20elements%2C%20compare%20against%20other%20bags%2C%20filter%2C%20split%20and%20return%20all%20elements%20which%20have%20been%20added%20a%20number%20of%20times.%0A-%20%5Bbeacon%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fbeacon)%3A%20Beacons%20are%20a%20structure%20contiaining%20the%20NodeId%20and%20IPPort.%0A-%20%5Bbloom%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fbloom)%3A%20Avalanches%20implementation%20of%20BloomFilteres%0A-%20%5Bbufer%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fbuffer)%3A%20Buffer%20with%20queuing%20mechanisms%20including%20an%20unbounded%20deque%20%5Bdouble-ended%20queue%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FDouble-ended_queue).%20Not%20safe%20for%20concurrent%20access.%0A-%20%5Bcb58%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcb58)%3A%20%5BCB58%5D(https%3A%2F%2Fsupport.avax.network%2Fen%2Farticles%2F4587395-what-is-cb58)%20is%20a%20format%20used%20to%20represent%20keys%2C%20addresses%2C%20and%20other%20binary%20values%20in%20web%20wallets%20and%20APIs.%20CB58%20is%20the%20concatenation%20of%20the%20data%20bytes%20and%20a%20checksum.%20The%20checksum%20is%20created%20by%20taking%20the%20last%20four%20bytes%20of%20the%20SHA256%20hash%20of%20the%20data%20bytes.%0A-%20%5Bcompare%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcompare)%3A%20Compares%20slices%20and%20returns%20true%20iff%20the%20slices%20have%20the%20same%20elements%2C%20regardless%20of%20order.%0A-%20%5Bcompression%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcompression)%3A%20compresss%20and%20decompresses%20messages%20using%20gzip%20compression.%0A-%20%5Bconstants%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fconstants)%3A%20Constants%20for%20avalanche%20including%20aliases%2C%20applications%2C%20network_ids%2C%20network%20constantns%20and%20vm_ids.%0A-%20%5Bcrypto%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcrypto)%0A%20%20-%20%5Bbls%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcrypto%2Fbls)%3A%20Provides%20the%20interface%20to%20the%20%5Bblst%5D(https%3A%2F%2Fgithub.com%2Fsupranational%2Fblst%2F)%20BLS12-381%20signature%20library.%0A%20%20-%20%5Bkeychain%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcrypto%2Fkeychain)%3A%20implements%20functions%20for%20a%20keychain%20to%20return%20its%20main%20address%20and%20to%20sign%20a%20hash.%0A%20%20-%20%5Bledger%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcrypto%2Fledger)%3A%20Ledger%20is%20a%20wrapper%20around%20the%20low-level%20Ledger%20Device%20interface%20that%20provides%20Avalanche-specific%20access.%0A%20%20-%20%5Bsecp256k1%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fcrypto%2Fsecp256k1)%3A%20Avalanche%20implementation%20of%20%5Bsecp256k1%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F1808.02988.pdf)%0A-%20%5Bdynamicip%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fdynamicip)%3A%20Updates%20and%20resolves%20public%20IP's%20using%20%5Bifconfig's%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FIfconfig)%20format.%0A-%20%5Bfilesystem%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Ffilesystem)%3A%20Reads%20and%20renames%20files.%0A-%20%5Bformatting%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fformatting)%3A%20Formats%20addresses.%20Parse%20takes%20in%20an%20address%20string%20and%20splits%20returns%20the%20corresponding%20parts.%20This%20returns%20the%20chain%20ID%20alias%2C%20bech32%20HRP%2C%20address%20bytes%2C%20and%20an%20error%20if%20it%20occurs.%0A-%20%5Bhashing%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fhashing)%3A%20see%20hash%20functions%20below.%0A-%20%5Bips%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fips)%3A%20ip%20utlitilties%20including%20claim%20(A%20self%20contained%20proof%20that%20a%20peer%20is%20claiming%20ownership%20of%20an%20IPPort%20at%20a%20given%20time.)%20and%20lookup%20(Lookup%20attempts%20to%20resolve%20a%20hostname%20to%20a%20single%20IP.%20If%20multiple%20IPs%20are%20found.%0A-%20%5Bjson%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fjson)%3B%20utilities%20for%20marshalling%20and%20unmarshalling%20json.%0A-%20%5Blinkedhashmap%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Flinkedhashmap)%3A%20is%20a%20hashmap%20that%20keeps%20track%20of%20the%20oldest%20pairing%20and%20the%20newest%20pairing.%20hashmap%20provides%20an%20O(1)%20mapping%20from%20a%20%5Bcomparable%5D(https%3A%2F%2Fgo.dev%2Fref%2Fspec%23Comparison_operators)%20key%20to%20any%20value.%0A-%20%5Bmath%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fmath)%3A%20mathematic%20functions%0A-%20%5Bmetric%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fmetric)%3A%20Provide%20metrics%20by%20integrating%20with%20%5BPrometheus%5D(https%3A%2F%2Fprometheus.io%2F).%0A-%20%5Bpassword%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fpassword)%3A%20Implements%20password%20Hashing%20using%20%5BArgon2%5D(https%3A%2F%2Fpkg.go.dev%2Fgolang.org%2Fx%2Fcrypto%2Fargon2)%0A-%20%5Bperms%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fperms)%3A%20provides%20the%20ability%20to%20modify%20file%20permissions.%0A-%20%5Bprofiler%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fprofiler)%3A%20Profiler%20provides%20helper%20methods%20for%20measuring%20the%20current%20performance%20of%20processes%2F%0A-%20%5Bresource%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fresource)%3A%20provides%20resource%20usage%20information%20including%20active%20cpu%20and%20disk%20usage.%0A-%20%5Brpc%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Frpc)%3A%20Manages%20requests%20for%20avalanche%20rpc%20endpoints.%0A-%20%5Bsampler%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fsampler)%3A%20sample%20a%20specified%20valued%20based%20on%20a%20provided%20weighted%20distribution.%20Sampling%20is%20performed%20by%20executing%20a%20modified%20binary%20search%20over%20the%20provided%20elements.%20Rather%20than%20cutting%20the%20remaining%20dataset%20in%20half%2C%20the%20algorithm%20attempt%20to%20just%20in%20to%20where%20it%20think%20the%20value%20will%20be%20assuming%20a%20linear%20distribution%20of%20the%20element%20weights.%0A-%20%5Bset%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fset)%3A%20Return%20a%20new%20set%20with%20initial%20capacity%20%5Bsize%5D.%20More%20or%20less%20than%20%5Bsize%5D%20elements%20can%20be%20added%20to%20this%20set.%20Using%20NewSet()%20rather%20than%20Set%5BT%5D%7B%7D%20is%20just%20an%20optimization%20that%20can%20be%20used%20if%20you%20know%20how%20many%20elements%20will%20be%20put%20in%20this%20set.%0A-%20%5Bstorage%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fstorage)%3A%20File%20system%20storage%0A-%20%5Btimer%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Ftimer)%3A%20Timer%20wraps%20a%20timer%20object.%20This%20allows%20a%20user%20to%20specify%20a%20handler.%20Once%20specifying%20the%20handler%2C%20the%20dispatch%20thread%20can%20be%20called.%20The%20dispatcher%20will%20only%20return%20after%20calling%20Stop.%20SetTimeoutIn%20will%20result%20in%20calling%20the%20handler%20in%20the%20specified%20amount%20of%20time.%0A-%20%5Bulimit%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fulimit)%3A%20Manages%20resource%20limits.%0A-%20%5Bunits%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Funits)%3A%20Unit%20Constants%20(e.g.%20%60Avax%20%20%20%20%20%20uint64%20%3D%201000%20*%20MilliAvax%60%20)%0A-%20%5Bwindow%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fwindow)%3A%20an%20interface%20which%20represents%20a%20sliding%20window%20of%20elements.%0A-%20%5Bwrappers%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fwrappers)%3A%20Wrappers%20for%20packing%20and%20unpacking%20data.%0A%0A**hash%20functions**%0A%0A-%20%5Bhashing%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fhashing)%0A%20%20-%20%5Bsha256%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Futils%2Fhashing%2Fhashing.go%23L7)%3A%20Implements%20%5BSHA256%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSHA-2)%20hashing.%0A%20%20-%20%5Bripmed160%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Futils%2Fhashing%2Fhashing.go%23LL11C2-L11C2)%3A%20Implements%20%5BRIPEMD%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FRIPEMD)%20(RIPE%20Message%20Digest)%2C%20a%20family%20of%20cryptographic%20hash%20functions%20developed%20in%201992%20(the%20original%20RIPEMD)%20and%201996%20(other%20variants).%20There%20are%20five%20functions%20in%20the%20family%3A%20RIPEMD%2C%20RIPEMD-128%2C%20RIPEMD-160%2C%20RIPEMD-256%2C%20and%20RIPEMD-320%2C%20of%20which%20RIPEMD-160%20is%20the%20most%20common.%0A%20%20-%20%5Bring%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Futils%2Fhashing%2Fconsistent%2Fring.go)%3A%20Ring%20is%20an%20interface%20for%20a%20consistent%20%5Bhashing%20ring%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FConsistent_hashing).%0A-%20%5BArgon2%20password%20hashing%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Futils%2Fpassword)%3A%20Implements%20password%20Hashing%20using%20%5BArgon2%5D(https%3A%2F%2Fpkg.go.dev%2Fgolang.org%2Fx%2Fcrypto%2Fargon2)%0A%0A**encryption**%0A%0A**random%20number%20generators**%0A%0A**serilization**%0A%0A**virtual%20machines**%0A%0A-%20%5Bvms%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fvms)%3A%20Avalanche%20Virtual%20Machines%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BScalable%20and%20Probabilistic%20Leaderless%20BFT%20Consensus%20through%20Metastability%5D(https%3A%2F%2Fassets.website-files.com%2F5d80307810123f5ffbb34d6e%2F6009805681b416f34dcae012_Avalanche%2520Consensus%2520Whitepaper.pdf)%3A%20This%20paper%20introduces%20a%20family%20of%20leaderless%20Byzantine%20fault%20tolerance%20protocols%2C%20built%20around%20a%20metastable%20mechanism%20via%20network%20subsampling.%0A-%20%5BAvalanche%20Blockchain%20Consensus%20Documentation%5D(https%3A%2F%2Fdocs.avax.network%2Foverview%2Fgetting-started%2Favalanche-consensus)%3A%20Overive%20of%20the%20Snowball%20Algorithm%20used%20for%20Avalanche%20Consenus%20and%20it's%20use%20of%20Directed%20Acyclic%20Graphs%20(DAGs).%0A-%20%5BAvalanche%20Subnet%20Overview%20Documentation%5D(https%3A%2F%2Fdocs.avax.network%2Fsubnets)%3A%20Overview%20of%20Avalanches%20Subnets%20and%20their%20use%20of%20Avalanche's%203%20built-in%20blockchains%3A%20Platform%20Chain%20(P-Chain)%2C%20Contract%20Chain%20(C-Chain)%20and%20Exchange%20Chain%20(X-Chain).%0A-%20%5BAvalanche%20Get%20Current%20Validator%20Documentation%5D(https%3A%2F%2Fdocs.avax.network%2Fapis%2Favalanchego%2Fapis%2Fp-chain%23platformgetcurrentvalidators)%3A%20List%20the%20current%20validators%20of%20the%20given%20Subnet.%20Signer%20is%20the%20node's%20BLS%20public%20key%20and%20proof%20of%20possession.%0A-%20%5BAvalanche%20Get%20Node%20Id%20Documentation%5D(https%3A%2F%2Fdocs.avax.network%2Fapis%2Favalanchego%2Fapis%2Finfo%23infogetnodeid)%3A%20Get%20the%20ID%20of%20this%20node.%20nodePOP%20is%20this%20node's%20BLS%20key%20and%20proof%20of%20possession.%0A-%20%5BAvalanche%20Platform%20Transaction%20Format%20Documentation%5D(https%3A%2F%2Fdocs.avax.network%2Fspecs%2Fplatform-transaction-serialization)%3A%20Documenation%20on%20how%20transactions%20are%20serialized%20and%20the%20use%20of%20the%20primitive%20serialization%20format%20for%20packing%20and%20secp256k1%20for%20cryptographic%20user%20identification.%0A%0A-%20%5BAvalanche%20Network%20Status%20Dashboard%5D(https%3A%2F%2Fstats.avax.network%2Fdashboard%2Fnetwork-status%2F)%3A%0A%0A**Signing**%0A%0A-%20%5BAvalanche%20Cryptographic%20Primitive%20Documentation%5D(https%3A%2F%2Fdocs.avax.network%2Fspecs%2Fcryptographic-primitives)%3A%20Overview%20of%20Avalanches%20cryptographic%20primitives%20focusing%20on%20it's%20use%20of%20TLS%20AND%20Secp256k1.%0A-%20Avalanche%20BLS%20Support%20Release%20Documentation%0A%20%20-%20%5BRelease%20v1.8.6%3A%20Apricot%20Phase%206%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Freleases%2Ftag%2Fv1.8.6)%3A%20Adds%20BLS%20key%20file%20and%20exposes%20blos%20proof%20of%20posession%0A%20%20-%20%5BRelease%20v1.9.1%3A%20Banff.1%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Freleases%2Ftag%2Fv1.9.1)%3A%20Added%20BLS%20signer%20to%20the%20snow.Context%0A%20%20-%20%5BRelease%20v1.9.2%3A%20Banff.2%20-%20Additional%20BLS%20Support%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Freleases%2Ftag%2Fv1.9.2)%3A%20Added%20bls%20proof%20of%20possession%20to%20%60platform.getCurrentValidators%60%20and%20%60platform.getPendingValidators%60.%20Added%20bls%20public%20key%20to%20in-memory%20staker%20objects.%20Improved%20memory%20clearing%20of%20bls%20secret%20keys.%0A-%20Avalanch%20BLS%20Relevant%20Commits%0A%20%20-%20%5BAdd%20BLS%20key%20to%20AddPermissionlessValidatorTx%20for%20the%20Primary%20Network%20(%231987)%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fcommit%2Ffb6bb81f499b4b8c0f903c8745f5b7fbd8d97668)%0A%20%20-%20%5BAdd%20BLS%20signer%20to%20snow.Context%20(%232069)%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fcommit%2F5176495568e512b2ebbfb1102dfd59541ccaa578)%0A%0A**Staking**%0A%0A-%20%5BAvalanche%20Staking%20Documentation%5D(https%3A%2F%2Fdocs.avax.network%2Fnodes%2Fvalidate%2Fstaking%23staking-parameters-on-avalanche)%3A%20Staking%20Parameters%20on%20Avalanche%0A%0A**Additional**%0A%0A-%20%5BUTXO%20Codebase%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fplatformvm%2Futxo%2Fhandler.go)%3A%20Unsigned%20Transaction%20Output%20Handling.%0A-%20%5Bxsvm%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Fxsvm)%3A%20Cross%20Subnet%20Asset%20Transfers%20README%20Overview%0A%0A%23%23%20Footnotes%0A%0AOverview%0A%0A%5B%5Eov-1%5D%3A%20%5BAvalanche%20introductory%20documentation%5D(https%3A%2F%2Fdocs.avax.network%2Foverview%2Fgetting-started%2Favalanche-platform)%3A%20Avalanche%20is%20a%20heterogeneous%20network%20of%20blockchains%20allowing%20separate%20chains%20to%20be%20created%20for%20different%20applications.%0A%0A%5B%5Eov-2%5D%3A%20%5BSnowman%20VM%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2FREADME.mdx)%3A%20To%20the%20consensus%20engine%2C%20the%20Snowman%20VM%20is%20a%20black%20box%20that%20handles%20all%20block%20building%2C%20parsing%2C%20and%20storage%20and%20provides%20a%20simple%20block%20interface%20for%20the%20consensus%20engine%20to%20call%20as%20it%20decides%20blocks.%0A%0A%5B%5Eov-3%5D%3A%20%5BAvalanche%20explorer%5D(https%3A%2F%2Fsubnets.avax.network%2F)%3A%20Block%20Explorere%20showing%20subnets%2C%20totoal%20blockchains%2C%20total%20validators%20and%20totals%20stake%20amount.%0A%0A%5B%5Eov-4%5D%3A%20%5BSnowman%2B%2B%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fproposervm%2FREADME.mdx)%3A%20a%20congestion%20control%20mechanism%20available%20for%20snowman%20VMs.%0A%0A%5B%5Eov-5%5D%3A%20%5Bblock%20verify%20function%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fproposervm%2Fblock%2Fblock.go%23L119)%3A%20statelessBlock%20Verify%20function%20in%20proposervm.%0A%0A%5B%5Eov-6%5D%3A%20%5Bblock%20structure%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fproposervm%2Fblock%2Fblock.go%23L51)%3A%20statelessBlock%20structure%20in%20proposervm.%0A%0A%5B%5Eov-7%5D%3A%20%5BNewCertAndKeyBytes%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fstaking%2Ftls.go%23L120)%3A%20Creates%20a%20new%20staking%20private%20key%20%2F%20staking%20certificate%20pair.%20Returns%20the%20PEM%20byte%20representations%20of%20both.%0A%0AAvalanche%20BLS%20Support%20Release%20Documentation%0A%0A%5B%5Eov-8%5D%3A%20%5Brelease%20notes%20on%20GitHub%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Freleases%2Ftag%2Fv1.9.2)%20and%20%5Bcode%20commit%20search%20result%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fsearch%3Fq%3Dbls%26type%3Dcommits)%0A%0A%5B%5Eov-9%5D%3A%20%5BRelease%20v1.8.6%3A%20Apricot%20Phase%206%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Freleases%2Ftag%2Fv1.8.6)%3A%20Adds%20BLS%20key%20file%20and%20exposes%20blos%20proof%20of%20posession%0A%0A%5B%5Eov-10%5D%3A%20%5BRelease%20v1.9.1%3A%20Banff.1%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Freleases%2Ftag%2Fv1.9.1)%3A%20Added%20BLS%20signer%20to%20the%20snow.Context%0A%0A%5B%5Eov-11%5D%3A%20%5BRelease%20v1.9.2%3A%20Banff.2%20-%20Additional%20BLS%20Support%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Freleases%2Ftag%2Fv1.9.2)%3A%20Added%20bls%20proof%20of%20possession%20to%20%60platform.getCurrentValidators%60%20and%20%60platform.getPendingValidators%60.%20Added%20bls%20public%20key%20to%20in-memory%20staker%20objects.%20Improved%20memory%20clearing%20of%20bls%20secret%20keys.%0A%0AAvalanche%20BLS%20Relevant%20Commits%0A%0A%5B%5Eov-12%5D%3A%20%5BAdd%20BLS%20key%20to%20AddPermissionlessValidatorTx%20for%20the%20Primary%20Network%20(%231987)%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fcommit%2Ffb6bb81f499b4b8c0f903c8745f5b7fbd8d97668)%0A%0A%5B%5Eov-13%5D%3A%20%5BAdd%20BLS%20signer%20to%20snow.Context%20(%232069)%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fcommit%2F5176495568e512b2ebbfb1102dfd59541ccaa578)%0A%0AWarp%20Messaging%0A%0A%5B%5Eov-14%5D%3A%20%5BAvalanche%20Warp%20Messaging%20(AWM)%5D(https%3A%2F%2Fmedium.com%2Favalancheavax%2Favalanche-warp-messaging-awm-launches-with-the-first-native-subnet-to-subnet-message-on-avalanche-c0ceec32144a)%3A%20AWM%20enables%20Subnet%20Validators%20to%20collectively%20produce%20a%20BLS%20Multi-Signature%20that%20attests%20to%20the%20validity%20of%20an%20arbitrary%20message%20(e.g.%2C%20transfer%2C%20contract%20data%2C%20etc.)%20that%20can%20be%20verified%20by%20any%20other%20Subnet.%0A%0A%5B%5Eov-15%5D%3A%20%5Bavalanchego%20warp%20codebase%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fvms%2Fplatformvm%2Fwarp)%3A%20Codebase%20supporting%20bls%20signing%20of%20inter-subnet%20messages.%0A%0ARSA%20Support%0A%0A%5B%5Eov-16%5D%3A%20%5BEIP-198%5D(https%3A%2F%2Fgithub.com%2Fethereum%2FEIPs%2Fblob%2Ff2db669da93ca4ce1605866e147bfa4f56303fc6%2FEIPS%2Feip-198.mdx)%3A%20Big%20integer%20modular%20exponentiation.%20Pre-compile%20for%20Ethereum%20which%20allows%20for%20efficient%20RSA%20verification%20inside%20of%20the%20EVM%2C%20as%20well%20as%20other%20forms%20of%20number%20theory-based%20cryptography.%0A%0A%5B%5Eov-17%5D%3A%20%5BSolRsaVerify%5D(https%3A%2F%2Fgithub.com%2Fadria0%2FSolRsaVerify)%3A%20Solidity%20Library%20which%20allows%20verification%20of%20RSA%20Sha256%20Pkcs1.5%20Signatures%0A%0A%5B%5Eov-18%5D%3A%20%5BCortina%3A%20X-Chain%20Linearization%5D(https%3A%2F%2Fmedium.com%2Favalancheavax%2Fcortina-x-chain-linearization-a1d9305553f6)%3A%20This%20upgrade%20linearizes%20the%20X-chain%2C%20introduces%20delegation%20batching%20to%20the%20P-chain%2C%20and%20increases%20the%20maximum%20block%20size%20on%20the%20C-chain.%20(Release%20notes%20are%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Freleases)%20and%20changelog%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fcompare%2Fv1.9.16...v1.10.0))%0A%0Aconsensus%0A%0A%5B%5Econ-1%5D%3A%20%5BAvalanche%20Platform%5D(https%3A%2F%2Fdocs.avax.network%2Foverview%2Fgetting-started%2Favalanche-platform)%3A%20Avalanche%20is%20a%20heterogeneous%20network%20of%20blockchains.%20The%20Primary%20Network%20is%20a%20special%20Subnet%20that%20contains%20all%20validators%20(including%20validators%20of%20any%20custom%20Subnets).%0A%0A%5B%5Econ-2%5D%3A%20%5BAvalanche%20Consensus%20Whitepaper%5D(https%3A%2F%2Fassets.website-files.com%2F5d80307810123f5ffbb34d6e%2F6009805681b416f34dcae012_Avalanche%2520Consensus%2520Whitepaper.pdf)%3A%20Scalable%20and%20Probabilistic%20Leaderless%20BFT%20Consensus%20through%20Metastability.%20This%20paper%20introduces%20a%20family%20of%20leaderless%20Byzantine%20fault%20tolerance%20protocols%2C%20built%20around%20a%20metastable%20mechanism%20via%20network%20subsampling.%0A%0A%5B%5Econ-3%5D%3A%20%5BAvalanche%20Docs%3A%20Consensus%5D(https%3A%2F%2Fdocs.avax.network%2Foverview%2Fgetting-started%2Favalanche-consensus)%3A%20a%20consensus%20protocol%20that%20is%20scalable%2C%20robust%2C%20and%20decentralized.%20It%20has%20low%20latency%20and%20high%20throughput.%20It%20is%20energy%20efficient%20and%20does%20not%20require%20special%20computer%20hardware.%0A%0A%5B%5Econ-4%5D%3A%20%5BSnow%20README.md%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fsnow%2FREADME.mdx)%3A%20Each%20blockchain%20on%20Avalanche%20has%20several%20components%3A%20the%20virtual%20machine%2C%20database%2C%20consensus%20engine%2C%20sender%2C%20and%20handler.%20These%20components%20help%20the%20chain%20run%20smoothly.%20Blockchains%20also%20interact%20with%20the%20P2P%20layer%20and%20the%20chain%20router%20to%20send%20and%20receive%20messages.%0A%0A%5B%5Econ-5%5D%3A%20%5BCoreth%20and%20the%20C-Chain%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Fcoreth%2Ftree%2Fmaster%23readme)%3A%20Coreth%20is%20a%20dependency%20of%20AvalancheGo%20which%20is%20used%20to%20implement%20the%20EVM%20based%20Virtual%20Machine%20for%20the%20Avalanche%20C-Chain.%0A%0A%5B%5Econ-6%5D%3A%20%5BSnowman%20VM's%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2FREADME.mdx)%3A%20To%20the%20consensus%20engine%2C%20the%20Snowman%20VM%20is%20a%20black%20box%20that%20handles%20all%20block%20building%2C%20parsing%2C%20and%20storage%20and%20provides%20a%20simple%20block%20interface%20for%20the%20consensus%20engine%20to%20call%20as%20it%20decides%20blocks.%0A%0A%5B%5Econ-7%5D%3A%20%5BSnowman%2B%2B%3A%20congestion%20control%20for%20Snowman%20VMs%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fproposervm%2FREADME.mdx)%3A%20Snowman%2B%2B%20introduces%20a%20soft%20proposer%20mechanism%20which%20attempts%20to%20select%20a%20single%20proposer%20with%20the%20power%20to%20issue%20a%20block%2C%20but%20opens%20up%20block%20production%20to%20every%20validator%20if%20sufficient%20time%20has%20passed%20without%20blocks%20being%20generated.%0A%0Asigning%0A%0A%5B%5Esig-1%5D%3A%20%5BAvalanche%20Cryptographic%20Primitive%20Documentation%5D(https%3A%2F%2Fdocs.avax.network%2Fspecs%2Fcryptographic-primitives)%3A%20Overview%20of%20Avalanches%20cryptographic%20primitives%20focusing%20on%20it's%20use%20of%20TLS%20AND%20Secp256k1.%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./binance-BvmeWro5.js"),[]),path:"/research/chains/binance",type:"mdx",filePath:"research/chains/binance.mdx",content:"%23%20Binance%20Smart%20Chain%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0ABinanace%20Smart%20Chain%20(BSC)%20has%20similar%20signature%20schemes%20to%20Polygon%20but%20with%20a%20much%20smaller%20set%20of%20validators%20and%20some%20degree%20of%20random%20(yet%20predictable%20and%20deterministic)%20perturbation%20to%20the%20active%20validator%20set.%0A%0AThe%20consensus%20protocol%20is%20based%20on%20Parlia%3Csup%3E%5B19%5D(%23f19)%3C%2Fsup%3E%2C%20a%20variation%20that%20adds%20staking%2C%20validators%2C%20and%20elections%20to%20the%20proof-of-authority%20consensus%20protocol%20Clique%2C%20initially%20proposed%20in%20the%20Ethereum%20community.%20The%20protocol%20uses%2021%20validators%20for%20producing%20and%20signing%20blocks%2C%20with%2019%20of%20them%20picked%20from%20stakers%20with%20top%20voting%20power%20and%202%20randomly%20chosen%20every%20200%20blocks%20%3Csup%3E%5B20%5D(%23f20)%3C%2Fsup%3E.%20Blocks%20are%20signed%20using%20ECDSA%20on%20secp256k1%20curves%2C%20and%20block%20headers%20can%20be%20verified%20following%20the%20standard%20signature%20verification%20process%3Csup%3E%5B21%5D(%23f21)%3C%2Fsup%3E.%0A%0A%23%23%20Consensus%20Mechanism%0A%0AFollowing%20is%20an%20excerpt%20from%20%5BBinance%20Consensus%20Engine%20documentation%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbnb-chain.github.io%2Fblob%2Fmaster%2Fdocs%2Flearn%2Fconsensus.mdx)%0A%0A%3E%20Although%20Proof-of-Work%20(PoW)%20has%20been%20recognized%20as%20a%20practical%20mechanism%20to%20implement%20a%20decentralized%20network%2C%20it%20is%20not%20friendly%20to%20the%20environment%20and%20also%20requires%20a%20large%20size%20of%20participants%20to%20maintain%20the%20security.%0A%3E%0A%3E%20Ethereum%20and%20some%20other%20blockchain%20networks%2C%20such%20as%20%5BMATIC%20Bor%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Fbor)%2C%20%5BTOMOChain%5D(https%3A%2F%2Ftomochain.com%2F)%2C%20%5BGoChain%5D(https%3A%2F%2Fgochain.io%2F)%2C%20%5BxDAI%5D(https%3A%2F%2Fxdai.io%2F)%2C%20do%20use%20%5BProof-of-Authority(PoA)%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FProof_of_authority)%20or%20its%20variants%20in%20different%20scenarios%2C%20including%20both%20testnet%20and%20mainnet.%20PoA%20provides%20some%20defense%20to%2051%25%20attack%2C%20with%20improved%20efficiency%20and%20tolerance%20to%20certain%20levels%20of%20Byzantine%20players%20(malicious%20or%20hacked).%20It%20serves%20as%20an%20easy%20choice%20to%20pick%20as%20the%20fundamentals.%0A%3E%0A%3E%20Meanwhile%2C%20the%20PoA%20protocol%20is%20most%20criticized%20for%20being%20not%20as%20decentralized%20as%20PoW%2C%20as%20the%20validators%2C%20i.e.%20the%20nodes%20that%20take%20turns%20to%20produce%20blocks%2C%20have%20all%20the%20authorities%20and%20are%20prone%20to%20corruption%20and%20security%20attacks.%20Other%20blockchains%2C%20such%20as%20EOS%20and%20Lisk%20both%2C%20introduce%20different%20types%20of%20%5BDelegated%20Proof%20of%20Stake%20(DPoS)%5D(https%3A%2F%2Fen.bitcoinwiki.org%2Fwiki%2FDPoS)%20to%20allow%20the%20token%20holders%20to%20vote%20and%20elect%20the%20validator%20set.%20It%20increases%20the%20decentralization%20and%20favors%20community%20governance.%0A%3E%0A%3E%20BSC%20here%20proposes%20to%20combine%20DPoS%20and%20PoA%20for%20consensus%2C%20so%20that%3A%0A%3E%0A%3E%201.%20Blocks%20are%20produced%20by%20a%20limited%20set%20of%20validators%0A%3E%202.%20Validators%20take%20turns%20to%20produce%20blocks%20in%20a%20PoA%20manner%2C%20similar%20to%20%5BEthereum's%20Clique%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-225)%20consensus%20design%0A%3E%203.%20Validator%20set%20are%20elected%20in%20and%20out%20based%20on%20a%20staking%20based%20governance%0A%3E%0A%3E%20The%20consensus%20protocol%20of%20BSC%20fulfills%20the%20following%20goals%3A%0A%3E%0A%3E%201.%20Short%20Blocking%20time%2C%203%20seconds%20on%20mainnet.%0A%3E%202.%20It%20requires%20limited%20time%20to%20confirm%20the%20finality%20of%20transactions%2C%20around%2045s%20for%20mainnet.%0A%3E%203.%20There%20is%20no%20inflation%20of%20native%20token%3A%20BNB%2C%20the%20block%20reward%20is%20collected%20from%20transaction%20fees%2C%20and%20it%20will%20be%20paid%20in%20BNB.%0A%3E%204.%20It%20is%20100%25%20compatible%20with%20Ethereum%20system%20.%0A%3E%205.%20It%20allows%20modern%20proof-of-stake%20blockchain%20network%20governance.%0A%0A%23%23%20Signing%20Mechanism%0A%0ABSC%20uses%20the%20same%20signing%20mechanism%20as%20Ethereum%201.0.%0A%0ATransactions%20are%20signed%20using%20recoverable%20ECDSA%20signatures.%20This%20method%20utilises%20the%20SECP-256k1%20curve.%20(see%20the%20%5BEthereum%20Yellow%20Paper%5D(https%3A%2F%2Fethereum.github.io%2Fyellowpaper%2Fpaper.pdf)%20Appendix%20F.%20Signing%20Transactions).%20go-ethereum%20utilizes%20the%20%5Bsecp256k1%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcrypto%2Fsecp256k1)%20package%20which%20wraps%20the%20bitcoin%20secp256k1%20C%20library.%20Signing%20is%20handled%20by%20the%20%5Bsigner%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fsigner)%20receives%20a%20request%20and%20produces%20a%20signature.%20Note%2C%20the%20produced%20signature%20conforms%20to%20the%20secp256k1%20curve%20R%2C%20S%20and%20V%20values%2C%20where%20the%20V%20value%20will%20be%2027%20or%2028%20for%20legacy%20reasons%2C%20if%20legacyV%3D%3Dtrue.%0A%0A**Signing**%0A%0A-%20%5BSignature%20Documentation%5D(https%3A%2F%2Fdocs.bnbchain.org%2Fdocs%2Fbeaconchain%2Flearn%2Fsignature%2F)%3A%20Binance%20overview%20of%20how%20transactions%20are%20signed%20using%20ECDSA%20curve%20Secp256k1.%0A-%20%5Bsecp256k1%20codebase%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fsecp256k1)%3A%20Binance%20secp256k1%20crytpographic%20library%20(go)%0A-%20%5Bsecp256k1%20Public%20Key%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2F03ff2992ab4674c1df8f568ee9a31596f3503c26%2Fcrypto%2Fsignature_cgo.go%23L32)%3A%20Binance%20codebase(go)%20recovering%20the%20uncompressed%20secp256k1%20key%20that%20created%20a%20given%20signature.%0A%0A%23%23%20Code%20Review%0A%0AThe%20Binance%20Smart%20chain%20is%20cloned%20from%20%5BEthereum%201.0%5D(.%2Fethereum-1-0.mdx)%20and%20thus%20the%20majority%20of%20code%20incuding%20primitives%2C%20signing%20are%20similar.%20The%20key%20addtions%20are%0A%0A-%20%5BConsensus%20-%20Parlia%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fconsensus%2Fparlia)%0A-%20%5Bsystemcontracts%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcore%2Fsystemcontracts)%0A-%20%5BMobile%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fmobile)%3A%20Outdated%20library.%0A%0ASome%20ommissions%20include%20the%20majority%20of%20work%20done%20for%20Ethereum%202.0%20for%20example%20BSC%20has%20no%20%5Bbeacon%2Fengine%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fbeacon%2Fengine).%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BParlia%20Documentation%5D(https%3A%2F%2Fdocs.bnbchain.org%2Fdocs%2Flearn%2Fconsensus%2F%23parlia)%3A%20Binance%20Consensus%20Engine%20Parlia%20Documentation%0A-%20%5BConsenus%20Engine%20Codebase%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fconsensus%2Fconsensus.go)%3A%20Binance%20algorithm%20agnostic%20consensus%20engine.%20(go)%0A-%20%5BParlia%20Consensus%20Codebase%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fconsensus%2Fparlia%2Fparlia.go)%3A%20Binance%20Parlia%20codebase%20(go)%0A-%20%5BClique%20Consensus%20Codebase%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fconsensus%2Fclique%2Fclique.go)%3A%20Clique%20implements%20the%20proof-of-authority%20consensus%20engine%20(go).%20It%20is%20what%20Parlia%20was%20based%20of.%0A-%20%5BParlia%20Consensus%20Verify%20Seal%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fconsensus%2Fparlia%2Fparlia.go%23L546)%3A%20Binance%20seal%20verification%20codebase%20(go).%20_verifySeal%20checks%20whether%20the%20signature%20contained%20in%20the%20header%20satisfies%20the%20consensus%20protocol%20requirements.%20The%20method%20accepts%20an%20optional%20list%20of%20parent%20headers%20that%20aren't%20yet%20part%20of%20the%20local%20blockchain%20to%20generate%20the%20snapshots%20from.%20The%20transition%20rule%20is%20described%20in%20the%20eth1%2F2%20merge%20spec%20EIP-3675._%0A-%20%5BEIP-3675%3A%20Upgrade%20consensus%20to%20Proof-of-Stake%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-3675)%3A%20Specification%20of%20the%20consensus%20mechanism%20upgrade%20on%20Ethereum%20Mainnet%20that%20introduces%20Proof-of-Stake.%0A%0A**Staking**%0A%0A-%20%5BBNB%20Staking%20Economics%5D(https%3A%2F%2Fdocs.bnbchain.org%2Fdocs%2Fstake%2FStaking%2F%23staking-economics)%3A%20Binance%20Staking%20Documentation%0A-%20%5BBNB%20Chain%20Staking%5D(https%3A%2F%2Fwww.bnbchain.org%2Fen%2Fstaking)%3A%20Binance%20Staking%20App%0A%0A**Additional**%0A%0A%3Ca%20name%3D%22f19%22%3E%5B19%5D%3C%2Fa%3E%20See%20%5BBSC%20Consensus%20Engine%0Adocumentations%5D(https%3A%2F%2Fdocs.bnbchain.org%2Fdocs%2Flearn%2Fconsensus%2F%23consensus-protocol)%0A%0A%3Ca%20name%3D%22f20%22%3E%5B20%5D%3C%2Fa%3E%20Following%20BEP-131%2C%20see%20a%0A%5Bsummary%5D(https%3A%2F%2Fwww.bnbchain.org%2Fen%2Fblog%2Fbep131-introducing-candidate-validators-bnb-smart-chain%2F)%0Aand%20%5Bdetailed%20specifications%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2FBEPs%2Fpull%2F131).%20Note%0Athat%20the%20proportion%20of%20randomly%20selected%20validators%20may%20increase%2C%20as%20proposed%20in%0Athe%20BEP.%0A%0A%3Ca%20name%3D%22f21%22%3E%5B21%5D%3C%2Fa%3E%20See%0A%5Bcode%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fcb9e50bdf62c6b46a71724066d39f9851181a5af%2Fconsensus%2Fparlia%2Fparlia.go%23L546)%0Afor%20full%20procedure%20and%20how%20ecrecover%20is%20used%20for%20signature%20verification.%0A%0A-%20%5BState%20of%20BNB%20Chain%20Q4%202022%5D(https%3A%2F%2Fmessari.io%2Freport%2Fstate-of-bnb-chain-q4-2022)%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./binance-BvmeWro5.js"),[]),path:"/research/chains/binance.html",type:"mdx",filePath:"research/chains/binance.mdx",content:"%23%20Binance%20Smart%20Chain%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0ABinanace%20Smart%20Chain%20(BSC)%20has%20similar%20signature%20schemes%20to%20Polygon%20but%20with%20a%20much%20smaller%20set%20of%20validators%20and%20some%20degree%20of%20random%20(yet%20predictable%20and%20deterministic)%20perturbation%20to%20the%20active%20validator%20set.%0A%0AThe%20consensus%20protocol%20is%20based%20on%20Parlia%3Csup%3E%5B19%5D(%23f19)%3C%2Fsup%3E%2C%20a%20variation%20that%20adds%20staking%2C%20validators%2C%20and%20elections%20to%20the%20proof-of-authority%20consensus%20protocol%20Clique%2C%20initially%20proposed%20in%20the%20Ethereum%20community.%20The%20protocol%20uses%2021%20validators%20for%20producing%20and%20signing%20blocks%2C%20with%2019%20of%20them%20picked%20from%20stakers%20with%20top%20voting%20power%20and%202%20randomly%20chosen%20every%20200%20blocks%20%3Csup%3E%5B20%5D(%23f20)%3C%2Fsup%3E.%20Blocks%20are%20signed%20using%20ECDSA%20on%20secp256k1%20curves%2C%20and%20block%20headers%20can%20be%20verified%20following%20the%20standard%20signature%20verification%20process%3Csup%3E%5B21%5D(%23f21)%3C%2Fsup%3E.%0A%0A%23%23%20Consensus%20Mechanism%0A%0AFollowing%20is%20an%20excerpt%20from%20%5BBinance%20Consensus%20Engine%20documentation%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbnb-chain.github.io%2Fblob%2Fmaster%2Fdocs%2Flearn%2Fconsensus.mdx)%0A%0A%3E%20Although%20Proof-of-Work%20(PoW)%20has%20been%20recognized%20as%20a%20practical%20mechanism%20to%20implement%20a%20decentralized%20network%2C%20it%20is%20not%20friendly%20to%20the%20environment%20and%20also%20requires%20a%20large%20size%20of%20participants%20to%20maintain%20the%20security.%0A%3E%0A%3E%20Ethereum%20and%20some%20other%20blockchain%20networks%2C%20such%20as%20%5BMATIC%20Bor%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Fbor)%2C%20%5BTOMOChain%5D(https%3A%2F%2Ftomochain.com%2F)%2C%20%5BGoChain%5D(https%3A%2F%2Fgochain.io%2F)%2C%20%5BxDAI%5D(https%3A%2F%2Fxdai.io%2F)%2C%20do%20use%20%5BProof-of-Authority(PoA)%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FProof_of_authority)%20or%20its%20variants%20in%20different%20scenarios%2C%20including%20both%20testnet%20and%20mainnet.%20PoA%20provides%20some%20defense%20to%2051%25%20attack%2C%20with%20improved%20efficiency%20and%20tolerance%20to%20certain%20levels%20of%20Byzantine%20players%20(malicious%20or%20hacked).%20It%20serves%20as%20an%20easy%20choice%20to%20pick%20as%20the%20fundamentals.%0A%3E%0A%3E%20Meanwhile%2C%20the%20PoA%20protocol%20is%20most%20criticized%20for%20being%20not%20as%20decentralized%20as%20PoW%2C%20as%20the%20validators%2C%20i.e.%20the%20nodes%20that%20take%20turns%20to%20produce%20blocks%2C%20have%20all%20the%20authorities%20and%20are%20prone%20to%20corruption%20and%20security%20attacks.%20Other%20blockchains%2C%20such%20as%20EOS%20and%20Lisk%20both%2C%20introduce%20different%20types%20of%20%5BDelegated%20Proof%20of%20Stake%20(DPoS)%5D(https%3A%2F%2Fen.bitcoinwiki.org%2Fwiki%2FDPoS)%20to%20allow%20the%20token%20holders%20to%20vote%20and%20elect%20the%20validator%20set.%20It%20increases%20the%20decentralization%20and%20favors%20community%20governance.%0A%3E%0A%3E%20BSC%20here%20proposes%20to%20combine%20DPoS%20and%20PoA%20for%20consensus%2C%20so%20that%3A%0A%3E%0A%3E%201.%20Blocks%20are%20produced%20by%20a%20limited%20set%20of%20validators%0A%3E%202.%20Validators%20take%20turns%20to%20produce%20blocks%20in%20a%20PoA%20manner%2C%20similar%20to%20%5BEthereum's%20Clique%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-225)%20consensus%20design%0A%3E%203.%20Validator%20set%20are%20elected%20in%20and%20out%20based%20on%20a%20staking%20based%20governance%0A%3E%0A%3E%20The%20consensus%20protocol%20of%20BSC%20fulfills%20the%20following%20goals%3A%0A%3E%0A%3E%201.%20Short%20Blocking%20time%2C%203%20seconds%20on%20mainnet.%0A%3E%202.%20It%20requires%20limited%20time%20to%20confirm%20the%20finality%20of%20transactions%2C%20around%2045s%20for%20mainnet.%0A%3E%203.%20There%20is%20no%20inflation%20of%20native%20token%3A%20BNB%2C%20the%20block%20reward%20is%20collected%20from%20transaction%20fees%2C%20and%20it%20will%20be%20paid%20in%20BNB.%0A%3E%204.%20It%20is%20100%25%20compatible%20with%20Ethereum%20system%20.%0A%3E%205.%20It%20allows%20modern%20proof-of-stake%20blockchain%20network%20governance.%0A%0A%23%23%20Signing%20Mechanism%0A%0ABSC%20uses%20the%20same%20signing%20mechanism%20as%20Ethereum%201.0.%0A%0ATransactions%20are%20signed%20using%20recoverable%20ECDSA%20signatures.%20This%20method%20utilises%20the%20SECP-256k1%20curve.%20(see%20the%20%5BEthereum%20Yellow%20Paper%5D(https%3A%2F%2Fethereum.github.io%2Fyellowpaper%2Fpaper.pdf)%20Appendix%20F.%20Signing%20Transactions).%20go-ethereum%20utilizes%20the%20%5Bsecp256k1%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcrypto%2Fsecp256k1)%20package%20which%20wraps%20the%20bitcoin%20secp256k1%20C%20library.%20Signing%20is%20handled%20by%20the%20%5Bsigner%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fsigner)%20receives%20a%20request%20and%20produces%20a%20signature.%20Note%2C%20the%20produced%20signature%20conforms%20to%20the%20secp256k1%20curve%20R%2C%20S%20and%20V%20values%2C%20where%20the%20V%20value%20will%20be%2027%20or%2028%20for%20legacy%20reasons%2C%20if%20legacyV%3D%3Dtrue.%0A%0A**Signing**%0A%0A-%20%5BSignature%20Documentation%5D(https%3A%2F%2Fdocs.bnbchain.org%2Fdocs%2Fbeaconchain%2Flearn%2Fsignature%2F)%3A%20Binance%20overview%20of%20how%20transactions%20are%20signed%20using%20ECDSA%20curve%20Secp256k1.%0A-%20%5Bsecp256k1%20codebase%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fsecp256k1)%3A%20Binance%20secp256k1%20crytpographic%20library%20(go)%0A-%20%5Bsecp256k1%20Public%20Key%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2F03ff2992ab4674c1df8f568ee9a31596f3503c26%2Fcrypto%2Fsignature_cgo.go%23L32)%3A%20Binance%20codebase(go)%20recovering%20the%20uncompressed%20secp256k1%20key%20that%20created%20a%20given%20signature.%0A%0A%23%23%20Code%20Review%0A%0AThe%20Binance%20Smart%20chain%20is%20cloned%20from%20%5BEthereum%201.0%5D(.%2Fethereum-1-0.mdx)%20and%20thus%20the%20majority%20of%20code%20incuding%20primitives%2C%20signing%20are%20similar.%20The%20key%20addtions%20are%0A%0A-%20%5BConsensus%20-%20Parlia%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fconsensus%2Fparlia)%0A-%20%5Bsystemcontracts%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcore%2Fsystemcontracts)%0A-%20%5BMobile%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fmobile)%3A%20Outdated%20library.%0A%0ASome%20ommissions%20include%20the%20majority%20of%20work%20done%20for%20Ethereum%202.0%20for%20example%20BSC%20has%20no%20%5Bbeacon%2Fengine%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fbeacon%2Fengine).%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BParlia%20Documentation%5D(https%3A%2F%2Fdocs.bnbchain.org%2Fdocs%2Flearn%2Fconsensus%2F%23parlia)%3A%20Binance%20Consensus%20Engine%20Parlia%20Documentation%0A-%20%5BConsenus%20Engine%20Codebase%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fconsensus%2Fconsensus.go)%3A%20Binance%20algorithm%20agnostic%20consensus%20engine.%20(go)%0A-%20%5BParlia%20Consensus%20Codebase%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fconsensus%2Fparlia%2Fparlia.go)%3A%20Binance%20Parlia%20codebase%20(go)%0A-%20%5BClique%20Consensus%20Codebase%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fconsensus%2Fclique%2Fclique.go)%3A%20Clique%20implements%20the%20proof-of-authority%20consensus%20engine%20(go).%20It%20is%20what%20Parlia%20was%20based%20of.%0A-%20%5BParlia%20Consensus%20Verify%20Seal%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fconsensus%2Fparlia%2Fparlia.go%23L546)%3A%20Binance%20seal%20verification%20codebase%20(go).%20_verifySeal%20checks%20whether%20the%20signature%20contained%20in%20the%20header%20satisfies%20the%20consensus%20protocol%20requirements.%20The%20method%20accepts%20an%20optional%20list%20of%20parent%20headers%20that%20aren't%20yet%20part%20of%20the%20local%20blockchain%20to%20generate%20the%20snapshots%20from.%20The%20transition%20rule%20is%20described%20in%20the%20eth1%2F2%20merge%20spec%20EIP-3675._%0A-%20%5BEIP-3675%3A%20Upgrade%20consensus%20to%20Proof-of-Stake%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-3675)%3A%20Specification%20of%20the%20consensus%20mechanism%20upgrade%20on%20Ethereum%20Mainnet%20that%20introduces%20Proof-of-Stake.%0A%0A**Staking**%0A%0A-%20%5BBNB%20Staking%20Economics%5D(https%3A%2F%2Fdocs.bnbchain.org%2Fdocs%2Fstake%2FStaking%2F%23staking-economics)%3A%20Binance%20Staking%20Documentation%0A-%20%5BBNB%20Chain%20Staking%5D(https%3A%2F%2Fwww.bnbchain.org%2Fen%2Fstaking)%3A%20Binance%20Staking%20App%0A%0A**Additional**%0A%0A%3Ca%20name%3D%22f19%22%3E%5B19%5D%3C%2Fa%3E%20See%20%5BBSC%20Consensus%20Engine%0Adocumentations%5D(https%3A%2F%2Fdocs.bnbchain.org%2Fdocs%2Flearn%2Fconsensus%2F%23consensus-protocol)%0A%0A%3Ca%20name%3D%22f20%22%3E%5B20%5D%3C%2Fa%3E%20Following%20BEP-131%2C%20see%20a%0A%5Bsummary%5D(https%3A%2F%2Fwww.bnbchain.org%2Fen%2Fblog%2Fbep131-introducing-candidate-validators-bnb-smart-chain%2F)%0Aand%20%5Bdetailed%20specifications%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2FBEPs%2Fpull%2F131).%20Note%0Athat%20the%20proportion%20of%20randomly%20selected%20validators%20may%20increase%2C%20as%20proposed%20in%0Athe%20BEP.%0A%0A%3Ca%20name%3D%22f21%22%3E%5B21%5D%3C%2Fa%3E%20See%0A%5Bcode%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fcb9e50bdf62c6b46a71724066d39f9851181a5af%2Fconsensus%2Fparlia%2Fparlia.go%23L546)%0Afor%20full%20procedure%20and%20how%20ecrecover%20is%20used%20for%20signature%20verification.%0A%0A-%20%5BState%20of%20BNB%20Chain%20Q4%202022%5D(https%3A%2F%2Fmessari.io%2Freport%2Fstate-of-bnb-chain-q4-2022)%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./cosmos-miPrWII4.js"),[]),path:"/research/chains/cosmos",type:"mdx",filePath:"research/chains/cosmos.mdx",content:"%23%20Cosmos%0A%0A-date%3A%202023-02-04%0A%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0ACosmos%20is%20the%20hub%20to%20almost%2050%20blockchains%20based%20on%20the%20Tendermint%20consensus%20engine%20and%20Inter-Blockchain%20Communication%20(IBC)%20protocol.%20It%20is%20also%20one%20of%20the%20earliest%20proponents%20for%20cross-chain%20communication%20and%20defined%20the%20first%20set%20of%20communication%20specificiations%3Csup%3E%5B24%5D(%23f24)%3C%2Fsup%3E.%20From%20a%20purely%20technical%20point%20of%20view%2C%20the%20signature%20scheme%20for%20signing%20blocks%2C%20Ed25519%2C%20is%20also%20often%20used%20in%20many%20other%20protocols%2C%20such%20as%20NEAR.%0A%0ACosmos%20Hub%20itself%20has%20175%20validators%3Csup%3E%5B25%5D(%23f25)%3C%2Fsup%3E%20and%20is%20built%20upon%20Tendermint%2C%20in%20which%20validators%20sign%20blocks%20using%20EdDSA%20on%20Curve25519%20(i.e.%2C%20Ed25519)%3Csup%3E%5B26%5D(%23f26)%3C%2Fsup%3E.%0A%0A%23%23%20Consensus%20Mechanism%0A%0AFor%20a%20deep%20dive%20on%20Tendemints%20Consensus%2C%20please%20read%20%5BThe%20latest%20gossip%20on%20BFT%20consensus%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F1807.04938.pdf)%3A%20The%20paper%20presents%20Tendermint%2C%20a%20new%20protocol%20for%20ordering%20events%20in%20a%20distributed%20network%20under%20adversarial%20conditions.%0A%0AFollowing%20is%20an%20excerpt%20from%20%5BWhat%20is%20Tendermint%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fdocs%2Fintroduction%2Fwhat-is-tendermint.mdx)%0A%0A%3E%20Tendermint%20is%20an%20easy-to-understand%2C%20mostly%20asynchronous%2C%20BFT%20consensus%20protocol.%20The%20protocol%20follows%20a%20simple%20state%20machine%20that%20looks%20like%20this%3A%0A%0A!%5Bconsensus-logic%5D(%2Fimages%2Fresearch%2Ftendermint_consensus_logic.png)%0A%0A%3E%20Participants%20in%20the%20protocol%20are%20called%20**validators**%3B%20they%20take%20turns%20proposing%20blocks%20of%20transactions%20and%20voting%20on%20them.%20Blocks%20are%20committed%20in%20a%20chain%2C%20with%20one%20block%20at%20each%20**height**.%20A%20block%20may%20fail%20to%20be%20committed%2C%20in%20which%20case%20the%20protocol%20moves%20to%20the%20next%20**round**%2C%20and%20a%20new%20validator%20gets%20to%20propose%20a%20block%20for%20that%20height.%20Two%20stages%20of%20voting%20are%20required%20to%20successfully%20commit%20a%20block%3B%20we%20call%20them%20**pre-vote**%20and%20**pre-commit**.%20A%20block%20is%20committed%20when%20more%20than%202%2F3%20of%20validators%20pre-commit%20for%20the%20same%20block%20in%20the%20same%20round.%0A%0A%3E%20There%20is%20a%20picture%20of%20a%20couple%20doing%20the%20polka%20because%20validators%20are%20doing%20something%20like%20a%20polka%20dance.%20When%20more%20than%20two-thirds%20of%20the%20validators%20pre-vote%20for%20the%20same%20block%2C%20we%20call%20that%20a%20**polka**.%20Every%20pre-commit%20must%20be%20justified%20by%20a%20polka%20in%20the%20same%20round.%0A%0A%3E%20Validators%20may%20fail%20to%20commit%20a%20block%20for%20a%20number%20of%20reasons%3B%20the%20current%20proposer%20may%20be%20offline%2C%20or%20the%20network%20may%20be%20slow.%20Tendermint%20allows%20them%20to%20establish%20that%20a%20validator%20should%20be%20skipped.%20Validators%20wait%20a%20small%20amount%20of%20time%20to%20receive%20a%20complete%20proposal%20block%20from%20the%20proposer%20before%20voting%20to%20move%20to%20the%20next%20round.%20This%20reliance%20on%20a%20timeout%20is%20what%20makes%20Tendermint%20a%20weakly%20synchronous%20protocol%2C%20rather%20than%20an%20asynchronous%20one.%20However%2C%20the%20rest%20of%20the%20protocol%20is%20asynchronous%2C%20and%20validators%20only%20make%20progress%20after%20hearing%20from%20more%20than%20two-thirds%20of%20the%20validator%20set.%20A%20simplifying%20element%20of%20Tendermint%20is%20that%20it%20uses%20the%20same%20mechanism%20to%20commit%20a%20block%20as%20it%20does%20to%20skip%20to%20the%20next%20round.%0A%0A%3E%20Assuming%20less%20than%20one-third%20of%20the%20validators%20are%20Byzantine%2C%20Tendermint%20guarantees%20that%20safety%20will%20never%20be%20violated%20-%20that%20is%2C%20validators%20will%20never%20commit%20conflicting%20blocks%20at%20the%20same%20height.%20To%20do%20this%20it%20introduces%20a%20few%20**locking**%20rules%20which%20modulate%20which%20paths%20can%20be%20followed%20in%20the%20flow%20diagram.%20Once%20a%20validator%20precommits%20a%20block%2C%20it%20is%20locked%20on%20that%20block.%20Then%2C%0A%0A%3E%201.%20it%20must%20prevote%20for%20the%20block%20it%20is%20locked%20on%0A%3E%202.%20it%20can%20only%20unlock%2C%20and%20precommit%20for%20a%20new%20block%2C%20if%20there%20is%20a%20polka%20for%20that%20block%20in%20a%20later%20round%0A%0A%23%23%20Signing%20Mechanism%0A%0ABelow%20is%20an%20excerpt%20from%20%5BTendermint%20Specification%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fspec%2Fcore%2Fencoding.md%23public-key-cryptography)%0A%0A%3E%20Tendermint%20uses%20Protobuf%20%5BOneof%5D(https%3A%2F%2Fprotobuf.dev%2Fprogramming-guides%2Fproto3%2F%23oneof)%20to%20distinguish%20between%20different%20types%20public%20keys%2C%20and%20signatures.%20Additionally%2C%20for%20each%20public%20key%2C%20Tendermint%20defines%20an%20Address%20function%20that%20can%20be%20used%20as%20a%20more%20compact%20identifier%20in%20place%20of%20the%20public%20key.%0A%3E%0A%3E%20%23%23%23%20Key%20Types%0A%3E%0A%3E%20Each%20type%20specifies%20it's%20own%20pubkey%2C%20address%2C%20and%20signature%20format.%0A%3E%0A%3E%20%23%23%23%23%20Ed25519%0A%3E%0A%3E%20The%20address%20is%20the%20first%2020-bytes%20of%20the%20SHA256%20hash%20of%20the%20raw%2032-byte%20public%20key%3A%0A%3E%0A%3E%20%60%60%60go%0A%3E%20address%20%3D%20SHA256(pubkey)%5B%3A20%5D%0A%3E%20%60%60%60%0A%3E%0A%3E%20The%20signature%20is%20the%20raw%2064-byte%20ED25519%20signature.%0A%3E%0A%3E%20Tendermint%20adopted%20%5Bzip215%5D(https%3A%2F%2Fzips.z.cash%2Fzip-0215)%20for%20verification%20of%20ed25519%20signatures.%0A%3E%0A%3E%20Note%3A%20This%20change%20will%20be%20released%20in%20the%20next%20major%20release%20of%20Tendermint-Go%20(0.35).%0A%0A%23%23%23%23%20Secp256k1%0A%0AThe%20address%20is%20the%20first%2020-bytes%20of%20the%20SHA256%20hash%20of%20the%20raw%2032-byte%20public%20key%3A%0A%0A%60%60%60go%0Aaddress%20%3D%20SHA256(pubkey)%5B%3A20%5D%0A%60%60%60%0A%0AFollowing%20is%20an%20excerpt%20from%20%5BTendermint%20docs%3A%20Validator%20Keys%5D(https%3A%2F%2Fdocs.tendermint.com%2Fv0.34%2Ftendermint-core%2Fvalidators.html%23)%0A%0A%3E%20Currently%20Tendermint%20uses%20Ed25519%20(opens%20new%20window)keys%20which%20are%20widely%20supported%20across%20the%20security%20sector%20and%20HSMs.%0A%0A%23%23%20Code%20Review%0A%0A%23%23%23%20Signing%0A%0A-%20%5Bed25519%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fed25519)%3A%20Sign%20produces%20a%20signature%20on%20the%20provided%20message.%20This%20assumes%20the%20privkey%20is%20wellformed%20in%20the%20golang%20format.%20The%20first%2032%20bytes%20should%20be%20random%2C%20corresponding%20to%20the%20normal%20ed25519%20private%20key.%20The%20latter%2032%20bytes%20should%20be%20the%20compressed%20public%20key.%20If%20these%20conditions%20aren't%20met%2C%20Sign%20will%20panic%20or%20produce%20an%20incorrect%20signature.%0A-%20%5Bsecp256k1%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fsecp256k1)%0A-%20%5Bsr25519%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fsr25519)%0A-%20%5Bcodec.go%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fcrypto%2Fencoding%2Fcodec.go)%3A%20Tranforms%20protobuf%20publick%20key%20to%20crypto%20public%20keys%20and%20vice%20versa.%20Support%20secp256k1%20and%20edd25519.%0A%0A%23%23%23%20Consensus%0A%0A-%20%5Bconsensus%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fconsensus)%0A%20%20-%20%5Bstate%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fconsensus%2Fstate.go)%3A%20State%20handles%20execution%20of%20the%20consensus%20algorithm.%20It%20processes%20votes%20and%20proposals%2C%20and%20upon%20reaching%20agreement%2C%20commits%20blocks%20to%20the%20chain%20and%20executes%20them%20against%20the%20application.%20The%20internal%20state%20machine%20receives%20input%20from%20peers%2C%20the%20internal%20validator%2C%20and%20from%20a%20timer.%0A%0A%23%23%23%20Cryptographic%20Primitives%0A%0A**general%20primitives**%0A%0A-%20%5Bbits%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fbits)%3A%20BitArray%20is%20a%20thread-safe%20implementation%20of%20a%20bit%20array.%0A-%20%5Bbytes%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fbytes)%3A%20Byte%20functions%20including%20marshalling%20and%20unmarshalling%20into%20JSON%20as%20well%20as%20fingerprint%20which%20returns%20the%20first%206%20bytes%20of%20a%20byte%20slice.%0A-%20%5Bclist%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fclist)%3A%20provide%20a%20goroutine-safe%20linked-list.%20This%20list%20can%20be%20traversed%20concurrently%20by%20any%20number%20of%20goroutines.%20However%2C%20removed%20CElements%20cannot%20be%20added%20back.%0A-%20%5Bcmap%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fcmap)%3A%20a%20goroutine-safe%20map%0A-%20%5Bflowrate%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fflowrate)%3A%20provides%20the%20tools%20for%20monitoring%20and%20limiting%20the%20flow%20rate%20of%20an%20arbitrary%20data%20stream.%0A-%20%5Bjson%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fjson)%3A%20provides%20functions%20for%20marshaling%20and%20unmarshaling%20JSON%20in%20a%20format%20that%20is%20backwards-compatible%20with%20Amino%20JSON%20encoding.%20This%20mostly%20differs%20from%20encoding%2Fjson%20in%20encoding%20of%20integers%20(64-bit%20integers%20are%20encoded%20as%20strings%2C%20not%20numbers)%2C%20and%20handling%20of%20interfaces%20(wrapped%20in%20an%20interface%20object%20with%20type%2Fvalue%20keys).%0A-%20%5Bmath%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fmath)%3A%20math%20functions%20including%20fractions%20and%20safemath.%0A-%20%5Bpubsub%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fpubsub)%3A%20implements%20a%20pub-sub%20model%20with%20a%20single%20publisher%20(Server)%20and%20multiple%20subscribers%20(clients).%0A-%20%5Bstrings%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fstrings)%3A%20string%20manipulation%20functions.%0A%0A**hash%20functions**%0A%0A-%20%5Btmhash%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fcrypto%2Ftmhash%2Fhash.go)%3A%20Tendermint%20implementation%20of%20SHA256%20hash.%0A-%20%5Bhash%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fcrypto%2Fhash.go)%3A%20included%20in%20tmhash.%0A%0A**encryption**%0A%0A-%20%5Barmor%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fcrypto%2Farmor%2Farmor.go)%3A%20implementation%20of%20%5BOpenPGP%20ASCII%20Armor%5D(https%3A%2F%2Fwww.rfc-editor.org%2Frfc%2Frfc4880.html).%0A-%20%5Bxchacha20poly1305%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fxchacha20poly1305)%3A%20Tendermint%20implementation%20of%20%5BChaCha20-Poly1305%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FChaCha20-Poly1305)%20an%20authenticated%20encryption%20with%20additional%20data%20(AEAD)%20algorithm%2C%20that%20combines%20the%20ChaCha20%20stream%20cipher%20with%20the%20Poly1305%20message%20authentication%20code.%0A-%20%5Bxsalsa20symmetric%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fxsalsa20symmetric)%3A%20Tendermint%20implementation%20of%20%5BSalsa20%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSalsa20).%0A%0A**random%20number%20generators**%0A%0A-%20%5Brandom.go%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fcrypto%2Frandom.go)%3A%20only%20uses%20the%20OS's%20randomness.%20CRandHex%20returns%20a%20hex%20encoded%20string%20that's%20floor(numDigits%2F2)%20*2%20long.*Note%3A%20CRandHex(24)%20gives%2096%20bits%20of%20randomness%20that%20are%20usually%20strong%20enough%20for%20most%20purposes.%5C*%0A-%20%5Brand%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Frand)%3A%20prng%2C%20that%20is%20seeded%20with%20OS%20randomness.%20The%20OS%20randomness%20is%20obtained%20from%20crypto%2Frand%2C%20however%20none%20of%20the%20provided%20methods%20are%20suitable%20for%20cryptographic%20usage.%20They%20all%20utilize%20math%2Frand's%20prng%20internally.%20All%20of%20the%20methods%20here%20are%20suitable%20for%20concurrent%20use.%20This%20is%20achieved%20by%20using%20a%20mutex%20lock%20on%20all%20of%20the%20provided%20methods.%0A%0A**serilization%2Fdeserialization**%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BTendermint%20Byzantine%20Consensus%20Algorithm%20Specification%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fspec%2Fconsensus%2Fconsensus.mdx)%3A%20Specification%20for%20Tendermints%20Consensus%20including%20state%20machine%2C%20background%20gossip%20(messaging)%20and%20proofs.%0A-%20%5BTendermint%20Consensus%20Overview%5D(https%3A%2F%2Fdocs.tendermint.com%2Fv0.34%2Fintroduction%2Fwhat-is-tendermint.html%23consensus-overview)%3A%20Tendermint%20Consensus%20Overview%20Documentation.%0A-%20%5BProposer%20Selection%20Procedure%20Specification%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fspec%2Fconsensus%2Fproposer-selection.mdx)%3A%20Specifies%20the%20Proposer%20Selection%20Procedure%20that%20is%20used%20in%20Tendermint%20to%20choose%20a%20round%20proposer%20for%20its%20%22leader-based-protocol%22.%0A%0A**Signing**%0A%0A-%20%5BEd25519%3A%20high-speed%20high-security%20signatures%5D(https%3A%2F%2Fed25519.cr.yp.to%2F)%3A%20Ed25519%20Signature%20Information%0A%20%20-%20%5BHigh-speed%20high-security%20signatures%5D(https%3A%2F%2Fed25519.cr.yp.to%2Fed25519-20110926.pdf)%3A%20Paper%20introducing%20Ed25519%20signatures%0A-%20%5BTendermint%20Validator%20Keys%5D(https%3A%2F%2Fdocs.tendermint.com%2Fv0.34%2Ftendermint-core%2Fvalidators.html)%3A%20Tendermint%20Documentation%20highlighting%20the%20use%20of%20Ed25519%20keys%20for%20validators.%0A-%20%5BTendermint%20Public%20Key%20Cryptography%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fspec%2Fcore%2Fencoding.md%23public-key-cryptography)%3A%20Documenation%20on%20Tendermints%20Public%20Key%20Cryptography.%0A-%20%5BTendermint%20Crypto%20Code%20Base%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto)%3A%20crypto%20is%20the%20cryptographic%20package%20adapted%20for%20Tendermint's%20uses%20(go)%0A%20%20-%20%5Bkey.go%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fp2p%2Fkey.go%23L50)%3A%20Tendermint%20Validator%20Key%20Management(go).%20_LoadOrGenNodeKey%20attempts%20to%20load%20the%20NodeKey%20from%20the%20given%20filePath.%20If%20the%20file%20does%20not%20exist%2C%20it%20generates%20and%20saves%20a%20new%20NodeKey._%0A%20%20-%20%5Bed25519.go%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Fcrypto%2Fed25519%2Fed25519.go)%3A%20Used%20for%20signing%20messages%20with%20an%20ed25519%20private%20key.%0A%0A**Light%20Client**%0A%0A-%20%5BLight%20Client%5D(https%3A%2F%2Fdocs.tendermint.com%2Fv0.34%2Ftendermint-core%2Flight-client.html)%3A%20he%20objective%20of%20the%20light%20client%20protocol%20is%20to%20get%20a%20commit%20for%20a%20recent%20block%20hash%20where%20the%20commit%20includes%20a%20majority%20of%20signatures%20from%20the%20last%20known%20validator%20set.%20From%20there%2C%20all%20the%20application%20state%20is%20verifiable%20with%20%5Bmerkle%20proofs%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Fspec%2Fblob%2Fmaster%2Fspec%2Fcore%2Fencoding.md%23iavl-tree).%0A-%20%5Btendermint%20light%20package%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Ftendermint%2Ftendermint%2Flight)(go)%3A%20Tendermint%20light%20clients%20allow%20bandwidth%20%26%20compute-constrained%20devices%2C%20such%20as%20smartphones%2C%20low-power%20embedded%20chips%2C%20or%20other%20blockchains%20to%20efficiently%20verify%20the%20consensus%20of%20a%20Tendermint%20blockchain.%20This%20forms%20the%20basis%20of%20safe%20and%20efficient%20state%20synchronization%20for%20new%20network%20nodes%20and%20inter-blockchain%20communication%20(where%20a%20light%20client%20of%20one%20Tendermint%20instance%20runs%20in%20another%20chain's%20state%20machine).%20(%5Btendermint%20light%20source%20code%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flight)(go)).%0A%0A**Serialization%2FDeSerialization**%0A%0A-%20%5BTendermint%20has%20four%20serialization%20protocols%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fissues%2F608)%0A%0A**Staking**%0A%0A**Additional**%0A%0A%3Ca%20name%3D%22f24%22%3E%5B24%5D%3C%2Fa%3E%20See%20%5BCosmos%20IBC%0Adocumentation%5D(https%3A%2F%2Ftutorials.cosmos.network%2Facademy%2F3-ibc%2F1-what-is-ibc.html)%0A%0A%3Ca%20name%3D%22f25%22%3E%5B25%5D%3C%2Fa%3E%20See%20%5BCosmos%20Hub%0Aoverview%5D(https%3A%2F%2Fhub.cosmos.network%2Fmain%2Fvalidators%2Foverview.html)%0A%0A%3Ca%20name%3D%22f26%22%3E%5B26%5D%3C%2Fa%3E%20See%20%5BTendermint%20Core%0Adocumentation%5D(https%3A%2F%2Fdocs.tendermint.com%2Fv0.34%2Ftendermint-core%2Fvalidators.html%23validator-keys)%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./cosmos-miPrWII4.js"),[]),path:"/research/chains/cosmos.html",type:"mdx",filePath:"research/chains/cosmos.mdx",content:"%23%20Cosmos%0A%0A-date%3A%202023-02-04%0A%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0ACosmos%20is%20the%20hub%20to%20almost%2050%20blockchains%20based%20on%20the%20Tendermint%20consensus%20engine%20and%20Inter-Blockchain%20Communication%20(IBC)%20protocol.%20It%20is%20also%20one%20of%20the%20earliest%20proponents%20for%20cross-chain%20communication%20and%20defined%20the%20first%20set%20of%20communication%20specificiations%3Csup%3E%5B24%5D(%23f24)%3C%2Fsup%3E.%20From%20a%20purely%20technical%20point%20of%20view%2C%20the%20signature%20scheme%20for%20signing%20blocks%2C%20Ed25519%2C%20is%20also%20often%20used%20in%20many%20other%20protocols%2C%20such%20as%20NEAR.%0A%0ACosmos%20Hub%20itself%20has%20175%20validators%3Csup%3E%5B25%5D(%23f25)%3C%2Fsup%3E%20and%20is%20built%20upon%20Tendermint%2C%20in%20which%20validators%20sign%20blocks%20using%20EdDSA%20on%20Curve25519%20(i.e.%2C%20Ed25519)%3Csup%3E%5B26%5D(%23f26)%3C%2Fsup%3E.%0A%0A%23%23%20Consensus%20Mechanism%0A%0AFor%20a%20deep%20dive%20on%20Tendemints%20Consensus%2C%20please%20read%20%5BThe%20latest%20gossip%20on%20BFT%20consensus%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F1807.04938.pdf)%3A%20The%20paper%20presents%20Tendermint%2C%20a%20new%20protocol%20for%20ordering%20events%20in%20a%20distributed%20network%20under%20adversarial%20conditions.%0A%0AFollowing%20is%20an%20excerpt%20from%20%5BWhat%20is%20Tendermint%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fdocs%2Fintroduction%2Fwhat-is-tendermint.mdx)%0A%0A%3E%20Tendermint%20is%20an%20easy-to-understand%2C%20mostly%20asynchronous%2C%20BFT%20consensus%20protocol.%20The%20protocol%20follows%20a%20simple%20state%20machine%20that%20looks%20like%20this%3A%0A%0A!%5Bconsensus-logic%5D(%2Fimages%2Fresearch%2Ftendermint_consensus_logic.png)%0A%0A%3E%20Participants%20in%20the%20protocol%20are%20called%20**validators**%3B%20they%20take%20turns%20proposing%20blocks%20of%20transactions%20and%20voting%20on%20them.%20Blocks%20are%20committed%20in%20a%20chain%2C%20with%20one%20block%20at%20each%20**height**.%20A%20block%20may%20fail%20to%20be%20committed%2C%20in%20which%20case%20the%20protocol%20moves%20to%20the%20next%20**round**%2C%20and%20a%20new%20validator%20gets%20to%20propose%20a%20block%20for%20that%20height.%20Two%20stages%20of%20voting%20are%20required%20to%20successfully%20commit%20a%20block%3B%20we%20call%20them%20**pre-vote**%20and%20**pre-commit**.%20A%20block%20is%20committed%20when%20more%20than%202%2F3%20of%20validators%20pre-commit%20for%20the%20same%20block%20in%20the%20same%20round.%0A%0A%3E%20There%20is%20a%20picture%20of%20a%20couple%20doing%20the%20polka%20because%20validators%20are%20doing%20something%20like%20a%20polka%20dance.%20When%20more%20than%20two-thirds%20of%20the%20validators%20pre-vote%20for%20the%20same%20block%2C%20we%20call%20that%20a%20**polka**.%20Every%20pre-commit%20must%20be%20justified%20by%20a%20polka%20in%20the%20same%20round.%0A%0A%3E%20Validators%20may%20fail%20to%20commit%20a%20block%20for%20a%20number%20of%20reasons%3B%20the%20current%20proposer%20may%20be%20offline%2C%20or%20the%20network%20may%20be%20slow.%20Tendermint%20allows%20them%20to%20establish%20that%20a%20validator%20should%20be%20skipped.%20Validators%20wait%20a%20small%20amount%20of%20time%20to%20receive%20a%20complete%20proposal%20block%20from%20the%20proposer%20before%20voting%20to%20move%20to%20the%20next%20round.%20This%20reliance%20on%20a%20timeout%20is%20what%20makes%20Tendermint%20a%20weakly%20synchronous%20protocol%2C%20rather%20than%20an%20asynchronous%20one.%20However%2C%20the%20rest%20of%20the%20protocol%20is%20asynchronous%2C%20and%20validators%20only%20make%20progress%20after%20hearing%20from%20more%20than%20two-thirds%20of%20the%20validator%20set.%20A%20simplifying%20element%20of%20Tendermint%20is%20that%20it%20uses%20the%20same%20mechanism%20to%20commit%20a%20block%20as%20it%20does%20to%20skip%20to%20the%20next%20round.%0A%0A%3E%20Assuming%20less%20than%20one-third%20of%20the%20validators%20are%20Byzantine%2C%20Tendermint%20guarantees%20that%20safety%20will%20never%20be%20violated%20-%20that%20is%2C%20validators%20will%20never%20commit%20conflicting%20blocks%20at%20the%20same%20height.%20To%20do%20this%20it%20introduces%20a%20few%20**locking**%20rules%20which%20modulate%20which%20paths%20can%20be%20followed%20in%20the%20flow%20diagram.%20Once%20a%20validator%20precommits%20a%20block%2C%20it%20is%20locked%20on%20that%20block.%20Then%2C%0A%0A%3E%201.%20it%20must%20prevote%20for%20the%20block%20it%20is%20locked%20on%0A%3E%202.%20it%20can%20only%20unlock%2C%20and%20precommit%20for%20a%20new%20block%2C%20if%20there%20is%20a%20polka%20for%20that%20block%20in%20a%20later%20round%0A%0A%23%23%20Signing%20Mechanism%0A%0ABelow%20is%20an%20excerpt%20from%20%5BTendermint%20Specification%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fspec%2Fcore%2Fencoding.md%23public-key-cryptography)%0A%0A%3E%20Tendermint%20uses%20Protobuf%20%5BOneof%5D(https%3A%2F%2Fprotobuf.dev%2Fprogramming-guides%2Fproto3%2F%23oneof)%20to%20distinguish%20between%20different%20types%20public%20keys%2C%20and%20signatures.%20Additionally%2C%20for%20each%20public%20key%2C%20Tendermint%20defines%20an%20Address%20function%20that%20can%20be%20used%20as%20a%20more%20compact%20identifier%20in%20place%20of%20the%20public%20key.%0A%3E%0A%3E%20%23%23%23%20Key%20Types%0A%3E%0A%3E%20Each%20type%20specifies%20it's%20own%20pubkey%2C%20address%2C%20and%20signature%20format.%0A%3E%0A%3E%20%23%23%23%23%20Ed25519%0A%3E%0A%3E%20The%20address%20is%20the%20first%2020-bytes%20of%20the%20SHA256%20hash%20of%20the%20raw%2032-byte%20public%20key%3A%0A%3E%0A%3E%20%60%60%60go%0A%3E%20address%20%3D%20SHA256(pubkey)%5B%3A20%5D%0A%3E%20%60%60%60%0A%3E%0A%3E%20The%20signature%20is%20the%20raw%2064-byte%20ED25519%20signature.%0A%3E%0A%3E%20Tendermint%20adopted%20%5Bzip215%5D(https%3A%2F%2Fzips.z.cash%2Fzip-0215)%20for%20verification%20of%20ed25519%20signatures.%0A%3E%0A%3E%20Note%3A%20This%20change%20will%20be%20released%20in%20the%20next%20major%20release%20of%20Tendermint-Go%20(0.35).%0A%0A%23%23%23%23%20Secp256k1%0A%0AThe%20address%20is%20the%20first%2020-bytes%20of%20the%20SHA256%20hash%20of%20the%20raw%2032-byte%20public%20key%3A%0A%0A%60%60%60go%0Aaddress%20%3D%20SHA256(pubkey)%5B%3A20%5D%0A%60%60%60%0A%0AFollowing%20is%20an%20excerpt%20from%20%5BTendermint%20docs%3A%20Validator%20Keys%5D(https%3A%2F%2Fdocs.tendermint.com%2Fv0.34%2Ftendermint-core%2Fvalidators.html%23)%0A%0A%3E%20Currently%20Tendermint%20uses%20Ed25519%20(opens%20new%20window)keys%20which%20are%20widely%20supported%20across%20the%20security%20sector%20and%20HSMs.%0A%0A%23%23%20Code%20Review%0A%0A%23%23%23%20Signing%0A%0A-%20%5Bed25519%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fed25519)%3A%20Sign%20produces%20a%20signature%20on%20the%20provided%20message.%20This%20assumes%20the%20privkey%20is%20wellformed%20in%20the%20golang%20format.%20The%20first%2032%20bytes%20should%20be%20random%2C%20corresponding%20to%20the%20normal%20ed25519%20private%20key.%20The%20latter%2032%20bytes%20should%20be%20the%20compressed%20public%20key.%20If%20these%20conditions%20aren't%20met%2C%20Sign%20will%20panic%20or%20produce%20an%20incorrect%20signature.%0A-%20%5Bsecp256k1%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fsecp256k1)%0A-%20%5Bsr25519%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fsr25519)%0A-%20%5Bcodec.go%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fcrypto%2Fencoding%2Fcodec.go)%3A%20Tranforms%20protobuf%20publick%20key%20to%20crypto%20public%20keys%20and%20vice%20versa.%20Support%20secp256k1%20and%20edd25519.%0A%0A%23%23%23%20Consensus%0A%0A-%20%5Bconsensus%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fconsensus)%0A%20%20-%20%5Bstate%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fconsensus%2Fstate.go)%3A%20State%20handles%20execution%20of%20the%20consensus%20algorithm.%20It%20processes%20votes%20and%20proposals%2C%20and%20upon%20reaching%20agreement%2C%20commits%20blocks%20to%20the%20chain%20and%20executes%20them%20against%20the%20application.%20The%20internal%20state%20machine%20receives%20input%20from%20peers%2C%20the%20internal%20validator%2C%20and%20from%20a%20timer.%0A%0A%23%23%23%20Cryptographic%20Primitives%0A%0A**general%20primitives**%0A%0A-%20%5Bbits%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fbits)%3A%20BitArray%20is%20a%20thread-safe%20implementation%20of%20a%20bit%20array.%0A-%20%5Bbytes%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fbytes)%3A%20Byte%20functions%20including%20marshalling%20and%20unmarshalling%20into%20JSON%20as%20well%20as%20fingerprint%20which%20returns%20the%20first%206%20bytes%20of%20a%20byte%20slice.%0A-%20%5Bclist%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fclist)%3A%20provide%20a%20goroutine-safe%20linked-list.%20This%20list%20can%20be%20traversed%20concurrently%20by%20any%20number%20of%20goroutines.%20However%2C%20removed%20CElements%20cannot%20be%20added%20back.%0A-%20%5Bcmap%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fcmap)%3A%20a%20goroutine-safe%20map%0A-%20%5Bflowrate%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fflowrate)%3A%20provides%20the%20tools%20for%20monitoring%20and%20limiting%20the%20flow%20rate%20of%20an%20arbitrary%20data%20stream.%0A-%20%5Bjson%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fjson)%3A%20provides%20functions%20for%20marshaling%20and%20unmarshaling%20JSON%20in%20a%20format%20that%20is%20backwards-compatible%20with%20Amino%20JSON%20encoding.%20This%20mostly%20differs%20from%20encoding%2Fjson%20in%20encoding%20of%20integers%20(64-bit%20integers%20are%20encoded%20as%20strings%2C%20not%20numbers)%2C%20and%20handling%20of%20interfaces%20(wrapped%20in%20an%20interface%20object%20with%20type%2Fvalue%20keys).%0A-%20%5Bmath%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fmath)%3A%20math%20functions%20including%20fractions%20and%20safemath.%0A-%20%5Bpubsub%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fpubsub)%3A%20implements%20a%20pub-sub%20model%20with%20a%20single%20publisher%20(Server)%20and%20multiple%20subscribers%20(clients).%0A-%20%5Bstrings%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Fstrings)%3A%20string%20manipulation%20functions.%0A%0A**hash%20functions**%0A%0A-%20%5Btmhash%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fcrypto%2Ftmhash%2Fhash.go)%3A%20Tendermint%20implementation%20of%20SHA256%20hash.%0A-%20%5Bhash%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fcrypto%2Fhash.go)%3A%20included%20in%20tmhash.%0A%0A**encryption**%0A%0A-%20%5Barmor%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fcrypto%2Farmor%2Farmor.go)%3A%20implementation%20of%20%5BOpenPGP%20ASCII%20Armor%5D(https%3A%2F%2Fwww.rfc-editor.org%2Frfc%2Frfc4880.html).%0A-%20%5Bxchacha20poly1305%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fxchacha20poly1305)%3A%20Tendermint%20implementation%20of%20%5BChaCha20-Poly1305%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FChaCha20-Poly1305)%20an%20authenticated%20encryption%20with%20additional%20data%20(AEAD)%20algorithm%2C%20that%20combines%20the%20ChaCha20%20stream%20cipher%20with%20the%20Poly1305%20message%20authentication%20code.%0A-%20%5Bxsalsa20symmetric%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fxsalsa20symmetric)%3A%20Tendermint%20implementation%20of%20%5BSalsa20%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSalsa20).%0A%0A**random%20number%20generators**%0A%0A-%20%5Brandom.go%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fcrypto%2Frandom.go)%3A%20only%20uses%20the%20OS's%20randomness.%20CRandHex%20returns%20a%20hex%20encoded%20string%20that's%20floor(numDigits%2F2)%20*2%20long.*Note%3A%20CRandHex(24)%20gives%2096%20bits%20of%20randomness%20that%20are%20usually%20strong%20enough%20for%20most%20purposes.%5C*%0A-%20%5Brand%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flibs%2Frand)%3A%20prng%2C%20that%20is%20seeded%20with%20OS%20randomness.%20The%20OS%20randomness%20is%20obtained%20from%20crypto%2Frand%2C%20however%20none%20of%20the%20provided%20methods%20are%20suitable%20for%20cryptographic%20usage.%20They%20all%20utilize%20math%2Frand's%20prng%20internally.%20All%20of%20the%20methods%20here%20are%20suitable%20for%20concurrent%20use.%20This%20is%20achieved%20by%20using%20a%20mutex%20lock%20on%20all%20of%20the%20provided%20methods.%0A%0A**serilization%2Fdeserialization**%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BTendermint%20Byzantine%20Consensus%20Algorithm%20Specification%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fspec%2Fconsensus%2Fconsensus.mdx)%3A%20Specification%20for%20Tendermints%20Consensus%20including%20state%20machine%2C%20background%20gossip%20(messaging)%20and%20proofs.%0A-%20%5BTendermint%20Consensus%20Overview%5D(https%3A%2F%2Fdocs.tendermint.com%2Fv0.34%2Fintroduction%2Fwhat-is-tendermint.html%23consensus-overview)%3A%20Tendermint%20Consensus%20Overview%20Documentation.%0A-%20%5BProposer%20Selection%20Procedure%20Specification%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fspec%2Fconsensus%2Fproposer-selection.mdx)%3A%20Specifies%20the%20Proposer%20Selection%20Procedure%20that%20is%20used%20in%20Tendermint%20to%20choose%20a%20round%20proposer%20for%20its%20%22leader-based-protocol%22.%0A%0A**Signing**%0A%0A-%20%5BEd25519%3A%20high-speed%20high-security%20signatures%5D(https%3A%2F%2Fed25519.cr.yp.to%2F)%3A%20Ed25519%20Signature%20Information%0A%20%20-%20%5BHigh-speed%20high-security%20signatures%5D(https%3A%2F%2Fed25519.cr.yp.to%2Fed25519-20110926.pdf)%3A%20Paper%20introducing%20Ed25519%20signatures%0A-%20%5BTendermint%20Validator%20Keys%5D(https%3A%2F%2Fdocs.tendermint.com%2Fv0.34%2Ftendermint-core%2Fvalidators.html)%3A%20Tendermint%20Documentation%20highlighting%20the%20use%20of%20Ed25519%20keys%20for%20validators.%0A-%20%5BTendermint%20Public%20Key%20Cryptography%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fspec%2Fcore%2Fencoding.md%23public-key-cryptography)%3A%20Documenation%20on%20Tendermints%20Public%20Key%20Cryptography.%0A-%20%5BTendermint%20Crypto%20Code%20Base%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto)%3A%20crypto%20is%20the%20cryptographic%20package%20adapted%20for%20Tendermint's%20uses%20(go)%0A%20%20-%20%5Bkey.go%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fp2p%2Fkey.go%23L50)%3A%20Tendermint%20Validator%20Key%20Management(go).%20_LoadOrGenNodeKey%20attempts%20to%20load%20the%20NodeKey%20from%20the%20given%20filePath.%20If%20the%20file%20does%20not%20exist%2C%20it%20generates%20and%20saves%20a%20new%20NodeKey._%0A%20%20-%20%5Bed25519.go%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Fcrypto%2Fed25519%2Fed25519.go)%3A%20Used%20for%20signing%20messages%20with%20an%20ed25519%20private%20key.%0A%0A**Light%20Client**%0A%0A-%20%5BLight%20Client%5D(https%3A%2F%2Fdocs.tendermint.com%2Fv0.34%2Ftendermint-core%2Flight-client.html)%3A%20he%20objective%20of%20the%20light%20client%20protocol%20is%20to%20get%20a%20commit%20for%20a%20recent%20block%20hash%20where%20the%20commit%20includes%20a%20majority%20of%20signatures%20from%20the%20last%20known%20validator%20set.%20From%20there%2C%20all%20the%20application%20state%20is%20verifiable%20with%20%5Bmerkle%20proofs%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Fspec%2Fblob%2Fmaster%2Fspec%2Fcore%2Fencoding.md%23iavl-tree).%0A-%20%5Btendermint%20light%20package%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Ftendermint%2Ftendermint%2Flight)(go)%3A%20Tendermint%20light%20clients%20allow%20bandwidth%20%26%20compute-constrained%20devices%2C%20such%20as%20smartphones%2C%20low-power%20embedded%20chips%2C%20or%20other%20blockchains%20to%20efficiently%20verify%20the%20consensus%20of%20a%20Tendermint%20blockchain.%20This%20forms%20the%20basis%20of%20safe%20and%20efficient%20state%20synchronization%20for%20new%20network%20nodes%20and%20inter-blockchain%20communication%20(where%20a%20light%20client%20of%20one%20Tendermint%20instance%20runs%20in%20another%20chain's%20state%20machine).%20(%5Btendermint%20light%20source%20code%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Flight)(go)).%0A%0A**Serialization%2FDeSerialization**%0A%0A-%20%5BTendermint%20has%20four%20serialization%20protocols%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fissues%2F608)%0A%0A**Staking**%0A%0A**Additional**%0A%0A%3Ca%20name%3D%22f24%22%3E%5B24%5D%3C%2Fa%3E%20See%20%5BCosmos%20IBC%0Adocumentation%5D(https%3A%2F%2Ftutorials.cosmos.network%2Facademy%2F3-ibc%2F1-what-is-ibc.html)%0A%0A%3Ca%20name%3D%22f25%22%3E%5B25%5D%3C%2Fa%3E%20See%20%5BCosmos%20Hub%0Aoverview%5D(https%3A%2F%2Fhub.cosmos.network%2Fmain%2Fvalidators%2Foverview.html)%0A%0A%3Ca%20name%3D%22f26%22%3E%5B26%5D%3C%2Fa%3E%20See%20%5BTendermint%20Core%0Adocumentation%5D(https%3A%2F%2Fdocs.tendermint.com%2Fv0.34%2Ftendermint-core%2Fvalidators.html%23validator-keys)%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./ethereum-1-0-D2GQOdkW.js"),[]),path:"/research/chains/ethereum-1-0",type:"mdx",filePath:"research/chains/ethereum-1-0.mdx",content:"%23%20Ethereum%201.0%0A%0Adate%3A%202023-02-04%0Alast-updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0A%23%23%20Consensus%20Mechanism%0A%0A%23%23%23%20Ethereum%201.0%20Proof%20Of%20Work%0A%0A%3E%20Existing%20Blockchain%20technology%20is%20working%20on%20the%20core%20concept%20of%20'Proof%20Of%20Work'%20(POW).%20A%20proof-of-work%20(PoW)%20is%20a%20protocol%20that%20is%20difficult%20to%20compute%20but%20easy%20to%20verify.%20It%20can%20be%20verified%20in%20far%20less%20time%20than%20it%20took%20to%20compute%20in%20first%20place.%20The%20process%20involves%20scanning%20for%20a%20value%20that%20when%20hashed%2C%20(such%20as%20with%20SHA-256)%2C%20the%20hash%20begins%20with%20a%20number%20of%20zero%20bits.%20The%20average%20work%20required%20is%20exponential%20in%20the%20number%20of%20zero%20bits%20required%20and%20can%20be%20verified%20by%20executing%20a%20single%20hash.%20In%20simple%20words%2C%20Proof%20of%20work%20is%20an%20expensive%20computation%20done%20by%20all%20miners%20to%20compete%20to%20find%20a%20number%20that%2C%20when%20added%20to%20the%20block%20of%20transactions%2C%20causes%20this%20block%20to%20hash%20to%20a%20code%20with%20certain%20rare%20properties.%20Finding%20such%20a%20rare%20number%20is%20hard%20(based%20on%20the%20cryptographic%20features%20of%20the%20hash%20function%20used%20in%20this%20process)%2C%20but%20verifying%20its%20validity%20when%20it's%20found%20is%20relatively%20easy.%20One%20can%20take%20the%20challenge%2C%20the%20proof%20string%20and%20hash%20them%20together%20and%20check%20if%20the%20hash%20begins%20with%20a%20number%20of%20zero%20bits.%20This%20requires%20to%20apply%20the%20hash%20function%20just%20once%20and%20verify%20the%20output%20indeed%20has%20requisite%20numbers%20of%200's%20in%20front.%20If%20so%2C%20then%20the%20proof%20of%20work%20is%20considered%20valid%20under%20the%20application%20of%20that%20cryptographic%20hash%20function.%20Every%20block%20in%20the%20participating%20network%20should%20contain%20such%20rare%20number.%0A%0A!%5BProof%20Of%20Work%5D(%2Fimages%2Fresearch%2Fpow.png%20%22Proof%20Of%20Work%22)%0A%0ABlock%20Structure%20from%20%5Bgo-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fconsensus%2Fethash%2Fconsensus.go)%0A%0A%60%60%60%0A%2F%2F%20SealHash%20returns%20the%20hash%20of%20a%20block%20prior%20to%20it%20being%20sealed.%0Afunc%20(ethash%20*Ethash)%20SealHash(header%20*types.Header)%20(hash%20common.Hash)%20%7B%0A%20hasher%20%3A%3D%20sha3.NewLegacyKeccak256()%0A%0A%20rlp.Encode(hasher%2C%20%5B%5Dinterface%7B%7D%7B%0A%20%20header.ParentHash%2C%0A%20%20header.UncleHash%2C%0A%20%20header.Coinbase%2C%0A%20%20header.Root%2C%0A%20%20header.TxHash%2C%0A%20%20header.ReceiptHash%2C%0A%20%20header.Bloom%2C%0A%20%20header.Difficulty%2C%0A%20%20header.Number%2C%0A%20%20header.GasLimit%2C%0A%20%20header.GasUsed%2C%0A%20%20header.Time%2C%0A%20%20header.Extra%2C%0A%20%7D)%0A%20hasher.Sum(hash%5B%3A0%5D)%0A%20return%20hash%0A%7D%0A%60%60%60%0A%0A%23%23%20Signing%20Mechanism%0A%0ATransactions%20are%20signed%20using%20recoverable%20ECDSA%20signatures.%20This%20method%20utilises%20the%20SECP-256k1%20curve.%20(see%20the%20%5BEthereum%20Yellow%20Paper%5D(https%3A%2F%2Fethereum.github.io%2Fyellowpaper%2Fpaper.pdf)%20Appendix%20F.%20Signing%20Transactions).%20go-ethereum%20utilizes%20the%20%5Bsecp256k1%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fsecp256k1)%20package%20which%20wraps%20the%20bitcoin%20secp256k1%20C%20library.%20Signing%20is%20handled%20by%20the%20%5Bsigner%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fsigner)%20receives%20a%20request%20and%20produces%20a%20signature.%20Note%2C%20the%20produced%20signature%20conforms%20to%20the%20secp256k1%20curve%20R%2C%20S%20and%20V%20values%2C%20where%20the%20V%20value%20will%20be%2027%20or%2028%20for%20legacy%20reasons%2C%20if%20legacyV%3D%3Dtrue.%0A%0A%23%23%20Code%20Review%0A%0A%23%23%23%20Signing%0A%0A-%20%5Bbls12381%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fbls12381)%3A%20BLS12-381%20is%20a%20pairing-friendly%20elliptic%20curve.%0A-%20%5Bbn256%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fbn256)%3A%20Package%20bn256%20implements%20the%20Optimal%20Ate%20pairing%20over%20a%20256-bit%20Barreto-Naehrig%20curve.%20(%5Binsecure%5D(https%3A%2F%2Fmoderncrypto.org%2Fmail-archive%2Fcurves%2F2016%2F000740.html))%0A-%20%5Bsecp256k1%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fsecp256k1)%3A%20Package%20secp256k1%20wraps%20the%20bitcoin%20secp256k1%20C%20library.%0A-%20%5Bsigner%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fsigner)%3A%20sign%20receives%20a%20request%20and%20produces%20a%20signature.%20Note%2C%20the%20produced%20signature%20conforms%20to%20the%20secp256k1%20curve%20R%2C%20S%20and%20V%20values%2C%20where%20the%20V%20value%20will%20be%2027%20or%2028%20for%20legacy%20reasons%2C%20if%20legacyV%3D%3Dtrue.%0A%0A%23%23%23%20Consensus%0A%0A-%20%5Bconsensus%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fconsensus)%0A%20%20-%20%5Balgorithm%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fconsensus%2Fethash%2Falgorithm.go)%3A%20hashimoto%20aggregates%20data%20from%20the%20full%20dataset%20in%20order%20to%20produce%20our%20final%20value%20for%20a%20particular%20header%20hash%20and%20nonce.%0A%20%20-%20%5Bapi%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fconsensus%2Fethash%2Fapi.go)%3A%20API's%20include%20GetWork%2C%20SubmitWork%2C%20SubmitHashRate%20and%20GetHashRate.%0A%20%20-%20%5Bethhash%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fconsensus)%3A%20Package%20ethash%20implements%20the%20ethash%20proof-of-work%20consensus%20engine.%0A%20%20-%20%5Bsealer%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fconsensus%2Fethash%2Fsealer.go)%3A%20Seal%20implements%20consensus.Engine%2C%20attempting%20to%20find%20a%20nonce%20that%20satisfies%20the%20block's%20difficulty%20requirements.%0A-%20Additional%20Consensus%20Engines%0A%20%20-%20%5Bbeacon%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fconsensus%2Fbeacon)%3A%20Beacon%20is%20a%20consensus%20engine%20that%20combines%20the%20eth1%20consensus%20and%20proof-of-stake%20algorithm.%20There%20is%20a%20special%20flag%20inside%20to%20decide%20whether%20to%20use%20legacy%20consensus%20rules%20or%20new%20rules.%20The%20transition%20rule%20is%20described%20in%20the%20eth1%2F2%20merge%20spec%5BEIP-3675%5D(https%3A%2F%2Fgithub.com%2Fethereum%2FEIPs%2Fblob%2Fmaster%2FEIPS%2Feip-3675.mdx).%20The%20beacon%20here%20is%20a%20half-functional%20consensus%20engine%20with%20partial%20functions%20which%20is%20only%20used%20for%20necessary%20consensus%20checks.%20The%20legacy%20consensus%20engine%20can%20be%20any%20engine%20implements%20the%20consensus%20interface%20(except%20the%20beacon%20itself).%0A%20%20-%20%5Bclique%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fconsensus%2Fclique%2Fclique.go)%3A%20Package%20clique%20implements%20the%20proof-of-authority%20consensus%20engine.%0A%0A%23%23%23%20Cryptographic%20Primitives%0A%0A**general%20primitives**%0A%0A-%20%5Basm%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcore%2Fasm)%3A%20Package%20asm%20provides%20support%20for%20dealing%20with%20EVM%20assembly%20instructions%20(e.g.%2C%20disassembling%20them).%0A-%20%5Bbitutil%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcommon%2Fbitutil)%3A%20Package%20bitutil%20implements%20fast%20bitwise%20operations.%0A-%20%5Bbloombits%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcore%2Fbloombits)%3A%20Package%20bloombits%20implements%20bloom%20filtering%20on%20batches%20of%20data.%0A-%20%5Bforkid%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcore%2Fforkid)%3A%20Package%20forkid%20implements%20%5BEIP-2124%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-2124).%0A-%20%5Bhexutil%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcommon%2Fhexutil)%3A%20Package%20hexutil%20implements%20hex%20encoding%20with%200x%20prefix.%20This%20encoding%20is%20used%20by%20the%20Ethereum%20RPC%20API%20to%20transport%20binary%20data%20in%20JSON%20payloads.%0A-%20%5Blru%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcommon%2Flru)%3A%20Package%20lru%20implements%20generically-typed%20Least%20Recently%20Used(LRU)%20caches.%0A-%20%5Bmath%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcommon%2Fmath)%3A%20Package%20math%20provides%20integer%20math%20utilities.%0A-%20%5Bmclock%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcommon%2Fmclock)%3A%20Package%20mclock%20is%20a%20wrapper%20for%20a%20monotonic%20clock%20source%0A-%20%5Bprque%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcommon%2Fprque)%3APackage%20prque%20implements%20a%20priority%20queue%20data%20structure%20supporting%20arbitrary%20value%20types%20and%20int64%20priorities.%0A-%20%5Btrie%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Ftrie)%3A%20Package%20trie%20implements%20Merkle%20Patricia%20Tries.%0A%0A**hash%20functions**%0A%0A-%20%5Bblake2b%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fblake2b)%20(go)%3A%20Package%20blake2b%20implements%20the%20BLAKE2b%20hash%20algorithm%20defined%20by%20RFC%207693%20and%20the%20extendable%20output%20function%20(XOF)%20BLAKE2Xb.%0A%0A**encryption**%0A%0A-%20%5Bsignify%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fsignify)%3A%20signFile%20reads%20the%20contents%20of%20an%20input%20file%20and%20signs%20it%20(in%20armored%20format)%20with%20the%20key%20provided%2C%20placing%20the%20signature%20into%20the%20output%20file.%5Bascii%20armored%20encryption%5D(https%3A%2F%2Fwww.rfc-editor.org%2Frfc%2Fpdfrfc%2Frfc4880.txt.pdf)%0A-%20%5Becies%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fecies)%3A%20a%20hybrid%20encryption%20scheme%0A%0A**random%20number%20generators**%0A%0A**serilization%2Fdeserialization**%0A%0A-%20%5BRLP%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Frlp)%3A%20Package%20rlp%20implements%20the%20RLP%20serialization%20format.(%5Bdoc%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Frlp%2Fdoc.go))%20The%20purpose%20of%20RLP%20(Recursive%20Linear%20Prefix)%20is%20to%20encode%20arbitrarily%20nested%20arrays%20of%20binary%20data%2C%20and%20RLP%20is%20the%20main%20encoding%20method%20used%20to%20serialize%20objects%20in%20Ethereum.%0A%20%20The%20only%20purpose%20of%20RLP%20is%20to%20encode%20structure%3B%20encoding%20specific%20atomic%20data%20types%20(eg.%0A%20%20strings%2C%20ints%2C%20floats)%20is%20left%20up%20to%20higher-order%20protocols.%20In%20Ethereum%20integers%20must%20be%0A%20%20represented%20in%20big%20endian%20binary%20form%20with%20no%20leading%20zeroes%20(thus%20making%20the%20integer%0A%20%20value%20zero%20equivalent%20to%20the%20empty%20string).%20RLP%20values%20are%20distinguished%20by%20a%20type%20tag.%20The%20type%20tag%20precedes%20the%20value%20in%20the%20input%20stream%20and%20defines%20the%20size%20and%20kind%20of%20the%20bytes%20that%20follow.%0A%0A**threading**%0A%0A**virtual%20machine**%0A%0A-%20%5Bvm%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcore%2Fvm)%20%3A%20Package%20vm%20implements%20the%20Ethereum%20Virtual%20Machine.%20The%20vm%20package%20implements%20one%20EVM%2C%20a%20byte%20code%20VM.%20The%20BC%20(Byte%20Code)%20VM%20loops%20over%20a%20set%20of%20bytes%20and%20executes%20them%20according%20to%20the%20set%20of%20rules%20defined%20in%20the%20Ethereum%20yellow%20paper.%0A%0A**compiler**%0A%0A-%20%5Bcompiler%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcommon%2Fcompiler)%3A%20Package%20compiler%20wraps%20the%20ABI%20compilation%20outputs.%20ParseCombinedJSON%20takes%20the%20direct%20output%20of%20a%20solc%20--combined-output%20run%20and%20parses%20it%20into%20a%20map%20of%20string%20contract%20name%20to%20Contract%20structs.%20The%20provided%20source%2C%20language%20and%20compiler%20version%2C%20and%20compiler%20options%20are%20all%20passed%20through%20into%20the%20Contract%20structs.%20The%20solc%20output%20is%20expected%20to%20contain%20ABI%2C%20source%20mapping%2C%20user%20docs%2C%20and%20dev%20docs.%20Returns%20an%20error%20if%20the%20JSON%20is%20malformed%20or%20missing%20data%2C%20or%20if%20the%20JSON%20embedded%20within%20the%20JSON%20is%20malformed.%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BProof%20of%20Work%20(POW)%2C%20Ethereum%20Org%2C%202022%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fconsensus-mechanisms%2Fpow%2F)%3A%20Ethereum%20Proof%20of%20Work%20Documentation.%0A-%20%5BProof%20Of%20Work%20(POW)%2C%20EtherWorld%202017%5D(https%3A%2F%2Fetherworld.co%2F2017%2F04%2F16%2Fproof-of-work-pow%2F)%3A%20Etherworld%20Proof%20of%20Work%20Guide.%0A-%20%5BEIP-1057%3A%20ProgPoW%2C%20a%20Programmatic%20Proof-of-Work%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-1057)%3A%20ProgPoW%20is%20a%20proof-of-work%20algorithm%20designed%20to%20close%20the%20efficiency%20gap%20available%20to%20specialized%20ASICs.%0A%0A-%20%5Bconsensus%20go-ethereum%3A%20release%201.9%20(codebase)%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fconsensus%2Fconsensus.go)%3A%20Engine%20is%20an%20algorithm%20agnostic%20consensus%20engine.%20(go)%0A-%20%5Bethash.go%2C%20go-ethereum%20release%201.9%20(codebase)%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fconsensus%2Fethash%2Fethash.go)%3A%20Package%20ethash%20implements%20the%20ethash%20proof-of-work%20consensus%20engine.%20(go)%0A-%20%5Bethash.sol%2C%20horizon%20(codebase)%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Fethash%2Fethash.sol)%3A%20Solidity%20implementation%20enableing%20the%20verification%20of%20ethhash%20(solidity)%0A-%20%5Bethash.rs%2C%20parity-ethereum%20(codebase)%5D(https%3A%2F%2Fgithub.com%2Fopenethereum%2Fparity-ethereum%2Fblob%2Fv2.7.2-stable%2Fethash%2Fsrc%2Flib.rs)%3A%20EthashManager%20implementation%20by%20parity%20(rust).%0A-%20%5Bprogpow.ps%2C%20parity-ethereum%20(codebase)%5D(https%3A%2F%2Fgithub.com%2Fopenethereum%2Fparity-ethereum%2Fblob%2Fv2.7.2-stable%2Fethash%2Fsrc%2Fprogpow.rs)%3A%20EthHash%20implementation%20by%20parity%20for%20ASICs%20(rust).%20_ProgPoW%20(Programmatic%20Proof-of-Work)%20is%20the%20Ethereum%20network's%20proposed%20new%20Application-Specific%20Integrated%20Circuit%20(ASIC)%20resistant%20Proof-of-Work%20mining%20algorithm._%0A%0A**Staking**%0A%0A**Additional**%0A%0A-%20%5BEthereum%20Yellow%20Paper%5D(https%3A%2F%2Fethereum.github.io%2Fyellowpaper%2Fpaper.pdf)%3A%0A-%20%5BEthereum%20EVM%20illustrated%5D(https%3A%2F%2Ftakenobu-hs.github.io%2Fdownloads%2Fethereum_evm_illustrated.pdf)%3A%20A%20technical%20overview%20of%20Ethereum%20including%20state%2C%20accounts%2C%20transactions%20and%20messages%20as%20well%20as%20the%20EVM.%20%5BAppendix%20E%5D(%23appendix-e-data-structures)%20has%20links%20to%20type%20definitions%20for%20blocks%2C%20transactions%2C%20state%20etc%20in%20geth.%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./ethereum-1-0-D2GQOdkW.js"),[]),path:"/research/chains/ethereum-1-0.html",type:"mdx",filePath:"research/chains/ethereum-1-0.mdx",content:"%23%20Ethereum%201.0%0A%0Adate%3A%202023-02-04%0Alast-updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0A%23%23%20Consensus%20Mechanism%0A%0A%23%23%23%20Ethereum%201.0%20Proof%20Of%20Work%0A%0A%3E%20Existing%20Blockchain%20technology%20is%20working%20on%20the%20core%20concept%20of%20'Proof%20Of%20Work'%20(POW).%20A%20proof-of-work%20(PoW)%20is%20a%20protocol%20that%20is%20difficult%20to%20compute%20but%20easy%20to%20verify.%20It%20can%20be%20verified%20in%20far%20less%20time%20than%20it%20took%20to%20compute%20in%20first%20place.%20The%20process%20involves%20scanning%20for%20a%20value%20that%20when%20hashed%2C%20(such%20as%20with%20SHA-256)%2C%20the%20hash%20begins%20with%20a%20number%20of%20zero%20bits.%20The%20average%20work%20required%20is%20exponential%20in%20the%20number%20of%20zero%20bits%20required%20and%20can%20be%20verified%20by%20executing%20a%20single%20hash.%20In%20simple%20words%2C%20Proof%20of%20work%20is%20an%20expensive%20computation%20done%20by%20all%20miners%20to%20compete%20to%20find%20a%20number%20that%2C%20when%20added%20to%20the%20block%20of%20transactions%2C%20causes%20this%20block%20to%20hash%20to%20a%20code%20with%20certain%20rare%20properties.%20Finding%20such%20a%20rare%20number%20is%20hard%20(based%20on%20the%20cryptographic%20features%20of%20the%20hash%20function%20used%20in%20this%20process)%2C%20but%20verifying%20its%20validity%20when%20it's%20found%20is%20relatively%20easy.%20One%20can%20take%20the%20challenge%2C%20the%20proof%20string%20and%20hash%20them%20together%20and%20check%20if%20the%20hash%20begins%20with%20a%20number%20of%20zero%20bits.%20This%20requires%20to%20apply%20the%20hash%20function%20just%20once%20and%20verify%20the%20output%20indeed%20has%20requisite%20numbers%20of%200's%20in%20front.%20If%20so%2C%20then%20the%20proof%20of%20work%20is%20considered%20valid%20under%20the%20application%20of%20that%20cryptographic%20hash%20function.%20Every%20block%20in%20the%20participating%20network%20should%20contain%20such%20rare%20number.%0A%0A!%5BProof%20Of%20Work%5D(%2Fimages%2Fresearch%2Fpow.png%20%22Proof%20Of%20Work%22)%0A%0ABlock%20Structure%20from%20%5Bgo-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fconsensus%2Fethash%2Fconsensus.go)%0A%0A%60%60%60%0A%2F%2F%20SealHash%20returns%20the%20hash%20of%20a%20block%20prior%20to%20it%20being%20sealed.%0Afunc%20(ethash%20*Ethash)%20SealHash(header%20*types.Header)%20(hash%20common.Hash)%20%7B%0A%20hasher%20%3A%3D%20sha3.NewLegacyKeccak256()%0A%0A%20rlp.Encode(hasher%2C%20%5B%5Dinterface%7B%7D%7B%0A%20%20header.ParentHash%2C%0A%20%20header.UncleHash%2C%0A%20%20header.Coinbase%2C%0A%20%20header.Root%2C%0A%20%20header.TxHash%2C%0A%20%20header.ReceiptHash%2C%0A%20%20header.Bloom%2C%0A%20%20header.Difficulty%2C%0A%20%20header.Number%2C%0A%20%20header.GasLimit%2C%0A%20%20header.GasUsed%2C%0A%20%20header.Time%2C%0A%20%20header.Extra%2C%0A%20%7D)%0A%20hasher.Sum(hash%5B%3A0%5D)%0A%20return%20hash%0A%7D%0A%60%60%60%0A%0A%23%23%20Signing%20Mechanism%0A%0ATransactions%20are%20signed%20using%20recoverable%20ECDSA%20signatures.%20This%20method%20utilises%20the%20SECP-256k1%20curve.%20(see%20the%20%5BEthereum%20Yellow%20Paper%5D(https%3A%2F%2Fethereum.github.io%2Fyellowpaper%2Fpaper.pdf)%20Appendix%20F.%20Signing%20Transactions).%20go-ethereum%20utilizes%20the%20%5Bsecp256k1%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fsecp256k1)%20package%20which%20wraps%20the%20bitcoin%20secp256k1%20C%20library.%20Signing%20is%20handled%20by%20the%20%5Bsigner%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fsigner)%20receives%20a%20request%20and%20produces%20a%20signature.%20Note%2C%20the%20produced%20signature%20conforms%20to%20the%20secp256k1%20curve%20R%2C%20S%20and%20V%20values%2C%20where%20the%20V%20value%20will%20be%2027%20or%2028%20for%20legacy%20reasons%2C%20if%20legacyV%3D%3Dtrue.%0A%0A%23%23%20Code%20Review%0A%0A%23%23%23%20Signing%0A%0A-%20%5Bbls12381%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fbls12381)%3A%20BLS12-381%20is%20a%20pairing-friendly%20elliptic%20curve.%0A-%20%5Bbn256%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fbn256)%3A%20Package%20bn256%20implements%20the%20Optimal%20Ate%20pairing%20over%20a%20256-bit%20Barreto-Naehrig%20curve.%20(%5Binsecure%5D(https%3A%2F%2Fmoderncrypto.org%2Fmail-archive%2Fcurves%2F2016%2F000740.html))%0A-%20%5Bsecp256k1%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fsecp256k1)%3A%20Package%20secp256k1%20wraps%20the%20bitcoin%20secp256k1%20C%20library.%0A-%20%5Bsigner%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fsigner)%3A%20sign%20receives%20a%20request%20and%20produces%20a%20signature.%20Note%2C%20the%20produced%20signature%20conforms%20to%20the%20secp256k1%20curve%20R%2C%20S%20and%20V%20values%2C%20where%20the%20V%20value%20will%20be%2027%20or%2028%20for%20legacy%20reasons%2C%20if%20legacyV%3D%3Dtrue.%0A%0A%23%23%23%20Consensus%0A%0A-%20%5Bconsensus%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fconsensus)%0A%20%20-%20%5Balgorithm%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fconsensus%2Fethash%2Falgorithm.go)%3A%20hashimoto%20aggregates%20data%20from%20the%20full%20dataset%20in%20order%20to%20produce%20our%20final%20value%20for%20a%20particular%20header%20hash%20and%20nonce.%0A%20%20-%20%5Bapi%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fconsensus%2Fethash%2Fapi.go)%3A%20API's%20include%20GetWork%2C%20SubmitWork%2C%20SubmitHashRate%20and%20GetHashRate.%0A%20%20-%20%5Bethhash%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fconsensus)%3A%20Package%20ethash%20implements%20the%20ethash%20proof-of-work%20consensus%20engine.%0A%20%20-%20%5Bsealer%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fconsensus%2Fethash%2Fsealer.go)%3A%20Seal%20implements%20consensus.Engine%2C%20attempting%20to%20find%20a%20nonce%20that%20satisfies%20the%20block's%20difficulty%20requirements.%0A-%20Additional%20Consensus%20Engines%0A%20%20-%20%5Bbeacon%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fconsensus%2Fbeacon)%3A%20Beacon%20is%20a%20consensus%20engine%20that%20combines%20the%20eth1%20consensus%20and%20proof-of-stake%20algorithm.%20There%20is%20a%20special%20flag%20inside%20to%20decide%20whether%20to%20use%20legacy%20consensus%20rules%20or%20new%20rules.%20The%20transition%20rule%20is%20described%20in%20the%20eth1%2F2%20merge%20spec%5BEIP-3675%5D(https%3A%2F%2Fgithub.com%2Fethereum%2FEIPs%2Fblob%2Fmaster%2FEIPS%2Feip-3675.mdx).%20The%20beacon%20here%20is%20a%20half-functional%20consensus%20engine%20with%20partial%20functions%20which%20is%20only%20used%20for%20necessary%20consensus%20checks.%20The%20legacy%20consensus%20engine%20can%20be%20any%20engine%20implements%20the%20consensus%20interface%20(except%20the%20beacon%20itself).%0A%20%20-%20%5Bclique%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fconsensus%2Fclique%2Fclique.go)%3A%20Package%20clique%20implements%20the%20proof-of-authority%20consensus%20engine.%0A%0A%23%23%23%20Cryptographic%20Primitives%0A%0A**general%20primitives**%0A%0A-%20%5Basm%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcore%2Fasm)%3A%20Package%20asm%20provides%20support%20for%20dealing%20with%20EVM%20assembly%20instructions%20(e.g.%2C%20disassembling%20them).%0A-%20%5Bbitutil%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcommon%2Fbitutil)%3A%20Package%20bitutil%20implements%20fast%20bitwise%20operations.%0A-%20%5Bbloombits%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcore%2Fbloombits)%3A%20Package%20bloombits%20implements%20bloom%20filtering%20on%20batches%20of%20data.%0A-%20%5Bforkid%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcore%2Fforkid)%3A%20Package%20forkid%20implements%20%5BEIP-2124%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-2124).%0A-%20%5Bhexutil%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcommon%2Fhexutil)%3A%20Package%20hexutil%20implements%20hex%20encoding%20with%200x%20prefix.%20This%20encoding%20is%20used%20by%20the%20Ethereum%20RPC%20API%20to%20transport%20binary%20data%20in%20JSON%20payloads.%0A-%20%5Blru%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcommon%2Flru)%3A%20Package%20lru%20implements%20generically-typed%20Least%20Recently%20Used(LRU)%20caches.%0A-%20%5Bmath%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcommon%2Fmath)%3A%20Package%20math%20provides%20integer%20math%20utilities.%0A-%20%5Bmclock%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcommon%2Fmclock)%3A%20Package%20mclock%20is%20a%20wrapper%20for%20a%20monotonic%20clock%20source%0A-%20%5Bprque%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcommon%2Fprque)%3APackage%20prque%20implements%20a%20priority%20queue%20data%20structure%20supporting%20arbitrary%20value%20types%20and%20int64%20priorities.%0A-%20%5Btrie%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Ftrie)%3A%20Package%20trie%20implements%20Merkle%20Patricia%20Tries.%0A%0A**hash%20functions**%0A%0A-%20%5Bblake2b%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fblake2b)%20(go)%3A%20Package%20blake2b%20implements%20the%20BLAKE2b%20hash%20algorithm%20defined%20by%20RFC%207693%20and%20the%20extendable%20output%20function%20(XOF)%20BLAKE2Xb.%0A%0A**encryption**%0A%0A-%20%5Bsignify%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fsignify)%3A%20signFile%20reads%20the%20contents%20of%20an%20input%20file%20and%20signs%20it%20(in%20armored%20format)%20with%20the%20key%20provided%2C%20placing%20the%20signature%20into%20the%20output%20file.%5Bascii%20armored%20encryption%5D(https%3A%2F%2Fwww.rfc-editor.org%2Frfc%2Fpdfrfc%2Frfc4880.txt.pdf)%0A-%20%5Becies%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fecies)%3A%20a%20hybrid%20encryption%20scheme%0A%0A**random%20number%20generators**%0A%0A**serilization%2Fdeserialization**%0A%0A-%20%5BRLP%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Frlp)%3A%20Package%20rlp%20implements%20the%20RLP%20serialization%20format.(%5Bdoc%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Frlp%2Fdoc.go))%20The%20purpose%20of%20RLP%20(Recursive%20Linear%20Prefix)%20is%20to%20encode%20arbitrarily%20nested%20arrays%20of%20binary%20data%2C%20and%20RLP%20is%20the%20main%20encoding%20method%20used%20to%20serialize%20objects%20in%20Ethereum.%0A%20%20The%20only%20purpose%20of%20RLP%20is%20to%20encode%20structure%3B%20encoding%20specific%20atomic%20data%20types%20(eg.%0A%20%20strings%2C%20ints%2C%20floats)%20is%20left%20up%20to%20higher-order%20protocols.%20In%20Ethereum%20integers%20must%20be%0A%20%20represented%20in%20big%20endian%20binary%20form%20with%20no%20leading%20zeroes%20(thus%20making%20the%20integer%0A%20%20value%20zero%20equivalent%20to%20the%20empty%20string).%20RLP%20values%20are%20distinguished%20by%20a%20type%20tag.%20The%20type%20tag%20precedes%20the%20value%20in%20the%20input%20stream%20and%20defines%20the%20size%20and%20kind%20of%20the%20bytes%20that%20follow.%0A%0A**threading**%0A%0A**virtual%20machine**%0A%0A-%20%5Bvm%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcore%2Fvm)%20%3A%20Package%20vm%20implements%20the%20Ethereum%20Virtual%20Machine.%20The%20vm%20package%20implements%20one%20EVM%2C%20a%20byte%20code%20VM.%20The%20BC%20(Byte%20Code)%20VM%20loops%20over%20a%20set%20of%20bytes%20and%20executes%20them%20according%20to%20the%20set%20of%20rules%20defined%20in%20the%20Ethereum%20yellow%20paper.%0A%0A**compiler**%0A%0A-%20%5Bcompiler%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcommon%2Fcompiler)%3A%20Package%20compiler%20wraps%20the%20ABI%20compilation%20outputs.%20ParseCombinedJSON%20takes%20the%20direct%20output%20of%20a%20solc%20--combined-output%20run%20and%20parses%20it%20into%20a%20map%20of%20string%20contract%20name%20to%20Contract%20structs.%20The%20provided%20source%2C%20language%20and%20compiler%20version%2C%20and%20compiler%20options%20are%20all%20passed%20through%20into%20the%20Contract%20structs.%20The%20solc%20output%20is%20expected%20to%20contain%20ABI%2C%20source%20mapping%2C%20user%20docs%2C%20and%20dev%20docs.%20Returns%20an%20error%20if%20the%20JSON%20is%20malformed%20or%20missing%20data%2C%20or%20if%20the%20JSON%20embedded%20within%20the%20JSON%20is%20malformed.%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BProof%20of%20Work%20(POW)%2C%20Ethereum%20Org%2C%202022%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fconsensus-mechanisms%2Fpow%2F)%3A%20Ethereum%20Proof%20of%20Work%20Documentation.%0A-%20%5BProof%20Of%20Work%20(POW)%2C%20EtherWorld%202017%5D(https%3A%2F%2Fetherworld.co%2F2017%2F04%2F16%2Fproof-of-work-pow%2F)%3A%20Etherworld%20Proof%20of%20Work%20Guide.%0A-%20%5BEIP-1057%3A%20ProgPoW%2C%20a%20Programmatic%20Proof-of-Work%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-1057)%3A%20ProgPoW%20is%20a%20proof-of-work%20algorithm%20designed%20to%20close%20the%20efficiency%20gap%20available%20to%20specialized%20ASICs.%0A%0A-%20%5Bconsensus%20go-ethereum%3A%20release%201.9%20(codebase)%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fconsensus%2Fconsensus.go)%3A%20Engine%20is%20an%20algorithm%20agnostic%20consensus%20engine.%20(go)%0A-%20%5Bethash.go%2C%20go-ethereum%20release%201.9%20(codebase)%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fconsensus%2Fethash%2Fethash.go)%3A%20Package%20ethash%20implements%20the%20ethash%20proof-of-work%20consensus%20engine.%20(go)%0A-%20%5Bethash.sol%2C%20horizon%20(codebase)%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Fethash%2Fethash.sol)%3A%20Solidity%20implementation%20enableing%20the%20verification%20of%20ethhash%20(solidity)%0A-%20%5Bethash.rs%2C%20parity-ethereum%20(codebase)%5D(https%3A%2F%2Fgithub.com%2Fopenethereum%2Fparity-ethereum%2Fblob%2Fv2.7.2-stable%2Fethash%2Fsrc%2Flib.rs)%3A%20EthashManager%20implementation%20by%20parity%20(rust).%0A-%20%5Bprogpow.ps%2C%20parity-ethereum%20(codebase)%5D(https%3A%2F%2Fgithub.com%2Fopenethereum%2Fparity-ethereum%2Fblob%2Fv2.7.2-stable%2Fethash%2Fsrc%2Fprogpow.rs)%3A%20EthHash%20implementation%20by%20parity%20for%20ASICs%20(rust).%20_ProgPoW%20(Programmatic%20Proof-of-Work)%20is%20the%20Ethereum%20network's%20proposed%20new%20Application-Specific%20Integrated%20Circuit%20(ASIC)%20resistant%20Proof-of-Work%20mining%20algorithm._%0A%0A**Staking**%0A%0A**Additional**%0A%0A-%20%5BEthereum%20Yellow%20Paper%5D(https%3A%2F%2Fethereum.github.io%2Fyellowpaper%2Fpaper.pdf)%3A%0A-%20%5BEthereum%20EVM%20illustrated%5D(https%3A%2F%2Ftakenobu-hs.github.io%2Fdownloads%2Fethereum_evm_illustrated.pdf)%3A%20A%20technical%20overview%20of%20Ethereum%20including%20state%2C%20accounts%2C%20transactions%20and%20messages%20as%20well%20as%20the%20EVM.%20%5BAppendix%20E%5D(%23appendix-e-data-structures)%20has%20links%20to%20type%20definitions%20for%20blocks%2C%20transactions%2C%20state%20etc%20in%20geth.%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./ethereum-BOdEYrBm.js"),[]),path:"/research/chains/ethereum",type:"mdx",filePath:"research/chains/ethereum.mdx",content:"%23%20Ethereum%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AWith%20the%20Introduction%20of%20Ethereum%202.0%3Csup%3E%5B1%5D(%23bp1)%3C%2Fsup%3E%20%3Csup%3E%5B2%5D(%23bp2)%3C%2Fsup%3E%20%3Csup%3E%5B3%5D(%23bp3)%3C%2Fsup%3E%20block%20production%20and%20consensus%20were%20separated%3Csup%3E%5B4%5D(%23bp4)%3C%2Fsup%3E%20into%20execution%20clients%3Csup%3E%5B5%5D(%23bp5)%3C%2Fsup%3E%20and%20consensus%20clients%3Csup%3E%5B6%5D(%23ts6)%3C%2Fsup%3E%20%3Csup%3E%5B7%5D(%23bp7)%3C%2Fsup%3E.%0A%0AThe%20execution%20chain%20implemented%20a%20simplified%20Proof%20of%20Work%3Csup%3E%5B1%5D(%23bp1)%3C%2Fsup%3E%20reducing%20difficutly%20to%20zero%20and%20removing%20the%20need%20for%20omners%20(uncles)%20which%20would%20now%20be%20handled%20by%20the%20beacon%20chain%3Csup%3E%5B3%5D(%23bp3)%3C%2Fsup%3E%20which%20is%20responsible%20for%20providing%20consensus%20%3Csup%3E%5B2%5D(%23bp2)%3C%2Fsup%3E.%0A%0ALight%20Clients%3Csup%3E%5B11%5D(%23ts11)%3C%2Fsup%3E%20were%20also%20introduced.%20To%20facilate%20this%0Aa%20sync%20committee%20of%20512%20current%20validators%20is%20elected%20every%20255%20epochs%2C%20approximately%20every%2027%20hours%20(see%20%5Bsample%20sync%20comittee%20data%5D(%23sync-committee-latest))%2C%20they%20are%20responsible%20for%20signing%20each%20block.%0A%0AAs%20at%20December%2011th%2C%202022%20Ethereum%20has%20487%2C920%20validators%3Csup%3E%5B8%5D(%23bp8)%3C%2Fsup%3E%20with%20a%20sample%20epoch%20(%5B166581%5D(https%3A%2F%2Fbeaconcha.in%2Fepoch%2F166581))%20and%20slot%20(%5B5%2C330%2C592%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5330592))%20having%20%5B139%20transactions%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5330592%23transactions)%20with%20%5B19%2C227%20votes%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5330592%23votes)%20from%2063%20committees%20and%20%5B126%20aggregated%20committe%20attestations%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5330592%23attestations).%0A%0AHere%20is%20more%20information%20on%20the%20upgrade%3Csup%3E%5B9%5D(%23bp9)%3C%2Fsup%3E%20and%20the%20roadmap%3Csup%3E%5B10%5D(%23bp10)%3C%2Fsup%3E%0A%0A!%5BEthereum%20Roadmap%5D(%2Fimages%2Fresearch%2Fethereum-roadmap.jpg%20%22Ethereum%20Roadmap%22)%0A%0A%23%23%20Consensus%20Mechanism%0A%0AEthreum%20uses%20Proof%20of%20Stake%20(PoS).%20Here%20we%20give%20an%20overview%20of%20Proof%20of%20Stake%20Followed%20by%20a%20deep%20dive%20into%20synch%20committees.%0AFollowing%20is%20an%20excerpt%20from%20%5BEthereum%20Orgs%20Proof%20of%20Stake%20document%5D(Proof-of-stake%20%22PoS%22)%0A%0A%3E%20**What%20is%20proof-of-stake%20(PoS)%3F**%0A%0A%3E%20Proof-of-stake%20underlies%20certain%20consensus%20mechanisms%20used%20by%20blockchains%20to%20achieve%20distributed%20consensus.%20In%20proof-of-work%2C%20miners%20prove%20they%20have%20capital%20at%20risk%20by%20expending%20energy.%20Ethereum%20uses%20proof-of-stake%2C%20where%20validators%20explicitly%20stake%20capital%20in%20the%20form%20of%20ETH%20into%20a%20smart%20contract%20on%20Ethereum.%20This%20staked%20ETH%20then%20acts%20as%20collateral%20that%20can%20be%20destroyed%20if%20the%20validator%20behaves%20dishonestly%20or%20lazily.%20The%20validator%20is%20then%20responsible%20for%20checking%20that%20new%20blocks%20propagated%20over%20the%20network%20are%20valid%20and%20occasionally%20creating%20and%20propagating%20new%20blocks%20themselves.%0A%0A%3E%20Proof-of-stake%20comes%20with%20a%20number%20of%20improvements%20to%20the%20now-deprecated%20proof-of-work%20system%3A%0A%0A%3E%20-%20better%20energy%20efficiency%20%E2%80%93%20there%20is%20no%20need%20to%20use%20lots%20of%20energy%20on%20proof-of-work%20computations%0A%3E%20-%20lower%20barriers%20to%20entry%2C%20reduced%20hardware%20requirements%20%E2%80%93%20there%20is%20no%20need%20for%20elite%20hardware%20to%20stand%20a%20chance%20of%20creating%20new%20blocks%0A%3E%20-%20reduced%20centralization%20risk%20%E2%80%93%20proof-of-stake%20should%20lead%20to%20more%20nodes%20securing%20the%20network%0A%3E%20-%20because%20of%20the%20low%20energy%20requirement%20less%20ETH%20issuance%20is%20required%20to%20incentivize%20participation%0A%3E%20-%20economic%20penalties%20for%20misbehaviour%20make%2051%25%20style%20attacks%20exponentially%20more%20costly%20for%20an%20attacker%20compared%20to%20proof-of-work%0A%3E%20-%20the%20community%20can%20resort%20to%20social%20recovery%20of%20an%20honest%20chain%20if%20a%2051%25%20attack%20were%20to%20overcome%20the%20crypto-economic%20defenses.%0A%0A%23%23%23%20Block%20Production%0A%0AValidators%20run%20both%20an%20Ethereum%201%20client%20(e.g.%20geth)%20and%20a%20Beacon%20Chain%20Client%20(e.g.%20prysm).%20The%20geth%20client%20recieves%20transactions%20and%20places%20them%20into%20blocks.%20For%20additional%20details%20see%20the%20Ethereum%20Builder%20Specs%3Csup%3E%5B12%5D(%23ts12)%3C%2Fsup%3E.%20The%20following%20diagrams%20give%20an%20overview%20of%20how%20blocks%20are%20proposed%20and%20how%20MEV%20Boost%3Csup%3E%5B13%5D(%23ts13)%3C%2Fsup%3E%20could%20be%20integrated.%20For%20simplification%20we%20can%20replace%20mev_boost%20and%20relay%20with%20geth%20in%20the%20block%20proposal%20diagram%20as%20the%20majority%20of%20validators%20simply%20run%20a%20geth%20node.%0A%0A!%5BBlock%20Proposal%5D(%2Fimages%2Fresearch%2Fblock-proposal.png%20%22Block%20Proposal%22)%0A%0A%23%23%23%20Slots%20and%20Epochs%20%3Csup%3E%5B6%5D(%23ts6a)%3C%2Fsup%3E%0A%0A%3E%20The%20Beacon%20Chain%20provides%20the%20heartbeat%20to%20Ethereum%E2%80%99s%20consensus.%20Each%20slot%20is%2012%20seconds%20and%20an%20epoch%20is%2032%20slots%3A%206.4%20minutes.%0A%0A!%5BSlots%20and%20Epochs%5D(%2Fimages%2Fresearch%2FBeacon-Chain-Slots-and-Epochs.png.webp%20%22Slots%20and%20Epochs%22)%0A%0A%23%23%23%20Block%20Proposals%0A%0AWhen%20a%20validator%20is%20nominated%20as%20a%20proposer%20for%20a%20slot%20in%20an%20Epoch%20they%20propose%20a%20block%20gathered%20from%20there%20Ethereum%201%20client.%0A%0AThis%20proposed%20block%20is%20attested%20to%20by%20other%20validators%20who%20have%20been%20assigned%20as%20committe%20members%20for%20this%20slot%3Csup%3E%5B6b%5D(%23ts6b)%3C%2Fsup%3E.%0A%0A%3E%20A%20block%20proposer%20is%20a%20validator%20that%20has%20been%20pseudorandomly%20selected%20to%20build%20a%20block.%0A%3E%0A%3E%20Most%20of%20the%20time%2C%20validators%20are%20attesters%20that%20vote%20on%20blocks.%20These%20votes%20are%20recorded%20in%20the%20Beacon%20Chain%20and%20determine%20the%20head%20of%20the%20Beacon%20Chain.%0A%0A!%5BValidators%20and%20Attestations%5D(%2Fimages%2Fresearch%2FBeacon-Chain-Validators.png%20%22Validators%20and%20Attestations%22)%0A%0A%23%23%23%20Committees%0A%0A%3E%20A%20committee%20is%20a%20group%20of%20validators.%20For%20security%2C%20each%20slot%20has%20committees%20of%20at%20least%20128%20validators.%20An%20attacker%20has%20less%20than%20a%20one%20in%20a%20trillion%20probability%20of%20controlling%20%E2%85%94%20of%20a%20committee.%0A%3E%0A%3E%20The%20concept%20of%20a%20randomness%20beacon%20that%20emits%20random%20numbers%20for%20the%20public%2C%20lends%20its%20name%20to%20the%20Ethereum%20Beacon%20Chain.%20The%20Beacon%20Chain%20enforces%20consensus%20on%20a%20pseudorandom%20process%20called%20RANDAO.%0A%0A!%5BCommittees%5D(%2Fimages%2Fresearch%2FBeacon-Chain-RANDAO.png%20%22Committees%22)%0A%0A%23%23%23%20Attestations%0A%0AThe%20attestation%20lifecyle%3Csup%3E%5B9%5D(%23ts9)%3C%2Fsup%3E%20involves%0A%0A1.%20Generation%20of%20the%20proposed%20Block%0A2.%20Propagation%20of%20the%20block%20to%20committee%20members%20to%20vote%20on%20and%20sign%0A3.%20Aggregation%20of%20the%20votes%20(signatures)%20of%20the%20committee%20members%20by%20Aggregators%0A4.%20Propagation%20of%20the%20aggregated%20attestations%20back%20to%20the%20block%20Proposer%0A5.%20Inclusion%20of%20the%20block%20in%20the%20Beaconchain%0A%0A!%5BAttestation%20Life%20Cycle%5D(%2Fimages%2Fresearch%2FAttestationLifeCycle.png%20%22Attestation%20Life%20Cycle%22)%0A%0A%23%23%23%20Checkpoints%20and%20Finality%3Csup%3E%5B6%5D(%23ts6)%3C%2Fsup%3E%0A%0A%3E%20When%20an%20epoch%20ends%2C%20if%20its%20checkpoint%20has%20garnered%20a%20%E2%85%94%20supermajority%2C%20the%20checkpoint%20gets%20justified.%0A%0A!%5BCheckpoints%5D(%2Fimages%2Fresearch%2FBeacon-Chain-Checkpoints.jpg%20%22Checkpoints%22)%0A%0A%3E%20If%20a%20checkpoint%20B%20is%20justified%20and%20the%20checkpoint%20in%20the%20immediate%20next%20epoch%20becomes%20justified%2C%20then%20B%20becomes%20finalized.%20Typically%2C%20a%20checkpoint%20is%20finalized%20in%20two%20epochs%2C%2012.8%20minutes.%0A%0A!%5BFinality%5D(%2Fimages%2Fresearch%2FBeacon-Chain-Justification-and-Finalization.png%20%22Finality%22)%0A%0A%23%23%23%20Sync%20Committee%20%3Csup%3E%5B10%5D(%23ts10)%3C%2Fsup%3E%0A%0AA%20sync%20committee%20of%20512%20current%20validators%20is%20elected%20every%20255%20epochs%2C%20approximately%20every%2027%20hours%20(see%20%5Bsample%20sync%20comittee%20data%5D(%23sync-committee-latest)).%0AThey%20are%20responsible%20for%20signing%20each%20block%20which%20records%20which%20sync%20committee%20members%20(validtors)%20signed%20the%20block%2C%20held%20in%20%60syncaggregate_bits%60%2C%20and%20creates%20a%20bls%20aggregate%20signature%20held%20in%20%60syncaggregate_signature%60%20(see%20%5Bblock-data%5D(%23block-data-for-slot-5330592)).%0A%0A%60%60%60%0A%20%20%20%20%22syncaggregate_bits%22%3A%20%220xdffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffdfffffffffffffffdffffffffffffffffffffffff%22%2C%0A%20%20%20%20%22syncaggregate_participation%22%3A%200.9921875%2C%0A%20%20%20%20%22syncaggregate_signature%22%3A%20%220x95332c55790018eed3d17eada01cb4045348d09137505bc8697eeedaa3800a830ee2c138251850a9577f62a5488419ef0a722579156a177fb3a147017f1077af5d778f46a4cdf815fc450129d135fe5286e16df68333592e4aa45821bde780dd%22%2C%0A%60%60%60%0A%0AThis%20is%20used%20in%20Altair%20Light%20Client%20--%20Sync%20Protocol%3Csup%3E%5B11%5D(%23ts11)%3C%2Fsup%3E%20which%20enables%20the%20beacon%20chain%20to%20be%20light%20client%20friendly%20for%20constrained%20environments%20to%20access%20Ethereum.%0A%0A%23%23%23%20Validator%20Lifecycle%0A%0AFollowing%20is%20an%20overview%20of%20statuses%20for%20validators%20in%20Ethereum%202.0%20phase%200%20%3Csup%3E%5B14%5D(%23ts14)%3C%2Fsup%3E.%0A%0A%3E%201.%20**Deposited**%3A%20the%20validator%20has%20made%20a%20deposit%20and%20has%20registered%20in%20BeaconState.%0A%3E%202.%20**Eligible%20to%20be%20activated%20(Pending)**%3A%20the%20validator%20is%20eligible%20to%20be%20activated.%0A%3E%203.%20**Activated**%3A%20the%20validator%20is%20activated%0A%3E%20%20%20%20-%20_Note%20that%20the%20validator%20may%20be%20%E2%80%9Celigible%20to%20be%20activated%2C%20but%20has%20not%20been%20activated%20yet%E2%80%9D._%0A%3E%204.%20**Slashed**%3A%20the%20validator%20has%20been%20slashed%0A%3E%205.%20**Exited**%3A%20the%20validator%20is%20exited%0A%3E%206.%20**Withdrawable**%3A%20the%20validator%20is%20withdrawable%0A%3E%20%20%20%20-%20_Note%20that%20the%20validator%20will%20be%20able%20to%20withdraw%20to%20EEs%20in%20phase%202_%0A%3E%0A%3E%20_Note%20that%20in%20some%20cases%2C%20a%20validator%20can%20be%20in%20multiple%20statuses%20at%20the%20same%20time%2C%20e.g.%2C%20an%20active%20validator%20may%20be%20%E2%80%9Cactivated%20and%20slashed%E2%80%9D._%0A%0A!%5BValidator%20Status%20Transition%5D(%2Fimages%2Fresearch%2FValidatorStateTransition.png%20%22Validator%20Status%20Transition%22)%0A%0A%23%23%20Light%20Client%20Support%0A%0A**Light%20client%20state%20updates**%0A%0A-%20A%20light%20client%20receives%20objects%20of%20type%20%60LightClientUpdate%60%2C%20%60LightClientFinalityUpdate%60%20and%20%60LightClientOptimisticUpdate%60%3A%0A%20%20-%20**%60update%3A%20LightClientUpdate%60**%3A%20Every%20%60update%60%20triggers%20%60process_light_client_update(store%2C%20update%2C%20current_slot%2C%20genesis_validators_root)%60%20where%20%60current_slot%60%20is%20the%20current%20slot%20based%20on%20a%20local%20clock.%0A%20%20-%20**%60finality_update%3A%20LightClientFinalityUpdate%60**%3A%20Every%20%60finality_update%60%20triggers%20%60process_light_client_finality_update(store%2C%20finality_update%2C%20current_slot%2C%20genesis_validators_root)%60.%0A%20%20-%20**%60optimistic_update%3A%20LightClientOptimisticUpdate%60**%3A%20Every%20%60optimistic_update%60%20triggers%20%60process_light_client_optimistic_update(store%2C%20optimistic_update%2C%20current_slot%2C%20genesis_validators_root)%60.%0A-%20%60process_light_client_store_force_update%60%20MAY%20be%20called%20based%20on%20use%20case%20dependent%20heuristics%20if%20light%20client%20sync%20appears%20stuck.%0A%0A**validate_light_client_update**%0A%0A%60%60%60python%0Adef%20validate_light_client_update(store%3A%20LightClientStore%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20update%3A%20LightClientUpdate%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20current_slot%3A%20Slot%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20genesis_validators_root%3A%20Root)%20-%3E%20None%3A%0A%20%20%20%20%23%20Verify%20sync%20committee%20has%20sufficient%20participants%0A%20%20%20%20sync_aggregate%20%3D%20update.sync_aggregate%0A%20%20%20%20assert%20sum(sync_aggregate.sync_committee_bits)%20%3E%3D%20MIN_SYNC_COMMITTEE_PARTICIPANTS%0A%0A%20%20%20%20%23%20Verify%20update%20does%20not%20skip%20a%20sync%20committee%20period%0A%20%20%20%20assert%20is_valid_light_client_header(update.attested_header)%0A%20%20%20%20update_attested_slot%20%3D%20update.attested_header.beacon.slot%0A%20%20%20%20update_finalized_slot%20%3D%20update.finalized_header.beacon.slot%0A%20%20%20%20assert%20current_slot%20%3E%3D%20update.signature_slot%20%3E%20update_attested_slot%20%3E%3D%20update_finalized_slot%0A%20%20%20%20store_period%20%3D%20compute_sync_committee_period_at_slot(store.finalized_header.beacon.slot)%0A%20%20%20%20update_signature_period%20%3D%20compute_sync_committee_period_at_slot(update.signature_slot)%0A%20%20%20%20if%20is_next_sync_committee_known(store)%3A%0A%20%20%20%20%20%20%20%20assert%20update_signature_period%20in%20(store_period%2C%20store_period%20%2B%201)%0A%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20assert%20update_signature_period%20%3D%3D%20store_period%0A%0A%20%20%20%20%23%20Verify%20update%20is%20relevant%0A%20%20%20%20update_attested_period%20%3D%20compute_sync_committee_period_at_slot(update_attested_slot)%0A%20%20%20%20update_has_next_sync_committee%20%3D%20not%20is_next_sync_committee_known(store)%20and%20(%0A%20%20%20%20%20%20%20%20is_sync_committee_update(update)%20and%20update_attested_period%20%3D%3D%20store_period%0A%20%20%20%20)%0A%20%20%20%20assert%20(%0A%20%20%20%20%20%20%20%20update_attested_slot%20%3E%20store.finalized_header.beacon.slot%0A%20%20%20%20%20%20%20%20or%20update_has_next_sync_committee%0A%20%20%20%20)%0A%0A%20%20%20%20%23%20Verify%20that%20the%20%60finality_branch%60%2C%20if%20present%2C%20confirms%20%60finalized_header%60%0A%20%20%20%20%23%20to%20match%20the%20finalized%20checkpoint%20root%20saved%20in%20the%20state%20of%20%60attested_header%60.%0A%20%20%20%20%23%20Note%20that%20the%20genesis%20finalized%20checkpoint%20root%20is%20represented%20as%20a%20zero%20hash.%0A%20%20%20%20if%20not%20is_finality_update(update)%3A%0A%20%20%20%20%20%20%20%20assert%20update.finalized_header%20%3D%3D%20LightClientHeader()%0A%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20if%20update_finalized_slot%20%3D%3D%20GENESIS_SLOT%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20assert%20update.finalized_header%20%3D%3D%20LightClientHeader()%0A%20%20%20%20%20%20%20%20%20%20%20%20finalized_root%20%3D%20Bytes32()%0A%20%20%20%20%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20assert%20is_valid_light_client_header(update.finalized_header)%0A%20%20%20%20%20%20%20%20%20%20%20%20finalized_root%20%3D%20hash_tree_root(update.finalized_header.beacon)%0A%20%20%20%20%20%20%20%20assert%20is_valid_merkle_branch(%0A%20%20%20%20%20%20%20%20%20%20%20%20leaf%3Dfinalized_root%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20branch%3Dupdate.finality_branch%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20depth%3Dfloorlog2(FINALIZED_ROOT_INDEX)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20index%3Dget_subtree_index(FINALIZED_ROOT_INDEX)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20root%3Dupdate.attested_header.beacon.state_root%2C%0A%20%20%20%20%20%20%20%20)%0A%0A%20%20%20%20%23%20Verify%20that%20the%20%60next_sync_committee%60%2C%20if%20present%2C%20actually%20is%20the%20next%20sync%20committee%20saved%20in%20the%0A%20%20%20%20%23%20state%20of%20the%20%60attested_header%60%0A%20%20%20%20if%20not%20is_sync_committee_update(update)%3A%0A%20%20%20%20%20%20%20%20assert%20update.next_sync_committee%20%3D%3D%20SyncCommittee()%0A%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20if%20update_attested_period%20%3D%3D%20store_period%20and%20is_next_sync_committee_known(store)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20assert%20update.next_sync_committee%20%3D%3D%20store.next_sync_committee%0A%20%20%20%20%20%20%20%20assert%20is_valid_merkle_branch(%0A%20%20%20%20%20%20%20%20%20%20%20%20leaf%3Dhash_tree_root(update.next_sync_committee)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20branch%3Dupdate.next_sync_committee_branch%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20depth%3Dfloorlog2(NEXT_SYNC_COMMITTEE_INDEX)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20index%3Dget_subtree_index(NEXT_SYNC_COMMITTEE_INDEX)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20root%3Dupdate.attested_header.beacon.state_root%2C%0A%20%20%20%20%20%20%20%20)%0A%0A%20%20%20%20%23%20Verify%20sync%20committee%20aggregate%20signature%0A%20%20%20%20if%20update_signature_period%20%3D%3D%20store_period%3A%0A%20%20%20%20%20%20%20%20sync_committee%20%3D%20store.current_sync_committee%0A%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20sync_committee%20%3D%20store.next_sync_committee%0A%20%20%20%20participant_pubkeys%20%3D%20%5B%0A%20%20%20%20%20%20%20%20pubkey%20for%20(bit%2C%20pubkey)%20in%20zip(sync_aggregate.sync_committee_bits%2C%20sync_committee.pubkeys)%0A%20%20%20%20%20%20%20%20if%20bit%0A%20%20%20%20%5D%0A%20%20%20%20fork_version%20%3D%20compute_fork_version(compute_epoch_at_slot(update.signature_slot))%0A%20%20%20%20domain%20%3D%20compute_domain(DOMAIN_SYNC_COMMITTEE%2C%20fork_version%2C%20genesis_validators_root)%0A%20%20%20%20signing_root%20%3D%20compute_signing_root(update.attested_header.beacon%2C%20domain)%0A%20%20%20%20assert%20bls.FastAggregateVerify(participant_pubkeys%2C%20signing_root%2C%20sync_aggregate.sync_committee_signature)%0A%60%60%60%0A%0A**apply_light_client_update**%0A%0A%60%60%60python%0Adef%20apply_light_client_update(store%3A%20LightClientStore%2C%20update%3A%20LightClientUpdate)%20-%3E%20None%3A%0A%20%20%20%20store_period%20%3D%20compute_sync_committee_period_at_slot(store.finalized_header.beacon.slot)%0A%20%20%20%20update_finalized_period%20%3D%20compute_sync_committee_period_at_slot(update.finalized_header.beacon.slot)%0A%20%20%20%20if%20not%20is_next_sync_committee_known(store)%3A%0A%20%20%20%20%20%20%20%20assert%20update_finalized_period%20%3D%3D%20store_period%0A%20%20%20%20%20%20%20%20store.next_sync_committee%20%3D%20update.next_sync_committee%0A%20%20%20%20elif%20update_finalized_period%20%3D%3D%20store_period%20%2B%201%3A%0A%20%20%20%20%20%20%20%20store.current_sync_committee%20%3D%20store.next_sync_committee%0A%20%20%20%20%20%20%20%20store.next_sync_committee%20%3D%20update.next_sync_committee%0A%20%20%20%20%20%20%20%20store.previous_max_active_participants%20%3D%20store.current_max_active_participants%0A%20%20%20%20%20%20%20%20store.current_max_active_participants%20%3D%200%0A%20%20%20%20if%20update.finalized_header.beacon.slot%20%3E%20store.finalized_header.beacon.slot%3A%0A%20%20%20%20%20%20%20%20store.finalized_header%20%3D%20update.finalized_header%0A%20%20%20%20%20%20%20%20if%20store.finalized_header.beacon.slot%20%3E%20store.optimistic_header.beacon.slot%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20store.optimistic_header%20%3D%20store.finalized_header%0A%60%60%60%0A%0A**Sample%20Implementation%3A%20NEAR%20Rainbow%20Bridge%20Ethereum%20Light%20Client%20Deployed%20on%20NEAR**%0A%0ABridging%20support%20was%20implemented%20by%20NEAR%20under%20%5BEth2-to-Near-relay%3A%20prototype%20implementation%20%23762%0A%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fpull%2F762)%0A%0A!%5BEthereum%202%20block%20proof%5D(%2Fposts%2F2023-02-05-ethereum-bridging-costs%2FETH_2_0_MMR.jpg%20%22Ethereum%202%20Block%20Proof%22)%0A%0A%3E%20When%20we%20send%20light%20client%20update%20for%20finality%20block%20inside%20light%20client%20update%2C%20we%20also%20send%20Eth1%20execution%20block%20hash%20with%20the%20Merkle%20proof%20of%20include%20to%20Beacon%20Block%20Body.%20Execution%20block%20hash%20you%20can%20find%20at%20BeaconBlockBody.execution_payload.block_hash.%0A%3E%0A%3E%20So%2C%20for%20creating%20Merkle%20proof%2C%20we%20need%20two%20levels%20of%20Merkle%20Tree%2C%20as%20shown%20in%20the%20picture.%20Both%20Merkle%20trees%20you%20can%20find%20in%20beacon_block_body_merkle_tree.rs%20The%20first%20level%20Merkle%20tree%20for%20beacon%20block%20body%20and%20the%20second%20level%20Merkle%20tree%20for%20execution%20payload.%0A%3E%0A%3E%20The%20execution%20block%20hash%20proof%20creation%20you%20can%20find%20in%20execution_block_proof.rs%20First%2C%20we%20build%20two%20Merkle%20trees%20and%20concatenate%20together%20the%20Merkle%20proof%20for%20block_hash%20in%20execution_payload%20and%20the%20Merkle%20proof%20of%20execution_payload%20in%20beacon_block_body.%20The%20final%20Merkle%20proof%20is%20shown%20by%20the%20orange%20vertices%20on%20the%20picture%3B%20the%20orange%20numbers%20in%20the%20picture%20are%20the%20order%20of%20hashes%20in%20the%20proof.%0A%3E%0A%3E%20beacon_block_header_with_execution_data.rs%20contain%20a%20structure%20which%20consists%20of%20beacon_block_header%20and%20correspondent%20execution_block_hash%20with%20Merkle%20proof.%20This%20structure%20is%20created%20for%20finality%20blocks%20in%20a%20light%20client%20update.%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BGasper%20Consensus%20Whitepaper%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F2003.03052.pdf)%3A%20Combining%20GHOST%20and%20Casper%0A-%20%5Bsigp%20lighthouse%20beacon%20block%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_block.rs%23L7)%3A%20Beacon%20Block%20codebase%20(rust)%0A%0A%3Ca%20name%3D%22bp1%22%3E%5B1%5D%3C%2Fa%3E%20%5BEIP-3675%3A%20Upgrade%20consensus%20to%0AProof-of-Stake%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-3675%23pow-block-processing)%3A%0ASpecification%20of%20the%20consensus%20mechanism%20upgrade%20on%20Ethereum%20Mainnet%20that%0Aintroduces%20Proof-of-Stake.%0A%0A%3Ca%20name%3D%22bp2%22%3E%5B2%5D%3C%2Fa%3E%20%5BEIP-2982%3A%20Serenity%20Phase%0A0%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-2982)%3A%20Phase%200%20of%20the%20release%20schedule%20of%0ASerenity%2C%20a%20series%20of%20updates%20to%20Ethereum%20a%20scalable%2C%20proof-of-stake%20consensus.%0A%0A%3Ca%20name%3D%22bp3%22%3E%5B3%5D%3C%2Fa%3E%20%5BEthreum%20Consensus%20Specs%20Phase%0A0%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Ftree%2Fdev%2Fspecs%2Fphase0)%3A%0ASpecifications%20for%20Ethereum%202.0%20Phase%200%20including%0A%5Bbeacon-chain%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fbeacon-chain.mdx)%2C%0A%5Bdeposit-contract%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fdeposit-contract.mdx)%2C%0A%5Bfork-choice%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Ffork-choice.mdx)%2C%0A%5Bp2p-interface%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fp2p-interface.mdx)%2C%0A%5Bvalidator%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fvalidator.mdx)%0Aand%0A%5Bweak-subjectivity%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fweak-subjectivity.mdx)%0A%0A%3Ca%20name%3D%22bp4%22%3E%5B6%5D%3C%2Fa%3E%20%5BEthereum%20Consensus%20and%20Execution%20Client%0ADistribution%5D(https%3A%2F%2Fclientdiversity.org%2F%23distribution)%3A%20Percentages%20of%20nodes%0Arunning%20client%20types%20for%20both%20Consensus%20(Prysm%2C%20Lighthours%2C%20Nimbus%2C%20Teku)%20and%0AExecution%20(Geth%2C%20Erigon%2C%20Besu%2C%20Nethermind)%20clients.%0A%0A%3Ca%20name%3D%22bp5%22%3E%5B5%5D%3C%2Fa%3E%20%5Bgo-ethereum%20go%0Adocumentation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fethereum%2Fgo-ethereum%40v1.10.26)%3A%0ADocumentation%20for%20Go%20Ethereum%2C%20Official%20Golang%20implementation%20of%20the%20Ethereum%0Aprotocol.%20Which%20is%20an%20execution%20chain%20implementation.%0A%0A%3Ca%20name%3D%22bp6%22%3E%5B6%5D%3C%2Fa%3E%20%5Bprysm%20go%0Adocumentation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2)%3A%0ADocumentation%20for%20prysm%2C%20An%20Ethereum%20Consensus%20Implementation%20Written%20in%20Go.%20A%0Abeacon-chain%20immplementation.%20Also%20see%20%5BPrysm%0ADocumentation%5D(https%3A%2F%2Fdocs.prylabs.network%2Fdocs%2Fgetting-started)%0A%0A%3Ca%20name%3D%22bp7%22%3E%5B7%5D%3C%2Fa%3E%20%5Blighthouse%0Adocumentation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2)%3A%0ADocumentation%20for%20lighthouse%2C%20written%20in%20Rust.%20A%20beacon-chain%20immplementation.%0A%0A%3Ca%20name%3D%22bp8%22%3E%5B8%5D%3C%2Fa%3E%20%5BEtherum%202.0%20Validators%0AOverview%5D(https%3A%2F%2Fbeaconcha.in%2Fvalidators)%3A%20Live%20Monitoring%20of%20Ethreum%202.0%0AValidators%20from%20beachoncha.in%0A%0A%3Ca%20name%3D%22bp9%22%3E%5B9%5D%3C%2Fa%3E%20%5BUpgrading%20Ethereum%5D(https%3A%2F%2Feth2book.info%2Fbellatrix%2F)%3A%20A%0Atechnical%20handbook%20on%20Ethereum's%20move%20to%20proof%20of%20stake%20and%20beyond%20Edition%200.2%3A%0ABellatrix%20%5BWIP%5D%20by%20Ben%20Edgington.%0A%0A%3Ca%20name%3D%22bp10%22%3E%5B9%5D%3C%2Fa%3E%20%5BAnnotated%20Ethereum%0ARoadmap%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40domothy%2Froadmap)%3A%20an%20entry%20point%20for%20the%0Avarious%20items%20on%20the%20Ethereum%20roadmap%2C%20with%20a%20quick%20summary%20along%20with%20links%20for%0Athose%20who%20want%20to%20dive%20deeper.%0A%0A%3Ca%20name%3D%22bp11%22%3E%5B10%5D%3C%2Fa%3E%20%5BShanghai%2FCapella%0AUpgrade%5D(https%3A%2F%2Fconsensys.net%2Fshanghai-capella-upgrade%2F)%3A%20the%20first%0Asimultaneous%20upgrade%20of%20Ethereum%E2%80%99s%20execution%20layer%20and%20consensus%20layer%2C%20and%20is%0Ahighly%20anticipated%20because%20it%20will%20enable%20staked%20ETH%20withdrawals.%0A%0A**Signing**%0A%0A-%20%5Bsigp%20lighthouse%20bls%20signing%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Flib.rs)%3A%20BLS%20signing%20codebase%20(rust)%0A%0A**Staking**%0A%0A-%20%5BEthereum%20Staking%5D(https%3A%2F%2Fethereum.org%2Fen%2Fstaking%2F)%3A%20Staking%20User%20Interface%0A-%20%5BApp%20Stakewise%5D(https%3A%2F%2Fapp.stakewise.io%2F)%3A%20Ethreeum%20Staking%20Application%0A-%20%5BPROOF-OF-STAKE%20(POS)%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fconsensus-mechanisms%2Fpos%2F)%3A%20Ethereum%20Proof%20of%20Stake%20Documentation%0A%0A**References%20Technical%20Summary**%0A%0A%3Ca%20name%3D%22ts1%22%3E%5B1%5D%3C%2Fa%3E%20%5BEthereum%20EVM%0Aillustrated%5D(https%3A%2F%2Ftakenobu-hs.github.io%2Fdownloads%2Fethereum_evm_illustrated.pdf)%3A%0AA%20technical%20overview%20of%20Ethereum%20including%20state%2C%20accounts%2C%20transactions%20and%0Amessages%20as%20well%20as%20the%20EVM.%20%5BAppendix%20E%5D(%23appendix-e-data-structures)%20has%20links%0Ato%20type%20definitions%20for%20blocks%2C%20transactions%2C%20state%20etc%20in%20geth.%0A%0A%3Ca%20name%3D%22ts2%22%3E%5B2%5D%3C%2Fa%3E%20%5BBlocks%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fblocks%2F)%3A%0ABlock%20data%20definitions%20including%20attestations%20from%20ethereum.org%0A%0A%3Ca%20name%3D%22ts3%22%3E%5B3%5D%3C%2Fa%3E%20%5Beth1%20block%0Aproposal%5D(https%3A%2F%2Fhackmd.io%2F%40flashbots%2Fmev-in-eth2%23eth1-block-proposal)%3A%0ATechnical%20walkthrough%20of%20how%20blocks%20are%20proposed%20and%20potential%20MEV%20opportunities%0Afrom%20FlashBots.%0A%0A%3Ca%20name%3D%22ts4%22%3E%5B4%5D%3C%2Fa%3E%20%5BAssemble%0ABlock%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Frayonism%2Fblob%2Fmaster%2Fspecs%2Fmerge.md%23assemble-block)%3A%0AEthereum%20Specification%20for%20block%20Assembly%20as%20part%20of%20Rayonism%20--%20The%20Merge%20spec.%0A%0A%3Ca%20name%3D%22ts5%22%3E%5B5%5D%3C%2Fa%3E%20%5BPrysm%20running%20a%0Anode%5D(https%3A%2F%2Fdocs.prylabs.network%2Fdocs%2Finstall%2Finstall-with-script)%3A%0AOperational%20procedures%20for%20Validators%20by%20Prysm.%20Note%20validators%20run%20both%20the%0Abeacon%20chain(consensus)%20and%20a%20geth%20node(execution)%0A%0A%3Ca%20name%3D%22ts6%22%3E%5B6%5D%3C%2Fa%3E%5BThe%20Beacon%20Chain%20Ethereum%202.0%20explainer%20you%20need%20to%20read%0Afirst%5D(https%3A%2F%2Fethos.dev%2Fbeacon-chain)%3A%20Detailed%20walk%20through%20og%20Ethereum%202.0%0Ablock%20production%20including%20slots%2C%20epochs%2C%20validators%2C%20commitees%20and%20finality.%0A%0A%3Ca%20name%3D%22ts6a%22%3E%5B6%5D%3C%2Fa%3E%5BThe%20Beacon%20Chain%20Ethereum%202.0%20explainer%20you%20need%20to%20read%0Afirst%5D(https%3A%2F%2Fethos.dev%2Fbeacon-chain)%3A%20Detailed%20walk%20through%20og%20Ethereum%202.0%0Ablock%20production%20including%20slots%2C%20epochs%2C%20validators%2C%20commitees%20and%20finality.%0A%0A%3Ca%20name%3D%22ts6b%22%3E%5B6%5D%3C%2Fa%3E%5BThe%20Beacon%20Chain%20Ethereum%202.0%20explainer%20you%20need%20to%20read%0Afirst%5D(https%3A%2F%2Fethos.dev%2Fbeacon-chain)%3A%20Detailed%20walk%20through%20og%20Ethereum%202.0%0Ablock%20production%20including%20slots%2C%20epochs%2C%20validators%2C%20commitees%20and%20finality.%0A%0A%3Ca%20name%3D%22ts7%22%3E%5B7%5D%3C%2Fa%3E%20%5BEtherum%202.0%20Validators%0AOverview%5D(https%3A%2F%2Fbeaconcha.in%2Fvalidators)%3A%20Live%20Monitoring%20of%20Ethreum%202.0%0AValidators%20from%20beachoncha.in%0A%0A%3Ca%20name%3D%22ts8%22%3E%5B8%5D%3C%2Fa%3E%5BBLS%0ASignatures%5D(https%3A%2F%2Feth2book.info%2Fbellatrix%2Fpart2%2Fbuilding_blocks%2Fsignatures%2F)%3A%0ADetailed%20walkthrough%20of%20BLS%20Signatures%20and%20how%20they%20can%20be%20used%20in%20aggregation.%0A%0A%3Ca%20name%3D%22ts9%22%3E%5B8%5D%3C%2Fa%3E%5BAttestation%20Inclusion%0ALifecycle%5D(https%3A%2F%2Fkb.beaconcha.in%2Fattestation%23attestation-inclusion-lifecycle)%3A%0AHigh%20Level%20overview%20of%20the%20attestation%20life%20cycle%20including%20geeration%2C%0Apropogation%2C%20aggregation%20and%20inclusion.Attest%0A%0A%3Ca%20name%3D%22ts10%22%3E%5Bts10%5D%3C%2Fa%3E%20%5BBeacon%20Chain%20Proposal%3A%20Sync%0AComittees%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2FHF1_proposal%23Sync-committees)%3A%0AFor%20each%20period%20(~27%20hours)%2C%201024%20validators%20are%20randomly%20selected%20to%20be%20part%20of%0Athe%20sync%20committee%20during%20that%20period.%20Validators%20in%20the%20sync%20committee%20would%0Apublish%20signatures%20attesting%20to%20the%20current%20head.%20These%20signatures%20would%20be%0Abroadcasted%20as%20part%20of%20a%20LightClientUpdate%20object%20that%20could%20help%20light%20clients%0Afind%20the%20head%2C%20and%20would%20be%20included%20in%20the%20beacon%20chain%20to%20be%20rewarded.%0A%0A%3Ca%20name%3D%22ts11%22%3E%5Bts11%5D%3C%2Fa%3E%20%5BAltair%20Light%20Client%20--%20Sync%0AProtocol%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2FHF1_proposal%23Sync-committees)%3A%0AThis%20document%20suggests%20a%20minimal%20light%20client%20design%20for%20the%20beacon%20chain%20that%0Auses%20sync%20committees.%0A%0A%3Ca%20name%3D%22ts12%22%3E%5Bts12%5D%3C%2Fa%3E%20%5BEthereum%20Builder%20Specifications%3A%20Honest%0AValidator%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fbuilder-specs%2Fblob%2Fmain%2Fspecs%2Fvalidator.mdx)%3A%0Aexplains%20the%20way%20in%20which%20a%20beacon%20chain%20validator%20is%20expected%20to%20use%20the%0ABuilder%20spec%20to%20participate%20in%20an%20external%20builder%20network.%0A%0A%3Ca%20name%3D%22ts13%22%3E%5Bts13%5D%3C%2Fa%3E%20%5BFlashbots%3A%0Amev-boost%5D(https%3A%2F%2Fgithub.com%2Fflashbots%2Fmev-boost)%3A%20open%20source%20middleware%20run%0Aby%20validators%20to%20access%20a%20competitive%20block-building%20market.%0A%0A%3Ca%20name%3D%22ts14%22%3E%5Bts14%5D%3C%2Fa%3E%20%5BA%20note%20on%20Ethereum%202.0%20phase%200%20validator%0Alifecycle%5D(https%3A%2F%2Fnotes.ethereum.org%2F7CFxjwMgQSWOHIxLgJP2Bw%23A-note-on-Ethereum-20-phase-0-validator-lifecycle)%3A%0Adescribes%20the%20concept%20of%20validator%20status%20epochs%20and%20the%20cases%20of%20validator%0Alifecycle%20in%20the%20view%20of%20%E2%80%9Cvalidator%20status%20transition%E2%80%9D%20in%20phase%200.%0A%0A**Additional**%0A%0A%23%23%20Appendices%0A%0A%23%23%23%20Appendix%20A%3A%20Ethreum%202.0%20Technical%20Deep%20Dive%0A%0A%23%23%23%23%20Block%20Production%0A%0A**Process%20Flow**%0A%0A-%20Transactions%20are%20placed%20in%20%5Btxpool%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcore%2Ftxpool)%0A-%20The%20transaction%20pool%20is%20read%20and%20%5Bblocks%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fcore%2Ftypes%2Fblock.go%23L169)%20are%20produced%20by%20the%20%5Bminer%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fminer%2Fminer.go)%0A-%20Blocks%20Headers%20get%20forwarded%20to%20the%20Beacon%20chain%20once%20they%20pass%20%5Bbeacon%20consensus%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fconsensus%2Fbeacon%2Fconsensus.go)%0A-%20The%20Beacon%20chain%20embeds%20the%20EthChain%20Header%20into%20a%20%5BBeaconBlock%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconsensus-types%2Fblocks%2Ftypes.go%23L43)%0A%0A%23%23%23%23%20Consensus%20and%20Finality%0A%0AAttestation%20Process%20Flow%0A%0A-%20Proposing%20Block%0A-%20Signing%20Blocks%0A-%20Aggregated%20Attestation%20generation%0A-%20Block%20Proposal%20and%20Inclusion%20of%20Attestation%0A-%20The%20%5BSignedBeaconBlock%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconsensus-types%2Fblocks%2Ftypes.go%23L72)%20is%20added%20to%20the%20chain%0A%0AAttestations%20Block(LMD%20Ghost%20Vote)%20and%20Epoch%20Checkpoints%20(FFG%20Votes)%0A%0A-%20The%20validators%20in%20the%20committee%20attest%20to%20the%20validity%20of%20the%20block%20(LMD%20Ghost%20Vote)%0A-%20The%20validators%20in%20the%20comittee%20attest%20to%20the%20first%20block%20in%20the%20Epoch%20(FFG%20Vote)%0A%0AFrom%20%5BAttestations%2C%20ethereum.org%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fconsensus-mechanisms%2Fpos%2Fattestations)%0A%0A%3E%20Every%20epoch%20(6.4%20minutes)%20a%20validator%20proposes%20an%20attestation%20to%20the%20network.%20The%20attestation%20is%20for%20a%20specific%20slot%20in%20the%20epoch.%20The%20purpose%20of%20the%20attestation%20is%20to%20vote%20in%20favor%20of%20the%20validator's%20view%20of%20the%20chain%2C%20in%20particular%20the%20most%20recent%20justified%20block%20and%20the%20first%20block%20in%20the%20current%20epoch%20(known%20as%20source%20and%20target%20checkpoints).%20This%20information%20is%20combined%20for%20all%20participating%20validators%2C%20enabling%20the%20network%20to%20reach%20consensus%20about%20the%20state%20of%20the%20blockchain.%0A%3E%0A%3E%20The%20attestation%20contains%20the%20following%20components%3A%0A%3E%0A%3E%20-%20aggregation_bits%3A%20a%20bitlist%20of%20validators%20where%20the%20position%20maps%20to%20the%20validator%20index%20in%20their%20committee%3B%20the%20value%20(0%2F1)%20indicates%20whether%20the%20validator%20signed%20the%20data%20(i.e.%20whether%20they%20are%20active%20and%20agree%20with%20the%20block%20proposer)%0A%3E%20-%20data%3A%20details%20relating%20to%20the%20attestation%2C%20as%20defined%20below%0A%3E%20-%20signature%3A%20a%20BLS%20signature%20that%20aggregates%20the%20signatures%20of%20individual%20validators%0A%3E%0A%3E%20The%20first%20task%20for%20an%20attesting%20validator%20is%20to%20build%20the%20data.%20The%20data%20contains%20the%20following%20information%3A%0A%3E%0A%3E%20-%20slot%3A%20The%20slot%20number%20that%20the%20attestation%20refers%20to%0A%3E%20-%20index%3A%20A%20number%20that%20identifies%20which%20committee%20the%20validator%20belongs%20to%20in%20a%20given%20slot%0A%3E%20-%20beacon_block_root%3A%20Root%20hash%20of%20the%20block%20the%20validator%20sees%20at%20the%20head%20of%20the%20chain%20(the%20result%20of%20applying%20the%20fork-choice%20algorithm)%0A%3E%20-%20source%3A%20Part%20of%20the%20finality%20vote%20indicating%20what%20the%20validators%20see%20as%20the%20most%20recent%20justified%20block%0A%3E%20-%20target%3A%20Part%20of%20the%20finality%20vote%20indicating%20what%20the%20validators%20see%20as%20the%20first%20block%20in%20the%20current%20epoch%0A%3E%0A%3E%20Once%20the%20data%20is%20built%2C%20the%20validator%20can%20flip%20the%20bit%20in%20aggregation_bits%20corresponding%20to%20their%20own%20validator%20index%20from%200%20to%201%20to%20show%20that%20they%20participated.%0A%3E%0A%3E%20Finally%2C%20the%20validator%20signs%20the%20attestation%20and%20broadcasts%20it%20to%20the%20network.%0A%0A**Technical%20Details**%0A%0AFollowing%20is%20an%20overview%20of%20the%20state%20structure%20and%20logic%20for%20generating%20committees%20and%20aggregating%20attestations.%20For%20data%20structures%2C%20please%20see%20%5BBeacon%20State%20Data%20Structures%20from%20Prysm%5D(%23beacon-state-data-structures-from-prysm)%20and%20%5Bweb3signer_types%20from%20prysm%5D(%23web3signer_types-from-prysm).%0A%0A%5BBeaconState%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23BeaconState)%20contains%20both%20a%20%5BReadOnlyBeaconState%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23ReadOnlyBeaconState)%20and%20a%20%5BWriteOnlyBeaconState%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23WriteOnlyBeaconState)%20wich%20contain%20%5BReadOnlyValidators%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23ReadOnlyValidators)%20and%20%5BReadOnlyRandaoMixes%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23ReadOnlyRandaoMixes)%20and%20%5BWriteOnlyValidators%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23WriteOnlyValidators)%20and%20%5BWriteOnlyRandaoMixes%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23WriteOnlyRandaoMixes)%20respectively.%0A%0AAt%20the%20beginning%20of%20each%20epoch%20%5Bfunc%20ProcessRandaoMixesReset%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fepoch%23ProcessRandaoMixesReset)%20processes%20the%20final%20updates%20to%20RANDAO%20mix%20during%20epoch%20processing.%20This%20calls%20%5BRandaoMix%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23RandaoMix)%20which%20returns%20the%20randao%20mix%20(xor'ed%20seed)%20of%20a%20given%20slot.%20It%20is%20used%20to%20shuffle%20validators.%0A%0AFollowing%20are%20sample%20mixes%20generated%20from%20%5Bfunc%20TestRandaoMix_OK%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Frandao_test.go%23L16)%20by%20adding%20the%20statement%20%60fmt.Printf(%22mix%3A%20%25v%5Cn%22%2C%20mix)%60%0A%0A%60%60%60%0Amix%3A%20%5B10%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%5D%0Amix%3A%20%5B40%209%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%5D%0Amix%3A%20%5B159%20134%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%5D%0A%60%60%60%0A%0AThe%20shuffle%20functions%20consist%20of%0A%0A-%20%5Bfunc%20ShuffleList%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ShuffleList)%3A%20returns%20list%20of%20shuffled%20indexes%20in%20a%20pseudorandom%20permutation%20%60p%60%20of%20%600...list_size%20-%201%60%20with%20%E2%80%9Cseed%E2%80%9C%20as%20entropy.%20We%20utilize%20'swap%20or%20not'%20shuffling%20in%20this%20implementation%3B%20we%20are%20allocating%20the%20memory%20with%20the%20seed%20that%20stays%20constant%20between%20iterations%20instead%20of%20reallocating%20it%20each%20iteration%20as%20in%20the%20spec.%20This%20implementation%20is%20based%20on%20the%20original%20implementation%20from%20protolambda%2C%20https%3A%2F%2Fgithub.com%2Fprotolambda%2Feth2-shuffle%0A%0A%20%20Following%20is%20an%20example%20of%20a%20shuffled%20list%20generated%20from%20%5BTestShuffleList_OK%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fshuffle_test.go%23L25)%0A%0A%20%20%60%60%60%0A%20%20list1%3A%20%5B0%201%202%203%204%205%206%207%208%209%5D%0A%20%20seed1%3A%20%5B1%20128%2012%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%5D%0A%20%20shuffledList1%3A%20%5B0%207%208%206%203%209%204%205%202%201%5D%0A%20%20%60%60%60%0A%0A-%20%5Bfunc%20ShuffleIndex%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ShuffledIndex)%3A%20returns%20%60p(index)%60%20in%20a%20pseudorandom%20permutation%20%60p%60%20of%20%600...list_size%20-%201%60%20with%20%E2%80%9Cseed%E2%80%9C%20as%20entropy.%20We%20utilize%20'swap%20or%20not'%20shuffling%20in%20this%20implementation%3B%20we%20are%20allocating%20the%20memory%20with%20the%20seed%20that%20stays%20constant%20between%20iterations%20instead%20of%20reallocating%20it%20each%20iteration%20as%20in%20the%20spec.%20This%20implementation%20is%20based%20on%20the%20original%20implementation%20from%20protolambda%2C%20https%3A%2F%2Fgithub.com%2Fprotolambda%2Feth2-shuffle%0A%0A-%20%5Bfunc%20ShuffleIndices%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ShuffledIndices)%3A%20ShuffledIndices%20uses%20input%20beacon%20state%20and%20returns%20the%20shuffled%20indices%20of%20the%20input%20epoch%2C%20the%20shuffled%20indices%20then%20can%20be%20used%20to%20break%20up%20into%20committees.%0A%0ACommittes%20are%20formed%20using%20functions%20from%20%5Bbeacon_comittee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fbeacon_committee.go)%0A%0A-%20%5Bfunc%20BeaconComittee%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23BeaconCommittee)%3A%20returns%20the%20beacon%20committee%20of%20a%20given%20slot%20and%20committee%20index.%20The%20validator%20indices%20and%20seed%20are%20provided%20as%20an%20argument%20rather%20than%20an%20imported%20implementation%20from%20the%20spec%20definition.%20Having%20them%20as%20an%20argument%20allows%20for%20cheaper%20computation%20run%20time.%20(This%20is%20an%20optomized%20version%20of%20%5Bfunc%20BeaconComitteFromState%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23BeaconCommitteeFromState))%0A%0A%20%20Following%20is%20an%20example%20of%20a%20%60beaconComittee%60%20generated%20by%20adding%20the%20following%20lines%20to%20%5BTestBeaconCommitteeFromState_UpdateCacheForPreviousEpoch%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fbeacon_committee_test.go%23L574)%3A%0A%0A%20%20%60%60%60%0A%20%20var%20beaconCommittee%20%5B%5Dtypes.ValidatorIndex%0A%20%20beaconCommittee%2C%20err%20%3D%20BeaconCommitteeFromState(context.Background()%2C%20state%2C%201%20%2F_previous%20epoch_%2F%2C%200)%0A%20%20fmt.Printf(%22beaconComittee%3A%20%25%2Bv%5Cn%22%2C%20beaconCommittee)%0A%20%20%60%60%60%0A%0A%20%20Result%0A%0A%20%20%60%60%60%0A%20%20beaconComittee%3A%20%5B160%20338%20313%20307%20320%20324%2045%20469%20196%20303%2023%2014%2097%20312%20126%20488%5D%0A%20%20%60%60%60%0A%0A-%20%5Bfunc%20CommitteeAssignments%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23CommitteeAssignments)%3A%20is%20a%20map%20of%20validator%20indices%20pointing%20to%20the%20appropriate%20committee%20assignment%20for%20the%20given%20epoch.%0A%20%201.%20Determine%20the%20proposer%20validator%20index%20for%20each%20slot.%0A%20%202.%20Compute%20all%20committees.%0A%20%203.%20Determine%20the%20attesting%20slot%20for%20each%20committee.%0A%20%204.%20Construct%20a%20map%20of%20validator%20indices%20pointing%20to%20the%20respective%20committees.%0A%0A%20%20Following%20is%20an%20example%20of%20%60commitees%60%20generated%20by%20adding%20the%20following%20lines%20to%20%5BTestComputeCommittee_WithoutCache%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fbeacon_committee_test.go%23L23)%0A%0Acommittees%2C%20err%20%3A%3D%20computeCommittee(indices%2C%20seed%2C%200%2C%201%20%2F_%20Total%20committee_%2F)%0A%0A%60%60%60%0A%0Afmt.Printf(%22committees%3A%20%25%2Bv%5Cn%22%2C%20committees)%0A%60%60%60%0A%0A%20%20%20%20%3Cdetails%3E%0A%20%20%20%20%3Csummary%3Eresult%3C%2Fsummary%3E%0A%0A%20%20%20%20%60%60%60%0A%20%20%20%20committees%3A%20%5B799%2045%20913%201%20631%20654%20417%20244%201270%20918%20798%20719%20426%20164%201171%20863%20848%20522%20828%20359%20713%20972%20284%20680%20203%20832%20453%2075%20979%20468%20667%20540%20180%20729%201137%20156%20624%20434%20655%20974%20108%20321%20641%20750%201150%20356%20933%20870%20650%20984%20869%2095%20975%20510%20563%201002%20821%20819%20599%20597%20593%20635%20982%20915%20693%20910%201030%20845%20461%20887%20936%20354%201075%201253%201238%201011%20395%20773%20670%2054%20389%20765%201183%20912%20866%201230%201279%20521%20898%20598%201038%20814%20377%201209%201226%2019%201087%20775%20820%20401%20640%201028%20673%20174%20493%20857%20931%20288%20475%201115%20139%20429%20353%20295%20412%201136%201166%201191%20496%20677%201039%20629%20826%20528%20769%20289%20856%20147%201227%20243%20731%20297%20924%2089%20644%20557%201027%201239%201109%20447%20323%20716%20764%20669%20903%20612%20350%201046%20392%20768%201257%201083%20216%20294%20606%20971%20103%20902%201015%20801%20674%201099%2049%20484%20995%201012%20146%20879%201156%20548%201081%20844%20873%201246%201107%20115%20121%201018%20387%20751%20941%201259%20183%20916%20937%2071%20163%20287%20706%20421%20304%20247%20310%20113%201032%20776%20502%201276%20274%201214%20418%20271%20307%201224%20332%201222%20240%20657%201060%20479%20874%2014%201147%20627%20122%20448%201082%20458%20371%20214%2064%20487%201263%2034%20172%20497%20880%20555%201091%20839%20507%20530%201170%20498%20999%20727%20950%20317%201266%20423%20134%20364%201092%201128%20155%20362%20419%201219%201019%20379%201163%20483%20917%20318%20804%20336%20985%20463%20584%20210%201255%2026%20583%20850%20365%20723%20433%201073%201141%20735%20922%201035%20893%20774%201114%20256%20358%201044%20997%20546%20679%201024%20699%201096%20663%201066%20499%20366%201256%20883%20566%2017%20717%20393%20422%20622%20795%201181%20554%201212%20736%201064%20106%201050%2072%201153%201210%20198%20943%20818%20518%20309%20101%20471%200%2038%20688%20107%20718%201077%201021%20648%201236%20891%20969%2039%20481%201159%20660%20686%20450%20990%201045%201213%20756%20900%20849%20355%20119%201135%20623%20878%2044%20596%20262%20553%201013%20290%20269%20691%2018%20207%20454%20620%20221%20983%20852%20430%20843%201272%20209%20526%201100%20865%20402%20437%20278%20976%201185%20784%20128%20906%20536%20608%20683%201205%20574%201251%20562%20344%20930%20440%20758%20472%20239%20369%2073%201235%20478%20724%20373%20399%201142%20375%20490%20966%201203%201093%20403%2074%2065%201247%20579%20145%201090%20143%2080%20190%20187%20449%201160%20194%20959%20533%20671%20442%20136%20158%20665%2079%20253%20226%201076%20572%201130%20227%20909%20940%20275%2043%20342%20182%20126%20967%20700%20267%201070%20171%201000%20658%20876%201120%20424%20141%201164%20328%201277%201220%201245%20314%20335%20886%20249%20638%20836%20104%20527%201057%201179%201111%20551%20334%20749%20754%20237%201232%20495%20549%20672%20250%20547%201132%20427%20346%20935%20515%20452%20184%20739%2077%20689%20744%20831%20281%2076%2048%202%20327%20542%20351%2047%201079%20661%20585%20746%20709%20260%20486%201242%20932%20303%20435%201061%20282%201217%20390%20996%20457%20470%2040%20592%20785%201065%2024%20160%20991%20920%20858%20978%20616%20934%20586%20601%20939%20730%20501%20859%20482%201207%20386%201037%2078%201184%20947%20861%20643%20231%2022%20397%201126%201215%20265%201145%20864%20942%20809%20398%20715%20890%20385%20559%20232%20777%20185%20410%20131%20112%20192%20632%201124%20302%201025%20904%201047%2094%201175%20516%20474%201122%20568%20617%20894%20733%201074%201252%20264%20263%20851%20124%201258%201023%201121%20283%20901%201225%20923%20464%20193%201140%20810%20604%201108%20740%201157%20368%20853%20199%20270%208%20752%20529%20973%2090%20246%20896%2011%20960%206%20734%20285%20299%201042%20152%20732%20965%20469%20161%20609%201234%20467%201084%20780%201069%20466%20816%20588%2050%201194%201127%205%201010%2031%20712%20766%201049%20813%20157%2027%20259%201055%20343%20793%201005%20127%20558%201036%20794%201006%201178%20767%201168%20537%20254%201218%20590%20361%20531%20186%20567%20605%204%20255%20618%2037%201216%201134%20337%20223%20811%20962%2067%20587%201001%201187%20842%20455%201228%201248%201056%20300%20613%20396%201152%20830%20329%2061%201155%20439%201188%20807%201182%20268%20662%201101%201026%2082%20847%20755%20757%20148%201244%20778%20664%201059%201197%20301%201117%201274%20743%20840%20316%20123%20634%20272%201237%20326%201041%201068%20372%201003%201190%201243%20630%20298%20215%20166%20445%20513%20838%20363%201085%20854%20639%20503%20129%201029%201196%20219%20325%201161%2070%20165%20564%201206%20111%201078%201233%20970%20444%2012%20400%20211%20742%20191%2041%20760%20506%20196%20988%201173%20125%20177%20420%20805%20957%20862%201088%201144%201267%201265%20994%20380%201250%20505%20235%201089%20451%20120%20762%20867%201167%20117%20675%2016%20711%20575%201009%2085%20577%20550%201116%20895%20438%20822%20138%20308%2013%20349%20233%20197%20404%20142%201123%20589%20614%20251%20411%201007%20228%20151%20911%20105%201162%20738%20140%20892%201110%20607%20511%20802%20580%20459%20293%20619%20927%20488%20378%2060%201020%20236%20212%20279%20980%20322%201052%2029%20720%20173%20812%201043%20882%20797%20159%20926%201261%2058%20726%20492%20494%20242%203%20725%20800%20524%201062%201195%20504%201016%20808%20168%20436%20682%20383%20952%20615%20179%2057%20921%20370%20394%20945%20489%201254%20154%20938%20789%201229%20339%20684%20806%20525%20539%20787%201268%20698%201008%20621%20225%20408%2032%20964%20357%20188%20477%20114%20581%20144%20745%20701%20110%20391%20460%20381%20181%201231%2063%20206%201264%20480%20538%20561%20591%201113%201202%20825%20348%20704%2033%20625%20783%20681%201063%201080%201240%20217%2028%201176%20928%20582%20914%20229%20252%201102%20552%20280%20728%20594%201017%2035%20406%20137%20175%20162%201118%20176%2066%20296%20837%2056%20508%20786%20602%20102%20443%201095%20868%20696%20899%20692%201086%201223%20907%20834%201241%201172%20118%201221%20855%20266%20556%201098%20384%20948%2055%20340%20178%201249%20150%20781%20642%20514%20771%20291%20877%20519%20100%20919%20224%20376%201125%20987%20645%201169%20305%201133%20319%20201%20611%20956%2042%20189%20238%20908%20703%2088%20981%20954%201139%201174%20881%20576%201105%201186%201201%20414%20545%20741%20407%20313%2023%20653%201051%20509%20872%20195%20649%201208%201165%201014%20595%20222%20697%201112%201033%20234%20748%20823%20570%20476%201198%201180%201154%20248%20257%20905%20306%201269%20676%20116%20135%2051%20208%2068%20202%20646%201177%20312%2086%20388%201200%20833%20779%20791%20153%20347%20230%201158%20565%20543%20261%20986%20875%201193%20415%20889%20273%2020%20258%20600%20860%20573%20636%20149%20759%20374%201072%201053%20610%20286%20656%201119%201260%20500%20637%20702%2097%20951%20628%20170%20491%20944%20747%2099%20714%201278%20721%2069%20571%2083%20520%20473%20569%20989%2098%20245%20929%201106%20961%20431%20955%201004%20884%20998%20446%20544%20949%20220%20535%201031%20311%2093%201262%20871%20763%201273%20485%20647%20352%20803%20205%20652%201034%20687%20958%20888%20753%20792%20456%20782%2059%20462%20441%20796%20708%201192%20360%2096%201148%20678%20428%20277%201189%201071%20633%201151%201103%2025%20993%20835%20241%201211%20320%20968%20788%20338%20925%207%209%20668%2084%20330%20204%20690%20133%20405%201094%201138%201097%201275%20761%201104%2010%20897%20315%20517%20694%20416%20685%20560%2062%20772%20382%20977%2087%20651%20532%20659%20827%201204%20737%20841%20331%20213%201040%20132%20846%20963%20695%20130%20292%2091%201022%20324%2081%20992%201199%20770%20790%20465%20523%20425%201146%2021%201054%20815%20345%20829%20666%20603%201067%20109%20167%20722%20432%201149%20953%20512%20413%20707%201058%20885%20218%20626%20341%20409%20824%2030%20705%201048%20578%20367%20710%20946%2036%201131%2046%20200%20534%2015%2092%201129%20276%20817%20169%2053%2052%20541%20333%201143%201271%5D%0A%20%20%20%20%60%60%60%0A%0A%20%20%20%20%3C%2Fdetails%3E%0A%0AAttestations%20are%20managed%20using%20functions%20from%20%5Battestation.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fattestation.go)%0A%0A-%20%5Bfunc%20ValidateNilAttestation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ValidateNilAttestation)%3A%20checks%20if%20any%20composite%20field%20of%20input%20attestation%20is%20nil.%20Access%20to%20these%20nil%20fields%20will%20result%20in%20run%20time%20panic%2C%20it%20is%20recommended%20to%20run%20these%20checks%20as%20first%20line%20of%20defense.%0A-%20%5Bfunc%20ValidateSlotTargetEpoch%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ValidateSlotTargetEpoch)%3A%20ValidateSlotTargetEpoch%20checks%20if%20attestation%20data's%20epoch%20matches%20target%20checkpoint's%20epoch.%20It%20is%20recommended%20to%20run%20%60ValidateNilAttestation%60%20first%20to%20ensure%20%60data.Target%60%20can't%20be%20nil.%0A-%20%5Bfunc%20IsAggregator%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23IsAggregator)%3A%20IsAggregator%20returns%20true%20if%20the%20signature%20is%20from%20the%20input%20validator.%20The%20committee%20count%20is%20provided%20as%20an%20argument%20rather%20than%20imported%20implementation%20from%20spec.%20Having%20committee%20count%20as%20an%20argument%20allows%20cheaper%20computation%20at%20run%20time.%0A-%20%5Bfunc%20AggregateSignature%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23AggregateSignature)%3A%20returns%20the%20aggregated%20signature%20of%20the%20input%20attestations.%0A%0A%20%20Spec%20pseudocode%20definition%3A%0A%0A%20%20%60%60%60%0A%20%20def%20get_aggregate_signature(attestations%3A%20Sequence%5BAttestation%5D)%20-%3E%20BLSSignature%3A%0A%20%20signatures%20%3D%20%5Battestation.signature%20for%20attestation%20in%20attestations%5D%0A%20%20return%20bls.Aggregate(signatures)%0A%20%20%60%60%60%0A%0A%20%20Following%20is%20an%20example%20aggregrated%20signature%20by%20adding%20the%20following%20lines%20to%20%5BTestAttestation_AggregateSignature%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fattestation_test.go%23L48)%0A%0A%20%20%60%60%60%0A%20%20aggSig%2C%20err%20%3A%3D%20helpers.AggregateSignature(atts)%0A%20%20fmt.Printf(%22aggSig%3A%20%25%2Bv%5Cn%22%2C%20aggSig)%0A%20%20%60%60%60%0A%0A%20%20Result%0A%0A%20%20%60%60%60%0A%20%20%20%20%20%20aggSig%3A%20%26%7Bs%3A0xc0003fe000%7D%0A%20%20%60%60%60%0A%0A-%20%5Bfunc%20IsAggregated%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23IsAggregated)%3A%20IsAggregated%20returns%20true%20if%20the%20attestation%20is%20an%20aggregated%20attestation%2C%20false%20otherwise.%0A%0A-%20%5Bfunc%20ComputeSubnetForAttestation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ComputeSubnetForAttestation)%3A%20returns%20the%20subnet%20for%20which%20the%20provided%20attestation%20will%20be%20broadcasted%20to.This%20differs%20from%20the%20spec%20definition%20by%20instead%20passing%20in%20the%20active%20validators%20indices%20in%20the%20attestation's%20given%20epoch.%0A%0A%60%60%60%0A%20%20Spec%20pseudocode%20definition%3A%0A%0Adef%20compute_subnet_for_attestation(committees_per_slot%3A%20uint64%2C%20slot%3A%20Slot%2C%20committee_index%3A%20CommitteeIndex)%20-%3E%20uint64%3A%0A%0A%22%22%22%0ACompute%20the%20correct%20subnet%20for%20an%20attestation%20for%20Phase%200.%0ANote%2C%20this%20mimics%20expected%20future%20behavior%20where%20attestations%20will%20be%20mapped%20to%20their%20shard%20subnet.%0A%22%22%22%0Aslots_since_epoch_start%20%3D%20uint64(slot%20%25%20SLOTS_PER_EPOCH)%0Acommittees_since_epoch_start%20%3D%20committees_per_slot%20%5C*%20slots_since_epoch_start%0A%0Areturn%20uint64((committees_since_epoch_start%20%2B%20committee_index)%20%25%20ATTESTATION_SUBNET_COUNT)%0A%0A%60%60%60%0A%0A-%20%5Bfunc%20ComputeSubnetFromCommitteeAndSlot%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ComputeSubnetFromCommitteeAndSlot)%3A%20is%20a%20flattened%20version%20of%20ComputeSubnetForAttestation%20where%20we%20only%20pass%20in%20the%20relevant%20fields%20from%20the%20attestation%20as%20function%20arguments.%0A%0ASpec%20pseudocode%20definition%3A%0A%0A%60%60%60%0A%0Adef%20compute_subnet_for_attestation(committees_per_slot%3A%20uint64%2C%20slot%3A%20Slot%2C%20committee_index%3A%20CommitteeIndex)%20-%3E%20uint64%3A%0A%0A%22%22%22%0ACompute%20the%20correct%20subnet%20for%20an%20attestation%20for%20Phase%200.%0ANote%2C%20this%20mimics%20expected%20future%20behavior%20where%20attestations%20will%20be%20mapped%20to%20their%20shard%20subnet.%0A%22%22%22%0Aslots_since_epoch_start%20%3D%20uint64(slot%20%25%20SLOTS_PER_EPOCH)%0Acommittees_since_epoch_start%20%3D%20committees_per_slot%20%5C*%20slots_since_epoch_start%0A%0Areturn%20uint64((committees_since_epoch_start%20%2B%20committee_index)%20%25%20ATTESTATION_SUBNET_COUNT)%0A%0A%60%60%60%0A%0A-%20%5Bfunc%20ValidateAttestationTime%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ValidateAttestationTime)%3A%20Validates%20that%20the%20incoming%20attestation%20is%20in%20the%20desired%20time%20range.%0A%20%20An%20attestation%20is%20valid%20only%20if%20received%20within%20the%20last%20ATTESTATION_PROPAGATION_SLOT_RANGE%20slots.%0A%0AExample%3A%0A%0A%60%60%60%0A%0AATTESTATION_PROPAGATION_SLOT_RANGE%20%3D%205%0AclockDisparity%20%3D%2024%20seconds%0Acurrent_slot%20%3D%20100%0Ainvalid_attestation_slot%20%3D%2092%0Ainvalid_attestation_slot%20%3D%20103%0Avalid_attestation_slot%20%3D%2098%0Avalid_attestation_slot%20%3D%20101%0A%0A%60%60%60%0A%0AIn%20the%20attestation%20must%20be%20within%20the%20range%20of%2095%20to%20102%20in%20the%20example%20above.%0A%0A-%20%5Bfunc%20VerifyCheckpointEpoch%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23VerifyCheckpointEpoch)%3A%20VerifyCheckpointEpoch%20is%20within%20current%20epoch%20and%20previous%20epoch%20with%20respect%20to%20current%20time.%20Returns%20true%20if%20it's%20within%2C%20false%20if%20it's%20not.%0A%0A_Note%3A%20Sample%20command%20for%20running%20tests%20in%20Prysm%3A%20%60bazel%20test%20%2F%2Fbeacon-chain%2Fcore%2Fhelpers%3Ago_default_test%20--test_output%3Dstreamed%20--test_filter%3DTestAttestation_AggregateSignature%60._%0A%0A**Consensus%20Committee%20Selection**%0A%0A-%20%5Bfunc%20ProcessRandoa%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fblocks%23ProcessRandao)%3A%20checks%20the%20block%20proposer's%20randao%20commitment%20and%20generates%20a%20new%20randao%20mix%20to%20update%20in%20the%20beacon%20state's%20latest%20randao%20mixes%20slice.%0A-%20%5Bfunc%20randaoSigningData%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fblocks%2Fsignature.go%23L157)%3A%20retrieves%20the%20randao%20related%20signing%20data%20from%20the%20state.%0A%20%20-%20%5Bfunc%20(b%20%5C*BeaconState)%20PubkeyAtIndex(idx%20types.ValidatorIndex)%20%5Bfieldparams.BLSPubkeyLength%5Dbyte%20%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fstate%2Fstate-native%2Fgetters_validator.go%23L135)%3A%20returns%20the%20pubkey%20at%20the%20given%20validator%20index.%0A%0A%23%23%23%20Appendix%20B%3A%20Additional%20Light%20Client%20Support%20Documentation%0A%0A%23%23%23%23%20Key%20Concepts%0A%0A-%20Syncing%20to%20Current%20state%0A%0A-%20Advancing%20Blocks%0A-%20Communication%20can%20be%20either%20via%0A-%20RPC%20to%20the%20%5BEth%20BEACON%20Node%20API%5D(https%3A%2F%2Fethereum.github.io%2Fbeacon-APIs%2F%23%2FBeacon)%0A-%20%5BNetworking%20Gossip%20Topics%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.md%23global-topics)%0A%20%20-%20%5Blight_client_finality_update%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.md%23light_client_finality_update)%3A%20This%20topic%20is%20used%20to%20propagate%20the%20latest%20%60LightClientFinalityUpdate%60%20to%20light%20clients%2C%20allowing%20them%20to%20keep%20track%20of%20the%20latest%20%60finalized_header%60.%0A%20%20-%20%5Blight_client_optimistic_update%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.md%23light_client_optimistic_update)%3A%20This%20topic%20is%20used%20to%20propagate%20the%20latest%60LightClientOptimisticUpdate%60%20to%20light%20clients%2C%20allowing%20them%20to%20keep%20track%20of%20the%20latest%20%60optimistic_header%60.%0A%0A_Note%3A%20Time%20on%20Ethereum%202.0%20Proof%20of%20Stake%20is%20divided%20into%20slots%20and%20epochs.%20One%20slot%20is%2012%20seconds.%20One%20epoch%20is%206.4%20minutes%2C%20consisting%20of%2032%20slots.%20One%20block%20can%20be%20created%20for%20each%20slot._%0A%0A%23%23%23%23%20Altair%20Light%20Client%20--%20Sync%20Protocol%0A%0A-%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%3A%20The%20beacon%20chain%20is%20designed%20to%20be%20light%20client%20friendly%20for%20constrained%20environments%20to%20access%20Ethereum%20with%20reasonable%20safety%20and%20liveness.%0A%0ASuch%20environments%20include%20resource-constrained%20devices%20(e.g.%20phones%20for%20trust-minimized%20wallets)and%20metered%20VMs%20(e.g.%20blockchain%20VMs%20for%20cross-chain%20bridges).%0A%0AThis%20document%20suggests%20a%20minimal%20light%20client%20design%20for%20the%20beacon%20chain%20thatuses%20sync%20committees%20introduced%20in%20%5Bthis%20beacon%20chain%20extension%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fbeacon-chain.mdx).%0A%0AAdditional%20documents%20describe%20how%20the%20light%20client%20sync%20protocol%20can%20be%20used%3A%0A%0A-%20%5BFull%20node%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Ffull-node.mdx)%0A-%20%5BLight%20client%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%0A-%20%5BNetworking%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.mdx)%0A%0A-%20%5BLight%20client%20sync%20process%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%3A%20explains%20how%20light%20clients%20MAY%20obtain%20light%20client%20data%20to%20sync%20with%20the%20network.%0A%0A1.%20The%20light%20client%20MUST%20be%20configured%20out-of-band%20with%20a%20spec%2Fpreset%20(including%20fork%20schedule)%2C%20with%20%60genesis_state%60%20(including%20%60genesis_time%60%20and%20%60genesis_validators_root%60)%2C%20and%20with%20a%20trusted%20block%20root.%20The%20trusted%20block%20SHOULD%20be%20within%20the%20weak%20subjectivity%20period%2C%20and%20its%20root%20SHOULD%20be%20from%20a%20finalized%20%60Checkpoint%60.%0A2.%20The%20local%20clock%20is%20initialized%20based%20on%20the%20configured%20%60genesis_time%60%2C%20and%20the%20current%20fork%20digest%20is%20determined%20to%20browse%20for%20and%20connect%20to%20relevant%20light%20client%20data%20providers.%0A3.%20The%20light%20client%20fetches%20a%20%5B%60LightClientBootstrap%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%20object%20for%20the%20configured%20trusted%20block%20root.%20The%20%60bootstrap%60%20object%20is%20passed%20to%20%5B%60initialize_light_client_store%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23initialize_light_client_store)%20to%20obtain%20a%20local%20%5B%60LightClientStore%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientstore).%0A4.%20The%20light%20client%20tracks%20the%20sync%20committee%20periods%20%60finalized_period%60%20from%20%60store.finalized_header.slot%60%2C%20%60optimistic_period%60%20from%20%60store.optimistic_header.slot%60%2C%20and%20%60current_period%60%20from%20%60current_slot%60%20based%20on%20the%20local%20clock.%0A%20%20%201.%20When%20%60finalized_period%20%3D%3D%20optimistic_period%60%20and%20%5B%60is_next_sync_committee_known%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23is_next_sync_committee_known)%20indicates%20%60False%60%2C%20the%20light%20client%20fetches%20a%20%5B%60LightClientUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientupdate)%20for%20%60finalized_period%60.%20If%20%60finalized_period%20%3D%3D%20current_period%60%2C%20this%20fetch%20SHOULD%20be%20scheduled%20at%20a%20random%20time%20before%20%60current_period%60%20advances.%0A%20%20%202.%20When%20%60finalized_period%20%2B%201%20%3C%20current_period%60%2C%20the%20light%20client%20fetches%20a%20%60LightClientUpdate%60%20for%20each%20sync%20committee%20period%20in%20range%20%60%5Bfinalized_period%20%2B%201%2C%20current_period)%60%20(current%20period%20excluded)%0A%20%20%203.%20When%20%60finalized_period%20%2B%201%20%3E%3D%20current_period%60%2C%20the%20light%20client%20keeps%20observing%20%5B%60LightClientFinalityUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientfinalityupdate)%20and%20%5B%60LightClientOptimisticUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientoptimisticupdate).%20Received%20objects%20are%20passed%20to%20%5B%60process_light_client_finality_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_finality_update)%20and%20%5B%60process_light_client_optimistic_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_optimistic_update).%20This%20ensures%20that%20%60finalized_header%60%20and%20%60optimistic_header%60%20reflect%20the%20latest%20blocks.%0A5.%20%5B%60process_light_client_store_force_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_store_force_update)%20MAY%20be%20called%20based%20on%20use%20case%20dependent%20heuristics%20if%20light%20client%20sync%20appears%20stuck.%20If%20available%2C%20falling%20back%20to%20an%20alternative%20syncing%20mechanism%20to%20cover%20the%20affected%20sync%20committee%20period%20is%20preferred.%0A%0A%23%23%23%23%20The%20Portal%20Network%0A%0A-%20%5BThe%20Portal%20Network%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs)%3A%20The%20Portal%20Network%20is%20an%20in%20progess%20effort%20to%20enable%20lightweight%20protocol%20access%20by%20resource%20constrained%20devices.%20The%20term%20_%22portal%22_%20is%20used%20to%20indicate%20that%20these%20networks%20provide%20a%20_view_%20into%20the%20protocol%20but%20are%20not%20critical%20to%20the%20operation%20of%20the%20core%20Ethereum%20protocol.%0A%0AThe%20Portal%20Network%20is%20comprised%20of%20multiple%20peer-to-peer%20networks%20which%20together%20provide%20the%20data%20and%20functionality%20necessary%20to%20expose%20the%20standard%20%5BJSON-RPC%20API%5D(https%3A%2F%2Feth.wiki%2Fjson-rpc%2FAPI).%20These%20networks%20are%20specially%20designed%20to%20ensure%20that%20clients%20participating%20in%20these%20networks%20can%20do%20so%20with%20minimal%20expenditure%20of%20networking%20bandwidth%2C%20CPU%2C%20RAM%2C%20and%20HDD%20resources.%0A%0AThe%20term%20'Portal%20Client'%20describes%20a%20piece%20of%20software%20which%20participates%20in%20these%20networks.%20Portal%20Clients%20typically%20expose%20the%20standard%20JSON-RPC%20API.%0A%0A-%20Motivation%3A%20The%20Portal%20Network%20is%20focused%20on%20delivering%20reliable%2C%20lightweight%2C%20and%20decentralized%20access%20to%20the%20Ethereum%20protocol.%0A%0A-%20Prior%20Work%20on%20the%20%22Light%20Ethereum%20Subprotocol%22%20(LES)%3A%20The%20term%20%22light%20client%22%20has%20historically%20refered%20to%20a%20client%20of%20the%20existing%20%5BDevP2P%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Frlpx.mdx)%20based%20%5BLES%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Fcaps%2Fles.mdx)%20network.%20This%20network%20is%20designed%20using%20a%20client%2Fserver%20architecture.%20The%20LES%20network%20has%20a%20total%20capacity%20dictated%20by%20the%20number%20of%20%22servers%22%20on%20the%20network.%20In%20order%20for%20this%20network%20to%20scale%2C%20the%20%22server%22%20capacity%20has%20to%20increase.%20This%20also%20means%20that%20at%20any%20point%20in%20time%20the%20network%20has%20some%20total%20capacity%20which%20if%20exceeded%20will%20cause%20service%20degradation%20across%20the%20network.%20Because%20of%20this%20the%20LES%20network%20is%20unreliable%20when%20operating%20near%20capacity.%0A%0A-%20Block%20Relay%0A%0A-%20%5BBeacon%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23dht-overview)%3A%20A%20client%20has%20a%20trusted%20beacon%20state%20root%2C%20and%20it%20wants%20to%20access%20some%20parts%20of%20the%20state.%20Each%20of%20the%20access%20request%20corresponds%20to%20some%20leave%20nodes%20of%20the%20beacon%20state.%20The%20request%20is%20a%20content%20lookup%20on%20a%20DHT.%20The%20response%20is%20a%20Merkle%20proof.%0A%0A%20%20%20%20%20%20A%20Distributed%20Hash%20Table%20(DHT)%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%0A%0A-%20%5BSyncing%20Block%20Headers%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx)%3A%20A%20beacon%20chain%20client%20could%20sync%20committee%20to%20perform%20state%20updates.%20The%20data%20object%20LightClientSkipSyncUpdate%20allows%20a%20client%20to%20quickly%20sync%20to%20a%20recent%20header%20with%20the%20appropriate%20sync%20committee.%20Once%20the%20client%20establishes%20a%20recent%20header%2C%20it%20could%20sync%20to%20other%20headers%20by%20processing%20LightClientUpdates.%20These%20two%20data%20types%20allow%20a%20client%20to%20stay%20up-to-date%20with%20the%20beacon%20chain.%0A%20%20-%20%5BSync%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fskip-sync-network.mdx)%3A%20A%20client%20uses%20SkipSyncUpdate%20to%20skip%20sync%20from%20a%20known%20header%20to%20a%20recent%20header.%20A%20client%20with%20a%20trusted%20but%20outdated%20header%20cannot%20use%20the%20messages%20in%20the%20gossip%20channel%20bc-light-client-update%20to%20update.%20The%20client's%20sync-committee%20in%20the%20stored%20snapshot%20is%20too%20old%20and%20not%20connected%20to%20any%20update%20messages.%20The%20client%20look%20for%20the%20appropriate%20SkipSyncUpdate%20to%20skip%20sync%20its%20header.%0A%20%20-%20%5BAdvance%20Block%20Headers%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx)%3A%20A%20beacon%20chain%20client%20could%20sync%20committee%20to%20perform%20%5Bstate%20updates%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fsync-protocol.mdx).%20The%20data%20object%20%5BLightClientSkipSyncUpdate%5D(skip-sync-network)%20allows%20a%20client%20to%20quickly%20sync%20to%20a%20recent%20header%20with%20the%20appropriate%20sync%20committee.%20Once%20the%20client%20establishes%20a%20recent%20header%2C%20it%20could%20sync%20to%20other%20headers%20by%20processing%20%5BLightClientUpdates%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fsync-protocol.md%23lightclientupdate).%20These%20two%20data%20types%20allow%20a%20client%20to%20stay%20up-to-date%20with%20the%20beacon%20chain.%0A%0A%20%20%20%20%20%20%20%20%20%20These%20two%20data%20types%20are%20placed%20into%20separate%20sub-networks.%20A%20light%20client%20make%20find-content%20requests%20on%20%60skip-sync-network%60%20at%20start%20of%20the%20sync%20to%20get%20a%20header%20with%20the%20same%20%60SyncCommittee%60%20object%20as%20in%20the%20current%20sync%20period.%20The%20client%20uses%20messages%20in%20the%20gossip%20topic%20%60bc-light-client-update%60%20to%20advance%20its%20header.%0A%0A%20%20%20%20%20%20%20%20%20%20The%20gossip%20topics%20described%20in%20this%20document%20is%20part%20of%20a%20%5Bproposal%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fa-beacon-chain-light-client-proposal%2F11064)%20for%20a%20beacon%20chain%20light%20client.%0A%0A%23%23%23%23%20Transaction%20Proofs%0A%0A-%20%5BRetrieving%20Beacon%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.mdx)%3A%20A%20client%20has%20a%20trusted%20beacon%20state%20root%2C%20and%20it%20wants%20to%20access%20some%20parts%20of%20the%20state.%20Each%20of%20the%20access%20request%20corresponds%20to%20some%20leave%20nodes%20of%20the%20beacon%20state.%20The%20request%20is%20a%20content%20lookup%20on%20a%20DHT.%20The%20response%20is%20a%20Merkle%20proof.%0A%0AA%20Distributed%20Hash%20Table%20(DHT)%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%20key.%20A%20portal-network%20DHT%20is%20different%20than%20a%20traditional%20one%20in%20that%20each%20participant%20could%20selectively%20limit%20its%20workload%20by%20choosing%20a%20small%20interest%20radius%20r.%20A%20participants%20only%20process%20messages%20that%20are%20within%20its%20chosen%20radius%20boundary.%0A%0A-%20%5BWire%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23wire-protocol)%3A%20For%20a%20subprotocol%2C%20we%20need%20to%20further%20define%20the%20following%20to%20be%20able%20to%20instantiate%20the%20wire%20format%20of%20each%20message%20type.%201.%20%60content_key%60%202.%20%60content_id%60%203.%20%60payload%60%0A%0A%20%20%20%20%20%20The%20content%20of%20the%20message%20is%20a%20Merkle%20proof%20contains%20multiple%20leave%20nodes%20for%20a%20%5BBeaconState%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fbeacon-chain.md%23beaconstate).%0A%0A%20%20%20%20%20%20Finally%2C%20we%20define%20the%20necessary%20encodings.%20A%20light%20client%20only%20knows%20the%20root%20of%20the%20beacon%20state.%20The%20client%20wants%20to%20know%20the%20details%20of%20some%20leave%20nodes.%20The%20client%20has%20to%20be%20able%20to%20construct%20the%20%60content_key%60%20only%20knowing%20the%20root%20and%20which%20leave%20nodes%20it%20wants%20see.%20The%20%60content_key%60%20is%20the%20ssz%20serialization%20of%20the%20paths.%20The%20paths%20represent%20the%20part%20of%20the%20beacon%20state%20that%20one%20wants%20to%20know%20about.%20The%20paths%20are%20represented%20by%20generalized%20indices.%20Note%20that%20%60hash_tree_root%60%20and%20%60serialize%60%20are%20the%20same%20as%20those%20defined%20in%20%5Bsync-gossip%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx).%0A%0A-%20TODO%3A%20Review%20of%20Retrieving%20a%20transaction%20proof%20not%20just%20retrieving%20data%20on-demand%0A%0A%23%23%23%23%20Further%20Information%0A%0A-%20Ethereum%202.0%20Specifications%0A-%20%5BBeacon%20Chain%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fmaster%2Fspecs%2Fphase0%2Fbeacon-chain.mdx)%0A-%20%5BExtended%20light%20client%20protocol%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fextended_light_client_protocol)%0A-%20%5BAltair%20Light%20Client%20--%20Light%20Client%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%0A-%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%0A-%20%5BBeacon%20Chain%20Fork%20Choice%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Ffork-choice.mdx)%0A-%20%5BThe%20Portal%20Network%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs)%3A%20an%20in%20progess%20effort%20to%20enable%20lightweight%20protocol%20access%20by%20resource%20constrained%20devices.%0A-%20%5BLight%20Ethereum%20Subprotocol%20(LES)%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Fcaps%2Fles.mdx)%3A%20the%20protocol%20used%20by%20%22light%22%20clients%2C%20which%20only%20download%20block%20headers%20as%20they%20appear%20and%20fetch%20other%20parts%20of%20the%20blockchain%20on-demand.%0A-%20%5BBlockDaemon%3A%20Ethereum%20Altair%20Hard%20Folk%3A%20Light%20Clients%20%26%20Sync%20Committees%5D(https%3A%2F%2Fblockdaemon.com%2Fblog%2Fethereum-altair-hard-folk-light-clients-sync-committees%2F)%0A-%20%5BEfficient%20algorithms%20for%20CBC%20Casper%5D(https%3A%2F%2Fdocs.google.com%2Fpresentation%2Fd%2F1oc_zdywOsHxz3zez1ILAgrerS7RkaF1hHoW0FLtp0Gw%2Fedit%23slide%3Did.p)%3A%20Review%20of%20LMD%20GHOST%20(Latest%20Message%20Driven%2C%20Greediest%20Heaviest%20Observed%20Sub-Tree)%0A-%20%5BSSZ%3A%20Simple%20Serialize%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fssz%2F)%3A%20Overview%20of%20Simple%20serialize%20(SSZ)%20is%20the%20serialization%20method%20used%20on%20the%20Beacon%20Chain.%20(including%20merkalization%20and%20multiproofs)%0A-%20%5BThe%20Noise%20Protocol%20Framework%5D(https%3A%2F%2Fnoiseprotocol.org%2Fnoise.html)%3A%20Noise%20is%20a%20framework%20for%20crypto%20protocols%20based%20on%20Diffie-Hellman%20key%20agreement.%0A-%20%5BFlashbots%20for%20Ethereum%20Consensus%20Clients%5D(https%3A%2F%2Fhackmd.io%2FQoLwVQf3QK6EiVt15YOYqQ%3Fview)%0A-%20%5BOptimistic%20Sync%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fsync%2Foptimistic.mdx)%3A%20Optimistic%20Sync%20is%20a%20stop-gap%20measure%20to%20allow%20execution%20nodes%20to%20sync%20via%20established%20methods%20until%20future%20Ethereum%20roadmap%20items%20are%20implemented%20(e.g.%2C%20statelessness).%0A-%20%5BConsensus%20Light%20Client%20Server%20Implementation%20Notes%5D(https%3A%2F%2Fhackmd.io%2FhsCz1G3BTyiwwJtjT4pe2Q%3Fview)%3A%20How%20Lodestar%20beacon%20node%20was%20tweaked%20to%20serve%20light%20clients%0A-%20%5Bbeacon%20chain%20light%20client%20design%20doc%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40ralexstokes%2FHJxDMi8vY)%3A%20notes%20about%20the%20design%2Fimplementation%20of%20a%20beacon%20chain%20light%20client%20using%20standard%20APIs%20and%20protocol%20features%0A-%20%5BA%20Beacon%20Chain%20Light%20Client%20Proposal%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fa-beacon-chain-light-client-proposal%2F11064)%3A%20proposing%20a%20light%20client%20implementation%20that%20goes%20a%20step%20further%20than%20the%20minimum%20light%20client%20described%20in%20the%20altair%20consensus-spec.%20The%20proposed%20client%20aims%20to%20allow%20queries%20into%20the%20beacon%20state.%0A-%20%5BDistributed%20Hash%20Table%20(DHT)%20Overview%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23dht-overview)%3A%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%20key.%0A-%20%5B(WIP)%20Light%20client%20p2p%20interface%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fpull%2F2786)%3A%20a%20PR%20to%20get%20the%20conversation%20going%20about%20a%20p2p%20approach.%0A%20%20Here%20we%20cover%20two%20approaches%20which%20may%20be%20combined%0A%0A%23%23%23%20Appendix%20C%3A%20Proving%20and%20Verification%20Mechanisms%0A%0A%23%23%23%23%20%5Beth-proof-of-consensus%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus)%3A%20Proof%20of%20Consensus%20for%20Ethereum%20by%20succinctlabs%0A%0ACircuits%0A%0A-%20%5Baggregate_bls_verify.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Faggregate_bls_verify.circom)%3A%20Computes%20an%20aggregate%20BLS12-381%20public%20key%20over%20a%20set%20of%20public%20keys%20and%20a%20bitmask%0A-%20%5Bassert_valid_signed_header.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fassert_valid_signed_header.circom)%0A-%20%5Bpubkey_poseidon.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fpubkey_poseidon.circom)%3A%20Computes%20the%20Poseidon%20merkle%20root%20of%20a%20list%20of%20field%20elements%0A-%20%5Bsha256_bytes.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fsha256_bytes.circom)%3A%20Wrapper%20around%20SHA256%20to%20support%20bytes%20as%20input%20instead%20of%20bits%0A-%20%5Bsimple_serialize.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fsimple_serialize.circom)%3A%20Helper%20function%20to%20implement%20SSZArray%0A-%20%5Bsync_committee_committments.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fsync_committee_committments.circom)%3A%20Asserts%20that%20the%20byte%20representation%20of%20a%20BLS12-381%20public%20key's%20x-coordinate%20matches%20the%20BigInt%20representation%0A%0AVerification%0A%0A-%20%5BAMB%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Famb)%3A%20Arbitrary%20Message%20Passing%0A-%20%5BTrustlessAMB.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Famb%2FTrustlessAMB.sol)%3A%20sends%20and%20executes%20messages%0A-%20%5BTrustlessAMBStorage.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Famb%2FTrustlessAMBStorage.sol)%3A%20Storage%20for%20messages%20between%20two%20chains%0A-%20%5Bbridge%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Fbridge)%3A%20Allows%20for%20the%20deposit%20and%20withdrawal%20of%20ERC20%20tokens%0A-%20%5BBridge.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Fbridge%2FBridge.sol)%3A%20Deposit%20and%20withdraw%20functionality%0A-%20%5BToken.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Fbridge%2FTokens.sol)%3A%20ERC20%20bridge%20token%20definitions%0A-%20%5Blightclient%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Flightclient)%0A-%20%5BBLSAggregatedSignatureVerifier.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBLSAggregatedSignatureVerifier.sol)%3A%20Verifies%20BLS%20aggregated%20signature%20proofs%0A-%20%5BBeaconLightClient.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol)%3A%20Beacon%20Light%20Client%20Functionality%20including%0A%20%20-%20%5Bstep(LightClientUpdate%20memory%20update)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L86)%3A%20Updates%20the%20head%20given%20a%20finalized%20light%20client%20update.%0A%20%20-%20%5Bfunction%20updateSyncCommittee(LightClientUpdate%20memory%20update%2C%20bytes32%20nextSyncCommitteePoseidon%2C%20Groth16Proof%20memory%20commitmentMappingProof)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L102)%3A%20Set%20the%20sync%20committee%20validator%20set%20root%20for%20the%20next%20sync%20commitee%20period.%0A%20%20-%20%5Bfunction%20forceUpdate()%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L131)%3A%20Finalizes%20the%20optimistic%20update%20and%20sets%20the%20next%20sync%20committee%20if%20no%20finalized%20updates%20have%20been%20received%20for%20a%20period.%0A%20%20-%20%5Bfunction%20processLightClientUpdate(LightClientUpdate%20memory%20update)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L131)%3A%20Implements%20shared%20logic%20for%20processing%20light%20client%20updates.%0A%20%20-%20%5Bfunction%20zkMapSSZToPoseidon(bytes32%20sszCommitment%2C%20bytes32%20poseidonCommitment%2C%20Groth16Proof%20memory%20proof)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L190)%3A%20Maps%20a%20simple%20serialize%20merkle%20root%20to%20a%20poseidon%20merkle%20root%20with%20a%20zkSNARK.%20The%20proof%20asserts%20that%3A%20SimpleSerialize(syncCommittee)%20%3D%3D%20Poseidon(syncCommittee).%0A%20%20-%20%5Bfunction%20zkBLSVerify(bytes32%20signingRoot%2C%20bytes32%20syncCommitteeRoot%2C%20uint256%20claimedParticipation%2C%20Groth16Proof%20memory%20proof)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L208)%3A%20Does%20an%20aggregated%20BLS%20signature%20verification%20with%20a%20zkSNARK.%0A-%20%5Bscripts%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Fscripts)%3A%20A%20collection%20of%20%5Bforge-scripts%5D(https%3A%2F%2Fbook.getfoundry.sh%2Freference%2Fforge%2Fforge-script)%20for%20contract%20deployment.%0A%0A%23%23%23%20Appendix%20D%3A%20Topics%0A%0ABeacon%20Chain%20Topics%20%5BPrysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fp2p%2Ftopics.go)%0A%0A%60%60%60%0A%0Apackage%20p2p%0A%0Aconst%20(%0A%2F%2F%20GossipProtocolAndDigest%20represents%20the%20protocol%20and%20fork%20digest%20prefix%20in%20a%20gossip%20topic.%0AGossipProtocolAndDigest%20%3D%20%22%2Feth2%2F%25x%2F%22%0A%0A%2F%2F%20Message%20Types%0A%2F%2F%0A%2F%2F%20GossipAttestationMessage%20is%20the%20name%20for%20the%20attestation%20message%20type.%20It%20is%0A%2F%2F%20specially%20extracted%20so%20as%20to%20determine%20the%20correct%20message%20type%20from%20an%20attestation%0A%2F%2F%20subnet.%0AGossipAttestationMessage%20%3D%20%22beacon_attestation%22%0A%2F%2F%20GossipSyncCommitteeMessage%20is%20the%20name%20for%20the%20sync%20committee%20message%20type.%20It%20is%0A%2F%2F%20specially%20extracted%20so%20as%20to%20determine%20the%20correct%20message%20type%20from%20a%20sync%20committee%0A%2F%2F%20subnet.%0AGossipSyncCommitteeMessage%20%3D%20%22sync_committee%22%0A%2F%2F%20GossipBlockMessage%20is%20the%20name%20for%20the%20block%20message%20type.%0AGossipBlockMessage%20%3D%20%22beacon_block%22%0A%2F%2F%20GossipExitMessage%20is%20the%20name%20for%20the%20voluntary%20exit%20message%20type.%0AGossipExitMessage%20%3D%20%22voluntary_exit%22%0A%2F%2F%20GossipProposerSlashingMessage%20is%20the%20name%20for%20the%20proposer%20slashing%20message%20type.%0AGossipProposerSlashingMessage%20%3D%20%22proposer_slashing%22%0A%2F%2F%20GossipAttesterSlashingMessage%20is%20the%20name%20for%20the%20attester%20slashing%20message%20type.%0AGossipAttesterSlashingMessage%20%3D%20%22attester_slashing%22%0A%2F%2F%20GossipAggregateAndProofMessage%20is%20the%20name%20for%20the%20attestation%20aggregate%20and%20proof%20message%20type.%0AGossipAggregateAndProofMessage%20%3D%20%22beacon_aggregate_and_proof%22%0A%2F%2F%20GossipContributionAndProofMessage%20is%20the%20name%20for%20the%20sync%20contribution%20and%20proof%20message%20type.%0AGossipContributionAndProofMessage%20%3D%20%22sync_committee_contribution_and_proof%22%0A%2F%2F%20GossipBlsToExecutionChangeMessage%20is%20the%20name%20for%20the%20bls%20to%20execution%20change%20message%20type.%0AGossipBlsToExecutionChangeMessage%20%3D%20%22bls_to_execution_change%22%0A%0A%2F%2F%20Topic%20Formats%0A%2F%2F%0A%2F%2F%20AttestationSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20attestation%20subnet.%0AAttestationSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipAttestationMessage%20%2B%20%22_%25d%22%0A%2F%2F%20SyncCommitteeSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20sync%20committee%20subnet.%0ASyncCommitteeSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipSyncCommitteeMessage%20%2B%20%22_%25d%22%0A%2F%2F%20BlockSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20block%20subnet.%0ABlockSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipBlockMessage%0A%2F%2F%20ExitSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20voluntary%20exit%20subnet.%0AExitSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipExitMessage%0A%2F%2F%20ProposerSlashingSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20proposer%20slashing%20subnet.%0AProposerSlashingSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipProposerSlashingMessage%0A%2F%2F%20AttesterSlashingSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20attester%20slashing%20subnet.%0AAttesterSlashingSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipAttesterSlashingMessage%0A%2F%2F%20AggregateAndProofSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20aggregate%20and%20proof%20subnet.%0AAggregateAndProofSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipAggregateAndProofMessage%0A%2F%2F%20SyncContributionAndProofSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20sync%20aggregate%20and%20proof%20subnet.%0ASyncContributionAndProofSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipContributionAndProofMessage%0A%2F%2F%20BlsToExecutionChangeSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20bls%20to%20execution%20change%20subnet.%0ABlsToExecutionChangeSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipBlsToExecutionChangeMessage%0A)%0A%0A%60%60%60%0A%0A%23%23%23%20Appendix%20E%3A%20gRPC%20and%20API's%0A%0A%5BBeaconcha.in%20ETH2%20API%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html)%0A%0A%23%23%23%20Appendix%20F%3A%20Data%20Structures%0A%0A-%20Block%20Structure%20from%20%5Bgo-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fcore%2Ftypes%2Fblock.go%23L72)%0A%0A%60%60%60%0A%0A%2F%2F%20SealHash%20returns%20the%20hash%20of%20a%20block%20prior%20to%20it%20being%20sealed.%0Afunc%20(ethash%20*Ethash)%20SealHash(header%20*types.Header)%20(hash%20common.Hash)%20%7B%0Ahasher%20%3A%3D%20sha3.NewLegacyKeccak256()%0A%0Arlp.Encode(hasher%2C%20%5B%5Dinterface%7B%7D%7B%0Aheader.ParentHash%2C%0Aheader.UncleHash%2C%0Aheader.Coinbase%2C%0Aheader.Root%2C%0Aheader.TxHash%2C%0Aheader.ReceiptHash%2C%0Aheader.Bloom%2C%0Aheader.Difficulty%2C%0Aheader.Number%2C%0Aheader.GasLimit%2C%0Aheader.GasUsed%2C%0Aheader.Time%2C%0Aheader.Extra%2C%0A%7D)%0Ahasher.Sum(hash%5B%3A0%5D)%0Areturn%20hash%0A%7D%0A%0A%60%60%60%0A%0A-%20Blocks%20Headers%20get%20forwarded%20to%20the%20Beacon%20chain%20once%20they%20pass%20%5Bbeacon%20consensus%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fconsensus%2Fbeacon%2Fconsensus.go)%0A-%20The%20Beacon%20chain%20embeds%20the%20EthChain%20Header%20into%20a%20%5BBeaconBlock%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconsensus-types%2Fblocks%2Ftypes.go%23L43)%0A%0ABeaconBlockBody%20from%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconsensus-types%2Fblocks%2Ftypes.go)%20(golang)%0A%0A%60%60%60%0A%0A%2F%2F%20BeaconBlockBody%20is%20the%20main%20beacon%20block%20body%20structure.%20It%20can%20represent%20any%20block%20type.%0Atype%20BeaconBlockBody%20struct%20%7B%0Aversion%20int%0AisBlinded%20bool%0ArandaoReveal%20%5Bfield_params.BLSSignatureLength%5Dbyte%0Aeth1Data%20*eth.Eth1Data%0Agraffiti%20%5Bfield_params.RootLength%5Dbyte%0AproposerSlashings%20%5B%5D*eth.ProposerSlashing%0AattesterSlashings%20%5B%5D*eth.AttesterSlashing%0Aattestations%20%5B%5D*eth.Attestation%0Adeposits%20%5B%5D*eth.Deposit%0AvoluntaryExits%20%5B%5D*eth.SignedVoluntaryExit%0AsyncAggregate%20*eth.SyncAggregate%0AexecutionPayload%20*engine.ExecutionPayload%0AexecutionPayloadHeader%20%5C*engine.ExecutionPayloadHeader%0A%7D%0A%0A%2F%2F%20BeaconBlock%20is%20the%20main%20beacon%20block%20structure.%20It%20can%20represent%20any%20block%20type.%0Atype%20BeaconBlock%20struct%20%7B%0Aversion%20int%0Aslot%20types.Slot%0AproposerIndex%20types.ValidatorIndex%0AparentRoot%20%5Bfield_params.RootLength%5Dbyte%0AstateRoot%20%5Bfield_params.RootLength%5Dbyte%0Abody%20%5C*BeaconBlockBody%0A%7D%0A%0A%2F%2F%20SignedBeaconBlock%20is%20the%20main%20signed%20beacon%20block%20structure.%20It%20can%20represent%20any%20block%20type.%0Atype%20SignedBeaconBlock%20struct%20%7B%0Aversion%20int%0Ablock%20%5C*BeaconBlock%0Asignature%20%5Bfield_params.BLSSignatureLength%5Dbyte%0A%7D%0A%0A%60%60%60%0A%0AEth1Data%20from%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Fprysm%2Fv1alpha1%2Fpowchain.pb.go%23L24)%20(golang)%0A%0A%60%60%60%0A%0Atype%20ETH1ChainData%20struct%20%7B%0Astate%20protoimpl.MessageState%0AsizeCache%20protoimpl.SizeCache%0AunknownFields%20protoimpl.UnknownFields%0A%0ACurrentEth1Data%20*LatestETH1Data%20%60protobuf%3A%22bytes%2C1%2Copt%2Cname%3Dcurrent_eth1_data%2Cjson%3DcurrentEth1Data%2Cproto3%22%20json%3A%22current_eth1_data%2Comitempty%22%60%0AChainstartData%20*ChainStartData%20%60protobuf%3A%22bytes%2C2%2Copt%2Cname%3Dchainstart_data%2Cjson%3DchainstartData%2Cproto3%22%20json%3A%22chainstart_data%2Comitempty%22%60%0ABeaconState%20*BeaconState%20%60protobuf%3A%22bytes%2C3%2Copt%2Cname%3Dbeacon_state%2Cjson%3DbeaconState%2Cproto3%22%20json%3A%22beacon_state%2Comitempty%22%60%0ATrie%20*SparseMerkleTrie%20%60protobuf%3A%22bytes%2C4%2Copt%2Cname%3Dtrie%2Cproto3%22%20json%3A%22trie%2Comitempty%22%60%0ADepositContainers%20%5B%5D%5C*DepositContainer%20%60protobuf%3A%22bytes%2C5%2Crep%2Cname%3Ddeposit_containers%2Cjson%3DdepositContainers%2Cproto3%22%20json%3A%22deposit_containers%2Comitempty%22%60%0A%7D%0A%0Atype%20LatestETH1Data%20struct%20%7B%0Astate%20protoimpl.MessageState%0AsizeCache%20protoimpl.SizeCache%0AunknownFields%20protoimpl.UnknownFields%0A%0ABlockHeight%20uint64%20%60protobuf%3A%22varint%2C2%2Copt%2Cname%3Dblock_height%2Cjson%3DblockHeight%2Cproto3%22%20json%3A%22block_height%2Comitempty%22%60%0ABlockTime%20uint64%20%60protobuf%3A%22varint%2C3%2Copt%2Cname%3Dblock_time%2Cjson%3DblockTime%2Cproto3%22%20json%3A%22block_time%2Comitempty%22%60%0ABlockHash%20%5B%5Dbyte%20%60protobuf%3A%22bytes%2C4%2Copt%2Cname%3Dblock_hash%2Cjson%3DblockHash%2Cproto3%22%20json%3A%22block_hash%2Comitempty%22%60%0ALastRequestedBlock%20uint64%20%60protobuf%3A%22varint%2C5%2Copt%2Cname%3Dlast_requested_block%2Cjson%3DlastRequestedBlock%2Cproto3%22%20json%3A%22last_requested_block%2Comitempty%22%60%0A%7D%0A%0A%60%60%60%0A%0ABeaconBlockAltair%20from%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_block.rs%23L407)%20rust%0A%0A%60%60%60%0A%0A%20%20%20%20%2F%2F%2F%20Return%20an%20Altair%20block%20where%20the%20block%20has%20maximum%20size.%0A%20%20%20%20pub%20fn%20full(spec%3A%20%26ChainSpec)%20-%3E%20Self%20%7B%0A%20%20%20%20%20%20%20%20let%20base_block%3A%20BeaconBlockBase%3C_%2C%20Payload%3E%20%3D%20BeaconBlockBase%3A%3Afull(spec)%3B%0A%20%20%20%20%20%20%20%20let%20sync_aggregate%20%3D%20SyncAggregate%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20sync_committee_signature%3A%20AggregateSignature%3A%3Aempty()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20sync_committee_bits%3A%20BitVector%3A%3Adefault()%2C%0A%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20BeaconBlockAltair%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20slot%3A%20spec.genesis_slot%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20proposer_index%3A%200%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20parent_root%3A%20Hash256%3A%3Azero()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20state_root%3A%20Hash256%3A%3Azero()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20body%3A%20BeaconBlockBodyAltair%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20proposer_slashings%3A%20base_block.body.proposer_slashings%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20attester_slashings%3A%20base_block.body.attester_slashings%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20attestations%3A%20base_block.body.attestations%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20deposits%3A%20base_block.body.deposits%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20voluntary_exits%3A%20base_block.body.voluntary_exits%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20sync_aggregate%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20randao_reveal%3A%20Signature%3A%3Aempty()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20eth1_data%3A%20Eth1Data%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20deposit_root%3A%20Hash256%3A%3Azero()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20block_hash%3A%20Hash256%3A%3Azero()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20deposit_count%3A%200%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20graffiti%3A%20Graffiti%3A%3Adefault()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20_phantom%3A%20PhantomData%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20Beacon%20State%20Data%20Structures%20from%20Prysm%0A%0A%60%60%60%0A%0Atype%20BeaconState%20interface%20%7B%0ASpecParametersProvider%0AReadOnlyBeaconState%0AWriteOnlyBeaconState%0ACopy()%20BeaconState%0AHashTreeRoot(ctx%20context.Context)%20(%5B32%5Dbyte%2C%20error)%0AFutureForkStub%0AStateProver%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20ReadOnlyBeaconState%20interface%20%7B%0AReadOnlyBlockRoots%0AReadOnlyStateRoots%0AReadOnlyRandaoMixes%0AReadOnlyEth1Data%0AReadOnlyValidators%0AReadOnlyBalances%0AReadOnlyCheckpoint%0AReadOnlyAttestations%0AToProtoUnsafe()%20interface%7B%7D%0AToProto()%20interface%7B%7D%0AGenesisTime()%20uint64%0AGenesisValidatorsRoot()%20%5B%5Dbyte%0ASlot()%20types.Slot%0AFork()%20*ethpb.Fork%0ALatestBlockHeader()%20*ethpb.BeaconBlockHeader%0AHistoricalRoots()%20%5B%5D%5B%5Dbyte%0ASlashings()%20%5B%5Duint64%0AFieldReferencesCount()%20map%5Bstring%5Duint64%0AMarshalSSZ()%20(%5B%5Dbyte%2C%20error)%0AIsNil()%20bool%0AVersion()%20int%0ALatestExecutionPayloadHeader()%20(interfaces.ExecutionData%2C%20error)%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20ReadOnlyValidators%20interface%20%7B%0AValidators()%20%5B%5D*ethpb.Validator%0AValidatorAtIndex(idx%20types.ValidatorIndex)%20(*ethpb.Validator%2C%20error)%0AValidatorAtIndexReadOnly(idx%20types.ValidatorIndex)%20(ReadOnlyValidator%2C%20error)%0AValidatorIndexByPubkey(key%20%5Bfieldparams.BLSPubkeyLength%5Dbyte)%20(types.ValidatorIndex%2C%20bool)%0APubkeyAtIndex(idx%20types.ValidatorIndex)%20%5Bfieldparams.BLSPubkeyLength%5Dbyte%0ANumValidators()%20int%0AReadFromEveryValidator(f%20func(idx%20int%2C%20val%20ReadOnlyValidator)%20error)%20error%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20ReadOnlyRandaoMixes%20interface%20%7B%0ARandaoMixes()%20%5B%5D%5B%5Dbyte%0ARandaoMixAtIndex(idx%20uint64)%20(%5B%5Dbyte%2C%20error)%0ARandaoMixesLength()%20int%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20WriteOnlyBeaconState%20interface%20%7B%0AWriteOnlyBlockRoots%0AWriteOnlyStateRoots%0AWriteOnlyRandaoMixes%0AWriteOnlyEth1Data%0AWriteOnlyValidators%0AWriteOnlyBalances%0AWriteOnlyCheckpoint%0AWriteOnlyAttestations%0ASetGenesisTime(val%20uint64)%20error%0ASetGenesisValidatorsRoot(val%20%5B%5Dbyte)%20error%0ASetSlot(val%20types.Slot)%20error%0ASetFork(val%20*ethpb.Fork)%20error%0ASetLatestBlockHeader(val%20*ethpb.BeaconBlockHeader)%20error%0ASetHistoricalRoots(val%20%5B%5D%5B%5Dbyte)%20error%0ASetSlashings(val%20%5B%5Duint64)%20error%0AUpdateSlashingsAtIndex(idx%2C%20val%20uint64)%20error%0AAppendHistoricalRoots(root%20%5B32%5Dbyte)%20error%0ASetLatestExecutionPayloadHeader(payload%20interfaces.ExecutionData)%20error%0ASetWithdrawalQueue(val%20%5B%5D*enginev1.Withdrawal)%20error%0AAppendWithdrawal(val%20*enginev1.Withdrawal)%20error%0ASetNextWithdrawalIndex(i%20uint64)%20error%0ASetNextPartialWithdrawalValidatorIndex(i%20types.ValidatorIndex)%20error%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20WriteOnlyValidators%20interface%20%7B%0ASetValidators(val%20%5B%5D*ethpb.Validator)%20error%0AApplyToEveryValidator(f%20func(idx%20int%2C%20val%20*ethpb.Validator)%20(bool%2C%20*ethpb.Validator%2C%20error))%20error%0AUpdateValidatorAtIndex(idx%20types.ValidatorIndex%2C%20val%20*ethpb.Validator)%20error%0AAppendValidator(val%20%5C*ethpb.Validator)%20error%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20WriteOnlyRandaoMixes%20interface%20%7B%0ASetRandaoMixes(val%20%5B%5D%5B%5Dbyte)%20error%0AUpdateRandaoMixesAtIndex(idx%20uint64%2C%20val%20%5B%5Dbyte)%20error%0A%7D%0A%0A%60%60%60%0A%0A%5BValidator%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fproto%2Fprysm%2Fv1alpha1%23Validator)%20information%0A%0A%60%60%60%0A%0Atype%20Validator%20struct%20%7B%0APublicKey%20%5B%5Dbyte%20%60protobuf%3A%22bytes%2C1%2Copt%2Cname%3Dpublic_key%2Cjson%3DpublicKey%2Cproto3%22%20json%3A%22public_key%2Comitempty%22%20spec-name%3A%22pubkey%22%20ssz-size%3A%2248%22%60%0AWithdrawalCredentials%20%5B%5Dbyte%20%60%60%2F*%20138-byte%20string%20literal%20not%20displayed%20*%2F%0A%20EffectiveBalance%20%20%20%20%20%20%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%60protobuf%3A%22varint%2C3%2Copt%2Cname%3Deffective_balance%2Cjson%3DeffectiveBalance%2Cproto3%22%20json%3A%22effective_balance%2Comitempty%22%60%0A%20Slashed%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20bool%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%60protobuf%3A%22varint%2C4%2Copt%2Cname%3Dslashed%2Cproto3%22%20json%3A%22slashed%2Comitempty%22%60%0A%20ActivationEligibilityEpoch%20github_com_prysmaticlabs_prysm_v3_consensus_types_primitives.Epoch%60%60%20%2F_%20221-byte%20string%20literal%20not%20displayed%20_%2F%0AActivationEpoch%20github*com_prysmaticlabs_prysm_v3_consensus_types_primitives.Epoch%20%60%2F*%20186-byte%20string%20literal%20not%20displayed%20_%2F%0AExitEpoch%20github_com_prysmaticlabs_prysm_v3_consensus_types_primitives.Epoch%60%20%2F_%20168-byte%20string%20literal%20not%20displayed%20_%2F%0AWithdrawableEpoch%20github_com_prysmaticlabs_prysm_v3_consensus_types_primitives.Epoch%20%60%60%20%2F_%20192-byte%20string%20literal%20not%20displayed%20%5C_%2F%0A%2F%2F%20contains%20filtered%20or%20unexported%20fields%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20%5Bweb3signer_types%20from%20prysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fvalidator%2Fkeymanager%2Fremote-web3signer%2Fv1%2Fweb3signer_types.go%23L107)%0A%0A%60%60%60%0A%0A%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%0A%2F%2F%20sub%20properties%20of%20Sign%20Requests%20%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%0A%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%0A%0A%2F%2F%20ForkInfo%20a%20sub%20property%20object%20of%20the%20Sign%20request%0Atype%20ForkInfo%20struct%20%7B%0AFork%20%5C*Fork%20%60json%3A%22fork%22%60%0AGenesisValidatorsRoot%20hexutil.Bytes%20%60json%3A%22genesis_validators_root%22%60%0A%7D%0A%0A%2F%2F%20Fork%20a%20sub%20property%20of%20ForkInfo.%0Atype%20Fork%20struct%20%7B%0APreviousVersion%20hexutil.Bytes%20%60json%3A%22previous_version%22%60%0ACurrentVersion%20hexutil.Bytes%20%60json%3A%22current_version%22%60%0AEpoch%20string%20%60json%3A%22epoch%22%60%20%2F_uint64_%2F%0A%7D%0A%0A%2F%2F%20AggregationSlot%20a%20sub%20property%20of%20AggregationSlotSignRequest.%0Atype%20AggregationSlot%20struct%20%7B%0ASlot%20string%20%60json%3A%22slot%22%60%0A%7D%0A%0A%2F%2F%20AggregateAndProof%20a%20sub%20property%20of%20AggregateAndProofSignRequest.%0Atype%20AggregateAndProof%20struct%20%7B%0AAggregatorIndex%20string%20%60json%3A%22aggregator_index%22%60%20%2F_%20uint64%20_%2F%0AAggregate%20_Attestation%20%60json%3A%22aggregate%22%60%0ASelectionProof%20hexutil.Bytes%20%60json%3A%22selection_proof%22%60%20%2F_%2096%20bytes%20_%2F%0A%7D%0A%0A%2F%2F%20Attestation%20a%20sub%20property%20of%20AggregateAndProofSignRequest.%0Atype%20Attestation%20struct%20%7B%0AAggregationBits%20hexutil.Bytes%20%60json%3A%22aggregation_bits%22%60%20%2F_hex%20bitlist_%2F%0AData%20%5C*AttestationData%20%60json%3A%22data%22%60%0ASignature%20hexutil.Bytes%20%60json%3A%22signature%22%60%0A%7D%0A%0A%2F%2F%20AttestationData%20a%20sub%20property%20of%20Attestation.%0Atype%20AttestationData%20struct%20%7B%0ASlot%20string%20%60json%3A%22slot%22%60%20%2F_%20uint64%20_%2F%0AIndex%20string%20%60json%3A%22index%22%60%20%2F_%20uint64%20_%2F%20%2F%2F%20Prysm%20uses%20CommitteeIndex%20but%20web3signer%20uses%20index.%0ABeaconBlockRoot%20hexutil.Bytes%20%60json%3A%22beacon_block_root%22%60%0ASource%20*Checkpoint%20%60json%3A%22source%22%60%0ATarget%20*Checkpoint%20%60json%3A%22target%22%60%0A%7D%0A%0A%2F%2F%20Checkpoint%20a%20sub%20property%20of%20AttestationData.%0Atype%20Checkpoint%20struct%20%7B%0AEpoch%20string%20%60json%3A%22epoch%22%60%0ARoot%20string%20%60json%3A%22root%22%60%0A%7D%0A%0A%60%60%60%0A%0A%5Battestation.proto%20from%20prysm%20(Message%20Structure)%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Fprysm%2Fv1alpha1%2Fattestation.proto)%0A%0A%60%60%60%0A%0Amessage%20AttestationData%20%7B%0A%2F%2F%20Attestation%20data%20includes%20information%20on%20Casper%20the%20Friendly%20Finality%20Gadget's%20votes%0A%2F%2F%20See%3A%20https%3A%2F%2Farxiv.org%2Fpdf%2F1710.09437.pdf%0A%0A%20%20%20%20%2F%2F%20Slot%20of%20the%20attestation%20attesting%20for.%0A%20%20%20%20uint64%20slot%20%3D%201%20%5B(ethereum.eth.ext.cast_type)%20%3D%20%22github.com%2Fprysmaticlabs%2Fprysm%2Fv3%2Fconsensus-types%2Fprimitives.Slot%22%5D%3B%0A%0A%20%20%20%20%2F%2F%20The%20committee%20index%20that%20submitted%20this%20attestation.%0A%20%20%20%20uint64%20committee_index%20%3D%202%20%20%5B(ethereum.eth.ext.cast_type)%20%3D%20%22github.com%2Fprysmaticlabs%2Fprysm%2Fv3%2Fconsensus-types%2Fprimitives.CommitteeIndex%22%5D%3B%0A%0A%20%20%20%20%2F%2F%2032%20byte%20root%20of%20the%20LMD%20GHOST%20block%20vote.%0A%20%20%20%20bytes%20beacon_block_root%20%3D%203%20%5B(ethereum.eth.ext.ssz_size)%20%3D%20%2232%22%5D%3B%0A%0A%20%20%20%20%2F%2F%20The%20most%20recent%20justified%20checkpoint%20in%20the%20beacon%20state%0A%20%20%20%20Checkpoint%20source%20%3D%204%3B%0A%0A%20%20%20%20%2F%2F%20The%20checkpoint%20attempting%20to%20be%20justified%20for%20the%20current%20epoch%20and%20its%20epoch%20boundary%20block%0A%20%20%20%20Checkpoint%20target%20%3D%205%3B%0A%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%20Appendix%20G%3A%20Sample%20Data%0A%0A%23%23%23%23%20Epoch%20Data%20for%20167040%0A%0AFollowing%20is%20the%20Epoch%20Data%20for%20167040%0AIt%20can%20be%20retrieved%20from%20%5Bhere%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html%23%2FEpoch%2Fget_api_v1_epoch__epoch_)%20or%20by%20using%20this%20curl%20command%0A%0A%60curl%20-X%20'GET'%20%5C%0A%20%20'https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fepoch%2F167040'%20%5C%0A%20%20-H%20'accept%3A%20application%2Fjson'%60%0A%0AResponse%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%7B%0A%22attestationscount%22%3A%203457%2C%0A%22attesterslashingscount%22%3A%200%2C%0A%22averagevalidatorbalance%22%3A%2033899775551%2C%0A%22blockscount%22%3A%2032%2C%0A%22depositscount%22%3A%200%2C%0A%22eligibleether%22%3A%2015596542000000000%2C%0A%22epoch%22%3A%20167040%2C%0A%22finalized%22%3A%20true%2C%0A%22globalparticipationrate%22%3A%200.9963188171386719%2C%0A%22missedblocks%22%3A%200%2C%0A%22orphanedblocks%22%3A%200%2C%0A%22proposedblocks%22%3A%2032%2C%0A%22proposerslashingscount%22%3A%200%2C%0A%22scheduledblocks%22%3A%200%2C%0A%22totalvalidatorbalance%22%3A%2016522615004645864%2C%0A%22validatorscount%22%3A%20487396%2C%0A%22voluntaryexitscount%22%3A%200%2C%0A%22votedether%22%3A%2015539128000000000%0A%7D%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20Block%20Data%20for%20Slot%205%2C330%2C592%0A%0AFollowing%20is%20the%20Block%20Data%20for%20Slot%205%2C330%2C592%0AIt%20can%20be%20retrieved%20from%20%5Bhere%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html%23%2FBlock%2Fget_api_v1_block__slotOrHash_)%20or%20by%20using%20this%20curl%20command%0A%0A%60curl%20-X%20'GET'%20'https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fblock%2F5330592'%20-H%20'accept%3A%20application%2Fjson'%60%0A%0AResponse%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%7B%0A%22attestationscount%22%3A%20126%2C%0A%22attesterslashingscount%22%3A%200%2C%0A%22blockroot%22%3A%20%220xaebe891086c79ab79b325f474dc1150f1223e567337bff815cc318f14c64c233%22%2C%0A%22depositscount%22%3A%200%2C%0A%22epoch%22%3A%20166581%2C%0A%22eth1data_blockhash%22%3A%20%220xd346f84ffe7c600b7714d6411c8bea988d9d64dbdb432f26db58e72946337954%22%2C%0A%22eth1data_depositcount%22%3A%20498785%2C%0A%22eth1data_depositroot%22%3A%20%220x9a5603a34aa60f299384679bf4bfc267e99b68278a81f343bde8cb5650bf1d60%22%2C%0A%22exec_base_fee_per_gas%22%3A%2012376913565%2C%0A%22exec_block_hash%22%3A%20%220x26239efe09f51b24bdf7c518b1aa925a3b0b6453682408ec8a5c906d5038a6e7%22%2C%0A%22exec_block_number%22%3A%2016163905%2C%0A%22exec_extra_data%22%3A%20%220x496c6c756d696e61746520446d6f63726174697a6520447374726962757465%22%2C%0A%22exec_fee_recipient%22%3A%20%220xdafea492d9c6733ae3d56b7ed1adb60692c98bc5%22%2C%0A%22exec_gas_limit%22%3A%2030000000%2C%0A%22exec_gas_used%22%3A%209901267%2C%0A%22exec_logs_bloom%22%3A%20%220x8c21554815843b4084a999b2901917a52c58004a82a8440d94919a77f9241181388a0c404f000a8c0321ab024800bf899610e60ec801fb4b0352e34f147626192648619065381ded6b9d92bcd0861120adc1ec01064e7a016ea91c478d01b81316462d2d622a60010bc0139f6fb8ccf200499c0e211a85c042047d1601aa0c2ea2833902a2a3091528492dad09f6dc064529c455d328413b78c680c4699815ac9a91610f19e66542edca45a10518ee65b02cf02241a124232d5958b6004cd0a5846c5703d00b5e4d8353221015f7d38c1429074e34aaa11f3804f933082860c401152088251479918297a1a9237d9ac35539f6d069cca07a005819494a653913%22%2C%0A%22exec_parent_hash%22%3A%20%220x06746d5ff105e96a1b8961c2490c0261b474604fbcbf934e86295c0030e26ce2%22%2C%0A%22exec_random%22%3A%20%220xc2861c72cf4d34b37ec73519dbc20b690742b5cc119ed3738f1dd67d8ca52723%22%2C%0A%22exec_receipts_root%22%3A%20%220x33cdf5c6e03dd341f282d02d3c354c2361a6212692b2a3c06b520397045313f4%22%2C%0A%22exec_state_root%22%3A%20%220x517304bade8d83337c9a52f8ceeb13f924b64486b3b8033f7c348c176922104a%22%2C%0A%22exec_timestamp%22%3A%201670791127%2C%0A%22exec_transactions_count%22%3A%20139%2C%0A%22graffiti%22%3A%20%220x0000000000000000000000000000000000000000000000000000000000000000%22%2C%0A%22graffiti_text%22%3A%20%22%22%2C%0A%22parentroot%22%3A%20%220x0cab36616bbcbbc67c343ddce00241c27d0df2c367c5fa82fc7c0fdf0ed37405%22%2C%0A%22proposer%22%3A%204345%2C%0A%22proposerslashingscount%22%3A%200%2C%0A%22randaoreveal%22%3A%20%220x83950cb64781aff91f4bd14aa6abb0f5fdb7e08e4e81c264f0754c93d7672c4a9615de196491fdb53eafdeb8f49e9cf515f1bd3dc05bb5dc0e2dd8bff5a8d783b503e3385e80b61485f0ddac1caa9361132a863db84e7e234df5815e6908e4e7%22%2C%0A%22signature%22%3A%20%220x84865a9480ae6313b0e5fcadfa294b35f5963e06c66ad1c7613dc081e9700c07f82a2583ba4b62b2483b4a1b9d49aafe0690f22fcf4d0072f9f44a5ce3067ef4fda560d171001cc6bf5dc84e09d9055d92894b86b27695c297f25530cd8db7a0%22%2C%0A%22slot%22%3A%205330592%2C%0A%22stateroot%22%3A%20%220x9e7e40d844c3b229cd9497d662a6d94276d285945073849995aba93c7e73cfe7%22%2C%0A%22status%22%3A%20%221%22%2C%0A%22syncaggregate_bits%22%3A%20%220xdffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffdfffffffffffffffdffffffffffffffffffffffff%22%2C%0A%22syncaggregate_participation%22%3A%200.9921875%2C%0A%22syncaggregate_signature%22%3A%20%220x95332c55790018eed3d17eada01cb4045348d09137505bc8697eeedaa3800a830ee2c138251850a9577f62a5488419ef0a722579156a177fb3a147017f1077af5d778f46a4cdf815fc450129d135fe5286e16df68333592e4aa45821bde780dd%22%2C%0A%22voluntaryexitscount%22%3A%200%2C%0A%22votes%22%3A%2019227%0A%7D%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20Execution%20Block%20for%2016163905%0A%0AFollowing%20is%20the%20execution%20block%20data%20for%2016163905%0AIt%20can%20be%20retrieved%20from%20%5Bhere%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html%23%2FExecution%2Fget_api_v1_execution_block__blockNumber_)%20or%20by%20using%20this%20curl%20command%0A%0A%60curl%20-X%20'GET'%20'https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fexecution%2Fblock%2F16163905'%20%20-H%20'accept%3A%20application%2Fjson'%60%0A%0AResult%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%5B%0A%7B%0A%22blockHash%22%3A%20%220x26239efe09f51b24bdf7c518b1aa925a3b0b6453682408ec8a5c906d5038a6e7%22%2C%0A%22blockNumber%22%3A%2016163905%2C%0A%22timestamp%22%3A%201670791127%2C%0A%22blockReward%22%3A%2037343826945103810%2C%0A%22blockMevReward%22%3A%2037083911760238810%2C%0A%22producerReward%22%3A%2037083911760238810%2C%0A%22feeRecipient%22%3A%20%220xdafea492d9c6733ae3d56b7ed1adb60692c98bc5%22%2C%0A%22gasLimit%22%3A%2030000000%2C%0A%22gasUsed%22%3A%209901267%2C%0A%22baseFee%22%3A%2012376913565%2C%0A%22txCount%22%3A%20139%2C%0A%22internalTxCount%22%3A%2054%2C%0A%22uncleCount%22%3A%200%2C%0A%22parentHash%22%3A%20%220x06746d5ff105e96a1b8961c2490c0261b474604fbcbf934e86295c0030e26ce2%22%2C%0A%22uncleHash%22%3A%20%220x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347%22%2C%0A%22difficulty%22%3A%200%2C%0A%22posConsensus%22%3A%20%7B%0A%22executionBlockNumber%22%3A%2016163905%2C%0A%22proposerIndex%22%3A%204345%2C%0A%22slot%22%3A%205330592%2C%0A%22epoch%22%3A%20166581%2C%0A%22finalized%22%3A%20true%0A%7D%2C%0A%22relay%22%3A%20%7B%0A%22tag%22%3A%20%22flashbots-relay%22%2C%0A%22builderPubkey%22%3A%20%220x81beef03aafd3dd33ffd7deb337407142c80fea2690e5b3190cfc01bde5753f28982a7857c96172a75a234cb7bcb994f%22%2C%0A%22producerFeeRecipient%22%3A%20%220x60987e0d8b5e0095869ca6f0e642828e3f258bb5%22%0A%7D%2C%0A%22consensusAlgorithm%22%3A%20%22pos%22%0A%7D%0A%5D%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20Sync%20Committee%20(latest)%0A%0AFollowing%20is%20a%20sample%20Sync%20Committee%0AIt%20can%20be%20retrieved%20from%20%5Bhere%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html%23%2FSyncCommittee%2Fget_api_v1_sync_committee__period_)%20or%20by%20using%20this%20curl%20command%0A%0A%60curl%20-X%20'GET'%20'https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fsync_committee%2Flatest'%20-H%20'accept%3A%20application%2Fjson'%60%0A%0AAbbrieviated%20Result%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%7B%0A%22end_epoch%22%3A%20167167%2C%0A%22period%22%3A%20652%2C%0A%22start_epoch%22%3A%20166912%2C%0A%22validators%22%3A%20%5B%0A328781%2C%0A184949%2C%0A...%0A%5D%0A%7D%0A%7D%0A%0A%60%60%60%0A%0A%3Cdetails%3E%0A%3Csummary%3EFull%20Result%3C%2Fsummary%3E%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%7B%0A%22end_epoch%22%3A%20167167%2C%0A%22period%22%3A%20652%2C%0A%22start_epoch%22%3A%20166912%2C%0A%22validators%22%3A%20%5B%0A328781%2C%0A184949%2C%0A269719%2C%0A484753%2C%0A447707%2C%0A190522%2C%0A222987%2C%0A429436%2C%0A23553%2C%0A353182%2C%0A394935%2C%0A347121%2C%0A3941%2C%0A77287%2C%0A390407%2C%0A41282%2C%0A440380%2C%0A477794%2C%0A13208%2C%0A321552%2C%0A338223%2C%0A414921%2C%0A77542%2C%0A57797%2C%0A471002%2C%0A238719%2C%0A87491%2C%0A85099%2C%0A16484%2C%0A220174%2C%0A256680%2C%0A194973%2C%0A77409%2C%0A150279%2C%0A322042%2C%0A275140%2C%0A393620%2C%0A21206%2C%0A59424%2C%0A308071%2C%0A20736%2C%0A173428%2C%0A365316%2C%0A293687%2C%0A136783%2C%0A459882%2C%0A9048%2C%0A128613%2C%0A132177%2C%0A267018%2C%0A290896%2C%0A236936%2C%0A406218%2C%0A380040%2C%0A481667%2C%0A34410%2C%0A413701%2C%0A158755%2C%0A222721%2C%0A295335%2C%0A106306%2C%0A426104%2C%0A229412%2C%0A377442%2C%0A300381%2C%0A251157%2C%0A2301%2C%0A255801%2C%0A160943%2C%0A417370%2C%0A290905%2C%0A435535%2C%0A164094%2C%0A204304%2C%0A258455%2C%0A366943%2C%0A119808%2C%0A311117%2C%0A79552%2C%0A164660%2C%0A446993%2C%0A347592%2C%0A256827%2C%0A244517%2C%0A277343%2C%0A303208%2C%0A425967%2C%0A216346%2C%0A13359%2C%0A481813%2C%0A142254%2C%0A105339%2C%0A465226%2C%0A200109%2C%0A198691%2C%0A43343%2C%0A32947%2C%0A392889%2C%0A304855%2C%0A452188%2C%0A148690%2C%0A441869%2C%0A15210%2C%0A216221%2C%0A33338%2C%0A124091%2C%0A299153%2C%0A305746%2C%0A230810%2C%0A484937%2C%0A464816%2C%0A474017%2C%0A307185%2C%0A370171%2C%0A430926%2C%0A21371%2C%0A7607%2C%0A209940%2C%0A439052%2C%0A398079%2C%0A238559%2C%0A108372%2C%0A127122%2C%0A62084%2C%0A5906%2C%0A278678%2C%0A404838%2C%0A253340%2C%0A146867%2C%0A437165%2C%0A470827%2C%0A252487%2C%0A430474%2C%0A433777%2C%0A282060%2C%0A221522%2C%0A273826%2C%0A56274%2C%0A359184%2C%0A401626%2C%0A43613%2C%0A287311%2C%0A465536%2C%0A301609%2C%0A21832%2C%0A192551%2C%0A412598%2C%0A186526%2C%0A447005%2C%0A112768%2C%0A404399%2C%0A289582%2C%0A290124%2C%0A191275%2C%0A213003%2C%0A39276%2C%0A200971%2C%0A315798%2C%0A135302%2C%0A121320%2C%0A227480%2C%0A156978%2C%0A98919%2C%0A201671%2C%0A195988%2C%0A186622%2C%0A475967%2C%0A314720%2C%0A58582%2C%0A404742%2C%0A215008%2C%0A306959%2C%0A267381%2C%0A126574%2C%0A73725%2C%0A156317%2C%0A83010%2C%0A375189%2C%0A167000%2C%0A459137%2C%0A294856%2C%0A144931%2C%0A234176%2C%0A371047%2C%0A446790%2C%0A219650%2C%0A26577%2C%0A64091%2C%0A482916%2C%0A203241%2C%0A306809%2C%0A178005%2C%0A380280%2C%0A452614%2C%0A266272%2C%0A264801%2C%0A428464%2C%0A342535%2C%0A310436%2C%0A297012%2C%0A173959%2C%0A384721%2C%0A311372%2C%0A375367%2C%0A304633%2C%0A247177%2C%0A373217%2C%0A43689%2C%0A363227%2C%0A447608%2C%0A203474%2C%0A186229%2C%0A63975%2C%0A189189%2C%0A391682%2C%0A197510%2C%0A423160%2C%0A168160%2C%0A336488%2C%0A11240%2C%0A86706%2C%0A316746%2C%0A272065%2C%0A50516%2C%0A411785%2C%0A25826%2C%0A212663%2C%0A233378%2C%0A186547%2C%0A268142%2C%0A387972%2C%0A275194%2C%0A134600%2C%0A337298%2C%0A51510%2C%0A206067%2C%0A111837%2C%0A461165%2C%0A137209%2C%0A317427%2C%0A153989%2C%0A464678%2C%0A975%2C%0A384374%2C%0A433258%2C%0A62611%2C%0A413087%2C%0A424810%2C%0A449054%2C%0A190150%2C%0A310602%2C%0A336220%2C%0A71740%2C%0A230657%2C%0A453370%2C%0A468144%2C%0A322259%2C%0A283775%2C%0A1606%2C%0A139348%2C%0A352593%2C%0A356482%2C%0A156500%2C%0A157489%2C%0A454159%2C%0A337203%2C%0A63370%2C%0A369541%2C%0A170461%2C%0A99771%2C%0A398154%2C%0A126177%2C%0A281482%2C%0A24217%2C%0A234556%2C%0A251792%2C%0A201614%2C%0A249765%2C%0A130900%2C%0A409074%2C%0A46296%2C%0A172953%2C%0A194464%2C%0A229313%2C%0A120835%2C%0A141417%2C%0A187795%2C%0A169516%2C%0A352531%2C%0A402467%2C%0A433379%2C%0A73331%2C%0A345245%2C%0A167093%2C%0A176171%2C%0A198482%2C%0A486643%2C%0A456439%2C%0A449333%2C%0A221367%2C%0A481580%2C%0A200704%2C%0A197099%2C%0A314035%2C%0A336100%2C%0A146714%2C%0A415630%2C%0A47127%2C%0A287953%2C%0A153548%2C%0A438248%2C%0A2664%2C%0A325723%2C%0A467719%2C%0A408858%2C%0A82963%2C%0A180891%2C%0A192679%2C%0A86617%2C%0A100068%2C%0A2394%2C%0A11764%2C%0A48047%2C%0A127406%2C%0A149052%2C%0A283994%2C%0A342457%2C%0A463547%2C%0A320210%2C%0A293252%2C%0A6540%2C%0A464926%2C%0A265551%2C%0A109109%2C%0A164735%2C%0A381110%2C%0A29080%2C%0A246178%2C%0A355576%2C%0A448267%2C%0A430466%2C%0A444401%2C%0A126905%2C%0A414347%2C%0A451523%2C%0A331926%2C%0A366508%2C%0A480803%2C%0A387850%2C%0A413867%2C%0A17772%2C%0A268744%2C%0A427797%2C%0A163955%2C%0A333814%2C%0A93663%2C%0A338046%2C%0A236013%2C%0A180066%2C%0A68685%2C%0A466537%2C%0A3904%2C%0A277412%2C%0A449845%2C%0A16633%2C%0A62120%2C%0A108501%2C%0A486885%2C%0A60466%2C%0A380719%2C%0A269930%2C%0A365432%2C%0A377380%2C%0A260009%2C%0A300616%2C%0A203897%2C%0A289145%2C%0A249814%2C%0A26558%2C%0A343110%2C%0A48226%2C%0A365643%2C%0A401664%2C%0A7355%2C%0A350107%2C%0A100836%2C%0A99073%2C%0A294093%2C%0A7587%2C%0A169932%2C%0A166154%2C%0A396054%2C%0A108167%2C%0A229069%2C%0A307648%2C%0A148531%2C%0A233563%2C%0A40093%2C%0A44708%2C%0A353913%2C%0A456080%2C%0A176129%2C%0A156427%2C%0A412072%2C%0A154317%2C%0A271015%2C%0A126289%2C%0A345876%2C%0A156388%2C%0A195860%2C%0A25422%2C%0A482057%2C%0A362295%2C%0A466187%2C%0A115725%2C%0A387438%2C%0A170886%2C%0A224753%2C%0A126768%2C%0A421612%2C%0A96187%2C%0A9314%2C%0A194598%2C%0A297360%2C%0A121794%2C%0A422582%2C%0A428474%2C%0A281996%2C%0A211966%2C%0A303980%2C%0A232330%2C%0A314475%2C%0A485%2C%0A146262%2C%0A8780%2C%0A459648%2C%0A88780%2C%0A371355%2C%0A283376%2C%0A480636%2C%0A67695%2C%0A153169%2C%0A205011%2C%0A52231%2C%0A103646%2C%0A432471%2C%0A433747%2C%0A16092%2C%0A78487%2C%0A165644%2C%0A412660%2C%0A451750%2C%0A8088%2C%0A185452%2C%0A192135%2C%0A355751%2C%0A59734%2C%0A341708%2C%0A347491%2C%0A466763%2C%0A446951%2C%0A670%2C%0A392454%2C%0A39840%2C%0A469691%2C%0A329363%2C%0A61899%2C%0A384770%2C%0A317497%2C%0A282776%2C%0A211703%2C%0A427937%2C%0A284122%2C%0A238949%2C%0A417486%2C%0A341081%2C%0A241572%2C%0A67225%2C%0A294159%2C%0A302865%2C%0A227806%2C%0A123006%2C%0A329514%2C%0A449279%2C%0A31448%2C%0A450144%2C%0A485006%2C%0A199737%2C%0A253646%2C%0A117814%2C%0A408604%2C%0A141399%2C%0A121937%2C%0A237632%2C%0A315197%2C%0A10397%2C%0A318494%2C%0A221051%2C%0A444960%2C%0A417643%2C%0A90991%2C%0A153828%2C%0A291638%2C%0A96654%2C%0A280019%2C%0A218632%2C%0A74162%2C%0A119769%2C%0A20024%2C%0A420771%2C%0A219118%2C%0A96325%0A%5D%0A%7D%0A%7D%0A%0A%60%60%60%0A%0A%3C%2Fdetails%3E%0A%0A%23%23%23%20Appendix%20H%3A%20Sync%20Committe%20Creation%20and%20Retrieval%0A%0A**Sync%20Committee%20Configuration**%0A%0A%60EPOCHS_PER_SYNC_COMMITTEE_PERIOD%60%20is%20set%20in%20%5Bconfig.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconfig%2Fparams%2Fconfig.go%23L185)%20currently%20255%20epochs%20per%20synch%20comittee%20(approx%2027%20hrs)%20for%20Ethreum%20Mainnet.%0A%0A**Sync%20Committee%20Update%20Process**%0A%0A-%20%5Bbeacon-chain%2Fblockchain%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fblockchain)%0A%20%20-%20%5Bprocess_block.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fblockchain%2Fprocess_block.go)%3A%20has%20function%20%60onBlock%60%20which%20is%20called%20when%20a%20gossip%20block%20is%20received.%20It%20also%20has%20function%20%60handleEpochBoundary%60%20which%20calls%20%60ProcessSlots%60%20in%20%5Bbeacon-chain%2Fcore%2Ftransition%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Ftransition)%20and%20calls%20function%20%60UpdateCommitteeCache%60%20in%20%5Bbeacon-chain%2Fcore%2Fhelpers%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Fhelpers)%0A-%20%5Bbeacon-chain%2Fcore%2Ftransition%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Ftransition)%0A%20%20-%20%5Btransition.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Ftransition%2Ftransition.go)%3A%20implements%20the%20whole%20state%20transition%20function%20which%20consists%20of%20per%20slot%2C%20per-epoch%20transitions.%20function%20%60ProcessSlots%60%20calls%20%60ProcessEpoch%60%20in%20%5Bbeacon-chain%2Fcore%2Faltair%2Ftransition.go%5D(%3C(%253Chttps%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Ftransition.go)%253E%3E)%0A-%20%5Bbeacon-chain%2Fcore%2Faltair%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair)%0A%20%20-%20%5Btransition.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Ftransition.go)%3A%20includes%20function%20%60ProcessEpoch%60%20which%20calls%20%60ProcessSyncCommitteeUpdates%60%20in%20%5Bepoch_spec.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Fepoch_spec.go)%0A%20%20-%20%5Bepoch_spec.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Fepoch_spec.go)%3A%20includes%20function%20%60ProcessSyncCommitteeUpdates%60%20which%20calls%20%60NextSyncCommittee%60%20it%20also%20persists%20beacon%20state%20syncCommittee%20by%20calling%20%60beaconState.SetNextSyncCommittee(nextSyncCommittee)%60%20in%20%5Bsetters_sync_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fstate%2Fstate-native%2Fsetters_sync_committee.go)%0A%20%20-%20%5Bsync_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Fsync_committee.go)%3A%20includes%20function%20%60NextSyncCommittee%60%20which%20calls%20%60NextSyncCommittee%60%20to%20return%20the%20sync%20committee%20indices%2C%20with%20possible%20duplicates%2C%20for%20the%20next%20sync%20committee.%0A%20%20-%20%5Bblock.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Fblock.go)%3A%20includes%20function%20%60VerifySyncCommitteeSig%60%0A-%20%5Bbeacon-chain%2Fcore%2Fhelpers%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Fhelpers)%0A%20%20-%20%5Bbeacon_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Fhelpers%2Fbeacon_committee.go)%20has%20function%20%60UpdateCommitteeCache%60%20which%20gets%20called%20at%20the%20beginning%20of%20every%20epoch%20to%20cache%20the%20committee%20shuffled%20indices%20list%20with%20committee%20index%20and%20epoch%20number.%20It%20caches%20the%20shuffled%20indices%20for%20current%20epoch%20and%20next%20epoch.%20it%20calls%20%60UpdatePositionsInCommittee%60%20in%20%5Bsync_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcache%2Fsync_committee.go)%0A-%20%5Bbeacon-chain%2Fcache%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcache)%0A%20%20-%20%5Bsync_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcache%2Fsync_committee.go)%3A%20has%20function%20%60UpdatePositionsInCommittee%60%20which%20updates%20caching%20of%20validators%20position%20in%20sync%20committee%20in%20respect%20to%20current%20epoch%20and%20next%20epoch.%20This%20should%20be%20called%20when%20%60current_sync_committee%60%20and%20%60next_sync_committee%60%20change%20and%20that%20happens%20every%20%60EPOCHS_PER_SYNC_COMMITTEE_PERIOD%60.%0A%0A**Sync%20Committee%20Retrieval**%0AgRPC%20and%20API%20methods%0A%0A-%20%5Bbeacon-chain%2Frpc%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Frpc)%0A%20%20-%20%5Bprysm%2Fv1alpha1%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1)%0A%20%20%20%20-%20%5Bvalidator%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1%2Fvalidator)%0A%20%20%20%20%20%20-%20%5Bassignments.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1%2Fvalidator%2Fassignments.go)%3A%20has%20functions%20%60GetDuties%60%20and%20%60StreamDuties%60%20which%20calls%20function%20%60duties%60%20to%20compute%20the%20validator%20duties%20from%20the%20head%20state's%20corresponding%20epoch%20for%20validators%20public%20key%20%2F%20indices%20requested.%0A%0Awhich%20%5Bmanages%20sync%20committee%20duties%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1%2Fvalidator%2Fassignments.go%23L213)%20every%20%60EPOCHS_PER_SYNC_COMMITTEE_PERIOD%20-%201%60%20which%20is%20set%20in%20%5Bconfig.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconfig%2Fparams%2Fconfig.go%23L185)%20currently%20255%20epochs%20per%20synch%20comittee%20(approx%2027%20hrs)%20for%20Ethreum%20Mainnet.%0A%0A%5BregisterSyncSubnetNextPeriod%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1%2Fvalidator%2Fassignments.go%23L281)%0A%0A%60%60%60%0A%0Afunc%20registerSyncSubnetNextPeriod(s%20beaconState.BeaconState%2C%20epoch%20types.Epoch%2C%20pubKey%20%5B%5Dbyte%2C%20status%20ethpb.ValidatorStatus)%20error%20%7B%0Acommittee%2C%20err%20%3A%3D%20s.NextSyncCommittee()%0Aif%20err%20!%3D%20nil%20%7B%0Areturn%20err%0A%7D%0AsyncCommPeriod%20%3A%3D%20slots.SyncCommitteePeriod(epoch)%0AregisterSyncSubnet(epoch%2C%20syncCommPeriod%2B1%2C%20pubKey%2C%20committee%2C%20status)%0Areturn%20nil%0A%7D%0A%0A%60%60%60%0A%0A**Sync%20Committee%20Storage**%0A%0APersistence%20Mechanism%0A%0A-%20%5Bproto%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fproto)%0A%20%20-%20%5Beth%2Fv2%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fproto%2Feth%2Fv2)%0A%20%20%20%20-%20%5Bvalidator.proto%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Feth%2Fv2%2Fvalidator.proto)%3A%20messages%20for%20validators%20including%20%60SyncCommitteeDuty%60%0A%20%20%20%20-%20%5Bsync_committee.proto%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Feth%2Fv2%2Fsync_committee.proto)%3A%20messages%20for%20SyncCommittee%20which%20serves%20as%20committees%20to%20facilitate%20light%20client%20syncing%20to%20beacon%20chain.%0A%0A%5Bbeacon_state_mainnet.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fstate%2Fstate-native%2Fbeacon_state_mainnet.go)%0A%0A%60%60%60%0A%0A%2F%2F%20BeaconState%20defines%20a%20struct%20containing%20utilities%20for%20the%20Ethereum%20Beacon%20Chain%20state%2C%20defining%0A%2F%2F%20getters%20and%20setters%20for%20its%20respective%20values%20and%20helpful%20functions%20such%20as%20HashTreeRoot().%0Atype%20BeaconState%20struct%20%7B%0Aversion%20int%0AgenesisTime%20uint64%0AgenesisValidatorsRoot%20%5B32%5Dbyte%0Aslot%20eth2types.Slot%0Afork%20*ethpb.Fork%0AlatestBlockHeader%20*ethpb.BeaconBlockHeader%0AblockRoots%20*customtypes.BlockRoots%0AstateRoots%20*customtypes.StateRoots%0AhistoricalRoots%20customtypes.HistoricalRoots%0Aeth1Data%20*ethpb.Eth1Data%0Aeth1DataVotes%20%5B%5D*ethpb.Eth1Data%0Aeth1DepositIndex%20uint64%0Avalidators%20%5B%5D*ethpb.Validator%0Abalances%20%5B%5Duint64%0ArandaoMixes%20*customtypes.RandaoMixes%0Aslashings%20%5B%5Duint64%0ApreviousEpochAttestations%20%5B%5D*ethpb.PendingAttestation%0AcurrentEpochAttestations%20%5B%5D*ethpb.PendingAttestation%0ApreviousEpochParticipation%20%5B%5Dbyte%0AcurrentEpochParticipation%20%5B%5Dbyte%0AjustificationBits%20bitfield.Bitvector4%0ApreviousJustifiedCheckpoint%20*ethpb.Checkpoint%0AcurrentJustifiedCheckpoint%20*ethpb.Checkpoint%0AfinalizedCheckpoint%20*ethpb.Checkpoint%0AinactivityScores%20%5B%5Duint64%0AcurrentSyncCommittee%20*ethpb.SyncCommittee%0AnextSyncCommittee%20*ethpb.SyncCommittee%0AlatestExecutionPayloadHeader%20*enginev1.ExecutionPayloadHeader%0AlatestExecutionPayloadHeaderCapella%20%5C*enginev1.ExecutionPayloadHeaderCapella%0AnextWithdrawalIndex%20uint64%0AnextWithdrawalValidatorIndex%20eth2types.ValidatorIndex%0A%0Alock%20sync.RWMutex%0AdirtyFields%20map%5Bnativetypes.FieldIndex%5Dbool%0AdirtyIndices%20map%5Bnativetypes.FieldIndex%5D%5B%5Duint64%0AstateFieldLeaves%20map%5Bnativetypes.FieldIndex%5D*fieldtrie.FieldTrie%0ArebuildTrie%20map%5Bnativetypes.FieldIndex%5Dbool%0AvalMapHandler%20*stateutil.ValidatorMapHandler%0AmerkleLayers%20%5B%5D%5B%5D%5B%5Dbyte%0AsharedFieldReferences%20map%5Bnativetypes.FieldIndex%5D%5C*stateutil.Reference%0A%7D%0A%0A%60%60%60%0A%0A%5Bbeacon_state.pb.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Fprysm%2Fv1alpha1%2Fbeacon_state.pb.go%23L962)%0A%0A%60%60%60%0A%0Atype%20SyncCommittee%20struct%20%7B%0Astate%20protoimpl.MessageState%0AsizeCache%20protoimpl.SizeCache%0AunknownFields%20protoimpl.UnknownFields%0A%0APubkeys%20%5B%5D%5B%5Dbyte%20%60protobuf%3A%22bytes%2C1%2Crep%2Cname%3Dpubkeys%2Cproto3%22%20json%3A%22pubkeys%2Comitempty%22%20ssz-size%3A%22512%2C48%22%60%0AAggregatePubkey%20%5B%5Dbyte%20%60protobuf%3A%22bytes%2C2%2Copt%2Cname%3Daggregate_pubkey%2Cjson%3DaggregatePubkey%2Cproto3%22%20json%3A%22aggregate_pubkey%2Comitempty%22%20ssz-size%3A%2248%22%60%0A%7D%0A%0A%60%60%60%0A%0A%5BInterfaces%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fstate%2Finterfaces.go)%0A%0A%60%60%60%0A%0A%2F%2F%20BeaconState%20has%20read%20and%20write%20access%20to%20beacon%20state%20methods.%0Atype%20BeaconState%20interface%20%7B%0ASpecParametersProvider%0AReadOnlyBeaconState%0AReadOnlyWithdrawals%0AWriteOnlyBeaconState%0ACopy()%20BeaconState%0AHashTreeRoot(ctx%20context.Context)%20(%5B32%5Dbyte%2C%20error)%0AFutureForkStub%0AStateProver%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0A%2F%2F%20StateProver%20defines%20the%20ability%20to%20create%20Merkle%20proofs%20for%20beacon%20state%20fields.%0Atype%20StateProver%20interface%20%7B%0AFinalizedRootProof(ctx%20context.Context)%20(%5B%5D%5B%5Dbyte%2C%20error)%0ACurrentSyncCommitteeProof(ctx%20context.Context)%20(%5B%5D%5B%5Dbyte%2C%20error)%0ANextSyncCommitteeProof(ctx%20context.Context)%20(%5B%5D%5B%5Dbyte%2C%20error)%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0A%60%60%60%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./ethereum-BOdEYrBm.js"),[]),path:"/research/chains/ethereum.html",type:"mdx",filePath:"research/chains/ethereum.mdx",content:"%23%20Ethereum%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AWith%20the%20Introduction%20of%20Ethereum%202.0%3Csup%3E%5B1%5D(%23bp1)%3C%2Fsup%3E%20%3Csup%3E%5B2%5D(%23bp2)%3C%2Fsup%3E%20%3Csup%3E%5B3%5D(%23bp3)%3C%2Fsup%3E%20block%20production%20and%20consensus%20were%20separated%3Csup%3E%5B4%5D(%23bp4)%3C%2Fsup%3E%20into%20execution%20clients%3Csup%3E%5B5%5D(%23bp5)%3C%2Fsup%3E%20and%20consensus%20clients%3Csup%3E%5B6%5D(%23ts6)%3C%2Fsup%3E%20%3Csup%3E%5B7%5D(%23bp7)%3C%2Fsup%3E.%0A%0AThe%20execution%20chain%20implemented%20a%20simplified%20Proof%20of%20Work%3Csup%3E%5B1%5D(%23bp1)%3C%2Fsup%3E%20reducing%20difficutly%20to%20zero%20and%20removing%20the%20need%20for%20omners%20(uncles)%20which%20would%20now%20be%20handled%20by%20the%20beacon%20chain%3Csup%3E%5B3%5D(%23bp3)%3C%2Fsup%3E%20which%20is%20responsible%20for%20providing%20consensus%20%3Csup%3E%5B2%5D(%23bp2)%3C%2Fsup%3E.%0A%0ALight%20Clients%3Csup%3E%5B11%5D(%23ts11)%3C%2Fsup%3E%20were%20also%20introduced.%20To%20facilate%20this%0Aa%20sync%20committee%20of%20512%20current%20validators%20is%20elected%20every%20255%20epochs%2C%20approximately%20every%2027%20hours%20(see%20%5Bsample%20sync%20comittee%20data%5D(%23sync-committee-latest))%2C%20they%20are%20responsible%20for%20signing%20each%20block.%0A%0AAs%20at%20December%2011th%2C%202022%20Ethereum%20has%20487%2C920%20validators%3Csup%3E%5B8%5D(%23bp8)%3C%2Fsup%3E%20with%20a%20sample%20epoch%20(%5B166581%5D(https%3A%2F%2Fbeaconcha.in%2Fepoch%2F166581))%20and%20slot%20(%5B5%2C330%2C592%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5330592))%20having%20%5B139%20transactions%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5330592%23transactions)%20with%20%5B19%2C227%20votes%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5330592%23votes)%20from%2063%20committees%20and%20%5B126%20aggregated%20committe%20attestations%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5330592%23attestations).%0A%0AHere%20is%20more%20information%20on%20the%20upgrade%3Csup%3E%5B9%5D(%23bp9)%3C%2Fsup%3E%20and%20the%20roadmap%3Csup%3E%5B10%5D(%23bp10)%3C%2Fsup%3E%0A%0A!%5BEthereum%20Roadmap%5D(%2Fimages%2Fresearch%2Fethereum-roadmap.jpg%20%22Ethereum%20Roadmap%22)%0A%0A%23%23%20Consensus%20Mechanism%0A%0AEthreum%20uses%20Proof%20of%20Stake%20(PoS).%20Here%20we%20give%20an%20overview%20of%20Proof%20of%20Stake%20Followed%20by%20a%20deep%20dive%20into%20synch%20committees.%0AFollowing%20is%20an%20excerpt%20from%20%5BEthereum%20Orgs%20Proof%20of%20Stake%20document%5D(Proof-of-stake%20%22PoS%22)%0A%0A%3E%20**What%20is%20proof-of-stake%20(PoS)%3F**%0A%0A%3E%20Proof-of-stake%20underlies%20certain%20consensus%20mechanisms%20used%20by%20blockchains%20to%20achieve%20distributed%20consensus.%20In%20proof-of-work%2C%20miners%20prove%20they%20have%20capital%20at%20risk%20by%20expending%20energy.%20Ethereum%20uses%20proof-of-stake%2C%20where%20validators%20explicitly%20stake%20capital%20in%20the%20form%20of%20ETH%20into%20a%20smart%20contract%20on%20Ethereum.%20This%20staked%20ETH%20then%20acts%20as%20collateral%20that%20can%20be%20destroyed%20if%20the%20validator%20behaves%20dishonestly%20or%20lazily.%20The%20validator%20is%20then%20responsible%20for%20checking%20that%20new%20blocks%20propagated%20over%20the%20network%20are%20valid%20and%20occasionally%20creating%20and%20propagating%20new%20blocks%20themselves.%0A%0A%3E%20Proof-of-stake%20comes%20with%20a%20number%20of%20improvements%20to%20the%20now-deprecated%20proof-of-work%20system%3A%0A%0A%3E%20-%20better%20energy%20efficiency%20%E2%80%93%20there%20is%20no%20need%20to%20use%20lots%20of%20energy%20on%20proof-of-work%20computations%0A%3E%20-%20lower%20barriers%20to%20entry%2C%20reduced%20hardware%20requirements%20%E2%80%93%20there%20is%20no%20need%20for%20elite%20hardware%20to%20stand%20a%20chance%20of%20creating%20new%20blocks%0A%3E%20-%20reduced%20centralization%20risk%20%E2%80%93%20proof-of-stake%20should%20lead%20to%20more%20nodes%20securing%20the%20network%0A%3E%20-%20because%20of%20the%20low%20energy%20requirement%20less%20ETH%20issuance%20is%20required%20to%20incentivize%20participation%0A%3E%20-%20economic%20penalties%20for%20misbehaviour%20make%2051%25%20style%20attacks%20exponentially%20more%20costly%20for%20an%20attacker%20compared%20to%20proof-of-work%0A%3E%20-%20the%20community%20can%20resort%20to%20social%20recovery%20of%20an%20honest%20chain%20if%20a%2051%25%20attack%20were%20to%20overcome%20the%20crypto-economic%20defenses.%0A%0A%23%23%23%20Block%20Production%0A%0AValidators%20run%20both%20an%20Ethereum%201%20client%20(e.g.%20geth)%20and%20a%20Beacon%20Chain%20Client%20(e.g.%20prysm).%20The%20geth%20client%20recieves%20transactions%20and%20places%20them%20into%20blocks.%20For%20additional%20details%20see%20the%20Ethereum%20Builder%20Specs%3Csup%3E%5B12%5D(%23ts12)%3C%2Fsup%3E.%20The%20following%20diagrams%20give%20an%20overview%20of%20how%20blocks%20are%20proposed%20and%20how%20MEV%20Boost%3Csup%3E%5B13%5D(%23ts13)%3C%2Fsup%3E%20could%20be%20integrated.%20For%20simplification%20we%20can%20replace%20mev_boost%20and%20relay%20with%20geth%20in%20the%20block%20proposal%20diagram%20as%20the%20majority%20of%20validators%20simply%20run%20a%20geth%20node.%0A%0A!%5BBlock%20Proposal%5D(%2Fimages%2Fresearch%2Fblock-proposal.png%20%22Block%20Proposal%22)%0A%0A%23%23%23%20Slots%20and%20Epochs%20%3Csup%3E%5B6%5D(%23ts6a)%3C%2Fsup%3E%0A%0A%3E%20The%20Beacon%20Chain%20provides%20the%20heartbeat%20to%20Ethereum%E2%80%99s%20consensus.%20Each%20slot%20is%2012%20seconds%20and%20an%20epoch%20is%2032%20slots%3A%206.4%20minutes.%0A%0A!%5BSlots%20and%20Epochs%5D(%2Fimages%2Fresearch%2FBeacon-Chain-Slots-and-Epochs.png.webp%20%22Slots%20and%20Epochs%22)%0A%0A%23%23%23%20Block%20Proposals%0A%0AWhen%20a%20validator%20is%20nominated%20as%20a%20proposer%20for%20a%20slot%20in%20an%20Epoch%20they%20propose%20a%20block%20gathered%20from%20there%20Ethereum%201%20client.%0A%0AThis%20proposed%20block%20is%20attested%20to%20by%20other%20validators%20who%20have%20been%20assigned%20as%20committe%20members%20for%20this%20slot%3Csup%3E%5B6b%5D(%23ts6b)%3C%2Fsup%3E.%0A%0A%3E%20A%20block%20proposer%20is%20a%20validator%20that%20has%20been%20pseudorandomly%20selected%20to%20build%20a%20block.%0A%3E%0A%3E%20Most%20of%20the%20time%2C%20validators%20are%20attesters%20that%20vote%20on%20blocks.%20These%20votes%20are%20recorded%20in%20the%20Beacon%20Chain%20and%20determine%20the%20head%20of%20the%20Beacon%20Chain.%0A%0A!%5BValidators%20and%20Attestations%5D(%2Fimages%2Fresearch%2FBeacon-Chain-Validators.png%20%22Validators%20and%20Attestations%22)%0A%0A%23%23%23%20Committees%0A%0A%3E%20A%20committee%20is%20a%20group%20of%20validators.%20For%20security%2C%20each%20slot%20has%20committees%20of%20at%20least%20128%20validators.%20An%20attacker%20has%20less%20than%20a%20one%20in%20a%20trillion%20probability%20of%20controlling%20%E2%85%94%20of%20a%20committee.%0A%3E%0A%3E%20The%20concept%20of%20a%20randomness%20beacon%20that%20emits%20random%20numbers%20for%20the%20public%2C%20lends%20its%20name%20to%20the%20Ethereum%20Beacon%20Chain.%20The%20Beacon%20Chain%20enforces%20consensus%20on%20a%20pseudorandom%20process%20called%20RANDAO.%0A%0A!%5BCommittees%5D(%2Fimages%2Fresearch%2FBeacon-Chain-RANDAO.png%20%22Committees%22)%0A%0A%23%23%23%20Attestations%0A%0AThe%20attestation%20lifecyle%3Csup%3E%5B9%5D(%23ts9)%3C%2Fsup%3E%20involves%0A%0A1.%20Generation%20of%20the%20proposed%20Block%0A2.%20Propagation%20of%20the%20block%20to%20committee%20members%20to%20vote%20on%20and%20sign%0A3.%20Aggregation%20of%20the%20votes%20(signatures)%20of%20the%20committee%20members%20by%20Aggregators%0A4.%20Propagation%20of%20the%20aggregated%20attestations%20back%20to%20the%20block%20Proposer%0A5.%20Inclusion%20of%20the%20block%20in%20the%20Beaconchain%0A%0A!%5BAttestation%20Life%20Cycle%5D(%2Fimages%2Fresearch%2FAttestationLifeCycle.png%20%22Attestation%20Life%20Cycle%22)%0A%0A%23%23%23%20Checkpoints%20and%20Finality%3Csup%3E%5B6%5D(%23ts6)%3C%2Fsup%3E%0A%0A%3E%20When%20an%20epoch%20ends%2C%20if%20its%20checkpoint%20has%20garnered%20a%20%E2%85%94%20supermajority%2C%20the%20checkpoint%20gets%20justified.%0A%0A!%5BCheckpoints%5D(%2Fimages%2Fresearch%2FBeacon-Chain-Checkpoints.jpg%20%22Checkpoints%22)%0A%0A%3E%20If%20a%20checkpoint%20B%20is%20justified%20and%20the%20checkpoint%20in%20the%20immediate%20next%20epoch%20becomes%20justified%2C%20then%20B%20becomes%20finalized.%20Typically%2C%20a%20checkpoint%20is%20finalized%20in%20two%20epochs%2C%2012.8%20minutes.%0A%0A!%5BFinality%5D(%2Fimages%2Fresearch%2FBeacon-Chain-Justification-and-Finalization.png%20%22Finality%22)%0A%0A%23%23%23%20Sync%20Committee%20%3Csup%3E%5B10%5D(%23ts10)%3C%2Fsup%3E%0A%0AA%20sync%20committee%20of%20512%20current%20validators%20is%20elected%20every%20255%20epochs%2C%20approximately%20every%2027%20hours%20(see%20%5Bsample%20sync%20comittee%20data%5D(%23sync-committee-latest)).%0AThey%20are%20responsible%20for%20signing%20each%20block%20which%20records%20which%20sync%20committee%20members%20(validtors)%20signed%20the%20block%2C%20held%20in%20%60syncaggregate_bits%60%2C%20and%20creates%20a%20bls%20aggregate%20signature%20held%20in%20%60syncaggregate_signature%60%20(see%20%5Bblock-data%5D(%23block-data-for-slot-5330592)).%0A%0A%60%60%60%0A%20%20%20%20%22syncaggregate_bits%22%3A%20%220xdffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffdfffffffffffffffdffffffffffffffffffffffff%22%2C%0A%20%20%20%20%22syncaggregate_participation%22%3A%200.9921875%2C%0A%20%20%20%20%22syncaggregate_signature%22%3A%20%220x95332c55790018eed3d17eada01cb4045348d09137505bc8697eeedaa3800a830ee2c138251850a9577f62a5488419ef0a722579156a177fb3a147017f1077af5d778f46a4cdf815fc450129d135fe5286e16df68333592e4aa45821bde780dd%22%2C%0A%60%60%60%0A%0AThis%20is%20used%20in%20Altair%20Light%20Client%20--%20Sync%20Protocol%3Csup%3E%5B11%5D(%23ts11)%3C%2Fsup%3E%20which%20enables%20the%20beacon%20chain%20to%20be%20light%20client%20friendly%20for%20constrained%20environments%20to%20access%20Ethereum.%0A%0A%23%23%23%20Validator%20Lifecycle%0A%0AFollowing%20is%20an%20overview%20of%20statuses%20for%20validators%20in%20Ethereum%202.0%20phase%200%20%3Csup%3E%5B14%5D(%23ts14)%3C%2Fsup%3E.%0A%0A%3E%201.%20**Deposited**%3A%20the%20validator%20has%20made%20a%20deposit%20and%20has%20registered%20in%20BeaconState.%0A%3E%202.%20**Eligible%20to%20be%20activated%20(Pending)**%3A%20the%20validator%20is%20eligible%20to%20be%20activated.%0A%3E%203.%20**Activated**%3A%20the%20validator%20is%20activated%0A%3E%20%20%20%20-%20_Note%20that%20the%20validator%20may%20be%20%E2%80%9Celigible%20to%20be%20activated%2C%20but%20has%20not%20been%20activated%20yet%E2%80%9D._%0A%3E%204.%20**Slashed**%3A%20the%20validator%20has%20been%20slashed%0A%3E%205.%20**Exited**%3A%20the%20validator%20is%20exited%0A%3E%206.%20**Withdrawable**%3A%20the%20validator%20is%20withdrawable%0A%3E%20%20%20%20-%20_Note%20that%20the%20validator%20will%20be%20able%20to%20withdraw%20to%20EEs%20in%20phase%202_%0A%3E%0A%3E%20_Note%20that%20in%20some%20cases%2C%20a%20validator%20can%20be%20in%20multiple%20statuses%20at%20the%20same%20time%2C%20e.g.%2C%20an%20active%20validator%20may%20be%20%E2%80%9Cactivated%20and%20slashed%E2%80%9D._%0A%0A!%5BValidator%20Status%20Transition%5D(%2Fimages%2Fresearch%2FValidatorStateTransition.png%20%22Validator%20Status%20Transition%22)%0A%0A%23%23%20Light%20Client%20Support%0A%0A**Light%20client%20state%20updates**%0A%0A-%20A%20light%20client%20receives%20objects%20of%20type%20%60LightClientUpdate%60%2C%20%60LightClientFinalityUpdate%60%20and%20%60LightClientOptimisticUpdate%60%3A%0A%20%20-%20**%60update%3A%20LightClientUpdate%60**%3A%20Every%20%60update%60%20triggers%20%60process_light_client_update(store%2C%20update%2C%20current_slot%2C%20genesis_validators_root)%60%20where%20%60current_slot%60%20is%20the%20current%20slot%20based%20on%20a%20local%20clock.%0A%20%20-%20**%60finality_update%3A%20LightClientFinalityUpdate%60**%3A%20Every%20%60finality_update%60%20triggers%20%60process_light_client_finality_update(store%2C%20finality_update%2C%20current_slot%2C%20genesis_validators_root)%60.%0A%20%20-%20**%60optimistic_update%3A%20LightClientOptimisticUpdate%60**%3A%20Every%20%60optimistic_update%60%20triggers%20%60process_light_client_optimistic_update(store%2C%20optimistic_update%2C%20current_slot%2C%20genesis_validators_root)%60.%0A-%20%60process_light_client_store_force_update%60%20MAY%20be%20called%20based%20on%20use%20case%20dependent%20heuristics%20if%20light%20client%20sync%20appears%20stuck.%0A%0A**validate_light_client_update**%0A%0A%60%60%60python%0Adef%20validate_light_client_update(store%3A%20LightClientStore%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20update%3A%20LightClientUpdate%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20current_slot%3A%20Slot%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20genesis_validators_root%3A%20Root)%20-%3E%20None%3A%0A%20%20%20%20%23%20Verify%20sync%20committee%20has%20sufficient%20participants%0A%20%20%20%20sync_aggregate%20%3D%20update.sync_aggregate%0A%20%20%20%20assert%20sum(sync_aggregate.sync_committee_bits)%20%3E%3D%20MIN_SYNC_COMMITTEE_PARTICIPANTS%0A%0A%20%20%20%20%23%20Verify%20update%20does%20not%20skip%20a%20sync%20committee%20period%0A%20%20%20%20assert%20is_valid_light_client_header(update.attested_header)%0A%20%20%20%20update_attested_slot%20%3D%20update.attested_header.beacon.slot%0A%20%20%20%20update_finalized_slot%20%3D%20update.finalized_header.beacon.slot%0A%20%20%20%20assert%20current_slot%20%3E%3D%20update.signature_slot%20%3E%20update_attested_slot%20%3E%3D%20update_finalized_slot%0A%20%20%20%20store_period%20%3D%20compute_sync_committee_period_at_slot(store.finalized_header.beacon.slot)%0A%20%20%20%20update_signature_period%20%3D%20compute_sync_committee_period_at_slot(update.signature_slot)%0A%20%20%20%20if%20is_next_sync_committee_known(store)%3A%0A%20%20%20%20%20%20%20%20assert%20update_signature_period%20in%20(store_period%2C%20store_period%20%2B%201)%0A%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20assert%20update_signature_period%20%3D%3D%20store_period%0A%0A%20%20%20%20%23%20Verify%20update%20is%20relevant%0A%20%20%20%20update_attested_period%20%3D%20compute_sync_committee_period_at_slot(update_attested_slot)%0A%20%20%20%20update_has_next_sync_committee%20%3D%20not%20is_next_sync_committee_known(store)%20and%20(%0A%20%20%20%20%20%20%20%20is_sync_committee_update(update)%20and%20update_attested_period%20%3D%3D%20store_period%0A%20%20%20%20)%0A%20%20%20%20assert%20(%0A%20%20%20%20%20%20%20%20update_attested_slot%20%3E%20store.finalized_header.beacon.slot%0A%20%20%20%20%20%20%20%20or%20update_has_next_sync_committee%0A%20%20%20%20)%0A%0A%20%20%20%20%23%20Verify%20that%20the%20%60finality_branch%60%2C%20if%20present%2C%20confirms%20%60finalized_header%60%0A%20%20%20%20%23%20to%20match%20the%20finalized%20checkpoint%20root%20saved%20in%20the%20state%20of%20%60attested_header%60.%0A%20%20%20%20%23%20Note%20that%20the%20genesis%20finalized%20checkpoint%20root%20is%20represented%20as%20a%20zero%20hash.%0A%20%20%20%20if%20not%20is_finality_update(update)%3A%0A%20%20%20%20%20%20%20%20assert%20update.finalized_header%20%3D%3D%20LightClientHeader()%0A%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20if%20update_finalized_slot%20%3D%3D%20GENESIS_SLOT%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20assert%20update.finalized_header%20%3D%3D%20LightClientHeader()%0A%20%20%20%20%20%20%20%20%20%20%20%20finalized_root%20%3D%20Bytes32()%0A%20%20%20%20%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20assert%20is_valid_light_client_header(update.finalized_header)%0A%20%20%20%20%20%20%20%20%20%20%20%20finalized_root%20%3D%20hash_tree_root(update.finalized_header.beacon)%0A%20%20%20%20%20%20%20%20assert%20is_valid_merkle_branch(%0A%20%20%20%20%20%20%20%20%20%20%20%20leaf%3Dfinalized_root%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20branch%3Dupdate.finality_branch%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20depth%3Dfloorlog2(FINALIZED_ROOT_INDEX)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20index%3Dget_subtree_index(FINALIZED_ROOT_INDEX)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20root%3Dupdate.attested_header.beacon.state_root%2C%0A%20%20%20%20%20%20%20%20)%0A%0A%20%20%20%20%23%20Verify%20that%20the%20%60next_sync_committee%60%2C%20if%20present%2C%20actually%20is%20the%20next%20sync%20committee%20saved%20in%20the%0A%20%20%20%20%23%20state%20of%20the%20%60attested_header%60%0A%20%20%20%20if%20not%20is_sync_committee_update(update)%3A%0A%20%20%20%20%20%20%20%20assert%20update.next_sync_committee%20%3D%3D%20SyncCommittee()%0A%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20if%20update_attested_period%20%3D%3D%20store_period%20and%20is_next_sync_committee_known(store)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20assert%20update.next_sync_committee%20%3D%3D%20store.next_sync_committee%0A%20%20%20%20%20%20%20%20assert%20is_valid_merkle_branch(%0A%20%20%20%20%20%20%20%20%20%20%20%20leaf%3Dhash_tree_root(update.next_sync_committee)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20branch%3Dupdate.next_sync_committee_branch%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20depth%3Dfloorlog2(NEXT_SYNC_COMMITTEE_INDEX)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20index%3Dget_subtree_index(NEXT_SYNC_COMMITTEE_INDEX)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20root%3Dupdate.attested_header.beacon.state_root%2C%0A%20%20%20%20%20%20%20%20)%0A%0A%20%20%20%20%23%20Verify%20sync%20committee%20aggregate%20signature%0A%20%20%20%20if%20update_signature_period%20%3D%3D%20store_period%3A%0A%20%20%20%20%20%20%20%20sync_committee%20%3D%20store.current_sync_committee%0A%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20sync_committee%20%3D%20store.next_sync_committee%0A%20%20%20%20participant_pubkeys%20%3D%20%5B%0A%20%20%20%20%20%20%20%20pubkey%20for%20(bit%2C%20pubkey)%20in%20zip(sync_aggregate.sync_committee_bits%2C%20sync_committee.pubkeys)%0A%20%20%20%20%20%20%20%20if%20bit%0A%20%20%20%20%5D%0A%20%20%20%20fork_version%20%3D%20compute_fork_version(compute_epoch_at_slot(update.signature_slot))%0A%20%20%20%20domain%20%3D%20compute_domain(DOMAIN_SYNC_COMMITTEE%2C%20fork_version%2C%20genesis_validators_root)%0A%20%20%20%20signing_root%20%3D%20compute_signing_root(update.attested_header.beacon%2C%20domain)%0A%20%20%20%20assert%20bls.FastAggregateVerify(participant_pubkeys%2C%20signing_root%2C%20sync_aggregate.sync_committee_signature)%0A%60%60%60%0A%0A**apply_light_client_update**%0A%0A%60%60%60python%0Adef%20apply_light_client_update(store%3A%20LightClientStore%2C%20update%3A%20LightClientUpdate)%20-%3E%20None%3A%0A%20%20%20%20store_period%20%3D%20compute_sync_committee_period_at_slot(store.finalized_header.beacon.slot)%0A%20%20%20%20update_finalized_period%20%3D%20compute_sync_committee_period_at_slot(update.finalized_header.beacon.slot)%0A%20%20%20%20if%20not%20is_next_sync_committee_known(store)%3A%0A%20%20%20%20%20%20%20%20assert%20update_finalized_period%20%3D%3D%20store_period%0A%20%20%20%20%20%20%20%20store.next_sync_committee%20%3D%20update.next_sync_committee%0A%20%20%20%20elif%20update_finalized_period%20%3D%3D%20store_period%20%2B%201%3A%0A%20%20%20%20%20%20%20%20store.current_sync_committee%20%3D%20store.next_sync_committee%0A%20%20%20%20%20%20%20%20store.next_sync_committee%20%3D%20update.next_sync_committee%0A%20%20%20%20%20%20%20%20store.previous_max_active_participants%20%3D%20store.current_max_active_participants%0A%20%20%20%20%20%20%20%20store.current_max_active_participants%20%3D%200%0A%20%20%20%20if%20update.finalized_header.beacon.slot%20%3E%20store.finalized_header.beacon.slot%3A%0A%20%20%20%20%20%20%20%20store.finalized_header%20%3D%20update.finalized_header%0A%20%20%20%20%20%20%20%20if%20store.finalized_header.beacon.slot%20%3E%20store.optimistic_header.beacon.slot%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20store.optimistic_header%20%3D%20store.finalized_header%0A%60%60%60%0A%0A**Sample%20Implementation%3A%20NEAR%20Rainbow%20Bridge%20Ethereum%20Light%20Client%20Deployed%20on%20NEAR**%0A%0ABridging%20support%20was%20implemented%20by%20NEAR%20under%20%5BEth2-to-Near-relay%3A%20prototype%20implementation%20%23762%0A%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fpull%2F762)%0A%0A!%5BEthereum%202%20block%20proof%5D(%2Fposts%2F2023-02-05-ethereum-bridging-costs%2FETH_2_0_MMR.jpg%20%22Ethereum%202%20Block%20Proof%22)%0A%0A%3E%20When%20we%20send%20light%20client%20update%20for%20finality%20block%20inside%20light%20client%20update%2C%20we%20also%20send%20Eth1%20execution%20block%20hash%20with%20the%20Merkle%20proof%20of%20include%20to%20Beacon%20Block%20Body.%20Execution%20block%20hash%20you%20can%20find%20at%20BeaconBlockBody.execution_payload.block_hash.%0A%3E%0A%3E%20So%2C%20for%20creating%20Merkle%20proof%2C%20we%20need%20two%20levels%20of%20Merkle%20Tree%2C%20as%20shown%20in%20the%20picture.%20Both%20Merkle%20trees%20you%20can%20find%20in%20beacon_block_body_merkle_tree.rs%20The%20first%20level%20Merkle%20tree%20for%20beacon%20block%20body%20and%20the%20second%20level%20Merkle%20tree%20for%20execution%20payload.%0A%3E%0A%3E%20The%20execution%20block%20hash%20proof%20creation%20you%20can%20find%20in%20execution_block_proof.rs%20First%2C%20we%20build%20two%20Merkle%20trees%20and%20concatenate%20together%20the%20Merkle%20proof%20for%20block_hash%20in%20execution_payload%20and%20the%20Merkle%20proof%20of%20execution_payload%20in%20beacon_block_body.%20The%20final%20Merkle%20proof%20is%20shown%20by%20the%20orange%20vertices%20on%20the%20picture%3B%20the%20orange%20numbers%20in%20the%20picture%20are%20the%20order%20of%20hashes%20in%20the%20proof.%0A%3E%0A%3E%20beacon_block_header_with_execution_data.rs%20contain%20a%20structure%20which%20consists%20of%20beacon_block_header%20and%20correspondent%20execution_block_hash%20with%20Merkle%20proof.%20This%20structure%20is%20created%20for%20finality%20blocks%20in%20a%20light%20client%20update.%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BGasper%20Consensus%20Whitepaper%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F2003.03052.pdf)%3A%20Combining%20GHOST%20and%20Casper%0A-%20%5Bsigp%20lighthouse%20beacon%20block%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_block.rs%23L7)%3A%20Beacon%20Block%20codebase%20(rust)%0A%0A%3Ca%20name%3D%22bp1%22%3E%5B1%5D%3C%2Fa%3E%20%5BEIP-3675%3A%20Upgrade%20consensus%20to%0AProof-of-Stake%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-3675%23pow-block-processing)%3A%0ASpecification%20of%20the%20consensus%20mechanism%20upgrade%20on%20Ethereum%20Mainnet%20that%0Aintroduces%20Proof-of-Stake.%0A%0A%3Ca%20name%3D%22bp2%22%3E%5B2%5D%3C%2Fa%3E%20%5BEIP-2982%3A%20Serenity%20Phase%0A0%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-2982)%3A%20Phase%200%20of%20the%20release%20schedule%20of%0ASerenity%2C%20a%20series%20of%20updates%20to%20Ethereum%20a%20scalable%2C%20proof-of-stake%20consensus.%0A%0A%3Ca%20name%3D%22bp3%22%3E%5B3%5D%3C%2Fa%3E%20%5BEthreum%20Consensus%20Specs%20Phase%0A0%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Ftree%2Fdev%2Fspecs%2Fphase0)%3A%0ASpecifications%20for%20Ethereum%202.0%20Phase%200%20including%0A%5Bbeacon-chain%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fbeacon-chain.mdx)%2C%0A%5Bdeposit-contract%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fdeposit-contract.mdx)%2C%0A%5Bfork-choice%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Ffork-choice.mdx)%2C%0A%5Bp2p-interface%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fp2p-interface.mdx)%2C%0A%5Bvalidator%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fvalidator.mdx)%0Aand%0A%5Bweak-subjectivity%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fweak-subjectivity.mdx)%0A%0A%3Ca%20name%3D%22bp4%22%3E%5B6%5D%3C%2Fa%3E%20%5BEthereum%20Consensus%20and%20Execution%20Client%0ADistribution%5D(https%3A%2F%2Fclientdiversity.org%2F%23distribution)%3A%20Percentages%20of%20nodes%0Arunning%20client%20types%20for%20both%20Consensus%20(Prysm%2C%20Lighthours%2C%20Nimbus%2C%20Teku)%20and%0AExecution%20(Geth%2C%20Erigon%2C%20Besu%2C%20Nethermind)%20clients.%0A%0A%3Ca%20name%3D%22bp5%22%3E%5B5%5D%3C%2Fa%3E%20%5Bgo-ethereum%20go%0Adocumentation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fethereum%2Fgo-ethereum%40v1.10.26)%3A%0ADocumentation%20for%20Go%20Ethereum%2C%20Official%20Golang%20implementation%20of%20the%20Ethereum%0Aprotocol.%20Which%20is%20an%20execution%20chain%20implementation.%0A%0A%3Ca%20name%3D%22bp6%22%3E%5B6%5D%3C%2Fa%3E%20%5Bprysm%20go%0Adocumentation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2)%3A%0ADocumentation%20for%20prysm%2C%20An%20Ethereum%20Consensus%20Implementation%20Written%20in%20Go.%20A%0Abeacon-chain%20immplementation.%20Also%20see%20%5BPrysm%0ADocumentation%5D(https%3A%2F%2Fdocs.prylabs.network%2Fdocs%2Fgetting-started)%0A%0A%3Ca%20name%3D%22bp7%22%3E%5B7%5D%3C%2Fa%3E%20%5Blighthouse%0Adocumentation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2)%3A%0ADocumentation%20for%20lighthouse%2C%20written%20in%20Rust.%20A%20beacon-chain%20immplementation.%0A%0A%3Ca%20name%3D%22bp8%22%3E%5B8%5D%3C%2Fa%3E%20%5BEtherum%202.0%20Validators%0AOverview%5D(https%3A%2F%2Fbeaconcha.in%2Fvalidators)%3A%20Live%20Monitoring%20of%20Ethreum%202.0%0AValidators%20from%20beachoncha.in%0A%0A%3Ca%20name%3D%22bp9%22%3E%5B9%5D%3C%2Fa%3E%20%5BUpgrading%20Ethereum%5D(https%3A%2F%2Feth2book.info%2Fbellatrix%2F)%3A%20A%0Atechnical%20handbook%20on%20Ethereum's%20move%20to%20proof%20of%20stake%20and%20beyond%20Edition%200.2%3A%0ABellatrix%20%5BWIP%5D%20by%20Ben%20Edgington.%0A%0A%3Ca%20name%3D%22bp10%22%3E%5B9%5D%3C%2Fa%3E%20%5BAnnotated%20Ethereum%0ARoadmap%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40domothy%2Froadmap)%3A%20an%20entry%20point%20for%20the%0Avarious%20items%20on%20the%20Ethereum%20roadmap%2C%20with%20a%20quick%20summary%20along%20with%20links%20for%0Athose%20who%20want%20to%20dive%20deeper.%0A%0A%3Ca%20name%3D%22bp11%22%3E%5B10%5D%3C%2Fa%3E%20%5BShanghai%2FCapella%0AUpgrade%5D(https%3A%2F%2Fconsensys.net%2Fshanghai-capella-upgrade%2F)%3A%20the%20first%0Asimultaneous%20upgrade%20of%20Ethereum%E2%80%99s%20execution%20layer%20and%20consensus%20layer%2C%20and%20is%0Ahighly%20anticipated%20because%20it%20will%20enable%20staked%20ETH%20withdrawals.%0A%0A**Signing**%0A%0A-%20%5Bsigp%20lighthouse%20bls%20signing%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Flib.rs)%3A%20BLS%20signing%20codebase%20(rust)%0A%0A**Staking**%0A%0A-%20%5BEthereum%20Staking%5D(https%3A%2F%2Fethereum.org%2Fen%2Fstaking%2F)%3A%20Staking%20User%20Interface%0A-%20%5BApp%20Stakewise%5D(https%3A%2F%2Fapp.stakewise.io%2F)%3A%20Ethreeum%20Staking%20Application%0A-%20%5BPROOF-OF-STAKE%20(POS)%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fconsensus-mechanisms%2Fpos%2F)%3A%20Ethereum%20Proof%20of%20Stake%20Documentation%0A%0A**References%20Technical%20Summary**%0A%0A%3Ca%20name%3D%22ts1%22%3E%5B1%5D%3C%2Fa%3E%20%5BEthereum%20EVM%0Aillustrated%5D(https%3A%2F%2Ftakenobu-hs.github.io%2Fdownloads%2Fethereum_evm_illustrated.pdf)%3A%0AA%20technical%20overview%20of%20Ethereum%20including%20state%2C%20accounts%2C%20transactions%20and%0Amessages%20as%20well%20as%20the%20EVM.%20%5BAppendix%20E%5D(%23appendix-e-data-structures)%20has%20links%0Ato%20type%20definitions%20for%20blocks%2C%20transactions%2C%20state%20etc%20in%20geth.%0A%0A%3Ca%20name%3D%22ts2%22%3E%5B2%5D%3C%2Fa%3E%20%5BBlocks%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fblocks%2F)%3A%0ABlock%20data%20definitions%20including%20attestations%20from%20ethereum.org%0A%0A%3Ca%20name%3D%22ts3%22%3E%5B3%5D%3C%2Fa%3E%20%5Beth1%20block%0Aproposal%5D(https%3A%2F%2Fhackmd.io%2F%40flashbots%2Fmev-in-eth2%23eth1-block-proposal)%3A%0ATechnical%20walkthrough%20of%20how%20blocks%20are%20proposed%20and%20potential%20MEV%20opportunities%0Afrom%20FlashBots.%0A%0A%3Ca%20name%3D%22ts4%22%3E%5B4%5D%3C%2Fa%3E%20%5BAssemble%0ABlock%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Frayonism%2Fblob%2Fmaster%2Fspecs%2Fmerge.md%23assemble-block)%3A%0AEthereum%20Specification%20for%20block%20Assembly%20as%20part%20of%20Rayonism%20--%20The%20Merge%20spec.%0A%0A%3Ca%20name%3D%22ts5%22%3E%5B5%5D%3C%2Fa%3E%20%5BPrysm%20running%20a%0Anode%5D(https%3A%2F%2Fdocs.prylabs.network%2Fdocs%2Finstall%2Finstall-with-script)%3A%0AOperational%20procedures%20for%20Validators%20by%20Prysm.%20Note%20validators%20run%20both%20the%0Abeacon%20chain(consensus)%20and%20a%20geth%20node(execution)%0A%0A%3Ca%20name%3D%22ts6%22%3E%5B6%5D%3C%2Fa%3E%5BThe%20Beacon%20Chain%20Ethereum%202.0%20explainer%20you%20need%20to%20read%0Afirst%5D(https%3A%2F%2Fethos.dev%2Fbeacon-chain)%3A%20Detailed%20walk%20through%20og%20Ethereum%202.0%0Ablock%20production%20including%20slots%2C%20epochs%2C%20validators%2C%20commitees%20and%20finality.%0A%0A%3Ca%20name%3D%22ts6a%22%3E%5B6%5D%3C%2Fa%3E%5BThe%20Beacon%20Chain%20Ethereum%202.0%20explainer%20you%20need%20to%20read%0Afirst%5D(https%3A%2F%2Fethos.dev%2Fbeacon-chain)%3A%20Detailed%20walk%20through%20og%20Ethereum%202.0%0Ablock%20production%20including%20slots%2C%20epochs%2C%20validators%2C%20commitees%20and%20finality.%0A%0A%3Ca%20name%3D%22ts6b%22%3E%5B6%5D%3C%2Fa%3E%5BThe%20Beacon%20Chain%20Ethereum%202.0%20explainer%20you%20need%20to%20read%0Afirst%5D(https%3A%2F%2Fethos.dev%2Fbeacon-chain)%3A%20Detailed%20walk%20through%20og%20Ethereum%202.0%0Ablock%20production%20including%20slots%2C%20epochs%2C%20validators%2C%20commitees%20and%20finality.%0A%0A%3Ca%20name%3D%22ts7%22%3E%5B7%5D%3C%2Fa%3E%20%5BEtherum%202.0%20Validators%0AOverview%5D(https%3A%2F%2Fbeaconcha.in%2Fvalidators)%3A%20Live%20Monitoring%20of%20Ethreum%202.0%0AValidators%20from%20beachoncha.in%0A%0A%3Ca%20name%3D%22ts8%22%3E%5B8%5D%3C%2Fa%3E%5BBLS%0ASignatures%5D(https%3A%2F%2Feth2book.info%2Fbellatrix%2Fpart2%2Fbuilding_blocks%2Fsignatures%2F)%3A%0ADetailed%20walkthrough%20of%20BLS%20Signatures%20and%20how%20they%20can%20be%20used%20in%20aggregation.%0A%0A%3Ca%20name%3D%22ts9%22%3E%5B8%5D%3C%2Fa%3E%5BAttestation%20Inclusion%0ALifecycle%5D(https%3A%2F%2Fkb.beaconcha.in%2Fattestation%23attestation-inclusion-lifecycle)%3A%0AHigh%20Level%20overview%20of%20the%20attestation%20life%20cycle%20including%20geeration%2C%0Apropogation%2C%20aggregation%20and%20inclusion.Attest%0A%0A%3Ca%20name%3D%22ts10%22%3E%5Bts10%5D%3C%2Fa%3E%20%5BBeacon%20Chain%20Proposal%3A%20Sync%0AComittees%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2FHF1_proposal%23Sync-committees)%3A%0AFor%20each%20period%20(~27%20hours)%2C%201024%20validators%20are%20randomly%20selected%20to%20be%20part%20of%0Athe%20sync%20committee%20during%20that%20period.%20Validators%20in%20the%20sync%20committee%20would%0Apublish%20signatures%20attesting%20to%20the%20current%20head.%20These%20signatures%20would%20be%0Abroadcasted%20as%20part%20of%20a%20LightClientUpdate%20object%20that%20could%20help%20light%20clients%0Afind%20the%20head%2C%20and%20would%20be%20included%20in%20the%20beacon%20chain%20to%20be%20rewarded.%0A%0A%3Ca%20name%3D%22ts11%22%3E%5Bts11%5D%3C%2Fa%3E%20%5BAltair%20Light%20Client%20--%20Sync%0AProtocol%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2FHF1_proposal%23Sync-committees)%3A%0AThis%20document%20suggests%20a%20minimal%20light%20client%20design%20for%20the%20beacon%20chain%20that%0Auses%20sync%20committees.%0A%0A%3Ca%20name%3D%22ts12%22%3E%5Bts12%5D%3C%2Fa%3E%20%5BEthereum%20Builder%20Specifications%3A%20Honest%0AValidator%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fbuilder-specs%2Fblob%2Fmain%2Fspecs%2Fvalidator.mdx)%3A%0Aexplains%20the%20way%20in%20which%20a%20beacon%20chain%20validator%20is%20expected%20to%20use%20the%0ABuilder%20spec%20to%20participate%20in%20an%20external%20builder%20network.%0A%0A%3Ca%20name%3D%22ts13%22%3E%5Bts13%5D%3C%2Fa%3E%20%5BFlashbots%3A%0Amev-boost%5D(https%3A%2F%2Fgithub.com%2Fflashbots%2Fmev-boost)%3A%20open%20source%20middleware%20run%0Aby%20validators%20to%20access%20a%20competitive%20block-building%20market.%0A%0A%3Ca%20name%3D%22ts14%22%3E%5Bts14%5D%3C%2Fa%3E%20%5BA%20note%20on%20Ethereum%202.0%20phase%200%20validator%0Alifecycle%5D(https%3A%2F%2Fnotes.ethereum.org%2F7CFxjwMgQSWOHIxLgJP2Bw%23A-note-on-Ethereum-20-phase-0-validator-lifecycle)%3A%0Adescribes%20the%20concept%20of%20validator%20status%20epochs%20and%20the%20cases%20of%20validator%0Alifecycle%20in%20the%20view%20of%20%E2%80%9Cvalidator%20status%20transition%E2%80%9D%20in%20phase%200.%0A%0A**Additional**%0A%0A%23%23%20Appendices%0A%0A%23%23%23%20Appendix%20A%3A%20Ethreum%202.0%20Technical%20Deep%20Dive%0A%0A%23%23%23%23%20Block%20Production%0A%0A**Process%20Flow**%0A%0A-%20Transactions%20are%20placed%20in%20%5Btxpool%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcore%2Ftxpool)%0A-%20The%20transaction%20pool%20is%20read%20and%20%5Bblocks%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fcore%2Ftypes%2Fblock.go%23L169)%20are%20produced%20by%20the%20%5Bminer%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fminer%2Fminer.go)%0A-%20Blocks%20Headers%20get%20forwarded%20to%20the%20Beacon%20chain%20once%20they%20pass%20%5Bbeacon%20consensus%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fconsensus%2Fbeacon%2Fconsensus.go)%0A-%20The%20Beacon%20chain%20embeds%20the%20EthChain%20Header%20into%20a%20%5BBeaconBlock%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconsensus-types%2Fblocks%2Ftypes.go%23L43)%0A%0A%23%23%23%23%20Consensus%20and%20Finality%0A%0AAttestation%20Process%20Flow%0A%0A-%20Proposing%20Block%0A-%20Signing%20Blocks%0A-%20Aggregated%20Attestation%20generation%0A-%20Block%20Proposal%20and%20Inclusion%20of%20Attestation%0A-%20The%20%5BSignedBeaconBlock%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconsensus-types%2Fblocks%2Ftypes.go%23L72)%20is%20added%20to%20the%20chain%0A%0AAttestations%20Block(LMD%20Ghost%20Vote)%20and%20Epoch%20Checkpoints%20(FFG%20Votes)%0A%0A-%20The%20validators%20in%20the%20committee%20attest%20to%20the%20validity%20of%20the%20block%20(LMD%20Ghost%20Vote)%0A-%20The%20validators%20in%20the%20comittee%20attest%20to%20the%20first%20block%20in%20the%20Epoch%20(FFG%20Vote)%0A%0AFrom%20%5BAttestations%2C%20ethereum.org%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fconsensus-mechanisms%2Fpos%2Fattestations)%0A%0A%3E%20Every%20epoch%20(6.4%20minutes)%20a%20validator%20proposes%20an%20attestation%20to%20the%20network.%20The%20attestation%20is%20for%20a%20specific%20slot%20in%20the%20epoch.%20The%20purpose%20of%20the%20attestation%20is%20to%20vote%20in%20favor%20of%20the%20validator's%20view%20of%20the%20chain%2C%20in%20particular%20the%20most%20recent%20justified%20block%20and%20the%20first%20block%20in%20the%20current%20epoch%20(known%20as%20source%20and%20target%20checkpoints).%20This%20information%20is%20combined%20for%20all%20participating%20validators%2C%20enabling%20the%20network%20to%20reach%20consensus%20about%20the%20state%20of%20the%20blockchain.%0A%3E%0A%3E%20The%20attestation%20contains%20the%20following%20components%3A%0A%3E%0A%3E%20-%20aggregation_bits%3A%20a%20bitlist%20of%20validators%20where%20the%20position%20maps%20to%20the%20validator%20index%20in%20their%20committee%3B%20the%20value%20(0%2F1)%20indicates%20whether%20the%20validator%20signed%20the%20data%20(i.e.%20whether%20they%20are%20active%20and%20agree%20with%20the%20block%20proposer)%0A%3E%20-%20data%3A%20details%20relating%20to%20the%20attestation%2C%20as%20defined%20below%0A%3E%20-%20signature%3A%20a%20BLS%20signature%20that%20aggregates%20the%20signatures%20of%20individual%20validators%0A%3E%0A%3E%20The%20first%20task%20for%20an%20attesting%20validator%20is%20to%20build%20the%20data.%20The%20data%20contains%20the%20following%20information%3A%0A%3E%0A%3E%20-%20slot%3A%20The%20slot%20number%20that%20the%20attestation%20refers%20to%0A%3E%20-%20index%3A%20A%20number%20that%20identifies%20which%20committee%20the%20validator%20belongs%20to%20in%20a%20given%20slot%0A%3E%20-%20beacon_block_root%3A%20Root%20hash%20of%20the%20block%20the%20validator%20sees%20at%20the%20head%20of%20the%20chain%20(the%20result%20of%20applying%20the%20fork-choice%20algorithm)%0A%3E%20-%20source%3A%20Part%20of%20the%20finality%20vote%20indicating%20what%20the%20validators%20see%20as%20the%20most%20recent%20justified%20block%0A%3E%20-%20target%3A%20Part%20of%20the%20finality%20vote%20indicating%20what%20the%20validators%20see%20as%20the%20first%20block%20in%20the%20current%20epoch%0A%3E%0A%3E%20Once%20the%20data%20is%20built%2C%20the%20validator%20can%20flip%20the%20bit%20in%20aggregation_bits%20corresponding%20to%20their%20own%20validator%20index%20from%200%20to%201%20to%20show%20that%20they%20participated.%0A%3E%0A%3E%20Finally%2C%20the%20validator%20signs%20the%20attestation%20and%20broadcasts%20it%20to%20the%20network.%0A%0A**Technical%20Details**%0A%0AFollowing%20is%20an%20overview%20of%20the%20state%20structure%20and%20logic%20for%20generating%20committees%20and%20aggregating%20attestations.%20For%20data%20structures%2C%20please%20see%20%5BBeacon%20State%20Data%20Structures%20from%20Prysm%5D(%23beacon-state-data-structures-from-prysm)%20and%20%5Bweb3signer_types%20from%20prysm%5D(%23web3signer_types-from-prysm).%0A%0A%5BBeaconState%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23BeaconState)%20contains%20both%20a%20%5BReadOnlyBeaconState%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23ReadOnlyBeaconState)%20and%20a%20%5BWriteOnlyBeaconState%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23WriteOnlyBeaconState)%20wich%20contain%20%5BReadOnlyValidators%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23ReadOnlyValidators)%20and%20%5BReadOnlyRandaoMixes%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23ReadOnlyRandaoMixes)%20and%20%5BWriteOnlyValidators%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23WriteOnlyValidators)%20and%20%5BWriteOnlyRandaoMixes%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23WriteOnlyRandaoMixes)%20respectively.%0A%0AAt%20the%20beginning%20of%20each%20epoch%20%5Bfunc%20ProcessRandaoMixesReset%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fepoch%23ProcessRandaoMixesReset)%20processes%20the%20final%20updates%20to%20RANDAO%20mix%20during%20epoch%20processing.%20This%20calls%20%5BRandaoMix%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23RandaoMix)%20which%20returns%20the%20randao%20mix%20(xor'ed%20seed)%20of%20a%20given%20slot.%20It%20is%20used%20to%20shuffle%20validators.%0A%0AFollowing%20are%20sample%20mixes%20generated%20from%20%5Bfunc%20TestRandaoMix_OK%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Frandao_test.go%23L16)%20by%20adding%20the%20statement%20%60fmt.Printf(%22mix%3A%20%25v%5Cn%22%2C%20mix)%60%0A%0A%60%60%60%0Amix%3A%20%5B10%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%5D%0Amix%3A%20%5B40%209%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%5D%0Amix%3A%20%5B159%20134%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%5D%0A%60%60%60%0A%0AThe%20shuffle%20functions%20consist%20of%0A%0A-%20%5Bfunc%20ShuffleList%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ShuffleList)%3A%20returns%20list%20of%20shuffled%20indexes%20in%20a%20pseudorandom%20permutation%20%60p%60%20of%20%600...list_size%20-%201%60%20with%20%E2%80%9Cseed%E2%80%9C%20as%20entropy.%20We%20utilize%20'swap%20or%20not'%20shuffling%20in%20this%20implementation%3B%20we%20are%20allocating%20the%20memory%20with%20the%20seed%20that%20stays%20constant%20between%20iterations%20instead%20of%20reallocating%20it%20each%20iteration%20as%20in%20the%20spec.%20This%20implementation%20is%20based%20on%20the%20original%20implementation%20from%20protolambda%2C%20https%3A%2F%2Fgithub.com%2Fprotolambda%2Feth2-shuffle%0A%0A%20%20Following%20is%20an%20example%20of%20a%20shuffled%20list%20generated%20from%20%5BTestShuffleList_OK%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fshuffle_test.go%23L25)%0A%0A%20%20%60%60%60%0A%20%20list1%3A%20%5B0%201%202%203%204%205%206%207%208%209%5D%0A%20%20seed1%3A%20%5B1%20128%2012%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%5D%0A%20%20shuffledList1%3A%20%5B0%207%208%206%203%209%204%205%202%201%5D%0A%20%20%60%60%60%0A%0A-%20%5Bfunc%20ShuffleIndex%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ShuffledIndex)%3A%20returns%20%60p(index)%60%20in%20a%20pseudorandom%20permutation%20%60p%60%20of%20%600...list_size%20-%201%60%20with%20%E2%80%9Cseed%E2%80%9C%20as%20entropy.%20We%20utilize%20'swap%20or%20not'%20shuffling%20in%20this%20implementation%3B%20we%20are%20allocating%20the%20memory%20with%20the%20seed%20that%20stays%20constant%20between%20iterations%20instead%20of%20reallocating%20it%20each%20iteration%20as%20in%20the%20spec.%20This%20implementation%20is%20based%20on%20the%20original%20implementation%20from%20protolambda%2C%20https%3A%2F%2Fgithub.com%2Fprotolambda%2Feth2-shuffle%0A%0A-%20%5Bfunc%20ShuffleIndices%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ShuffledIndices)%3A%20ShuffledIndices%20uses%20input%20beacon%20state%20and%20returns%20the%20shuffled%20indices%20of%20the%20input%20epoch%2C%20the%20shuffled%20indices%20then%20can%20be%20used%20to%20break%20up%20into%20committees.%0A%0ACommittes%20are%20formed%20using%20functions%20from%20%5Bbeacon_comittee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fbeacon_committee.go)%0A%0A-%20%5Bfunc%20BeaconComittee%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23BeaconCommittee)%3A%20returns%20the%20beacon%20committee%20of%20a%20given%20slot%20and%20committee%20index.%20The%20validator%20indices%20and%20seed%20are%20provided%20as%20an%20argument%20rather%20than%20an%20imported%20implementation%20from%20the%20spec%20definition.%20Having%20them%20as%20an%20argument%20allows%20for%20cheaper%20computation%20run%20time.%20(This%20is%20an%20optomized%20version%20of%20%5Bfunc%20BeaconComitteFromState%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23BeaconCommitteeFromState))%0A%0A%20%20Following%20is%20an%20example%20of%20a%20%60beaconComittee%60%20generated%20by%20adding%20the%20following%20lines%20to%20%5BTestBeaconCommitteeFromState_UpdateCacheForPreviousEpoch%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fbeacon_committee_test.go%23L574)%3A%0A%0A%20%20%60%60%60%0A%20%20var%20beaconCommittee%20%5B%5Dtypes.ValidatorIndex%0A%20%20beaconCommittee%2C%20err%20%3D%20BeaconCommitteeFromState(context.Background()%2C%20state%2C%201%20%2F_previous%20epoch_%2F%2C%200)%0A%20%20fmt.Printf(%22beaconComittee%3A%20%25%2Bv%5Cn%22%2C%20beaconCommittee)%0A%20%20%60%60%60%0A%0A%20%20Result%0A%0A%20%20%60%60%60%0A%20%20beaconComittee%3A%20%5B160%20338%20313%20307%20320%20324%2045%20469%20196%20303%2023%2014%2097%20312%20126%20488%5D%0A%20%20%60%60%60%0A%0A-%20%5Bfunc%20CommitteeAssignments%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23CommitteeAssignments)%3A%20is%20a%20map%20of%20validator%20indices%20pointing%20to%20the%20appropriate%20committee%20assignment%20for%20the%20given%20epoch.%0A%20%201.%20Determine%20the%20proposer%20validator%20index%20for%20each%20slot.%0A%20%202.%20Compute%20all%20committees.%0A%20%203.%20Determine%20the%20attesting%20slot%20for%20each%20committee.%0A%20%204.%20Construct%20a%20map%20of%20validator%20indices%20pointing%20to%20the%20respective%20committees.%0A%0A%20%20Following%20is%20an%20example%20of%20%60commitees%60%20generated%20by%20adding%20the%20following%20lines%20to%20%5BTestComputeCommittee_WithoutCache%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fbeacon_committee_test.go%23L23)%0A%0Acommittees%2C%20err%20%3A%3D%20computeCommittee(indices%2C%20seed%2C%200%2C%201%20%2F_%20Total%20committee_%2F)%0A%0A%60%60%60%0A%0Afmt.Printf(%22committees%3A%20%25%2Bv%5Cn%22%2C%20committees)%0A%60%60%60%0A%0A%20%20%20%20%3Cdetails%3E%0A%20%20%20%20%3Csummary%3Eresult%3C%2Fsummary%3E%0A%0A%20%20%20%20%60%60%60%0A%20%20%20%20committeesdetails%3E%0A%0AAttestations%20are%20managed%20using%20functions%20from%20%5Battestation.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fattestation.go)%0A%0A-%20%5Bfunc%20ValidateNilAttestation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ValidateNilAttestation)%3A%20checks%20if%20any%20composite%20field%20of%20input%20attestation%20is%20nil.%20Access%20to%20these%20nil%20fields%20will%20result%20in%20run%20time%20panic%2C%20it%20is%20recommended%20to%20run%20these%20checks%20as%20first%20line%20of%20defense.%0A-%20%5Bfunc%20ValidateSlotTargetEpoch%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ValidateSlotTargetEpoch)%3A%20ValidateSlotTargetEpoch%20checks%20if%20attestation%20data's%20epoch%20matches%20target%20checkpoint's%20epoch.%20It%20is%20recommended%20to%20run%20%60ValidateNilAttestation%60%20first%20to%20ensure%20%60data.Target%60%20can't%20be%20nil.%0A-%20%5Bfunc%20IsAggregator%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23IsAggregator)%3A%20IsAggregator%20returns%20true%20if%20the%20signature%20is%20from%20the%20input%20validator.%20The%20committee%20count%20is%20provided%20as%20an%20argument%20rather%20than%20imported%20implementation%20from%20spec.%20Having%20committee%20count%20as%20an%20argument%20allows%20cheaper%20computation%20at%20run%20time.%0A-%20%5Bfunc%20AggregateSignature%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23AggregateSignature)%3A%20returns%20the%20aggregated%20signature%20of%20the%20input%20attestations.%0A%0A%20%20Spec%20pseudocode%20definition%3A%0A%0A%20%20%60%60%60%0A%20%20def%20get_aggregate_signature(attestations%3A%20Sequence%5BAttestation%5D)%20-%3E%20BLSSignature%3A%0A%20%20signatures%20%3D%20%5Battestation.signature%20for%20attestation%20in%20attestations%5D%0A%20%20return%20bls.Aggregate(signatures)%0A%20%20%60%60%60%0A%0A%20%20Following%20is%20an%20example%20aggregrated%20signature%20by%20adding%20the%20following%20lines%20to%20%5BTestAttestation_AggregateSignature%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fattestation_test.go%23L48)%0A%0A%20%20%60%60%60%0A%20%20aggSig%2C%20err%20%3A%3D%20helpers.AggregateSignature(atts)%0A%20%20fmt.Printf(%22aggSig%3A%20%25%2Bv%5Cn%22%2C%20aggSig)%0A%20%20%60%60%60%0A%0A%20%20Result%0A%0A%20%20%60%60%60%0A%20%20%20%20%20%20aggSig%3A%20%26%7Bs%3A0xc0003fe000%7D%0A%20%20%60%60%60%0A%0A-%20%5Bfunc%20IsAggregated%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23IsAggregated)%3A%20IsAggregated%20returns%20true%20if%20the%20attestation%20is%20an%20aggregated%20attestation%2C%20false%20otherwise.%0A%0A-%20%5Bfunc%20ComputeSubnetForAttestation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ComputeSubnetForAttestation)%3A%20returns%20the%20subnet%20for%20which%20the%20provided%20attestation%20will%20be%20broadcasted%20to.This%20differs%20from%20the%20spec%20definition%20by%20instead%20passing%20in%20the%20active%20validators%20indices%20in%20the%20attestation's%20given%20epoch.%0A%0A%60%60%60%0A%20%20Spec%20pseudocode%20definition%3A%0A%0Adef%20compute_subnet_for_attestation(committees_per_slot%3A%20uint64%2C%20slot%3A%20Slot%2C%20committee_index%3A%20CommitteeIndex)%20-%3E%20uint64%3A%0A%0A%22%22%22%0ACompute%20the%20correct%20subnet%20for%20an%20attestation%20for%20Phase%200.%0ANote%2C%20this%20mimics%20expected%20future%20behavior%20where%20attestations%20will%20be%20mapped%20to%20their%20shard%20subnet.%0A%22%22%22%0Aslots_since_epoch_start%20%3D%20uint64(slot%20%25%20SLOTS_PER_EPOCH)%0Acommittees_since_epoch_start%20%3D%20committees_per_slot%20%5C*%20slots_since_epoch_start%0A%0Areturn%20uint64((committees_since_epoch_start%20%2B%20committee_index)%20%25%20ATTESTATION_SUBNET_COUNT)%0A%0A%60%60%60%0A%0A-%20%5Bfunc%20ComputeSubnetFromCommitteeAndSlot%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ComputeSubnetFromCommitteeAndSlot)%3A%20is%20a%20flattened%20version%20of%20ComputeSubnetForAttestation%20where%20we%20only%20pass%20in%20the%20relevant%20fields%20from%20the%20attestation%20as%20function%20arguments.%0A%0ASpec%20pseudocode%20definition%3A%0A%0A%60%60%60%0A%0Adef%20compute_subnet_for_attestation(committees_per_slot%3A%20uint64%2C%20slot%3A%20Slot%2C%20committee_index%3A%20CommitteeIndex)%20-%3E%20uint64%3A%0A%0A%22%22%22%0ACompute%20the%20correct%20subnet%20for%20an%20attestation%20for%20Phase%200.%0ANote%2C%20this%20mimics%20expected%20future%20behavior%20where%20attestations%20will%20be%20mapped%20to%20their%20shard%20subnet.%0A%22%22%22%0Aslots_since_epoch_start%20%3D%20uint64(slot%20%25%20SLOTS_PER_EPOCH)%0Acommittees_since_epoch_start%20%3D%20committees_per_slot%20%5C*%20slots_since_epoch_start%0A%0Areturn%20uint64((committees_since_epoch_start%20%2B%20committee_index)%20%25%20ATTESTATION_SUBNET_COUNT)%0A%0A%60%60%60%0A%0A-%20%5Bfunc%20ValidateAttestationTime%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ValidateAttestationTime)%3A%20Validates%20that%20the%20incoming%20attestation%20is%20in%20the%20desired%20time%20range.%0A%20%20An%20attestation%20is%20valid%20only%20if%20received%20within%20the%20last%20ATTESTATION_PROPAGATION_SLOT_RANGE%20slots.%0A%0AExample%3A%0A%0A%60%60%60%0A%0AATTESTATION_PROPAGATION_SLOT_RANGE%20%3D%205%0AclockDisparity%20%3D%2024%20seconds%0Acurrent_slot%20%3D%20100%0Ainvalid_attestation_slot%20%3D%2092%0Ainvalid_attestation_slot%20%3D%20103%0Avalid_attestation_slot%20%3D%2098%0Avalid_attestation_slot%20%3D%20101%0A%0A%60%60%60%0A%0AIn%20the%20attestation%20must%20be%20within%20the%20range%20of%2095%20to%20102%20in%20the%20example%20above.%0A%0A-%20%5Bfunc%20VerifyCheckpointEpoch%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23VerifyCheckpointEpoch)%3A%20VerifyCheckpointEpoch%20is%20within%20current%20epoch%20and%20previous%20epoch%20with%20respect%20to%20current%20time.%20Returns%20true%20if%20it's%20within%2C%20false%20if%20it's%20not.%0A%0A_Note%3A%20Sample%20command%20for%20running%20tests%20in%20Prysm%3A%20%60bazel%20test%20%2F%2Fbeacon-chain%2Fcore%2Fhelpers%3Ago_default_test%20--test_output%3Dstreamed%20--test_filter%3DTestAttestation_AggregateSignature%60._%0A%0A**Consensus%20Committee%20Selection**%0A%0A-%20%5Bfunc%20ProcessRandoa%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fblocks%23ProcessRandao)%3A%20checks%20the%20block%20proposer's%20randao%20commitment%20and%20generates%20a%20new%20randao%20mix%20to%20update%20in%20the%20beacon%20state's%20latest%20randao%20mixes%20slice.%0A-%20%5Bfunc%20randaoSigningData%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fblocks%2Fsignature.go%23L157)%3A%20retrieves%20the%20randao%20related%20signing%20data%20from%20the%20state.%0A%20%20-%20%5Bfunc%20(b%20%5C*BeaconState)%20PubkeyAtIndex(idx%20types.ValidatorIndex)%20%5Bfieldparams.BLSPubkeyLength%5Dbyte%20%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fstate%2Fstate-native%2Fgetters_validator.go%23L135)%3A%20returns%20the%20pubkey%20at%20the%20given%20validator%20index.%0A%0A%23%23%23%20Appendix%20B%3A%20Additional%20Light%20Client%20Support%20Documentation%0A%0A%23%23%23%23%20Key%20Concepts%0A%0A-%20Syncing%20to%20Current%20state%0A%0A-%20Advancing%20Blocks%0A-%20Communication%20can%20be%20either%20via%0A-%20RPC%20to%20the%20%5BEth%20BEACON%20Node%20API%5D(https%3A%2F%2Fethereum.github.io%2Fbeacon-APIs%2F%23%2FBeacon)%0A-%20%5BNetworking%20Gossip%20Topics%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.md%23global-topics)%0A%20%20-%20%5Blight_client_finality_update%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.md%23light_client_finality_update)%3A%20This%20topic%20is%20used%20to%20propagate%20the%20latest%20%60LightClientFinalityUpdate%60%20to%20light%20clients%2C%20allowing%20them%20to%20keep%20track%20of%20the%20latest%20%60finalized_header%60.%0A%20%20-%20%5Blight_client_optimistic_update%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.md%23light_client_optimistic_update)%3A%20This%20topic%20is%20used%20to%20propagate%20the%20latest%60LightClientOptimisticUpdate%60%20to%20light%20clients%2C%20allowing%20them%20to%20keep%20track%20of%20the%20latest%20%60optimistic_header%60.%0A%0A_Note%3A%20Time%20on%20Ethereum%202.0%20Proof%20of%20Stake%20is%20divided%20into%20slots%20and%20epochs.%20One%20slot%20is%2012%20seconds.%20One%20epoch%20is%206.4%20minutes%2C%20consisting%20of%2032%20slots.%20One%20block%20can%20be%20created%20for%20each%20slot._%0A%0A%23%23%23%23%20Altair%20Light%20Client%20--%20Sync%20Protocol%0A%0A-%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%3A%20The%20beacon%20chain%20is%20designed%20to%20be%20light%20client%20friendly%20for%20constrained%20environments%20to%20access%20Ethereum%20with%20reasonable%20safety%20and%20liveness.%0A%0ASuch%20environments%20include%20resource-constrained%20devices%20(e.g.%20phones%20for%20trust-minimized%20wallets)and%20metered%20VMs%20(e.g.%20blockchain%20VMs%20for%20cross-chain%20bridges).%0A%0AThis%20document%20suggests%20a%20minimal%20light%20client%20design%20for%20the%20beacon%20chain%20thatuses%20sync%20committees%20introduced%20in%20%5Bthis%20beacon%20chain%20extension%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fbeacon-chain.mdx).%0A%0AAdditional%20documents%20describe%20how%20the%20light%20client%20sync%20protocol%20can%20be%20used%3A%0A%0A-%20%5BFull%20node%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Ffull-node.mdx)%0A-%20%5BLight%20client%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%0A-%20%5BNetworking%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.mdx)%0A%0A-%20%5BLight%20client%20sync%20process%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%3A%20explains%20how%20light%20clients%20MAY%20obtain%20light%20client%20data%20to%20sync%20with%20the%20network.%0A%0A1.%20The%20light%20client%20MUST%20be%20configured%20out-of-band%20with%20a%20spec%2Fpreset%20(including%20fork%20schedule)%2C%20with%20%60genesis_state%60%20(including%20%60genesis_time%60%20and%20%60genesis_validators_root%60)%2C%20and%20with%20a%20trusted%20block%20root.%20The%20trusted%20block%20SHOULD%20be%20within%20the%20weak%20subjectivity%20period%2C%20and%20its%20root%20SHOULD%20be%20from%20a%20finalized%20%60Checkpoint%60.%0A2.%20The%20local%20clock%20is%20initialized%20based%20on%20the%20configured%20%60genesis_time%60%2C%20and%20the%20current%20fork%20digest%20is%20determined%20to%20browse%20for%20and%20connect%20to%20relevant%20light%20client%20data%20providers.%0A3.%20The%20light%20client%20fetches%20a%20%5B%60LightClientBootstrap%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%20object%20for%20the%20configured%20trusted%20block%20root.%20The%20%60bootstrap%60%20object%20is%20passed%20to%20%5B%60initialize_light_client_store%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23initialize_light_client_store)%20to%20obtain%20a%20local%20%5B%60LightClientStore%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientstore).%0A4.%20The%20light%20client%20tracks%20the%20sync%20committee%20periods%20%60finalized_period%60%20from%20%60store.finalized_header.slot%60%2C%20%60optimistic_period%60%20from%20%60store.optimistic_header.slot%60%2C%20and%20%60current_period%60%20from%20%60current_slot%60%20based%20on%20the%20local%20clock.%0A%20%20%201.%20When%20%60finalized_period%20%3D%3D%20optimistic_period%60%20and%20%5B%60is_next_sync_committee_known%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23is_next_sync_committee_known)%20indicates%20%60False%60%2C%20the%20light%20client%20fetches%20a%20%5B%60LightClientUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientupdate)%20for%20%60finalized_period%60.%20If%20%60finalized_period%20%3D%3D%20current_period%60%2C%20this%20fetch%20SHOULD%20be%20scheduled%20at%20a%20random%20time%20before%20%60current_period%60%20advances.%0A%20%20%202.%20When%20%60finalized_period%20%2B%201%20%3C%20current_period%60%2C%20the%20light%20client%20fetches%20a%20%60LightClientUpdate%60%20for%20each%20sync%20committee%20period%20in%20range%20%60%5Bfinalized_period%20%2B%201%2C%20current_period)%60%20(current%20period%20excluded)%0A%20%20%203.%20When%20%60finalized_period%20%2B%201%20%3E%3D%20current_period%60%2C%20the%20light%20client%20keeps%20observing%20%5B%60LightClientFinalityUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientfinalityupdate)%20and%20%5B%60LightClientOptimisticUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientoptimisticupdate).%20Received%20objects%20are%20passed%20to%20%5B%60process_light_client_finality_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_finality_update)%20and%20%5B%60process_light_client_optimistic_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_optimistic_update).%20This%20ensures%20that%20%60finalized_header%60%20and%20%60optimistic_header%60%20reflect%20the%20latest%20blocks.%0A5.%20%5B%60process_light_client_store_force_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_store_force_update)%20MAY%20be%20called%20based%20on%20use%20case%20dependent%20heuristics%20if%20light%20client%20sync%20appears%20stuck.%20If%20available%2C%20falling%20back%20to%20an%20alternative%20syncing%20mechanism%20to%20cover%20the%20affected%20sync%20committee%20period%20is%20preferred.%0A%0A%23%23%23%23%20The%20Portal%20Network%0A%0A-%20%5BThe%20Portal%20Network%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs)%3A%20The%20Portal%20Network%20is%20an%20in%20progess%20effort%20to%20enable%20lightweight%20protocol%20access%20by%20resource%20constrained%20devices.%20The%20term%20_%22portal%22_%20is%20used%20to%20indicate%20that%20these%20networks%20provide%20a%20_view_%20into%20the%20protocol%20but%20are%20not%20critical%20to%20the%20operation%20of%20the%20core%20Ethereum%20protocol.%0A%0AThe%20Portal%20Network%20is%20comprised%20of%20multiple%20peer-to-peer%20networks%20which%20together%20provide%20the%20data%20and%20functionality%20necessary%20to%20expose%20the%20standard%20%5BJSON-RPC%20API%5D(https%3A%2F%2Feth.wiki%2Fjson-rpc%2FAPI).%20These%20networks%20are%20specially%20designed%20to%20ensure%20that%20clients%20participating%20in%20these%20networks%20can%20do%20so%20with%20minimal%20expenditure%20of%20networking%20bandwidth%2C%20CPU%2C%20RAM%2C%20and%20HDD%20resources.%0A%0AThe%20term%20'Portal%20Client'%20describes%20a%20piece%20of%20software%20which%20participates%20in%20these%20networks.%20Portal%20Clients%20typically%20expose%20the%20standard%20JSON-RPC%20API.%0A%0A-%20Motivation%3A%20The%20Portal%20Network%20is%20focused%20on%20delivering%20reliable%2C%20lightweight%2C%20and%20decentralized%20access%20to%20the%20Ethereum%20protocol.%0A%0A-%20Prior%20Work%20on%20the%20%22Light%20Ethereum%20Subprotocol%22%20(LES)%3A%20The%20term%20%22light%20client%22%20has%20historically%20refered%20to%20a%20client%20of%20the%20existing%20%5BDevP2P%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Frlpx.mdx)%20based%20%5BLES%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Fcaps%2Fles.mdx)%20network.%20This%20network%20is%20designed%20using%20a%20client%2Fserver%20architecture.%20The%20LES%20network%20has%20a%20total%20capacity%20dictated%20by%20the%20number%20of%20%22servers%22%20on%20the%20network.%20In%20order%20for%20this%20network%20to%20scale%2C%20the%20%22server%22%20capacity%20has%20to%20increase.%20This%20also%20means%20that%20at%20any%20point%20in%20time%20the%20network%20has%20some%20total%20capacity%20which%20if%20exceeded%20will%20cause%20service%20degradation%20across%20the%20network.%20Because%20of%20this%20the%20LES%20network%20is%20unreliable%20when%20operating%20near%20capacity.%0A%0A-%20Block%20Relay%0A%0A-%20%5BBeacon%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23dht-overview)%3A%20A%20client%20has%20a%20trusted%20beacon%20state%20root%2C%20and%20it%20wants%20to%20access%20some%20parts%20of%20the%20state.%20Each%20of%20the%20access%20request%20corresponds%20to%20some%20leave%20nodes%20of%20the%20beacon%20state.%20The%20request%20is%20a%20content%20lookup%20on%20a%20DHT.%20The%20response%20is%20a%20Merkle%20proof.%0A%0A%20%20%20%20%20%20A%20Distributed%20Hash%20Table%20(DHT)%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%0A%0A-%20%5BSyncing%20Block%20Headers%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx)%3A%20A%20beacon%20chain%20client%20could%20sync%20committee%20to%20perform%20state%20updates.%20The%20data%20object%20LightClientSkipSyncUpdate%20allows%20a%20client%20to%20quickly%20sync%20to%20a%20recent%20header%20with%20the%20appropriate%20sync%20committee.%20Once%20the%20client%20establishes%20a%20recent%20header%2C%20it%20could%20sync%20to%20other%20headers%20by%20processing%20LightClientUpdates.%20These%20two%20data%20types%20allow%20a%20client%20to%20stay%20up-to-date%20with%20the%20beacon%20chain.%0A%20%20-%20%5BSync%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fskip-sync-network.mdx)%3A%20A%20client%20uses%20SkipSyncUpdate%20to%20skip%20sync%20from%20a%20known%20header%20to%20a%20recent%20header.%20A%20client%20with%20a%20trusted%20but%20outdated%20header%20cannot%20use%20the%20messages%20in%20the%20gossip%20channel%20bc-light-client-update%20to%20update.%20The%20client's%20sync-committee%20in%20the%20stored%20snapshot%20is%20too%20old%20and%20not%20connected%20to%20any%20update%20messages.%20The%20client%20look%20for%20the%20appropriate%20SkipSyncUpdate%20to%20skip%20sync%20its%20header.%0A%20%20-%20%5BAdvance%20Block%20Headers%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx)%3A%20A%20beacon%20chain%20client%20could%20sync%20committee%20to%20perform%20%5Bstate%20updates%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fsync-protocol.mdx).%20The%20data%20object%20%5BLightClientSkipSyncUpdate%5D(skip-sync-network)%20allows%20a%20client%20to%20quickly%20sync%20to%20a%20recent%20header%20with%20the%20appropriate%20sync%20committee.%20Once%20the%20client%20establishes%20a%20recent%20header%2C%20it%20could%20sync%20to%20other%20headers%20by%20processing%20%5BLightClientUpdates%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fsync-protocol.md%23lightclientupdate).%20These%20two%20data%20types%20allow%20a%20client%20to%20stay%20up-to-date%20with%20the%20beacon%20chain.%0A%0A%20%20%20%20%20%20%20%20%20%20These%20two%20data%20types%20are%20placed%20into%20separate%20sub-networks.%20A%20light%20client%20make%20find-content%20requests%20on%20%60skip-sync-network%60%20at%20start%20of%20the%20sync%20to%20get%20a%20header%20with%20the%20same%20%60SyncCommittee%60%20object%20as%20in%20the%20current%20sync%20period.%20The%20client%20uses%20messages%20in%20the%20gossip%20topic%20%60bc-light-client-update%60%20to%20advance%20its%20header.%0A%0A%20%20%20%20%20%20%20%20%20%20The%20gossip%20topics%20described%20in%20this%20document%20is%20part%20of%20a%20%5Bproposal%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fa-beacon-chain-light-client-proposal%2F11064)%20for%20a%20beacon%20chain%20light%20client.%0A%0A%23%23%23%23%20Transaction%20Proofs%0A%0A-%20%5BRetrieving%20Beacon%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.mdx)%3A%20A%20client%20has%20a%20trusted%20beacon%20state%20root%2C%20and%20it%20wants%20to%20access%20some%20parts%20of%20the%20state.%20Each%20of%20the%20access%20request%20corresponds%20to%20some%20leave%20nodes%20of%20the%20beacon%20state.%20The%20request%20is%20a%20content%20lookup%20on%20a%20DHT.%20The%20response%20is%20a%20Merkle%20proof.%0A%0AA%20Distributed%20Hash%20Table%20(DHT)%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%20key.%20A%20portal-network%20DHT%20is%20different%20than%20a%20traditional%20one%20in%20that%20each%20participant%20could%20selectively%20limit%20its%20workload%20by%20choosing%20a%20small%20interest%20radius%20r.%20A%20participants%20only%20process%20messages%20that%20are%20within%20its%20chosen%20radius%20boundary.%0A%0A-%20%5BWire%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23wire-protocol)%3A%20For%20a%20subprotocol%2C%20we%20need%20to%20further%20define%20the%20following%20to%20be%20able%20to%20instantiate%20the%20wire%20format%20of%20each%20message%20type.%201.%20%60content_key%60%202.%20%60content_id%60%203.%20%60payload%60%0A%0A%20%20%20%20%20%20The%20content%20of%20the%20message%20is%20a%20Merkle%20proof%20contains%20multiple%20leave%20nodes%20for%20a%20%5BBeaconState%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fbeacon-chain.md%23beaconstate).%0A%0A%20%20%20%20%20%20Finally%2C%20we%20define%20the%20necessary%20encodings.%20A%20light%20client%20only%20knows%20the%20root%20of%20the%20beacon%20state.%20The%20client%20wants%20to%20know%20the%20details%20of%20some%20leave%20nodes.%20The%20client%20has%20to%20be%20able%20to%20construct%20the%20%60content_key%60%20only%20knowing%20the%20root%20and%20which%20leave%20nodes%20it%20wants%20see.%20The%20%60content_key%60%20is%20the%20ssz%20serialization%20of%20the%20paths.%20The%20paths%20represent%20the%20part%20of%20the%20beacon%20state%20that%20one%20wants%20to%20know%20about.%20The%20paths%20are%20represented%20by%20generalized%20indices.%20Note%20that%20%60hash_tree_root%60%20and%20%60serialize%60%20are%20the%20same%20as%20those%20defined%20in%20%5Bsync-gossip%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx).%0A%0A-%20TODO%3A%20Review%20of%20Retrieving%20a%20transaction%20proof%20not%20just%20retrieving%20data%20on-demand%0A%0A%23%23%23%23%20Further%20Information%0A%0A-%20Ethereum%202.0%20Specifications%0A-%20%5BBeacon%20Chain%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fmaster%2Fspecs%2Fphase0%2Fbeacon-chain.mdx)%0A-%20%5BExtended%20light%20client%20protocol%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fextended_light_client_protocol)%0A-%20%5BAltair%20Light%20Client%20--%20Light%20Client%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%0A-%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%0A-%20%5BBeacon%20Chain%20Fork%20Choice%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Ffork-choice.mdx)%0A-%20%5BThe%20Portal%20Network%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs)%3A%20an%20in%20progess%20effort%20to%20enable%20lightweight%20protocol%20access%20by%20resource%20constrained%20devices.%0A-%20%5BLight%20Ethereum%20Subprotocol%20(LES)%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Fcaps%2Fles.mdx)%3A%20the%20protocol%20used%20by%20%22light%22%20clients%2C%20which%20only%20download%20block%20headers%20as%20they%20appear%20and%20fetch%20other%20parts%20of%20the%20blockchain%20on-demand.%0A-%20%5BBlockDaemon%3A%20Ethereum%20Altair%20Hard%20Folk%3A%20Light%20Clients%20%26%20Sync%20Committees%5D(https%3A%2F%2Fblockdaemon.com%2Fblog%2Fethereum-altair-hard-folk-light-clients-sync-committees%2F)%0A-%20%5BEfficient%20algorithms%20for%20CBC%20Casper%5D(https%3A%2F%2Fdocs.google.com%2Fpresentation%2Fd%2F1oc_zdywOsHxz3zez1ILAgrerS7RkaF1hHoW0FLtp0Gw%2Fedit%23slide%3Did.p)%3A%20Review%20of%20LMD%20GHOST%20(Latest%20Message%20Driven%2C%20Greediest%20Heaviest%20Observed%20Sub-Tree)%0A-%20%5BSSZ%3A%20Simple%20Serialize%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fssz%2F)%3A%20Overview%20of%20Simple%20serialize%20(SSZ)%20is%20the%20serialization%20method%20used%20on%20the%20Beacon%20Chain.%20(including%20merkalization%20and%20multiproofs)%0A-%20%5BThe%20Noise%20Protocol%20Framework%5D(https%3A%2F%2Fnoiseprotocol.org%2Fnoise.html)%3A%20Noise%20is%20a%20framework%20for%20crypto%20protocols%20based%20on%20Diffie-Hellman%20key%20agreement.%0A-%20%5BFlashbots%20for%20Ethereum%20Consensus%20Clients%5D(https%3A%2F%2Fhackmd.io%2FQoLwVQf3QK6EiVt15YOYqQ%3Fview)%0A-%20%5BOptimistic%20Sync%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fsync%2Foptimistic.mdx)%3A%20Optimistic%20Sync%20is%20a%20stop-gap%20measure%20to%20allow%20execution%20nodes%20to%20sync%20via%20established%20methods%20until%20future%20Ethereum%20roadmap%20items%20are%20implemented%20(e.g.%2C%20statelessness).%0A-%20%5BConsensus%20Light%20Client%20Server%20Implementation%20Notes%5D(https%3A%2F%2Fhackmd.io%2FhsCz1G3BTyiwwJtjT4pe2Q%3Fview)%3A%20How%20Lodestar%20beacon%20node%20was%20tweaked%20to%20serve%20light%20clients%0A-%20%5Bbeacon%20chain%20light%20client%20design%20doc%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40ralexstokes%2FHJxDMi8vY)%3A%20notes%20about%20the%20design%2Fimplementation%20of%20a%20beacon%20chain%20light%20client%20using%20standard%20APIs%20and%20protocol%20features%0A-%20%5BA%20Beacon%20Chain%20Light%20Client%20Proposal%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fa-beacon-chain-light-client-proposal%2F11064)%3A%20proposing%20a%20light%20client%20implementation%20that%20goes%20a%20step%20further%20than%20the%20minimum%20light%20client%20described%20in%20the%20altair%20consensus-spec.%20The%20proposed%20client%20aims%20to%20allow%20queries%20into%20the%20beacon%20state.%0A-%20%5BDistributed%20Hash%20Table%20(DHT)%20Overview%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23dht-overview)%3A%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%20key.%0A-%20%5B(WIP)%20Light%20client%20p2p%20interface%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fpull%2F2786)%3A%20a%20PR%20to%20get%20the%20conversation%20going%20about%20a%20p2p%20approach.%0A%20%20Here%20we%20cover%20two%20approaches%20which%20may%20be%20combined%0A%0A%23%23%23%20Appendix%20C%3A%20Proving%20and%20Verification%20Mechanisms%0A%0A%23%23%23%23%20%5Beth-proof-of-consensus%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus)%3A%20Proof%20of%20Consensus%20for%20Ethereum%20by%20succinctlabs%0A%0ACircuits%0A%0A-%20%5Baggregate_bls_verify.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Faggregate_bls_verify.circom)%3A%20Computes%20an%20aggregate%20BLS12-381%20public%20key%20over%20a%20set%20of%20public%20keys%20and%20a%20bitmask%0A-%20%5Bassert_valid_signed_header.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fassert_valid_signed_header.circom)%0A-%20%5Bpubkey_poseidon.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fpubkey_poseidon.circom)%3A%20Computes%20the%20Poseidon%20merkle%20root%20of%20a%20list%20of%20field%20elements%0A-%20%5Bsha256_bytes.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fsha256_bytes.circom)%3A%20Wrapper%20around%20SHA256%20to%20support%20bytes%20as%20input%20instead%20of%20bits%0A-%20%5Bsimple_serialize.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fsimple_serialize.circom)%3A%20Helper%20function%20to%20implement%20SSZArray%0A-%20%5Bsync_committee_committments.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fsync_committee_committments.circom)%3A%20Asserts%20that%20the%20byte%20representation%20of%20a%20BLS12-381%20public%20key's%20x-coordinate%20matches%20the%20BigInt%20representation%0A%0AVerification%0A%0A-%20%5BAMB%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Famb)%3A%20Arbitrary%20Message%20Passing%0A-%20%5BTrustlessAMB.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Famb%2FTrustlessAMB.sol)%3A%20sends%20and%20executes%20messages%0A-%20%5BTrustlessAMBStorage.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Famb%2FTrustlessAMBStorage.sol)%3A%20Storage%20for%20messages%20between%20two%20chains%0A-%20%5Bbridge%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Fbridge)%3A%20Allows%20for%20the%20deposit%20and%20withdrawal%20of%20ERC20%20tokens%0A-%20%5BBridge.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Fbridge%2FBridge.sol)%3A%20Deposit%20and%20withdraw%20functionality%0A-%20%5BToken.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Fbridge%2FTokens.sol)%3A%20ERC20%20bridge%20token%20definitions%0A-%20%5Blightclient%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Flightclient)%0A-%20%5BBLSAggregatedSignatureVerifier.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBLSAggregatedSignatureVerifier.sol)%3A%20Verifies%20BLS%20aggregated%20signature%20proofs%0A-%20%5BBeaconLightClient.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol)%3A%20Beacon%20Light%20Client%20Functionality%20including%0A%20%20-%20%5Bstep(LightClientUpdate%20memory%20update)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L86)%3A%20Updates%20the%20head%20given%20a%20finalized%20light%20client%20update.%0A%20%20-%20%5Bfunction%20updateSyncCommittee(LightClientUpdate%20memory%20update%2C%20bytes32%20nextSyncCommitteePoseidon%2C%20Groth16Proof%20memory%20commitmentMappingProof)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L102)%3A%20Set%20the%20sync%20committee%20validator%20set%20root%20for%20the%20next%20sync%20commitee%20period.%0A%20%20-%20%5Bfunction%20forceUpdate()%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L131)%3A%20Finalizes%20the%20optimistic%20update%20and%20sets%20the%20next%20sync%20committee%20if%20no%20finalized%20updates%20have%20been%20received%20for%20a%20period.%0A%20%20-%20%5Bfunction%20processLightClientUpdate(LightClientUpdate%20memory%20update)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L131)%3A%20Implements%20shared%20logic%20for%20processing%20light%20client%20updates.%0A%20%20-%20%5Bfunction%20zkMapSSZToPoseidon(bytes32%20sszCommitment%2C%20bytes32%20poseidonCommitment%2C%20Groth16Proof%20memory%20proof)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L190)%3A%20Maps%20a%20simple%20serialize%20merkle%20root%20to%20a%20poseidon%20merkle%20root%20with%20a%20zkSNARK.%20The%20proof%20asserts%20that%3A%20SimpleSerialize(syncCommittee)%20%3D%3D%20Poseidon(syncCommittee).%0A%20%20-%20%5Bfunction%20zkBLSVerify(bytes32%20signingRoot%2C%20bytes32%20syncCommitteeRoot%2C%20uint256%20claimedParticipation%2C%20Groth16Proof%20memory%20proof)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L208)%3A%20Does%20an%20aggregated%20BLS%20signature%20verification%20with%20a%20zkSNARK.%0A-%20%5Bscripts%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Fscripts)%3A%20A%20collection%20of%20%5Bforge-scripts%5D(https%3A%2F%2Fbook.getfoundry.sh%2Freference%2Fforge%2Fforge-script)%20for%20contract%20deployment.%0A%0A%23%23%23%20Appendix%20D%3A%20Topics%0A%0ABeacon%20Chain%20Topics%20%5BPrysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fp2p%2Ftopics.go)%0A%0A%60%60%60%0A%0Apackage%20p2p%0A%0Aconst%20(%0A%2F%2F%20GossipProtocolAndDigest%20represents%20the%20protocol%20and%20fork%20digest%20prefix%20in%20a%20gossip%20topic.%0AGossipProtocolAndDigest%20%3D%20%22%2Feth2%2F%25x%2F%22%0A%0A%2F%2F%20Message%20Types%0A%2F%2F%0A%2F%2F%20GossipAttestationMessage%20is%20the%20name%20for%20the%20attestation%20message%20type.%20It%20is%0A%2F%2F%20specially%20extracted%20so%20as%20to%20determine%20the%20correct%20message%20type%20from%20an%20attestation%0A%2F%2F%20subnet.%0AGossipAttestationMessage%20%3D%20%22beacon_attestation%22%0A%2F%2F%20GossipSyncCommitteeMessage%20is%20the%20name%20for%20the%20sync%20committee%20message%20type.%20It%20is%0A%2F%2F%20specially%20extracted%20so%20as%20to%20determine%20the%20correct%20message%20type%20from%20a%20sync%20committee%0A%2F%2F%20subnet.%0AGossipSyncCommitteeMessage%20%3D%20%22sync_committee%22%0A%2F%2F%20GossipBlockMessage%20is%20the%20name%20for%20the%20block%20message%20type.%0AGossipBlockMessage%20%3D%20%22beacon_block%22%0A%2F%2F%20GossipExitMessage%20is%20the%20name%20for%20the%20voluntary%20exit%20message%20type.%0AGossipExitMessage%20%3D%20%22voluntary_exit%22%0A%2F%2F%20GossipProposerSlashingMessage%20is%20the%20name%20for%20the%20proposer%20slashing%20message%20type.%0AGossipProposerSlashingMessage%20%3D%20%22proposer_slashing%22%0A%2F%2F%20GossipAttesterSlashingMessage%20is%20the%20name%20for%20the%20attester%20slashing%20message%20type.%0AGossipAttesterSlashingMessage%20%3D%20%22attester_slashing%22%0A%2F%2F%20GossipAggregateAndProofMessage%20is%20the%20name%20for%20the%20attestation%20aggregate%20and%20proof%20message%20type.%0AGossipAggregateAndProofMessage%20%3D%20%22beacon_aggregate_and_proof%22%0A%2F%2F%20GossipContributionAndProofMessage%20is%20the%20name%20for%20the%20sync%20contribution%20and%20proof%20message%20type.%0AGossipContributionAndProofMessage%20%3D%20%22sync_committee_contribution_and_proof%22%0A%2F%2F%20GossipBlsToExecutionChangeMessage%20is%20the%20name%20for%20the%20bls%20to%20execution%20change%20message%20type.%0AGossipBlsToExecutionChangeMessage%20%3D%20%22bls_to_execution_change%22%0A%0A%2F%2F%20Topic%20Formats%0A%2F%2F%0A%2F%2F%20AttestationSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20attestation%20subnet.%0AAttestationSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipAttestationMessage%20%2B%20%22_%25d%22%0A%2F%2F%20SyncCommitteeSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20sync%20committee%20subnet.%0ASyncCommitteeSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipSyncCommitteeMessage%20%2B%20%22_%25d%22%0A%2F%2F%20BlockSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20block%20subnet.%0ABlockSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipBlockMessage%0A%2F%2F%20ExitSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20voluntary%20exit%20subnet.%0AExitSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipExitMessage%0A%2F%2F%20ProposerSlashingSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20proposer%20slashing%20subnet.%0AProposerSlashingSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipProposerSlashingMessage%0A%2F%2F%20AttesterSlashingSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20attester%20slashing%20subnet.%0AAttesterSlashingSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipAttesterSlashingMessage%0A%2F%2F%20AggregateAndProofSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20aggregate%20and%20proof%20subnet.%0AAggregateAndProofSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipAggregateAndProofMessage%0A%2F%2F%20SyncContributionAndProofSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20sync%20aggregate%20and%20proof%20subnet.%0ASyncContributionAndProofSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipContributionAndProofMessage%0A%2F%2F%20BlsToExecutionChangeSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20bls%20to%20execution%20change%20subnet.%0ABlsToExecutionChangeSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipBlsToExecutionChangeMessage%0A)%0A%0A%60%60%60%0A%0A%23%23%23%20Appendix%20E%3A%20gRPC%20and%20API's%0A%0A%5BBeaconcha.in%20ETH2%20API%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html)%0A%0A%23%23%23%20Appendix%20F%3A%20Data%20Structures%0A%0A-%20Block%20Structure%20from%20%5Bgo-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fcore%2Ftypes%2Fblock.go%23L72)%0A%0A%60%60%60%0A%0A%2F%2F%20SealHash%20returns%20the%20hash%20of%20a%20block%20prior%20to%20it%20being%20sealed.%0Afunc%20(ethash%20*Ethash)%20SealHash(header%20*types.Header)%20(hash%20common.Hash)%20%7B%0Ahasher%20%3A%3D%20sha3.NewLegacyKeccak256()%0A%0Arlp.Encode(hasher%2C%20%5B%5Dinterface%7B%7D%7B%0Aheader.ParentHash%2C%0Aheader.UncleHash%2C%0Aheader.Coinbase%2C%0Aheader.Root%2C%0Aheader.TxHash%2C%0Aheader.ReceiptHash%2C%0Aheader.Bloom%2C%0Aheader.Difficulty%2C%0Aheader.Number%2C%0Aheader.GasLimit%2C%0Aheader.GasUsed%2C%0Aheader.Time%2C%0Aheader.Extra%2C%0A%7D)%0Ahasher.Sum(hash%5B%3A0%5D)%0Areturn%20hash%0A%7D%0A%0A%60%60%60%0A%0A-%20Blocks%20Headers%20get%20forwarded%20to%20the%20Beacon%20chain%20once%20they%20pass%20%5Bbeacon%20consensus%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fconsensus%2Fbeacon%2Fconsensus.go)%0A-%20The%20Beacon%20chain%20embeds%20the%20EthChain%20Header%20into%20a%20%5BBeaconBlock%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconsensus-types%2Fblocks%2Ftypes.go%23L43)%0A%0ABeaconBlockBody%20from%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconsensus-types%2Fblocks%2Ftypes.go)%20(golang)%0A%0A%60%60%60%0A%0A%2F%2F%20BeaconBlockBody%20is%20the%20main%20beacon%20block%20body%20structure.%20It%20can%20represent%20any%20block%20type.%0Atype%20BeaconBlockBody%20struct%20%7B%0Aversion%20int%0AisBlinded%20bool%0ArandaoReveal%20%5Bfield_params.BLSSignatureLength%5Dbyte%0Aeth1Data%20*eth.Eth1Data%0Agraffiti%20%5Bfield_params.RootLength%5Dbyte%0AproposerSlashings%20%5B%5D*eth.ProposerSlashing%0AattesterSlashings%20%5B%5D*eth.AttesterSlashing%0Aattestations%20%5B%5D*eth.Attestation%0Adeposits%20%5B%5D*eth.Deposit%0AvoluntaryExits%20%5B%5D*eth.SignedVoluntaryExit%0AsyncAggregate%20*eth.SyncAggregate%0AexecutionPayload%20*engine.ExecutionPayload%0AexecutionPayloadHeader%20%5C*engine.ExecutionPayloadHeader%0A%7D%0A%0A%2F%2F%20BeaconBlock%20is%20the%20main%20beacon%20block%20structure.%20It%20can%20represent%20any%20block%20type.%0Atype%20BeaconBlock%20struct%20%7B%0Aversion%20int%0Aslot%20types.Slot%0AproposerIndex%20types.ValidatorIndex%0AparentRoot%20%5Bfield_params.RootLength%5Dbyte%0AstateRoot%20%5Bfield_params.RootLength%5Dbyte%0Abody%20%5C*BeaconBlockBody%0A%7D%0A%0A%2F%2F%20SignedBeaconBlock%20is%20the%20main%20signed%20beacon%20block%20structure.%20It%20can%20represent%20any%20block%20type.%0Atype%20SignedBeaconBlock%20struct%20%7B%0Aversion%20int%0Ablock%20%5C*BeaconBlock%0Asignature%20%5Bfield_params.BLSSignatureLength%5Dbyte%0A%7D%0A%0A%60%60%60%0A%0AEth1Data%20from%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Fprysm%2Fv1alpha1%2Fpowchain.pb.go%23L24)%20(golang)%0A%0A%60%60%60%0A%0Atype%20ETH1ChainData%20struct%20%7B%0Astate%20protoimpl.MessageState%0AsizeCache%20protoimpl.SizeCache%0AunknownFields%20protoimpl.UnknownFields%0A%0ACurrentEth1Data%20*LatestETH1Data%20%60protobuf%3A%22bytes%2C1%2Copt%2Cname%3Dcurrent_eth1_data%2Cjson%3DcurrentEth1Data%2Cproto3%22%20json%3A%22current_eth1_data%2Comitempty%22%60%0AChainstartData%20*ChainStartData%20%60protobuf%3A%22bytes%2C2%2Copt%2Cname%3Dchainstart_data%2Cjson%3DchainstartData%2Cproto3%22%20json%3A%22chainstart_data%2Comitempty%22%60%0ABeaconState%20*BeaconState%20%60protobuf%3A%22bytes%2C3%2Copt%2Cname%3Dbeacon_state%2Cjson%3DbeaconState%2Cproto3%22%20json%3A%22beacon_state%2Comitempty%22%60%0ATrie%20*SparseMerkleTrie%20%60protobuf%3A%22bytes%2C4%2Copt%2Cname%3Dtrie%2Cproto3%22%20json%3A%22trie%2Comitempty%22%60%0ADepositContainers%20%5B%5D%5C*DepositContainer%20%60protobuf%3A%22bytes%2C5%2Crep%2Cname%3Ddeposit_containers%2Cjson%3DdepositContainers%2Cproto3%22%20json%3A%22deposit_containers%2Comitempty%22%60%0A%7D%0A%0Atype%20LatestETH1Data%20struct%20%7B%0Astate%20protoimpl.MessageState%0AsizeCache%20protoimpl.SizeCache%0AunknownFields%20protoimpl.UnknownFields%0A%0ABlockHeight%20uint64%20%60protobuf%3A%22varint%2C2%2Copt%2Cname%3Dblock_height%2Cjson%3DblockHeight%2Cproto3%22%20json%3A%22block_height%2Comitempty%22%60%0ABlockTime%20uint64%20%60protobuf%3A%22varint%2C3%2Copt%2Cname%3Dblock_time%2Cjson%3DblockTime%2Cproto3%22%20json%3A%22block_time%2Comitempty%22%60%0ABlockHash%20%5B%5Dbyte%20%60protobuf%3A%22bytes%2C4%2Copt%2Cname%3Dblock_hash%2Cjson%3DblockHash%2Cproto3%22%20json%3A%22block_hash%2Comitempty%22%60%0ALastRequestedBlock%20uint64%20%60protobuf%3A%22varint%2C5%2Copt%2Cname%3Dlast_requested_block%2Cjson%3DlastRequestedBlock%2Cproto3%22%20json%3A%22last_requested_block%2Comitempty%22%60%0A%7D%0A%0A%60%60%60%0A%0ABeaconBlockAltair%20from%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_block.rs%23L407)%20rust%0A%0A%60%60%60%0A%0A%20%20%20%20%2F%2F%2F%20Return%20an%20Altair%20block%20where%20the%20block%20has%20maximum%20size.%0A%20%20%20%20pub%20fn%20full(spec%3A%20%26ChainSpec)%20-%3E%20Self%20%7B%0A%20%20%20%20%20%20%20%20let%20base_block%3A%20BeaconBlockBase%3C_%2C%20Payload%3E%20%3D%20BeaconBlockBase%3A%3Afull(spec)%3B%0A%20%20%20%20%20%20%20%20let%20sync_aggregate%20%3D%20SyncAggregate%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20sync_committee_signature%3A%20AggregateSignature%3A%3Aempty()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20sync_committee_bits%3A%20BitVector%3A%3Adefault()%2C%0A%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20BeaconBlockAltair%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20slot%3A%20spec.genesis_slot%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20proposer_index%3A%200%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20parent_root%3A%20Hash256%3A%3Azero()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20state_root%3A%20Hash256%3A%3Azero()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20body%3A%20BeaconBlockBodyAltair%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20proposer_slashings%3A%20base_block.body.proposer_slashings%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20attester_slashings%3A%20base_block.body.attester_slashings%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20attestations%3A%20base_block.body.attestations%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20deposits%3A%20base_block.body.deposits%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20voluntary_exits%3A%20base_block.body.voluntary_exits%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20sync_aggregate%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20randao_reveal%3A%20Signature%3A%3Aempty()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20eth1_data%3A%20Eth1Data%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20deposit_root%3A%20Hash256%3A%3Azero()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20block_hash%3A%20Hash256%3A%3Azero()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20deposit_count%3A%200%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20graffiti%3A%20Graffiti%3A%3Adefault()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20_phantom%3A%20PhantomData%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20Beacon%20State%20Data%20Structures%20from%20Prysm%0A%0A%60%60%60%0A%0Atype%20BeaconState%20interface%20%7B%0ASpecParametersProvider%0AReadOnlyBeaconState%0AWriteOnlyBeaconState%0ACopy()%20BeaconState%0AHashTreeRoot(ctx%20context.Context)%20(%5B32%5Dbyte%2C%20error)%0AFutureForkStub%0AStateProver%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20ReadOnlyBeaconState%20interface%20%7B%0AReadOnlyBlockRoots%0AReadOnlyStateRoots%0AReadOnlyRandaoMixes%0AReadOnlyEth1Data%0AReadOnlyValidators%0AReadOnlyBalances%0AReadOnlyCheckpoint%0AReadOnlyAttestations%0AToProtoUnsafe()%20interface%7B%7D%0AToProto()%20interface%7B%7D%0AGenesisTime()%20uint64%0AGenesisValidatorsRoot()%20%5B%5Dbyte%0ASlot()%20types.Slot%0AFork()%20*ethpb.Fork%0ALatestBlockHeader()%20*ethpb.BeaconBlockHeader%0AHistoricalRoots()%20%5B%5D%5B%5Dbyte%0ASlashings()%20%5B%5Duint64%0AFieldReferencesCount()%20map%5Bstring%5Duint64%0AMarshalSSZ()%20(%5B%5Dbyte%2C%20error)%0AIsNil()%20bool%0AVersion()%20int%0ALatestExecutionPayloadHeader()%20(interfaces.ExecutionData%2C%20error)%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20ReadOnlyValidators%20interface%20%7B%0AValidators()%20%5B%5D*ethpb.Validator%0AValidatorAtIndex(idx%20types.ValidatorIndex)%20(*ethpb.Validator%2C%20error)%0AValidatorAtIndexReadOnly(idx%20types.ValidatorIndex)%20(ReadOnlyValidator%2C%20error)%0AValidatorIndexByPubkey(key%20%5Bfieldparams.BLSPubkeyLength%5Dbyte)%20(types.ValidatorIndex%2C%20bool)%0APubkeyAtIndex(idx%20types.ValidatorIndex)%20%5Bfieldparams.BLSPubkeyLength%5Dbyte%0ANumValidators()%20int%0AReadFromEveryValidator(f%20func(idx%20int%2C%20val%20ReadOnlyValidator)%20error)%20error%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20ReadOnlyRandaoMixes%20interface%20%7B%0ARandaoMixes()%20%5B%5D%5B%5Dbyte%0ARandaoMixAtIndex(idx%20uint64)%20(%5B%5Dbyte%2C%20error)%0ARandaoMixesLength()%20int%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20WriteOnlyBeaconState%20interface%20%7B%0AWriteOnlyBlockRoots%0AWriteOnlyStateRoots%0AWriteOnlyRandaoMixes%0AWriteOnlyEth1Data%0AWriteOnlyValidators%0AWriteOnlyBalances%0AWriteOnlyCheckpoint%0AWriteOnlyAttestations%0ASetGenesisTime(val%20uint64)%20error%0ASetGenesisValidatorsRoot(val%20%5B%5Dbyte)%20error%0ASetSlot(val%20types.Slot)%20error%0ASetFork(val%20*ethpb.Fork)%20error%0ASetLatestBlockHeader(val%20*ethpb.BeaconBlockHeader)%20error%0ASetHistoricalRoots(val%20%5B%5D%5B%5Dbyte)%20error%0ASetSlashings(val%20%5B%5Duint64)%20error%0AUpdateSlashingsAtIndex(idx%2C%20val%20uint64)%20error%0AAppendHistoricalRoots(root%20%5B32%5Dbyte)%20error%0ASetLatestExecutionPayloadHeader(payload%20interfaces.ExecutionData)%20error%0ASetWithdrawalQueue(val%20%5B%5D*enginev1.Withdrawal)%20error%0AAppendWithdrawal(val%20*enginev1.Withdrawal)%20error%0ASetNextWithdrawalIndex(i%20uint64)%20error%0ASetNextPartialWithdrawalValidatorIndex(i%20types.ValidatorIndex)%20error%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20WriteOnlyValidators%20interface%20%7B%0ASetValidators(val%20%5B%5D*ethpb.Validator)%20error%0AApplyToEveryValidator(f%20func(idx%20int%2C%20val%20*ethpb.Validator)%20(bool%2C%20*ethpb.Validator%2C%20error))%20error%0AUpdateValidatorAtIndex(idx%20types.ValidatorIndex%2C%20val%20*ethpb.Validator)%20error%0AAppendValidator(val%20%5C*ethpb.Validator)%20error%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20WriteOnlyRandaoMixes%20interface%20%7B%0ASetRandaoMixes(val%20%5B%5D%5B%5Dbyte)%20error%0AUpdateRandaoMixesAtIndex(idx%20uint64%2C%20val%20%5B%5Dbyte)%20error%0A%7D%0A%0A%60%60%60%0A%0A%5BValidator%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fproto%2Fprysm%2Fv1alpha1%23Validator)%20information%0A%0A%60%60%60%0A%0Atype%20Validator%20struct%20%7B%0APublicKey%20%5B%5Dbyte%20%60protobuf%3A%22bytes%2C1%2Copt%2Cname%3Dpublic_key%2Cjson%3DpublicKey%2Cproto3%22%20json%3A%22public_key%2Comitempty%22%20spec-name%3A%22pubkey%22%20ssz-size%3A%2248%22%60%0AWithdrawalCredentials%20%5B%5Dbyte%20%60%60%2F*%20138-byte%20string%20literal%20not%20displayed%20*%2F%0A%20EffectiveBalance%20%20%20%20%20%20%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%60protobuf%3A%22varint%2C3%2Copt%2Cname%3Deffective_balance%2Cjson%3DeffectiveBalance%2Cproto3%22%20json%3A%22effective_balance%2Comitempty%22%60%0A%20Slashed%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20bool%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%60protobuf%3A%22varint%2C4%2Copt%2Cname%3Dslashed%2Cproto3%22%20json%3A%22slashed%2Comitempty%22%60%0A%20ActivationEligibilityEpoch%20github_com_prysmaticlabs_prysm_v3_consensus_types_primitives.Epoch%60%60%20%2F_%20221-byte%20string%20literal%20not%20displayed%20_%2F%0AActivationEpoch%20github*com_prysmaticlabs_prysm_v3_consensus_types_primitives.Epoch%20%60%2F*%20186-byte%20string%20literal%20not%20displayed%20_%2F%0AExitEpoch%20github_com_prysmaticlabs_prysm_v3_consensus_types_primitives.Epoch%60%20%2F_%20168-byte%20string%20literal%20not%20displayed%20_%2F%0AWithdrawableEpoch%20github_com_prysmaticlabs_prysm_v3_consensus_types_primitives.Epoch%20%60%60%20%2F_%20192-byte%20string%20literal%20not%20displayed%20%5C_%2F%0A%2F%2F%20contains%20filtered%20or%20unexported%20fields%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20%5Bweb3signer_types%20from%20prysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fvalidator%2Fkeymanager%2Fremote-web3signer%2Fv1%2Fweb3signer_types.go%23L107)%0A%0A%60%60%60%0A%0A%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%0A%2F%2F%20sub%20properties%20of%20Sign%20Requests%20%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%0A%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%0A%0A%2F%2F%20ForkInfo%20a%20sub%20property%20object%20of%20the%20Sign%20request%0Atype%20ForkInfo%20struct%20%7B%0AFork%20%5C*Fork%20%60json%3A%22fork%22%60%0AGenesisValidatorsRoot%20hexutil.Bytes%20%60json%3A%22genesis_validators_root%22%60%0A%7D%0A%0A%2F%2F%20Fork%20a%20sub%20property%20of%20ForkInfo.%0Atype%20Fork%20struct%20%7B%0APreviousVersion%20hexutil.Bytes%20%60json%3A%22previous_version%22%60%0ACurrentVersion%20hexutil.Bytes%20%60json%3A%22current_version%22%60%0AEpoch%20string%20%60json%3A%22epoch%22%60%20%2F_uint64_%2F%0A%7D%0A%0A%2F%2F%20AggregationSlot%20a%20sub%20property%20of%20AggregationSlotSignRequest.%0Atype%20AggregationSlot%20struct%20%7B%0ASlot%20string%20%60json%3A%22slot%22%60%0A%7D%0A%0A%2F%2F%20AggregateAndProof%20a%20sub%20property%20of%20AggregateAndProofSignRequest.%0Atype%20AggregateAndProof%20struct%20%7B%0AAggregatorIndex%20string%20%60json%3A%22aggregator_index%22%60%20%2F_%20uint64%20_%2F%0AAggregate%20_Attestation%20%60json%3A%22aggregate%22%60%0ASelectionProof%20hexutil.Bytes%20%60json%3A%22selection_proof%22%60%20%2F_%2096%20bytes%20_%2F%0A%7D%0A%0A%2F%2F%20Attestation%20a%20sub%20property%20of%20AggregateAndProofSignRequest.%0Atype%20Attestation%20struct%20%7B%0AAggregationBits%20hexutil.Bytes%20%60json%3A%22aggregation_bits%22%60%20%2F_hex%20bitlist_%2F%0AData%20%5C*AttestationData%20%60json%3A%22data%22%60%0ASignature%20hexutil.Bytes%20%60json%3A%22signature%22%60%0A%7D%0A%0A%2F%2F%20AttestationData%20a%20sub%20property%20of%20Attestation.%0Atype%20AttestationData%20struct%20%7B%0ASlot%20string%20%60json%3A%22slot%22%60%20%2F_%20uint64%20_%2F%0AIndex%20string%20%60json%3A%22index%22%60%20%2F_%20uint64%20_%2F%20%2F%2F%20Prysm%20uses%20CommitteeIndex%20but%20web3signer%20uses%20index.%0ABeaconBlockRoot%20hexutil.Bytes%20%60json%3A%22beacon_block_root%22%60%0ASource%20*Checkpoint%20%60json%3A%22source%22%60%0ATarget%20*Checkpoint%20%60json%3A%22target%22%60%0A%7D%0A%0A%2F%2F%20Checkpoint%20a%20sub%20property%20of%20AttestationData.%0Atype%20Checkpoint%20struct%20%7B%0AEpoch%20string%20%60json%3A%22epoch%22%60%0ARoot%20string%20%60json%3A%22root%22%60%0A%7D%0A%0A%60%60%60%0A%0A%5Battestation.proto%20from%20prysm%20(Message%20Structure)%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Fprysm%2Fv1alpha1%2Fattestation.proto)%0A%0A%60%60%60%0A%0Amessage%20AttestationData%20%7B%0A%2F%2F%20Attestation%20data%20includes%20information%20on%20Casper%20the%20Friendly%20Finality%20Gadget's%20votes%0A%2F%2F%20See%3A%20https%3A%2F%2Farxiv.org%2Fpdf%2F1710.09437.pdf%0A%0A%20%20%20%20%2F%2F%20Slot%20of%20the%20attestation%20attesting%20for.%0A%20%20%20%20uint64%20slot%20%3D%201%20%5B(ethereum.eth.ext.cast_type)%20%3D%20%22github.com%2Fprysmaticlabs%2Fprysm%2Fv3%2Fconsensus-types%2Fprimitives.Slot%22%5D%3B%0A%0A%20%20%20%20%2F%2F%20The%20committee%20index%20that%20submitted%20this%20attestation.%0A%20%20%20%20uint64%20committee_index%20%3D%202%20%20%5B(ethereum.eth.ext.cast_type)%20%3D%20%22github.com%2Fprysmaticlabs%2Fprysm%2Fv3%2Fconsensus-types%2Fprimitives.CommitteeIndex%22%5D%3B%0A%0A%20%20%20%20%2F%2F%2032%20byte%20root%20of%20the%20LMD%20GHOST%20block%20vote.%0A%20%20%20%20bytes%20beacon_block_root%20%3D%203%20%5B(ethereum.eth.ext.ssz_size)%20%3D%20%2232%22%5D%3B%0A%0A%20%20%20%20%2F%2F%20The%20most%20recent%20justified%20checkpoint%20in%20the%20beacon%20state%0A%20%20%20%20Checkpoint%20source%20%3D%204%3B%0A%0A%20%20%20%20%2F%2F%20The%20checkpoint%20attempting%20to%20be%20justified%20for%20the%20current%20epoch%20and%20its%20epoch%20boundary%20block%0A%20%20%20%20Checkpoint%20target%20%3D%205%3B%0A%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%20Appendix%20G%3A%20Sample%20Data%0A%0A%23%23%23%23%20Epoch%20Data%20for%20167040%0A%0AFollowing%20is%20the%20Epoch%20Data%20for%20167040%0AIt%20can%20be%20retrieved%20from%20%5Bhere%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html%23%2FEpoch%2Fget_api_v1_epoch__epoch_)%20or%20by%20using%20this%20curl%20command%0A%0A%60curl%20-X%20'GET'%20%5C%0A%20%20'https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fepoch%2F167040'%20%5C%0A%20%20-H%20'accept%3A%20application%2Fjson'%60%0A%0AResponse%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%7B%0A%22attestationscount%22%3A%203457%2C%0A%22attesterslashingscount%22%3A%200%2C%0A%22averagevalidatorbalance%22%3A%2033899775551%2C%0A%22blockscount%22%3A%2032%2C%0A%22depositscount%22%3A%200%2C%0A%22eligibleether%22%3A%2015596542000000000%2C%0A%22epoch%22%3A%20167040%2C%0A%22finalized%22%3A%20true%2C%0A%22globalparticipationrate%22%3A%200.9963188171386719%2C%0A%22missedblocks%22%3A%200%2C%0A%22orphanedblocks%22%3A%200%2C%0A%22proposedblocks%22%3A%2032%2C%0A%22proposerslashingscount%22%3A%200%2C%0A%22scheduledblocks%22%3A%200%2C%0A%22totalvalidatorbalance%22%3A%2016522615004645864%2C%0A%22validatorscount%22%3A%20487396%2C%0A%22voluntaryexitscount%22%3A%200%2C%0A%22votedether%22%3A%2015539128000000000%0A%7D%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20Block%20Data%20for%20Slot%205%2C330%2C592%0A%0AFollowing%20is%20the%20Block%20Data%20for%20Slot%205%2C330%2C592%0AIt%20can%20be%20retrieved%20from%20%5Bhere%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html%23%2FBlock%2Fget_api_v1_block__slotOrHash_)%20or%20by%20using%20this%20curl%20command%0A%0A%60curl%20-X%20'GET'%20'https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fblock%2F5330592'%20-H%20'accept%3A%20application%2Fjson'%60%0A%0AResponse%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%7B%0A%22attestationscount%22%3A%20126%2C%0A%22attesterslashingscount%22%3A%200%2C%0A%22blockroot%22%3A%20%220xaebe891086c79ab79b325f474dc1150f1223e567337bff815cc318f14c64c233%22%2C%0A%22depositscount%22%3A%200%2C%0A%22epoch%22%3A%20166581%2C%0A%22eth1data_blockhash%22%3A%20%220xd346f84ffe7c600b7714d6411c8bea988d9d64dbdb432f26db58e72946337954%22%2C%0A%22eth1data_depositcount%22%3A%20498785%2C%0A%22eth1data_depositroot%22%3A%20%220x9a5603a34aa60f299384679bf4bfc267e99b68278a81f343bde8cb5650bf1d60%22%2C%0A%22exec_base_fee_per_gas%22%3A%2012376913565%2C%0A%22exec_block_hash%22%3A%20%220x26239efe09f51b24bdf7c518b1aa925a3b0b6453682408ec8a5c906d5038a6e7%22%2C%0A%22exec_block_number%22%3A%2016163905%2C%0A%22exec_extra_data%22%3A%20%220x496c6c756d696e61746520446d6f63726174697a6520447374726962757465%22%2C%0A%22exec_fee_recipient%22%3A%20%220xdafea492d9c6733ae3d56b7ed1adb60692c98bc5%22%2C%0A%22exec_gas_limit%22%3A%2030000000%2C%0A%22exec_gas_used%22%3A%209901267%2C%0A%22exec_logs_bloom%22%3A%20%220x8c21554815843b4084a999b2901917a52c58004a82a8440d94919a77f9241181388a0c404f000a8c0321ab024800bf899610e60ec801fb4b0352e34f147626192648619065381ded6b9d92bcd0861120adc1ec01064e7a016ea91c478d01b81316462d2d622a60010bc0139f6fb8ccf200499c0e211a85c042047d1601aa0c2ea2833902a2a3091528492dad09f6dc064529c455d328413b78c680c4699815ac9a91610f19e66542edca45a10518ee65b02cf02241a124232d5958b6004cd0a5846c5703d00b5e4d8353221015f7d38c1429074e34aaa11f3804f933082860c401152088251479918297a1a9237d9ac35539f6d069cca07a005819494a653913%22%2C%0A%22exec_parent_hash%22%3A%20%220x06746d5ff105e96a1b8961c2490c0261b474604fbcbf934e86295c0030e26ce2%22%2C%0A%22exec_random%22%3A%20%220xc2861c72cf4d34b37ec73519dbc20b690742b5cc119ed3738f1dd67d8ca52723%22%2C%0A%22exec_receipts_root%22%3A%20%220x33cdf5c6e03dd341f282d02d3c354c2361a6212692b2a3c06b520397045313f4%22%2C%0A%22exec_state_root%22%3A%20%220x517304bade8d83337c9a52f8ceeb13f924b64486b3b8033f7c348c176922104a%22%2C%0A%22exec_timestamp%22%3A%201670791127%2C%0A%22exec_transactions_count%22%3A%20139%2C%0A%22graffiti%22%3A%20%220x0000000000000000000000000000000000000000000000000000000000000000%22%2C%0A%22graffiti_text%22%3A%20%22%22%2C%0A%22parentroot%22%3A%20%220x0cab36616bbcbbc67c343ddce00241c27d0df2c367c5fa82fc7c0fdf0ed37405%22%2C%0A%22proposer%22%3A%204345%2C%0A%22proposerslashingscount%22%3A%200%2C%0A%22randaoreveal%22%3A%20%220x83950cb64781aff91f4bd14aa6abb0f5fdb7e08e4e81c264f0754c93d7672c4a9615de196491fdb53eafdeb8f49e9cf515f1bd3dc05bb5dc0e2dd8bff5a8d783b503e3385e80b61485f0ddac1caa9361132a863db84e7e234df5815e6908e4e7%22%2C%0A%22signature%22%3A%20%220x84865a9480ae6313b0e5fcadfa294b35f5963e06c66ad1c7613dc081e9700c07f82a2583ba4b62b2483b4a1b9d49aafe0690f22fcf4d0072f9f44a5ce3067ef4fda560d171001cc6bf5dc84e09d9055d92894b86b27695c297f25530cd8db7a0%22%2C%0A%22slot%22%3A%205330592%2C%0A%22stateroot%22%3A%20%220x9e7e40d844c3b229cd9497d662a6d94276d285945073849995aba93c7e73cfe7%22%2C%0A%22status%22%3A%20%221%22%2C%0A%22syncaggregate_bits%22%3A%20%220xdffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffdfffffffffffffffdffffffffffffffffffffffff%22%2C%0A%22syncaggregate_participation%22%3A%200.9921875%2C%0A%22syncaggregate_signature%22%3A%20%220x95332c55790018eed3d17eada01cb4045348d09137505bc8697eeedaa3800a830ee2c138251850a9577f62a5488419ef0a722579156a177fb3a147017f1077af5d778f46a4cdf815fc450129d135fe5286e16df68333592e4aa45821bde780dd%22%2C%0A%22voluntaryexitscount%22%3A%200%2C%0A%22votes%22%3A%2019227%0A%7D%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20Execution%20Block%20for%2016163905%0A%0AFollowing%20is%20the%20execution%20block%20data%20for%2016163905%0AIt%20can%20be%20retrieved%20from%20%5Bhere%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html%23%2FExecution%2Fget_api_v1_execution_block__blockNumber_)%20or%20by%20using%20this%20curl%20command%0A%0A%60curl%20-X%20'GET'%20'https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fexecution%2Fblock%2F16163905'%20%20-H%20'accept%3A%20application%2Fjson'%60%0A%0AResult%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%5B%0A%7B%0A%22blockHash%22%3A%20%220x26239efe09f51b24bdf7c518b1aa925a3b0b6453682408ec8a5c906d5038a6e7%22%2C%0A%22blockNumber%22%3A%2016163905%2C%0A%22timestamp%22%3A%201670791127%2C%0A%22blockReward%22%3A%2037343826945103810%2C%0A%22blockMevReward%22%3A%2037083911760238810%2C%0A%22producerReward%22%3A%2037083911760238810%2C%0A%22feeRecipient%22%3A%20%220xdafea492d9c6733ae3d56b7ed1adb60692c98bc5%22%2C%0A%22gasLimit%22%3A%2030000000%2C%0A%22gasUsed%22%3A%209901267%2C%0A%22baseFee%22%3A%2012376913565%2C%0A%22txCount%22%3A%20139%2C%0A%22internalTxCount%22%3A%2054%2C%0A%22uncleCount%22%3A%200%2C%0A%22parentHash%22%3A%20%220x06746d5ff105e96a1b8961c2490c0261b474604fbcbf934e86295c0030e26ce2%22%2C%0A%22uncleHash%22%3A%20%220x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347%22%2C%0A%22difficulty%22%3A%200%2C%0A%22posConsensus%22%3A%20%7B%0A%22executionBlockNumber%22%3A%2016163905%2C%0A%22proposerIndex%22%3A%204345%2C%0A%22slot%22%3A%205330592%2C%0A%22epoch%22%3A%20166581%2C%0A%22finalized%22%3A%20true%0A%7D%2C%0A%22relay%22%3A%20%7B%0A%22tag%22%3A%20%22flashbots-relay%22%2C%0A%22builderPubkey%22%3A%20%220x81beef03aafd3dd33ffd7deb337407142c80fea2690e5b3190cfc01bde5753f28982a7857c96172a75a234cb7bcb994f%22%2C%0A%22producerFeeRecipient%22%3A%20%220x60987e0d8b5e0095869ca6f0e642828e3f258bb5%22%0A%7D%2C%0A%22consensusAlgorithm%22%3A%20%22pos%22%0A%7D%0A%5D%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20Sync%20Committee%20(latest)%0A%0AFollowing%20is%20a%20sample%20Sync%20Committee%0AIt%20can%20be%20retrieved%20from%20%5Bhere%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html%23%2FSyncCommittee%2Fget_api_v1_sync_committee__period_)%20or%20by%20using%20this%20curl%20command%0A%0A%60curl%20-X%20'GET'%20'https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fsync_committee%2Flatest'%20-H%20'accept%3A%20application%2Fjson'%60%0A%0AAbbrieviated%20Result%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%7B%0A%22end_epoch%22%3A%20167167%2C%0A%22period%22%3A%20652%2C%0A%22start_epoch%22%3A%20166912%2C%0A%22validators%22%3A%20%5B%0A328781%2C%0A184949%2C%0A...%0A%5D%0A%7D%0A%7D%0A%0A%60%60%60%0A%0A%3Cdetails%3E%0A%3Csummary%3EFull%20Result%3C%2Fsummary%3E%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%7B%0A%22end_epoch%22%3A%20167167%2C%0A%22period%22%3A%20652%2C%0A%22start_epoch%22%3A%20166912%2C%0A%22validatorsdetails%3E%0A%0A%23%23%23%20Appendix%20H%3A%20Sync%20Committe%20Creation%20and%20Retrieval%0A%0A**Sync%20Committee%20Configuration**%0A%0A%60EPOCHS_PER_SYNC_COMMITTEE_PERIOD%60%20is%20set%20in%20%5Bconfig.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconfig%2Fparams%2Fconfig.go%23L185)%20currently%20255%20epochs%20per%20synch%20comittee%20(approx%2027%20hrs)%20for%20Ethreum%20Mainnet.%0A%0A**Sync%20Committee%20Update%20Process**%0A%0A-%20%5Bbeacon-chain%2Fblockchain%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fblockchain)%0A%20%20-%20%5Bprocess_block.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fblockchain%2Fprocess_block.go)%3A%20has%20function%20%60onBlock%60%20which%20is%20called%20when%20a%20gossip%20block%20is%20received.%20It%20also%20has%20function%20%60handleEpochBoundary%60%20which%20calls%20%60ProcessSlots%60%20in%20%5Bbeacon-chain%2Fcore%2Ftransition%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Ftransition)%20and%20calls%20function%20%60UpdateCommitteeCache%60%20in%20%5Bbeacon-chain%2Fcore%2Fhelpers%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Fhelpers)%0A-%20%5Bbeacon-chain%2Fcore%2Ftransition%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Ftransition)%0A%20%20-%20%5Btransition.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Ftransition%2Ftransition.go)%3A%20implements%20the%20whole%20state%20transition%20function%20which%20consists%20of%20per%20slot%2C%20per-epoch%20transitions.%20function%20%60ProcessSlots%60%20calls%20%60ProcessEpoch%60%20in%20%5Bbeacon-chain%2Fcore%2Faltair%2Ftransition.go%5D(%3C(%253Chttps%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Ftransition.go)%253E%3E)%0A-%20%5Bbeacon-chain%2Fcore%2Faltair%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair)%0A%20%20-%20%5Btransition.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Ftransition.go)%3A%20includes%20function%20%60ProcessEpoch%60%20which%20calls%20%60ProcessSyncCommitteeUpdates%60%20in%20%5Bepoch_spec.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Fepoch_spec.go)%0A%20%20-%20%5Bepoch_spec.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Fepoch_spec.go)%3A%20includes%20function%20%60ProcessSyncCommitteeUpdates%60%20which%20calls%20%60NextSyncCommittee%60%20it%20also%20persists%20beacon%20state%20syncCommittee%20by%20calling%20%60beaconState.SetNextSyncCommittee(nextSyncCommittee)%60%20in%20%5Bsetters_sync_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fstate%2Fstate-native%2Fsetters_sync_committee.go)%0A%20%20-%20%5Bsync_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Fsync_committee.go)%3A%20includes%20function%20%60NextSyncCommittee%60%20which%20calls%20%60NextSyncCommittee%60%20to%20return%20the%20sync%20committee%20indices%2C%20with%20possible%20duplicates%2C%20for%20the%20next%20sync%20committee.%0A%20%20-%20%5Bblock.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Fblock.go)%3A%20includes%20function%20%60VerifySyncCommitteeSig%60%0A-%20%5Bbeacon-chain%2Fcore%2Fhelpers%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Fhelpers)%0A%20%20-%20%5Bbeacon_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Fhelpers%2Fbeacon_committee.go)%20has%20function%20%60UpdateCommitteeCache%60%20which%20gets%20called%20at%20the%20beginning%20of%20every%20epoch%20to%20cache%20the%20committee%20shuffled%20indices%20list%20with%20committee%20index%20and%20epoch%20number.%20It%20caches%20the%20shuffled%20indices%20for%20current%20epoch%20and%20next%20epoch.%20it%20calls%20%60UpdatePositionsInCommittee%60%20in%20%5Bsync_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcache%2Fsync_committee.go)%0A-%20%5Bbeacon-chain%2Fcache%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcache)%0A%20%20-%20%5Bsync_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcache%2Fsync_committee.go)%3A%20has%20function%20%60UpdatePositionsInCommittee%60%20which%20updates%20caching%20of%20validators%20position%20in%20sync%20committee%20in%20respect%20to%20current%20epoch%20and%20next%20epoch.%20This%20should%20be%20called%20when%20%60current_sync_committee%60%20and%20%60next_sync_committee%60%20change%20and%20that%20happens%20every%20%60EPOCHS_PER_SYNC_COMMITTEE_PERIOD%60.%0A%0A**Sync%20Committee%20Retrieval**%0AgRPC%20and%20API%20methods%0A%0A-%20%5Bbeacon-chain%2Frpc%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Frpc)%0A%20%20-%20%5Bprysm%2Fv1alpha1%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1)%0A%20%20%20%20-%20%5Bvalidator%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1%2Fvalidator)%0A%20%20%20%20%20%20-%20%5Bassignments.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1%2Fvalidator%2Fassignments.go)%3A%20has%20functions%20%60GetDuties%60%20and%20%60StreamDuties%60%20which%20calls%20function%20%60duties%60%20to%20compute%20the%20validator%20duties%20from%20the%20head%20state's%20corresponding%20epoch%20for%20validators%20public%20key%20%2F%20indices%20requested.%0A%0Awhich%20%5Bmanages%20sync%20committee%20duties%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1%2Fvalidator%2Fassignments.go%23L213)%20every%20%60EPOCHS_PER_SYNC_COMMITTEE_PERIOD%20-%201%60%20which%20is%20set%20in%20%5Bconfig.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconfig%2Fparams%2Fconfig.go%23L185)%20currently%20255%20epochs%20per%20synch%20comittee%20(approx%2027%20hrs)%20for%20Ethreum%20Mainnet.%0A%0A%5BregisterSyncSubnetNextPeriod%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1%2Fvalidator%2Fassignments.go%23L281)%0A%0A%60%60%60%0A%0Afunc%20registerSyncSubnetNextPeriod(s%20beaconState.BeaconState%2C%20epoch%20types.Epoch%2C%20pubKey%20%5B%5Dbyte%2C%20status%20ethpb.ValidatorStatus)%20error%20%7B%0Acommittee%2C%20err%20%3A%3D%20s.NextSyncCommittee()%0Aif%20err%20!%3D%20nil%20%7B%0Areturn%20err%0A%7D%0AsyncCommPeriod%20%3A%3D%20slots.SyncCommitteePeriod(epoch)%0AregisterSyncSubnet(epoch%2C%20syncCommPeriod%2B1%2C%20pubKey%2C%20committee%2C%20status)%0Areturn%20nil%0A%7D%0A%0A%60%60%60%0A%0A**Sync%20Committee%20Storage**%0A%0APersistence%20Mechanism%0A%0A-%20%5Bproto%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fproto)%0A%20%20-%20%5Beth%2Fv2%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fproto%2Feth%2Fv2)%0A%20%20%20%20-%20%5Bvalidator.proto%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Feth%2Fv2%2Fvalidator.proto)%3A%20messages%20for%20validators%20including%20%60SyncCommitteeDuty%60%0A%20%20%20%20-%20%5Bsync_committee.proto%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Feth%2Fv2%2Fsync_committee.proto)%3A%20messages%20for%20SyncCommittee%20which%20serves%20as%20committees%20to%20facilitate%20light%20client%20syncing%20to%20beacon%20chain.%0A%0A%5Bbeacon_state_mainnet.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fstate%2Fstate-native%2Fbeacon_state_mainnet.go)%0A%0A%60%60%60%0A%0A%2F%2F%20BeaconState%20defines%20a%20struct%20containing%20utilities%20for%20the%20Ethereum%20Beacon%20Chain%20state%2C%20defining%0A%2F%2F%20getters%20and%20setters%20for%20its%20respective%20values%20and%20helpful%20functions%20such%20as%20HashTreeRoot().%0Atype%20BeaconState%20struct%20%7B%0Aversion%20int%0AgenesisTime%20uint64%0AgenesisValidatorsRoot%20%5B32%5Dbyte%0Aslot%20eth2types.Slot%0Afork%20*ethpb.Fork%0AlatestBlockHeader%20*ethpb.BeaconBlockHeader%0AblockRoots%20*customtypes.BlockRoots%0AstateRoots%20*customtypes.StateRoots%0AhistoricalRoots%20customtypes.HistoricalRoots%0Aeth1Data%20*ethpb.Eth1Data%0Aeth1DataVotes%20%5B%5D*ethpb.Eth1Data%0Aeth1DepositIndex%20uint64%0Avalidators%20%5B%5D*ethpb.Validator%0Abalances%20%5B%5Duint64%0ArandaoMixes%20*customtypes.RandaoMixes%0Aslashings%20%5B%5Duint64%0ApreviousEpochAttestations%20%5B%5D*ethpb.PendingAttestation%0AcurrentEpochAttestations%20%5B%5D*ethpb.PendingAttestation%0ApreviousEpochParticipation%20%5B%5Dbyte%0AcurrentEpochParticipation%20%5B%5Dbyte%0AjustificationBits%20bitfield.Bitvector4%0ApreviousJustifiedCheckpoint%20*ethpb.Checkpoint%0AcurrentJustifiedCheckpoint%20*ethpb.Checkpoint%0AfinalizedCheckpoint%20*ethpb.Checkpoint%0AinactivityScores%20%5B%5Duint64%0AcurrentSyncCommittee%20*ethpb.SyncCommittee%0AnextSyncCommittee%20*ethpb.SyncCommittee%0AlatestExecutionPayloadHeader%20*enginev1.ExecutionPayloadHeader%0AlatestExecutionPayloadHeaderCapella%20%5C*enginev1.ExecutionPayloadHeaderCapella%0AnextWithdrawalIndex%20uint64%0AnextWithdrawalValidatorIndex%20eth2types.ValidatorIndex%0A%0Alock%20sync.RWMutex%0AdirtyFields%20map%5Bnativetypes.FieldIndex%5Dbool%0AdirtyIndices%20map%5Bnativetypes.FieldIndex%5D%5B%5Duint64%0AstateFieldLeaves%20map%5Bnativetypes.FieldIndex%5D*fieldtrie.FieldTrie%0ArebuildTrie%20map%5Bnativetypes.FieldIndex%5Dbool%0AvalMapHandler%20*stateutil.ValidatorMapHandler%0AmerkleLayers%20%5B%5D%5B%5D%5B%5Dbyte%0AsharedFieldReferences%20map%5Bnativetypes.FieldIndex%5D%5C*stateutil.Reference%0A%7D%0A%0A%60%60%60%0A%0A%5Bbeacon_state.pb.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Fprysm%2Fv1alpha1%2Fbeacon_state.pb.go%23L962)%0A%0A%60%60%60%0A%0Atype%20SyncCommittee%20struct%20%7B%0Astate%20protoimpl.MessageState%0AsizeCache%20protoimpl.SizeCache%0AunknownFields%20protoimpl.UnknownFields%0A%0APubkeys%20%5B%5D%5B%5Dbyte%20%60protobuf%3A%22bytes%2C1%2Crep%2Cname%3Dpubkeys%2Cproto3%22%20json%3A%22pubkeys%2Comitempty%22%20ssz-size%3A%22512%2C48%22%60%0AAggregatePubkey%20%5B%5Dbyte%20%60protobuf%3A%22bytes%2C2%2Copt%2Cname%3Daggregate_pubkey%2Cjson%3DaggregatePubkey%2Cproto3%22%20json%3A%22aggregate_pubkey%2Comitempty%22%20ssz-size%3A%2248%22%60%0A%7D%0A%0A%60%60%60%0A%0A%5BInterfaces%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fstate%2Finterfaces.go)%0A%0A%60%60%60%0A%0A%2F%2F%20BeaconState%20has%20read%20and%20write%20access%20to%20beacon%20state%20methods.%0Atype%20BeaconState%20interface%20%7B%0ASpecParametersProvider%0AReadOnlyBeaconState%0AReadOnlyWithdrawals%0AWriteOnlyBeaconState%0ACopy()%20BeaconState%0AHashTreeRoot(ctx%20context.Context)%20(%5B32%5Dbyte%2C%20error)%0AFutureForkStub%0AStateProver%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0A%2F%2F%20StateProver%20defines%20the%20ability%20to%20create%20Merkle%20proofs%20for%20beacon%20state%20fields.%0Atype%20StateProver%20interface%20%7B%0AFinalizedRootProof(ctx%20context.Context)%20(%5B%5D%5B%5Dbyte%2C%20error)%0ACurrentSyncCommitteeProof(ctx%20context.Context)%20(%5B%5D%5B%5Dbyte%2C%20error)%0ANextSyncCommitteeProof(ctx%20context.Context)%20(%5B%5D%5B%5Dbyte%2C%20error)%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0A%60%60%60%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./harmony-C0C1ZQm0.js"),[]),path:"/research/chains/harmony",type:"mdx",filePath:"research/chains/harmony.mdx",content:"%23%20Harmony%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0ADespite%20relatively%20lower%20usage%20than%20other%20candidates%2C%20Harmony%20has%20a%20mature%2C%20battle-tested%20implementation%20for%20fast%20consensus%20using%20BLS-based%20signature%20schemes%2C%20which%20has%20been%20in%20production%20for%20over%202%20years.%20Additionally%2C%20many%20other%20chains%20are%20also%20moving%20towards%20using%20BLS%20for%20signing%20blocks%20in%20their%20consensus%20protocols.%0A%0AHarmony%20follows%20a%20two-round%20Fast%20Byzantine%20Fault%20Tolerance%20consensus%20derived%20from%20PBFT%2C%20where%20BLS%20signatures%20(on%20the%20BLS12-381%20curve)%20are%20used%20to%20reduce%20communication%20costs%5B%5E1%5D.%20Blocks%20are%20produced%20by%20validator%20leaders%2C%20a%20minimal%20subset%20of%20validators%2C%20then%20further%20broadcasted%20to%20all%20validators%20and%20confirmed%20when%20more%20than%202%2F3%20of%20validators%20sign%20the%20block%20with%20their%20own%20BLS%20signatures.%20The%20leader%20then%20aggregates%20the%20signatures%20into%20a%20single%20one%20and%20broadcasts%20again.%20The%20validators%20may%20verify%20the%20aggregated%20signature%20and%20sign%20the%20block%20again%20before%20sending%20the%20signed%20block%20back%20to%20the%20leader.%20Finally%2C%20the%20leader%20(after%20receiving%20signatures%20from%202%2F3%20of%20the%20validators)%20may%20aggregate%20the%20signature%20for%20one%20last%20time%20and%20finalize%20the%20block.%20In%20the%20block%20header%2C%20the%20leader%20records%20which%20validators'%20signatures%20are%20received%20in%20each%20round.%0A%0AThe%20protocol%20uses%20a%20slot-bidding%20mechanism%20to%20elect%20a%20variable%20number%20of%20validators%20to%20fill%20800-slots%2C%20where%20each%20validator%20may%20occupy%20multiple%20slots%20if%20their%20total%20delegated%20stake%20per%20slot%20is%20greater%20than%20the%20effective%20median%5B%5E2%5D.%0A%0A%23%23%20Consensus%20Mechanism%0A%0A%23%23%23%20Harmony%20Fast%20Byzantine%20Fault%20Tolerance%20(FBFT)%0A%0AThe%20following%20is%20an%20excerpt%20from%20%5BConsensus%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fgeneral%2Ftechnology%2Fconsensus)%0A%0A%3E%20The%20consensus%20algorithm%20is%20a%20key%20component%20of%20any%20blockchain.%20It%20determines%20the%20security%20and%20performance%20of%20a%20blockchain%20and%20is%20often%20referred%20to%20as%20the%20%22engine%22%20of%20a%20blockchain.%20Harmony%E2%80%99s%20consensus%20algorithm%20is%20called%20Fast%20Byzantine%20Fault%20Tolerance%20(FBFT)%2C%20which%20is%20an%20innovative%20upgrade%20on%20the%20famous%20PBFT%20algorithm.%20FBFT%20is%20one%20order%20of%20magnitude%20faster%20and%20more%20scalable%20than%20PBFT%20because%20BLS%20(Boneh%E2%80%93Lynn%E2%80%93Shacham)%20aggregate%20signature%20is%20used%20to%20significantly%20reduce%20the%20communication%20cost.%20Specifically%2C%20FBFT%20allows%20at%20least%20250%20validators%20to%20reach%20consensus%20within%202%20seconds.%0A%3E%0A%3E%20For%20every%20round%20of%20consensus%20in%20FBFT%2C%20one%20validator%20serves%20as%20the%20%E2%80%9Cleader%E2%80%9D%20and%20there%20are%20three%20phases%3A%20the%20announce%20phase%2C%20the%20prepare%20phase%20and%20the%20commit%20phase.%20In%20the%20announce%20phase%2C%20the%20leader%20proposes%20a%20new%20block%20and%20broadcasts%20the%20block%20hash%20to%20all%20of%20the%20validators.%20In%20the%20prepare%20phase%2C%20validators%20verify%20the%20message%20and%20sign%20on%20the%20block%20hash%2C%20as%20well%20as%20sending%20the%20signature%20back%20to%20the%20leader.%20The%20prepare%20phase%20finishes%20when%20signatures%20with%20more%20than%202%2F3%20of%20the%20voting%20power%20are%20collected.%20After%20that%2C%20the%20leader%20aggregated%20the%20collected%20signatures%20into%20a%20O(1)-sized%20BLS%20aggregate%20signature%20and%20then%20broadcast%20it%20with%20the%20whole%20block%20to%20start%20the%20commit%20phase.%20The%20commit%20phase%20involves%20validators%20verifying%20the%20block%20and%20doing%20a%20similar%20signing%20process%20as%20the%20prepare%20phase%20(i.e.%202%2F3%20voting%20power%20collection).%20The%20consensus%20is%20reached%20after%20the%20commit%20phase%20is%20done.%20This%20whole%20process%20can%20be%20done%20within%202%20seconds%20in%20mainnet.%0A%0AThe%20following%20is%20an%20excerpt%20from%20%5BEpoch%20Transition%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fnetwork%2Fvalidators%2Fdefinitions%2Fepoch-transition)%0A%0A%3E%20An%20epoch%20is%20a%20period%20of%20time%20when%20the%20beacon%20shard%20(i.e.%20shard%200%2C%20the%20coordinator%20for%20other%20shards)%20produces%20a%20fixed%20number%20of%20blocks.%20In%20Harmony%20mainnet%2C%20an%20epoch%20is%2032768%20blocks%20(~18.2h%20with%20a%202s%20block%20time)%20in%20the%20beacon%20shard%0A%0A_Note%3A%20If%20the%20leader%20fails%20to%20produce%20a%20block%20within%20a%20certain%20time%20frame%2C%20then%20a%20new%20leader%20is%20elected_%0A%0A!%5BHarmony%20FBFT%5D(%2F%2Fresearch%2Fharmony-consensus.png%20%22Harmony%20FBFT%22)%0A%0ABlock%20Structure%20from%20%5Bharmony%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fblock%2Fv3%2Fheader.go)%0A%0A%60%60%60%0Atype%20headerFields%20struct%20%7B%0A%20ParentHash%20%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22parentHash%22%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Coinbase%20%20%20%20%20%20%20%20%20%20%20%20common.Address%20%60json%3A%22miner%22%20%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Root%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22stateRoot%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20TxHash%20%20%20%20%20%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22transactionsRoot%22%20gencodec%3A%22required%22%60%0A%20ReceiptHash%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22receiptsRoot%22%20%20%20%20%20gencodec%3A%22required%22%60%0A%20OutgoingReceiptHash%20common.Hash%20%20%20%20%60json%3A%22outgoingReceiptsRoot%22%20%20%20%20%20gencodec%3A%22required%22%60%0A%20IncomingReceiptHash%20common.Hash%20%20%20%20%60json%3A%22incomingReceiptsRoot%22%20gencodec%3A%22required%22%60%0A%20Bloom%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ethtypes.Bloom%20%60json%3A%22logsBloom%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Number%20%20%20%20%20%20%20%20%20%20%20%20%20%20*big.Int%20%20%20%20%20%20%20%60json%3A%22number%22%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20GasLimit%20%20%20%20%20%20%20%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%60json%3A%22gasLimit%22%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20GasUsed%20%20%20%20%20%20%20%20%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%60json%3A%22gasUsed%22%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Time%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20*big.Int%20%20%20%20%20%20%20%60json%3A%22timestamp%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Extra%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%20%20%20%60json%3A%22extraData%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20MixDigest%20%20%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22mixHash%22%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20%2F%2F%20Additional%20Fields%0A%20ViewID%20%20%20%20%20%20%20%20%20%20%20%20%20%20*big.Int%20%60json%3A%22viewID%22%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Epoch%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20*big.Int%20%60json%3A%22epoch%22%20%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20ShardID%20%20%20%20%20%20%20%20%20%20%20%20%20uint32%20%20%20%60json%3A%22shardID%22%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20LastCommitSignature%20%5B96%5Dbyte%20%60json%3A%22lastCommitSignature%22%20%20gencodec%3A%22required%22%60%0A%20LastCommitBitmap%20%20%20%20%5B%5Dbyte%20%20%20%60json%3A%22lastCommitBitmap%22%20%20%20%20%20gencodec%3A%22required%22%60%20%2F%2F%20Contains%20which%20validator%20signed%0A%20Vrf%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%60json%3A%22vrf%22%60%0A%20Vdf%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%60json%3A%22vdf%22%60%0A%20ShardState%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%60json%3A%22shardState%22%60%0A%20CrossLinks%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%60json%3A%22crossLink%22%60%0A%20Slashes%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%60json%3A%22slashes%22%60%0A%7D%0A%60%60%60%0A%0A%23%23%20Signing%20Mechanism%0A%0AHarmony%20uses%20BLS12_381%20signatures%20for%20validators%20signing%20blocks.%20They%20began%20work%20on%20enhancing%20the%20%5Bherumi%2Fbls%20package%5D(https%3A%2F%2Fgithub.com%2Fherumi%2Fbls)%20in%20Jan%202019%20to%20%5Bsupport%20BLS12_381%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fbls%2Fcommit%2F302fc1eea9d59cecb1a464280944f5b152d7e781).%20They%20have%20added%20%5Bbls%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fcrypto%2Fbls%2Fbls.go)%20and%20%5Bmutibls%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fmultibls%2Fmultibls.go)%20to%20the%20%5Bharmony%20codbase%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony)%20leveraging%20their%20%5Bharmony-one%20bls%20package%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fbls).%0A%0A%23%23%20Light%20Client%20Support%0A%0AHarmony%20is%20actively%20looking%20at%20light%20client%20support%5B%5E3%5D.%0A%0ASome%20initial%20work%20has%20been%20done%20for%20the%20support%20of%20%5BMerkle%20Mountain%20Ranges%5D(https%3A%2F%2Fgithub.com%2Fopentimestamps%2Fopentimestamps-server%2Fblob%2Fmaster%2Fdoc%2Fmerkle-mountain-range.mdx)%20has%20been%20proposed%20by%20Harmony%20in%20the%20pull%20request%20%5B%5BWIP%5D%20MMR-HardFork%3A%20add%20go-merklemountainrange%20and%20modified%20merkle%20proof%20logic%20%233872%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F3872).%0A%0AThis%20introduces%20a%20new%20field%20into%20the%20block%20header%20populated%20by%20%5Bmmr.go%5D(https%3A%2F%2Fgithub.com%2Fgupadhyaya%2Fharmony%2Fblob%2Fmmr-hard-fork%2Finternal%2Fmmr%2Fmmr.go)%20which%20credits%20%5Bzmitton%2Fgo-merklemountainrange%5D(https%3A%2F%2Fgithub.com%2Fzmitton%2Fgo-merklemountainrange).%0A%0AUpdated%20%5BInterface.go%5D(https%3A%2F%2Fgithub.com%2Fgupadhyaya%2Fharmony%2Fblob%2Fmmr-hard-fork%2Fblock%2Finterface%2Fheader.go)%0A%0A%60%60%60%0A%2F%2F%20MMRRoot%20is%20the%20root%20of%20the%20Merkle%20Mountain%20Range%20tree%20formed%0A%2F%2F%20using%20the%20block%20hashes%20of%20the%20current%20epoch%0AMMRRoot()%20%5B%5Dbyte%0A%0A%2F%2F%20SetMMRRoot%20sets%20the%20updated%20MMR%20root%20after%20appending%20the%20parentHash%0ASetMMRRoot(newMMRRoot%20%5B%5Dbyte)%0A%60%60%60%0A%0AUpdated%20%5Bheader.go%5D(https%3A%2F%2Fgithub.com%2Fgupadhyaya%2Fharmony%2Fblob%2Fmmr-hard-fork%2Fblock%2Fv4%2Fheader.go)%0A%0A%60%60%60%0A%2F%2F%20MMRRoot%20is%20the%20root%20of%20the%20Merkle%20Mountain%20Range%20tree%20formed%0A%2F%2F%20using%20the%20block%20hashes%20of%20the%20current%20epoch%0Afunc%20(h%20*Header)%20MMRRoot()%20%5B%5Dbyte%20%7B%0A%20return%20append(h.fields.MMRRoot%5B%3A0%3A0%5D%2C%20h.fields.MMRRoot...)%0A%7D%0A%0A%2F%2F%20SetMMRRoot%20sets%20the%20updated%20MMR%20root%20after%20appending%20the%20parentHash%0Afunc%20(h%20*Header)%20SetMMRRoot(newMMRRoot%20%5B%5Dbyte)%20%7B%0A%20h.fields.MMRRoot%20%3D%20append(newMMRRoot%5B%3A0%3A0%5D%2C%20newMMRRoot...)%0A%7D%0A%60%60%60%0A%0AHarmony%20%5BMMR%20PR%20Review%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F3872)%20and%20%5Blatest%20PR%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198%2Ffiles)%20uses%20Merkle%20Mountain%20Ranges%20to%20facilitate%20light%20client%20development%20against%20Harmony's%20sharded%20Proof%20of%20Stake%20Chain.%0A%0A**Key%20Core%20Protocol%20Changes%20Include**%0ABlock%20Structure%20from%20%5Bharmony%5D(https%3A%2F%2Fgithub.com%2Fpeekpi%2Fharmony%2Fblob%2FmmrHardfork%2Fblock%2Fv4%2Fheader.go)%20with%20%5BMerkle%20Mountain%20Range%5D(https%3A%2F%2Fdocs.grin.mw%2Fwiki%2Fchain-state%2Fmerkle-mountain-range%2F)%20support%20%5BMmr%20hardfork%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F3872)%20%5BPR%204198%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198)%20introduces%20%60MMRoot%60%0A%0AGOAL%3A%20Allow%20verification%20that%20previous%20blocks%20were%20valid%20based%20on%20the%20MMRRoot%20Passed.%0A%0AFeatures%0A%0A-%20add%20receipt%20proof%0A-%20adding%20MMRRoot%20field%20to%20block%20header%20%26%20cross-chain%20epoch%0A-%20add%20memdb%20and%20filedb%20mmr%20processing%20logic%0A-%20add%20GetProof%20rpc%0A-%20relayer%20rpcs%20for%20fetching%20full%20header%0A-%20adding%20block%20signers%20for%20rpc%20response%2C%20debug-only%0A-%20minor%20testing%20bls%0A-%20fix%20merge%20conflicts%0A-%20github.com%2Fzmitton%2Fgo-merklemountainrange%20dependency%0A-%20minor%20fix%0A-%20moving%20mmr%20root%20compute%2Fupdate%20logic%20to%20after%20the%20shard%20state%20is%20computed%0A-%20fix%20getting%20siblings%20bug%0A-%20adding%20index%20to%20mmr-proof%20and%20GetProof%20with%20respect%20to%20a%20block%20number%0A-%20check%20if%20mmr%20directory%20exists%2C%20if%20not%20create%20it%20first%0A-%20fixing%20failing%20test%0A-%20fixing%20config%20build%20test%20failure%0A-%20fixing%20more%20test%20failures%0A-%20cleanup%0A-%20turn%20of%20signers%0A-%20fix%20header%20copy%20issue%20and%20write%20mmr%20root%20directly%20to%20node.worker%20header%0A-%20fix%20nil%20pointer%20problems%2C%20shard%20state%20fetch%20issue%2C%20and%20refIndex%20bug%0A-%20clean%20up%0A%0A%60%60%60%0Atype%20headerFields%20struct%20%7B%0A%20ParentHash%20%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22parentHash%22%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Coinbase%20%20%20%20%20%20%20%20%20%20%20%20common.Address%20%60json%3A%22miner%22%20%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Root%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22stateRoot%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20TxHash%20%20%20%20%20%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22transactionsRoot%22%20gencodec%3A%22required%22%60%0A%20ReceiptHash%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22receiptsRoot%22%20%20%20%20%20gencodec%3A%22required%22%60%0A%20OutgoingReceiptHash%20common.Hash%20%20%20%20%60json%3A%22outgoingReceiptsRoot%22%20%20%20%20%20gencodec%3A%22required%22%60%0A%20IncomingReceiptHash%20common.Hash%20%20%20%20%60json%3A%22incomingReceiptsRoot%22%20gencodec%3A%22required%22%60%0A%20Bloom%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ethtypes.Bloom%20%60json%3A%22logsBloom%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Number%20%20%20%20%20%20%20%20%20%20%20%20%20%20*big.Int%20%20%20%20%20%20%20%60json%3A%22number%22%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20GasLimit%20%20%20%20%20%20%20%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%60json%3A%22gasLimit%22%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20GasUsed%20%20%20%20%20%20%20%20%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%60json%3A%22gasUsed%22%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Time%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20*big.Int%20%20%20%20%20%20%20%60json%3A%22timestamp%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Extra%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%20%20%20%60json%3A%22extraData%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20MixDigest%20%20%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22mixHash%22%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20%2F%2F%20Additional%20Fields%0A%20ViewID%20%20%20%20%20%20%20%20%20%20%20%20%20%20*big.Int%20%20%20%20%60json%3A%22viewID%22%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Epoch%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20*big.Int%20%20%20%20%60json%3A%22epoch%22%20%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20ShardID%20%20%20%20%20%20%20%20%20%20%20%20%20uint32%20%20%20%20%20%20%60json%3A%22shardID%22%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20LastCommitSignature%20%5B96%5Dbyte%20%20%20%20%60json%3A%22lastCommitSignature%22%20%20gencodec%3A%22required%22%60%0A%20LastCommitBitmap%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%60json%3A%22lastCommitBitmap%22%20%20%20%20%20gencodec%3A%22required%22%60%20%2F%2F%20Contains%20which%20validator%20signed%0A%20Vrf%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%60json%3A%22vrf%22%60%0A%20Vdf%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%60json%3A%22vdf%22%60%0A%20ShardState%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%60json%3A%22shardState%22%60%0A%20CrossLinks%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%60json%3A%22crossLink%22%60%0A%20Slashes%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%60json%3A%22slashes%22%60%0A%20MMRRoot%20%20%20%20%20%20%20%20%20%20%20%20%20common.Hash%20%60json%3A%22mmrRoot%22%60%0A%7D%0A%60%60%60%0A%0A**Sample%20Light%20Client%20Implementation%3A%20Horizon%20Bridge%20Harmony%20Light%20Client%20Deployed%20on%20Ethereum**%0A%0AThis%20enables%20the%20validation%20of%20previous%20blocks%20by%20implemented%20by%20%5BTokenLockerOnEthereum.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FTokenLockerOnEthereum.sol)%20to%20use%20%5BMMRVerifier.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FMMRVerifier.sol)%20uses%20%60.%2Flib%2FMMRVerifier.sol%60%20to%20validate%20the%20%5BMountain%20Merkle%20Ranges%5D(https%3A%2F%2Fgithub.com%2Fopentimestamps%2Fopentimestamps-server%2Fblob%2Fmaster%2Fdoc%2Fmerkle-mountain-range.mdx)%0A%0A%23%23%20Code%20Review%0A%0AThe%20%5BHarmony%20codebase%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony)%20was%20originally%20cloned%20from%20%5BEthereum%201.0%5D(.%2Fethereum-1-0.mdx)%20around%202019.Thus%20the%20majority%20of%20code%20incuding%20primitives%2C%20signing%20are%20similar%20as%20at%20that%20period.%20Since%20then%20Ethreum%20has%20worked%20siginficantly%20on%20Ethreum%202.0%20and%20these%20modifications%20were%20selectively%20leveraged%20by%20Harmony.%0A%0A%5BHarmony%20has%20significant%20differences%5D(https%3A%2F%2Fmedium.com%2Fharmony-one%2F2022-harmony-technical-review-88462efba368)%20from%20Ethereum%201.0%20including%20sharding%2C%20Effective%20Proof%20of%20Stake%20Consensus%20Mechanism%2C%20%5BRosetta%20support%5D(https%3A%2F%2Fwww.rosetta-api.org%2Fdocs%2Fwelcome.html)%20and%20verifiable%20delay%20functions%20and%20verifiaable%20random%20functions.%0A%0A%23%23%23%20Signing%0A%0A-%20%5Bbls%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fcrypto%2Fbls%2Fbls.go)%3A%20An%20implementation%20of%20BLS%20threshold%20signature%0A-%20%5Bmultibls%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fmultibls%2Fmultibls.go)%3A%20Wrapper%20for%20a%20collection%20of%20bls%20private%20and%20public%20keys%20with%20dedup%20functionality%20and%20the%20ability%20to%20serialize%20to%20a%20hex%20string.%0A%0A%23%23%23%20Consensus%0A%0A-%20%5Bconsensus%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fconsensus)%3A%20Consensus%20package%20includes%20the%20Harmony%20BFT%20consensus%20protocol%20code%2C%20which%20uses%20BLS-based%20multi-signature%20to%20cosign%20the%20new%20block.%20(details%20are%20%5Bhere%5D(https%3A%2F%2Ftalk.harmony.one%2Ft%2Fbls-based-practical-bft-consensus%2F131)).%0A-%20%5Bhmy%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fhmy)%3A%20implements%20the%20Harmony%20full%20node%20service.%0A%0A%23%23%23%20Sharding%0A%0A-%20%5Bshard%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fshard)%3A%20Trackes%20the%20shard%20state%20and%20committee%20assignment.%0A%0A%23%23%23%20Staking%0A%0A-%20%5Bstaking%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking)%3A%20Implements%20staking%20for%20%5BHarmony's%20Effective%20Proof%20of%20Stake%5D(https%3A%2F%2Fblog.harmony.one%2Fintroducing-harmonys-effective-proof-of-stake-epos%2F)%0A%20%20-%20%5Bapr%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking%2Fapr)%3A%20Calculates%20the%20expected%20rewards%20per%20year%20and%20the%20rewards%20for%20Validators.%0A%20%20-%20%5Bavailablity%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking%2Favailability)%3A%20Measures%20the%20availability%20of%20validators.%0A%20%20-%20%5Beffective%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking%2Feffective)%3A%20Calcualates%20a%20validators%20effective%20proof%20of%20stake.%0A%20%20-%20%5Bnewtwork%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking%2Fnetwork)%3A%20Calculates%20the%20network%20rewards.%0A%20%20-%20%5Breward%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking%2Freward)%3A%20Checks%20whether%20rewards%20are%20issued%20and%20if%20so%20calculates%20the%20rewards%20based%20on%20total%20tokens%20staked.%0A%20%20-%20%5Bslash%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking%2Fslash)%3A%20Slashes%20validators%20for%20malevolent%20acts%20such%20as%20double%20signing.%0A%20%20-%20%5Btypes%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking%2Ftypes)%3A%20Type%20definitions%20for%20staking%20structures.%0A%20%20-%20%5Bverify%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking%2Fverify)%3A%20verifies%20aggregate%20signatures%0A%0A%23%23%23%20Rosetta%0A%0A-%20%5Brosetta%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Frosetta)%3A%20responsible%20for%20staring%20a%20%5Brosetta%5D(https%3A%2F%2Fwww.rosetta-api.org%2Fdocs%2Fwelcome.html)%20http%20server.%0A%0A%23%23%23%20Cryptographic%20Primitives%0A%0A**hash%20functions**%0A%0A-%20%5Bhash%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fcrypto%2Fhash)%3A%20Uses%20kecakk256%20and%20sha256%20and%20provides%20the%20abilty%20to%20hash%20the%20RLP%20representation%20of%20the%20given%20object.%0A%0A**random%20number%20generators**%0A%0A-%20%5BVDF%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fcrypto%2Fvdf)%3A%20Verifiable%20Random%20Delay%20Function.%20Package%20vdf%20is%20a%20proof-of-concept%20implementation%20of%20a%20delay%20function%20and%20the%20security%20properties%20are%20not%20guaranteed.%20A%20more%20secure%20implementation%20of%20the%20%5BVDF%20by%20Wesolowski%5D(https%3A%2F%2Feprint.iacr.org%2F2018%2F623.pdf)%20is%20to%20be%20implemented.%0A-%20%5BVRF%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fcrypto%2Fvrf)%3A%20a%20pseudorandom%20function%20f_k%20from%20a%20secret%20key%20k%2C%20such%20that%20that%20knowledge%20of%20k%20not%20only%20enables%20one%20to%20evaluate%20f_k%20at%20for%20any%20message%20m%2C%20but%20also%20to%20provide%20an%20NP-proof%20that%20the%20value%20f_k(m)%20is%20indeed%20correct%20without%20compromising%20the%20unpredictability%20of%20f_k%20for%20any%20m'%20!%3D%20m.%20See%20%5BVerifiable%20Random%20Functions%5D(https%3A%2F%2Fdash.harvard.edu%2Fbitstream%2Fhandle%2F1%2F5028196%2FVadhan_VerifRandomFunction.pdf%3Fsequence%3D2%26isAllowed%3Dy).%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BHarmony%20FBFT%20Consensus%20Documentation%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fgeneral%2Ftechnology%2Fconsensus)%3A%20Harmony%E2%80%99s%20consensus%20algorithm%20is%20called%20Fast%20Byzantine%20Fault%20Tolerance%20(FBFT)%2C%20which%20is%20an%20innovative%20upgrade%20on%20the%20famous%20PBFT%20algorithm.%20As%20an%20implementation%20detail%2C%20note%20that%20custom%20%5Bgenerator%20points%20are%20used%5D(https%3A%2F%2Fgithub.com%2Fherumi%2Fbls%2Fissues%2F74).%0A-%20%5BHarmony%20Slot%20Bidding%20and%20Election%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fnetwork%2Fvalidators%2Fdefinitions%2Fslots-bidding-and-election)%0A-%20%5BBuilding%20a%20Better%20Blockchain%3A%20The%20Implementation%20of%20External%20Leader%20Rotation%20on%20Harmony%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fnetwork%2Fvalidators%2Fdefinitions%2Fslots-bidding-and-election)%3A%20A%20proposal%20to%20improve%20the%20leader%20rotatation%20by%20introducing%20changes%20to%20incldue%20external%20validators.%0A-%20%5BHarmony%20consensus.go%20Code%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fconsensus%2Fconsensus.go)%3A%20Harmony%20Consensus%20logic%20(go)%0A-%20%5BHarmony%20quorom.go%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fconsensus%2Fquorum%2Fquorum.go)%3A%20Harmony's%20quorom%20logic%20responsible%20for%20trakcing%20participants%2C%20submitting%20and%20aggregating%20votes.%0A-%20%5BMerkle%20Mountain%20Ranges%5D(https%3A%2F%2Fdocs.grin.mw%2Fwiki%2Fchain-state%2Fmerkle-mountain-range%2F)%3A%20Merkle%20Mountain%20Ranges1%20are%20an%20alternative%20to%20Merkle%20trees2.%20While%20the%20latter%20relies%20on%20perfectly%20balanced%20binary%20trees%2C%20the%20former%20can%20be%20seen%20either%20as%20list%20of%20perfectly%20balance%20binary%20trees%20or%20a%20single%20binary%20tree%20that%20would%20have%20been%20truncated%20from%20the%20top%20right.%0A-%20%5BHarmony%20MMR-Hardfork%20Pull%20Request%203872%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F3872)%3A%20a%20MMR%20hard%20fork%20PR%20that%20adds%20mmrRoot%20to%20block%20header%2C%20adds%20logic%20to%20compute%20the%20MMR%20tree%20every%20epoch%2C%20RPCs%20to%20fetch%20the%20MMR%20proof%20for%20any%20given%20transaction.%0A-%20%5BHarmony%20MMR%20Hardfork%20Pull%20Request%204198%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198)%3A%20Follow%20up%20MMR%20pull%20request.%20_MMR%20is%20a%20series%20of%20perfect%20Merkle%20trees%2C%20from%20high%20to%20low.%20Each%20Merkle%20tree%20root%20we%20call%20it%20peak.%20Concat%20all%20peak%20hash%20and%20hash%20it%2C%20will%20get%20MMR%20root%20hash._%0A-%20%5BHarmony%20MMRHardfork%20block%20header%5D(https%3A%2F%2Fgithub.com%2Fpeekpi%2Fharmony%2Fblob%2FmmrHardfork%2Fblock%2Fv4%2Fheader.go)%3A%20Harmony%20proposed%20block%20header%20including%20Merkle%20Mountain%20range%20(go).%0A%0A**Signing**%0A%0A-%20%5BHarmony%20bls.go%20codebase%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fbls%2Fblob%2Fmaster%2Fffi%2Fgo%2Fbls%2Fbls.go)%3A%20Harmony's%20BLS%20library%20forked%20from%20%5Bherumi%2Fbls%5D(https%3A%2F%2Fgithub.com%2Fherumi%2Fbls)%20(go).%0A%0A**Staking**%0A%0A-%20%5BHarmony%20Effective%20Proof%20of%20Stake%20Documentation%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fgeneral%2Ftechnology%2Feffective-proof-of-stake)%3A%20A%20staking%20mechanism%20for%20Harmony's%20sharded%20blockchain%20that%20achieves%20both%20security%20and%20decentralization%20using%20effective%20stake.%0A-%20%5BHarmony%20Staking%20Dashboard%5D(https%3A%2F%2Fstaking.harmony.one%2Fvalidators%2Fmainnet)%3A%20Staking%20Dashboard%20showing%20approximately%20140%20Elected%20Validators%20from%20299%20active%20validators.%0A%0A%23%23%20Footnotes%0A%0A%5B%5E1%5D%3A%20%5BHarmony%20consensus%20documentation%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fgeneral%2Ftechnology%2Fconsensus).%20As%20an%20implementation%20detail%2C%20note%20that%20custom%20%5Bgenerator%20points%20are%20used%5D(https%3A%2F%2Fgithub.com%2Fherumi%2Fbls%2Fissues%2F74)%0A%0A%5B%5E2%5D%3A%20%5BHarmony%20Slot%20Bidding%20and%20Election%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fnetwork%2Fvalidators%2Fdefinitions%2Fslots-bidding-and-election)%0A%0A%5B%5E3%5D%3A%20%5BScaling%20the%20Harmony%20Protocol%20with%20Light%20Clients%5D(https%3A%2F%2Fmedium.com%2Fharmony-one%2Fscaling-the-harmony-protocol-with-light-clients-66d1eab26bf)%3A%20a%20step-by-step%20guide%20on%20how%20to%20develop%20and%20run%20a%20light%20client%20on%20the%20Harmony%20Protocol%20using%20code%20examples.%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./harmony-C0C1ZQm0.js"),[]),path:"/research/chains/harmony.html",type:"mdx",filePath:"research/chains/harmony.mdx",content:"%23%20Harmony%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0ADespite%20relatively%20lower%20usage%20than%20other%20candidates%2C%20Harmony%20has%20a%20mature%2C%20battle-tested%20implementation%20for%20fast%20consensus%20using%20BLS-based%20signature%20schemes%2C%20which%20has%20been%20in%20production%20for%20over%202%20years.%20Additionally%2C%20many%20other%20chains%20are%20also%20moving%20towards%20using%20BLS%20for%20signing%20blocks%20in%20their%20consensus%20protocols.%0A%0AHarmony%20follows%20a%20two-round%20Fast%20Byzantine%20Fault%20Tolerance%20consensus%20derived%20from%20PBFT%2C%20where%20BLS%20signatures%20(on%20the%20BLS12-381%20curve)%20are%20used%20to%20reduce%20communication%20costs%5B%5E1%5D.%20Blocks%20are%20produced%20by%20validator%20leaders%2C%20a%20minimal%20subset%20of%20validators%2C%20then%20further%20broadcasted%20to%20all%20validators%20and%20confirmed%20when%20more%20than%202%2F3%20of%20validators%20sign%20the%20block%20with%20their%20own%20BLS%20signatures.%20The%20leader%20then%20aggregates%20the%20signatures%20into%20a%20single%20one%20and%20broadcasts%20again.%20The%20validators%20may%20verify%20the%20aggregated%20signature%20and%20sign%20the%20block%20again%20before%20sending%20the%20signed%20block%20back%20to%20the%20leader.%20Finally%2C%20the%20leader%20(after%20receiving%20signatures%20from%202%2F3%20of%20the%20validators)%20may%20aggregate%20the%20signature%20for%20one%20last%20time%20and%20finalize%20the%20block.%20In%20the%20block%20header%2C%20the%20leader%20records%20which%20validators'%20signatures%20are%20received%20in%20each%20round.%0A%0AThe%20protocol%20uses%20a%20slot-bidding%20mechanism%20to%20elect%20a%20variable%20number%20of%20validators%20to%20fill%20800-slots%2C%20where%20each%20validator%20may%20occupy%20multiple%20slots%20if%20their%20total%20delegated%20stake%20per%20slot%20is%20greater%20than%20the%20effective%20median%5B%5E2%5D.%0A%0A%23%23%20Consensus%20Mechanism%0A%0A%23%23%23%20Harmony%20Fast%20Byzantine%20Fault%20Tolerance%20(FBFT)%0A%0AThe%20following%20is%20an%20excerpt%20from%20%5BConsensus%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fgeneral%2Ftechnology%2Fconsensus)%0A%0A%3E%20The%20consensus%20algorithm%20is%20a%20key%20component%20of%20any%20blockchain.%20It%20determines%20the%20security%20and%20performance%20of%20a%20blockchain%20and%20is%20often%20referred%20to%20as%20the%20%22engine%22%20of%20a%20blockchain.%20Harmony%E2%80%99s%20consensus%20algorithm%20is%20called%20Fast%20Byzantine%20Fault%20Tolerance%20(FBFT)%2C%20which%20is%20an%20innovative%20upgrade%20on%20the%20famous%20PBFT%20algorithm.%20FBFT%20is%20one%20order%20of%20magnitude%20faster%20and%20more%20scalable%20than%20PBFT%20because%20BLS%20(Boneh%E2%80%93Lynn%E2%80%93Shacham)%20aggregate%20signature%20is%20used%20to%20significantly%20reduce%20the%20communication%20cost.%20Specifically%2C%20FBFT%20allows%20at%20least%20250%20validators%20to%20reach%20consensus%20within%202%20seconds.%0A%3E%0A%3E%20For%20every%20round%20of%20consensus%20in%20FBFT%2C%20one%20validator%20serves%20as%20the%20%E2%80%9Cleader%E2%80%9D%20and%20there%20are%20three%20phases%3A%20the%20announce%20phase%2C%20the%20prepare%20phase%20and%20the%20commit%20phase.%20In%20the%20announce%20phase%2C%20the%20leader%20proposes%20a%20new%20block%20and%20broadcasts%20the%20block%20hash%20to%20all%20of%20the%20validators.%20In%20the%20prepare%20phase%2C%20validators%20verify%20the%20message%20and%20sign%20on%20the%20block%20hash%2C%20as%20well%20as%20sending%20the%20signature%20back%20to%20the%20leader.%20The%20prepare%20phase%20finishes%20when%20signatures%20with%20more%20than%202%2F3%20of%20the%20voting%20power%20are%20collected.%20After%20that%2C%20the%20leader%20aggregated%20the%20collected%20signatures%20into%20a%20O(1)-sized%20BLS%20aggregate%20signature%20and%20then%20broadcast%20it%20with%20the%20whole%20block%20to%20start%20the%20commit%20phase.%20The%20commit%20phase%20involves%20validators%20verifying%20the%20block%20and%20doing%20a%20similar%20signing%20process%20as%20the%20prepare%20phase%20(i.e.%202%2F3%20voting%20power%20collection).%20The%20consensus%20is%20reached%20after%20the%20commit%20phase%20is%20done.%20This%20whole%20process%20can%20be%20done%20within%202%20seconds%20in%20mainnet.%0A%0AThe%20following%20is%20an%20excerpt%20from%20%5BEpoch%20Transition%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fnetwork%2Fvalidators%2Fdefinitions%2Fepoch-transition)%0A%0A%3E%20An%20epoch%20is%20a%20period%20of%20time%20when%20the%20beacon%20shard%20(i.e.%20shard%200%2C%20the%20coordinator%20for%20other%20shards)%20produces%20a%20fixed%20number%20of%20blocks.%20In%20Harmony%20mainnet%2C%20an%20epoch%20is%2032768%20blocks%20(~18.2h%20with%20a%202s%20block%20time)%20in%20the%20beacon%20shard%0A%0A_Note%3A%20If%20the%20leader%20fails%20to%20produce%20a%20block%20within%20a%20certain%20time%20frame%2C%20then%20a%20new%20leader%20is%20elected_%0A%0A!%5BHarmony%20FBFT%5D(%2F%2Fresearch%2Fharmony-consensus.png%20%22Harmony%20FBFT%22)%0A%0ABlock%20Structure%20from%20%5Bharmony%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fblock%2Fv3%2Fheader.go)%0A%0A%60%60%60%0Atype%20headerFields%20struct%20%7B%0A%20ParentHash%20%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22parentHash%22%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Coinbase%20%20%20%20%20%20%20%20%20%20%20%20common.Address%20%60json%3A%22miner%22%20%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Root%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22stateRoot%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20TxHash%20%20%20%20%20%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22transactionsRoot%22%20gencodec%3A%22required%22%60%0A%20ReceiptHash%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22receiptsRoot%22%20%20%20%20%20gencodec%3A%22required%22%60%0A%20OutgoingReceiptHash%20common.Hash%20%20%20%20%60json%3A%22outgoingReceiptsRoot%22%20%20%20%20%20gencodec%3A%22required%22%60%0A%20IncomingReceiptHash%20common.Hash%20%20%20%20%60json%3A%22incomingReceiptsRoot%22%20gencodec%3A%22required%22%60%0A%20Bloom%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ethtypes.Bloom%20%60json%3A%22logsBloom%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Number%20%20%20%20%20%20%20%20%20%20%20%20%20%20*big.Int%20%20%20%20%20%20%20%60json%3A%22number%22%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20GasLimit%20%20%20%20%20%20%20%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%60json%3A%22gasLimit%22%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20GasUsed%20%20%20%20%20%20%20%20%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%60json%3A%22gasUsed%22%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Time%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20*big.Int%20%20%20%20%20%20%20%60json%3A%22timestamp%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Extra%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%20%20%20%60json%3A%22extraData%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20MixDigest%20%20%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22mixHash%22%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20%2F%2F%20Additional%20Fields%0A%20ViewID%20%20%20%20%20%20%20%20%20%20%20%20%20%20*big.Int%20%60json%3A%22viewID%22%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Epoch%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20*big.Int%20%60json%3A%22epoch%22%20%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20ShardID%20%20%20%20%20%20%20%20%20%20%20%20%20uint32%20%20%20%60json%3A%22shardID%22%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20LastCommitSignature%20%5B96%5Dbyte%20%60json%3A%22lastCommitSignature%22%20%20gencodec%3A%22required%22%60%0A%20LastCommitBitmap%20%20%20%20%5B%5Dbyte%20%20%20%60json%3A%22lastCommitBitmap%22%20%20%20%20%20gencodec%3A%22required%22%60%20%2F%2F%20Contains%20which%20validator%20signed%0A%20Vrf%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%60json%3A%22vrf%22%60%0A%20Vdf%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%60json%3A%22vdf%22%60%0A%20ShardState%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%60json%3A%22shardState%22%60%0A%20CrossLinks%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%60json%3A%22crossLink%22%60%0A%20Slashes%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%60json%3A%22slashes%22%60%0A%7D%0A%60%60%60%0A%0A%23%23%20Signing%20Mechanism%0A%0AHarmony%20uses%20BLS12_381%20signatures%20for%20validators%20signing%20blocks.%20They%20began%20work%20on%20enhancing%20the%20%5Bherumi%2Fbls%20package%5D(https%3A%2F%2Fgithub.com%2Fherumi%2Fbls)%20in%20Jan%202019%20to%20%5Bsupport%20BLS12_381%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fbls%2Fcommit%2F302fc1eea9d59cecb1a464280944f5b152d7e781).%20They%20have%20added%20%5Bbls%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fcrypto%2Fbls%2Fbls.go)%20and%20%5Bmutibls%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fmultibls%2Fmultibls.go)%20to%20the%20%5Bharmony%20codbase%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony)%20leveraging%20their%20%5Bharmony-one%20bls%20package%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fbls).%0A%0A%23%23%20Light%20Client%20Support%0A%0AHarmony%20is%20actively%20looking%20at%20light%20client%20support%5B%5E3%5D.%0A%0ASome%20initial%20work%20has%20been%20done%20for%20the%20support%20of%20%5BMerkle%20Mountain%20Ranges%5D(https%3A%2F%2Fgithub.com%2Fopentimestamps%2Fopentimestamps-server%2Fblob%2Fmaster%2Fdoc%2Fmerkle-mountain-range.mdx)%20has%20been%20proposed%20by%20Harmony%20in%20the%20pull%20request%20%5B%5BWIP%5D%20MMR-HardFork%3A%20add%20go-merklemountainrange%20and%20modified%20merkle%20proof%20logic%20%233872%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F3872).%0A%0AThis%20introduces%20a%20new%20field%20into%20the%20block%20header%20populated%20by%20%5Bmmr.go%5D(https%3A%2F%2Fgithub.com%2Fgupadhyaya%2Fharmony%2Fblob%2Fmmr-hard-fork%2Finternal%2Fmmr%2Fmmr.go)%20which%20credits%20%5Bzmitton%2Fgo-merklemountainrange%5D(https%3A%2F%2Fgithub.com%2Fzmitton%2Fgo-merklemountainrange).%0A%0AUpdated%20%5BInterface.go%5D(https%3A%2F%2Fgithub.com%2Fgupadhyaya%2Fharmony%2Fblob%2Fmmr-hard-fork%2Fblock%2Finterface%2Fheader.go)%0A%0A%60%60%60%0A%2F%2F%20MMRRoot%20is%20the%20root%20of%20the%20Merkle%20Mountain%20Range%20tree%20formed%0A%2F%2F%20using%20the%20block%20hashes%20of%20the%20current%20epoch%0AMMRRoot()%20%5B%5Dbyte%0A%0A%2F%2F%20SetMMRRoot%20sets%20the%20updated%20MMR%20root%20after%20appending%20the%20parentHash%0ASetMMRRoot(newMMRRoot%20%5B%5Dbyte)%0A%60%60%60%0A%0AUpdated%20%5Bheader.go%5D(https%3A%2F%2Fgithub.com%2Fgupadhyaya%2Fharmony%2Fblob%2Fmmr-hard-fork%2Fblock%2Fv4%2Fheader.go)%0A%0A%60%60%60%0A%2F%2F%20MMRRoot%20is%20the%20root%20of%20the%20Merkle%20Mountain%20Range%20tree%20formed%0A%2F%2F%20using%20the%20block%20hashes%20of%20the%20current%20epoch%0Afunc%20(h%20*Header)%20MMRRoot()%20%5B%5Dbyte%20%7B%0A%20return%20append(h.fields.MMRRoot%5B%3A0%3A0%5D%2C%20h.fields.MMRRoot...)%0A%7D%0A%0A%2F%2F%20SetMMRRoot%20sets%20the%20updated%20MMR%20root%20after%20appending%20the%20parentHash%0Afunc%20(h%20*Header)%20SetMMRRoot(newMMRRoot%20%5B%5Dbyte)%20%7B%0A%20h.fields.MMRRoot%20%3D%20append(newMMRRoot%5B%3A0%3A0%5D%2C%20newMMRRoot...)%0A%7D%0A%60%60%60%0A%0AHarmony%20%5BMMR%20PR%20Review%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F3872)%20and%20%5Blatest%20PR%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198%2Ffiles)%20uses%20Merkle%20Mountain%20Ranges%20to%20facilitate%20light%20client%20development%20against%20Harmony's%20sharded%20Proof%20of%20Stake%20Chain.%0A%0A**Key%20Core%20Protocol%20Changes%20Include**%0ABlock%20Structure%20from%20%5Bharmony%5D(https%3A%2F%2Fgithub.com%2Fpeekpi%2Fharmony%2Fblob%2FmmrHardfork%2Fblock%2Fv4%2Fheader.go)%20with%20%5BMerkle%20Mountain%20Range%5D(https%3A%2F%2Fdocs.grin.mw%2Fwiki%2Fchain-state%2Fmerkle-mountain-range%2F)%20support%20%5BMmr%20hardfork%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F3872)%20%5BPR%204198%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198)%20introduces%20%60MMRoot%60%0A%0AGOAL%3A%20Allow%20verification%20that%20previous%20blocks%20were%20valid%20based%20on%20the%20MMRRoot%20Passed.%0A%0AFeatures%0A%0A-%20add%20receipt%20proof%0A-%20adding%20MMRRoot%20field%20to%20block%20header%20%26%20cross-chain%20epoch%0A-%20add%20memdb%20and%20filedb%20mmr%20processing%20logic%0A-%20add%20GetProof%20rpc%0A-%20relayer%20rpcs%20for%20fetching%20full%20header%0A-%20adding%20block%20signers%20for%20rpc%20response%2C%20debug-only%0A-%20minor%20testing%20bls%0A-%20fix%20merge%20conflicts%0A-%20github.com%2Fzmitton%2Fgo-merklemountainrange%20dependency%0A-%20minor%20fix%0A-%20moving%20mmr%20root%20compute%2Fupdate%20logic%20to%20after%20the%20shard%20state%20is%20computed%0A-%20fix%20getting%20siblings%20bug%0A-%20adding%20index%20to%20mmr-proof%20and%20GetProof%20with%20respect%20to%20a%20block%20number%0A-%20check%20if%20mmr%20directory%20exists%2C%20if%20not%20create%20it%20first%0A-%20fixing%20failing%20test%0A-%20fixing%20config%20build%20test%20failure%0A-%20fixing%20more%20test%20failures%0A-%20cleanup%0A-%20turn%20of%20signers%0A-%20fix%20header%20copy%20issue%20and%20write%20mmr%20root%20directly%20to%20node.worker%20header%0A-%20fix%20nil%20pointer%20problems%2C%20shard%20state%20fetch%20issue%2C%20and%20refIndex%20bug%0A-%20clean%20up%0A%0A%60%60%60%0Atype%20headerFields%20struct%20%7B%0A%20ParentHash%20%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22parentHash%22%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Coinbase%20%20%20%20%20%20%20%20%20%20%20%20common.Address%20%60json%3A%22miner%22%20%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Root%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22stateRoot%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20TxHash%20%20%20%20%20%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22transactionsRoot%22%20gencodec%3A%22required%22%60%0A%20ReceiptHash%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22receiptsRoot%22%20%20%20%20%20gencodec%3A%22required%22%60%0A%20OutgoingReceiptHash%20common.Hash%20%20%20%20%60json%3A%22outgoingReceiptsRoot%22%20%20%20%20%20gencodec%3A%22required%22%60%0A%20IncomingReceiptHash%20common.Hash%20%20%20%20%60json%3A%22incomingReceiptsRoot%22%20gencodec%3A%22required%22%60%0A%20Bloom%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20ethtypes.Bloom%20%60json%3A%22logsBloom%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Number%20%20%20%20%20%20%20%20%20%20%20%20%20%20*big.Int%20%20%20%20%20%20%20%60json%3A%22number%22%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20GasLimit%20%20%20%20%20%20%20%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%60json%3A%22gasLimit%22%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20GasUsed%20%20%20%20%20%20%20%20%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%60json%3A%22gasUsed%22%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Time%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20*big.Int%20%20%20%20%20%20%20%60json%3A%22timestamp%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Extra%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%20%20%20%60json%3A%22extraData%22%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20MixDigest%20%20%20%20%20%20%20%20%20%20%20common.Hash%20%20%20%20%60json%3A%22mixHash%22%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20%2F%2F%20Additional%20Fields%0A%20ViewID%20%20%20%20%20%20%20%20%20%20%20%20%20%20*big.Int%20%20%20%20%60json%3A%22viewID%22%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20Epoch%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20*big.Int%20%20%20%20%60json%3A%22epoch%22%20%20%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20ShardID%20%20%20%20%20%20%20%20%20%20%20%20%20uint32%20%20%20%20%20%20%60json%3A%22shardID%22%20%20%20%20%20%20%20%20%20%20gencodec%3A%22required%22%60%0A%20LastCommitSignature%20%5B96%5Dbyte%20%20%20%20%60json%3A%22lastCommitSignature%22%20%20gencodec%3A%22required%22%60%0A%20LastCommitBitmap%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%60json%3A%22lastCommitBitmap%22%20%20%20%20%20gencodec%3A%22required%22%60%20%2F%2F%20Contains%20which%20validator%20signed%0A%20Vrf%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%60json%3A%22vrf%22%60%0A%20Vdf%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%60json%3A%22vdf%22%60%0A%20ShardState%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%60json%3A%22shardState%22%60%0A%20CrossLinks%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%60json%3A%22crossLink%22%60%0A%20Slashes%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%5Dbyte%20%20%20%20%20%20%60json%3A%22slashes%22%60%0A%20MMRRoot%20%20%20%20%20%20%20%20%20%20%20%20%20common.Hash%20%60json%3A%22mmrRoot%22%60%0A%7D%0A%60%60%60%0A%0A**Sample%20Light%20Client%20Implementation%3A%20Horizon%20Bridge%20Harmony%20Light%20Client%20Deployed%20on%20Ethereum**%0A%0AThis%20enables%20the%20validation%20of%20previous%20blocks%20by%20implemented%20by%20%5BTokenLockerOnEthereum.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2FTokenLockerOnEthereum.sol)%20to%20use%20%5BMMRVerifier.sol%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Fblob%2FrefactorV2%2Fcontracts%2Flib%2FMMRVerifier.sol)%20uses%20%60.%2Flib%2FMMRVerifier.sol%60%20to%20validate%20the%20%5BMountain%20Merkle%20Ranges%5D(https%3A%2F%2Fgithub.com%2Fopentimestamps%2Fopentimestamps-server%2Fblob%2Fmaster%2Fdoc%2Fmerkle-mountain-range.mdx)%0A%0A%23%23%20Code%20Review%0A%0AThe%20%5BHarmony%20codebase%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony)%20was%20originally%20cloned%20from%20%5BEthereum%201.0%5D(.%2Fethereum-1-0.mdx)%20around%202019.Thus%20the%20majority%20of%20code%20incuding%20primitives%2C%20signing%20are%20similar%20as%20at%20that%20period.%20Since%20then%20Ethreum%20has%20worked%20siginficantly%20on%20Ethreum%202.0%20and%20these%20modifications%20were%20selectively%20leveraged%20by%20Harmony.%0A%0A%5BHarmony%20has%20significant%20differences%5D(https%3A%2F%2Fmedium.com%2Fharmony-one%2F2022-harmony-technical-review-88462efba368)%20from%20Ethereum%201.0%20including%20sharding%2C%20Effective%20Proof%20of%20Stake%20Consensus%20Mechanism%2C%20%5BRosetta%20support%5D(https%3A%2F%2Fwww.rosetta-api.org%2Fdocs%2Fwelcome.html)%20and%20verifiable%20delay%20functions%20and%20verifiaable%20random%20functions.%0A%0A%23%23%23%20Signing%0A%0A-%20%5Bbls%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fcrypto%2Fbls%2Fbls.go)%3A%20An%20implementation%20of%20BLS%20threshold%20signature%0A-%20%5Bmultibls%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fmultibls%2Fmultibls.go)%3A%20Wrapper%20for%20a%20collection%20of%20bls%20private%20and%20public%20keys%20with%20dedup%20functionality%20and%20the%20ability%20to%20serialize%20to%20a%20hex%20string.%0A%0A%23%23%23%20Consensus%0A%0A-%20%5Bconsensus%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fconsensus)%3A%20Consensus%20package%20includes%20the%20Harmony%20BFT%20consensus%20protocol%20code%2C%20which%20uses%20BLS-based%20multi-signature%20to%20cosign%20the%20new%20block.%20(details%20are%20%5Bhere%5D(https%3A%2F%2Ftalk.harmony.one%2Ft%2Fbls-based-practical-bft-consensus%2F131)).%0A-%20%5Bhmy%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fhmy)%3A%20implements%20the%20Harmony%20full%20node%20service.%0A%0A%23%23%23%20Sharding%0A%0A-%20%5Bshard%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fshard)%3A%20Trackes%20the%20shard%20state%20and%20committee%20assignment.%0A%0A%23%23%23%20Staking%0A%0A-%20%5Bstaking%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking)%3A%20Implements%20staking%20for%20%5BHarmony's%20Effective%20Proof%20of%20Stake%5D(https%3A%2F%2Fblog.harmony.one%2Fintroducing-harmonys-effective-proof-of-stake-epos%2F)%0A%20%20-%20%5Bapr%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking%2Fapr)%3A%20Calculates%20the%20expected%20rewards%20per%20year%20and%20the%20rewards%20for%20Validators.%0A%20%20-%20%5Bavailablity%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking%2Favailability)%3A%20Measures%20the%20availability%20of%20validators.%0A%20%20-%20%5Beffective%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking%2Feffective)%3A%20Calcualates%20a%20validators%20effective%20proof%20of%20stake.%0A%20%20-%20%5Bnewtwork%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking%2Fnetwork)%3A%20Calculates%20the%20network%20rewards.%0A%20%20-%20%5Breward%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking%2Freward)%3A%20Checks%20whether%20rewards%20are%20issued%20and%20if%20so%20calculates%20the%20rewards%20based%20on%20total%20tokens%20staked.%0A%20%20-%20%5Bslash%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking%2Fslash)%3A%20Slashes%20validators%20for%20malevolent%20acts%20such%20as%20double%20signing.%0A%20%20-%20%5Btypes%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking%2Ftypes)%3A%20Type%20definitions%20for%20staking%20structures.%0A%20%20-%20%5Bverify%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fstaking%2Fverify)%3A%20verifies%20aggregate%20signatures%0A%0A%23%23%23%20Rosetta%0A%0A-%20%5Brosetta%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Frosetta)%3A%20responsible%20for%20staring%20a%20%5Brosetta%5D(https%3A%2F%2Fwww.rosetta-api.org%2Fdocs%2Fwelcome.html)%20http%20server.%0A%0A%23%23%23%20Cryptographic%20Primitives%0A%0A**hash%20functions**%0A%0A-%20%5Bhash%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fcrypto%2Fhash)%3A%20Uses%20kecakk256%20and%20sha256%20and%20provides%20the%20abilty%20to%20hash%20the%20RLP%20representation%20of%20the%20given%20object.%0A%0A**random%20number%20generators**%0A%0A-%20%5BVDF%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fcrypto%2Fvdf)%3A%20Verifiable%20Random%20Delay%20Function.%20Package%20vdf%20is%20a%20proof-of-concept%20implementation%20of%20a%20delay%20function%20and%20the%20security%20properties%20are%20not%20guaranteed.%20A%20more%20secure%20implementation%20of%20the%20%5BVDF%20by%20Wesolowski%5D(https%3A%2F%2Feprint.iacr.org%2F2018%2F623.pdf)%20is%20to%20be%20implemented.%0A-%20%5BVRF%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fcrypto%2Fvrf)%3A%20a%20pseudorandom%20function%20f_k%20from%20a%20secret%20key%20k%2C%20such%20that%20that%20knowledge%20of%20k%20not%20only%20enables%20one%20to%20evaluate%20f_k%20at%20for%20any%20message%20m%2C%20but%20also%20to%20provide%20an%20NP-proof%20that%20the%20value%20f_k(m)%20is%20indeed%20correct%20without%20compromising%20the%20unpredictability%20of%20f_k%20for%20any%20m'%20!%3D%20m.%20See%20%5BVerifiable%20Random%20Functions%5D(https%3A%2F%2Fdash.harvard.edu%2Fbitstream%2Fhandle%2F1%2F5028196%2FVadhan_VerifRandomFunction.pdf%3Fsequence%3D2%26isAllowed%3Dy).%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BHarmony%20FBFT%20Consensus%20Documentation%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fgeneral%2Ftechnology%2Fconsensus)%3A%20Harmony%E2%80%99s%20consensus%20algorithm%20is%20called%20Fast%20Byzantine%20Fault%20Tolerance%20(FBFT)%2C%20which%20is%20an%20innovative%20upgrade%20on%20the%20famous%20PBFT%20algorithm.%20As%20an%20implementation%20detail%2C%20note%20that%20custom%20%5Bgenerator%20points%20are%20used%5D(https%3A%2F%2Fgithub.com%2Fherumi%2Fbls%2Fissues%2F74).%0A-%20%5BHarmony%20Slot%20Bidding%20and%20Election%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fnetwork%2Fvalidators%2Fdefinitions%2Fslots-bidding-and-election)%0A-%20%5BBuilding%20a%20Better%20Blockchain%3A%20The%20Implementation%20of%20External%20Leader%20Rotation%20on%20Harmony%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fnetwork%2Fvalidators%2Fdefinitions%2Fslots-bidding-and-election)%3A%20A%20proposal%20to%20improve%20the%20leader%20rotatation%20by%20introducing%20changes%20to%20incldue%20external%20validators.%0A-%20%5BHarmony%20consensus.go%20Code%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fconsensus%2Fconsensus.go)%3A%20Harmony%20Consensus%20logic%20(go)%0A-%20%5BHarmony%20quorom.go%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fconsensus%2Fquorum%2Fquorum.go)%3A%20Harmony's%20quorom%20logic%20responsible%20for%20trakcing%20participants%2C%20submitting%20and%20aggregating%20votes.%0A-%20%5BMerkle%20Mountain%20Ranges%5D(https%3A%2F%2Fdocs.grin.mw%2Fwiki%2Fchain-state%2Fmerkle-mountain-range%2F)%3A%20Merkle%20Mountain%20Ranges1%20are%20an%20alternative%20to%20Merkle%20trees2.%20While%20the%20latter%20relies%20on%20perfectly%20balanced%20binary%20trees%2C%20the%20former%20can%20be%20seen%20either%20as%20list%20of%20perfectly%20balance%20binary%20trees%20or%20a%20single%20binary%20tree%20that%20would%20have%20been%20truncated%20from%20the%20top%20right.%0A-%20%5BHarmony%20MMR-Hardfork%20Pull%20Request%203872%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F3872)%3A%20a%20MMR%20hard%20fork%20PR%20that%20adds%20mmrRoot%20to%20block%20header%2C%20adds%20logic%20to%20compute%20the%20MMR%20tree%20every%20epoch%2C%20RPCs%20to%20fetch%20the%20MMR%20proof%20for%20any%20given%20transaction.%0A-%20%5BHarmony%20MMR%20Hardfork%20Pull%20Request%204198%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198)%3A%20Follow%20up%20MMR%20pull%20request.%20_MMR%20is%20a%20series%20of%20perfect%20Merkle%20trees%2C%20from%20high%20to%20low.%20Each%20Merkle%20tree%20root%20we%20call%20it%20peak.%20Concat%20all%20peak%20hash%20and%20hash%20it%2C%20will%20get%20MMR%20root%20hash._%0A-%20%5BHarmony%20MMRHardfork%20block%20header%5D(https%3A%2F%2Fgithub.com%2Fpeekpi%2Fharmony%2Fblob%2FmmrHardfork%2Fblock%2Fv4%2Fheader.go)%3A%20Harmony%20proposed%20block%20header%20including%20Merkle%20Mountain%20range%20(go).%0A%0A**Signing**%0A%0A-%20%5BHarmony%20bls.go%20codebase%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fbls%2Fblob%2Fmaster%2Fffi%2Fgo%2Fbls%2Fbls.go)%3A%20Harmony's%20BLS%20library%20forked%20from%20%5Bherumi%2Fbls%5D(https%3A%2F%2Fgithub.com%2Fherumi%2Fbls)%20(go).%0A%0A**Staking**%0A%0A-%20%5BHarmony%20Effective%20Proof%20of%20Stake%20Documentation%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fgeneral%2Ftechnology%2Feffective-proof-of-stake)%3A%20A%20staking%20mechanism%20for%20Harmony's%20sharded%20blockchain%20that%20achieves%20both%20security%20and%20decentralization%20using%20effective%20stake.%0A-%20%5BHarmony%20Staking%20Dashboard%5D(https%3A%2F%2Fstaking.harmony.one%2Fvalidators%2Fmainnet)%3A%20Staking%20Dashboard%20showing%20approximately%20140%20Elected%20Validators%20from%20299%20active%20validators.%0A%0A%23%23%20Footnotes%0A%0A%5B%5E1%5D%3A%20%5BHarmony%20consensus%20documentation%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fgeneral%2Ftechnology%2Fconsensus).%20As%20an%20implementation%20detail%2C%20note%20that%20custom%20%5Bgenerator%20points%20are%20used%5D(https%3A%2F%2Fgithub.com%2Fherumi%2Fbls%2Fissues%2F74)%0A%0A%5B%5E2%5D%3A%20%5BHarmony%20Slot%20Bidding%20and%20Election%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fnetwork%2Fvalidators%2Fdefinitions%2Fslots-bidding-and-election)%0A%0A%5B%5E3%5D%3A%20%5BScaling%20the%20Harmony%20Protocol%20with%20Light%20Clients%5D(https%3A%2F%2Fmedium.com%2Fharmony-one%2Fscaling-the-harmony-protocol-with-light-clients-66d1eab26bf)%3A%20a%20step-by-step%20guide%20on%20how%20to%20develop%20and%20run%20a%20light%20client%20on%20the%20Harmony%20Protocol%20using%20code%20examples.%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./intro-BvUCBflO.js"),[]),path:"/research/chains/intro",type:"mdx",filePath:"research/chains/intro.mdx",content:"%23%20Chain%20Research%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AHere%20we%20do%20a%20deep%20dive%20on%20individual%20chains%20with%20a%20focus%20on%20the%20following%20areas%0A%0A-%20Consensus%20Mechanism%0A-%20Signing%20Algorithms%20Supported%0A-%20Light%20Client%20Support%0A-%20Gas%20Costs%0A-%20Settlement%20Time%0A-%20Codebases%0A%0A%23%23%20Chain%20Economics%0A%0AFollowing%20is%20an%20overview%20of%20the%20economics%20of%20sample%20chains.%20These%20chains%20are%20early%20candidates%20for%20the%20design%20and%20implementation%20of%20trustless%20bridging%20that%20we%20have%20been%20doing.%0A%0A%7C%20Chain%20%20%20%20%20%7C%20Token%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Token%20Price%20%7C%20Market%20Capitalization%20%7C%20Total%20Value%20Locked%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20---------%20%7C%20-----------------------------------------------------%20%7C%20-----------%20%7C%20---------------------%20%7C%20---------------------------------------------------------%20%7C%0A%7C%20Avalanche%20%7C%20%5BAVAX%5D(https%3A%2F%2Fwww.coingecko.com%2Fen%2Fcoins%2Favalanche)%20%20%7C%20%2417.83%20%20%20%20%20%20%7C%20%245%2C619%2C898%2C947%20%20%20%20%20%20%20%20%7C%20%5B%24912%2C440%2C000%5D(https%3A%2F%2Fdefillama.com%2Fchain%2FAvalanche)%20%20%20%20%20%7C%0A%7C%20BSC%20%20%20%20%20%20%20%7C%20%5BBNB%5D(https%3A%2F%2Fwww.coingecko.com%2Fen%2Fcoins%2Fbnb)%20%20%20%20%20%20%20%20%20%7C%20%24308.08%20%20%20%20%20%7C%20%2448%2C646%2C681%2C885%20%20%20%20%20%20%20%7C%20%5B%244%2C840%2C000%2C000%5D(https%3A%2F%2Fdefillama.com%2Fchain%2FBSC)%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Cosmos%20%20%20%20%7C%20%5BATOM%5D(https%3A%2F%2Fwww.coingecko.com%2Fen%2Fcoins%2Fcosmos-hub)%20%7C%20%2413.53%20%20%20%20%20%20%7C%20%243%2C959%2C718%2C206%20%20%20%20%20%20%20%20%7C%20%5B%241%2C218%2C000%2C000%5D(https%3A%2F%2Fdefillama.com%2Fchains%2FCosmos)%20%2B%2B%2B%20%7C%0A%7C%20Ethereum%20%20%7C%20%5BETH%5D(https%3A%2F%2Fwww.coingecko.com%2Fen%2Fcoins%2Fethereum)%20%20%20%20%7C%20%241%2C519.29%20%20%20%7C%20%24183%2C069%2C985%2C916%20%20%20%20%20%20%7C%20%5B%2427%2C850%2C000%2C000%5D(https%3A%2F%2Fdefillama.com%2Fchain%2FEthereum)%20%20%20%7C%0A%7C%20Harmony%20%20%20%7C%20%5BONE%5D(https%3A%2F%2Fwww.coingecko.com%2Fen%2Fcoins%2Fharmony)%20%20%20%20%20%7C%20%240.0244%20%20%20%20%20%7C%20%24299%2C878%2C381%20%20%20%20%20%20%20%20%20%20%7C%20%5B%246%2C958%2C436%5D(https%3A%2F%2Fdefillama.com%2Fchain%2FHarmony)%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Polygon%20%20%20%7C%20%5BMATIC%5D(https%3A%2F%2Fwww.coingecko.com%2Fen%2Fcoins%2Fpolygon)%20%20%20%7C%20%241.24%20%20%20%20%20%20%20%7C%20%2411%2C171%2C619%2C834%20%20%20%20%20%20%20%7C%20%5B%241%2C170%2C000%2C000%5D(https%3A%2F%2Fdefillama.com%2Fchain%2FPolygon)%20%20%20%20%20%7C%0A%7C%20Pokadot%20%20%20%7C%20%5BDOT%5D(https%3A%2F%2Fwww.coingecko.com%2Fen%2Fcoins%2Fpolkadot)%20%20%20%20%7C%20%246.22%20%20%20%20%20%20%20%7C%20%247%2C475%2C485%2C172%20%20%20%20%20%20%20%20%7C%20%5B%24278%2C000%2C000%5D(https%3A%2F%2Fdefillama.com%2Fchains%2FParachain)%20%2B%2B%20%7C%0A%0A_The%20above%20data%20is%20from%20Feburary%2011th%2C%202023.%20Links%20are%20provided%20to%20get%20current%20information._%0A%0A_%2B%2B%20Polkadot%20TVL%20includes%20all%20parachains_%0A%0A_%2B%2B%2B%20Cosmos%20TVL%20include%20all%20cosmos%20based%20networks_%0A%0A%23%23%20Chain%20Technology%0A%0AFollowing%20is%20an%20overview%20of%20the%20consensus%2C%20signing%20and%20staking%20mechanisms%20for%20sample%20chains.%20These%20chains%20are%20early%20candidates%20for%20the%20design%20and%20implementation%20of%20trustless%20bridging%20that%20we%20have%20been%20doing.%0A%0A%7C%20Chain%20%20%20%20%20%20%7C%20Consensusigning%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Staking%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Validators%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Subnetsvalanche%20%20%7C%20%5BSnowball%5D(https%3A%2F%2Fdocs.avax.network%2Foverview%2Fgetting-started%2Favalanche-consensus)%2C%20%5BWhite%20Paper%5D(https%3A%2F%2Fassets.website-files.com%2F5d80307810123f5ffbb34d6e%2F6009805681b416f34dcae012_Avalanche%2520Consensus%2520Whitepaper.pdf)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Brsa%5D(%3Chttps%3A%2F%2Fen.wikipedia.org%2Fwiki%2FRSA_(cryptosystem)%3E)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BAvalanche%20Staking%5D(https%3A%2F%2Fdocs.avax.network%2Fnodes%2Fvalidate%2Fstaking%23staking-parameters-on-avalanche)%20%7C%20%5B1215%5D(https%3A%2F%2Fsubnets.avax.network%2Fvalidators)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B45%5D(https%3A%2F%2Fsubnets.avax.network%2Fsubnets)%20%5Bsubnets%5D(https%3A%2F%2Fdocs.avax.network%2Fsubnets)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20BSC%20%20%20%20%20%20%20%20%7C%20%5BParlia%5D(https%3A%2F%2Fdocs.bnbchain.org%2Fdocs%2Flearn%2Fconsensus%2F%23consensus-protocolsecp256k1%5D(https%3A%2F%2Fdocs.bnbchain.org%2Fdocs%2Fbeaconchain%2Flearn%2Faccounts%2F%23signature)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BPoSA%5D(https%3A%2F%2Fdocs.bnbchain.org%2Fdocs%2Fstake%2FStaking%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B50%5D(https%3A%2F%2Fwww.bnbchain.org%2Fen%2Fstaking)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Cosmos%20Hub%20%7C%20%5BTendermint%5D(https%3A%2F%2Fdocs.tendermint.com%2Fv0.34%2Fintroduction%2Fwhat-is-tendermint.htmled25519%5D(https%3A%2F%2Fed25519.cr.yp.to%2F)%20%5BValidator%20Keys%5D(https%3A%2F%2Fdocs.tendermint.com%2Fv0.34%2Ftendermint-core%2Fvalidators.html%23validator-keys)%20%20%20%20%20%20%7C%20%5BCosmos%20Staking%5D(https%3A%2F%2Fdocs.cosmos.network%2Fv0.46%2Fmodules%2Fstaking%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B504%5D(https%3A%2F%2Fwww.mintscan.io%2Fcosmos%2Fvalidators)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B21%5D(https%3A%2F%2Fdefillama.com%2Fchains%2FCosmos)%20%5BChains%5D(https%3A%2F%2Fdocs.cosmos.network%2Fmain%2Fintro%2Fwhy-app-specific)%20%20%20%7C%0A%7C%20Ethereum%20%20%20%7C%20%5BGasper%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F2003.03052.pdfoS%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fconsensus-mechanisms%2Fpos%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B16%2C477%2C159%5D(https%3A%2F%2Fethereum.org%2Fen%2Fstaking%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Harmony%20%20%20%20%7C%20%5BFBFT%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fgeneral%2Ftechnology%2Fconsensushttps%3A%2F%2Fmedium.com%2F%40caseyga%2Fexploring-bls-keys-on-the-harmony-protocol-understanding-generation-management-and-use-cases-b8722f7219fc)%20%7C%20%5BEPoS%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fgeneral%2Ftechnology%2Feffective-proof-of-stake)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B299%5D(https%3A%2F%2Fstaking.harmony.one%2Fvalidators%2Fmainnet)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B4%5D(https%3A%2F%2Fexplorer.harmony.one%2F)%20%5Bshards%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fgeneral%2Ftechnology%2Fsharding)%20%20%20%20%20%20%20%20%7C%0A%7C%20Polygon%20%20%20%20%7C%20%5BPeppermint%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fpeppermint%2F)%2C%20%5BHeimdall%20and%20Bor%5D(https%3A%2F%2Fpolygon.technology%2Fblog%2Fheimdall-and-bor)%2C%20%5C_%5BHeimdall%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fheimdall%2Foverview%2F)%2C%20%5BBOR%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fbor%2Fconsensus%2F)%20%7C%20secp256k1%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BHeimdall%20Staking%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fheimdall%2Fmodules%2Fstaking%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B100%5D(https%3A%2F%2Fstaking.polygon.technology%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Polkadot%20%20%20%7C%20%5BNPoS%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-consensusr25519%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-cryptography%23what-is-sr25519-and-where-did-it-come-from)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BNominated%20Pools%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-staking)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B1200%5D(https%3A%2F%2Fstaking.polkadot.network%2F%3Futm_source%3Dpolkadot.network%23%2Fvalidators)%20%7C%20%5B36%5D(https%3A%2F%2Fpolkadot.subscan.io%2Fparachain)%20%5Bparachains%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-parachains)%20%7C%0A%0A_The%20above%20data%20is%20from%20Feburary%2011th%2C%202023.%20Links%20are%20provided%20to%20get%20current%20information._%0A%0A%23%23%20Consensus%20Implementations%0A%0A%23%23%23%20Consensus%0A%0A-%20%5Bavalanche%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fsnow%2FREADME.mdx)%20(go)%0A%20%20-%20%5Bavalanche%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fsnow%2Fconsensus%2Favalanche)%3A%20a%20general%20avalanche%20instance%20that%20can%20be%20used%20directly%20to%20process%20a%20series%20of%20partially%20ordered%20elements.%0A%20%20-%20%5Bsnowball%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fsnow%2Fconsensus%2Fsnowball)%3A%20a%20general%20snow%20instance%20that%20can%20be%20used%20directly%20to%20process%20the%20results%20of%20network%20queries.%0A%20%20-%20%5Bsnowman%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fsnow%2Fconsensus%2Fsnowman)%3A%20a%20general%20snowman%20instance%20that%20can%20be%20used%20directly%20to%20process%20a%20series%20of%20dependent%20operations.%0A%20%20-%20%5Bsnowstorm%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fsnow%2Fconsensus%2Fsnowstorm)%3A%20a%20snowball%20instance%20deciding%20between%20an%20unbounded%20number%20of%20non-transitive%20conflicts.%20After%20performing%20a%20network%20sample%20of%20k%20nodes%2C%20you%20should%20call%20collect%20with%20the%20responses.%0A%20%20-%20%5BSnowman%2B%2B%3A%20congestion%20control%20for%20Snowman%20VMs%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fproposervm%2FREADME.mdx)%3A%20Snowman%2B%2B%20introduces%20a%20soft%20proposer%20mechanism%20which%20attempts%20to%20select%20a%20single%20proposer%20with%20the%20power%20to%20issue%20a%20block%2C%20but%20opens%20up%20block%20production%20to%20every%20validator%20if%20sufficient%20time%20has%20passed%20without%20blocks%20being%20generated.%0A%20%20-%20%5BAvalanche%20Warp%20Messaging%20(AWM)%5D(https%3A%2F%2Fmedium.com%2Favalancheavax%2Favalanche-warp-messaging-awm-launches-with-the-first-native-subnet-to-subnet-message-on-avalanche-c0ceec32144a)%3A%20AWM%20enables%20Subnet%20Validators%20to%20collectively%20produce%20a%20BLS%20Multi-Signature%20that%20attests%20to%20the%20validity%20of%20an%20arbitrary%20message%20(e.g.%2C%20transfer%2C%20contract%20data%2C%20etc.)%20that%20can%20be%20verified%20by%20any%20other%20Subnet.%0A-%20%5Bbsc%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fconsensus)%20(go)%0A%20%20-%20%5Bbeacon%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fconsensus%2Fbeacon%2Fconsensus.go)%3A%20Beacon%20is%20a%20consensus%20engine%20that%20combines%20the%20eth1%20consensus%20and%20proof-of-stake%20algorithm.%20There%20is%20a%20special%20flag%20inside%20to%20decide%20whether%20to%20use%20legacy%20consensus%20rules%20or%20new%20rules.%20The%20transition%20rule%20is%20described%20in%20the%20eth1%2F2%20merge%20spec%20%5Beip-3675%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-3675).%20The%20beacon%20here%20is%20a%20half-functional%20consensus%20engine%20with%20partial%20functions%20which%20is%20only%20used%20for%20necessary%20consensus%20checks.%20The%20legacy%20consensus%20engine%20can%20be%20any%20engine%20implements%20the%20consensus%20interface%20(except%20the%20beacon%20itself).%0A%20%20-%20%5Bclique%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fconsensus%2Fclique%2Fclique.go)%3A%20Clique%20is%20the%20proof-of-authority%20consensus%20engine%20proposed%20to%20support%20the%20Ethereum%20testnet%20following%20the%20Ropsten%20attacks.%0A%20%20-%20%5Bethash%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fconsensus%2Fethash%2Fconsensus.go)%3A%20Ethash%20proof-of-work%20protocol%20(obsolete).%0A%20%20-%20%5Bmisc%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fconsensus%2Fmisc)%3A%20includes%20code%20for%20%5Beip-1559%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-1559)%2C%20DAO%20hard-fork%20extension%20to%20the%20header%20validity%2C%20VerifyForkHashes%20verifies%20that%20blocks%20conforming%20to%20network%20hard-forks%20do%20have%20the%20correct%20hashes%20and%20erifyGaslimit%20verifies%20the%20header%20gas%20limit%20according%20increase%2Fdecrease%20in%20relation%20to%20the%20parent%20gas%20limit.%0A%20%20-%20%5Bparlia%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fconsensus%2Fparlia%2Fparlia.go)%3A%20Parlia%20is%20the%20consensus%20engine%20of%20BSC%0A-%20%5Bethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs)%0A%20%20-%20%5BEthreum%202.0%20Fork%20Choice%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fv0.12.1%2Fspecs%2Fphase0%2Ffork-choice.mdx)%0A%20%20-%20%5BPaths%20toward%20single-slot%20finality%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fsingle_slot_finality)%3A%20A%20look%20at%20how%20to%20improve%20Ethereum%E2%80%99s%20LMD%20GHOST%20%2B%20Casper%20FFG%20consensus.%0A%20%20%20%20-%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Ffork_choice)%20(rust)%3A%20stores%20the%20actual%20block%20DAG%20in%20%60ProtoArrayForkChoice%60.%20-%20%60time%60%20is%20represented%20using%20%60Slot%60%20instead%20of%20UNIX%20epoch%20%60u64%60.%0A%20%20-%20%5Bproto_array%5D%0A%20%20%20%20-%20%5Blighthouse%20proto_array%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fproto_array)%20(rust)%3A%20ProtoArray%20iterates%20backwards%20through%20the%20array%2C%20touching%20all%20nodes%20and%20their%20parents%20and%20potentially%20the%20best-child%20of%20each%20parent.%20The%20structure%20of%20the%20%60self.nodes%60%20array%20ensures%20that%20the%20child%20of%20each%20node%20is%20always%20touched%20before%20its%20parent.%0A%20%20-%20%5BSerDes%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSerDes)%3A%20Serializer%2FDeserializer%0A%20%20%20%20-%20%5Blighthouse%20serde_utils%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fserde_utils)%20(rust)%0A%20%20-%20%5Bsimple%20serialize%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Feth2.0-specs%2Fblob%2Fv0.12.1%2Fssz%2Fsimple-serialize.mdx)%0A%20%20%20%20-%20%5Blighthouse%20ssz%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Fssz%2Fsrc%2Flib.rs)%20(rust)%3A%20Provides%20encoding%20(serialization)%20and%20decoding(deserialization)%20in%20the%20SimpleSerialize%20(SSZ)%20format%20designed%20for%20use%20in%20Ethereum%202.0.%0A%20%20%20%20-%20%5Blighthouse%20ssz_derive%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fssz_derive)%20(rust)%3A%20Provides%20procedural%20derive%20macros%20for%20the%20%60Encode%60%20and%20%60Decode%60%20traits%20of%20the%20%60eth2_ssz%60%20crate.%0A%20%20%20%20-%20%5Blighthouse%20ssz_types%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fssz_types)%20(rust)%3A%20Provides%20types%20with%20unique%20properties%20required%20for%20SSZ%20serialization%20and%20Merklization%0A%20%20%20%20-%20%5Bprysm%20ssz.bzl%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fa7010d817dc839b0a46742dc286402357482da46%2Ftools%2Fssz.bzl%23L70)%20(bazel)%3A%20A%20rule%20that%20uses%20the%20generated%20pb.go%20files%20from%20a%20go_proto_library%20target%20to%20generate%20SSZ%20marshal%20and%20unmarshal%20functions%20as%20pointer%20receivers%20on%20the%20specified%20objects.%0A%20%20-%20%5Bstate_processing%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fbellatrix%2Fbeacon-chain.md%23beacon-chain-state-transition-function)%0A%20%20%20%20-%20%5Blighthouse%20state_procesing%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fstate_processing)%20(rust)%3A%20State%20processing%20functions%20including%20block%2C%20slot%20and%20epoch%20functions.%0A%20%20-%20%5Bcompute_shuffled_index%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fv0.12.1%2Fspecs%2Fphase0%2Fbeacon-chain.md%23compute_shuffled_index)%0A%20%20%20%20-%20%5Blighthouse%20swap_or_not_shuffle%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fswap_or_not_shuffle)%20(rust)%3A%20Provides%20list-shuffling%20functions%20matching%20the%20Ethereum%202.0%20specification.%0A%20%20-%20%5Btypes%5D%0A%20%20%20%20-%20%5Blighthouse%20types%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Ftypes)%20(rust)%3A%20Includes%20type%20definitions%20used%20in%20consensus%20including%20%60beacon_block_header%60%2C%20%60beacon_comittee%60%2C%20%2C%60beacon_state%60%2C%20%60sync_comitte%60%20and%20more.%0A-%20%5Bharmony%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fconsensus%2FREADME.mdx)%20(go)%0A%20%20-%20%5Bharmony%20consensus%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fconsensus)%0A-%20%5Bnear%5D(https%3A%2F%2Fnomicon.io%2FChainSpec%2FConsensus)%20(rust)%0A%20%20-%20%5Bnear%20nearcore%5D(https%3A%2F%2Fgithub.com%2Fnear%2Fnearcore%2Ftree%2Fmaster%2Fnearcore)%0A-%20%5Bpolkadot%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-consensus)%20(rust)%3A%20%5Bcode%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus)%0A%20%20-%20%5Baura%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Faura)%0A%20%20-%20%5Bbabe%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Fbabe)%0A%20%20-%20%5Bbeefy%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Fbeefy)%0A%20%20-%20%5Bgrandpa%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Fgrandpa)%0A%20%20-%20%5Bpow%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Fpow)%0A%20%20-%20additional%20primitives%0A%20%20%20%20-%20%5Bcommon%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Fcommon)%3A%20Common%20utilities%20for%20building%20and%20using%20consensus%20engines%20in%20substrate.%0A%20%20%20%20-%20%5Bslots%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Fslots)%3A%20Primitives%20for%20slots-based%20consensus%20engines.%0A%20%20%20%20-%20%5Bvrf%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Fvrf)%3A%20Primitives%20for%20VRF-based%20consensus%20engines.%20Schnorrkel-based%20VRF.%0A-%20%5Bpolygon%20heimdall%5D()%20(go)%3A%20Validator%20node%20for%20Matic%20Network.%20It%20uses%20peppermint%2C%20customized%20Tendermint.%20Here%20is%20where%20it%20sends%20validator%20updates%20to%20%5Bpeppermint%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Fheimdall%2Fblob%2Fdevelop%2Fapp%2Fapp.go%23L625)%0A%20%20-%20%5Bpolygon%20peppermint%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Ftree%2Fpeppermint%2Fconsensus)(go)%3A%20Peppermint%20is%20a%20modified%20Tendermint.%20It%20is%20changed%20to%20make%20it%20compatible%20with%20Ethereum%20addresses%20and%20verifiable%20on%20Ethereum%20chain.%20(docs%20are%20%5Bhere%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fpeppermint%2F))%0A-%20%5Btendermint%20tendermint%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fconsensus)%20(go)%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./intro-BvUCBflO.js"),[]),path:"/research/chains/intro.html",type:"mdx",filePath:"research/chains/intro.mdx",content:"%23%20Chain%20Research%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AHere%20we%20do%20a%20deep%20dive%20on%20individual%20chains%20with%20a%20focus%20on%20the%20following%20areas%0A%0A-%20Consensus%20Mechanism%0A-%20Signing%20Algorithms%20Supported%0A-%20Light%20Client%20Support%0A-%20Gas%20Costs%0A-%20Settlement%20Time%0A-%20Codebases%0A%0A%23%23%20Chain%20Economics%0A%0AFollowing%20is%20an%20overview%20of%20the%20economics%20of%20sample%20chains.%20These%20chains%20are%20early%20candidates%20for%20the%20design%20and%20implementation%20of%20trustless%20bridging%20that%20we%20have%20been%20doing.%0A%0A%7C%20Chain%20%20%20%20%20%7C%20Token%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Token%20Price%20%7C%20Market%20Capitalization%20%7C%20Total%20Value%20Locked%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20---------%20%7C%20-----------------------------------------------------%20%7C%20-----------%20%7C%20---------------------%20%7C%20---------------------------------------------------------%20%7C%0A%7C%20Avalanche%20%7C%20%5BAVAX%5D(https%3A%2F%2Fwww.coingecko.com%2Fen%2Fcoins%2Favalanche)%20%20%7C%20%2417.83%20%20%20%20%20%20%7C%20%245%2C619%2C898%2C947%20%20%20%20%20%20%20%20%7C%20%5B%24912%2C440%2C000%5D(https%3A%2F%2Fdefillama.com%2Fchain%2FAvalanche)%20%20%20%20%20%7C%0A%7C%20BSC%20%20%20%20%20%20%20%7C%20%5BBNB%5D(https%3A%2F%2Fwww.coingecko.com%2Fen%2Fcoins%2Fbnb)%20%20%20%20%20%20%20%20%20%7C%20%24308.08%20%20%20%20%20%7C%20%2448%2C646%2C681%2C885%20%20%20%20%20%20%20%7C%20%5B%244%2C840%2C000%2C000%5D(https%3A%2F%2Fdefillama.com%2Fchain%2FBSC)%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Cosmos%20%20%20%20%7C%20%5BATOM%5D(https%3A%2F%2Fwww.coingecko.com%2Fen%2Fcoins%2Fcosmos-hub)%20%7C%20%2413.53%20%20%20%20%20%20%7C%20%243%2C959%2C718%2C206%20%20%20%20%20%20%20%20%7C%20%5B%241%2C218%2C000%2C000%5D(https%3A%2F%2Fdefillama.com%2Fchains%2FCosmos)%20%2B%2B%2B%20%7C%0A%7C%20Ethereum%20%20%7C%20%5BETH%5D(https%3A%2F%2Fwww.coingecko.com%2Fen%2Fcoins%2Fethereum)%20%20%20%20%7C%20%241%2C519.29%20%20%20%7C%20%24183%2C069%2C985%2C916%20%20%20%20%20%20%7C%20%5B%2427%2C850%2C000%2C000%5D(https%3A%2F%2Fdefillama.com%2Fchain%2FEthereum)%20%20%20%7C%0A%7C%20Harmony%20%20%20%7C%20%5BONE%5D(https%3A%2F%2Fwww.coingecko.com%2Fen%2Fcoins%2Fharmony)%20%20%20%20%20%7C%20%240.0244%20%20%20%20%20%7C%20%24299%2C878%2C381%20%20%20%20%20%20%20%20%20%20%7C%20%5B%246%2C958%2C436%5D(https%3A%2F%2Fdefillama.com%2Fchain%2FHarmony)%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Polygon%20%20%20%7C%20%5BMATIC%5D(https%3A%2F%2Fwww.coingecko.com%2Fen%2Fcoins%2Fpolygon)%20%20%20%7C%20%241.24%20%20%20%20%20%20%20%7C%20%2411%2C171%2C619%2C834%20%20%20%20%20%20%20%7C%20%5B%241%2C170%2C000%2C000%5D(https%3A%2F%2Fdefillama.com%2Fchain%2FPolygon)%20%20%20%20%20%7C%0A%7C%20Pokadot%20%20%20%7C%20%5BDOT%5D(https%3A%2F%2Fwww.coingecko.com%2Fen%2Fcoins%2Fpolkadot)%20%20%20%20%7C%20%246.22%20%20%20%20%20%20%20%7C%20%247%2C475%2C485%2C172%20%20%20%20%20%20%20%20%7C%20%5B%24278%2C000%2C000%5D(https%3A%2F%2Fdefillama.com%2Fchains%2FParachain)%20%2B%2B%20%7C%0A%0A_The%20above%20data%20is%20from%20Feburary%2011th%2C%202023.%20Links%20are%20provided%20to%20get%20current%20information._%0A%0A_%2B%2B%20Polkadot%20TVL%20includes%20all%20parachains_%0A%0A_%2B%2B%2B%20Cosmos%20TVL%20include%20all%20cosmos%20based%20networks_%0A%0A%23%23%20Chain%20Technology%0A%0AFollowing%20is%20an%20overview%20of%20the%20consensus%2C%20signing%20and%20staking%20mechanisms%20for%20sample%20chains.%20These%20chains%20are%20early%20candidates%20for%20the%20design%20and%20implementation%20of%20trustless%20bridging%20that%20we%20have%20been%20doing.%0A%0A%7C%20Chain%20%20%20%20%20%20%7C%20Consensusigning%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Staking%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Validators%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Subnetsvalanche%20%20%7C%20%5BSnowball%5D(https%3A%2F%2Fdocs.avax.network%2Foverview%2Fgetting-started%2Favalanche-consensus)%2C%20%5BWhite%20Paper%5D(https%3A%2F%2Fassets.website-files.com%2F5d80307810123f5ffbb34d6e%2F6009805681b416f34dcae012_Avalanche%2520Consensus%2520Whitepaper.pdf)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5Brsa%5D(%3Chttps%3A%2F%2Fen.wikipedia.org%2Fwiki%2FRSA_(cryptosystem)%3E)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BAvalanche%20Staking%5D(https%3A%2F%2Fdocs.avax.network%2Fnodes%2Fvalidate%2Fstaking%23staking-parameters-on-avalanche)%20%7C%20%5B1215%5D(https%3A%2F%2Fsubnets.avax.network%2Fvalidators)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B45%5D(https%3A%2F%2Fsubnets.avax.network%2Fsubnets)%20%5Bsubnets%5D(https%3A%2F%2Fdocs.avax.network%2Fsubnets)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20BSC%20%20%20%20%20%20%20%20%7C%20%5BParlia%5D(https%3A%2F%2Fdocs.bnbchain.org%2Fdocs%2Flearn%2Fconsensus%2F%23consensus-protocolsecp256k1%5D(https%3A%2F%2Fdocs.bnbchain.org%2Fdocs%2Fbeaconchain%2Flearn%2Faccounts%2F%23signature)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BPoSA%5D(https%3A%2F%2Fdocs.bnbchain.org%2Fdocs%2Fstake%2FStaking%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B50%5D(https%3A%2F%2Fwww.bnbchain.org%2Fen%2Fstaking)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Cosmos%20Hub%20%7C%20%5BTendermint%5D(https%3A%2F%2Fdocs.tendermint.com%2Fv0.34%2Fintroduction%2Fwhat-is-tendermint.htmled25519%5D(https%3A%2F%2Fed25519.cr.yp.to%2F)%20%5BValidator%20Keys%5D(https%3A%2F%2Fdocs.tendermint.com%2Fv0.34%2Ftendermint-core%2Fvalidators.html%23validator-keys)%20%20%20%20%20%20%7C%20%5BCosmos%20Staking%5D(https%3A%2F%2Fdocs.cosmos.network%2Fv0.46%2Fmodules%2Fstaking%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B504%5D(https%3A%2F%2Fwww.mintscan.io%2Fcosmos%2Fvalidators)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B21%5D(https%3A%2F%2Fdefillama.com%2Fchains%2FCosmos)%20%5BChains%5D(https%3A%2F%2Fdocs.cosmos.network%2Fmain%2Fintro%2Fwhy-app-specific)%20%20%20%7C%0A%7C%20Ethereum%20%20%20%7C%20%5BGasper%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F2003.03052.pdfoS%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fconsensus-mechanisms%2Fpos%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B16%2C477%2C159%5D(https%3A%2F%2Fethereum.org%2Fen%2Fstaking%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Harmony%20%20%20%20%7C%20%5BFBFT%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fgeneral%2Ftechnology%2Fconsensushttps%3A%2F%2Fmedium.com%2F%40caseyga%2Fexploring-bls-keys-on-the-harmony-protocol-understanding-generation-management-and-use-cases-b8722f7219fc)%20%7C%20%5BEPoS%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fgeneral%2Ftechnology%2Feffective-proof-of-stake)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B299%5D(https%3A%2F%2Fstaking.harmony.one%2Fvalidators%2Fmainnet)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B4%5D(https%3A%2F%2Fexplorer.harmony.one%2F)%20%5Bshards%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fgeneral%2Ftechnology%2Fsharding)%20%20%20%20%20%20%20%20%7C%0A%7C%20Polygon%20%20%20%20%7C%20%5BPeppermint%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fpeppermint%2F)%2C%20%5BHeimdall%20and%20Bor%5D(https%3A%2F%2Fpolygon.technology%2Fblog%2Fheimdall-and-bor)%2C%20%5C_%5BHeimdall%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fheimdall%2Foverview%2F)%2C%20%5BBOR%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fbor%2Fconsensus%2F)%20%7C%20secp256k1%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BHeimdall%20Staking%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fheimdall%2Fmodules%2Fstaking%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B100%5D(https%3A%2F%2Fstaking.polygon.technology%2F)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Polkadot%20%20%20%7C%20%5BNPoS%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-consensusr25519%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-cryptography%23what-is-sr25519-and-where-did-it-come-from)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5BNominated%20Pools%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-staking)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%5B1200%5D(https%3A%2F%2Fstaking.polkadot.network%2F%3Futm_source%3Dpolkadot.network%23%2Fvalidators)%20%7C%20%5B36%5D(https%3A%2F%2Fpolkadot.subscan.io%2Fparachain)%20%5Bparachains%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-parachains)%20%7C%0A%0A_The%20above%20data%20is%20from%20Feburary%2011th%2C%202023.%20Links%20are%20provided%20to%20get%20current%20information._%0A%0A%23%23%20Consensus%20Implementations%0A%0A%23%23%23%20Consensus%0A%0A-%20%5Bavalanche%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fsnow%2FREADME.mdx)%20(go)%0A%20%20-%20%5Bavalanche%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fsnow%2Fconsensus%2Favalanche)%3A%20a%20general%20avalanche%20instance%20that%20can%20be%20used%20directly%20to%20process%20a%20series%20of%20partially%20ordered%20elements.%0A%20%20-%20%5Bsnowball%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fsnow%2Fconsensus%2Fsnowball)%3A%20a%20general%20snow%20instance%20that%20can%20be%20used%20directly%20to%20process%20the%20results%20of%20network%20queries.%0A%20%20-%20%5Bsnowman%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fsnow%2Fconsensus%2Fsnowman)%3A%20a%20general%20snowman%20instance%20that%20can%20be%20used%20directly%20to%20process%20a%20series%20of%20dependent%20operations.%0A%20%20-%20%5Bsnowstorm%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Ftree%2Fmaster%2Fsnow%2Fconsensus%2Fsnowstorm)%3A%20a%20snowball%20instance%20deciding%20between%20an%20unbounded%20number%20of%20non-transitive%20conflicts.%20After%20performing%20a%20network%20sample%20of%20k%20nodes%2C%20you%20should%20call%20collect%20with%20the%20responses.%0A%20%20-%20%5BSnowman%2B%2B%3A%20congestion%20control%20for%20Snowman%20VMs%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2Fmaster%2Fvms%2Fproposervm%2FREADME.mdx)%3A%20Snowman%2B%2B%20introduces%20a%20soft%20proposer%20mechanism%20which%20attempts%20to%20select%20a%20single%20proposer%20with%20the%20power%20to%20issue%20a%20block%2C%20but%20opens%20up%20block%20production%20to%20every%20validator%20if%20sufficient%20time%20has%20passed%20without%20blocks%20being%20generated.%0A%20%20-%20%5BAvalanche%20Warp%20Messaging%20(AWM)%5D(https%3A%2F%2Fmedium.com%2Favalancheavax%2Favalanche-warp-messaging-awm-launches-with-the-first-native-subnet-to-subnet-message-on-avalanche-c0ceec32144a)%3A%20AWM%20enables%20Subnet%20Validators%20to%20collectively%20produce%20a%20BLS%20Multi-Signature%20that%20attests%20to%20the%20validity%20of%20an%20arbitrary%20message%20(e.g.%2C%20transfer%2C%20contract%20data%2C%20etc.)%20that%20can%20be%20verified%20by%20any%20other%20Subnet.%0A-%20%5Bbsc%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fconsensus)%20(go)%0A%20%20-%20%5Bbeacon%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fconsensus%2Fbeacon%2Fconsensus.go)%3A%20Beacon%20is%20a%20consensus%20engine%20that%20combines%20the%20eth1%20consensus%20and%20proof-of-stake%20algorithm.%20There%20is%20a%20special%20flag%20inside%20to%20decide%20whether%20to%20use%20legacy%20consensus%20rules%20or%20new%20rules.%20The%20transition%20rule%20is%20described%20in%20the%20eth1%2F2%20merge%20spec%20%5Beip-3675%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-3675).%20The%20beacon%20here%20is%20a%20half-functional%20consensus%20engine%20with%20partial%20functions%20which%20is%20only%20used%20for%20necessary%20consensus%20checks.%20The%20legacy%20consensus%20engine%20can%20be%20any%20engine%20implements%20the%20consensus%20interface%20(except%20the%20beacon%20itself).%0A%20%20-%20%5Bclique%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fconsensus%2Fclique%2Fclique.go)%3A%20Clique%20is%20the%20proof-of-authority%20consensus%20engine%20proposed%20to%20support%20the%20Ethereum%20testnet%20following%20the%20Ropsten%20attacks.%0A%20%20-%20%5Bethash%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fconsensus%2Fethash%2Fconsensus.go)%3A%20Ethash%20proof-of-work%20protocol%20(obsolete).%0A%20%20-%20%5Bmisc%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fconsensus%2Fmisc)%3A%20includes%20code%20for%20%5Beip-1559%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-1559)%2C%20DAO%20hard-fork%20extension%20to%20the%20header%20validity%2C%20VerifyForkHashes%20verifies%20that%20blocks%20conforming%20to%20network%20hard-forks%20do%20have%20the%20correct%20hashes%20and%20erifyGaslimit%20verifies%20the%20header%20gas%20limit%20according%20increase%2Fdecrease%20in%20relation%20to%20the%20parent%20gas%20limit.%0A%20%20-%20%5Bparlia%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fconsensus%2Fparlia%2Fparlia.go)%3A%20Parlia%20is%20the%20consensus%20engine%20of%20BSC%0A-%20%5Bethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs)%0A%20%20-%20%5BEthreum%202.0%20Fork%20Choice%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fv0.12.1%2Fspecs%2Fphase0%2Ffork-choice.mdx)%0A%20%20-%20%5BPaths%20toward%20single-slot%20finality%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fsingle_slot_finality)%3A%20A%20look%20at%20how%20to%20improve%20Ethereum%E2%80%99s%20LMD%20GHOST%20%2B%20Casper%20FFG%20consensus.%0A%20%20%20%20-%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Ffork_choice)%20(rust)%3A%20stores%20the%20actual%20block%20DAG%20in%20%60ProtoArrayForkChoice%60.%20-%20%60time%60%20is%20represented%20using%20%60Slot%60%20instead%20of%20UNIX%20epoch%20%60u64%60.%0A%20%20-%20%5Bproto_array%5D%0A%20%20%20%20-%20%5Blighthouse%20proto_array%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fproto_array)%20(rust)%3A%20ProtoArray%20iterates%20backwards%20through%20the%20array%2C%20touching%20all%20nodes%20and%20their%20parents%20and%20potentially%20the%20best-child%20of%20each%20parent.%20The%20structure%20of%20the%20%60self.nodes%60%20array%20ensures%20that%20the%20child%20of%20each%20node%20is%20always%20touched%20before%20its%20parent.%0A%20%20-%20%5BSerDes%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSerDes)%3A%20Serializer%2FDeserializer%0A%20%20%20%20-%20%5Blighthouse%20serde_utils%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fserde_utils)%20(rust)%0A%20%20-%20%5Bsimple%20serialize%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Feth2.0-specs%2Fblob%2Fv0.12.1%2Fssz%2Fsimple-serialize.mdx)%0A%20%20%20%20-%20%5Blighthouse%20ssz%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Fssz%2Fsrc%2Flib.rs)%20(rust)%3A%20Provides%20encoding%20(serialization)%20and%20decoding(deserialization)%20in%20the%20SimpleSerialize%20(SSZ)%20format%20designed%20for%20use%20in%20Ethereum%202.0.%0A%20%20%20%20-%20%5Blighthouse%20ssz_derive%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fssz_derive)%20(rust)%3A%20Provides%20procedural%20derive%20macros%20for%20the%20%60Encode%60%20and%20%60Decode%60%20traits%20of%20the%20%60eth2_ssz%60%20crate.%0A%20%20%20%20-%20%5Blighthouse%20ssz_types%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fssz_types)%20(rust)%3A%20Provides%20types%20with%20unique%20properties%20required%20for%20SSZ%20serialization%20and%20Merklization%0A%20%20%20%20-%20%5Bprysm%20ssz.bzl%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fa7010d817dc839b0a46742dc286402357482da46%2Ftools%2Fssz.bzl%23L70)%20(bazel)%3A%20A%20rule%20that%20uses%20the%20generated%20pb.go%20files%20from%20a%20go_proto_library%20target%20to%20generate%20SSZ%20marshal%20and%20unmarshal%20functions%20as%20pointer%20receivers%20on%20the%20specified%20objects.%0A%20%20-%20%5Bstate_processing%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fbellatrix%2Fbeacon-chain.md%23beacon-chain-state-transition-function)%0A%20%20%20%20-%20%5Blighthouse%20state_procesing%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fstate_processing)%20(rust)%3A%20State%20processing%20functions%20including%20block%2C%20slot%20and%20epoch%20functions.%0A%20%20-%20%5Bcompute_shuffled_index%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fv0.12.1%2Fspecs%2Fphase0%2Fbeacon-chain.md%23compute_shuffled_index)%0A%20%20%20%20-%20%5Blighthouse%20swap_or_not_shuffle%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fswap_or_not_shuffle)%20(rust)%3A%20Provides%20list-shuffling%20functions%20matching%20the%20Ethereum%202.0%20specification.%0A%20%20-%20%5Btypes%5D%0A%20%20%20%20-%20%5Blighthouse%20types%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Ftypes)%20(rust)%3A%20Includes%20type%20definitions%20used%20in%20consensus%20including%20%60beacon_block_header%60%2C%20%60beacon_comittee%60%2C%20%2C%60beacon_state%60%2C%20%60sync_comitte%60%20and%20more.%0A-%20%5Bharmony%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fconsensus%2FREADME.mdx)%20(go)%0A%20%20-%20%5Bharmony%20consensus%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fconsensus)%0A-%20%5Bnear%5D(https%3A%2F%2Fnomicon.io%2FChainSpec%2FConsensus)%20(rust)%0A%20%20-%20%5Bnear%20nearcore%5D(https%3A%2F%2Fgithub.com%2Fnear%2Fnearcore%2Ftree%2Fmaster%2Fnearcore)%0A-%20%5Bpolkadot%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-consensus)%20(rust)%3A%20%5Bcode%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus)%0A%20%20-%20%5Baura%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Faura)%0A%20%20-%20%5Bbabe%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Fbabe)%0A%20%20-%20%5Bbeefy%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Fbeefy)%0A%20%20-%20%5Bgrandpa%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Fgrandpa)%0A%20%20-%20%5Bpow%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Fpow)%0A%20%20-%20additional%20primitives%0A%20%20%20%20-%20%5Bcommon%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Fcommon)%3A%20Common%20utilities%20for%20building%20and%20using%20consensus%20engines%20in%20substrate.%0A%20%20%20%20-%20%5Bslots%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Fslots)%3A%20Primitives%20for%20slots-based%20consensus%20engines.%0A%20%20%20%20-%20%5Bvrf%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Fvrf)%3A%20Primitives%20for%20VRF-based%20consensus%20engines.%20Schnorrkel-based%20VRF.%0A-%20%5Bpolygon%20heimdall%5D()%20(go)%3A%20Validator%20node%20for%20Matic%20Network.%20It%20uses%20peppermint%2C%20customized%20Tendermint.%20Here%20is%20where%20it%20sends%20validator%20updates%20to%20%5Bpeppermint%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Fheimdall%2Fblob%2Fdevelop%2Fapp%2Fapp.go%23L625)%0A%20%20-%20%5Bpolygon%20peppermint%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Ftree%2Fpeppermint%2Fconsensus)(go)%3A%20Peppermint%20is%20a%20modified%20Tendermint.%20It%20is%20changed%20to%20make%20it%20compatible%20with%20Ethereum%20addresses%20and%20verifiable%20on%20Ethereum%20chain.%20(docs%20are%20%5Bhere%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fpeppermint%2F))%0A-%20%5Btendermint%20tendermint%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fconsensus)%20(go)%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./near-DueTw6nT.js"),[]),path:"/research/chains/near",type:"mdx",filePath:"research/chains/near.mdx",content:"%23%20NEAR%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0ANear%20supports%20We%20both%20secp256k1%20and%20ed25519%20for%20account%20keys%20and%20ed25519%20for%20signing%20transactions.%20They%20currently%20use%20the%20ed25519_dalek%20and%20sha2%20libraries%20for%20crypto.%0A%0A%23%23%20Consensus%20Mechanism%0A%0APlease%20review%20%5BNEAR%20Chainspec%20for%20Consensus%5D(https%3A%2F%2Fgithub.com%2Fnear%2FNEPs%2Fblob%2Fmaster%2Fspecs%2FChainSpec%2FConsensus.md)%0A%0A%23%23%20Light%20Client%20Support%0A%0A%5BNEAR%20Light%20Client%20Documentation%5D(https%3A%2F%2Fnomicon.io%2FChainSpec%2FLightClient)%20gives%20an%20overview%20of%20how%20light%20clients%20work.%20At%20a%20high%20level%20the%20light%20client%20needs%20to%20fetch%20at%20least%20one%20block%20per%20%5Bepoch%5D(https%3A%2F%2Fdocs.near.org%2Fconcepts%2Fbasics%2Fepoch)%20i.e.%20every%2042%2C200%20blocks%20or%20approxmiately%2012%20hours.%20Also%20Having%20the%20LightClientBlockView%20for%20block%20%24B%24%20is%20sufficient%20to%20be%20able%20to%20verify%20any%20statement%20about%20state%20or%20outcomes%20in%20any%20block%20in%20the%20ancestry%20of%20%24B%24%20(including%20%24B%24%20itself).%0A%0A%3E%20The%20RPC%20returns%20the%20LightClientBlock%20for%20the%20block%20as%20far%20into%20the%20future%20from%20the%20last%20known%20hash%20as%20possible%20for%20the%20light%20client%20to%20still%20accept%20it.%20Specifically%2C%20it%20either%20returns%20the%20last%20final%20block%20of%20the%20next%20epoch%2C%20or%20the%20last%20final%20known%20block.%20If%20there's%20no%20newer%20final%20block%20than%20the%20one%20the%20light%20client%20knows%20about%2C%20the%20RPC%20returns%20an%20empty%20result.%0A%3E%0A%3E%20A%20standalone%20light%20client%20would%20bootstrap%20by%20requesting%20next%20blocks%20until%20it%20receives%20an%20empty%20result%2C%20and%20then%20periodically%20request%20the%20next%20light%20client%20block.%0A%3E%0A%3E%20A%20smart%20contract-based%20light%20client%20that%20enables%20a%20bridge%20to%20NEAR%20on%20a%20different%20blockchain%20naturally%20cannot%20request%20blocks%20itself.%20Instead%20external%20oracles%20query%20the%20next%20light%20client%20block%20from%20one%20of%20the%20full%20nodes%2C%20and%20submit%20it%20to%20the%20light%20client%20smart%20contract.%20The%20smart%20contract-based%20light%20client%20performs%20the%20same%20checks%20described%20above%2C%20so%20the%20oracle%20doesn't%20need%20to%20be%20trusted.%0A%0AFollowing%20is%20an%20exerpt%20from%20the%20%5BNear%20Light%20Client%20Specification%5D(https%3A%2F%2Fgithub.com%2Fnear%2FNEPs%2Fblob%2Fmaster%2Fspecs%2FChainSpec%2FLightClient.md)%0A%0A**Near%20Light%20Client**%0A%0A%3E%20The%20state%20of%20the%20light%20client%20is%20defined%20by%3A%0A%3E%0A%3E%201.%20%60BlockHeaderInnerLiteView%60%20for%20the%20current%20head%20(which%20contains%20%60height%60%2C%20%60epoch_id%60%2C%20%60next_epoch_id%60%2C%20%60prev_state_root%60%2C%20%60outcome_root%60%2C%20%60timestamp%60%2C%20the%20hash%20of%20the%20block%20producers%20set%20for%20the%20next%20epoch%20%60next_bp_hash%60%2C%20and%20the%20merkle%20root%20of%20all%20the%20block%20hashes%20%60block_merkle_root%60)%3B%0A%3E%202.%20The%20set%20of%20block%20producers%20for%20the%20current%20and%20next%20epochs.%0A%3E%0A%3E%20The%20%60epoch_id%60%20refers%20to%20the%20epoch%20to%20which%20the%20block%20that%20is%20the%20current%20known%20head%20belongs%2C%20and%20%60next_epoch_id%60%20is%20the%20epoch%20that%20will%20follow.%0A%0A%3E%20Light%20clients%20operate%20by%20periodically%20fetching%20instances%20of%20%60LightClientBlockView%60%20via%20particular%20RPC%20end-point%20described%20%5Bbelow%5D(%23rpc-end-points).%0A%0A%3E%20Light%20client%20doesn't%20need%20to%20receive%20%60LightClientBlockView%60%20for%20all%20the%20blocks.%20Having%20the%20%60LightClientBlockView%60%20for%20block%20%60B%60%20is%20sufficient%20to%20be%20able%20to%20verify%20any%20statement%20about%20state%20or%20outcomes%20in%20any%20block%20in%20the%20ancestry%20of%20%60B%60%20(including%20%60B%60%20itself).%20In%20particular%2C%20having%20the%20%60LightClientBlockView%60%20for%20the%20head%20is%20sufficient%20to%20locally%20verify%20any%20statement%20about%20state%20or%20outcomes%20in%20any%20block%20on%20the%20canonical%20chain.%0A%3E%0A%3E%20However%2C%20to%20verify%20the%20validity%20of%20a%20particular%20%60LightClientBlockView%60%2C%20the%20light%20client%20must%20have%20verified%20a%20%60LightClientBlockView%60%20for%20at%20least%20one%20block%20in%20the%20preceding%20epoch%2C%20thus%20to%20sync%20to%20the%20head%20the%20light%20client%20will%20have%20to%20fetch%20and%20verify%20a%20%60LightClientBlockView%60%20per%20epoch%20passed.%0A%0A**Near%20Rainbow%20Bridge%3A%20NEAR%20Light%20Client%20on%20Ethereum%20Sample%20Implementation**%0A%0A_The%20following%20is%20an%20excerpt%20from%20a%20blog%20by%20near%20on%20%5Beth-near-rainbow-bridge%5D(https%3A%2F%2Fnear.org%2Fblog%2Feth-near-rainbow-bridge%2F)_%0A%0A%3E%20NearOnEthClient%20is%20an%20implementation%20of%20the%20NEAR%20light%20client%20in%20Solidity%20as%20an%20Ethereum%20contract.%20Unlike%20EthOnNearClient%20it%20does%20not%20need%20to%20verify%20every%20single%20NEAR%20header%20and%20can%20skip%20most%20of%20them%20as%20long%20as%20it%20verifies%20at%20least%20one%20header%20per%20NEAR%20epoch%2C%20which%20is%20about%2043k%20blocks%20and%20lasts%20about%20half%20a%20day.%20As%20a%20result%2C%20NearOnEthClient%20can%20memorize%20hashes%20of%20all%20submitted%20NEAR%20headers%20in%20history%2C%20so%20if%20you%20are%20making%20a%20transfer%20from%20NEAR%20to%20Ethereum%20and%20it%20gets%20interrupted%20you%20don%E2%80%99t%20need%20to%20worry%20and%20you%20can%20resume%20it%20any%20time%2C%20even%20months%20later.%20Another%20useful%20property%20of%20the%20NEAR%20light%20client%20is%20that%20every%20NEAR%20header%20contains%20a%20root%20of%20the%20merkle%20tree%20computed%20from%20all%20headers%20before%20it.%20As%20a%20result%2C%20if%20you%20have%20one%20NEAR%20header%20you%20can%20efficiently%20verify%20any%20event%20that%20happened%20in%20any%20header%20before%20it.%0A%3E%0A%3E%20Another%20useful%20property%20of%20the%20NEAR%20light%20client%20is%20that%20it%20only%20accepts%20final%20blocks%2C%20and%20final%20blocks%20cannot%20leave%20the%20canonical%20chain%20in%20NEAR.%20This%20means%20that%20NearOnEthClient%20does%20not%20need%20to%20worry%20about%20forks.%0A%3E%0A%3E%20However%2C%20unfortunately%2C%20NEAR%20uses%20%5BEd25519%5D(https%3A%2F%2Fgithub.com%2Fethereum%2FEIPs%2Fblob%2Fmaster%2FEIPS%2Feip-665.md)%20to%20sign%20messages%20of%20the%20validators%20who%20approve%20the%20blocks%2C%20and%20this%20signature%20is%20not%20available%20as%20an%20EVM%20precompile.%20It%20makes%20verification%20of%20all%20signatures%20of%20a%20single%20NEAR%20header%20prohibitively%20expensive.%20So%20technically%2C%20we%20cannot%20verify%20one%20NEAR%20header%20within%20one%20contract%20call%20to%20NearOnEthClient.%20Therefore%20we%20adopt%20the%20%5Boptimistic%20approach%5D(https%3A%2F%2Fmedium.com%2F%40deaneigenmann%2Foptimistic-contracts-fb75efa7ca84)%20where%20NearOnEthClient%20verifies%20everything%20in%20the%20NEAR%20header%20except%20the%20signatures.%20Then%20anyone%20can%20challenge%20a%20signature%20in%20a%20submitted%20header%20within%20a%204-hour%20challenge%20window.%20The%20challenge%20requires%20verification%20of%20a%20single%20Ed25519%20signature%20which%20would%20cost%20about%20500k%20Ethereum%20gas%20(expensive%2C%20but%20possible).%20The%20user%20submitting%20the%20NEAR%20header%20would%20have%20to%20post%20a%20bond%20in%20Ethereum%20tokens%2C%20and%20a%20successful%20challenge%20would%20burn%20half%20of%20the%20bond%20and%20return%20the%20other%20half%20to%20the%20challenger.%20The%20bond%20should%20be%20large%20enough%20to%20pay%20for%20the%20gas%20even%20if%20the%20gas%20price%20increases%20exponentially%20during%20the%204%20hours.%20For%20instance%2C%20a%2020%20ETH%20bond%20would%20cover%20gas%20price%20hikes%20up%20to%2020000%20Gwei.%20This%20optimistic%20approach%20requires%20having%20a%20watchdog%20service%20that%20monitors%20submitted%20NEAR%20headers%20and%20challenges%20any%20headers%20with%20invalid%20signatures.%20For%20added%20security%2C%20independent%20users%20can%20run%20several%20watchdog%20services.%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BConsensus%2C%20NEAR%20Nomicon%5D(https%3A%2F%2Fnomicon.io%2FChainSpec%2FConsensus)%0A-%20%5BNEAR%20blockchain%20core%2C%20(near)%5D(https%3A%2F%2Fgithub.com%2Fnear%2Fnearcore)%0A%0A**Signing**%0A%0A-%20%5BNear%20Signing%5D(https%3A%2F%2Fdocs.near.org%2Fintegrator%2Ffaq%23how-are-cryptographic-functions-used)%3A%20Near%20documentation%20on%20cryptographic%20functions.%0A-%20%5Bnearcore%20signature.rs%20(codebase)%5D(https%3A%2F%2Fgithub.com%2Fnear%2Fnearcore%2Fblob%2Fmaster%2Fcore%2Fcrypto%2Fsrc%2Fsignature.rs)%3A%20Near%20signature%20code%20(rust).%0A%0A**Staking**%0A%0A**Light%20Client**%0A%0A-%20%5BNear%20Light%20Client%5D(https%3A%2F%2Fnomicon.io%2FChainSpec%2FLightClient)%3A%20Near%20Lithg%20Client%20Specification%20document.%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./near-DueTw6nT.js"),[]),path:"/research/chains/near.html",type:"mdx",filePath:"research/chains/near.mdx",content:"%23%20NEAR%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0ANear%20supports%20We%20both%20secp256k1%20and%20ed25519%20for%20account%20keys%20and%20ed25519%20for%20signing%20transactions.%20They%20currently%20use%20the%20ed25519_dalek%20and%20sha2%20libraries%20for%20crypto.%0A%0A%23%23%20Consensus%20Mechanism%0A%0APlease%20review%20%5BNEAR%20Chainspec%20for%20Consensus%5D(https%3A%2F%2Fgithub.com%2Fnear%2FNEPs%2Fblob%2Fmaster%2Fspecs%2FChainSpec%2FConsensus.md)%0A%0A%23%23%20Light%20Client%20Support%0A%0A%5BNEAR%20Light%20Client%20Documentation%5D(https%3A%2F%2Fnomicon.io%2FChainSpec%2FLightClient)%20gives%20an%20overview%20of%20how%20light%20clients%20work.%20At%20a%20high%20level%20the%20light%20client%20needs%20to%20fetch%20at%20least%20one%20block%20per%20%5Bepoch%5D(https%3A%2F%2Fdocs.near.org%2Fconcepts%2Fbasics%2Fepoch)%20i.e.%20every%2042%2C200%20blocks%20or%20approxmiately%2012%20hours.%20Also%20Having%20the%20LightClientBlockView%20for%20block%20%24B%24%20is%20sufficient%20to%20be%20able%20to%20verify%20any%20statement%20about%20state%20or%20outcomes%20in%20any%20block%20in%20the%20ancestry%20of%20%24B%24%20(including%20%24B%24%20itself).%0A%0A%3E%20The%20RPC%20returns%20the%20LightClientBlock%20for%20the%20block%20as%20far%20into%20the%20future%20from%20the%20last%20known%20hash%20as%20possible%20for%20the%20light%20client%20to%20still%20accept%20it.%20Specifically%2C%20it%20either%20returns%20the%20last%20final%20block%20of%20the%20next%20epoch%2C%20or%20the%20last%20final%20known%20block.%20If%20there's%20no%20newer%20final%20block%20than%20the%20one%20the%20light%20client%20knows%20about%2C%20the%20RPC%20returns%20an%20empty%20result.%0A%3E%0A%3E%20A%20standalone%20light%20client%20would%20bootstrap%20by%20requesting%20next%20blocks%20until%20it%20receives%20an%20empty%20result%2C%20and%20then%20periodically%20request%20the%20next%20light%20client%20block.%0A%3E%0A%3E%20A%20smart%20contract-based%20light%20client%20that%20enables%20a%20bridge%20to%20NEAR%20on%20a%20different%20blockchain%20naturally%20cannot%20request%20blocks%20itself.%20Instead%20external%20oracles%20query%20the%20next%20light%20client%20block%20from%20one%20of%20the%20full%20nodes%2C%20and%20submit%20it%20to%20the%20light%20client%20smart%20contract.%20The%20smart%20contract-based%20light%20client%20performs%20the%20same%20checks%20described%20above%2C%20so%20the%20oracle%20doesn't%20need%20to%20be%20trusted.%0A%0AFollowing%20is%20an%20exerpt%20from%20the%20%5BNear%20Light%20Client%20Specification%5D(https%3A%2F%2Fgithub.com%2Fnear%2FNEPs%2Fblob%2Fmaster%2Fspecs%2FChainSpec%2FLightClient.md)%0A%0A**Near%20Light%20Client**%0A%0A%3E%20The%20state%20of%20the%20light%20client%20is%20defined%20by%3A%0A%3E%0A%3E%201.%20%60BlockHeaderInnerLiteView%60%20for%20the%20current%20head%20(which%20contains%20%60height%60%2C%20%60epoch_id%60%2C%20%60next_epoch_id%60%2C%20%60prev_state_root%60%2C%20%60outcome_root%60%2C%20%60timestamp%60%2C%20the%20hash%20of%20the%20block%20producers%20set%20for%20the%20next%20epoch%20%60next_bp_hash%60%2C%20and%20the%20merkle%20root%20of%20all%20the%20block%20hashes%20%60block_merkle_root%60)%3B%0A%3E%202.%20The%20set%20of%20block%20producers%20for%20the%20current%20and%20next%20epochs.%0A%3E%0A%3E%20The%20%60epoch_id%60%20refers%20to%20the%20epoch%20to%20which%20the%20block%20that%20is%20the%20current%20known%20head%20belongs%2C%20and%20%60next_epoch_id%60%20is%20the%20epoch%20that%20will%20follow.%0A%0A%3E%20Light%20clients%20operate%20by%20periodically%20fetching%20instances%20of%20%60LightClientBlockView%60%20via%20particular%20RPC%20end-point%20described%20%5Bbelow%5D(%23rpc-end-points).%0A%0A%3E%20Light%20client%20doesn't%20need%20to%20receive%20%60LightClientBlockView%60%20for%20all%20the%20blocks.%20Having%20the%20%60LightClientBlockView%60%20for%20block%20%60B%60%20is%20sufficient%20to%20be%20able%20to%20verify%20any%20statement%20about%20state%20or%20outcomes%20in%20any%20block%20in%20the%20ancestry%20of%20%60B%60%20(including%20%60B%60%20itself).%20In%20particular%2C%20having%20the%20%60LightClientBlockView%60%20for%20the%20head%20is%20sufficient%20to%20locally%20verify%20any%20statement%20about%20state%20or%20outcomes%20in%20any%20block%20on%20the%20canonical%20chain.%0A%3E%0A%3E%20However%2C%20to%20verify%20the%20validity%20of%20a%20particular%20%60LightClientBlockView%60%2C%20the%20light%20client%20must%20have%20verified%20a%20%60LightClientBlockView%60%20for%20at%20least%20one%20block%20in%20the%20preceding%20epoch%2C%20thus%20to%20sync%20to%20the%20head%20the%20light%20client%20will%20have%20to%20fetch%20and%20verify%20a%20%60LightClientBlockView%60%20per%20epoch%20passed.%0A%0A**Near%20Rainbow%20Bridge%3A%20NEAR%20Light%20Client%20on%20Ethereum%20Sample%20Implementation**%0A%0A_The%20following%20is%20an%20excerpt%20from%20a%20blog%20by%20near%20on%20%5Beth-near-rainbow-bridge%5D(https%3A%2F%2Fnear.org%2Fblog%2Feth-near-rainbow-bridge%2F)_%0A%0A%3E%20NearOnEthClient%20is%20an%20implementation%20of%20the%20NEAR%20light%20client%20in%20Solidity%20as%20an%20Ethereum%20contract.%20Unlike%20EthOnNearClient%20it%20does%20not%20need%20to%20verify%20every%20single%20NEAR%20header%20and%20can%20skip%20most%20of%20them%20as%20long%20as%20it%20verifies%20at%20least%20one%20header%20per%20NEAR%20epoch%2C%20which%20is%20about%2043k%20blocks%20and%20lasts%20about%20half%20a%20day.%20As%20a%20result%2C%20NearOnEthClient%20can%20memorize%20hashes%20of%20all%20submitted%20NEAR%20headers%20in%20history%2C%20so%20if%20you%20are%20making%20a%20transfer%20from%20NEAR%20to%20Ethereum%20and%20it%20gets%20interrupted%20you%20don%E2%80%99t%20need%20to%20worry%20and%20you%20can%20resume%20it%20any%20time%2C%20even%20months%20later.%20Another%20useful%20property%20of%20the%20NEAR%20light%20client%20is%20that%20every%20NEAR%20header%20contains%20a%20root%20of%20the%20merkle%20tree%20computed%20from%20all%20headers%20before%20it.%20As%20a%20result%2C%20if%20you%20have%20one%20NEAR%20header%20you%20can%20efficiently%20verify%20any%20event%20that%20happened%20in%20any%20header%20before%20it.%0A%3E%0A%3E%20Another%20useful%20property%20of%20the%20NEAR%20light%20client%20is%20that%20it%20only%20accepts%20final%20blocks%2C%20and%20final%20blocks%20cannot%20leave%20the%20canonical%20chain%20in%20NEAR.%20This%20means%20that%20NearOnEthClient%20does%20not%20need%20to%20worry%20about%20forks.%0A%3E%0A%3E%20However%2C%20unfortunately%2C%20NEAR%20uses%20%5BEd25519%5D(https%3A%2F%2Fgithub.com%2Fethereum%2FEIPs%2Fblob%2Fmaster%2FEIPS%2Feip-665.md)%20to%20sign%20messages%20of%20the%20validators%20who%20approve%20the%20blocks%2C%20and%20this%20signature%20is%20not%20available%20as%20an%20EVM%20precompile.%20It%20makes%20verification%20of%20all%20signatures%20of%20a%20single%20NEAR%20header%20prohibitively%20expensive.%20So%20technically%2C%20we%20cannot%20verify%20one%20NEAR%20header%20within%20one%20contract%20call%20to%20NearOnEthClient.%20Therefore%20we%20adopt%20the%20%5Boptimistic%20approach%5D(https%3A%2F%2Fmedium.com%2F%40deaneigenmann%2Foptimistic-contracts-fb75efa7ca84)%20where%20NearOnEthClient%20verifies%20everything%20in%20the%20NEAR%20header%20except%20the%20signatures.%20Then%20anyone%20can%20challenge%20a%20signature%20in%20a%20submitted%20header%20within%20a%204-hour%20challenge%20window.%20The%20challenge%20requires%20verification%20of%20a%20single%20Ed25519%20signature%20which%20would%20cost%20about%20500k%20Ethereum%20gas%20(expensive%2C%20but%20possible).%20The%20user%20submitting%20the%20NEAR%20header%20would%20have%20to%20post%20a%20bond%20in%20Ethereum%20tokens%2C%20and%20a%20successful%20challenge%20would%20burn%20half%20of%20the%20bond%20and%20return%20the%20other%20half%20to%20the%20challenger.%20The%20bond%20should%20be%20large%20enough%20to%20pay%20for%20the%20gas%20even%20if%20the%20gas%20price%20increases%20exponentially%20during%20the%204%20hours.%20For%20instance%2C%20a%2020%20ETH%20bond%20would%20cover%20gas%20price%20hikes%20up%20to%2020000%20Gwei.%20This%20optimistic%20approach%20requires%20having%20a%20watchdog%20service%20that%20monitors%20submitted%20NEAR%20headers%20and%20challenges%20any%20headers%20with%20invalid%20signatures.%20For%20added%20security%2C%20independent%20users%20can%20run%20several%20watchdog%20services.%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BConsensus%2C%20NEAR%20Nomicon%5D(https%3A%2F%2Fnomicon.io%2FChainSpec%2FConsensus)%0A-%20%5BNEAR%20blockchain%20core%2C%20(near)%5D(https%3A%2F%2Fgithub.com%2Fnear%2Fnearcore)%0A%0A**Signing**%0A%0A-%20%5BNear%20Signing%5D(https%3A%2F%2Fdocs.near.org%2Fintegrator%2Ffaq%23how-are-cryptographic-functions-used)%3A%20Near%20documentation%20on%20cryptographic%20functions.%0A-%20%5Bnearcore%20signature.rs%20(codebase)%5D(https%3A%2F%2Fgithub.com%2Fnear%2Fnearcore%2Fblob%2Fmaster%2Fcore%2Fcrypto%2Fsrc%2Fsignature.rs)%3A%20Near%20signature%20code%20(rust).%0A%0A**Staking**%0A%0A**Light%20Client**%0A%0A-%20%5BNear%20Light%20Client%5D(https%3A%2F%2Fnomicon.io%2FChainSpec%2FLightClient)%3A%20Near%20Lithg%20Client%20Specification%20document.%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./polkadot-KWq10a_f.js"),[]),path:"/research/chains/polkadot",type:"mdx",filePath:"research/chains/polkadot.mdx",content:"%23%20Polkadot%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0A_Note%3A%20The%20majority%20of%20this%20research%20was%20done%20in%20early%202019%20and%20has%20been%20updated%20recently%20with%20some%20notes%20on%20consenus%20and%20signing.%20In%202021%20John%20built%20and%20deployed%20a%20Parachain%20called%20%5BEave%20Network%5D(https%3A%2F%2Feave.network%2F)%20codebase%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2FEaveNetwork).%20The%20parachain%20was%20deployed%20to%20the%20Rococo%20Testnet.%20John%20self%20funded%20this%20initiative%2C%20but%20failed%20to%20raise%20seed%20funding%2C%20due%20to%20this%20and%20other%20priorities%20this%20project%20was%20never%20fully%20developed%20and%20deployed%20on%20Kusama%20or%20Polkadot.%20Polkadot%20is%20one%20of%20John's%20favourite%20development%20frameworks%20and%20he%20is%20extremely%20grateful%20for%20Gavin%20Wood%20and%20Tomasz%20Drwi%C4%99ga%20who%20he%20was%20fortunate%20enough%20to%20collaborate%20with%20briefly%20on%20the%20Parity%20Ethereum%20Client%20in%20early%202016%20as%20he%20began%20his%20blockchain%20journey._%0A%0APolkadot%20substrate%20is%20a%20chain%20layer%20which%20allows%20pluggable%20consensus%2C%20definition%20of%20storage%20through%20the%20seperation%20of%20%22extrinsics%22%20and%20abstracts%20the%20runtime%20design%20allowing%20for%20blockchain%20providers%20to%20decide%20which%20runtime%20best%20suits%20there%20application%20needs.%20It%20also%20has%20been%20built%20with%20light%20client%20protocol%20in%20mind%20with%20a%20number%20of%20storage%20and%20pruning%20options%20giving%20the%20ability%20to%20clearly%20seperated%20different%20actors%20requirements%20for%20infrastructure%20(e.g.%20participants%20can%20run%20a%20light%20client%20on%20a%20mobile%20device%20and%20validators%20can%20run%20full%20nodes%20with%20gauranteed%20performance%20and%20uptime).%20On%20top%20of%20this%20Polkadot%20sits%20as%20a%20relay%20chain%20(built%20on%20Substrate)%20which%20allows%20private%20chains%20to%20share%20infrastucture%20such%20as%20validators.%0A%0A%23%23%20Consensus%20Mechanism%0A%0AFollowing%20is%20an%20excerpt%20from%20%5BPolkadot%20learn%20consensus%5D(https%3A%2F%2Fgithub.com%2Fw3f%2Fpolkadot-wiki%2Fblob%2Fmaster%2Fdocs%2Flearn%2Flearn-consensus.mdx)%0A%0A%3E%20**Nominated%20Proof%20of%20Stake**%0A%0A%3E%20In%20traditional%20PoS%20systems%2C%20block%20production%20participation%20is%20dependent%20on%20token%20holdings%20as%20opposed%20to%20computational%20power.%20While%20PoS%20developers%20usually%20have%20a%20proponent%20for%20equitable%20participation%20in%20a%20decentralized%20manner%2C%20most%20projects%20end%20up%20proposing%20some%20level%20of%20centralized%20operation%2C%20where%20the%20number%20of%20validators%20with%20full%20participation%20rights%20is%20limited.%20These%20validators%20are%20often%20seen%20to%20be%20the%20most%20wealthy%2C%20and%2C%20as%20a%20result%2C%20influence%20the%20PoS%20network%20as%20they%20are%20the%20most%20staked.%20Usually%2C%20the%20number%20of%20candidates%20to%20maintain%20the%20network%20with%20the%20necessary%20knowledge%20(and%20equipment)%20is%20limited%3B%20this%20can%20directly%20increase%20operational%20costs%20as%20well.%20Systems%20with%20a%20large%20number%20of%20validators%20tend%20to%20form%20pools%20to%20decrease%20the%20variance%20of%20their%20revenue%20and%20profit%20from%20economies%20of%20scale.%20These%20pools%20are%20often%20off-chain.%0A%0A%3E%20A%20way%20to%20alleviate%20this%20is%20to%20implement%20pool%20formation%20on-chain%20and%20allow%20token%20holders%20to%20vote%20with%20their%20stake%20for%20validators%20to%20represent%20them.%0A%0A%3E%20Polkadot%20uses%20NPoS%20(Nominated%20Proof-of-Stake)%20as%20its%20mechanism%20for%20selecting%20the%20validator%20set.%20It%20is%20designed%20with%20the%20roles%20of%20**validators**%20and%20**nominators**%2C%20to%20maximize%20chain%20security.%20Actors%20who%20are%20interested%20in%20maintaining%20the%20network%20can%20run%20a%20validator%20node.%0A%0A%3E%20Validators%20assume%20the%20role%20of%20producing%20new%20blocks%20in%20%5BBABE%5D(%23block-production-babe)%2C%20validating%20parachain%20blocks%2C%20and%20guaranteeing%20finality.%20Nominators%20can%20choose%20to%20back%20select%20validators%20with%20their%20stake.%20Nominators%20can%20approve%20candidates%20that%20they%20trust%20and%20back%20them%20with%20their%20tokens.%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BNPoS%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-consensus)%3A%20Polkadot%20Nominated%20Proof%20of%20Stake%20Documentation%0A-%20%5BPolkadot%20Consensus%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-consensus)%3A%20Polkadot's%20documentation%20on%20consenus.%0A%0A-%20%5BHybrid%20Consensus%20Slide%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fparitysubstrate%23%2F17)%0A-%20%5BGeneralized%20Consensus%20Pull%20Request%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fpull%2F883)%0A-%20%5BConsensus%20Code%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fcore%2Fconsensus)%0A-%20%5BRhododendron%20-%20Asynchronously%20safe%20BFT%20consensus%2C%20implementation%20in%20Rust%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Frhododendron)%0A-%20%5BRandom%20Number%20Generation%20CSPRNG%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FCryptographically_secure_pseudorandom_number_generator)%0A%20%20-%20%5BRust-Random%5D(https%3A%2F%2Fgithub.com%2Frust-random%2Frand)%0A-%20Block%20Finality%0A%20%20-%20%5BGRANDPA%20(GHOST-based%20Recursive%20Ancestor%20Deriving%20Prefix%20Agreement)%5D(https%3A%2F%2Fmedium.com%2Fpolkadot-network%2Fgrandpa-block-finality-in-polkadot-an-introduction-part-1-d08a24a021b5)%0A%20%20%20%20-%20%5BFinality%20GANDPA%20Code%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Ffinality-grandpa)%0A%20%20%20%20-%20%5BSubstrate%20using%20GRANDPA%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fcore%2Ffinality-grandpa%2Fsrc%2Flib.rs)%0A%20%20%20%20-%20%5BFull%20nodes%20should%20store%20a%20GRANDPA%20commit%20message%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fissues%2F1026)%0A%20%20%20%20-%20%5BDynamic%20Authority%20sets%20in%20GRANDPA%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fpull%2F1014)%0A%0A**Signing**%0A%0A-%20%5BSr25519%20Documentation%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-cryptography%23what-is-sr25519-and-where-did-it-come-from)%3A%20Polkadots%20sr25519%20Documentation.%20_The%20implementation%20of%20Schnorr%20signatures%20that%20is%20used%20in%20Polkadot%20and%20implements%20the%20Schnorrkel%20protocols%20over%20the%20Ristretto%20compression%20of%20the%20Curve25519%20is%20known%20as%20sr25519._%0A-%20%5BSubstrate%20sr25519%20codebase%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fprimitives%2Fapplication-crypto%2Fsrc%2Fsr25519.rs)%3A%20Polkadot's%20sr25519%20code%20(rust).%0A-%20%5BED25519%5D(https%3A%2F%2Fed25519.cr.yp.to%2F)%0A%0A**Staking**%0A%0A-%20%5BPolkadot%20Staking%20Documentation%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-staking)%3A%20Documentation%20on%20Polkadot%20including%20staking%20validators%20and%20Nominiated%20Pools%0A-%20%5BStaking%20Polkadot%20Application%5D(https%3A%2F%2Fstaking.polkadot.network%2F%3Futm_source%3Dpolkadot.network%23%2Fvalidators)%3A%20Polkadot%20Staking%20Application%20validator%20view.%0A%0A**Parachains**%0A%0A-%20%5BSubscan%20Explorer%5D(https%3A%2F%2Fpolkadot.subscan.io%2Fparachain)%3A%20Block%20Explorer%20built%20for%20Polkadot%20and%20supporting%20all%20Parachains%0A-%20%5Bparachains%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-parachains)%3A%20Polkadot%20documentation%20on%20Parachains%0A%0A**Additional**%0A%0A-%20Blockchain%20Explorers%0A%20%20-%20%5Bpolkadash.io%5D(http%3A%2F%2Fpolkadash.io%2F)%0A%20%20-%20%5Bpolkascan.io%5D(https%3A%2F%2Fpolkascan.io%2F)%0A%20%20%20%20-%20%5BBBQ%20Birch%20-%20Testnet%5D(https%3A%2F%2Fpolkascan.io%2Fn-pre%2Fbbqbirch%2F)%0A%20%20-%20%5Bpoc-2.plokadot.io%5D(https%3A%2F%2Fpoc-2.polkadot.io%2F%23%2Fexplorer)%0A%20%20-%20%5BSubstrate%20Explorer%5D(https%3A%2F%2Fpolkadot.js.org%2Fapps%2Fnext%2F%23%2Fexplorer)%0A%20%20-%20%5BTelemetry.polkadot.io%5D(https%3A%2F%2Ftelemetry.polkadot.io%2F%23%2FKrumme%2520Lanke)%0A-%20Substrate%20Overview%0A%20%20-%20%5BWhat%20is%20Substrate%5D(https%3A%2F%2Fwww.parity.io%2Fwhat-is-substrate%2F)%0A%20%20%20%20-%20Substrate%20%5BVideo%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DiUMZyL5kTwc)%20-%20%5BSlides%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fparitysubstrate%23%2F)%0A%20%20%20%20%20%20-%20%5BPotential%20Runtime%20Designs%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fparitysubstrate%23%2F29)%0A%20%20%20%20-%20%5BParity%20Substrate%20Wiki%5D(https%3A%2F%2Fwiki.parity.io%2FParity-Substrate)%0A%20%20-%20%5BWhat%20is%20PolKadot%5D(https%3A%2F%2Fpolkadot.network%2F%23whatisit)%0A%20%20%20%20-%20Polkadot%20Governance%20%5BVideo%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DVsZuDJMmVPY%26t%3D24735s%26list%3DPL6-IF807eaBG5sH-SQXlosqKRM2BZkrqw%26index%3D4)%20-%20%5BSlides%5D(https%3A%2F%2Fslides.com%2Fparitytech%2Fpolkadot-governance%23%2F)%0A%20%20%20%20-%20%5BPolkadot%20Whitepaper%5D(https%3A%2F%2Fpolkadot.network%2FPolkaDotPaper.pdf)%0A%20%20%20%20-%20Polkadot%20%5BVideo%5D(https%3A%2F%2Fyoutu.be%2FlIghiCmHz0U%3Flist%3DPLaZFi8ZkzUvKGyWTQ999rbHUXfDQv2LRF)%20%5BSlides%5D(https%3A%2F%2Fwww.slideshare.net%2Fgavofyork%2Fpolkadot-presentation)%0A%20%20%20%20-%20Substrate%20%3A%20A%20Rustic%20Vision%20of%20Polkadot%20by%20Gavin%20Wood%20%5BVideo%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D0IoUZdDi5Is%26feature%3Dyoutu.be)%20-%20%5BSlides%5D(https%3A%2F%2Fslides.com%2Fparitytech%2Fsubstrate_web3summit%23%2F1)%0A%20%20%20%20-%20%5BGavin%20Wood%20Podcast%20on%20Polkadot%2C%20Sharding%20and%20Substrate%5D(https%3A%2F%2Fwww.zeroknowledge.fm%2F46)%0A%20%20%20%20-%20%5BPolkadot%20runtime%20Environment%20%3A%20Alternative%20Implementation%20Grant%5D(https%3A%2F%2Fdocs.google.com%2Fdocument%2Fd%2F1iaIWmfV-uA7Uv1O4yt9G2t_86q18h_r7i5T1t-_EZ-s%2Fedit)%20-%20%5BGithub%5D(https%3A%2F%2Fgithub.com%2Fw3f%2FWeb3-collaboration%2Fissues%2F12)%0A%20%20-%20%5BToken%20Economics%20-%20DOTS%5D(https%3A%2F%2Fpolkadot.network%2Fmemorandum)%0A%20%20-%20%5BSecret%20Store%5D(https%3A%2F%2Fwiki.parity.io%2FSecret-Store.html)%20shard%20key%20generation%0A%20%20-%20%5BParity%20Ethereum%20IPFS%5D(https%3A%2F%2Fwiki.parity.io%2FIPFS)%0A%20%20-%20%5BCosmos%20vs%20Polkadot%5D(https%3A%2F%2Fmedium.com%2F%40davekaj%2Fblockchain-interoperability-cosmos-vs-polkadot-48097d54d2e2)%0A%20%20-%20%5BPolkadot%20POC%20Tutorials%5D(https%3A%2F%2Fmedium.com%2Fcoinmonks%2Fpolkadot-hello-world-3-poc-3-on-substrate-is-here-c45d100f72e3)%0A%20%20-%20%5BPolkadot%20on%20Reddit%5D(https%3A%2F%2Fwww.reddit.com%2Fr%2Fdot%2F)%0A%20%20-%20%5Bsubstrate.readme.io%5D(https%3A%2F%2Fsubstrate.readme.io%2F)%20-%20Substrate%20Developers%20Hub%0A%20%20-%20%5BSubstrate%20Workshop%20-%20Video%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Ftime_continue%3D278%26v%3D26ucTSSaqog)%0A%20%20-%20%5BSubstrate%20Web%203%20Summit%20-%20Slides%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fsubstrate_web3summit%23%2F)%0A%20%20-%20%5BBuilding%20on%20Substrate%5D(https%3A%2F%2Fhackmd.io%2Fp_v1M8WGRyy9PggYiKA_Xw%23)%0A%20%20-%20%5BPolkadot%202018%20Recap%5D(https%3A%2F%2Fmedium.com%2F%40gavofyork%2Fpolkadot-2018-recap-677dab3e995b)%0A-%20Relevant%20Code%20Links%0A%20%20-%20Key%20Repositories%0A%20%20%20%20-%20%5BParityTech%5D(https%3A%2F%2Fgithub.com%2Fparitytech)%0A%20%20%20%20%20%20-%20%5BSubstrate%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate)%0A%20%20%20%20%20%20%20%20-%20%5BGeneralize%20the%20Consensus%20Infrastructure%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fpull%2F883)%0A%20%20%20%20%20%20%20%20%20%20-%20%5BPluggable%20Consensus%20Import%20Queue%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fissues%2F784)%0A%20%20%20%20%20%20-%20%5BPolkadot%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fpolkadot)%0A%20%20%20%20%20%20-%20%5BWASMI%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fwasmi)%0A%20%20-%20%5BWeb%20Assembly%20(WASM)%5D(https%3A%2F%2Fwebassembly.org%2F)%0A%20%20%20%20-%20%5BGO%20-%20support%20for%20WASM%5D(https%3A%2F%2Fgithub.com%2Fgolang%2Fgo%2Fissues%2F18892)%0A%20%20%20%20-%20%5BGO%20WAGON%5D(https%3A%2F%2Fgithub.com%2Fgo-interpreter%2Fwagon)%0A%20%20%20%20-%20%5BGO%20Perlin%5D(https%3A%2F%2Fgithub.com%2Fperlin-network%2Flife)%0A%20%20%20%20-%20%5BRust%20Parity%20Tech%20WASMI%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fwasmi)%0A-%20Functional%20Breakdown%0A%20%20-%20Persistence%0A%20%20%20%20-%20Storage%0A%20%20%20%20%20%20-%20%5BRocksDB%5D(https%3A%2F%2Frocksdb.org%2F)%0A%20%20%20%20%20%20-%20%5BDB%20Code%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fcore%2Fclient%2Fdb)%0A%20%20%20%20%20%20-%20Data%20Overview%20-%20Light%20Client%0A%20%20%20%20%20%20%20%20-%20Block%20Structure%20%5BSlide%2017%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fparitysubstrate%23%2F17)%20to%20%5B28%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fparitysubstrate%23%2F28)%0A%20%20%20%20%20%20-%20%5Bdecl_storage%20-%20macro%5D(https%3A%2F%2Fwiki.parity.io%2Fdecl_storage)%0A%20%20%20%20%20%20-%20%5BGet%20and%20Set%20Storage%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fparitysubstrate%23%2F14)%0A%20%20%20%20-%20Light%20Client%0A%20%20%20%20%20%20-%20%5BDB%20Code%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fcore%2Fclient%2Fdb%2Fsrc%2Flight.rs)%0A%20%20%20%20%20%20-%20%5BLight%20Client%20Code%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fcore%2Fclient%2Fsrc%2Flight)%0A%20%20%20%20%20%20-%20%5BProtocol%20Light%20Client%20Storage%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fissues%2F131)%0A%20%20%20%20-%20Node%0A%20%20%20%20%20%20-%20%5BClient%20Code%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fcore%2Fclient%2Fsrc)%0A%20%20-%20Gossip%0A%20%20%20%20-%20%5Blibp2p%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fwiki%2Fwiki%2Flibp2p-Whitepaper)%0A%20%20%20%20-%20%5BSubstrate%20Code%20-%20network%20libp2p%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fcore%2Fnetwork-libp2p)%0A%20%20%20%20-%20%5BGet%20and%20Set%20Storage%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fparitysubstrate%23%2F14)%0A%20%20%20%20-%20Message%20Format%0A%20%20%20%20%20%20-%20%5BSubstrate%20Primitives%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fcore%2Fprimitives)%0A%20%20%20%20%20%20-%20%5BPolkadot%20Parachain%20Primitives%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fpolkadot%2Fblob%2Fmaster%2Fprimitives%2Fsrc%2Fparachain.rs)%0A%20%20%20%20%20%20-%20%5BPolkadot%20Collator%20-%20Logic%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fpolkadot%2Fblob%2Fmaster%2Fcollator%2Fsrc%2Flib.rs%23L17)%0A%20%20-%20%5BExecution%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fparitysubstrate%23%2F15)%0A%20%20%20%20-%20%5BRuntime%5D(https%3A%2F%2Fwiki.parity.io%2Fimpl_stubs)%0A%20%20%20%20-%20%5Bimpl-stubs%5D(https%3A%2F%2Fwiki.parity.io%2Fimpl_stubs)%0A%20%20%20%20-%20%5BSRML%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fsrml)%0A%20%20%20%20-%20%5BSRML%20Node%20Template%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate-node-template)%0A%20%20-%20Polkadot%20-%20Relay%20Chain%0A%20%20%20%20-%20%5BWhitepaper%20Overview%20-%20Participation%20in%20Polkadot%5D(https%3A%2F%2Fpolkadot.network%2FPolkaDotPaper.pdf)%20-%20Page%204%20gives%20an%20overview%20of%20the%20actors%0A%20%20%20%20-%20%5BCollator%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fv0.2%2Fpolkadot%2Fcollator%2Fsrc%2Flib.rs)%0A%20%20%20%20%20%20-%20A%20collator%20node%20lives%20on%20a%20distinct%20parachain%20and%20submits%20a%20proposal%20fora%20state%20transition%2C%20along%20with%20a%20proof%20for%20its%20validity%20(what%20we%20might%20call%20a%20witness%20or%20block%20data).%0A%20%20%20%20-%20%5BPokadot%20Parachain%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fv0.2%2Fpolkadot%2Fparachain%2Fsrc%2Flib.rs)%20-%20Defines%20primitive%20types%20for%20creating%20or%20validating%20a%20parachain.%0A%20%20%20%20-%20%5BStatement%20Table%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fv0.2%2Fpolkadot%2Fstatement-table%2Fsrc%2Flib.rs)%20-%20This%20stores%20messages%20other%20authorities%20issue%20about%20candidates.%0A%20%20%20%20-%20%5BNetwork%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fv0.2%2Fpolkadot%2Fnetwork)%20-%20Does%20the%20heavy%20lifting%20of%20routing%20the%20statements%20and%20gaining%20consensus%20across%20the%20relay%20chain%20(and%20associated%20parachains)%0A%20%20%20%20%20%20-%20%5BConsensus%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fv0.2%2Fpolkadot%2Fnetwork%2Fsrc%2Fconsensus.rs)%20-%20The%20%22consensus%22%20networking%20code%20built%20on%20top%20of%20the%20base%20network%20service.%20This%20fulfills%20the%20%60polkadot_consensus%3A%3ANetwork%60%20trait%2C%20providing%20a%20hook%20to%20be%20called%20each%20time%20consensus%20begins%20on%20a%20new%20chain%20head.%0A%20%20%20%20%20%20-%20%5BConsensus%20Pool%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fv0.2%2Fpolkadot%2Fnetwork%2Fsrc%2Fcollator_pool.rs)%20-%20Bridge%20between%20the%20network%20and%20consensus%20service%20for%20getting%20collations%20to%20it.%0A%20%20%20%20%20%20-%20%5BRouter%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fv0.2%2Fpolkadot%2Fnetwork%2Fsrc%2Frouter.rs)%20-%20Statement%20routing%20and%20consensus%20table%20router%20implementation.%0A%20%20%20%20-%20%5BFisherman%20(Misbehaviour%20check)%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fv0.2%2Fsubstrate%2Fmisbehavior-check%2Fsrc%2Flib.rs)%20-%20Utility%20for%20substrate-based%20runtimes%20that%20want%20to%20check%20misbehavior%20reports.%0A%20%20-%20Hashing%0A%20%20%20%20-%20%5BSubstrate%20Code%20-%20hashing.rs%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fcore%2Fprimitives%2Fsrc%2Fhashing.rs)%0A%20%20%20%20-%20%5BBlake2%5D(https%3A%2F%2Fblake2.net%2F)%20%5Buse%20in%20substrate%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fsearch%3Fq%3Dblake2%26unscoped_q%3Dblake2)%0A%20%20%20%20-%20%5BXXHASH%5D(https%3A%2F%2Fcyan4973.github.io%2FxxHash%2F)%20%5Buse%20in%20substrate%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fsearch%3Fq%3DTWOX%26unscoped_q%3DTWOX)%0A%20%20-%20Chaincode%20(See%20WASM%20above)%0A%20%20%20%20-%20%5BRust%20Parity%20Tech%20WASMI%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fwasmi)%0A%20%20%20%20-%20%5BUse%20in%20Substrate%20Code%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fsearch%3Fq%3Dwasmi%26unscoped_q%3Dwasmi)%0A%20%20-%20Deployment%0A%20%20%20%20-%20Substrate%0A%20%20%20%20%20%20-%20%5BLocally%20on%20Mac%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%23on-mac)%0A%20%20%20%20%20%20-%20%5BFrom%20Code%20Base%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%23on-mac)%0A%20%20-%20Polkadot%20Developer%20Tools%0A%20%20%20%20-%20API%0A%20%20%20%20%20%20-%20%5BPolkadot%20Javascript%20API%5D(https%3A%2F%2Fpolkadot.js.org%2Fapi%2F)%0A%20%20%20%20-%20RPC%0A%20%20%20%20%20%20-%20%5BSubstrate%20Code%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fcore%2Frpc)%0A%20%20%20%20-%20CLI%0A%20%20%20%20%20%20-%20%5BCLI%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fcore%2Fcli)%0A%20%20%20%20-%20SDK%0A%20%20-%20Polkadot%20Chain%20Tools%0A%20%20%20%20-%20Governance%0A%20%20%20%20%20%20-%20%5BDemocracy%20-%20Github%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fsrml%2Fdemocracy%2Fsrc%2Flib.rs)%0A%20%20-%20Substrate%20Prototyping%0A%20%20%20%20-%20%5BBackground%20Material%5D(https%3A%2F%2Fmedium.com%2Fcoinmonks%2Fpolkadot-hello-world-3-poc-3-on-substrate-is-here-c45d100f72e3)%0A%20%20%20%20-%20Deploying%20a%20Substrate%20Chain%0A%20%20%20%20%20%20-%20%5BOverview%5D(https%3A%2F%2Fhackmd.io%2Fy-E9Q9jTRreni6z9EU0kkA%23)%0A%20%20%20%20%20%20-%20%5BLocally%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%23on-mac)%0A%20%20%20%20%20%20-%20%5BFrom%20Code%20Base%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%23on-mac)%0A%20%20%20%20%20%20-%20%5BCurrent%20Issue%20with%20BBQ%20Birch%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fissues%2F949)%20-%20%5Bcause%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fpull%2F900)%0A%20%20-%20Deploying%20Polkadot%0A%20%20%20%20-%20%5BOverview%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fpolkadot%234-hacking-on-polkadot)%0A%20%20-%20Deploying%20a%20simple%20contract%0A%20%20%20%20-%20%5BPreparing%20to%20build%20on%20Polkadot%5D(https%3A%2F%2Fmedium.com%2Fpolkadot-network%2Fpreparing-to-build-on-polkadot-349ff5002885)%0A%20%20%20%20-%20%5BWriting%20a%20WASM%20Contract%5D(https%3A%2F%2Fwiki.parity.io%2FWebAssembly-Home)%0A%20%20-%20Running%20a%20Transaction%0A%20%20%20%20-%20%5BBalance%20Transfer%20via%20API%5D(https%3A%2F%2Fpolkadot.js.org%2Fapi%2Fexamples%2Fpromise%2F07_transfer_dots%2F)%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./polkadot-KWq10a_f.js"),[]),path:"/research/chains/polkadot.html",type:"mdx",filePath:"research/chains/polkadot.mdx",content:"%23%20Polkadot%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0A_Note%3A%20The%20majority%20of%20this%20research%20was%20done%20in%20early%202019%20and%20has%20been%20updated%20recently%20with%20some%20notes%20on%20consenus%20and%20signing.%20In%202021%20John%20built%20and%20deployed%20a%20Parachain%20called%20%5BEave%20Network%5D(https%3A%2F%2Feave.network%2F)%20codebase%20is%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2FEaveNetwork).%20The%20parachain%20was%20deployed%20to%20the%20Rococo%20Testnet.%20John%20self%20funded%20this%20initiative%2C%20but%20failed%20to%20raise%20seed%20funding%2C%20due%20to%20this%20and%20other%20priorities%20this%20project%20was%20never%20fully%20developed%20and%20deployed%20on%20Kusama%20or%20Polkadot.%20Polkadot%20is%20one%20of%20John's%20favourite%20development%20frameworks%20and%20he%20is%20extremely%20grateful%20for%20Gavin%20Wood%20and%20Tomasz%20Drwi%C4%99ga%20who%20he%20was%20fortunate%20enough%20to%20collaborate%20with%20briefly%20on%20the%20Parity%20Ethereum%20Client%20in%20early%202016%20as%20he%20began%20his%20blockchain%20journey._%0A%0APolkadot%20substrate%20is%20a%20chain%20layer%20which%20allows%20pluggable%20consensus%2C%20definition%20of%20storage%20through%20the%20seperation%20of%20%22extrinsics%22%20and%20abstracts%20the%20runtime%20design%20allowing%20for%20blockchain%20providers%20to%20decide%20which%20runtime%20best%20suits%20there%20application%20needs.%20It%20also%20has%20been%20built%20with%20light%20client%20protocol%20in%20mind%20with%20a%20number%20of%20storage%20and%20pruning%20options%20giving%20the%20ability%20to%20clearly%20seperated%20different%20actors%20requirements%20for%20infrastructure%20(e.g.%20participants%20can%20run%20a%20light%20client%20on%20a%20mobile%20device%20and%20validators%20can%20run%20full%20nodes%20with%20gauranteed%20performance%20and%20uptime).%20On%20top%20of%20this%20Polkadot%20sits%20as%20a%20relay%20chain%20(built%20on%20Substrate)%20which%20allows%20private%20chains%20to%20share%20infrastucture%20such%20as%20validators.%0A%0A%23%23%20Consensus%20Mechanism%0A%0AFollowing%20is%20an%20excerpt%20from%20%5BPolkadot%20learn%20consensus%5D(https%3A%2F%2Fgithub.com%2Fw3f%2Fpolkadot-wiki%2Fblob%2Fmaster%2Fdocs%2Flearn%2Flearn-consensus.mdx)%0A%0A%3E%20**Nominated%20Proof%20of%20Stake**%0A%0A%3E%20In%20traditional%20PoS%20systems%2C%20block%20production%20participation%20is%20dependent%20on%20token%20holdings%20as%20opposed%20to%20computational%20power.%20While%20PoS%20developers%20usually%20have%20a%20proponent%20for%20equitable%20participation%20in%20a%20decentralized%20manner%2C%20most%20projects%20end%20up%20proposing%20some%20level%20of%20centralized%20operation%2C%20where%20the%20number%20of%20validators%20with%20full%20participation%20rights%20is%20limited.%20These%20validators%20are%20often%20seen%20to%20be%20the%20most%20wealthy%2C%20and%2C%20as%20a%20result%2C%20influence%20the%20PoS%20network%20as%20they%20are%20the%20most%20staked.%20Usually%2C%20the%20number%20of%20candidates%20to%20maintain%20the%20network%20with%20the%20necessary%20knowledge%20(and%20equipment)%20is%20limited%3B%20this%20can%20directly%20increase%20operational%20costs%20as%20well.%20Systems%20with%20a%20large%20number%20of%20validators%20tend%20to%20form%20pools%20to%20decrease%20the%20variance%20of%20their%20revenue%20and%20profit%20from%20economies%20of%20scale.%20These%20pools%20are%20often%20off-chain.%0A%0A%3E%20A%20way%20to%20alleviate%20this%20is%20to%20implement%20pool%20formation%20on-chain%20and%20allow%20token%20holders%20to%20vote%20with%20their%20stake%20for%20validators%20to%20represent%20them.%0A%0A%3E%20Polkadot%20uses%20NPoS%20(Nominated%20Proof-of-Stake)%20as%20its%20mechanism%20for%20selecting%20the%20validator%20set.%20It%20is%20designed%20with%20the%20roles%20of%20**validators**%20and%20**nominators**%2C%20to%20maximize%20chain%20security.%20Actors%20who%20are%20interested%20in%20maintaining%20the%20network%20can%20run%20a%20validator%20node.%0A%0A%3E%20Validators%20assume%20the%20role%20of%20producing%20new%20blocks%20in%20%5BBABE%5D(%23block-production-babe)%2C%20validating%20parachain%20blocks%2C%20and%20guaranteeing%20finality.%20Nominators%20can%20choose%20to%20back%20select%20validators%20with%20their%20stake.%20Nominators%20can%20approve%20candidates%20that%20they%20trust%20and%20back%20them%20with%20their%20tokens.%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BNPoS%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-consensus)%3A%20Polkadot%20Nominated%20Proof%20of%20Stake%20Documentation%0A-%20%5BPolkadot%20Consensus%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-consensus)%3A%20Polkadot's%20documentation%20on%20consenus.%0A%0A-%20%5BHybrid%20Consensus%20Slide%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fparitysubstrate%23%2F17)%0A-%20%5BGeneralized%20Consensus%20Pull%20Request%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fpull%2F883)%0A-%20%5BConsensus%20Code%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fcore%2Fconsensus)%0A-%20%5BRhododendron%20-%20Asynchronously%20safe%20BFT%20consensus%2C%20implementation%20in%20Rust%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Frhododendron)%0A-%20%5BRandom%20Number%20Generation%20CSPRNG%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FCryptographically_secure_pseudorandom_number_generator)%0A%20%20-%20%5BRust-Random%5D(https%3A%2F%2Fgithub.com%2Frust-random%2Frand)%0A-%20Block%20Finality%0A%20%20-%20%5BGRANDPA%20(GHOST-based%20Recursive%20Ancestor%20Deriving%20Prefix%20Agreement)%5D(https%3A%2F%2Fmedium.com%2Fpolkadot-network%2Fgrandpa-block-finality-in-polkadot-an-introduction-part-1-d08a24a021b5)%0A%20%20%20%20-%20%5BFinality%20GANDPA%20Code%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Ffinality-grandpa)%0A%20%20%20%20-%20%5BSubstrate%20using%20GRANDPA%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fcore%2Ffinality-grandpa%2Fsrc%2Flib.rs)%0A%20%20%20%20-%20%5BFull%20nodes%20should%20store%20a%20GRANDPA%20commit%20message%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fissues%2F1026)%0A%20%20%20%20-%20%5BDynamic%20Authority%20sets%20in%20GRANDPA%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fpull%2F1014)%0A%0A**Signing**%0A%0A-%20%5BSr25519%20Documentation%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-cryptography%23what-is-sr25519-and-where-did-it-come-from)%3A%20Polkadots%20sr25519%20Documentation.%20_The%20implementation%20of%20Schnorr%20signatures%20that%20is%20used%20in%20Polkadot%20and%20implements%20the%20Schnorrkel%20protocols%20over%20the%20Ristretto%20compression%20of%20the%20Curve25519%20is%20known%20as%20sr25519._%0A-%20%5BSubstrate%20sr25519%20codebase%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fprimitives%2Fapplication-crypto%2Fsrc%2Fsr25519.rs)%3A%20Polkadot's%20sr25519%20code%20(rust).%0A-%20%5BED25519%5D(https%3A%2F%2Fed25519.cr.yp.to%2F)%0A%0A**Staking**%0A%0A-%20%5BPolkadot%20Staking%20Documentation%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-staking)%3A%20Documentation%20on%20Polkadot%20including%20staking%20validators%20and%20Nominiated%20Pools%0A-%20%5BStaking%20Polkadot%20Application%5D(https%3A%2F%2Fstaking.polkadot.network%2F%3Futm_source%3Dpolkadot.network%23%2Fvalidators)%3A%20Polkadot%20Staking%20Application%20validator%20view.%0A%0A**Parachains**%0A%0A-%20%5BSubscan%20Explorer%5D(https%3A%2F%2Fpolkadot.subscan.io%2Fparachain)%3A%20Block%20Explorer%20built%20for%20Polkadot%20and%20supporting%20all%20Parachains%0A-%20%5Bparachains%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-parachains)%3A%20Polkadot%20documentation%20on%20Parachains%0A%0A**Additional**%0A%0A-%20Blockchain%20Explorers%0A%20%20-%20%5Bpolkadash.io%5D(http%3A%2F%2Fpolkadash.io%2F)%0A%20%20-%20%5Bpolkascan.io%5D(https%3A%2F%2Fpolkascan.io%2F)%0A%20%20%20%20-%20%5BBBQ%20Birch%20-%20Testnet%5D(https%3A%2F%2Fpolkascan.io%2Fn-pre%2Fbbqbirch%2F)%0A%20%20-%20%5Bpoc-2.plokadot.io%5D(https%3A%2F%2Fpoc-2.polkadot.io%2F%23%2Fexplorer)%0A%20%20-%20%5BSubstrate%20Explorer%5D(https%3A%2F%2Fpolkadot.js.org%2Fapps%2Fnext%2F%23%2Fexplorer)%0A%20%20-%20%5BTelemetry.polkadot.io%5D(https%3A%2F%2Ftelemetry.polkadot.io%2F%23%2FKrumme%2520Lanke)%0A-%20Substrate%20Overview%0A%20%20-%20%5BWhat%20is%20Substrate%5D(https%3A%2F%2Fwww.parity.io%2Fwhat-is-substrate%2F)%0A%20%20%20%20-%20Substrate%20%5BVideo%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DiUMZyL5kTwc)%20-%20%5BSlides%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fparitysubstrate%23%2F)%0A%20%20%20%20%20%20-%20%5BPotential%20Runtime%20Designs%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fparitysubstrate%23%2F29)%0A%20%20%20%20-%20%5BParity%20Substrate%20Wiki%5D(https%3A%2F%2Fwiki.parity.io%2FParity-Substrate)%0A%20%20-%20%5BWhat%20is%20PolKadot%5D(https%3A%2F%2Fpolkadot.network%2F%23whatisit)%0A%20%20%20%20-%20Polkadot%20Governance%20%5BVideo%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DVsZuDJMmVPY%26t%3D24735s%26list%3DPL6-IF807eaBG5sH-SQXlosqKRM2BZkrqw%26index%3D4)%20-%20%5BSlides%5D(https%3A%2F%2Fslides.com%2Fparitytech%2Fpolkadot-governance%23%2F)%0A%20%20%20%20-%20%5BPolkadot%20Whitepaper%5D(https%3A%2F%2Fpolkadot.network%2FPolkaDotPaper.pdf)%0A%20%20%20%20-%20Polkadot%20%5BVideo%5D(https%3A%2F%2Fyoutu.be%2FlIghiCmHz0U%3Flist%3DPLaZFi8ZkzUvKGyWTQ999rbHUXfDQv2LRF)%20%5BSlides%5D(https%3A%2F%2Fwww.slideshare.net%2Fgavofyork%2Fpolkadot-presentation)%0A%20%20%20%20-%20Substrate%20%3A%20A%20Rustic%20Vision%20of%20Polkadot%20by%20Gavin%20Wood%20%5BVideo%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D0IoUZdDi5Is%26feature%3Dyoutu.be)%20-%20%5BSlides%5D(https%3A%2F%2Fslides.com%2Fparitytech%2Fsubstrate_web3summit%23%2F1)%0A%20%20%20%20-%20%5BGavin%20Wood%20Podcast%20on%20Polkadot%2C%20Sharding%20and%20Substrate%5D(https%3A%2F%2Fwww.zeroknowledge.fm%2F46)%0A%20%20%20%20-%20%5BPolkadot%20runtime%20Environment%20%3A%20Alternative%20Implementation%20Grant%5D(https%3A%2F%2Fdocs.google.com%2Fdocument%2Fd%2F1iaIWmfV-uA7Uv1O4yt9G2t_86q18h_r7i5T1t-_EZ-s%2Fedit)%20-%20%5BGithub%5D(https%3A%2F%2Fgithub.com%2Fw3f%2FWeb3-collaboration%2Fissues%2F12)%0A%20%20-%20%5BToken%20Economics%20-%20DOTS%5D(https%3A%2F%2Fpolkadot.network%2Fmemorandum)%0A%20%20-%20%5BSecret%20Store%5D(https%3A%2F%2Fwiki.parity.io%2FSecret-Store.html)%20shard%20key%20generation%0A%20%20-%20%5BParity%20Ethereum%20IPFS%5D(https%3A%2F%2Fwiki.parity.io%2FIPFS)%0A%20%20-%20%5BCosmos%20vs%20Polkadot%5D(https%3A%2F%2Fmedium.com%2F%40davekaj%2Fblockchain-interoperability-cosmos-vs-polkadot-48097d54d2e2)%0A%20%20-%20%5BPolkadot%20POC%20Tutorials%5D(https%3A%2F%2Fmedium.com%2Fcoinmonks%2Fpolkadot-hello-world-3-poc-3-on-substrate-is-here-c45d100f72e3)%0A%20%20-%20%5BPolkadot%20on%20Reddit%5D(https%3A%2F%2Fwww.reddit.com%2Fr%2Fdot%2F)%0A%20%20-%20%5Bsubstrate.readme.io%5D(https%3A%2F%2Fsubstrate.readme.io%2F)%20-%20Substrate%20Developers%20Hub%0A%20%20-%20%5BSubstrate%20Workshop%20-%20Video%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Ftime_continue%3D278%26v%3D26ucTSSaqog)%0A%20%20-%20%5BSubstrate%20Web%203%20Summit%20-%20Slides%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fsubstrate_web3summit%23%2F)%0A%20%20-%20%5BBuilding%20on%20Substrate%5D(https%3A%2F%2Fhackmd.io%2Fp_v1M8WGRyy9PggYiKA_Xw%23)%0A%20%20-%20%5BPolkadot%202018%20Recap%5D(https%3A%2F%2Fmedium.com%2F%40gavofyork%2Fpolkadot-2018-recap-677dab3e995b)%0A-%20Relevant%20Code%20Links%0A%20%20-%20Key%20Repositories%0A%20%20%20%20-%20%5BParityTech%5D(https%3A%2F%2Fgithub.com%2Fparitytech)%0A%20%20%20%20%20%20-%20%5BSubstrate%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate)%0A%20%20%20%20%20%20%20%20-%20%5BGeneralize%20the%20Consensus%20Infrastructure%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fpull%2F883)%0A%20%20%20%20%20%20%20%20%20%20-%20%5BPluggable%20Consensus%20Import%20Queue%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fissues%2F784)%0A%20%20%20%20%20%20-%20%5BPolkadot%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fpolkadot)%0A%20%20%20%20%20%20-%20%5BWASMI%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fwasmi)%0A%20%20-%20%5BWeb%20Assembly%20(WASM)%5D(https%3A%2F%2Fwebassembly.org%2F)%0A%20%20%20%20-%20%5BGO%20-%20support%20for%20WASM%5D(https%3A%2F%2Fgithub.com%2Fgolang%2Fgo%2Fissues%2F18892)%0A%20%20%20%20-%20%5BGO%20WAGON%5D(https%3A%2F%2Fgithub.com%2Fgo-interpreter%2Fwagon)%0A%20%20%20%20-%20%5BGO%20Perlin%5D(https%3A%2F%2Fgithub.com%2Fperlin-network%2Flife)%0A%20%20%20%20-%20%5BRust%20Parity%20Tech%20WASMI%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fwasmi)%0A-%20Functional%20Breakdown%0A%20%20-%20Persistence%0A%20%20%20%20-%20Storage%0A%20%20%20%20%20%20-%20%5BRocksDB%5D(https%3A%2F%2Frocksdb.org%2F)%0A%20%20%20%20%20%20-%20%5BDB%20Code%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fcore%2Fclient%2Fdb)%0A%20%20%20%20%20%20-%20Data%20Overview%20-%20Light%20Client%0A%20%20%20%20%20%20%20%20-%20Block%20Structure%20%5BSlide%2017%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fparitysubstrate%23%2F17)%20to%20%5B28%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fparitysubstrate%23%2F28)%0A%20%20%20%20%20%20-%20%5Bdecl_storage%20-%20macro%5D(https%3A%2F%2Fwiki.parity.io%2Fdecl_storage)%0A%20%20%20%20%20%20-%20%5BGet%20and%20Set%20Storage%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fparitysubstrate%23%2F14)%0A%20%20%20%20-%20Light%20Client%0A%20%20%20%20%20%20-%20%5BDB%20Code%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fcore%2Fclient%2Fdb%2Fsrc%2Flight.rs)%0A%20%20%20%20%20%20-%20%5BLight%20Client%20Code%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fcore%2Fclient%2Fsrc%2Flight)%0A%20%20%20%20%20%20-%20%5BProtocol%20Light%20Client%20Storage%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fissues%2F131)%0A%20%20%20%20-%20Node%0A%20%20%20%20%20%20-%20%5BClient%20Code%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fcore%2Fclient%2Fsrc)%0A%20%20-%20Gossip%0A%20%20%20%20-%20%5Blibp2p%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fwiki%2Fwiki%2Flibp2p-Whitepaper)%0A%20%20%20%20-%20%5BSubstrate%20Code%20-%20network%20libp2p%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fcore%2Fnetwork-libp2p)%0A%20%20%20%20-%20%5BGet%20and%20Set%20Storage%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fparitysubstrate%23%2F14)%0A%20%20%20%20-%20Message%20Format%0A%20%20%20%20%20%20-%20%5BSubstrate%20Primitives%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fcore%2Fprimitives)%0A%20%20%20%20%20%20-%20%5BPolkadot%20Parachain%20Primitives%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fpolkadot%2Fblob%2Fmaster%2Fprimitives%2Fsrc%2Fparachain.rs)%0A%20%20%20%20%20%20-%20%5BPolkadot%20Collator%20-%20Logic%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fpolkadot%2Fblob%2Fmaster%2Fcollator%2Fsrc%2Flib.rs%23L17)%0A%20%20-%20%5BExecution%5D(http%3A%2F%2Fslides.com%2Fparitytech%2Fparitysubstrate%23%2F15)%0A%20%20%20%20-%20%5BRuntime%5D(https%3A%2F%2Fwiki.parity.io%2Fimpl_stubs)%0A%20%20%20%20-%20%5Bimpl-stubs%5D(https%3A%2F%2Fwiki.parity.io%2Fimpl_stubs)%0A%20%20%20%20-%20%5BSRML%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fsrml)%0A%20%20%20%20-%20%5BSRML%20Node%20Template%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate-node-template)%0A%20%20-%20Polkadot%20-%20Relay%20Chain%0A%20%20%20%20-%20%5BWhitepaper%20Overview%20-%20Participation%20in%20Polkadot%5D(https%3A%2F%2Fpolkadot.network%2FPolkaDotPaper.pdf)%20-%20Page%204%20gives%20an%20overview%20of%20the%20actors%0A%20%20%20%20-%20%5BCollator%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fv0.2%2Fpolkadot%2Fcollator%2Fsrc%2Flib.rs)%0A%20%20%20%20%20%20-%20A%20collator%20node%20lives%20on%20a%20distinct%20parachain%20and%20submits%20a%20proposal%20fora%20state%20transition%2C%20along%20with%20a%20proof%20for%20its%20validity%20(what%20we%20might%20call%20a%20witness%20or%20block%20data).%0A%20%20%20%20-%20%5BPokadot%20Parachain%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fv0.2%2Fpolkadot%2Fparachain%2Fsrc%2Flib.rs)%20-%20Defines%20primitive%20types%20for%20creating%20or%20validating%20a%20parachain.%0A%20%20%20%20-%20%5BStatement%20Table%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fv0.2%2Fpolkadot%2Fstatement-table%2Fsrc%2Flib.rs)%20-%20This%20stores%20messages%20other%20authorities%20issue%20about%20candidates.%0A%20%20%20%20-%20%5BNetwork%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fv0.2%2Fpolkadot%2Fnetwork)%20-%20Does%20the%20heavy%20lifting%20of%20routing%20the%20statements%20and%20gaining%20consensus%20across%20the%20relay%20chain%20(and%20associated%20parachains)%0A%20%20%20%20%20%20-%20%5BConsensus%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fv0.2%2Fpolkadot%2Fnetwork%2Fsrc%2Fconsensus.rs)%20-%20The%20%22consensus%22%20networking%20code%20built%20on%20top%20of%20the%20base%20network%20service.%20This%20fulfills%20the%20%60polkadot_consensus%3A%3ANetwork%60%20trait%2C%20providing%20a%20hook%20to%20be%20called%20each%20time%20consensus%20begins%20on%20a%20new%20chain%20head.%0A%20%20%20%20%20%20-%20%5BConsensus%20Pool%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fv0.2%2Fpolkadot%2Fnetwork%2Fsrc%2Fcollator_pool.rs)%20-%20Bridge%20between%20the%20network%20and%20consensus%20service%20for%20getting%20collations%20to%20it.%0A%20%20%20%20%20%20-%20%5BRouter%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fv0.2%2Fpolkadot%2Fnetwork%2Fsrc%2Frouter.rs)%20-%20Statement%20routing%20and%20consensus%20table%20router%20implementation.%0A%20%20%20%20-%20%5BFisherman%20(Misbehaviour%20check)%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fv0.2%2Fsubstrate%2Fmisbehavior-check%2Fsrc%2Flib.rs)%20-%20Utility%20for%20substrate-based%20runtimes%20that%20want%20to%20check%20misbehavior%20reports.%0A%20%20-%20Hashing%0A%20%20%20%20-%20%5BSubstrate%20Code%20-%20hashing.rs%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fcore%2Fprimitives%2Fsrc%2Fhashing.rs)%0A%20%20%20%20-%20%5BBlake2%5D(https%3A%2F%2Fblake2.net%2F)%20%5Buse%20in%20substrate%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fsearch%3Fq%3Dblake2%26unscoped_q%3Dblake2)%0A%20%20%20%20-%20%5BXXHASH%5D(https%3A%2F%2Fcyan4973.github.io%2FxxHash%2F)%20%5Buse%20in%20substrate%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fsearch%3Fq%3DTWOX%26unscoped_q%3DTWOX)%0A%20%20-%20Chaincode%20(See%20WASM%20above)%0A%20%20%20%20-%20%5BRust%20Parity%20Tech%20WASMI%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fwasmi)%0A%20%20%20%20-%20%5BUse%20in%20Substrate%20Code%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fsearch%3Fq%3Dwasmi%26unscoped_q%3Dwasmi)%0A%20%20-%20Deployment%0A%20%20%20%20-%20Substrate%0A%20%20%20%20%20%20-%20%5BLocally%20on%20Mac%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%23on-mac)%0A%20%20%20%20%20%20-%20%5BFrom%20Code%20Base%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%23on-mac)%0A%20%20-%20Polkadot%20Developer%20Tools%0A%20%20%20%20-%20API%0A%20%20%20%20%20%20-%20%5BPolkadot%20Javascript%20API%5D(https%3A%2F%2Fpolkadot.js.org%2Fapi%2F)%0A%20%20%20%20-%20RPC%0A%20%20%20%20%20%20-%20%5BSubstrate%20Code%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fcore%2Frpc)%0A%20%20%20%20-%20CLI%0A%20%20%20%20%20%20-%20%5BCLI%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fcore%2Fcli)%0A%20%20%20%20-%20SDK%0A%20%20-%20Polkadot%20Chain%20Tools%0A%20%20%20%20-%20Governance%0A%20%20%20%20%20%20-%20%5BDemocracy%20-%20Github%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fsrml%2Fdemocracy%2Fsrc%2Flib.rs)%0A%20%20-%20Substrate%20Prototyping%0A%20%20%20%20-%20%5BBackground%20Material%5D(https%3A%2F%2Fmedium.com%2Fcoinmonks%2Fpolkadot-hello-world-3-poc-3-on-substrate-is-here-c45d100f72e3)%0A%20%20%20%20-%20Deploying%20a%20Substrate%20Chain%0A%20%20%20%20%20%20-%20%5BOverview%5D(https%3A%2F%2Fhackmd.io%2Fy-E9Q9jTRreni6z9EU0kkA%23)%0A%20%20%20%20%20%20-%20%5BLocally%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%23on-mac)%0A%20%20%20%20%20%20-%20%5BFrom%20Code%20Base%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%23on-mac)%0A%20%20%20%20%20%20-%20%5BCurrent%20Issue%20with%20BBQ%20Birch%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fissues%2F949)%20-%20%5Bcause%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fpull%2F900)%0A%20%20-%20Deploying%20Polkadot%0A%20%20%20%20-%20%5BOverview%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fpolkadot%234-hacking-on-polkadot)%0A%20%20-%20Deploying%20a%20simple%20contract%0A%20%20%20%20-%20%5BPreparing%20to%20build%20on%20Polkadot%5D(https%3A%2F%2Fmedium.com%2Fpolkadot-network%2Fpreparing-to-build-on-polkadot-349ff5002885)%0A%20%20%20%20-%20%5BWriting%20a%20WASM%20Contract%5D(https%3A%2F%2Fwiki.parity.io%2FWebAssembly-Home)%0A%20%20-%20Running%20a%20Transaction%0A%20%20%20%20-%20%5BBalance%20Transfer%20via%20API%5D(https%3A%2F%2Fpolkadot.js.org%2Fapi%2Fexamples%2Fpromise%2F07_transfer_dots%2F)%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./polygon-BtIGeRoS.js"),[]),path:"/research/chains/polygon",type:"mdx",filePath:"research/chains/polygon.mdx",content:"%23%20Polygon%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0APolygon%20is%20representative%20because%20it%20uses%20ECDSA%20on%20secp256k1%20and%20a%20relatively%20fixed%20validator%20set.%0A%0AThe%20consensus%20protocol%20is%20based%20on%20Peppermint%3Csup%3E%5B8%5D(%23f8)%3C%2Fsup%3E%2C%20a%20modified%20version%20of%20Tendermint.%20Validators%20sign%20produced%20blocks%20using%20the%20ECDSA%20signature%20scheme%20on%20secp256k1%20curves%3Csup%3E%5B9%5D(%23f9)%3C%2Fsup%3E.%20Currently%2C%20the%20validator%20set%20size%20is%20fixed%20at%20100%20and%20only%20changes%20when%20a%20current%20validator%20resigns.%20This%20restriction%20will%20change%20when%20a%20new%20auction%20mechanism%20is%20implemented.%3Csup%3E%5B10%5D(%23f10)%3C%2Fsup%3E%0A%0A%23%23%20Consensus%20Mechanism%0A%0APolygon%20uses%20Peppermint%20(a%20modified%20version%20of%20tendermint)%20Consensus.%0A%0AFollowing%20is%20an%20excerpt%20from%20%5BPolygon%20Architecture%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Fmatic-docs%2Fblob%2Fmaster%2Fdocs%2Fpos%2Fpolygon-architecture.mdx).%0A%0A**Polygon%20Architecture**%0A%0A%3E%20Heimdall%20is%20the%20proof%20of%20stake%20validation%20layer%20that%20handles%20the%20aggregation%20of%20blocks%20produced%20by%20Bor%20into%20a%20Merkle%20tree%20and%20publishes%20the%20Merkle%20root%20periodically%20to%20the%20root%20chain.%20The%20periodic%20publishing%20of%20snapshots%20of%20the%20Bor%20sidechain%20is%20called%20checkpoints.%0A%3E%0A%3E%201.%20Validates%20all%20the%20blocks%20since%20the%20last%20checkpoint.%0A%3E%202.%20Creates%20a%20Merkle%20tree%20of%20the%20block%20hashes.%0A%3E%203.%20Publishes%20the%20Merkle%20root%20hash%20to%20the%20Ethereum%20mainnet.%0A%3E%0A%3E%20Checkpoints%20are%20important%20for%20two%20reasons%3A%0A%3E%0A%3E%201.%20Providing%20finality%20on%20the%20root%20chain.%0A%3E%202.%20Providing%20proof%20of%20burn%20in%20withdrawal%20of%20assets.%0A%3E%0A%3E%20An%20overview%20of%20the%20process%3A%0A%3E%0A%3E%20-%20A%20subset%20of%20active%20validators%20from%20the%20pool%20is%20selected%20to%20act%20as%20block%20producers%20for%20a%20span.%20These%20block%20producers%20are%20responsible%20for%20creating%20blocks%20and%20broadcasting%20the%20created%20blocks%20on%20the%20network.%0A%3E%20-%20A%20checkpoint%20includes%20the%20Merkle%20root%20hash%20of%20all%20blocks%20created%20during%20any%20given%20interval.%20All%20nodes%20validate%20the%20Merkle%20root%20hash%20and%20attach%20their%20signature%20to%20it.%0A%3E%20-%20A%20selected%20proposer%20from%20the%20validator%20set%20is%20responsible%20for%20collecting%20all%20signatures%20for%20a%20particular%20checkpoint%20and%20committing%20the%20checkpoint%20on%20the%20Ethereum%20mainnet.%0A%3E%20-%20The%20responsibility%20of%20creating%20blocks%20and%20proposing%20checkpoints%20is%20variably%20dependent%20on%20a%20validator%E2%80%99s%20stake%20ratio%20in%20the%20overall%20pool.%0A%3E%0A%3E%20More%20details%20on%20Heimdall%20are%20available%20on%20the%20Heimdall%20architecture%20guide.%0A%0AThis%20image%20from%20%5BBor%20Architecture%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fbor%2F)%20helps%20give%20a%20better%20understanding%20of%20how%20Ethereum%2C%20Heimdall%20and%20Bor%20work%20together.%0A%0A!%5BMatic%20Structure%5D(%2Fimages%2Fresearch%2Fmatic_structure.png%20%22Matic%20Structure%22)%0A%0A%23%23%20Signing%20Mechanism%0A%0AFollowing%20is%20an%20excerpt%20from%20and%20%5BPeppermint.md%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Fmatic-docs%2Fblob%2Fmaster%2Fdocs%2Fpos%2Fpeppermint.mdx).%0A%0A%3E%20Peppermint%20is%20a%20modified%20Tendermint.%20It%20is%20changed%20to%20make%20it%20compatible%20with%20Ethereum%20addresses%20and%20verifiable%20on%20Ethereum%20chain.%0A%3E%0A%3E%20Overview%0A%3E%0A%3E%201.%20Changes%20to%20signature%20scheme%0A%3E%202.%20Changes%20to%20%60vote%60%20to%20make%20it%20verifiable%20on%20Ethereum%20smart%20contract%0A%3E%203.%20Changes%20to%20%60vote%60%20encoding%20scheme%0A%3E%0A%3E%20Peppermint%20uses%20%60secp256k1%60%20signature%20scheme%20to%20verify%20Tendermint%20votes%20on%20solidity%20smart%20contract.%0A%3E%0A%3E%20Source%3A%20%5Bhttps%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Fcrypto%2Fsecp256k1%2Fsecp256k1_nocgo.go%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Fcrypto%2Fsecp256k1%2Fsecp256k1_nocgo.go)%0A%3E%0A%3E%20It%20adds%20%60Data%60%20field%20into%20%60Vote%60%20and%20%60Proposal%60%20struct%20to%20get%20%60hash%60%20for%20transactions%20in%20the%20block.%20On%20smart%20contract%2C%20it%20checks%20if%20%60Data%60%20matches%20with%20checkpoint%20data%20hash%20and%20majority%20(%E2%85%94%2B1)%20of%20validator%20signatures.%20The%20idea%20is%20to%20verify%20if%20majority%20of%20the%20validator%20set%20agrees%20on%20transaction%20in%20the%20contract.%0A%3E%0A%3E%20Peppermint%20uses%20RLP%20to%20get%20%60Vote%60%20bytes%20instead%20of%20Amino%20encoding.%20Here%20%60Data%60%20is%20%60Txs.Hash()%60%20for%20the%20block.%0A%3E%0A%3E%20Source%3A%20%5Bhttps%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Ftypes%2Fcanonical.go%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Ftypes%2Fcanonical.go)%0A%0A%3E%20%60%60%60go%0A%3E%20%2F%2F%20%5Bpeppermint%5D%20create%20RLP%20vote%20to%20decode%20in%20contract%0A%3E%20type%20CanonicalRLPVote%20struct%20%7B%0A%3E%20%20ChainID%20string%0A%3E%20%20Type%20%20%20%20byte%0A%3E%20%20Height%20%20uint%0A%3E%20%20Round%20%20%20uint%0A%3E%20%20Data%20%20%20%20%5B%5Dbyte%0A%3E%20%7D%0A%3E%20%60%60%60%0A%3E%0A%3E%20And%20using%20RLP%20encoding%20lib%20to%20get%20byte%20data%20for%20signature%20on%20Vote.%0A%3E%0A%3E%20Source%3A%20%5Bhttps%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Ftypes%2Fvote.go%23L75-L82%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Ftypes%2Fvote.go%23L75-L82)%0A%0A%3E%20%60%60%60go%0A%3E%20func%20(vote%20*Vote)%20SignBytes(chainID%20string)%20%5B%5Dbyte%20%7B%0A%3E%20%20%2F%2F%20%5Bpeppermint%5D%20converted%20from%20amino%20to%20rlp%0A%3E%20%20bz%2C%20err%20%3A%3D%20rlp.EncodeToBytes(CanonicalizeVote(chainID%2C%20vote))%0A%3E%20%20if%20err%20!%3D%20nil%20%7B%0A%3E%20%20%20panic(err)%0A%3E%20%20%7D%0A%3E%20%20return%20bz%0A%3E%20%7D%0A%3E%20%60%60%60%0A%3E%0A%3E%20Complete%20Source%3A%20%5Bhttps%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint)%0A%0A**Note%3A%20As%20of%20March%2012th%2C%202023%20the%20pepperming%20votes%20function%20now%20uses%20amino**%0A%0A%5Btendermint%2Ftypes%2Fvote.go%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Ftypes%2Fvote.go)%0A%0A%60%60%60go%0Afunc%20(vote%20*Vote)%20SignBytes(chainID%20string)%20%5B%5Dbyte%20%7B%0A%20%2F%2F%20%5Bpeppermint%5D%20converted%20from%20amino%20to%20rlp%0A%20bz%2C%20err%20%3A%3D%20cdc.MarshalBinaryLengthPrefixed(CanonicalizeVote(chainID%2C%20vote))%0A%20if%20err%20!%3D%20nil%20%7B%0A%20%20panic(err)%0A%20%7D%0A%20return%20bz%0A%7D%0A%60%60%60%0A%0A%5Btendermint%2Fconsensus%2Fcodec.go%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Fconsensus%2Fcodec.go)%0A%0A%60%60%60go%0Apackage%20consensus%0A%0Aimport%20(%0A%20amino%20%22github.com%2Ftendermint%2Fgo-amino%22%0A%20%22github.com%2Ftendermint%2Ftendermint%2Ftypes%22%0A)%0A%0Avar%20cdc%20%3D%20amino.NewCodec()%0A%0Afunc%20init()%20%7B%0A%20RegisterConsensusMessages(cdc)%0A%20RegisterWALMessages(cdc)%0A%20types.RegisterBlockAmino(cdc)%0A%7D%0A%0A%60%60%60%0A%0A%5Btendermint%2Fp2p%2Fcodec.go%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Fp2p%2Fcodec.go)%0A%0A%60%60%60go%0Apackage%20p2p%0A%0Aimport%20(%0A%20amino%20%22github.com%2Ftendermint%2Fgo-amino%22%0A%20cryptoAmino%20%22github.com%2Ftendermint%2Ftendermint%2Fcrypto%2Fencoding%2Famino%22%0A)%0A%0Avar%20cdc%20%3D%20amino.NewCodec()%0A%0Afunc%20init()%20%7B%0A%20cryptoAmino.RegisterAmino(cdc)%0A%7D%0A%60%60%60%0A%0A%23%23%20Code%20Review%0A%0APolygon's%20%5Bpeppermint%20fork%20of%20tendermint%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint)%20was%20forked%20from%20%5Btendermint%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint)%20and%20as%20such%20the%20codebase%20has%20similar%20functions%20to%20those%20documented%20in%20%5Bcosmos%20code%20review%5D(.%2Fcosmos%23code-review).%0A%0AThe%20major%20changes%20are%20to%20the%20consensus%20and%20signing%20(see%20above)%0A%0APolygon's%20%5Bbor%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Fbor)%20is%20cloned%20from%20%5Bgeth%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum)%20and%20as%20such%20the%20codebase%20has%20similar%20functions%20to%20those%20documented%20in%20%5Bethereum%201-0%20code%20review%5D(.%2Fethereum-1-0%23code-review).%0A%0A%23%23%23%20Signing%0A%0A-%20%5BPeppermint%20secp256k1%20Codebase%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Ftree%2Fpeppermint%2Fcrypto%2Fsecp256k1)%3A%20Peppermint%20ECDSA%20Secp256k1%20curve%20codebase%20(go).%0A%20%20-%20%5BPeppermint%20secp256k1%20signing%20code%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Fcrypto%2Fsecp256k1%2Fsecp256k1_nocgo.go%23L21)%3A%20Peppermint%20sign%20function%20(go).%20_Sign%20creates%20an%20ECDSA%20signature%20on%20curve%20Secp256k1%2C%20using%20SHA256%20on%20the%20msg.%20The%20returned%20signature%20will%20be%20of%20the%20form%20R%20%60%7C%7C%60%20S%20(in%20lower-S%20form)._%0A%0A%23%23%23%20Consensus%0A%0A-%20%5BPeppermint%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint)%0A%20%20-%20%5Bstate.go%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Fconsensus%2Fstate.go%23L886)%3A%20Modified%20to%20support%20%5Bheimdall%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fheimdall%2Foverview).%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BThe%20latest%20gossip%20on%20BFT%20consensus%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F1807.04938.pdf)%3A%20The%20paper%20presents%20Tendermint%2C%20a%20new%20protocol%20for%20ordering%20events%20in%20a%20distributed%20network%20under%20adversarial%20conditions.%0A-%20%5BHeimdall%20Documentation%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fheimdall%2Foverview%2F)%3A%20Heimdall%20consensus%20engine%20uses%20the%20Cosmos-SDK%20and%20a%20forked%20version%20of%20Tendermint%2C%20called%20Peppermint.%0A-%20%5BPeppermint%20Documentation%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fpeppermint%2F)%3A%20Peppermint%20is%20a%20modified%20Tendermint.%20It%20is%20changed%20to%20make%20it%20compatible%20with%20Ethereum%20addresses%20and%20verifiable%20on%20Ethereum%20chain.%0A-%20%5BPeppermint%20Codebase%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Ftree%2Fpeppermint)%3A%20Polygon%20fork%20of%20tendermint%20codebase%20(go).%0A%20%20-%20%5BPeppermint%20Consensus%20Code%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Fconsensus%2Fstate.go%23L70)%3A%20Peppermint%20Consensus%20(go).%20_ConsensusState%20handles%20execution%20of%20the%20consensus%20algorithm.%20It%20processes%20votes%20and%20proposals%2C%20and%20upon%20reaching%20agreement%2C%20commits%20blocks%20to%20the%20chain%20and%20executes%20them%20against%20the%20application.%20The%20internal%20state%20machine%20receives%20input%20from%20peers%2C%20the%20internal%20validator%2C%20and%20from%20a%20timer._%0A%20%20-%20%5BPeppermint%20Consenus%20Configuration%20Code%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fmaster%2Fconfig%2Fconfig.go%23L443)%3A%20Peppermint%20Consensus%20Configuration(go).%20_defines%20the%20configuration%20for%20the%20Tendermint%20consensus%20service%2C%20including%20timeouts%20and%20details%20about%20the%20Write%20Ahead%20Logs%20(WAL)%20and%20the%20block%20structure._%0A%20%20-%20%5BPeppermint%20Validator%20Set%20Code%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Ftypes%2Fvalidator_set.go)%3A%20Peppermint%20Validators%20(go).%20*ValidatorSet%20represent%20a%20set%20of*Validator%20at%20a%20given%20height.%5C*%0A-%20%5BBor%20Consensus%20Documentation%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fbor%2Fconsensus%2F)%3A%20Bor%20consensus%20is%20inspired%20by%20Clique%20consensus%3A%20https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-225.%0A-%20%5BEIP-225%3A%20Clique%20proof-of-authority%20consensus%20protocol%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-225)%3A%20Clique%20is%20a%20proof-of-authority%20consensus%20protocol.%20It%20shadows%20the%20design%20of%20Ethereum%20mainnet%2C%20so%20it%20can%20be%20added%20to%20any%20client%20with%20minimal%20effort.%0A-%20%5BHeimdall%20and%20Bor%20Article%5D(https%3A%2F%2Fpolygon.technology%2Fblog%2Fheimdall-and-bor)%3A%20Article%20explaining%20Polygon(Matic)%20hybrid%20Plasma%20%2B%20Proof-of-Stake%20(PoS)%20platform.%0A%0A**Staking**%0A%0A-%20%5BHemidall%20Staking%20Documentation%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fheimdall%2Fmodules%2Fstaking%2F)%0A-%20%5BPolygon%20Staking%20App%5D(https%3A%2F%2Fstaking.polygon.technology%2F)%3A%20Polygon%20Staking%20Application%20listing%20100%20validators%0A%0A**Additional**%0A%0A%3Ca%20name%3D%22f8%22%3E%5B8%5D%3C%2Fa%3E%0A%3Ca%20name%3D%22f9%22%3E%5B9%5D%3C%2Fa%3E%20See%20notes%20and%20links%20to%20code%20in%20%5BPeppermint%0Asummary%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fpeppermint%2F)%0A%0A%3Ca%20name%3D%22f10%22%3E%5B10%5D%3C%2Fa%3E%20See%20Polygon%20validator%0A%5Bdocumentations%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fmaintain%2Fvalidate%2Fvalidator-responsibilities%2F)%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./polygon-BtIGeRoS.js"),[]),path:"/research/chains/polygon.html",type:"mdx",filePath:"research/chains/polygon.mdx",content:"%23%20Polygon%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0APolygon%20is%20representative%20because%20it%20uses%20ECDSA%20on%20secp256k1%20and%20a%20relatively%20fixed%20validator%20set.%0A%0AThe%20consensus%20protocol%20is%20based%20on%20Peppermint%3Csup%3E%5B8%5D(%23f8)%3C%2Fsup%3E%2C%20a%20modified%20version%20of%20Tendermint.%20Validators%20sign%20produced%20blocks%20using%20the%20ECDSA%20signature%20scheme%20on%20secp256k1%20curves%3Csup%3E%5B9%5D(%23f9)%3C%2Fsup%3E.%20Currently%2C%20the%20validator%20set%20size%20is%20fixed%20at%20100%20and%20only%20changes%20when%20a%20current%20validator%20resigns.%20This%20restriction%20will%20change%20when%20a%20new%20auction%20mechanism%20is%20implemented.%3Csup%3E%5B10%5D(%23f10)%3C%2Fsup%3E%0A%0A%23%23%20Consensus%20Mechanism%0A%0APolygon%20uses%20Peppermint%20(a%20modified%20version%20of%20tendermint)%20Consensus.%0A%0AFollowing%20is%20an%20excerpt%20from%20%5BPolygon%20Architecture%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Fmatic-docs%2Fblob%2Fmaster%2Fdocs%2Fpos%2Fpolygon-architecture.mdx).%0A%0A**Polygon%20Architecture**%0A%0A%3E%20Heimdall%20is%20the%20proof%20of%20stake%20validation%20layer%20that%20handles%20the%20aggregation%20of%20blocks%20produced%20by%20Bor%20into%20a%20Merkle%20tree%20and%20publishes%20the%20Merkle%20root%20periodically%20to%20the%20root%20chain.%20The%20periodic%20publishing%20of%20snapshots%20of%20the%20Bor%20sidechain%20is%20called%20checkpoints.%0A%3E%0A%3E%201.%20Validates%20all%20the%20blocks%20since%20the%20last%20checkpoint.%0A%3E%202.%20Creates%20a%20Merkle%20tree%20of%20the%20block%20hashes.%0A%3E%203.%20Publishes%20the%20Merkle%20root%20hash%20to%20the%20Ethereum%20mainnet.%0A%3E%0A%3E%20Checkpoints%20are%20important%20for%20two%20reasons%3A%0A%3E%0A%3E%201.%20Providing%20finality%20on%20the%20root%20chain.%0A%3E%202.%20Providing%20proof%20of%20burn%20in%20withdrawal%20of%20assets.%0A%3E%0A%3E%20An%20overview%20of%20the%20process%3A%0A%3E%0A%3E%20-%20A%20subset%20of%20active%20validators%20from%20the%20pool%20is%20selected%20to%20act%20as%20block%20producers%20for%20a%20span.%20These%20block%20producers%20are%20responsible%20for%20creating%20blocks%20and%20broadcasting%20the%20created%20blocks%20on%20the%20network.%0A%3E%20-%20A%20checkpoint%20includes%20the%20Merkle%20root%20hash%20of%20all%20blocks%20created%20during%20any%20given%20interval.%20All%20nodes%20validate%20the%20Merkle%20root%20hash%20and%20attach%20their%20signature%20to%20it.%0A%3E%20-%20A%20selected%20proposer%20from%20the%20validator%20set%20is%20responsible%20for%20collecting%20all%20signatures%20for%20a%20particular%20checkpoint%20and%20committing%20the%20checkpoint%20on%20the%20Ethereum%20mainnet.%0A%3E%20-%20The%20responsibility%20of%20creating%20blocks%20and%20proposing%20checkpoints%20is%20variably%20dependent%20on%20a%20validator%E2%80%99s%20stake%20ratio%20in%20the%20overall%20pool.%0A%3E%0A%3E%20More%20details%20on%20Heimdall%20are%20available%20on%20the%20Heimdall%20architecture%20guide.%0A%0AThis%20image%20from%20%5BBor%20Architecture%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fbor%2F)%20helps%20give%20a%20better%20understanding%20of%20how%20Ethereum%2C%20Heimdall%20and%20Bor%20work%20together.%0A%0A!%5BMatic%20Structure%5D(%2Fimages%2Fresearch%2Fmatic_structure.png%20%22Matic%20Structure%22)%0A%0A%23%23%20Signing%20Mechanism%0A%0AFollowing%20is%20an%20excerpt%20from%20and%20%5BPeppermint.md%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Fmatic-docs%2Fblob%2Fmaster%2Fdocs%2Fpos%2Fpeppermint.mdx).%0A%0A%3E%20Peppermint%20is%20a%20modified%20Tendermint.%20It%20is%20changed%20to%20make%20it%20compatible%20with%20Ethereum%20addresses%20and%20verifiable%20on%20Ethereum%20chain.%0A%3E%0A%3E%20Overview%0A%3E%0A%3E%201.%20Changes%20to%20signature%20scheme%0A%3E%202.%20Changes%20to%20%60vote%60%20to%20make%20it%20verifiable%20on%20Ethereum%20smart%20contract%0A%3E%203.%20Changes%20to%20%60vote%60%20encoding%20scheme%0A%3E%0A%3E%20Peppermint%20uses%20%60secp256k1%60%20signature%20scheme%20to%20verify%20Tendermint%20votes%20on%20solidity%20smart%20contract.%0A%3E%0A%3E%20Source%3A%20%5Bhttps%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Fcrypto%2Fsecp256k1%2Fsecp256k1_nocgo.go%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Fcrypto%2Fsecp256k1%2Fsecp256k1_nocgo.go)%0A%3E%0A%3E%20It%20adds%20%60Data%60%20field%20into%20%60Vote%60%20and%20%60Proposal%60%20struct%20to%20get%20%60hash%60%20for%20transactions%20in%20the%20block.%20On%20smart%20contract%2C%20it%20checks%20if%20%60Data%60%20matches%20with%20checkpoint%20data%20hash%20and%20majority%20(%E2%85%94%2B1)%20of%20validator%20signatures.%20The%20idea%20is%20to%20verify%20if%20majority%20of%20the%20validator%20set%20agrees%20on%20transaction%20in%20the%20contract.%0A%3E%0A%3E%20Peppermint%20uses%20RLP%20to%20get%20%60Vote%60%20bytes%20instead%20of%20Amino%20encoding.%20Here%20%60Data%60%20is%20%60Txs.Hash()%60%20for%20the%20block.%0A%3E%0A%3E%20Source%3A%20%5Bhttps%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Ftypes%2Fcanonical.go%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Ftypes%2Fcanonical.go)%0A%0A%3E%20%60%60%60go%0A%3E%20%2F%2F%20%5Bpeppermint%5D%20create%20RLP%20vote%20to%20decode%20in%20contract%0A%3E%20type%20CanonicalRLPVote%20struct%20%7B%0A%3E%20%20ChainID%20string%0A%3E%20%20Type%20%20%20%20byte%0A%3E%20%20Height%20%20uint%0A%3E%20%20Round%20%20%20uint%0A%3E%20%20Data%20%20%20%20%5B%5Dbyte%0A%3E%20%7D%0A%3E%20%60%60%60%0A%3E%0A%3E%20And%20using%20RLP%20encoding%20lib%20to%20get%20byte%20data%20for%20signature%20on%20Vote.%0A%3E%0A%3E%20Source%3A%20%5Bhttps%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Ftypes%2Fvote.go%23L75-L82%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Ftypes%2Fvote.go%23L75-L82)%0A%0A%3E%20%60%60%60go%0A%3E%20func%20(vote%20*Vote)%20SignBytes(chainID%20string)%20%5B%5Dbyte%20%7B%0A%3E%20%20%2F%2F%20%5Bpeppermint%5D%20converted%20from%20amino%20to%20rlp%0A%3E%20%20bz%2C%20err%20%3A%3D%20rlp.EncodeToBytes(CanonicalizeVote(chainID%2C%20vote))%0A%3E%20%20if%20err%20!%3D%20nil%20%7B%0A%3E%20%20%20panic(err)%0A%3E%20%20%7D%0A%3E%20%20return%20bz%0A%3E%20%7D%0A%3E%20%60%60%60%0A%3E%0A%3E%20Complete%20Source%3A%20%5Bhttps%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint)%0A%0A**Note%3A%20As%20of%20March%2012th%2C%202023%20the%20pepperming%20votes%20function%20now%20uses%20amino**%0A%0A%5Btendermint%2Ftypes%2Fvote.go%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Ftypes%2Fvote.go)%0A%0A%60%60%60go%0Afunc%20(vote%20*Vote)%20SignBytes(chainID%20string)%20%5B%5Dbyte%20%7B%0A%20%2F%2F%20%5Bpeppermint%5D%20converted%20from%20amino%20to%20rlp%0A%20bz%2C%20err%20%3A%3D%20cdc.MarshalBinaryLengthPrefixed(CanonicalizeVote(chainID%2C%20vote))%0A%20if%20err%20!%3D%20nil%20%7B%0A%20%20panic(err)%0A%20%7D%0A%20return%20bz%0A%7D%0A%60%60%60%0A%0A%5Btendermint%2Fconsensus%2Fcodec.go%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Fconsensus%2Fcodec.go)%0A%0A%60%60%60go%0Apackage%20consensus%0A%0Aimport%20(%0A%20amino%20%22github.com%2Ftendermint%2Fgo-amino%22%0A%20%22github.com%2Ftendermint%2Ftendermint%2Ftypes%22%0A)%0A%0Avar%20cdc%20%3D%20amino.NewCodec()%0A%0Afunc%20init()%20%7B%0A%20RegisterConsensusMessages(cdc)%0A%20RegisterWALMessages(cdc)%0A%20types.RegisterBlockAmino(cdc)%0A%7D%0A%0A%60%60%60%0A%0A%5Btendermint%2Fp2p%2Fcodec.go%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Fp2p%2Fcodec.go)%0A%0A%60%60%60go%0Apackage%20p2p%0A%0Aimport%20(%0A%20amino%20%22github.com%2Ftendermint%2Fgo-amino%22%0A%20cryptoAmino%20%22github.com%2Ftendermint%2Ftendermint%2Fcrypto%2Fencoding%2Famino%22%0A)%0A%0Avar%20cdc%20%3D%20amino.NewCodec()%0A%0Afunc%20init()%20%7B%0A%20cryptoAmino.RegisterAmino(cdc)%0A%7D%0A%60%60%60%0A%0A%23%23%20Code%20Review%0A%0APolygon's%20%5Bpeppermint%20fork%20of%20tendermint%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint)%20was%20forked%20from%20%5Btendermint%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint)%20and%20as%20such%20the%20codebase%20has%20similar%20functions%20to%20those%20documented%20in%20%5Bcosmos%20code%20review%5D(.%2Fcosmos%23code-review).%0A%0AThe%20major%20changes%20are%20to%20the%20consensus%20and%20signing%20(see%20above)%0A%0APolygon's%20%5Bbor%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Fbor)%20is%20cloned%20from%20%5Bgeth%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum)%20and%20as%20such%20the%20codebase%20has%20similar%20functions%20to%20those%20documented%20in%20%5Bethereum%201-0%20code%20review%5D(.%2Fethereum-1-0%23code-review).%0A%0A%23%23%23%20Signing%0A%0A-%20%5BPeppermint%20secp256k1%20Codebase%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Ftree%2Fpeppermint%2Fcrypto%2Fsecp256k1)%3A%20Peppermint%20ECDSA%20Secp256k1%20curve%20codebase%20(go).%0A%20%20-%20%5BPeppermint%20secp256k1%20signing%20code%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Fcrypto%2Fsecp256k1%2Fsecp256k1_nocgo.go%23L21)%3A%20Peppermint%20sign%20function%20(go).%20_Sign%20creates%20an%20ECDSA%20signature%20on%20curve%20Secp256k1%2C%20using%20SHA256%20on%20the%20msg.%20The%20returned%20signature%20will%20be%20of%20the%20form%20R%20%60%7C%7C%60%20S%20(in%20lower-S%20form)._%0A%0A%23%23%23%20Consensus%0A%0A-%20%5BPeppermint%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint)%0A%20%20-%20%5Bstate.go%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Fconsensus%2Fstate.go%23L886)%3A%20Modified%20to%20support%20%5Bheimdall%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fheimdall%2Foverview).%0A%0A%23%23%20References%0A%0A**Consensus**%0A%0A-%20%5BThe%20latest%20gossip%20on%20BFT%20consensus%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F1807.04938.pdf)%3A%20The%20paper%20presents%20Tendermint%2C%20a%20new%20protocol%20for%20ordering%20events%20in%20a%20distributed%20network%20under%20adversarial%20conditions.%0A-%20%5BHeimdall%20Documentation%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fheimdall%2Foverview%2F)%3A%20Heimdall%20consensus%20engine%20uses%20the%20Cosmos-SDK%20and%20a%20forked%20version%20of%20Tendermint%2C%20called%20Peppermint.%0A-%20%5BPeppermint%20Documentation%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fpeppermint%2F)%3A%20Peppermint%20is%20a%20modified%20Tendermint.%20It%20is%20changed%20to%20make%20it%20compatible%20with%20Ethereum%20addresses%20and%20verifiable%20on%20Ethereum%20chain.%0A-%20%5BPeppermint%20Codebase%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Ftree%2Fpeppermint)%3A%20Polygon%20fork%20of%20tendermint%20codebase%20(go).%0A%20%20-%20%5BPeppermint%20Consensus%20Code%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Fconsensus%2Fstate.go%23L70)%3A%20Peppermint%20Consensus%20(go).%20_ConsensusState%20handles%20execution%20of%20the%20consensus%20algorithm.%20It%20processes%20votes%20and%20proposals%2C%20and%20upon%20reaching%20agreement%2C%20commits%20blocks%20to%20the%20chain%20and%20executes%20them%20against%20the%20application.%20The%20internal%20state%20machine%20receives%20input%20from%20peers%2C%20the%20internal%20validator%2C%20and%20from%20a%20timer._%0A%20%20-%20%5BPeppermint%20Consenus%20Configuration%20Code%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fmaster%2Fconfig%2Fconfig.go%23L443)%3A%20Peppermint%20Consensus%20Configuration(go).%20_defines%20the%20configuration%20for%20the%20Tendermint%20consensus%20service%2C%20including%20timeouts%20and%20details%20about%20the%20Write%20Ahead%20Logs%20(WAL)%20and%20the%20block%20structure._%0A%20%20-%20%5BPeppermint%20Validator%20Set%20Code%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Fblob%2Fpeppermint%2Ftypes%2Fvalidator_set.go)%3A%20Peppermint%20Validators%20(go).%20*ValidatorSet%20represent%20a%20set%20of*Validator%20at%20a%20given%20height.%5C*%0A-%20%5BBor%20Consensus%20Documentation%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fbor%2Fconsensus%2F)%3A%20Bor%20consensus%20is%20inspired%20by%20Clique%20consensus%3A%20https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-225.%0A-%20%5BEIP-225%3A%20Clique%20proof-of-authority%20consensus%20protocol%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-225)%3A%20Clique%20is%20a%20proof-of-authority%20consensus%20protocol.%20It%20shadows%20the%20design%20of%20Ethereum%20mainnet%2C%20so%20it%20can%20be%20added%20to%20any%20client%20with%20minimal%20effort.%0A-%20%5BHeimdall%20and%20Bor%20Article%5D(https%3A%2F%2Fpolygon.technology%2Fblog%2Fheimdall-and-bor)%3A%20Article%20explaining%20Polygon(Matic)%20hybrid%20Plasma%20%2B%20Proof-of-Stake%20(PoS)%20platform.%0A%0A**Staking**%0A%0A-%20%5BHemidall%20Staking%20Documentation%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fheimdall%2Fmodules%2Fstaking%2F)%0A-%20%5BPolygon%20Staking%20App%5D(https%3A%2F%2Fstaking.polygon.technology%2F)%3A%20Polygon%20Staking%20Application%20listing%20100%20validators%0A%0A**Additional**%0A%0A%3Ca%20name%3D%22f8%22%3E%5B8%5D%3C%2Fa%3E%0A%3Ca%20name%3D%22f9%22%3E%5B9%5D%3C%2Fa%3E%20See%20notes%20and%20links%20to%20code%20in%20%5BPeppermint%0Asummary%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fpeppermint%2F)%0A%0A%3Ca%20name%3D%22f10%22%3E%5B10%5D%3C%2Fa%3E%20See%20Polygon%20validator%0A%5Bdocumentations%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fmaintain%2Fvalidate%2Fvalidator-responsibilities%2F)%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./Horizon-Cpudsyev.js"),[]),path:"/research/code/Horizon",type:"mdx",filePath:"research/code/Horizon.mdx",content:"%23%20Horizon%20Bridge%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AThis%20document%20reviews%20the%20%5Bhorizon%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2)%20current%20implementation%2C%20development%20tasks%20that%20need%20to%20be%20done%20to%20support%20POW%20and%20offers%20some%20thoughts%20on%20next%20steps%20to%20support%20Ethereum%202.0%20and%20other%20chains.%0A%0AFurther%20thoughts%20on%20ETH%202.0%20support%2C%20removing%20the%20ETHHASH%20logic%20and%20SPV%20client%20and%20potentially%20replacing%20with%20MMR%20trees%20per%20epoch%20and%20checkpoints%20similar%20to%20Harmony%20Light%20Client%20on%20Ethereum%2C%20can%20be%20found%20%5Bhere%5D(%2Fresearch%2Fchains%2Fethereum.mdx).%0A%0A%23%23%20Next%20Steps%0A%0AFollowing%20are%20some%20of%20the%20improvements%20needed%20broken%20down%20by%20functional%20areas.%0A%0A%23%23%23%20Ethereum%20Light%20Client%0A%0A1.%20ETH%202.0%20support%20see%20%5Bhere%5D(%2Fresearch%2Fchains%2Fethereum.mdx)%0A2.%20Queuing%20mechanism%20should%20be%20implemented%20to%20queue%20bridge%20transactions.%20The%20queue%20can%20be%20polled%20as%20part%20of%20the%20block%20relay%20functionality%20to%20process%20bridge%20transactions%20once%20the%20blocks%20have%20been%20relayed.%0A3.%20Consider%20whether%20we%20can%20use%20p2p%20messaging%20to%20receive%20published%20blocks%20rather%20than%20looping%20and%20polling%20via%20an%20RPC.%0A%0A%23%23%23%20Harmony%20Light%20Client%0A%0A1.%20Needs%20to%20implement%20a%20process%20to%20%60submitCheckpoint%60.%0A2.%20%60eprove%60%20logic%20needs%20to%20be%20reviewed%0A3.%20Queuing%20mechanism%20should%20be%20implemented%20to%20queue%20bridge%20transactions.%20The%20queue%20can%20be%20polled%20as%20part%20of%20the%20%60submitCheckpoint%60%20functionality%20to%20process%20bridge%20transactions%20once%20the%20blocks%20have%20been%20relayed.%0A4.%20Need%20to%20facilitate%20the%20core%20protocol%20%5BMMR%20enhancements%20PR%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198%2Ffiles)%0A%0A%23%23%23%20Transaction%20Sequencing%0A%0ASequencing%20of%20Transactions%3A%20Needs%20to%20be%20implemented%20and%20%60TokenMap%60%20in%20%60bridge.js%60%20needs%20to%20be%20refactored.%20Below%20is%20the%20current%20sequence%20flow%20and%20areas%20for%20improvements.%0A%0A1.%20Ethereum%20Mapping%20Request%0A2.%20Relay%20of%20Block%20to%20EthereumLightClient.sol%20on%20Harmony%0A%20%20%20-%20The%20block%20has%20to%20be%20relayed%20before%20we%20can%20process%20the%20Harmony%20Mapping%20request%2C%20as%20we%20have%20just%20executed%20the%20transaction%20the%20relayer%20usually%20has%20not%20relayed%20the%20block%20so%20this%20will%20fail.%0A%20%20%20-%20There%20must%20be%20an%20additional%2025%20blocks%20on%20Ethereum%20before%20this%20block%20can%20be%20considered%20part%20of%20the%20canonical%20chain.%0A%20%20%20-%20This%20logic%20needs%20to%20be%20rewritten%20to%20break%20down%20execution%20for%201.%20the%20ethereum%20mapping%20request%202.%20After%20a%2025%20block%20delay%20the%20Harmony%20Proof%20validation%20and%20executing%20the%20Harmony%20Mapping%20Request%5C*%5C*%0A3.%20Harmony%20Mapping%20Request%0A4.%20Relay%20of%20Checkpoint%20to%20HarmonyLightClient.sol%20on%20Ethereum%0A%20%20%20-%20A%20%60submitCheckpoint%60%20in%20%60HarmonyLightClient.sol%60%20needs%20to%20have%20called%20either%20for%20the%20next%20epoch%20or%20for%20a%20checkpoint%2C%20after%20the%20block%20the%20harmony%20mapping%20transaction%20was%20in.%5C*%5C*%0A%20%20%20-%20Automatic%20submission%20of%20checkpoints%20to%20the%20Harmony%20Light%20Client%20has%20not%20been%20developed%20as%20yet.%20(It%20is%20not%20part%20of%20the%20%60ethRelay.js%60).%20And%20so%20the%20checkpoint%20would%20need%20to%20be%20manually%20submitted%20before%20the%20Ethereum%20Mapping%20could%20take%20place.%0A5.%20Etherem%20Process%20Harmony%20Mapping%20Acknowledgement%0A%0A%23%23%23%20Bridge%20Functionality%0A%0A1.%20Need%20to%20support%20mapping%20Harmony%20Tokens%20to%20Ethereum%0A%0A%23%23%23%20MultiChain%20Support%0A%0A1.%20Need%20to%20support%20other%20chains%0A%20%20%20-%20EVM%3A%20BSC%2C%20Polygon%2C%20Avalanche%2C%20Arbitrum%2C%20Optimism%0A%20%20%20-%20Bitcoin%0A%20%20%20-%20NEAR%0A%20%20%20-%20Solana%0A%20%20%20-%20Polkadot%0A2.%20Links%20to%20initial%20Design%20thoughs%20including%20reviews%20of%20cross%20chain%20messaging%20protocols%20and%20other%20multichain%20bridges%20can%20be%20found%20in%20Multichain%20Trustless%20Bridge%20%3A%20Draft.%0A%0A%23%23%20Current%20Implementation%20Walkthough%0A%0AFollowing%20is%20a%20detailed%20walk%20though%20of%20the%20current%20implementation%20of%20the%20Ethereum%20Light%20Client%20and%20the%20flow%20for%20mapping%20tokens%20from%20Ethereum%20to%20Harmony.%0A%0A%23%23%20Ethereum%20Light%20Client%20(on%20Harmony)%0A%0A**Design**%0AExisting%20Design%0A%0A1.%20DAG%20is%20generated%20for%20each%20Ethereum%20EPOCH%3A%20This%20takes%20a%20couple%20of%20hours%20and%20has%20a%20size%20of%20approx%201GB.%0A2.%20Relayer%20is%20run%20to%20replicate%20each%20block%20header%20to%20the%20SPV%20Client%20on%20Harmony.%0A3.%20EthereumLightClient.sol%20addBlockHeader%3A%20Adds%20each%20block%20header%20to%20the%20Ethereum%20Light%20Client.%0A4.%20Transactions%20are%20Verified%0A%0A**Running%20the%20Relayer**%0A%0A%60%60%60%0A%23%20Start%20the%20relayer%20(note%3A%20replace%20the%20etherum%20light%20client%20address%20below)%0A%23%20relay%20%5Boptions%5D%20%3CethUrl%3E%20%3ChmyUrl%3E%20%3CelcAddress%3E%20%20%20relay%20eth%20block%20header%20to%20elc%20on%20hmy%0A%20yarn%20cli%20ethRelay%20relay%20http%3A%2F%2Flocalhost%3A8645%20http%3A%2F%2Flocalhost%3A9500%200x3Ceb74A902dc5fc11cF6337F68d04cB834AE6A22%0A%60%60%60%0A%0A**Implementation**%0A%0A1.%20DAG%20Generation%20can%20be%20done%20explicity%20by%20calling%20%60dagProve%60%20from%20the%20CLI%20or%20it%20is%20done%20automatically%20by%20%60getHeaderProof%60%20in%20%60ethHashProof%2FBlockProof.js%60%20which%20is%20called%20from%20%60blockRelay%60%20in%20%60cli%2FethRelay.js%60.%0A2.%20Relaying%20of%20Block%20Headers%20is%20done%20by%20%60blockRelayLoop%60%20in%20%60cli%2FethRelay.js%60%20which%0A%20%20%20-%20Reads%20the%20last%20block%20header%20from%20EthereumLightClient.sol%0A%20%20%20-%20Loops%20through%20calling%20an%20Ethereum%20RPC%20per%20block%20to%20retrieve%20the%20blockHeader%20using%20%60return%20eth.getBlock(blockNo).then(fromRPC)%60%20in%20function%20%60getBlockByNumber%60%20in%20%60eth2hmy-relay%2FgetBlockHeader.js%60%0A3.%20Adding%20BlockHeaders%20is%20done%20by%20%60await%20elc.addBlockHeader(rlpHeader%2C%20proofs.dagData%2C%20proofs.proofs)%60%20which%20is%20called%20from%20%60cli%2FethRelay.js%60.%20%60addBlockHeader%60%20in%20%60EthereumLightClient.sol%60%0A%20%20%20-%20calculates%20the%20blockHeader%20Hash%0A%20%20%20-%20and%20checks%20that%20it%0A%20%20%20%20%20-%20hasn't%20already%20been%20relayed%2C%0A%20%20%20%20%20-%20is%20the%20next%20block%20to%20be%20added%2C%0A%20%20%20%20%20-%20has%20a%20valid%20timestamp%0A%20%20%20%20%20-%20has%20a%20valid%20difficulty%0A%20%20%20%20%20-%20has%20a%20valid%20Proof%20of%20Work%20(POW)%0A%20%20%20-%20Check%20if%20the%20canonical%20chain%20needs%20to%20be%20replaced%20by%20another%20fork%0A%0A%23%23%23%20Mapping%20Tokens%20(Ethereum%20to%20Harmony)%0A%0A**Design**%0A%0A1.%20If%20the%20Token%20Has%20not%20already%20been%20mapped%20on%20Harmony%0A%20%20%20-%20Harmony%3A%20Create%20an%20ERC20%20Token%0A%20%20%20-%20Harmony%3A%20Map%20the%20Ethereum%20Token%20to%20the%20new%20ERC20%20Contract%0A%20%20%20-%20Ethereum%3A%20Validate%20the%20Harmony%20Mapping%20Transaction%0A%20%20%20-%20Ethereum%3A%20Map%20the%20Harmony%20ERC20%20token%20to%20the%20existing%20Ethereum%20Token%0A%20%20%20-%20Harmony%3A%20Validate%20the%20Ethereum%20mapping%20Transaction%0A%0A_Note%3A%20The%20key%20difference%20between%20%60TokenLockerOnEthereum.sol%60%20and%20%60TokenLockerOnHarmony.sol%60%20is%20the%20proof%20validation.%20%60TokenLockerOnEthereum.sol%60%20uses%20%60.%2Flib%2FMMRVerifier.sol%60%20to%20validate%20the%20%5BMountain%20Merkle%20Ranges%5D(https%3A%2F%2Fgithub.com%2Fopentimestamps%2Fopentimestamps-server%2Fblob%2Fmaster%2Fdoc%2Fmerkle-mountain-range.mdx)%20on%20Harmony%20and%20%60HarmonyProver.sol%60.%20%60TokenLockerOnHarmony.sol%60%20imports%20%60.%2Flib%2FMPTValidatorV2.sol%60%20to%20validate%20%5BMerkle%20Patrica%20Trie%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fpatricia-merkle-trie%2F%23merkle-patricia-trees)%20and%20%60.%2FEthereumLightClient.sol%60._%0A%0A_Note%3A%20%60validateAndExecuteProof%60%20is%20responsible%20for%20creation%20of%20the%20BridgeTokens%20on%20the%20destination%20chain%20it%20does%20this%20by%20calling%20%60execute%60%20call%20in%20%60TokenLockerLocker.sol%60%20which%20then%20calls%20the%20function%20%60onTokenMapReqEvent%60%20in%20%60TokenRegistry.sol%60%20which%20creates%20a%20new%20Bridge%20Token%20%60BridgedToken%20mintAddress%20%3D%20new%20BridgedToken%7Bsalt%3A%20salt%7D()%3B%60%20and%20then%20initializes%20it.%20This%20uses%20%5B(RLP)%20Serialization%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Frlp%2F)_%0A%0A_Note%3A%20The%20shims%20in%20%60ethWeb3.js%60%20provide%20simplified%20functions%20for%20%60ContractAt%60%2C%20%60ContractDeploy%60%2C%20%60sendTx%60%20and%20%60addPrivateKey%60%20and%20have%20a%20constructor%20which%20uses%20%60process.env.PRIVATE_KEY%60._%0A%0A**Mapping%20the%20Tokens**%0A%0A%60%60%60%0A%23%20Map%20the%20Tokens%0A%23%20map%20%3CethUrl%3E%20%3CethBridge%3E%20%3ChmyUrl%3E%20%3ChmyBridge%3E%20%3Ctoken%3E%0Ayarn%20cli%20Bridge%20map%20http%3A%2F%2Flocalhost%3A8645%200x017f8C7d1Cb04dE974B8aC1a6B8d3d74bC74E7E1%20http%3A%2F%2Flocalhost%3A9500%200x017f8C7d1Cb04dE974B8aC1a6B8d3d74bC74E7E1%200x4e59AeD3aCbb0cb66AF94E893BEE7df8B414dAB1%0A%60%60%60%0A%0A**Implementation**%0A%0A-%20The%20CLI%20calls%20%60tokenMap%60%20in%20%60src%2Fbridge%2Fcontract.js%60%20to%0A%20%20-%20Instantiate%20the%20Ethereum%20Bridge%20and%20Harmony%20Bridge%20Contracts%0A%20%20-%20Calls%20%60TokenMap%60%20in%20%60scr%2Fbridge%2Fbridge.js%60%20to%0A%20%20%20%20-%20Issue%20a%20token%20Map%20request%20on%20Ethereum%20%60const%20mapReq%20%3D%20await%20src.IssueTokenMapReq(token)%60%0A%20%20%20%20-%20Acknowledge%20the%20Map%20Request%20on%20Harmony%20%60const%20mapAck%20%3D%20await%20Bridge.CrossRelayEthHmy(src%2C%20dest%2C%20mapReq)%60%0A%20%20%20%20-%20Issue%20a%20token%20Map%20request%20on%20Harmony%20%60return%20Bridge.CrossRelayHmyEth(dest%2C%20src%2C%20mapAck.transactionHash)%60%0A%0A**Here%20is%20the%20Logic%20(call%20execution%20overview)%20when%20Mapping%20Tokens%20across%20Chains.%20_NOTE%3A%20Currently%20mapping%20has%20only%20been%20developed%20from%20Ethereum%20to%20Harmony%20(not%20bi-directional)_.**%0A%0A1.%20Bridge%20Map%20is%20called%20in%20src.cli.index.js%20and%20it%20calls%20%60tokenMap%60%20in%20%60bridge%2Fcontract.js%60%20which%0A%20%20%20-%20Get%20srcBridge%20Contract%20on%20Ethereum%20%60TokenLockerOnEthereum.sol%60%20from%20%60ethBridge.js%60%20it%20also%20instantiates%20an%20%60eprover%60%20using%20%60tools%2Feprover%2Findex.js%60%20which%20calls%20%60txProof.js%60%20which%20uses%20%5Beth-proof%20npm%20package%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Feth-proof).%20_Note%3A%20this%20is%20marked%20with%20a%20%2F%2FTODO%20need%20to%20test%20and%20develop%20proving%20logic%20on%20Harmony._%0A%20%20%20-%20Get%20destBridge%20Contract%20on%20Hamony%20%60TokenLockerOnHarmony.sol%60%20from%20%60hmyBridge.js%60%20it%20also%20instantiates%20an%20%60hprove%60%20using%20%60tools%2Feprover%2Findex.js%60%20which%20calls%20%60txProof.js%60%20which%20uses%20%5Beth-proof%20npm%20package%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Feth-proof).%0A%20%20%20-%20calls%20%60TokenMap%60%20in%20%60bridge.js%60%0A2.%20%60TokenMap%60%20Calls%20IssueTokenMapReq%20(on%20the%20Ethreum%20Locker)%20returning%20the%20%60mapReq.transactionHash%60%0A%20%20%20-%20%60IssueTokenMapReq(token)%60%20is%20held%20in%20%60bridge.js%60%20as%20part%20of%20the%20bridge%20class%0A%20%20%20-%20It%20calls%20%60issueTokenMapReq%60%20on%20%60TokenLockerOnEthereum.sol%60%20which%20is%20implemented%20by%20%60TokenRegistry.sol%60%0A%20%20%20-%20%60issueTokenMapReq%60%20checks%20if%20the%20token%20has%20already%20been%20mapped%20if%20not%20it%20was%20emitting%20a%20%60TokenMapReq%60%20with%20the%20details%20of%20the%20token%20to%20be%20mapped.%20However%20this%20was%20commented%20out%20as%20it%20was%20felt%20that%2C%20if%20it%20has%20not%20been%20mapped%2C%20we%20use%20the%20%60transactionHash%60%20of%20the%20mapping%20request%60%20to%20drive%20the%20logic%20below%20(not%20the%20event).%0A3.%20%60TokenMap%60%20calls%20%60Bridge.CrossRelay%60%20with%20the%20IssueTokenMapReq.hash%20to%0A%20%20%20-%20gets%20the%20proof%20of%20the%20transaction%20on%20Ethereum%20via%20%60getProof%60%20calling%20%60prover.ReceiptProof%60%20which%20calls%20the%20eprover%20and%20returns%20%60proof%60%20with%0A%20%20%20%20%20-%20%60hash%3A%20sha3(resp.header.serialize())%2C%60%0A%20%20%20%20%20-%20%60root%3A%20resp.header.receiptRoot%2C%60%0A%20%20%20%20%20-%20%60proof%3A%20encode(resp.receiptProof)%2C%60%0A%20%20%20%20%20-%20%60key%3A%20encode(Number(resp.txIndex))%20%2F%2F%20'0x12'%20%3D%3E%20Nunmber%60%0A%20%20%20-%20We%20then%20call%20%60dest.ExecProof(proof)%60%20to%20execute%20the%20proof%20on%20Harmony%0A%20%20%20%20%20-%20This%20calls%20%60validateAndExecuteProof%60%20on%20%60TokenLockerOnHarmony.sol%60%20with%20the%20%60proofData%60%20from%20above%2C%20which%0A%20%20%20%20%20%20%20-%20requires%20%60lightclient.VerifyReceiptsHash(blockHash%2C%20rootHash)%2C%60%20implemented%20by%20%60.%2FEthereumLightClient.sol%60%0A%20%20%20%20%20%20%20%20%20-%20This%20returns%20%60return%20bytes32(blocks%5Buint256(blockHash)%5D.receiptsRoot)%20%3D%3D%20receiptsHash%3B%60%0A%20%20%20%20%20%20%20%20%20-%20**Which%20means%20the%20block%20has%20to%20be%20relayed%20first%2C%20as%20we%20have%20just%20executed%20the%20transaction%20the%20relayer%20usually%20has%20not%20relayed%20the%20block%20so%20this%20will%20fail**%0A%20%20%20%20%20%20%20-%20requires%20%60lightclient.isVerified(uint256(blockHash)%60%20implemented%20by%20%60.%2FEthereumLightClient.sol%60%0A%20%20%20%20%20%20%20%20%20-%20This%20returns%20%60return%20canonicalBlocks%5BblockHash%5D%20%26%26%20blocks%5BblockHash%5D.number%20%2B%2025%20%3C%20blocks%5BcanonicalHead%5D.number%3B%60%0A%20%20%20%20%20%20%20%20%20-%20**Which%20means%20there%20must%20be%20an%20additional%2025%20blocks%20on%20Ethereum%20before%20this%20can%20be%20processed.%20This%20logic%20needs%20to%20be%20rewritten%20to%20break%20down%20execution%20for%201.%20the%20ethereum%20mapping%20request%202.%20After%20a%2025%20block%20delay%20the%20Harmony%20Proof%20validation%20and%20executing%20the%20Harmony%20Mapping%20Request**%0A%20%20%20%20%20%20%20-%20%60require(spentReceipt%5BreceiptHash%5D%20%3D%3D%20false%2C%20%22double%20spent!%22)%3B%60%20to%20ensure%20that%20we%20haven't%20already%20executed%20this%20proof%0A%20%20%20%20%20%20%20-%20gets%20the%20%60rlpdata%60%20using%20%60EthereumProver.validateMPTProof%60%20implemented%20by%20%60EthereumProver.sol%60%20which%0A%20%20%20%20%20%20%20%20%20-%20Validates%20a%20Merkle-Patricia-Trie%20proof.%0A%20%20%20%20%20%20%20%20%20-%20Returns%20a%20value%20whose%20inclusion%20is%20proved%20or%20an%20empty%20byte%20array%20for%20a%20proof%20of%20exclusion%0A%20%20%20%20%20%20%20-%20marks%20%60spentReceipt%5BreceiptHash%5D%20%3D%20true%3B%60%0A%20%20%20%20%20%20%20-%20%60execute(rlpdata)%60%20implemented%20by%20%60TokenLocker.sol%60%20which%20calls%20%60onTokenMapReqEvent(topics%2C%20Data)%60%20implemented%20by%20%60TokenRegistry.sol%60%0A%20%20%20%20%20%20%20%20%20-%20%60address%20tokenReq%20%3D%20address(uint160(uint256(topics%5B1%5D)))%3B%60%20gets%20the%20address%20of%20the%20token%20to%20be%20mapped.%0A%20%20%20%20%20%20%20%20%20-%20require%20%60address(RxMapped%5BtokenReq%5D)%20%3D%3D%20address(0)%60%20that%20the%20token%20has%20not%20already%20been%20mapped.%0A%20%20%20%20%20%20%20%20%20-%20%60address(RxMapped%5BtokenReq%5D)%20%3D%3D%20address(0)%60%20creates%20a%20new%20BridgedToken%20implemented%20by%20%60BridgedToken.sol%60%0A%20%20%20%20%20%20%20%20%20%20%20-%20%60contract%20BridgedToken%20is%20ERC20Upgradeable%2C%20ERC20BurnableUpgradeable%2C%20OwnableUpgradeable%60%20it%20is%20a%20standard%20openzepplin%20ERC20%20Burnable%2C%20Ownable%2C%20Upgradeable%20token%0A%20%20%20%20%20%20%20%20%20-%20%60mintAddress.initialize%60%20initialize%20the%20token%20with%20the%20same%20%60name%60%2C%20%60symbol%60%20and%20%60decimals%60%20as%20the%20ethereum%20bridged%20token%0A%20%20%20%20%20%20%20%20%20-%20%60RxMappedInv%5Baddress(mintAddress)%5D%20%3D%20tokenReq%3B%60%20updates%20the%20inverse%20Key%20Value%20Mapping%0A%20%20%20%20%20%20%20%20%20-%20%60RxMapped%5BtokenReq%5D%20%3D%20mintAddress%3B%60%20updates%20the%20Ethereum%20mapped%20tokens%0A%20%20%20%20%20%20%20%20%20-%20%60RxTokens.push(mintAddress)%3B%60%20add%20the%20newly%20created%20token%20to%20a%20list%20of%20bridged%20tokens%0A%20%20%20%20%20%20%20%20%20-%20%60emit%20TokenMapAck(tokenReq%2C%20address(mintAddress))%3B%60%0A%20%20%20%20%20%20%20-%20%60require(executedEvents%20%3E%200%2C%20%22no%20valid%20event%22)%60%20to%20check%20if%20it%20executed%20the%20mapping%20correctly.%0A4.%20We%20then%20take%20the%20Harmony%20Mapping%20%60transactionHash%60%20and%20repeat%20the%20above%20process%20to%20prove%20the%20Harmony%20mapping%20acknowledgment%20on%20Ethereum%20(Cross%20Relay%20second%20call)%20%60return%20Bridge.CrossRelay(dest%2C%20src%2C%20mapAck.transactionHash)%3B%60%0A%0A-%20gets%20the%20proof%20of%20the%20transaction%20on%20Harmony%20via%20%60getProof%60%20calling%20%60prover.ReceiptProof%60%20which%20calls%20the%20eprover%20and%20returns%20%60proof%60%20with%0A%20%20_%60hash%3A%20sha3(resp.header.serialize())%2C%60%0A%20%20_%20%60root%3A%20resp.header.receiptRoot%2C%60%0A%20%20_%60proof%3A%20encode(resp.receiptProof)%2C%60%0A%20%20_%20%60key%3A%20encode(Number(resp.txIndex))%20%2F%2F%20'0x12'%20%3D%3E%20Nunmber%60%0A%20%20-%20We%20then%20call%20%60dest.ExecProof(proof)%60%20to%20execute%20the%20proof%20on%20Ethereum%0A%20%20%20%20-%20This%20calls%20%60validateAndExecuteProof%60%20on%20%60TokenLokerOnEthereum.sol%60%20with%20the%20%60proofData%60%20from%20above%2C%20which%0A%20%20%20%20%20%20-%20%60require(lightclient.isValidCheckPoint(header.epoch%2C%20mmrProof.root)%2C%60%20implemented%20by%20%60HarmonyLightClient.sol%60%0A%20%20%20%20%20%20%20%20-%20%60return%20epochMmrRoots%5Bepoch%5D%5BmmrRoot%5D%60%20which%20means%20that%20the%20epoch%20has%20to%20have%20had%20a%20checkpoint%20submitted%20via%20%60submitCheckpoint%60%0A%20%20%20%20%20%20-%20%60bytes32%20blockHash%20%3D%20HarmonyParser.getBlockHash(header)%3B%60%20gets%20the%20blockHash%20implemented%20by%20%60HarmonyParser.sol%60%0A%20%20%20%20%20%20%20%20-%20This%20returns%20%60return%20keccak256(getBlockRlpData(header))%3B%60%0A%20%20%20%20%20%20%20%20-%20%60getBlockRlpData%60%20creates%20a%20list%20%60bytes%5B%5D%20memory%20list%20%3D%20new%20bytes%5B%5D(15)%3B%60%20and%20uses%20statements%20like%20%60list%5B0%5D%20%3D%20RLPEncode.encodeBytes(abi.encodePacked(header.parentHash))%3B%60%20to%20perform%20%5BRecursive-Length%20Prefix%20(RLP)%20Serialization%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Frlp%2F)%20implemented%20by%20%60RLPEncode.sol%60%0A%20%20%20%20%20%20-%20%60HarmonyProver.verifyHeader(header%2C%20mmrProof)%3B%60%20verifys%20the%20header%20implemented%20by%20%60HarmonyProver.sol%60%0A%20%20%20%20%20%20%20%20-%20%60bytes32%20blockHash%20%3D%20HarmonyParser.getBlockHash(header)%3B%60%20gets%20the%20blockHash%20implemented%20by%20%60HarmonyParser.sol%60%20as%20above%0A%20%20%20%20%20%20%20%20-%20%60valid%20%3D%20MMRVerifier.inclusionProof(proof.root%2C%20proof.width%2C%20proof.index%2C%20blockHash%2C%20proof.peaks%2C%20proof.siblings)%3B%60%20verifys%20the%20proff%20using%20the%20%5BMerkle%20Mountain%20Range%20Proof%5D(https%3A%2F%2Fgithub.com%2Fopentimestamps%2Fopentimestamps-server%2Fblob%2Fmaster%2Fdoc%2Fmerkle-mountain-range.mdx)%20passed%20%60MMRVerifier.MMRProof%20memory%20proof%60%20and%20the%20%60blockHash%60.%0A%20%20%20%20%20%20%20%20-%20**NOTE%3A%20This%20means%20that%20a%20%60submitCheckpoint%60%20in%20%60HarmonyLightClient.sol%60%20needs%20to%20have%20called%20either%20for%20the%20next%20epoch%20or%20for%20a%20checkpoint%2C%20after%20the%20block%20the%20harmony%20mapping%20transaction%20was%20in.**%0A%20%20%20%20%20%20%20%20-%20**NOTE%3A%20Automatic%20submission%20of%20checkpoints%20to%20the%20Harmony%20Light%20Client%20has%20not%20been%20developed%20as%20yet.%20(It%20is%20not%20part%20of%20the%20%60ethRelay.js%60).%20And%20so%20the%20checkpoint%20would%20need%20to%20be%20manually%20submitted%20before%20the%20Ethereum%20Mapping%20could%20take%20place.**%0A%20%20%20%20%20%20-%20%60require(spentReceipt%5BreceiptHash%5D%20%3D%3D%20false%2C%20%22double%20spent!%22)%3B%60%20ensure%20that%20we%20haven't%20already%20processed%20this%20mapping%20request%60%0A%20%20%20%20%20%20-%20%60HarmonyProver.verifyReceipt(header%2C%20receiptdata)%60%20ensure%20the%20receiptdata%20is%20valid%0A%20%20%20%20%20%20-%20%60spentReceipt%5BreceiptHash%5D%20%3D%20true%3B%60%20marks%20the%20receipt%20as%20having%20been%20processed%0A%20%20%20%20%20%20-%20%60execute(receiptdata.expectedValue)%3B%60%20implemented%20by%20%60TokenLocker.sol%60%20which%20calls%20%60onTokenMapAckEvent(topics)%60%20implemented%20by%20%60TokenRegistry.sol%60%0A%20%20%20%20%20%20%20%20-%20%60address%20tokenReq%20%3D%20address(uint160(uint256(topics%5B1%5D)))%3B%60%0A%20%20%20%20%20%20%20%20-%20%60address%20tokenAck%20%3D%20address(uint160(uint256(topics%5B2%5D)))%3B%60%0A%20%20%20%20%20%20%20%20-%20%60require(TxMapped%5BtokenReq%5D%20%3D%3D%20address(0)%2C%20%22missing%20mapping%20to%20acknowledge%22)%3B%60%0A%20%20%20%20%20%20%20%20-%20%60TxMapped%5BtokenReq%5D%20%3D%20tokenAck%3B%60%0A%20%20%20%20%20%20%20%20-%20%60TxMappedInv%5BtokenAck%5D%20%3D%20IERC20Upgradeable(tokenReq)%3B%60%0A%20%20%20%20%20%20%20%20-%20%60TxTokens.push(IERC20Upgradeable(tokenReq))%3B%60%0A%0A5.%20Upon%20completion%20of%20tokenMap%20control%20is%20passed%20back%20to%20Bridge%20Map%20which%0A6.%20Calls%20TokenPair%20on%20Ethereum%0A7.%20Calls%20ethTokenInfo%20to%20get%20the%20status%20of%20the%20ERC20%0A8.%20Calls%20hmyTokenInfo%20to%20get%20the%20tokenStatus%20on%20Harmony%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./Horizon-Cpudsyev.js"),[]),path:"/research/code/Horizon.html",type:"mdx",filePath:"research/code/Horizon.mdx",content:"%23%20Horizon%20Bridge%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AThis%20document%20reviews%20the%20%5Bhorizon%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2)%20current%20implementation%2C%20development%20tasks%20that%20need%20to%20be%20done%20to%20support%20POW%20and%20offers%20some%20thoughts%20on%20next%20steps%20to%20support%20Ethereum%202.0%20and%20other%20chains.%0A%0AFurther%20thoughts%20on%20ETH%202.0%20support%2C%20removing%20the%20ETHHASH%20logic%20and%20SPV%20client%20and%20potentially%20replacing%20with%20MMR%20trees%20per%20epoch%20and%20checkpoints%20similar%20to%20Harmony%20Light%20Client%20on%20Ethereum%2C%20can%20be%20found%20%5Bhere%5D(%2Fresearch%2Fchains%2Fethereum.mdx).%0A%0A%23%23%20Next%20Steps%0A%0AFollowing%20are%20some%20of%20the%20improvements%20needed%20broken%20down%20by%20functional%20areas.%0A%0A%23%23%23%20Ethereum%20Light%20Client%0A%0A1.%20ETH%202.0%20support%20see%20%5Bhere%5D(%2Fresearch%2Fchains%2Fethereum.mdx)%0A2.%20Queuing%20mechanism%20should%20be%20implemented%20to%20queue%20bridge%20transactions.%20The%20queue%20can%20be%20polled%20as%20part%20of%20the%20block%20relay%20functionality%20to%20process%20bridge%20transactions%20once%20the%20blocks%20have%20been%20relayed.%0A3.%20Consider%20whether%20we%20can%20use%20p2p%20messaging%20to%20receive%20published%20blocks%20rather%20than%20looping%20and%20polling%20via%20an%20RPC.%0A%0A%23%23%23%20Harmony%20Light%20Client%0A%0A1.%20Needs%20to%20implement%20a%20process%20to%20%60submitCheckpoint%60.%0A2.%20%60eprove%60%20logic%20needs%20to%20be%20reviewed%0A3.%20Queuing%20mechanism%20should%20be%20implemented%20to%20queue%20bridge%20transactions.%20The%20queue%20can%20be%20polled%20as%20part%20of%20the%20%60submitCheckpoint%60%20functionality%20to%20process%20bridge%20transactions%20once%20the%20blocks%20have%20been%20relayed.%0A4.%20Need%20to%20facilitate%20the%20core%20protocol%20%5BMMR%20enhancements%20PR%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198%2Ffiles)%0A%0A%23%23%23%20Transaction%20Sequencing%0A%0ASequencing%20of%20Transactions%3A%20Needs%20to%20be%20implemented%20and%20%60TokenMap%60%20in%20%60bridge.js%60%20needs%20to%20be%20refactored.%20Below%20is%20the%20current%20sequence%20flow%20and%20areas%20for%20improvements.%0A%0A1.%20Ethereum%20Mapping%20Request%0A2.%20Relay%20of%20Block%20to%20EthereumLightClient.sol%20on%20Harmony%0A%20%20%20-%20The%20block%20has%20to%20be%20relayed%20before%20we%20can%20process%20the%20Harmony%20Mapping%20request%2C%20as%20we%20have%20just%20executed%20the%20transaction%20the%20relayer%20usually%20has%20not%20relayed%20the%20block%20so%20this%20will%20fail.%0A%20%20%20-%20There%20must%20be%20an%20additional%2025%20blocks%20on%20Ethereum%20before%20this%20block%20can%20be%20considered%20part%20of%20the%20canonical%20chain.%0A%20%20%20-%20This%20logic%20needs%20to%20be%20rewritten%20to%20break%20down%20execution%20for%201.%20the%20ethereum%20mapping%20request%202.%20After%20a%2025%20block%20delay%20the%20Harmony%20Proof%20validation%20and%20executing%20the%20Harmony%20Mapping%20Request%5C*%5C*%0A3.%20Harmony%20Mapping%20Request%0A4.%20Relay%20of%20Checkpoint%20to%20HarmonyLightClient.sol%20on%20Ethereum%0A%20%20%20-%20A%20%60submitCheckpoint%60%20in%20%60HarmonyLightClient.sol%60%20needs%20to%20have%20called%20either%20for%20the%20next%20epoch%20or%20for%20a%20checkpoint%2C%20after%20the%20block%20the%20harmony%20mapping%20transaction%20was%20in.%5C*%5C*%0A%20%20%20-%20Automatic%20submission%20of%20checkpoints%20to%20the%20Harmony%20Light%20Client%20has%20not%20been%20developed%20as%20yet.%20(It%20is%20not%20part%20of%20the%20%60ethRelay.js%60).%20And%20so%20the%20checkpoint%20would%20need%20to%20be%20manually%20submitted%20before%20the%20Ethereum%20Mapping%20could%20take%20place.%0A5.%20Etherem%20Process%20Harmony%20Mapping%20Acknowledgement%0A%0A%23%23%23%20Bridge%20Functionality%0A%0A1.%20Need%20to%20support%20mapping%20Harmony%20Tokens%20to%20Ethereum%0A%0A%23%23%23%20MultiChain%20Support%0A%0A1.%20Need%20to%20support%20other%20chains%0A%20%20%20-%20EVM%3A%20BSC%2C%20Polygon%2C%20Avalanche%2C%20Arbitrum%2C%20Optimism%0A%20%20%20-%20Bitcoin%0A%20%20%20-%20NEAR%0A%20%20%20-%20Solana%0A%20%20%20-%20Polkadot%0A2.%20Links%20to%20initial%20Design%20thoughs%20including%20reviews%20of%20cross%20chain%20messaging%20protocols%20and%20other%20multichain%20bridges%20can%20be%20found%20in%20Multichain%20Trustless%20Bridge%20%3A%20Draft.%0A%0A%23%23%20Current%20Implementation%20Walkthough%0A%0AFollowing%20is%20a%20detailed%20walk%20though%20of%20the%20current%20implementation%20of%20the%20Ethereum%20Light%20Client%20and%20the%20flow%20for%20mapping%20tokens%20from%20Ethereum%20to%20Harmony.%0A%0A%23%23%20Ethereum%20Light%20Client%20(on%20Harmony)%0A%0A**Design**%0AExisting%20Design%0A%0A1.%20DAG%20is%20generated%20for%20each%20Ethereum%20EPOCH%3A%20This%20takes%20a%20couple%20of%20hours%20and%20has%20a%20size%20of%20approx%201GB.%0A2.%20Relayer%20is%20run%20to%20replicate%20each%20block%20header%20to%20the%20SPV%20Client%20on%20Harmony.%0A3.%20EthereumLightClient.sol%20addBlockHeader%3A%20Adds%20each%20block%20header%20to%20the%20Ethereum%20Light%20Client.%0A4.%20Transactions%20are%20Verified%0A%0A**Running%20the%20Relayer**%0A%0A%60%60%60%0A%23%20Start%20the%20relayer%20(note%3A%20replace%20the%20etherum%20light%20client%20address%20below)%0A%23%20relay%20%5Boptions%5D%20%3CethUrl%3E%20%3ChmyUrl%3E%20%3CelcAddress%3E%20%20%20relay%20eth%20block%20header%20to%20elc%20on%20hmy%0A%20yarn%20cli%20ethRelay%20relay%20http%3A%2F%2Flocalhost%3A8645%20http%3A%2F%2Flocalhost%3A9500%200x3Ceb74A902dc5fc11cF6337F68d04cB834AE6A22%0A%60%60%60%0A%0A**Implementation**%0A%0A1.%20DAG%20Generation%20can%20be%20done%20explicity%20by%20calling%20%60dagProve%60%20from%20the%20CLI%20or%20it%20is%20done%20automatically%20by%20%60getHeaderProof%60%20in%20%60ethHashProof%2FBlockProof.js%60%20which%20is%20called%20from%20%60blockRelay%60%20in%20%60cli%2FethRelay.js%60.%0A2.%20Relaying%20of%20Block%20Headers%20is%20done%20by%20%60blockRelayLoop%60%20in%20%60cli%2FethRelay.js%60%20which%0A%20%20%20-%20Reads%20the%20last%20block%20header%20from%20EthereumLightClient.sol%0A%20%20%20-%20Loops%20through%20calling%20an%20Ethereum%20RPC%20per%20block%20to%20retrieve%20the%20blockHeader%20using%20%60return%20eth.getBlock(blockNo).then(fromRPC)%60%20in%20function%20%60getBlockByNumber%60%20in%20%60eth2hmy-relay%2FgetBlockHeader.js%60%0A3.%20Adding%20BlockHeaders%20is%20done%20by%20%60await%20elc.addBlockHeader(rlpHeader%2C%20proofs.dagData%2C%20proofs.proofs)%60%20which%20is%20called%20from%20%60cli%2FethRelay.js%60.%20%60addBlockHeader%60%20in%20%60EthereumLightClient.sol%60%0A%20%20%20-%20calculates%20the%20blockHeader%20Hash%0A%20%20%20-%20and%20checks%20that%20it%0A%20%20%20%20%20-%20hasn't%20already%20been%20relayed%2C%0A%20%20%20%20%20-%20is%20the%20next%20block%20to%20be%20added%2C%0A%20%20%20%20%20-%20has%20a%20valid%20timestamp%0A%20%20%20%20%20-%20has%20a%20valid%20difficulty%0A%20%20%20%20%20-%20has%20a%20valid%20Proof%20of%20Work%20(POW)%0A%20%20%20-%20Check%20if%20the%20canonical%20chain%20needs%20to%20be%20replaced%20by%20another%20fork%0A%0A%23%23%23%20Mapping%20Tokens%20(Ethereum%20to%20Harmony)%0A%0A**Design**%0A%0A1.%20If%20the%20Token%20Has%20not%20already%20been%20mapped%20on%20Harmony%0A%20%20%20-%20Harmony%3A%20Create%20an%20ERC20%20Token%0A%20%20%20-%20Harmony%3A%20Map%20the%20Ethereum%20Token%20to%20the%20new%20ERC20%20Contract%0A%20%20%20-%20Ethereum%3A%20Validate%20the%20Harmony%20Mapping%20Transaction%0A%20%20%20-%20Ethereum%3A%20Map%20the%20Harmony%20ERC20%20token%20to%20the%20existing%20Ethereum%20Token%0A%20%20%20-%20Harmony%3A%20Validate%20the%20Ethereum%20mapping%20Transaction%0A%0A_Note%3A%20The%20key%20difference%20between%20%60TokenLockerOnEthereum.sol%60%20and%20%60TokenLockerOnHarmony.sol%60%20is%20the%20proof%20validation.%20%60TokenLockerOnEthereum.sol%60%20uses%20%60.%2Flib%2FMMRVerifier.sol%60%20to%20validate%20the%20%5BMountain%20Merkle%20Ranges%5D(https%3A%2F%2Fgithub.com%2Fopentimestamps%2Fopentimestamps-server%2Fblob%2Fmaster%2Fdoc%2Fmerkle-mountain-range.mdx)%20on%20Harmony%20and%20%60HarmonyProver.sol%60.%20%60TokenLockerOnHarmony.sol%60%20imports%20%60.%2Flib%2FMPTValidatorV2.sol%60%20to%20validate%20%5BMerkle%20Patrica%20Trie%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fpatricia-merkle-trie%2F%23merkle-patricia-trees)%20and%20%60.%2FEthereumLightClient.sol%60._%0A%0A_Note%3A%20%60validateAndExecuteProof%60%20is%20responsible%20for%20creation%20of%20the%20BridgeTokens%20on%20the%20destination%20chain%20it%20does%20this%20by%20calling%20%60execute%60%20call%20in%20%60TokenLockerLocker.sol%60%20which%20then%20calls%20the%20function%20%60onTokenMapReqEvent%60%20in%20%60TokenRegistry.sol%60%20which%20creates%20a%20new%20Bridge%20Token%20%60BridgedToken%20mintAddress%20%3D%20new%20BridgedToken%7Bsalt%3A%20salt%7D()%3B%60%20and%20then%20initializes%20it.%20This%20uses%20%5B(RLP)%20Serialization%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Frlp%2F)_%0A%0A_Note%3A%20The%20shims%20in%20%60ethWeb3.js%60%20provide%20simplified%20functions%20for%20%60ContractAt%60%2C%20%60ContractDeploy%60%2C%20%60sendTx%60%20and%20%60addPrivateKey%60%20and%20have%20a%20constructor%20which%20uses%20%60process.env.PRIVATE_KEY%60._%0A%0A**Mapping%20the%20Tokens**%0A%0A%60%60%60%0A%23%20Map%20the%20Tokens%0A%23%20map%20%3CethUrl%3E%20%3CethBridge%3E%20%3ChmyUrl%3E%20%3ChmyBridge%3E%20%3Ctoken%3E%0Ayarn%20cli%20Bridge%20map%20http%3A%2F%2Flocalhost%3A8645%200x017f8C7d1Cb04dE974B8aC1a6B8d3d74bC74E7E1%20http%3A%2F%2Flocalhost%3A9500%200x017f8C7d1Cb04dE974B8aC1a6B8d3d74bC74E7E1%200x4e59AeD3aCbb0cb66AF94E893BEE7df8B414dAB1%0A%60%60%60%0A%0A**Implementation**%0A%0A-%20The%20CLI%20calls%20%60tokenMap%60%20in%20%60src%2Fbridge%2Fcontract.js%60%20to%0A%20%20-%20Instantiate%20the%20Ethereum%20Bridge%20and%20Harmony%20Bridge%20Contracts%0A%20%20-%20Calls%20%60TokenMap%60%20in%20%60scr%2Fbridge%2Fbridge.js%60%20to%0A%20%20%20%20-%20Issue%20a%20token%20Map%20request%20on%20Ethereum%20%60const%20mapReq%20%3D%20await%20src.IssueTokenMapReq(token)%60%0A%20%20%20%20-%20Acknowledge%20the%20Map%20Request%20on%20Harmony%20%60const%20mapAck%20%3D%20await%20Bridge.CrossRelayEthHmy(src%2C%20dest%2C%20mapReq)%60%0A%20%20%20%20-%20Issue%20a%20token%20Map%20request%20on%20Harmony%20%60return%20Bridge.CrossRelayHmyEth(dest%2C%20src%2C%20mapAck.transactionHash)%60%0A%0A**Here%20is%20the%20Logic%20(call%20execution%20overview)%20when%20Mapping%20Tokens%20across%20Chains.%20_NOTE%3A%20Currently%20mapping%20has%20only%20been%20developed%20from%20Ethereum%20to%20Harmony%20(not%20bi-directional)_.**%0A%0A1.%20Bridge%20Map%20is%20called%20in%20src.cli.index.js%20and%20it%20calls%20%60tokenMap%60%20in%20%60bridge%2Fcontract.js%60%20which%0A%20%20%20-%20Get%20srcBridge%20Contract%20on%20Ethereum%20%60TokenLockerOnEthereum.sol%60%20from%20%60ethBridge.js%60%20it%20also%20instantiates%20an%20%60eprover%60%20using%20%60tools%2Feprover%2Findex.js%60%20which%20calls%20%60txProof.js%60%20which%20uses%20%5Beth-proof%20npm%20package%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Feth-proof).%20_Note%3A%20this%20is%20marked%20with%20a%20%2F%2FTODO%20need%20to%20test%20and%20develop%20proving%20logic%20on%20Harmony._%0A%20%20%20-%20Get%20destBridge%20Contract%20on%20Hamony%20%60TokenLockerOnHarmony.sol%60%20from%20%60hmyBridge.js%60%20it%20also%20instantiates%20an%20%60hprove%60%20using%20%60tools%2Feprover%2Findex.js%60%20which%20calls%20%60txProof.js%60%20which%20uses%20%5Beth-proof%20npm%20package%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Feth-proof).%0A%20%20%20-%20calls%20%60TokenMap%60%20in%20%60bridge.js%60%0A2.%20%60TokenMap%60%20Calls%20IssueTokenMapReq%20(on%20the%20Ethreum%20Locker)%20returning%20the%20%60mapReq.transactionHash%60%0A%20%20%20-%20%60IssueTokenMapReq(token)%60%20is%20held%20in%20%60bridge.js%60%20as%20part%20of%20the%20bridge%20class%0A%20%20%20-%20It%20calls%20%60issueTokenMapReq%60%20on%20%60TokenLockerOnEthereum.sol%60%20which%20is%20implemented%20by%20%60TokenRegistry.sol%60%0A%20%20%20-%20%60issueTokenMapReq%60%20checks%20if%20the%20token%20has%20already%20been%20mapped%20if%20not%20it%20was%20emitting%20a%20%60TokenMapReq%60%20with%20the%20details%20of%20the%20token%20to%20be%20mapped.%20However%20this%20was%20commented%20out%20as%20it%20was%20felt%20that%2C%20if%20it%20has%20not%20been%20mapped%2C%20we%20use%20the%20%60transactionHash%60%20of%20the%20mapping%20request%60%20to%20drive%20the%20logic%20below%20(not%20the%20event).%0A3.%20%60TokenMap%60%20calls%20%60Bridge.CrossRelay%60%20with%20the%20IssueTokenMapReq.hash%20to%0A%20%20%20-%20gets%20the%20proof%20of%20the%20transaction%20on%20Ethereum%20via%20%60getProof%60%20calling%20%60prover.ReceiptProof%60%20which%20calls%20the%20eprover%20and%20returns%20%60proof%60%20with%0A%20%20%20%20%20-%20%60hash%3A%20sha3(resp.header.serialize())%2C%60%0A%20%20%20%20%20-%20%60root%3A%20resp.header.receiptRoot%2C%60%0A%20%20%20%20%20-%20%60proof%3A%20encode(resp.receiptProof)%2C%60%0A%20%20%20%20%20-%20%60key%3A%20encode(Number(resp.txIndex))%20%2F%2F%20'0x12'%20%3D%3E%20Nunmber%60%0A%20%20%20-%20We%20then%20call%20%60dest.ExecProof(proof)%60%20to%20execute%20the%20proof%20on%20Harmony%0A%20%20%20%20%20-%20This%20calls%20%60validateAndExecuteProof%60%20on%20%60TokenLockerOnHarmony.sol%60%20with%20the%20%60proofData%60%20from%20above%2C%20which%0A%20%20%20%20%20%20%20-%20requires%20%60lightclient.VerifyReceiptsHash(blockHash%2C%20rootHash)%2C%60%20implemented%20by%20%60.%2FEthereumLightClient.sol%60%0A%20%20%20%20%20%20%20%20%20-%20This%20returns%20%60return%20bytes32(blocks%5Buint256(blockHash)%5D.receiptsRoot)%20%3D%3D%20receiptsHash%3B%60%0A%20%20%20%20%20%20%20%20%20-%20**Which%20means%20the%20block%20has%20to%20be%20relayed%20first%2C%20as%20we%20have%20just%20executed%20the%20transaction%20the%20relayer%20usually%20has%20not%20relayed%20the%20block%20so%20this%20will%20fail**%0A%20%20%20%20%20%20%20-%20requires%20%60lightclient.isVerified(uint256(blockHash)%60%20implemented%20by%20%60.%2FEthereumLightClient.sol%60%0A%20%20%20%20%20%20%20%20%20-%20This%20returns%20%60return%20canonicalBlocks%5BblockHash%5D%20%26%26%20blocks%5BblockHash%5D.number%20%2B%2025%20%3C%20blocks%5BcanonicalHead%5D.number%3B%60%0A%20%20%20%20%20%20%20%20%20-%20**Which%20means%20there%20must%20be%20an%20additional%2025%20blocks%20on%20Ethereum%20before%20this%20can%20be%20processed.%20This%20logic%20needs%20to%20be%20rewritten%20to%20break%20down%20execution%20for%201.%20the%20ethereum%20mapping%20request%202.%20After%20a%2025%20block%20delay%20the%20Harmony%20Proof%20validation%20and%20executing%20the%20Harmony%20Mapping%20Request**%0A%20%20%20%20%20%20%20-%20%60require(spentReceipt%5BreceiptHash%5D%20%3D%3D%20false%2C%20%22double%20spent!%22)%3B%60%20to%20ensure%20that%20we%20haven't%20already%20executed%20this%20proof%0A%20%20%20%20%20%20%20-%20gets%20the%20%60rlpdata%60%20using%20%60EthereumProver.validateMPTProof%60%20implemented%20by%20%60EthereumProver.sol%60%20which%0A%20%20%20%20%20%20%20%20%20-%20Validates%20a%20Merkle-Patricia-Trie%20proof.%0A%20%20%20%20%20%20%20%20%20-%20Returns%20a%20value%20whose%20inclusion%20is%20proved%20or%20an%20empty%20byte%20array%20for%20a%20proof%20of%20exclusion%0A%20%20%20%20%20%20%20-%20marks%20%60spentReceipt%5BreceiptHash%5D%20%3D%20true%3B%60%0A%20%20%20%20%20%20%20-%20%60execute(rlpdata)%60%20implemented%20by%20%60TokenLocker.sol%60%20which%20calls%20%60onTokenMapReqEvent(topics%2C%20Data)%60%20implemented%20by%20%60TokenRegistry.sol%60%0A%20%20%20%20%20%20%20%20%20-%20%60address%20tokenReq%20%3D%20address(uint160(uint256(topics%5B1%5D)))%3B%60%20gets%20the%20address%20of%20the%20token%20to%20be%20mapped.%0A%20%20%20%20%20%20%20%20%20-%20require%20%60address(RxMapped%5BtokenReq%5D)%20%3D%3D%20address(0)%60%20that%20the%20token%20has%20not%20already%20been%20mapped.%0A%20%20%20%20%20%20%20%20%20-%20%60address(RxMapped%5BtokenReq%5D)%20%3D%3D%20address(0)%60%20creates%20a%20new%20BridgedToken%20implemented%20by%20%60BridgedToken.sol%60%0A%20%20%20%20%20%20%20%20%20%20%20-%20%60contract%20BridgedToken%20is%20ERC20Upgradeable%2C%20ERC20BurnableUpgradeable%2C%20OwnableUpgradeable%60%20it%20is%20a%20standard%20openzepplin%20ERC20%20Burnable%2C%20Ownable%2C%20Upgradeable%20token%0A%20%20%20%20%20%20%20%20%20-%20%60mintAddress.initialize%60%20initialize%20the%20token%20with%20the%20same%20%60name%60%2C%20%60symbol%60%20and%20%60decimals%60%20as%20the%20ethereum%20bridged%20token%0A%20%20%20%20%20%20%20%20%20-%20%60RxMappedInv%5Baddress(mintAddress)%5D%20%3D%20tokenReq%3B%60%20updates%20the%20inverse%20Key%20Value%20Mapping%0A%20%20%20%20%20%20%20%20%20-%20%60RxMapped%5BtokenReq%5D%20%3D%20mintAddress%3B%60%20updates%20the%20Ethereum%20mapped%20tokens%0A%20%20%20%20%20%20%20%20%20-%20%60RxTokens.push(mintAddress)%3B%60%20add%20the%20newly%20created%20token%20to%20a%20list%20of%20bridged%20tokens%0A%20%20%20%20%20%20%20%20%20-%20%60emit%20TokenMapAck(tokenReq%2C%20address(mintAddress))%3B%60%0A%20%20%20%20%20%20%20-%20%60require(executedEvents%20%3E%200%2C%20%22no%20valid%20event%22)%60%20to%20check%20if%20it%20executed%20the%20mapping%20correctly.%0A4.%20We%20then%20take%20the%20Harmony%20Mapping%20%60transactionHash%60%20and%20repeat%20the%20above%20process%20to%20prove%20the%20Harmony%20mapping%20acknowledgment%20on%20Ethereum%20(Cross%20Relay%20second%20call)%20%60return%20Bridge.CrossRelay(dest%2C%20src%2C%20mapAck.transactionHash)%3B%60%0A%0A-%20gets%20the%20proof%20of%20the%20transaction%20on%20Harmony%20via%20%60getProof%60%20calling%20%60prover.ReceiptProof%60%20which%20calls%20the%20eprover%20and%20returns%20%60proof%60%20with%0A%20%20_%60hash%3A%20sha3(resp.header.serialize())%2C%60%0A%20%20_%20%60root%3A%20resp.header.receiptRoot%2C%60%0A%20%20_%60proof%3A%20encode(resp.receiptProof)%2C%60%0A%20%20_%20%60key%3A%20encode(Number(resp.txIndex))%20%2F%2F%20'0x12'%20%3D%3E%20Nunmber%60%0A%20%20-%20We%20then%20call%20%60dest.ExecProof(proof)%60%20to%20execute%20the%20proof%20on%20Ethereum%0A%20%20%20%20-%20This%20calls%20%60validateAndExecuteProof%60%20on%20%60TokenLokerOnEthereum.sol%60%20with%20the%20%60proofData%60%20from%20above%2C%20which%0A%20%20%20%20%20%20-%20%60require(lightclient.isValidCheckPoint(header.epoch%2C%20mmrProof.root)%2C%60%20implemented%20by%20%60HarmonyLightClient.sol%60%0A%20%20%20%20%20%20%20%20-%20%60return%20epochMmrRoots%5Bepoch%5D%5BmmrRoot%5D%60%20which%20means%20that%20the%20epoch%20has%20to%20have%20had%20a%20checkpoint%20submitted%20via%20%60submitCheckpoint%60%0A%20%20%20%20%20%20-%20%60bytes32%20blockHash%20%3D%20HarmonyParser.getBlockHash(header)%3B%60%20gets%20the%20blockHash%20implemented%20by%20%60HarmonyParser.sol%60%0A%20%20%20%20%20%20%20%20-%20This%20returns%20%60return%20keccak256(getBlockRlpData(header))%3B%60%0A%20%20%20%20%20%20%20%20-%20%60getBlockRlpData%60%20creates%20a%20list%20%60bytes%5B%5D%20memory%20list%20%3D%20new%20bytes%5B%5D(15)%3B%60%20and%20uses%20statements%20like%20%60list%5B0%5D%20%3D%20RLPEncode.encodeBytes(abi.encodePacked(header.parentHash))%3B%60%20to%20perform%20%5BRecursive-Length%20Prefix%20(RLP)%20Serialization%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Frlp%2F)%20implemented%20by%20%60RLPEncode.sol%60%0A%20%20%20%20%20%20-%20%60HarmonyProver.verifyHeader(header%2C%20mmrProof)%3B%60%20verifys%20the%20header%20implemented%20by%20%60HarmonyProver.sol%60%0A%20%20%20%20%20%20%20%20-%20%60bytes32%20blockHash%20%3D%20HarmonyParser.getBlockHash(header)%3B%60%20gets%20the%20blockHash%20implemented%20by%20%60HarmonyParser.sol%60%20as%20above%0A%20%20%20%20%20%20%20%20-%20%60valid%20%3D%20MMRVerifier.inclusionProof(proof.root%2C%20proof.width%2C%20proof.index%2C%20blockHash%2C%20proof.peaks%2C%20proof.siblings)%3B%60%20verifys%20the%20proff%20using%20the%20%5BMerkle%20Mountain%20Range%20Proof%5D(https%3A%2F%2Fgithub.com%2Fopentimestamps%2Fopentimestamps-server%2Fblob%2Fmaster%2Fdoc%2Fmerkle-mountain-range.mdx)%20passed%20%60MMRVerifier.MMRProof%20memory%20proof%60%20and%20the%20%60blockHash%60.%0A%20%20%20%20%20%20%20%20-%20**NOTE%3A%20This%20means%20that%20a%20%60submitCheckpoint%60%20in%20%60HarmonyLightClient.sol%60%20needs%20to%20have%20called%20either%20for%20the%20next%20epoch%20or%20for%20a%20checkpoint%2C%20after%20the%20block%20the%20harmony%20mapping%20transaction%20was%20in.**%0A%20%20%20%20%20%20%20%20-%20**NOTE%3A%20Automatic%20submission%20of%20checkpoints%20to%20the%20Harmony%20Light%20Client%20has%20not%20been%20developed%20as%20yet.%20(It%20is%20not%20part%20of%20the%20%60ethRelay.js%60).%20And%20so%20the%20checkpoint%20would%20need%20to%20be%20manually%20submitted%20before%20the%20Ethereum%20Mapping%20could%20take%20place.**%0A%20%20%20%20%20%20-%20%60require(spentReceipt%5BreceiptHash%5D%20%3D%3D%20false%2C%20%22double%20spent!%22)%3B%60%20ensure%20that%20we%20haven't%20already%20processed%20this%20mapping%20request%60%0A%20%20%20%20%20%20-%20%60HarmonyProver.verifyReceipt(header%2C%20receiptdata)%60%20ensure%20the%20receiptdata%20is%20valid%0A%20%20%20%20%20%20-%20%60spentReceipt%5BreceiptHash%5D%20%3D%20true%3B%60%20marks%20the%20receipt%20as%20having%20been%20processed%0A%20%20%20%20%20%20-%20%60execute(receiptdata.expectedValue)%3B%60%20implemented%20by%20%60TokenLocker.sol%60%20which%20calls%20%60onTokenMapAckEvent(topics)%60%20implemented%20by%20%60TokenRegistry.sol%60%0A%20%20%20%20%20%20%20%20-%20%60address%20tokenReq%20%3D%20address(uint160(uint256(topics%5B1%5D)))%3B%60%0A%20%20%20%20%20%20%20%20-%20%60address%20tokenAck%20%3D%20address(uint160(uint256(topics%5B2%5D)))%3B%60%0A%20%20%20%20%20%20%20%20-%20%60require(TxMapped%5BtokenReq%5D%20%3D%3D%20address(0)%2C%20%22missing%20mapping%20to%20acknowledge%22)%3B%60%0A%20%20%20%20%20%20%20%20-%20%60TxMapped%5BtokenReq%5D%20%3D%20tokenAck%3B%60%0A%20%20%20%20%20%20%20%20-%20%60TxMappedInv%5BtokenAck%5D%20%3D%20IERC20Upgradeable(tokenReq)%3B%60%0A%20%20%20%20%20%20%20%20-%20%60TxTokens.push(IERC20Upgradeable(tokenReq))%3B%60%0A%0A5.%20Upon%20completion%20of%20tokenMap%20control%20is%20passed%20back%20to%20Bridge%20Map%20which%0A6.%20Calls%20TokenPair%20on%20Ethereum%0A7.%20Calls%20ethTokenInfo%20to%20get%20the%20status%20of%20the%20ERC20%0A8.%20Calls%20hmyTokenInfo%20to%20get%20the%20tokenStatus%20on%20Harmony%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./ethereum-near-DFMvq_-z.js"),[]),path:"/research/code/ethereum-near",type:"mdx",filePath:"research/code/ethereum-near.mdx",content:"%23%20Ethereum%20Near%20Bridging%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AThis%20document%20reviews%20the%20Ethereum%202.0%20specifications%20including%20Light%20Client%20specifications.%20It%20does%20a%20detailed%20review%20of%20the%20NEAR%20Rainbow%20Bridge%20implementation%20and%20also%20includes%20references%20to%20Harmony's%20design%20to%20support%20Mountain%20Merkle%20Ranges.%0A%0AKey%20differences%20in%20supporting%20Ethereum%202.0%20(Proof%20of%20Stake)%20vs%20Proof%20of%20Work%20involves%20removing%20the%20ETHHASH%20logic%20and%20SPV%20client%20and%20potentially%20replacing%20with%20MMR%20trees%20per%20epoch%20and%20checkpoints%20similar%20to%20Harmony%20Light%20Client%20on%20Ethereum.%0A%0A%23%23%20Ethereum%202.0%20Specifications%0A%0A-%20%5BBeacon%20Chain%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fmaster%2Fspecs%2Fphase0%2Fbeacon-chain.mdx)%0A-%20%5BExtended%20light%20client%20protocol%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fextended_light_client_protocol)%0A-%20%5BAltair%20Light%20Client%20--%20Light%20Client%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%0A-%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%0A-%20%5BBeacon%20Chain%20Fork%20Choice%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Ffork-choice.mdx)%0A%0A%23%23%20Ethereum%202.0%20Light%20Client%20Support%0A%0AHow%20light%20client%20implementation%20and%20verification%20of%20ETH%20and%20ETH2%20can%20be%20done%20via%20smart%20contracts%20in%20other%20protocols.%0A%0AFor%20this%20we%20review%20three%20Key%20items%0A%0A1.%20Light%20Client%20Specifications%20including%20%5BExtended%20light%20client%20protocol%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fextended_light_client_protocol)%20described%20by%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%20and%20the%20%5BThe%20Portal%20Network%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs)%0A2.%20Near%20Rainbow%20Bridge%20Light%20Client%20Walkthrough%20include%20%5Beth2near-block-relay-rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs)%2C%20%5Bnearbridge%20contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge)%20and%20%5Bnearprover%20contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearprover)%0A3.%20Prysm%20light-client%20%5Bprototype%5D(https%3A%2F%2Fgithub.com%2Fjinfwhuang%2Fprysm%2Ftree%2Fjin-light%2Fcmd%2Flight-client)%0A%0A_Note%3A%20Time%20on%20Ethereum%202.0%20Proof%20of%20Stake%20is%20divided%20into%20slots%20and%20epochs.%20One%20slot%20is%2012%20seconds.%20One%20epoch%20is%206.4%20minutes%2C%20consisting%20of%2032%20slots.%20One%20block%20can%20be%20created%20for%20each%20slot._%0A%0A%23%23%23%20Light%20Client%20Specification%0A%0A%23%23%23%23%20Altair%20Light%20Client%20--%20Sync%20Protocol%0A%0A-%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%3A%20The%20beacon%20chain%20is%20designed%20to%20be%20light%20client%20friendly%20for%20constrained%20environments%20to%20access%20Ethereum%20with%20reasonable%20safety%20and%20liveness.%0A%0A%20%20Such%20environments%20include%20resource-constrained%20devices%20(e.g.%20phones%20for%20trust-minimized%20wallets)and%20metered%20VMs%20(e.g.%20blockchain%20VMs%20for%20cross-chain%20bridges).%0A%0A%20%20This%20document%20suggests%20a%20minimal%20light%20client%20design%20for%20the%20beacon%20chain%20thatuses%20sync%20committees%20introduced%20in%20%5Bthis%20beacon%20chain%20extension%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fbeacon-chain.mdx).%0A%0A%20%20Additional%20documents%20describe%20how%20the%20light%20client%20sync%20protocol%20can%20be%20used%3A%0A%20%20-%20%5BFull%20node%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Ffull-node.mdx)%0A%20%20-%20%5BLight%20client%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%0A%20%20-%20%5BNetworking%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.mdx)%0A%0A-%20%5BLight%20client%20sync%20process%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%3A%20explains%20how%20light%20clients%20MAY%20obtain%20light%20client%20data%20to%20sync%20with%20the%20network.%0A%20%201.%20The%20light%20client%20MUST%20be%20configured%20out-of-band%20with%20a%20spec%2Fpreset%20(including%20fork%20schedule)%2C%20with%20%60genesis_state%60%20(including%20%60genesis_time%60%20and%20%60genesis_validators_root%60)%2C%20and%20with%20a%20trusted%20block%20root.%20The%20trusted%20block%20SHOULD%20be%20within%20the%20weak%20subjectivity%20period%2C%20and%20its%20root%20SHOULD%20be%20from%20a%20finalized%20%60Checkpoint%60.%0A%20%202.%20The%20local%20clock%20is%20initialized%20based%20on%20the%20configured%20%60genesis_time%60%2C%20and%20the%20current%20fork%20digest%20is%20determined%20to%20browse%20for%20and%20connect%20to%20relevant%20light%20client%20data%20providers.%0A%20%203.%20The%20light%20client%20fetches%20a%20%5B%60LightClientBootstrap%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%20object%20for%20the%20configured%20trusted%20block%20root.%20The%20%60bootstrap%60%20object%20is%20passed%20to%20%5B%60initialize_light_client_store%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23initialize_light_client_store)%20to%20obtain%20a%20local%20%5B%60LightClientStore%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientstore).%0A%20%204.%20The%20light%20client%20tracks%20the%20sync%20committee%20periods%20%60finalized_period%60%20from%20%60store.finalized_header.slot%60%2C%20%60optimistic_period%60%20from%20%60store.optimistic_header.slot%60%2C%20and%20%60current_period%60%20from%20%60current_slot%60%20based%20on%20the%20local%20clock.%0A%20%20%20%20%201.%20When%20%60finalized_period%20%3D%3D%20optimistic_period%60%20and%20%5B%60is_next_sync_committee_known%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23is_next_sync_committee_known)%20indicates%20%60False%60%2C%20the%20light%20client%20fetches%20a%20%5B%60LightClientUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientupdate)%20for%20%60finalized_period%60.%20If%20%60finalized_period%20%3D%3D%20current_period%60%2C%20this%20fetch%20SHOULD%20be%20scheduled%20at%20a%20random%20time%20before%20%60current_period%60%20advances.%0A%20%20%20%20%202.%20When%20%60finalized_period%20%2B%201%20%3C%20current_period%60%2C%20the%20light%20client%20fetches%20a%20%60LightClientUpdate%60%20for%20each%20sync%20committee%20period%20in%20range%20%60%5Bfinalized_period%20%2B%201%2C%20current_period)%60%20(current%20period%20excluded)%0A%20%20%20%20%203.%20When%20%60finalized_period%20%2B%201%20%3E%3D%20current_period%60%2C%20the%20light%20client%20keeps%20observing%20%5B%60LightClientFinalityUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientfinalityupdate)%20and%20%5B%60LightClientOptimisticUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientoptimisticupdate).%20Received%20objects%20are%20passed%20to%20%5B%60process_light_client_finality_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_finality_update)%20and%20%5B%60process_light_client_optimistic_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_optimistic_update).%20This%20ensures%20that%20%60finalized_header%60%20and%20%60optimistic_header%60%20reflect%20the%20latest%20blocks.%0A%20%205.%20%5B%60process_light_client_store_force_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_store_force_update)%20MAY%20be%20called%20based%20on%20use%20case%20dependent%20heuristics%20if%20light%20client%20sync%20appears%20stuck.%20If%20available%2C%20falling%20back%20to%20an%20alternative%20syncing%20mechanism%20to%20cover%20the%20affected%20sync%20committee%20period%20is%20preferred.%0A%0A%23%23%23%23%20The%20Portal%20Network%0A%0A-%20%5BThe%20Portal%20Network%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs)%3A%20The%20Portal%20Network%20is%20an%20in%20progess%20effort%20to%20enable%20lightweight%20protocol%20access%20by%20resource%20constrained%20devices.%20The%20term%20_%22portal%22_%20is%20used%20to%20indicate%20that%20these%20networks%20provide%20a%20_view_%20into%20the%20protocol%20but%20are%20not%20critical%20to%20the%20operation%20of%20the%20core%20Ethereum%20protocol.%0A%0A%20%20The%20Portal%20Network%20is%20comprised%20of%20multiple%20peer-to-peer%20networks%20which%20together%20provide%20the%20data%20and%20functionality%20necessary%20to%20expose%20the%20standard%20%5BJSON-RPC%20API%5D(https%3A%2F%2Feth.wiki%2Fjson-rpc%2FAPI).%20These%20networks%20are%20specially%20designed%20to%20ensure%20that%20clients%20participating%20in%20these%20networks%20can%20do%20so%20with%20minimal%20expenditure%20of%20networking%20bandwidth%2C%20CPU%2C%20RAM%2C%20and%20HDD%20resources.%0A%0A%20%20The%20term%20'Portal%20Client'%20describes%20a%20piece%20of%20software%20which%20participates%20in%20these%20networks.%20Portal%20Clients%20typically%20expose%20the%20standard%20JSON-RPC%20API.%0A%20%20-%20Motivation%3A%20The%20Portal%20Network%20is%20focused%20on%20delivering%20reliable%2C%20lightweight%2C%20and%20decentralized%20access%20to%20the%20Ethereum%20protocol.%0A%0A%20%20-%20Prior%20Work%20on%20the%20%22Light%20Ethereum%20Subprotocol%22%20(LES)%3A%20The%20term%20%22light%20client%22%20has%20historically%20refered%20to%20a%20client%20of%20the%20existing%20%5BDevP2P%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Frlpx.mdx)%20based%20%5BLES%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Fcaps%2Fles.mdx)%20network.%20This%20network%20is%20designed%20using%20a%20client%2Fserver%20architecture.%20The%20LES%20network%20has%20a%20total%20capacity%20dictated%20by%20the%20number%20of%20%22servers%22%20on%20the%20network.%20In%20order%20for%20this%20network%20to%20scale%2C%20the%20%22server%22%20capacity%20has%20to%20increase.%20This%20also%20means%20that%20at%20any%20point%20in%20time%20the%20network%20has%20some%20total%20capacity%20which%20if%20exceeded%20will%20cause%20service%20degradation%20across%20the%20network.%20Because%20of%20this%20the%20LES%20network%20is%20unreliable%20when%20operating%20near%20capacity.%0A%0A-%20Block%20Relay%0A%20%20-%20%5BBeacon%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23dht-overview)%3A%20A%20client%20has%20a%20trusted%20beacon%20state%20root%2C%20and%20it%20wants%20to%20access%20some%20parts%20of%20the%20state.%20Each%20of%20the%20access%20request%20corresponds%20to%20some%20leave%20nodes%20of%20the%20beacon%20state.%20The%20request%20is%20a%20content%20lookup%20on%20a%20DHT.%20The%20response%20is%20a%20Merkle%20proof.%0A%0A%20%20%20%20%20%20%20%20A%20Distributed%20Hash%20Table%20(DHT)%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%0A%0A%20%20-%20%5BSyncing%20Block%20Headers%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx)%3A%20A%20beacon%20chain%20client%20could%20sync%20committee%20to%20perform%20state%20updates.%20The%20data%20object%20LightClientSkipSyncUpdate%20allows%20a%20client%20to%20quickly%20sync%20to%20a%20recent%20header%20with%20the%20appropriate%20sync%20committee.%20Once%20the%20client%20establishes%20a%20recent%20header%2C%20it%20could%20sync%20to%20other%20headers%20by%20processing%20LightClientUpdates.%20These%20two%20data%20types%20allow%20a%20client%20to%20stay%20up-to-date%20with%20the%20beacon%20chain.%0A%20%20%20%20-%20%5BSync%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fskip-sync-network.mdx)%3A%20A%20client%20uses%20SkipSyncUpdate%20to%20skip%20sync%20from%20a%20known%20header%20to%20a%20recent%20header.%20A%20client%20with%20a%20trusted%20but%20outdated%20header%20cannot%20use%20the%20messages%20in%20the%20gossip%20channel%20bc-light-client-update%20to%20update.%20The%20client's%20sync-committee%20in%20the%20stored%20snapshot%20is%20too%20old%20and%20not%20connected%20to%20any%20update%20messages.%20The%20client%20look%20for%20the%20appropriate%20SkipSyncUpdate%20to%20skip%20sync%20its%20header.%0A%20%20%20%20-%20%5BAdvance%20Block%20Headers%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx)%3A%20A%20beacon%20chain%20client%20could%20sync%20committee%20to%20perform%20%5Bstate%20updates%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fsync-protocol.mdx).%20The%20data%20object%20%5BLightClientSkipSyncUpdate%5D(skip-sync-network)%20allows%20a%20client%20to%20quickly%20sync%20to%20a%20recent%20header%20with%20the%20appropriate%20sync%20committee.%20Once%20the%20client%20establishes%20a%20recent%20header%2C%20it%20could%20sync%20to%20other%20headers%20by%20processing%20%5BLightClientUpdates%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fsync-protocol.md%23lightclientupdate).%20These%20two%20data%20types%20allow%20a%20client%20to%20stay%20up-to-date%20with%20the%20beacon%20chain.%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20These%20two%20data%20types%20are%20placed%20into%20separate%20sub-networks.%20A%20light%20client%20make%20find-content%20requests%20on%20%60skip-sync-network%60%20at%20start%20of%20the%20sync%20to%20get%20a%20header%20with%20the%20same%20%60SyncCommittee%60%20object%20as%20in%20the%20current%20sync%20period.%20The%20client%20uses%20messages%20in%20the%20gossip%20topic%20%60bc-light-client-update%60%20to%20advance%20its%20header.%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20The%20gossip%20topics%20described%20in%20this%20document%20is%20part%20of%20a%20%5Bproposal%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fa-beacon-chain-light-client-proposal%2F11064)%20for%20a%20beacon%20chain%20light%20client.%0A%0A%23%23%23%23%20Transaction%20Proofs%0A%0A-%20%5BRetrieving%20Beacon%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.mdx)%3A%20A%20client%20has%20a%20trusted%20beacon%20state%20root%2C%20and%20it%20wants%20to%20access%20some%20parts%20of%20the%20state.%20Each%20of%20the%20access%20request%20corresponds%20to%20some%20leave%20nodes%20of%20the%20beacon%20state.%20The%20request%20is%20a%20content%20lookup%20on%20a%20DHT.%20The%20response%20is%20a%20Merkle%20proof.%0A%0A%20%20A%20Distributed%20Hash%20Table%20(DHT)%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%20key.%20A%20portal-network%20DHT%20is%20different%20than%20a%20traditional%20one%20in%20that%20each%20participant%20could%20selectively%20limit%20its%20workload%20by%20choosing%20a%20small%20interest%20radius%20r.%20A%20participants%20only%20process%20messages%20that%20are%20within%20its%20chosen%20radius%20boundary.%0A%20%20-%20%5BWire%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23wire-protocol)%3A%20For%20a%20subprotocol%2C%20we%20need%20to%20further%20define%20the%20following%20to%20be%20able%20to%20instantiate%20the%20wire%20format%20of%20each%20message%20type.%201.%20%60content_key%60%202.%20%60content_id%60%203.%20%60payload%60%0A%0A%20%20%20%20%20%20%20%20The%20content%20of%20the%20message%20is%20a%20Merkle%20proof%20contains%20multiple%20leave%20nodes%20for%20a%20%5BBeaconState%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fbeacon-chain.md%23beaconstate).%0A%0A%20%20%20%20%20%20%20%20Finally%2C%20we%20define%20the%20necessary%20encodings.%20A%20light%20client%20only%20knows%20the%20root%20of%20the%20beacon%20state.%20The%20client%20wants%20to%20know%20the%20details%20of%20some%20leave%20nodes.%20The%20client%20has%20to%20be%20able%20to%20construct%20the%20%60content_key%60%20only%20knowing%20the%20root%20and%20which%20leave%20nodes%20it%20wants%20see.%20The%20%60content_key%60%20is%20the%20ssz%20serialization%20of%20the%20paths.%20The%20paths%20represent%20the%20part%20of%20the%20beacon%20state%20that%20one%20wants%20to%20know%20about.%20The%20paths%20are%20represented%20by%20generalized%20indices.%20Note%20that%20%60hash_tree_root%60%20and%20%60serialize%60%20are%20the%20same%20as%20those%20defined%20in%20%5Bsync-gossip%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx).%0A%0A-%20TODO%3A%20Review%20of%20Retrieving%20a%20transaction%20proof%20not%20just%20retrieving%20data%20on-demand%0A%0A%23%23%23%23%20References%0A%0A-%20Ethereum%202.0%20Specifications%0A%20%20-%20%5BBeacon%20Chain%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fmaster%2Fspecs%2Fphase0%2Fbeacon-chain.mdx)%0A%20%20-%20%5BExtended%20light%20client%20protocol%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fextended_light_client_protocol)%0A%20%20-%20%5BAltair%20Light%20Client%20--%20Light%20Client%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%0A%20%20-%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%0A%20%20-%20%5BBeacon%20Chain%20Fork%20Choice%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Ffork-choice.mdx)%0A%20%20-%20%5BThe%20Portal%20Network%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs)%3A%20an%20in%20progess%20effort%20to%20enable%20lightweight%20protocol%20access%20by%20resource%20constrained%20devices.%0A%0A-%20%5BLight%20Ethereum%20Subprotocol%20(LES)%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Fcaps%2Fles.mdx)%3A%20the%20protocol%20used%20by%20%22light%22%20clients%2C%20which%20only%20download%20block%20headers%20as%20they%20appear%20and%20fetch%20other%20parts%20of%20the%20blockchain%20on-demand.%0A-%20%5BBlockDaemon%3A%20Ethereum%20Altair%20Hard%20Folk%3A%20Light%20Clients%20%26%20Sync%20Committees%5D(https%3A%2F%2Fblockdaemon.com%2Fblog%2Fethereum-altair-hard-folk-light-clients-sync-committees%2F)%0A-%20%5BEfficient%20algorithms%20for%20CBC%20Casper%5D(https%3A%2F%2Fdocs.google.com%2Fpresentation%2Fd%2F1oc_zdywOsHxz3zez1ILAgrerS7RkaF1hHoW0FLtp0Gw%2Fedit%23slide%3Did.p)%3A%20Review%20of%20LMD%20GHOST%20(Latest%20Message%20Driven%2C%20Greediest%20Heaviest%20Observed%20Sub-Tree)%0A-%20%5BSSZ%3A%20Simple%20Serialize%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fssz%2F)%3A%20Overview%20of%20Simple%20serialize%20(SSZ)%20is%20the%20serialization%20method%20used%20on%20the%20Beacon%20Chain.%20(including%20merkalization%20and%20multiproofs)%0A-%20%5BThe%20Noise%20Protocol%20Framework%5D(https%3A%2F%2Fnoiseprotocol.org%2Fnoise.html)%3A%20Noise%20is%20a%20framework%20for%20crypto%20protocols%20based%20on%20Diffie-Hellman%20key%20agreement.%0A-%20%5BFlashbots%20for%20Ethereum%20Consensus%20Clients%5D(https%3A%2F%2Fhackmd.io%2FQoLwVQf3QK6EiVt15YOYqQ%3Fview)%0A-%20%5BOptimistic%20Sync%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fsync%2Foptimistic.mdx)%3A%20Optimistic%20Sync%20is%20a%20stop-gap%20measure%20to%20allow%20execution%20nodes%20to%20sync%20via%20established%20methods%20until%20future%20Ethereum%20roadmap%20items%20are%20implemented%20(e.g.%2C%20statelessness).%0A-%20%5BConsensus%20Light%20Client%20Server%20Implementation%20Notes%5D(https%3A%2F%2Fhackmd.io%2FhsCz1G3BTyiwwJtjT4pe2Q%3Fview)%3A%20How%20Lodestar%20beacon%20node%20was%20tweaked%20to%20serve%20light%20clients%0A-%20%5Bbeacon%20chain%20light%20client%20design%20doc%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40ralexstokes%2FHJxDMi8vY)%3A%20notes%20about%20the%20design%2Fimplementation%20of%20a%20beacon%20chain%20light%20client%20using%20standard%20APIs%20and%20protocol%20features%0A-%20%5BA%20Beacon%20Chain%20Light%20Client%20Proposal%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fa-beacon-chain-light-client-proposal%2F11064)%3A%20proposing%20a%20light%20client%20implementation%20that%20goes%20a%20step%20further%20than%20the%20minimum%20light%20client%20described%20in%20the%20altair%20consensus-spec.%20The%20proposed%20client%20aims%20to%20allow%20queries%20into%20the%20beacon%20state.%0A-%20%5BDistributed%20Hash%20Table%20(DHT)%20Overview%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23dht-overview)%3A%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%20key.%0A-%20%5B(WIP)%20Light%20client%20p2p%20interface%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fpull%2F2786)%3A%20a%20PR%20to%20get%20the%20conversation%20going%20about%20a%20p2p%20approach.%0A%0A%23%23%23%20Near%20Rainbow%20Bridge%20Ethereum%20Light%20Client%20Walkthrough%0A%0AThe%20following%20is%20a%20walkthrough%20of%20how%20a%20transaction%20executed%20on%20Ethereum%20is%20propogated%20to%20NEAR's%20%5Beth2-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-client).%20See%20%5BCryptographic%20Primitives%5D(%23cryptographic-primitives)%20for%20more%20information%20on%20the%20cryptography%20used.%0A%0A**At%20a%20high%20level%20the%20ethereum%20light%20client%20contract**%0A%0A-%20Optionally%20accepts%20client%20updates%20only%20from%20a%20trusted%20client%0A-%20Can%20pause%20functions%0A-%20Validates%20a%20sync%20committee%20exists%20for%20the%20curremt%20slot%0A-%20Validates%20sync%20committe%20has%20greater%20than%20the%20minimum%20required%20sync%20committee%20members%0A-%20Validates%202%2F3%20or%20more%20of%20the%20committe%20members%20have%20signed%20the%20blocks%0A-%20Validates%20bls%20signatures%20(i.e.%20the%20bls%20signatures%20of%20the%20sync%20comittee%20for%20the%20blocks%20propogated)%0A-%20Stores%20the%20hashes%20of%20the%20blocks%20for%20the%20past%20%60hashes_gc_threshold%60%20headers.%20Events%20that%20happen%20past%20this%20threshold%20cannot%20be%20verified%20by%20the%20client.%20It%20is%20desirable%20that%20this%20number%20is%20larger%20than%207%20days'%20worth%20of%20headers%2C%20which%20is%20roughly%2051k%20Ethereum%20blocks.%20So%20this%20number%20should%20be%2051k%20in%20production.%0A-%20Stores%20the%20Ethereum%20Network%20(e.g.%20mainnet%2C%20kiln)%0A-%20Stores%20Hashes%20of%20the%20finalized%20execution%20blocks%20mapped%20to%20their%20numbers.%0A-%20Stores%20All%20unfinalized%20execution%20blocks'%20headers%20hashes%20mapped%20to%20their%20%60HeaderInfo%60.%0A-%20Stores%20%60AccountId%60s%20mapped%20to%20their%20number%20of%20submitted%20headers.%0A-%20Stores%20Max%20number%20of%20unfinalized%20blocks%20allowed%20to%20be%20stored%20by%20one%20submitter%20account.%20This%20value%20should%20be%20at%20least%2032%20blocks%20(1%20epoch)%2C%20but%20the%20recommended%20value%20is%201024%20(32%20epochs)%0A-%20Stores%20minimum%20balance%20that%20should%20be%20attached%20to%20register%20a%20new%20submitter%20account.%0A-%20Stores%20finalized%20beacon%20header%0A-%20Stores%20finalized%20execution%20header%0A-%20Stores%20current_sync_committee%0A-%20Stores%20next_sync_committee%0A%0A%23%23%23%23%20Ethereum%20to%20NEAR%20block%20propagation%20flow%0A%0A-%20%5BLight%20Clients%20are%20deployed%20on%20Near%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L107)%3A%0A%20%20-%20%5Binit_contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L107)%3A%20The%20eth2near%20relayer%20is%20called%20with%20an%20argument%20to%20initialize%20the%20%5Beth2-client%20contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%0A%20%20%20%20-%20%5Beth_client_contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L108)%3A%20is%20created%20using%20a%20contract_wrapper%0A%20%20%20%20%20%20-%20%60let%20mut%20eth_client_contract%20%3D%20EthClientContract%3A%3Anew(get_eth_contract_wrapper(%26config))%3B%60%0A%20%20%20%20-%20%5BEthClientContract%20Wrapper%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Feth_client_contract.rs)%3A%20creates%20an%20instance%20of%20%5Beth2-client%20contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%20with%20the%20following%20arguments%0A%20%20%20%20%20%20-%20%60network%60%20-%20the%20name%20of%20Ethereum%20network%20such%20as%20%60mainnet%60%2C%20%60goerli%60%2C%20%60kiln%60%2C%20etc.%0A%20%20%20%20%20%20-%20%60finalized_execution_header%60%20-%20the%20finalized%20execution%20header%20to%20start%20initialization%20with.%0A%20%20%20%20%20%20-%20%60finalized_beacon_header%60%20-%20correspondent%20finalized%20beacon%20header.%0A%20%20%20%20%20%20-%20%60current_sync_committee%60%20-%20sync%20committee%20correspondent%20for%20finalized%20block.%0A%20%20%20%20%20%20-%20%60next_sync_committee%60%20-%20sync%20committee%20for%20the%20next%20period%20after%20period%20for%20finalized%20block.%0A%20%20%20%20%20%20-%20%60hashes_gs_threshold%60%20-%20the%20maximum%20number%20of%20stored%20finalized%20blocks.%0A%20%20%20%20%20%20-%20%60max_submitted_block_by_account%60%20-%20the%20maximum%20number%20of%20unfinalized%20blocks%20which%20one%20relay%20can%20store%20in%20the%20client's%20storage.%0A%20%20%20%20%20%20-%20%60trusted_signer%60%20-%20the%20account%20address%20of%20the%20trusted%20signer%20which%20is%20allowed%20to%20submit%20light%20client%20updates.%0A-%20%5BRelayer%20is%20Created%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L111)%3A%0A%20%20-%20%5Beth2near_relay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L111)%20is%20created%20using%20the%20following%20arguments%0A%20%20%20%20-%20%60let%20mut%20eth2near_relay%20%3D%20Eth2NearRelay%3A%3Ainit(%26config%2C%20get_eth_client_contract(%26config)%2C%20args.enable_binary_search%2C%20args.submit_only_finalized_blocks%2C)%3B%60%0A-%20%5BRelayer%20is%20Started%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs)%3A%0A%20%20-%20The%20relayer%20is%20started%20using%20%60eth2near_relay.run(None)%3B%60%0A%20%20-%20This%20executes%20the%20%5Beth2near_relay%20run%20function%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L257)%20%60pub%20fn%20run(%26mut%20self%2C%20max_iterations%3A%20Option%3Cu64%3E)%60%20which%20runs%20until%20terminated%20doing%20using%20the%20following%20loop%20%60while%20!self.terminate%60%0A%20%20%20%20-%20%60self.wait_for_synchronization()%2C%60%3A%20gets%20the%20sync%20status%0A%20%20%20%20-%20%60sleep(Duration%3A%3Afrom_secs(12))%3B%60%3A%20waits%20for%2012%20seconds%0A%20%20%20%20-%20%60self.get_max_slot_for_submission()%60%3A%20gets%20the%20maximum%20slot%20for%20submission%20from%20Ethereum%0A%20%20%20%20-%20%60self.get_last_eth2_slot_on_near%60%3A%20gets%20the%20latest%20slot%20propogated%20from%20Ethereum%20to%20NEAR%0A%20%20%20%20-%20%60if%20last_eth2_slot_on_near%20%3C%20max_slot_for_submission%60%3A%20If%20there%20are%20slots%20to%20process%0A%20%20%20%20%20%20-%20%60self.get_execution_blocks_between(last_eth2_slot_on_near%20%2B%201%2C%20max_slot_for_submission%2C)%2C%60%3A%20Get%20the%20execution%20blocks%20to%20be%20processed%0A%20%20%20%20%20%20-%20%60self.submit_execution_blocks(headers%2C%20current_slot%2C%20%26mut%20last_eth2_slot_on_near)%60%3A%20submit%20them%0A%20%20%20%20%20%20-%20%60were_submission_on_iter%20%3D%20true%3B%60%3A%20flags%20that%20there%20were%20submissions%0A%20%20%20%20-%20%60were_submission_on_iter%20%7C%3D%20self.send_light_client_updates_with_checks(last_eth2_slot_on_near)%3B%60%3A%20send%20light_client%20updates%20with%20checks%20and%20updates%20the%20submission%20flag%20to%20true%20if%20if%20passes.%20Following%20is%20some%20key%20logic%0A%20%20%20%20%20%20-%20%60self.is_enough_blocks_for_light_client_update%60%3A%20Checks%20if%20there%20are%20enough%20blocks%20for%20a%20light%20client%20update%0A%20%20%20%20%20%20%20%20-%20%60self.send_light_client_updates%60%20calls%20%60send_light_client_update%60%20which%0A%20%20%20%20%20%20%20%20%20%20-%20%60if%20last_finalized_slot_on_eth%20%3E%3D%20last_finalized_slot_on_near%20%2B%20self.max_blocks_for_finalization%60%3A%20checks%20if%20the%20gap%20is%20too%20big%20(i.e.%20we%20are%20at%20a%20new%20slot)%20between%20slot%20of%20finalized%20block%20on%20NEAR%20and%20ETH.%20If%20it%20is%20it%20sends%20a%20hand%20made%20client%20update%20(which%20will%20loop%20getting%20the%20new%20slots%20sync%20committees)%20otherwise%20it%20sends%20a%20regular%20client%20update%20(which%20propogates%20the%20block%20headers)%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.send_hand_made_light_client_update(last_finalized_slot_on_near)%3B%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20-%20%60let%20include_next_sync_committee%20%3D%20BeaconRPCClient%3A%3Aget_period_for_slot%20(last_finalized_slot_on_near)%20!%3D%20BeaconRPCClient%3A%3Aget_period_for_slot(attested_slot)%3B%60%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.send_regular_light_client_update(last_finalized_slot_on_eth%2C%20last_finalized_slot_on_near%2C)%3B%60%0A%20%20%20%20%20%20%20%20%20%20-%20%60self.send_specific_light_client_update(light_client_update)%60%20is%20called%20for%20both%20regular%20and%20hand%20made%20updates.%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.eth_client_contract.is_known_block%60%3A%20Checks%20if%20the%20block%20is%20already%20known%20on%20the%20Etherum%20Client%20Contract%20on%20NEAR%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.verify_bls_signature_for_finality_update(%26light_client_update)%60%3A%20Verifies%20the%20BLS%20signatures.%20This%20calls%20%60is_correct_finality_update%60%20in%20%60eth2near%2Ffinality-update-verify%2Fsrc%2Flib.rs%60%20%5C*%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.eth_client_contract.send_light_client_update(light_client_update.clone())%60%3A%20Updates%20the%20light%20client%20with%20the%20finalized%20block%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.beacon_rpc_client.get_block_number_for_slot(types%3A%3ASlot%3A%3Anew(light_client_update.finality_update.header_update.beacon_header.slot.as_u64()))%2C%60%3A%20Validates%20Finalized%20block%20number%20is%20correct%20on%20Ethereum%20usng%20the%20%60beacon_rpc_client%60.%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60sleep(Duration%3A%3Afrom_secs(self.sleep_time_after_submission_secs))%3B%60%3A%20sleeps%20for%20the%20configured%20submission%20sleep%20time.%0A%20%20%20%20-%20%60if%20!were_submission_on_iter%20%7Bthread%3A%3Asleep(Duration%3A%3Afrom_secs(self.sleep_time_on_sync_secs))%3B%7D%60%3A%20if%20there%20were%20submissions%20sleep%20for%20however%20many%20seconds%20were%20configured%20for%20sync%20sleep%20time.%0A%0A%23%23%23%23%20Ethereum%20to%20NEAR%20block%20propagation%20components%0A%0A-%20%5BEthClientContract%20Wrapper%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Feth_client_contract.rs)%3A%20supports%20%5Beth2-client%20contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%20functions%20%60impl%20EthClientContractTrait%20for%20EthClientContract%60%0A%20%20-%20%60fn%20get_last_submitted_slot(%26self)%20-%3E%20u64%60%0A%20%20-%20%60fn%20is_known_block(%26self%2C%20execution_block_hash%3A%20%26H256)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20send_light_client_update(%26mut%20self%2C%20light_client_update%3A%20LightClientUpdate%2C)%20-%3E%20Result%3CFinalExecutionOutcomeView%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_finalized_beacon_block_hash(%26self)%20-%3E%20Result%3CH256%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_finalized_beacon_block_slot(%26self)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20send_headers(%26mut%20self%2C%20headers%3A%20%26%5BBlockHeader%5D%2C%20end_slot%3A%20u64%2C)%20-%3E%20Result%3CFinalExecutionOutcomeView%2C%20Box%3Cdyn%20std%3A%3Aerror%3A%3AError%3E%3E%60%0A%20%20-%20%60fn%20get_min_deposit(%26self)%20-%3E%20Result%3CBalance%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20register_submitter(%26self)%20-%3E%20Result%3CFinalExecutionOutcomeView%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20is_submitter_registered(%26self%2Caccount_id%3A%20Option%3CAccountId%3E%2C)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_light_client_state(%26self)%20-%3E%20Result%3CLightClientState%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_num_of_submitted_blocks_by_account(%26self)%20-%3E%20Result%3Cu32%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_max_submitted_blocks_by_account(%26self)%20-%3E%20Result%3Cu32%2C%20Box%3Cdyn%20Error%3E%3E%60%0A-%20%5Beth2-client%20contract%20storage%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%3A%0A%20%20-%20High%20level%20storage%20overview%0A%20%20-%20provides%20the%20%60Eth2Client%60%20public%20data%20stucture%0A%0A%20%20%20%20%60%60%60%0A%20%20%20%20pub%20struct%20Eth2Client%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20If%20set%2C%20only%20light%20client%20updates%20by%20the%20trusted%20signer%20will%20be%20accepted%0A%20%20%20%20%20%20%20%20trusted_signer%3A%20Option%3CAccountId%3E%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Mask%20determining%20all%20paused%20functions%0A%20%20%20%20%20%20%20%20paused%3A%20Mask%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Whether%20the%20client%20validates%20the%20updates.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Should%20only%20be%20set%20to%20%60false%60%20for%20debugging%2C%20testing%2C%20and%20diagnostic%20purposes%0A%20%20%20%20%20%20%20%20validate_updates%3A%20bool%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Whether%20the%20client%20verifies%20BLS%20signatures.%0A%20%20%20%20%20%20%20%20verify_bls_signatures%3A%20bool%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20We%20store%20the%20hashes%20of%20the%20blocks%20for%20the%20past%20%60hashes_gc_threshold%60%20headers.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Events%20that%20happen%20past%20this%20threshold%20cannot%20be%20verified%20by%20the%20client.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20It%20is%20desirable%20that%20this%20number%20is%20larger%20than%207%20days'%20worth%20of%20headers%2C%20which%20is%20roughly%0A%20%20%20%20%20%20%20%20%2F%2F%2F%2051k%20Ethereum%20blocks.%20So%20this%20number%20should%20be%2051k%20in%20production.%0A%20%20%20%20%20%20%20%20hashes_gc_threshold%3A%20u64%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Network.%20e.g.%20mainnet%2C%20kiln%0A%20%20%20%20%20%20%20%20network%3A%20Network%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Hashes%20of%20the%20finalized%20execution%20blocks%20mapped%20to%20their%20numbers.%20Stores%20up%20to%20%60hashes_gc_threshold%60%20entries.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Execution%20block%20number%20-%3E%20execution%20block%20hash%0A%20%20%20%20%20%20%20%20finalized_execution_blocks%3A%20LookupMap%3Cu64%2C%20H256%3E%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20All%20unfinalized%20execution%20blocks'%20headers%20hashes%20mapped%20to%20their%20%60HeaderInfo%60.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Execution%20block%20hash%20-%3E%20ExecutionHeaderInfo%20object%0A%20%20%20%20%20%20%20%20unfinalized_headers%3A%20UnorderedMap%3CH256%2C%20ExecutionHeaderInfo%3E%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20%60AccountId%60s%20mapped%20to%20their%20number%20of%20submitted%20headers.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Submitter%20account%20-%3E%20Num%20of%20submitted%20headers%0A%20%20%20%20%20%20%20%20submitters%3A%20LookupMap%3CAccountId%2C%20u32%3E%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Max%20number%20of%20unfinalized%20blocks%20allowed%20to%20be%20stored%20by%20one%20submitter%20account%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20This%20value%20should%20be%20at%20least%2032%20blocks%20(1%20epoch)%2C%20but%20the%20recommended%20value%20is%201024%20(32%20epochs)%0A%20%20%20%20%20%20%20%20max_submitted_blocks_by_account%3A%20u32%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20The%20minimum%20balance%20that%20should%20be%20attached%20to%20register%20a%20new%20submitter%20account%0A%20%20%20%20%20%20%20%20min_storage_balance_for_submitter%3A%20Balance%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Light%20client%20state%0A%20%20%20%20%20%20%20%20finalized_beacon_header%3A%20ExtendedBeaconBlockHeader%2C%0A%20%20%20%20%20%20%20%20finalized_execution_header%3A%20LazyOption%3CExecutionHeaderInfo%3E%2C%0A%20%20%20%20%20%20%20%20current_sync_committee%3A%20LazyOption%3CSyncCommittee%3E%2C%0A%20%20%20%20%20%20%20%20next_sync_committee%3A%20LazyOption%3CSyncCommittee%3E%2C%0A%20%20%20%20%7D%0A%20%20%20%20%60%60%60%0A%0A-%20%5Beth2-client%20dependencies%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2FCargo.toml)%20relys%20heavily%20on%20the%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20codebase%20for%20it's%20consensus%20and%20cryptogrphic%20primitives.%20See%20%5BCryptographic%20Primitives%5D(%23cryptographic-primitives)%20for%20more%20information.%0A%20%20-%20%60ethereum-types%20%3D%20%220.9.2%22%60%0A%20%20-%20%60eth-types%20%3D%20%20%7B%20path%20%3D%20%22..%2Feth-types%22%20%7D%60%0A%20%20-%20%60eth2-utility%20%3D%20%20%7B%20path%20%3D%20%22..%2Feth2-utility%22%20%7D%60%0A%20%20-%20%60tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60merkle_proof%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60bls%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20optional%20%3D%20true%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%2C%20default-features%20%3D%20false%2C%20features%20%3D%20%5B%22milagro%22%5D%7D%60%0A%20%20-%20%60admin-controlled%20%3D%20%20%7B%20path%20%3D%20%22..%2Fadmin-controlled%22%20%7D%60%0A%20%20-%20%60near-sdk%20%3D%20%224.0.0%22%60%0A%20%20-%20%60borsh%20%3D%20%220.9.3%22%60%0A%20%20-%20%60bitvec%20%3D%20%221.0.0%22%60%0A%0A-%20%5Beth2-client%20contract%20functions%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%3A%20provides%20the%20following%20functions%20in%20%60impl%20Eth2Client%60%0A%20%20-%20%60fn%20validate_light_client_update(%26self%2C%20update%3A%20%26LightClientUpdate)%60%0A%20%20-%20%60fn%20verify_finality_branch(%26self%2C%20update%3A%20%26LightClientUpdate%2C%20finalized_period%3A%20u64)%60%0A%20%20-%20%60fn%20verify_bls_signatures(%26self%2C%20update%3A%20%26LightClientUpdate%2C%20sync_committee_bits%3A%20BitVec%3Cu8%3E%2C%20finalized_period%3A%20u64%2C)%60%0A%20%20-%20%60fn%20update_finalized_header(%26mut%20self%2C%20finalized_header%3A%20ExtendedBeaconBlockHeader)%60%0A%20%20-%20%60fn%20commit_light_client_update(%26mut%20self%2C%20update%3A%20LightClientUpdate)%60%0A%20%20-%20%60fn%20gc_finalized_execution_blocks(%26mut%20self%2C%20mut%20header_number%3A%20u64)%60%0A%20%20-%20%60fn%20update_submitter(%26mut%20self%2C%20submitter%3A%20%26AccountId%2C%20value%3A%20i64)%60%0A%20%20-%20%60fn%20is_light_client_update_allowed(%26self)%60%0A-%20%5BEth2NearRelay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L84)%3A%20has%20the%20following%20public%20structure%0A%0A%20%20%60%60%60%0A%20%20pub%20struct%20Eth2NearRelay%20%7B%0A%20%20%20%20%20%20beacon_rpc_client%3A%20BeaconRPCClient%2C%0A%20%20%20%20%20%20eth1_rpc_client%3A%20Eth1RPCClient%2C%0A%20%20%20%20%20%20near_rpc_client%3A%20NearRPCClient%2C%0A%20%20%20%20%20%20eth_client_contract%3A%20Box%3Cdyn%20EthClientContractTrait%3E%2C%0A%20%20%20%20%20%20headers_batch_size%3A%20u64%2C%0A%20%20%20%20%20%20ethereum_network%3A%20String%2C%0A%20%20%20%20%20%20interval_between_light_client_updates_submission_in_epochs%3A%20u64%2C%0A%20%20%20%20%20%20max_blocks_for_finalization%3A%20u64%2C%0A%20%20%20%20%20%20near_network_name%3A%20String%2C%0A%20%20%20%20%20%20last_slot_searcher%3A%20LastSlotSearcher%2C%0A%20%20%20%20%20%20terminate%3A%20bool%2C%0A%20%20%20%20%20%20submit_only_finalized_blocks%3A%20bool%2C%0A%20%20%20%20%20%20next_light_client_update%3A%20Option%3CLightClientUpdate%3E%2C%0A%20%20%20%20%20%20sleep_time_on_sync_secs%3A%20u64%2C%0A%20%20%20%20%20%20sleep_time_after_submission_secs%3A%20u64%2C%0A%20%20%20%20%20%20max_submitted_blocks_by_account%3A%20u32%2C%0A%20%20%7D%0A%20%20%60%60%60%0A%0A-%20%5BEth2NearRelay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L103)%3A%20Implements%20the%20following%20functions%0A%20%20-%20%60fn%20get_max_slot_for_submission(%26self)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_last_eth2_slot_on_near(%26mut%20self%2C%20max_slot%3A%20u64)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_last_finalized_slot_on_near(%26self)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_last_finalized_slot_on_eth(%26self)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20**%60pub%20fn%20run(%26mut%20self%2C%20max_iterations%3A%20Option%3Cu64%3E)%60**%0A%20%20-%20%60fn%20wait_for_synchronization(%26self)%20-%3E%20Result%3C()%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_light_client_update_from_file(config%3A%20%26Config%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C)%20-%3E%20Result%3COption%3CLightClientUpdate%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20set_terminate(%26mut%20self%2C%20iter_id%3A%20u64%2C%20max_iterations%3A%20Option%3Cu64%3E)%60%0A%20%20-%20%60fn%20get_execution_blocks_between(%26self%2C%20start_slot%3A%20u64%2C%20last_eth2_slot_on_eth_chain%3A%20u64%2C)%20-%3E%20Result%3C(Vec%3CBlockHeader%3E%2C%20u64)%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20submit_execution_blocks(%26mut%20self%2C%20headers%3A%20Vec%3CBlockHeader%3E%2C%20current_slot%3A%20u64%2Clast_eth2_slot_on_near%3A%20%26mut%20u64%2C)%60%0A%20%20-%20%60fn%20verify_bls_signature_for_finality_update(%26mut%20self%2C%20light_client_update%3A%20%26LightClientUpdate%2C)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_execution_block_by_slot(%26self%2C%20slot%3A%20u64)%20-%3E%20Result%3CBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%0A-%20%5BEth2NearRelay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L461)%3A%20has%20a%20second%20implementation%20of%20functions%20for%20submitting%20light%20client%20updates%0A%20%20-%20%60fn%20is_enough_blocks_for_light_client_update(%26self%2C%20last_submitted_slot%3A%20u64%2Clast_finalized_slot_on_near%3A%20u64%2C%20last_finalized_slot_on_eth%3A%20u64%2C)%20-%3E%20bool%60%0A%20%20-%20%60fn%20is_shot_run_mode(%26self)%20-%3E%20bool%60%0A%20%20-%20%60fn%20send_light_client_updates_with_checks(%26mut%20self%2C%20last_submitted_slot%3A%20u64)%20-%3E%20bool%60%0A%20%20-%20%60fn%20send_light_client_updates(%26mut%20self%2C%20last_submitted_slot%3A%20u64%2C%20last_finalized_slot_on_near%3A%20u64%2C%20last_finalized_slot_on_eth%3A%20u64%2C)%60%0A%20%20-%20%60fn%20send_light_client_update_from_file(%26mut%20self%2C%20last_submitted_slot%3A%20u64)%60%0A%20%20-%20%60fn%20send_regular_light_client_update(%26mut%20self%2C%20last_finalized_slot_on_eth%3A%20u64%2Clast_finalized_slot_on_near%3A%20u64%2C)%60%0A%20%20-%20%60fn%20get_attested_slot(%26mut%20self%2C%20last_finalized_slot_on_near%3A%20u64%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20send_hand_made_light_client_update(%26mut%20self%2C%20last_finalized_slot_on_near%3A%20u64)%60%0A%20%20-%20%60fn%20send_specific_light_client_update(%26mut%20self%2C%20light_client_update%3A%20LightClientUpdate)%60%0A%0A-%20%5Beth2-contract-init%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2-contract-init)%20includes%20(but%20not%20limited%20to)%20the%20following%20additional%20components%0A%20%20-%20%5Binit_contract.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2-contract-init%2Fsrc%2Finit_contract.rs)%3A%20Verifies%20light%20client%20snapshot%20and%20initializes%20the%20Ethereum%20Light%20Contract%20on%20Near.%0A%20%20%20%20-%20%60pub%20fn%20verify_light_client_snapshot(block_root%3A%20String%2C%20light_client_snapshot%3A%20%26LightClientSnapshotWithProof%2C)%20-%3E%20bool%60%3A%20Verifies%20the%20light%20client%20by%20checking%20the%20snapshot%20format%20getting%20the%20current%20consensus%20branch%20and%20verifying%20it%20via%20a%20merkle%20proof.%0A%20%20%20%20-%20%60pub%20fn%20init_contract(config%3A%20%26Config%2C%20eth_client_contract%3A%20%26mut%20EthClientContract%2C%20mut%20init_block_root%3A%20String%2C)%20-%3E%20Result%3C()%2C%20Box%3Cdyn%20std%3A%3Aerror%3A%3AError%3E%3E%60%3A%20Initializes%20the%20Ethereum%20Light%20Client%20Contract%20on%20Near.%0A-%20%5Beth_rpc_client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth_rpc_client)%20includes%20(but%20not%20limited%20to)%20the%20following%20additional%20components%0A%20%20-%20%5Beth1_rpc_client.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth1_rpc_client.rs)%3A%20Is%20used%20to%20get%20block%20headers%20and%20check%20sync%20status.%20It%20has%20the%20following%20functions%0A%20%20%20%20-%20%60pub%20fn%20new(endpoint_url%3A%20%26str)%20-%3E%20Self%60%0A%20%20%20%20-%20%60pub%20fn%20get_block_header_by_number(%26self%2C%20number%3A%20u64)%20-%3E%20Result%3CBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20is_syncing(%26self)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%5Bexecution_block_proof.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fexecution_block_proof.rs)%3A%20%60ExecutionBlockProof%60%20contains%20a%20%60block_hash%60%20(execution%20block)%20and%20a%20proof%20of%20its%20inclusion%20in%20the%20%60BeaconBlockBody%60%20tree%20hash.%20The%20%60block_hash%60%20is%20the%2012th%20field%20in%20execution_payload%2C%20which%20is%20the%209th%20field%20in%20%60BeaconBlockBody%60.%20The%20first%204%20elements%20in%20proof%20correspondent%20to%20the%20proof%20of%20inclusion%20of%20%60block_hash%60%20in%20Merkle%20tree%20built%20for%20%60ExecutionPayload%60.%20The%20last%204%20elements%20of%20the%20proof%20of%20%60ExecutionPayload%60%20in%20the%20Merkle%20tree%20are%20built%20on%20high-level%20%60BeaconBlockBody%60%20fields.%20The%20proof%20starts%20from%20the%20leaf.%20It%20has%20the%20following%20structure%20and%20functions%0A%20%20%20%20-%20%60pub%20struct%20ExecutionBlockProof%20%7Bblock_hash%3A%20H256%2C%20proof%3A%20%5BH256%3B%20Self%3A%3APROOF_SIZE%5D%2C%7D%60%0A%20%20%20%20-%20%60pub%20fn%20construct_from_raw_data(block_hash%3A%20%26H256%2C%20proof%3A%20%26%5BH256%3B%20Self%3A%3APROOF_SIZE%5D)%20-%3E%20Self%60%0A%20%20%20%20-%20%60pub%20fn%20construct_from_beacon_block_body(beacon_block_body%3A%20%26BeaconBlockBody%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3CSelf%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_proof(%26self)%20-%3E%20%5BH256%3B%20Self%3A%3APROOF_SIZE%5D%60%0A%20%20%20%20-%20%60pub%20fn%20get_execution_block_hash(%26self)%20-%3E%20H256%60%0A%20%20%20%20-%20%60pub%20fn%20verify_proof_for_hash(%26self%2C%20beacon_block_body_hash%3A%20%26H256%2C)%20-%3E%20Result%3Cbool%2C%20IncorrectBranchLength%3E%60%0A%20%20%20%20-%20%60fn%20merkle_root_from_branch(leaf%3A%20H256%2C%20branch%3A%20%26%5BH256%5D%2C%20depth%3A%20usize%2C%20index%3A%20usize%2C)%20-%3E%20Result%3CH256%2C%20IncorrectBranchLength%3E%60%0A%20%20-%20%5Bbeacon_block_body_merkle_tree.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth_rpc_client%2Fsrc%2Fbeacon_block_body_merkle_tree.rs)%3A%20implements%20merkle%20trees%20for%20the%20Beacon%20and%20the%20ExecutionPayload%0A%20%20%20%20-%20%60BeaconBlockBodyMerkleTree%60%20is%20built%20on%20the%20%60BeaconBlockBody%60%20data%20structure%2C%20where%20the%20leaves%20of%20the%20Merkle%20Tree%20are%20the%20hashes%20of%20the%20high-level%20fields%20of%20the%20%60BeaconBlockBody%60.%20The%20hashes%20of%20each%20element%20are%20produced%20by%20using%20%60ssz%60%20serialization.%0A%20%20%20%20-%20%60ExecutionPayloadMerkleTree%60%20is%20a%20built%20on%20the%20%60ExecutionPayload%60%20data%20structure%2C%20where%20the%20leaves%20of%20the%20Merkle%20Tree%20are%20the%20hashes%20of%20the%20high-level%20fields%20of%20the%20%60ExecutionPayload%60.%20The%20hashes%20of%20each%20element%20are%20produced%20by%20using%20%60ssz%60%20serialization.%20%60ExecutionPayload%60%20is%20one%20of%20the%20field%20in%20BeaconBlockBody.%20The%20hash%20of%20the%20root%20of%20%60ExecutionPlayloadMerkleTree%60%20is%20the%209th%20leaf%20in%20BeaconBlockBody%20Merkle%20Tree.%0A%20%20-%20%5Bbeacon_rpc_client.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth_rpc_client%2Fsrc%2Fbeacon_rpc_client.rs)%3A%20allows%20getting%20beacon%20block%20body%2C%20beacon%20block%20header%20and%20light%20client%20updates%20using%20%5BBeacon%20RPC%20API%5D(https%3A%2F%2Fethereum.github.io%2Fbeacon-APIs%2F).%20It%20has%20the%20following%20functions%0A%20%20%20%20-%20%60pub%20fn%20new(endpoint_url%3A%20%26str%2C%20timeout_seconds%3A%20u64%2C%20timeout_state_seconds%3A%20u64)%20-%3E%20Self%60%3A%20Creates%20%60BeaconRPCClient%60%20for%20the%20given%20BeaconAPI%20%60endpoint_url%60%0A%20%20%20%20-%20%60pub%20fn%20get_beacon_block_body_for_block_id(%26self%2C%20block_id%3A%20%26str%2C)%20-%3E%20Result%3CBeaconBlockBody%3CMainnetEthSpec%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20%60BeaconBlockBody%60%20struct%20for%20the%20given%20%60block_id%60.%20It%20uses%20the%20following%20arguments%0A%20%20%20%20%20%20-%20%60block_id%60%20-%20Block%20identifier.%20Can%20be%20one%20of%3A%20%60%22head%22%20(canonical%20head%20in%20node's%20view)%2C%22genesis%22%2C%20%22finalized%22%2C%20%3Cslot%3E%2C%20%3Chex%20encoded%20blockRoot%20with%200x%20prefix%3E%60(see%20%5Bbeacon-APIs%2F%23%2FBeacon%2FgetBlockV2%5D(https%3A%2F%2Fethereum.github.io%2Fbeacon-APIs%2F%23%2FBeacon%2FgetBlockV2)).%0A%20%20%20%20-%20%60pub%20fn%20get_beacon_block_header_for_block_id(%26self%2C%20block_id%3A%20%26str%2C)%20-%3E%20Result%3Ctypes%3A%3ABeaconBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20%60BeaconBlockHeader%60%20struct%20for%20the%20given%20%60block_id%60.%20It%20uses%20the%20following%20arguments%0A%20%20%20%20%20%20-%20%60block_id%60%20-%20Block%20identifier.%20Can%20be%20one%20of%3A%20%60%22head%22%20(canonical%20head%20in%20node's%20view)%2C%22genesis%22%2C%20%22finalized%22%2C%20%3Cslot%3E%2C%20%3Chex%20encoded%20blockRoot%20with%200x%20prefix%3E%60(see%20%5Bbeacon-APIs%2F%23%2FBeacon%2FgetBlockV2%5D(https%3A%2F%2Fethereum.github.io%2Fbeacon-APIs%2F%23%2FBeacon%2FgetBlockV2)).%0A%20%20%20%20-%20%60pub%20fn%20get_light_client_update(%26self%2C%20period%3A%20u64%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20%60LightClientUpdate%60%20struct%20for%20the%20given%20%60period%60.%20It%20uses%20the%20following%20arguments%0A%20%20%20%20%20%20-%20%60period%60%20-%20period%20id%20for%20which%20%60LightClientUpdate%60%20is%20fetched.%20On%20Mainnet%2C%20one%20period%20consists%20of%20256%20epochs%2C%20and%20one%20epoch%20consists%20of%2032%20slots%0A%20%20%20%20-%20%60pub%20fn%20get_bootstrap(%26self%2C%20block_root%3A%20String%2C)%20-%3E%20Result%3CLightClientSnapshotWithProof%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Fetch%20a%20bootstrapping%20state%20with%20a%20proof%20to%20a%20trusted%20block%20root.%20The%20trusted%20block%20root%20should%20be%20fetched%20with%20similar%20means%20to%20a%20weak%20subjectivity%20checkpoint.%20Only%20block%20roots%20for%20checkpoints%20are%20guaranteed%20to%20be%20available.%0A%20%20%20%20-%20%60pub%20fn%20get_checkpoint_root(%26self)%20-%3E%20Result%3CString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_last_finalized_slot_number(%26self)%20-%3E%20Result%3Ctypes%3A%3ASlot%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Return%20the%20last%20finalized%20slot%20in%20the%20Beacon%20chain%0A%20%20%20%20-%20%60pub%20fn%20get_last_slot_number(%26self)%20-%3E%20Result%3Ctypes%3A%3ASlot%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Return%20the%20last%20slot%20in%20the%20Beacon%20chain%0A%20%20%20%20-%20%60pub%20fn%20get_slot_by_beacon_block_root(%26self%2C%20beacon_block_hash%3A%20H256%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_block_number_for_slot(%26self%2C%20slot%3A%20types%3A%3ASlot)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_finality_light_client_update(%26self)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_finality_light_client_update_with_sync_commity_update(%26self%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_beacon_state(%26self%2C%20state_id%3A%20%26str%2C)%20-%3E%20Result%3CBeaconState%3CMainnetEthSpec%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20is_syncing(%26self)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_json_from_client(client%3A%20%26Client%2C%20url%3A%20%26str)%20-%3E%20Result%3CString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_json_from_raw_request(%26self%2C%20url%3A%20%26str)%20-%3E%20Result%3CString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_body_json_from_rpc_result(block_json_str%3A%20%26str%2C)%20-%3E%20Result%3Cstd%3A%3Astring%3A%3AString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_header_json_from_rpc_result(json_str%3A%20%26str%2C)%20-%3E%20Result%3Cstd%3A%3Astring%3A%3AString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_attested_header_from_light_client_update_json_str(light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CBeaconBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_sync_aggregate_from_light_client_update_json_str(light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CSyncAggregate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_signature_slot(%26self%2C%20light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CSlot%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20%60signature_slot%60%20is%20not%20provided%20in%20the%20current%20API.%20The%20slot%20is%20brute-forced%20until%20%60SyncAggregate%60%20in%20%60BeconBlockBody%60%20in%20the%20current%20slot%20is%20equal%20to%20%60SyncAggregate%60%20in%20%60LightClientUpdate%60%0A%20%20%20%20-%20%60fn%20get_finality_update_from_light_client_update_json_str(%26self%2C%20light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CFinalizedHeaderUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_sync_committee_update_from_light_client_update_json_str(light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CSyncCommitteeUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_period_for_slot(slot%3A%20u64)%20-%3E%20u64%60%0A%20%20%20%20-%20%60pub%20fn%20get_non_empty_beacon_block_header(%26self%2C%20start_slot%3A%20u64%2C)%20-%3E%20Result%3Ctypes%3A%3ABeaconBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20check_block_found_for_slot(%26self%2C%20json_str%3A%20%26str)%20-%3E%20Result%3C()%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%5Bhand_made_finality_light_client_update.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth_rpc_client%2Fsrc%2Fhand_made_finality_light_client_update.rs)%3A%20Has%20two%20implementations%0A%20%20%20%20-%20The%20first%20implementation%20which%20calls%20functions%20in%20the%20second%0A%20%20%20%20%20%20-%20%60pub%20fn%20get_finality_light_client_update(beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20attested_slot%3A%20u64%2C%20include_next_sync_committee%3A%20bool%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60pub%20fn%20get_finality_light_client_update_from_file(beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20file_name%3A%20%26str%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60pub%20fn%20get_light_client_update_from_file_with_next_sync_committee(beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20attested_state_file_name%3A%20%26str%2C%20finality_state_file_name%3A%20%26str%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20The%20second%20implementation%0A%20%20%20%20%20%20-%20%60fn%20get_attested_slot_with_enough_sync_committee_bits_sum(beacon_rpc_client%3A%20%26BeaconRPCClient%2Cattested_slot%3A%20u64%2C)%20-%3E%20Result%3C(u64%2C%20u64)%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_state_from_file(file_name%3A%20%26str)%20-%3E%20Result%3CBeaconState%3CMainnetEthSpec%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_finality_light_client_update_for_state(beacon_rpc_client%3A%20%26BeaconRPCClient%2Cattested_slot%3A%20u64%2C%20signature_slot%3A%20u64%2C%20beacon_state%3A%20BeaconState%3CMainnetEthSpec%3E%2C%20finality_beacon_state%3A%20Option%3CBeaconState%3CMainnetEthSpec%3E%3E%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_next_sync_committee(beacon_state%3A%20%26BeaconState%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3CSyncCommitteeUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20from_lighthouse_beacon_header(beacon_header%3A%20%26BeaconBlockHeader%2C)%20-%3E%20eth_types%3A%3Aeth2%3A%3ABeaconBlockHeader%60%0A%20%20%20%20%20%20-%20%60fn%20get_sync_committee_bits(sync_committee_signature%3A%20%26types%3A%3ASyncAggregate%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3C%5Bu8%3B%2064%5D%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_finality_branch(beacon_state%3A%20%26BeaconState%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3CVec%3CH256%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_finality_update(finality_header%3A%20%26BeaconBlockHeader%2C%20beacon_state%3A%20%26BeaconState%3CMainnetEthSpec%3E%2C%20finalized_block_body%3A%20%26BeaconBlockBody%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3CFinalizedHeaderUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%5Blight_client_snapshot_with_proof.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth_rpc_client%2Fsrc%2Flight_client_snapshot_with_proof.rs)%3A%20contains%20the%20structure%20for%20%60LightClientSnapshotWithProof%60%0A%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20pub%20struct%20LightClientSnapshotWithProof%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20beacon_header%3A%20BeaconBlockHeader%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20current_sync_committee%3A%20SyncCommittee%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20current_sync_committee_branch%3A%20Vec%3CH256%3E%2C%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A-%20%5Beth2near-block-relay-rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs)%20includes%20(but%20not%20limited%20to)%20the%20following%20additional%20components%0A%20%20-%20%5Bconfig.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fconfig.rs)%3A%0A%20%20-%20%5Blast_slot_searcher.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Flast_slot_searcher.rs)%3A%20Implementation%20of%20functions%20for%20searching%20last%20slot%20on%20NEAR%20contract.%20Supports%20both%20binary%20and%20linear%20searches.%0A%20%20%20%20-%20%60pub%20fn%20get_last_slot(%26mut%20self%2C%20last_eth_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60n%20binary_slot_search(%26self%2C%20slot%3A%20u64%2C%20finalized_slot%3A%20u64%2C%20last_eth_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%20%3A%20Search%20for%20the%20slot%20before%20the%20first%20unknown%20slot%20on%20NEAR.%20Assumptions%3A%20(1)%20start_slot%20is%20known%20on%20NEAR%20(2)%20last_slot%20is%20unknown%20on%20NEAR.%20Return%20error%20in%20case%20of%20problem%20with%20network%20connection.%0A%20%20%20%20-%20%60fn%20binsearch_slot_forward(%26self%2C%20slot%3A%20u64%2C%20max_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2Ceth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%20%7B%60%3A%20Search%20for%20the%20slot%20before%20the%20first%20unknown%20slot%20on%20NEAR.%20Assumptions%3A%20(1)%20start_slot%20is%20known%20on%20NEAR%20(2)%20last_slot%20is%20unknown%20on%20NEAR.%20Return%20error%20in%20case%20of%20problem%20with%20network%20connection.%0A%20%20%20%20-%20%60fn%20binsearch_slot_range(%26self%2C%20start_slot%3A%20u64%2C%20last_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Search%20for%20the%20slot%20before%20the%20first%20unknown%20slot%20on%20NEAR.%20Assumptions%3A%20(1)%20start_slot%20is%20known%20on%20NEAR%20(2)%20last_slot%20is%20unknown%20on%20NEAR.%20Return%20error%20in%20case%20of%20problem%20with%20network%20connection.%0A%20%20%20%20-%20%60fn%20linear_slot_search(%26self%2C%20slot%3A%20u64%2C%20finalized_slot%3A%20u64%2C%20last_eth_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20the%20last%20slot%20known%20with%20block%20known%20on%20NEAR.%20%60Slot%60%20--%20expected%20last%20known%20slot.%20%60finalized_slot%60%20--%20last%20finalized%20slot%20on%20NEAR%2C%20assume%20as%20known%20slot.%20%60last_eth_slot%60%20--%20head%20slot%20on%20Eth.%0A%20%20%20%20-%20%60fn%20linear_search_forward(%26self%2C%20slot%3A%20u64%2C%20max_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2Ceth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20the%20slot%20before%20the%20first%20unknown%20block%20on%20NEAR.%20The%20search%20range%20is%20%5Bslot%20..%20max_slot).%20If%20there%20is%20no%20unknown%20block%20in%20this%20range%20max_slot%20-%201%20will%20be%20returned.%20Assumptions%3A%20(1)%20block%20for%20slot%20is%20submitted%20to%20NEAR.%20(2)%20block%20for%20max_slot%20is%20not%20submitted%20to%20NEAR.%0A%20%20%20%20-%20%60fn%20linear_search_backward(%26self%2C%20start_slot%3A%20u64%2C%20last_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20the%20slot%20before%20the%20first%20unknown%20block%20on%20NEAR.%20The%20search%20range%20is%20%5Blast_slot%20..%20start_slot).%20If%20no%20such%20block%20are%20found%20the%20start_slot%20will%20be%20returned.%20Assumptions%3A%20(1)%20block%20for%20start_slot%20is%20submitted%20to%20NEAR%20(2)%20block%20for%20last_slot%20%2B%201%20is%20not%20submitted%20to%20NEAR.%0A%20%20%20%20-%20%60fn%20find_left_non_error_slot(%26self%2C%20left_slot%3A%20u64%2C%20right_slot%3A%20u64%2C%20step%3A%20i8%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20(u64%2C%20bool)%60%3A%20Find%20the%20leftmost%20non-empty%20slot.%20Search%20range%3A%20%5Bleft_slot%2C%20right_slot).%20Returns%20pair%3A%20(1)%20slot_id%20and%20(2)%20is%20this%20block%20already%20known%20on%20Eth%20client%20on%20NEAR.%20Assume%20that%20right_slot%20is%20non-empty%20and%20it's%20block%20were%20submitted%20to%20NEAR%2C%20so%20if%20non%20correspondent%20block%20is%20found%20we%20return%20(right_slot%2C%20false).%0A%20%20%20%20-%20%60fn%20block_known_on_near(%20%26self%2C%20slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2Ceth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Check%20if%20the%20block%20for%20current%20slot%20in%20Eth2%20already%20were%20submitted%20to%20NEAR.%20Returns%20Error%20if%20slot%20doesn't%20contain%20any%20block.%0A%20%20-%20%5Bmain.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs)%3A%20%5BCommand%20Line%20Argument%20Parser%5D(https%3A%2F%2Fdocs.rs%2Fclap%2Flatest%2Fclap%2F)%20used%20to%20run%20the%20Ethereum%20to%20Near%20Block%20Relay.%20It%20contains%20the%20following%20functions%0A%20%20%20%20-%20%60fn%20get_eth_contract_wrapper(config%3A%20%26Config)%20-%3E%20Box%3Cdyn%20ContractWrapper%3E%60%0A%20%20%20%20-%20%60fn%20get_dao_contract_wrapper(config%3A%20%26Config)%20-%3E%20Box%3Cdyn%20ContractWrapper%3E%60%0A%20%20%20%20-%20%60fn%20get_eth_client_contract(config%3A%20%26Config)%20-%3E%20Box%3Cdyn%20EthClientContractTrait%3E%60%0A%20%20%20%20-%20%60fn%20init_log(args%3A%20%26Arguments%2C%20config%3A%20%26Config)%60%0A%20%20%20%20-%20%60fn%20main()%20-%3E%20Result%3C()%2C%20Box%3Cdyn%20std%3A%3Aerror%3A%3AError%3E%3E%60%0A%20%20-%20%5Bnear_rpc_client.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fnear_rpc_client.rs)%0A%20%20%20%20-%20%60pub%20fn%20new(endpoint_url%3A%20%26str)%20-%3E%20Self%60%0A%20%20%20%20-%20%60pub%20fn%20check_account_exists(%26self%2C%20account_id%3A%20%26str)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20is_syncing(%26self)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%0A%23%23%23%23%20Ethereum%20Light%20Client%20Finality%20Update%20Verify%20Components%0A%0A%5Bfinality-update-verify%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Ffinality-update-verify)%20is%20called%20from%20%5Bfn%20verify_bls_signature_for_finality_update%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L422)%20to%20verify%20signatures%20as%20part%20of%20light_client%20updates.%20It%20relies%20heavily%20on%20the%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20codebase%20for%20it's%20consensus%20and%20cryptogrphic%20primitives.%20See%20%5BCryptographic%20Primitives%5D(%23cryptographic-primitives)%20for%20more%20information.%0A%0A-%20Dependencies%20in%20%5BCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2FCargo.toml)%0A%20%20-%20%60eth-types%20%3D%20%7B%20path%20%3D%22..%2F..%2Fcontracts%2Fnear%2Feth-types%2F%22%2C%20features%20%3D%20%5B%22eip1559%22%5D%7D%60%0A%20%20-%20%60bls%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60eth2-utility%20%20%3D%20%7B%20path%20%3D%22..%2F..%2Fcontracts%2Fnear%2Feth2-utility%22%7D%60%0A%20%20-%20%60tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60types%20%3D%20%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60bitvec%20%3D%20%221.0.0%22%60%0A%0A-%20Functions%20in%20%5Blib.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2Fsrc%2Flib.rs)%0A%20%20-%20%60fn%20h256_to_hash256(hash%3A%20H256)%20-%3E%20Hash256%60%0A%20%20-%20%60fn%20tree_hash_h256_to_eth_type_h256(hash%3A%20tree_hash%3A%3AHash256)%20-%3E%20eth_types%3A%3AH256%60%0A%20%20-%20%60fn%20to_lighthouse_beacon_block_header(bridge_beacon_block_header%3A%20%26BeaconBlockHeader%2C)%20-%3E%20types%3A%3ABeaconBlockHeader%60%0A%20%20-%20%60pub%20fn%20is_correct_finality_update(ethereum_network%3A%20%26str%2C%20light_client_update%3A%20%26LightClientUpdate%2C%20%20%20sync_committee%3A%20SyncCommittee%2C)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%0A%23%23%23%23%20Cryptographic%20Primitives%0A%0AFollowing%20are%20cryptographic%20primitives%20used%20in%20the%20%5Beth2-client%20contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-client)%20and%20%5Bfinality-update-verify%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Ffinality-update-verify).%20Many%20are%20from%20the%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20codebase.%20Specifically%20%5Bconsensus%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fconsensus)%20and%20%5Bcrypto%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto)%20functions.%0A%0ASome%20common%20primitives%0A%0A-%20%5Bbitvec%5D(https%3A%2F%2Fdocs.rs%2Fbitvec%2F1.0.1%2Fbitvec%2F)%3A%20Addresses%20memory%20by%20bits%2C%20for%20packed%20collections%20and%20bitfields%0A-%20%5Beth2_serde_utils%5D(https%3A%2F%2Fdocs.rs%2Feth2_serde_utils%2F0.1.0%2Feth2_serde_utils%2F)%3A%20Serialization%20and%20deserialization%20utilities%20useful%20for%20JSON%20representations%20of%20Ethereum%202.0%20types.%0A-%20%5Beth2_hashing%5D(https%3A%2F%2Fdocs.rs%2Feth2_hashing%2F0.2.0%2Feth2_hashing%2F)%3A%20Hashing%20primitives%20used%20in%20Ethereum%202.0%0A-%20%5Bblst%5D(https%3A%2F%2Fdocs.rs%2Fblst%2F0.3.10%2Fblst%2F)%3A%20The%20blst%20crate%20provides%20a%20rust%20interface%20to%20the%20blst%20BLS12-381%20signature%20library.%0A-%20%5Btree_hash%5D(https%3A%2F%2Fdocs.rs%2Ftree_hash%2F0.4.0%2Ftree_hash%2F)%3A%20Efficient%20Merkle-hashing%20as%20used%20in%20Ethereum%202.0%0A-%20%5Beth2_ssz_types%5D(https%3A%2F%2Fdocs.rs%2Feth2_ssz_types%2F0.2.1%2Fssz_types%2F)%3A%20Provides%20types%20with%20unique%20properties%20required%20for%20SSZ%20serialization%20and%20Merklization.%0A%0ASome%20Primitives%20from%20Lighthouse%0A%0A-%20%5Bbls%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls)%3A%20%5BBoneh%E2%80%93Lynn%E2%80%93Shacham%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBLS_digital_signature)%20digital%20signature%20support%0A%20%20-%20%5Bimpls%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls)%3A%20Implementations%0A%20%20%20%20-%20%5Bblst%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Fblst.rs)%0A%20%20%20%20-%20%5Bfake_crypto%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Ffake_crypto.rs)%0A%20%20%20%20-%20%5Bmilagro%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Fmilagro.rs)%3A%20support%20for%20%5BApache%20Milagro%5D(https%3A%2F%2Fmilagro.apache.org%2Fdocs%2Fmilagro-intro%2F)%0A%20%20%20%20-%20%5Bfunctionality%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls%2Fsrc)%0A%20%20%20%20%20%20-%20%5Bgeneric_aggregate_public_key%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_aggregate_public_key.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_aggregate_signature%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_aggregate_signature.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_keypair%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_keypair.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_public_key%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_public_key.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_public_key_bytes%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_public_key_bytes.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_secret_key%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_secret_key.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_signature%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_signature.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_signature_bytes%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_signature_bytes.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_signature_set%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_signature_set.rs)%0A%20%20%20%20%20%20-%20%5Bget_withdrawal_credentials%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fget_withdrawal_credentials.rs)%0A%20%20%20%20%20%20-%20%5Bzeroize_hash%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fzeroize_hash.rs)%0A-%20%5Bmerkle_proof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fmerkle_proof)%0A-%20%5Btree_hash%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Ftree_hash)%0A-%20%5Btypes%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Ftypes%2Fsrc)%3A%20Implements%20Ethereum%202.0%20types%20including%20but%20not%20limited%20to%0A%20%20-%20%5Battestation%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fattestation.rs)%0A%20%20-%20%5Bbeacon_block%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_block.rs)%0A%20%20-%20%5Bbeacon_committee%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_committee.rs)%0A%20%20-%20%5Bbeacon_state%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_state.rs)%0A%20%20-%20%5Bbuilder_bid%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbuilder_bid.rs)%0A%20%20-%20%5Bchain_spec%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fchain_spec.rs)%0A%20%20-%20%5Bcheckpoint%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fcheckpoint.rs)%0A%20%20-%20%5Bcontribution_and_proof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fcontribution_and_proof.rs)%3A%20A%20Validators%20aggregate%20sync%20committee%20contribution%20and%20selection%20proof.%0A%20%20-%20%5Bdeposit%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fdeposit.rs)%3A%20A%20deposit%20to%20potentially%20become%20a%20beacon%20chain%20validator.%0A%20%20-%20%5Benr_fork_id%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fenr_fork_id.rs)%3A%20Specifies%20a%20fork%20which%20allows%20nodes%20to%20identify%20each%20other%20on%20the%20network.%20This%20fork%20is%20used%20in%20a%20nodes%20local%20ENR.%0A%20%20-%20%5Beth_spec%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Feth_spec.rs)%3A%20Ethereum%20Foundation%20specifications.%0A%20%20-%20%5Bexecution_block_hash%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fexecution_block_hash.rs)%0A%20%20-%20%5Bexecution_payload%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fexecution_payload.rs)%0A%20%20-%20%5Bfork%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Ffork.rs)%3A%20Specifies%20a%20fork%20of%20the%20%60BeaconChain%60%2C%20to%20prevent%20replay%20attacks.%0A%20%20-%20%5Bfree_attestation%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Ffree_attestation.rs)%3A%20Note%3A%20this%20object%20does%20not%20actually%20exist%20in%20the%20spec.%20We%20use%20it%20for%20managing%20attestations%20that%20have%20not%20been%20aggregated.%0A%20%20-%20%5Bpayload%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fpayload.rs)%0A%20%20-%20%5Bsigned_aggregate_and_proof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fsigned_aggregate_and_proof.rs)%3A%20A%20Validators%20signed%20aggregate%20proof%20to%20publish%20on%20the%20%60beacon_aggregate_and_proof%60%20gossipsub%20topic.%0A%20%20-%20%5Bsigned_beacon_block%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fsigned_beacon_block.rs)%3A%20A%20%60BeaconBlock%60%20and%20a%20signature%20from%20its%20proposer.%0A%20%20-%20%5Bslot_data%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fslot_data.rs)%3A%20A%20trait%20providing%20a%20%60Slot%60%20getter%20for%20messages%20that%20are%20related%20to%20a%20single%20slot.%20Useful%20in%20making%20parts%20of%20attestation%20and%20sync%20committee%20processing%20generic.%0A%20%20-%20%5Bslot_epoch%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fslot_epoch.rs)%3A%20The%20%60Slot%60%20and%20%60Epoch%60%20types%20are%20defined%20as%20new%20types%20over%20u64%20to%20enforce%20type-safety%20between%20the%20two%20types.%20Note%3A%20Time%20on%20Ethereum%202.0%20Proof%20of%20Stake%20is%20divided%20into%20slots%20and%20epochs.%20One%20slot%20is%2012%20seconds.%20One%20epoch%20is%206.4%20minutes%2C%20consisting%20of%2032%20slots.%20One%20block%20can%20be%20created%20for%20each%20slot.%0A%20%20-%20%5Bsync_aggregate%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fsync_aggregate.rs)%3A%20Create%20a%20%60SyncAggregate%60%20from%20a%20slice%20of%20%60SyncCommitteeContribution%60s.%20Equivalent%20to%20%60process_sync_committee_contributions%60%20from%20the%20spec.%0A%20%20-%20%5Bsync_committee%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fsync_committee.rs)%0A%20%20-%20%5Btree_hash_impls%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Ftree_hash_impls.rs)%3A%20contains%20custom%20implementations%20of%20%60CachedTreeHash%60%20for%20ETH2-specific%20types.%20It%20makes%20some%20assumptions%20about%20the%20layouts%20and%20update%20patterns%20of%20other%20structs%20in%20this%20crate%2C%20and%20should%20be%20updated%20carefully%20whenever%20those%20structs%20are%20changed.%0A%20%20-%20%5Bvalidator%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fvalidator.rs)%3A%20Information%20about%20a%20%60BeaconChain%60%20validator.%0A%0ASome%20Smart%20Contracts%20deployed%20on%20Ethereum%0A%0A-%20%5Bnearprover%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearprover)%0A%20%20-%20%5BProofDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FProofDecoder.sol)%0A%20%20-%20%5BNearProver.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FNearProver.sol)%0A-%20%5Bnearbridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts)%0A%20%20-%20%5BNearDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearDecoder.sol)%3A%20handles%20decoing%20of%20Public%20Keys%2C%20Signatures%2C%20BlockProducers%20and%20LightClientBlocks%20using%20%60Borsh.sol%60%0A%20%20-%20%5BUtils.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FUtils.sol)%3A%20handles%20reading%20and%20writing%20to%20memory%2C%20memoryToBytes%20and%20has%20functions%20such%20as%20%60keccak256Raw%60%20and%20%60sha256Raw%60%0A%20%20-%20%5BBorsh.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FBorsh.sol)%3A%20%5BBorsh%5D(https%3A%2F%2Fborsh.io%2F)%3A%20Binary%20Object%20Representation%20Serializer%20for%20Hashing.%20It%20is%20meant%20to%20be%20used%20in%20security-critical%20projects%20as%20it%20prioritizes%20consistency%2C%20safety%2C%20speed%3B%20and%20comes%20with%20a%20strict%20specification.%0A%20%20-%20%5BEd25519.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FEd25519.sol)%3A%20%5BEd25519%5D(https%3A%2F%2Fed25519.cr.yp.to%2F)%20high-speed%20high-security%20signatures%0A%0ASome%20Primitives%20from%20NEAR%20Rainbow%20Bridge%0A%0A-%20%5Beth-types%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth-types)%3A%20utilities%20to%20serialize%20and%20encode%20eth2%20types%20using%20%5Bborsh%5D(https%3A%2F%2Fborsh.io%2F)%20and%20%5Brlp%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Frlp).%0A-%20%5Beth2-utility%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-utility)%3A%20Utility%20functions%20used%20for%20Ethereum%202.0%20Consensus.%20Functions%20include%0A%20%20-%20%60fn%20from_str(input%3A%20%26str)%20-%3E%20Result%3CNetwork%2C%20Self%3A%3AErr%3E%60%0A%20%20-%20%60pub%20fn%20new(network%3A%20%26Network)%20-%3E%20Self%60%0A%20%20-%20%60pub%20fn%20compute_fork_version(%26self%2C%20epoch%3A%20Epoch)%20-%3E%20Option%3CForkVersion%3E%60%0A%20%20-%20%60pub%20fn%20compute_fork_version_by_slot(%26self%2C%20slot%3A%20Slot)%20-%3E%20Option%3CForkVersion%3E%60%0A%20%20-%20%60pub%20const%20fn%20compute_epoch_at_slot(slot%3A%20Slot)%20-%3E%20u64%60%0A%20%20-%20%60pub%20const%20fn%20compute_sync_committee_period(slot%3A%20Slot)%20-%3E%20u64%60%0A%20%20-%20%60pub%20const%20fn%20floorlog2(x%3A%20u32)%20-%3E%20u32%60%3A%20Compute%20floor%20of%20log2%20of%20a%20u32.%0A%20%20-%20%60pub%20const%20fn%20get_subtree_index(generalized_index%3A%20u32)%20-%3E%20u32%60%0A%20%20-%20%60pub%20fn%20compute_domain(domain_constant%3A%20DomainType%2C%20fork_version%3A%20ForkVersion%2C%20genesis_validators_root%3A%20H256%2C)%20-%3E%20H256%60%0A%20%20-%20%60pub%20fn%20compute_signing_root(object_root%3A%20H256%2C%20domain%3A%20H256)%20-%3E%20H256%60%0A%20%20-%20%60pub%20fn%20get_participant_pubkeys(public_keys%3A%20%26%5BPublicKeyBytes%5D%2C%20sync_committee_bits%3A%20%26BitVec%3Cu8%2C%20Lsb0%3E%2C)%20-%3E%20Vec%3CPublicKeyBytes%3E%60%0A%20%20-%20%60pub%20fn%20convert_branch(branch%3A%20%26%5BH256%5D)%20-%3E%20Vec%3Cethereum_types%3A%3AH256%3E%60%0A%20%20-%20%60pub%20fn%20validate_beacon_block_header_update(header_update%3A%20%26HeaderUpdate)%20-%3E%20bool%60%0A%20%20-%20%60pub%20fn%20calculate_min_storage_balance_for_submitter(max_submitted_blocks_by_account%3A%20u32%2C)%20-%3E%20Balance%60%0A%0A%23%23%23%20Near%20Rainbow%20Bridge%20Near%20Light%20Client%20Walkthrough%0A%0AThe%20following%20is%20a%20walkthrough%20of%20how%20a%20transaction%20executed%20on%20NEAR%20is%20propogated%20to%20Ethereum's%20%5Bnearbridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge).%20See%20%5Bnearbridge%20Cryptographic%20Primitives%5D(%23nearbridge-cryptographic-primitives)%20for%20more%20information%20on%20the%20cryptography%20used.%0A%0A**NearOnEthClient%20Overview**%0A%0A_The%20following%20is%20an%20excerpt%20from%20a%20blog%20by%20near%20on%20%5Beth-near-rainbow-bridge%5D(https%3A%2F%2Fnear.org%2Fblog%2Feth-near-rainbow-bridge%2F)_%0A%0A%3E%20NearOnEthClient%20is%20an%20implementation%20of%20the%20NEAR%20light%20client%20in%20Solidity%20as%20an%20Ethereum%20contract.%20Unlike%20EthOnNearClient%20it%20does%20not%20need%20to%20verify%20every%20single%20NEAR%20header%20and%20can%20skip%20most%20of%20them%20as%20long%20as%20it%20verifies%20at%20least%20one%20header%20per%20NEAR%20epoch%2C%20which%20is%20about%2043k%20blocks%20and%20lasts%20about%20half%20a%20day.%20As%20a%20result%2C%20NearOnEthClient%20can%20memorize%20hashes%20of%20all%20submitted%20NEAR%20headers%20in%20history%2C%20so%20if%20you%20are%20making%20a%20transfer%20from%20NEAR%20to%20Ethereum%20and%20it%20gets%20interrupted%20you%20don%E2%80%99t%20need%20to%20worry%20and%20you%20can%20resume%20it%20any%20time%2C%20even%20months%20later.%20Another%20useful%20property%20of%20the%20NEAR%20light%20client%20is%20that%20every%20NEAR%20header%20contains%20a%20root%20of%20the%20merkle%20tree%20computed%20from%20all%20headers%20before%20it.%20As%20a%20result%2C%20if%20you%20have%20one%20NEAR%20header%20you%20can%20efficiently%20verify%20any%20event%20that%20happened%20in%20any%20header%20before%20it.%0A%3E%0A%3E%20Another%20useful%20property%20of%20the%20NEAR%20light%20client%20is%20that%20it%20only%20accepts%20final%20blocks%2C%20and%20final%20blocks%20cannot%20leave%20the%20canonical%20chain%20in%20NEAR.%20This%20means%20that%20NearOnEthClient%20does%20not%20need%20to%20worry%20about%20forks.%0A%3E%0A%3E%20However%2C%20unfortunately%2C%20NEAR%20uses%20%5BEd25519%5D(https%3A%2F%2Fgithub.com%2Fethereum%2FEIPs%2Fblob%2Fmaster%2FEIPS%2Feip-665.mdx)%20to%20sign%20messages%20of%20the%20validators%20who%20approve%20the%20blocks%2C%20and%20this%20signature%20is%20not%20available%20as%20an%20EVM%20precompile.%20It%20makes%20verification%20of%20all%20signatures%20of%20a%20single%20NEAR%20header%20prohibitively%20expensive.%20So%20technically%2C%20we%20cannot%20verify%20one%20NEAR%20header%20within%20one%20contract%20call%20to%20NearOnEthClient.%20Therefore%20we%20adopt%20the%20%5Boptimistic%20approach%5D(https%3A%2F%2Fmedium.com%2F%40deaneigenmann%2Foptimistic-contracts-fb75efa7ca84)%20where%20NearOnEthClient%20verifies%20everything%20in%20the%20NEAR%20header%20except%20the%20signatures.%20Then%20anyone%20can%20challenge%20a%20signature%20in%20a%20submitted%20header%20within%20a%204-hour%20challenge%20window.%20The%20challenge%20requires%20verification%20of%20a%20single%20Ed25519%20signature%20which%20would%20cost%20about%20500k%20Ethereum%20gas%20(expensive%2C%20but%20possible).%20The%20user%20submitting%20the%20NEAR%20header%20would%20have%20to%20post%20a%20bond%20in%20Ethereum%20tokens%2C%20and%20a%20successful%20challenge%20would%20burn%20half%20of%20the%20bond%20and%20return%20the%20other%20half%20to%20the%20challenger.%20The%20bond%20should%20be%20large%20enough%20to%20pay%20for%20the%20gas%20even%20if%20the%20gas%20price%20increases%20exponentially%20during%20the%204%20hours.%20For%20instance%2C%20a%2020%20ETH%20bond%20would%20cover%20gas%20price%20hikes%20up%20to%2020000%20Gwei.%20This%20optimistic%20approach%20requires%20having%20a%20watchdog%20service%20that%20monitors%20submitted%20NEAR%20headers%20and%20challenges%20any%20headers%20with%20invalid%20signatures.%20For%20added%20security%2C%20independent%20users%20can%20run%20several%20watchdog%20services.%0A%3E%0A%3E%20Once%20EIP665%20is%20accepted%2C%20Ethereum%20will%20have%20the%20Ed25519%20signature%20available%20as%20an%20EVM%20precompile.%20This%20will%20make%20watchdog%20services%20and%20the%204-hour%20challenge%20window%20unnecessary.%0A%3E%0A%3E%20At%20its%20bare%20minimum%2C%20Rainbow%20Bridge%20consists%20of%20EthOnNearClient%20and%20NearOnEthClient%20contracts%2C%20and%20three%20services%3A%20Eth2NearRelay%2C%20Near2EthRelay%2C%20and%20the%20Watchdog.%20We%20might%20argue%20that%20this%20already%20constitutes%20a%20bridge%20since%20we%20have%20established%20a%20cryptographic%20link%20between%20two%20blockchains%2C%20but%20practically%20speaking%20it%20requires%20a%20large%20portion%20of%20additional%20code%20to%20make%20application%20developers%20even%20consider%20using%20the%20Rainbow%20Bridge%20for%20their%20applications.%0A%0A_The%20following%20information%20on%20sending%20assets%20from%20NEAR%20back%20to%20Ethereum%20is%20an%20excerpt%20from%20%5Bhttps%3A%2F%2Fnear.org%2Fbridge%2F%5D(https%3A%2F%2Fnear.org%2Fbridge%2F)._%0A%0A%3E%20Sending%20assets%20from%20NEAR%20back%20to%20Ethereum%20currently%20takes%20a%20maximum%20of%20sixteen%20hours%20(due%20to%20Ethereum%20finality%20times)%20and%20costs%20around%20%2460%20(due%20to%20ETH%20gas%20costs%20and%20at%20current%20ETH%20price).%20These%20costs%20and%20speeds%20will%20improve%20in%20the%20near%20future.%0A%0A%23%23%23%23%20NEAR%20to%20Ethereum%20block%20propagation%20costing%0A%0AThe%20following%20links%20provide%20the%20production%20Ethereum%20addresses%20and%20blockexplorer%20views%20for%20NearBridge.sol%20and%20the%20ERC20%20Locker%0A%0A-%20%5BEthereum%20Mainnet%20Bridge%20addresses%20and%20parameters%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge-client%2Ftree%2Fmain%2Fpackages%2Fclient%23ethereum-mainnet-bridge-addresses-and-parameters)%0A-%20%5BNearBridge.sol%20on%20Ethereum%20Block%20Explorer%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x3fefc5a4b1c02f21cbc8d3613643ba0635b9a873)%0A%20%20-%20%5BSample%20%60addLightClientBlock(bytes%20data)%60%20function%20call%5D(https%3A%2F%2Fetherscan.io%2Ftx%2F0xa0fbf1405747dbc1c1bda1227e46bc7c5feac36c0eeaab051022cfdb268e60cc%2Fadvanced)%0A-%20%5BNEAR%20ERC20Locker%20on%20Ethereum%20Block%20Explorer%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x23ddd3e3692d1861ed57ede224608875809e127f%23code)%0A%0AAt%20time%20of%20writing%20(Oct%2026th%2C%202022).%0A%0A-%20NEAR%20Light%20Client%20Blocks%20are%20propogated%20every%20%604%20hours%60%0A-%20Sample%20Transaction%20fee%20%600.061600109576901025%20Ether%20(%2496.56)%60%0A-%20Daily%20Transaction%20fees%20cost%20approximately%20%60%24600%60%0A-%20_Note%3A%20Infrastructure%20costs%20for%20running%20relayer%2C%20watchdog%2C%20etc%20are%20not%20included._%0A%0A%23%23%23%23%20NEAR%20to%20Ethereum%20block%20propagation%20flow%0A%0A%5BNEAR%20Light%20Client%20Documentation%5D(https%3A%2F%2Fnomicon.io%2FChainSpec%2FLightClient)%20gives%20an%20overview%20of%20how%20light%20clients%20work.%20At%20a%20high%20level%20the%20light%20client%20needs%20to%20fetch%20at%20least%20one%20block%20per%20%5Bepoch%5D(https%3A%2F%2Fdocs.near.org%2Fconcepts%2Fbasics%2Fepoch)%20i.e.%20every%2042%2C200%20blocks%20or%20approxmiately%2012%20hours.%20Also%20Having%20the%20LightClientBlockView%20for%20block%20B%20is%20sufficient%20to%20be%20able%20to%20verify%20any%20statement%20about%20state%20or%20outcomes%20in%20any%20block%20in%20the%20ancestry%20of%20B%20(including%20B%20itself).%0A%0AThe%20current%20scripts%20and%20codebase%20indicates%20that%20a%20block%20would%20be%20fetched%20every%2030%20seconds%20with%20a%20max%20delay%20of%2010%20seconds.%20It%20feels%20that%20this%20would%20be%20expensive%20to%20update%20Ethereum%20so%20frequently.%20%5BNEAR's%20bridge%20documentation%5D(https%3A%2F%2Fnear.org%2Fbridge%2F)%20states%20_Sending%20assets%20from%20NEAR%20back%20to%20Ethereum%20currently%20takes%20a%20maximum%20of%20sixteen%20hours%20(due%20to%20Ethereum%20finality%20times)_.%20This%20seems%20to%20align%20with%20sending%20light%20client%20updates%20once%20per%20NEAR%20epoch.%20The%20block%20fetch%20period%20is%20configurable%20in%20the%20relayer.%0A%0A%3E%20The%20RPC%20returns%20the%20LightClientBlock%20for%20the%20block%20as%20far%20into%20the%20future%20from%20the%20last%20known%20hash%20as%20possible%20for%20the%20light%20client%20to%20still%20accept%20it.%20Specifically%2C%20it%20either%20returns%20the%20last%20final%20block%20of%20the%20next%20epoch%2C%20or%20the%20last%20final%20known%20block.%20If%20there's%20no%20newer%20final%20block%20than%20the%20one%20the%20light%20client%20knows%20about%2C%20the%20RPC%20returns%20an%20empty%20result.%0A%3E%0A%3E%20A%20standalone%20light%20client%20would%20bootstrap%20by%20requesting%20next%20blocks%20until%20it%20receives%20an%20empty%20result%2C%20and%20then%20periodically%20request%20the%20next%20light%20client%20block.%0A%3E%0A%3E%20A%20smart%20contract-based%20light%20client%20that%20enables%20a%20bridge%20to%20NEAR%20on%20a%20different%20blockchain%20naturally%20cannot%20request%20blocks%20itself.%20Instead%20external%20oracles%20query%20the%20next%20light%20client%20block%20from%20one%20of%20the%20full%20nodes%2C%20and%20submit%20it%20to%20the%20light%20client%20smart%20contract.%20The%20smart%20contract-based%20light%20client%20performs%20the%20same%20checks%20described%20above%2C%20so%20the%20oracle%20doesn't%20need%20to%20be%20trusted.%0A%0ABlock%20Submitters%20stake%20ETH%20to%20be%20allowed%20to%20submit%20blocks%20which%20get's%20slashed%20if%20the%20watchdog%20identifies%20blocks%20with%20invalid%20signatures.%0A%0A_Note%3A%20Have%20not%20identified%20how%20the%20block%20submitters%20are%20rewarded%20for%20submitting%20blocks.%20Currently%20have%20only%20identified%20them%20locking%20ETH%20to%20be%20able%20to%20submit%20blocks%20and%20being%20slashed%20if%20they%20submit%20blocks%20with%20invalid%20signatures._%0A%0A-%20%5BLight%20Clients%20are%20deployed%20on%20Ethereum%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Findex.js%23L518)%20via%20the%20CLI%20using%20%5Beth-contracts.js%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Finit%2Feth-contracts.js)%0A%20%20-%20%5Binit-eth-ed25519%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Findex.js%23L505)%3A%20Deploys%20%60Ed25519.sol%60%20see%20more%20information%20under%20%5Bnearbridge%20Cryptographic%20Primitives%5D(%23nearbridge-cryptographic-primitives)%0A%20%20-%20%5Binit-eth-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Findex.js%23L520)%3A%20Deploys%20%60NearBridge.sol%60%20see%20more%20information%20under%20%5BNEAR%20to%20Ethereum%20block%20propagation%20components%5D(%23near-to-ethereum-block-propagation-components).%20It%20takes%20the%20following%20arguments%0A%20%20%20%20-%20%60ethEd25519Address%60%3A%20The%20address%20of%20the%20ECDSA%20signature%20checker%20using%20Ed25519%20curve%20(see%20%5Bhere%5D(https%3A%2F%2Fnbeguier.medium.com%2Fa-real-world-comparison-of-the-ssh-key-algorithms-b26b0b31bfd9))%0A%20%20%20%20-%20%60lockEthAmount%60%3A%20The%20amount%20that%20%60BLOCK_PRODUCERS%60%20need%20to%20deposit%20(in%20wei)to%20be%20able%20to%20provide%20blocks.%20This%20amount%20will%20be%20slashed%20if%20the%20block%20is%20challenged%20and%20proven%20not%20to%20have%20a%20valid%20signature.%20Default%20value%20is%20100000000000000000000%20WEI%20%3D%20100%20ETH.%0A%20%20%20%20-%20%60lockDuration%60%20%3A%2030%20seconds%0A%20%20%20%20-%20%60replaceDuration%60%3A%2060%20seconds%20it%20is%20passed%20in%20nanoseconds%2C%20because%20it%20is%20a%20difference%20between%20NEAR%20timestamps.%0A%20%20%20%20-%20%60ethAdminAddress%60%3A%20Bridge%20Administrator%20Address%0A%20%20%20%20-%20%600%60%20%3A%20Indicates%20nothing%20is%20paused%20%60UNPAUSE_ALL%60%0A%20%20-%20%5Binit-eth-prover%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Findex.js%23L538)%3A%20Deploys%20%60NearProver.sol%60%20see%20more%20information%20under%20%5BNEAR%20to%20Ethereum%20block%20propagation%20components%5D(%23near-to-ethereum-block-propagation-components).%20It%20takes%20the%20following%20arguments%0A%20%20%20%20-%20%60ethClientAddress%60%3A%20Interface%20to%20%60NearBridge.sol%60%0A%20%20%20%20-%20%60ethAdminAddress%60%3A%20Administrator%20address%0A%20%20%20%20-%20%600%60%3A%20paused%20indicator%20defaults%20to%20%60UNPAUSE_ALL%20%3D%200%60%0A-%20%5BRelayer%20is%20Started%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Fcommands%2Fstart%2Fnear2eth-relay.js)%0A%20%20-%20Relayer%20is%20started%20using%20the%20following%20command%0A%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20cli%2Findex.js%20start%20near2eth-relay%20%5C%0A%20%20%20%20%20%20%20%20--eth-node-url%20http%3A%2F%2F127.0.0.1%3A8545%2F%20%5C%0A%20%20%20%20%20%20%20%20--eth-master-sk%200xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80%20%5C%0A%20%20%20%20%20%20%20%20--near-node-url%20https%3A%2F%2Frpc.testnet.near.org%2F%20%5C%0A%20%20%20%20%20%20%20%20--near-network-id%20testnet%20%5C%0A%20%20%20%20%20%20%20%20--eth-client-address%200xe7f1725e7734ce288f8367e1bb143e90bb3f0512%20%5C%0A%20%20%20%20%20%20%20%20--eth-use-eip-1559%20true%20%5C%0A%20%20%20%20%20%20%20%20--near2eth-relay-max-delay%2010%20%5C%0A%20%20%20%20%20%20%20%20--near2eth-relay-block-select-duration%2030%20%5C%0A%20%20%20%20%20%20%20%20--near2eth-relay-after-submit-delay-ms%201000%20%5C%0A%20%20%20%20%20%20%20%20--log-verbose%20true%20%5C%0A%20%20%20%20%20%20%20%20--daemon%20false%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A-%20%5BRelayer%20Logic%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fnear2eth%2Fnear2eth-block-relay%2Findex.js)%0A%20%20-%20Loops%20%60while%20(true)%60%0A%20%20%20%20-%20Get%20the%20bridge%20state%20(including%20%60currentHeight%60%2C%20%60nextTimestamp%60%2C%20%60nextValidAt%60%2C%20%60numBlockProducers%60%20)%0A%20%20%20%20-%20Get%20the%20%60currentBlockHash%60%20the%20hash%20of%20the%20current%20untrursted%20block%20based%20on%20%60lastValidAt%60%0A%20%20%20%20-%20Gets%20the%20%60lastBlock%60%20by%20calling%20the%20NEAR%20rpc%20%60next_light_client_block%60%20using%20the%20hash%20of%20last%20untrusted%20block%20%60bs58.encode(currentBlockHash)%60%0A%20%20%20%20-%20Get's%20the%20%60replaceDuration%60%20by%20%60clientContract.methods.replaceDuration().call()%60%20this%20will%20be%2060%20seconds%20if%20we%20deployed%20%60NearBridge.sol%60%20with%20the%20default%20values%20above%0A%20%20%20%20-%20Sets%20%60nextValidAt%60%20from%20the%20bridge%20state%20%60web3.utils.toBN(bridgeState.nextValidAt)%60%0A%20%20%20%20-%20Sets%20%60replaceDelay%60%20to%200%20then%20updates%20it%20to%20the%20%60nextTimestamp%60%20%2B%20%60replaceDuration%60%20-%20%60lastBlock.inner_lite.timestamp%60%20i.e.%20The%20new%20block%20has%20to%20be%20at%20least%2060%20seconds%20after%20the%20current%20block%20stored%20on%20the%20light%20client.%0A%20%20%20%20-%20Checks%20the%20height%20of%20the%20%60currentHeight%60%20of%20the%20bridge%20is%20less%20than%20the%20%60lastblock%60%20from%20the%20near%20light%20client%20%60(bridgeState.currentHeight%20%3C%20lastBlock.inner_lite.height)%60%0A%20%20%20%20-%20Serializes%20the%20%60lastBlock%60%20using%20Borsh%20and%20check%20that%20the%20block%20is%20suitable%0A%20%20%20%20-%20Checks%20that%20the%20%60replaceDelay%60%20has%20been%20met%2C%20if%20not%20sleeps%20until%20it%20has%0A%20%20%20%20-%20Checks%20that%20the%20Master%20Account%20(the%20one%20submitting%20the%20block)%20has%20enough%20locked%20ETH%20(if%20not%20tries%20to%20deposit%20more).%20So%20that%20it%20can%20be%20slashed%20if%20the%20block%20proposed%20is%20invalid.%0A%20%20%20%20-%20Adds%20the%20light%20client%20block%20%60await%20clientContract.methods.addLightClientBlock(nextBlockSelection.borshBlock).send%60%0A%20%20%20%20%20%20-%20Checks%20%60NearBridge.sol%60%20(the%20light%20client)%20has%20been%20initialized%0A%20%20%20%20%20%20-%20Checks%20%60balanceOf%5Bmsg.sender%5D%20%3E%3D%20lockEthAmount%60%20that%20the%20sender%20has%20locked%20enough%20Eth%20to%20allow%20them%20to%20submit%20blocks%0A%20%20%20%20%20%20-%20Decodes%20the%20nearBlock%20using%20%60Borsh.from(data)%60%20and%20%60borsh.decodeLightClientBlock()%60%0A%20%20%20%20%20%20-%20Commis%20the%20previous%20block%2C%20or%20make%20sure%20that%20it%20is%20OK%20to%20replace%20it%20using%0A%20%20%20%20%20%20%20%20-%20%60lastValidAt%20%3D%200%3B%60%0A%20%20%20%20%20%20%20%20-%20%60blockHashes_%5BcurHeight%5D%20%3D%20untrustedHash%3B%60%0A%20%20%20%20%20%20%20%20-%20%60blockMerkleRoots_%5BcurHeight%5D%20%3D%20untrustedMerkleRoot%3B%60%0A%20%20%20%20%20%20-%20Check%20that%20the%20new%20block's%20height%20is%20greater%20than%20the%20current%20one's.%20%60nearBlock.inner_lite.height%20%3E%20curHeight%60%0A%20%20%20%20%20%20-%20Check%20that%20the%20new%20block%20is%20from%20the%20same%20epoch%20as%20the%20current%20one%2C%20or%20from%20the%20next%20one.%0A%20%20%20%20%20%20-%20Check%20that%20the%20new%20block%20is%20signed%20by%20more%20than%202%2F3%20of%20the%20validators.%0A%20%20%20%20%20%20-%20If%20the%20block%20is%20from%20the%20next%20epoch%2C%20make%20sure%20that%20the%20Block%20producers%20%60next_bps%60%20are%20supplied%20and%20have%20a%20correct%20hash.%0A%20%20%20%20%20%20-%20Add%20the%20Block%20to%20the%20Light%20client%0A%20%20%20%20%20%20%20%20-%20Updates%20untrusted%20information%20to%20this%20block%20including%20%60untrustedHeight%60%2C%20%60untrustedTimestamp%60%2C%20%60untrustedHash%60%2C%20%60untrustedMerkleRoot%60%2C%20%60untrustedNextHash%60%2C%20%60untrustedSignatureSet%60%2C%20%60untrustedNextEpoch%60%0A%20%20%20%20%20%20%20%20-%20If%20%60fromNextEpoch%60%20also%20update%20the%20Block%20Producers%0A%20%20%20%20%20%20%20%20-%20Updates%20the%20%60lastSubmitter%60%20and%20%60lastValidAt%60%0A%20%20%20%20-%20Cleans%20up%20the%20selected%20block%20to%20prevent%20submitting%20the%20same%20block%20again%20%60await%20sleep(afterSubmitDelayMs)%60%0A%20%20%20%20-%20Sets%20the%20HeightGauuges%20to%20the%20correct%20block%20height%0A%20%20%20%20%20%20-%20%60clientHeightGauge.set(Number(BigInt(bridgeState.currentHeight))%60%0A%20%20%20%20%20%20-%20%60chainHeightGauge.set(Number(BigInt(lastBlock.inner_lite.height)))%60%0A%20%20%20%20-%20Sleeps%20for%20delay%20calculated%20from%20the%20maximum%20of%20the%20relayer%20days%20(10%20seconds)%20and%20differnce%20between%20the%20current%20and%20next%20block%20time%20stamps%20and%20%60await%20sleep(1000%20*%20delay)%60%0A%0A%23%23%23%23%20NEAR%20to%20Ethereum%20watchdog%0A%0AThe%20%5Bwatchdog%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fnear2eth%2Fwatchdog%2Findex.js)%20runs%20every%2010%20seconds%20and%20validates%20blocks%20on%20%60NearBridge.sol%60%20challenging%20blocks%20with%20incorrect%20signatures.%20_Note%3A%20It%20uses%20%5Bheep-prometheus%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Fhttp-prometheus.js)%20for%20monitoring%20and%20storing%20block%20and%20producer%20information%20using%20%60gauges%60%20and%20%60counters%60._%0A%0A-%20%5Bwatchdog%20is%20started%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Fcommands%2Fstart%2Fwatchdog.js)%20from%20the%20CLI%0A-%20%5Bwatchdog%20logic%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fnear2eth%2Fwatchdog%2Findex.js)%0A%20%20-%20Initializes%20monitoring%20information%20on%20%60Prometheus%60%0A%20%20%20%20-%20%60const%20httpPrometheus%20%3D%20new%20HttpPrometheus(this.metricsPort%2C%20'near_bridge_watchdog_')%60%0A%20%20%20%20-%20%60const%20lastBlockVerified%20%3D%20httpPrometheus.gauge('last_block_verified'%2C%20'last%20block%20that%20was%20already%20verified')%60%0A%20%20%20%20-%20%60const%20totBlockProducers%20%3D%20httpPrometheus.gauge('block_producers'%2C%20'number%20of%20block%20producers%20for%20current%20block')%60%0A%20%20%20%20-%20%60const%20incorrectBlocks%20%3D%20httpPrometheus.counter('incorrect_blocks'%2C%20'number%20of%20incorrect%20blocks%20found')%60%0A%20%20%20%20-%20%60const%20challengesSubmitted%20%3D%20httpPrometheus.counter('challenges_submitted'%2C%20'number%20of%20blocks%20challenged')%60%0A%20%20-%20Loops%20%60while%20(true)%60%0A%20%20%20%20-%20Gets%20the%20%60bridgeState%60%0A%20%20%20%20-%20Loops%20through%20all%20blockProducers%20checking%20their%20signatures%0A%20%20%20%20-%20%60for%20(let%20i%20%3D%200%3B%20i%20%3C%20numBlockProducers%3B%20i%2B%2B)%60%0A%20%20%20%20%20%20-%20Check%20each%20signature%20%60this.clientContract.methods.checkBlockProducerSignatureInHead(i).call()%60%0A%20%20%20%20%20%20-%20If%20invalid%20challenge%20the%20signature%3A%20%60this.clientContract.methods.challenge(this.ethMasterAccount%2C%20i).encodeABI()%60%20calls%20%5Bchallenge%20function%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearBridge.sol%23L93)%0A%20%20%20%20%20%20%20%20-%20%60function%20challenge(address%20payable%20receiver%2C%20uint%20signatureIndex)%20external%20override%20pausable(PAUSED_CHALLENGE)%60%0A%20%20%20%20%20%20%20%20%20%20-%20checks%20block.timestamp%20is%20less%20than%20lastValidAt%20%60block.timestamp%20%3C%20lastValidAt%2C%60%0A%20%20%20%20%20%20%20%20%20%20-%20Check%20if%20the%20signature%20is%20valid%20%60!checkBlockProducerSignatureInHead(signatureIndex)%60%0A%20%20%20%20%20%20%20%20%20%20-%20slashes%20the%20last%20submitter%20%60balanceOf%5BlastSubmitter%5D%20%3D%20balanceOf%5BlastSubmitter%5D%20-%20lockEthAmount%3B%60%0A%20%20%20%20%20%20%20%20%20%20-%20resets%20lastValidAt%20%60lastValidAt%20%3D%200%3B%60%0A%20%20%20%20%20%20%20%20%20%20-%20Refunds%20half%20of%20the%20funds%20to%20the%20watchdog%20account%20%60receiver.call%7Bvalue%3A%20lockEthAmount%20%2F%202%7D(%22%22)%3B%60%0A%20%20%20%20%20%20-%20Sleeps%20for%20watchdog%20Delay%20seconds%20%60await%20sleep(watchdogDelay%20*%201000)%60%0A%0A%23%23%23%23%20NEAR%20to%20Ethereum%20block%20propagation%20components%0A%0A-%20%5Beth2near-relay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Fcommands%2Fstart%2Feth2near-relay.js)%3A%20Command%20to%20start%20the%20NEAR%20to%20Ethereum%20relay.%20See%20sample%20invocation%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fdocs%2Fdevelopment.md%23near2eth-relay)%0A-%20%5Bnear2eth-block-relay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fnear2eth%2Fnear2eth-block-relay)%20is%20written%20in%20javascript%0A%20%20-%20Has%20%5Bdependencies%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fnear2eth%2Fnear2eth-block-relay%2Fpackage.json)%20including%20%5Brainbow-bridge-utils%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Futils)%20see%20%5Bhere%5D(near-rainbow-bridge-utils)%20for%20more%20information.%20It's%20other%20dependencies%20are%20also%20included%20in%20%60rainbow-bridge-utils%60.%0A%20%20%20%20-%20%5Bethereumjs-util%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fethereumjs-util)%3A%20A%20collection%20of%20utility%20functions%20for%20Ethereum.%0A%20%20-%20Has%20the%20following%20functions%20and%20classes%0A%20%20%20%20-%20%60class%20Near2EthRelay%60%0A%20%20%20%20%20%20-%20%60async%20initialize%20(%7BnearNodeUrl%2C%20nearNetworkId%2C%20ethNodeUrl%2C%20ethMasterSk%2C%20ethClientArtifactPath%2C%20ethClientAddress%2C%20ethGasMultiplier%2C%20metricsPort%20%7D)%60%0A%20%20%20%20%20%20-%20%60async%20withdraw%20(%7BethGasMultiplier%7D)%60%0A%20%20%20%20%20%20-%20%60async%20runInternal%20(%7BsubmitInvalidBlock%2C%20near2ethRelayMinDelay%2C%20near2ethRelayMaxDelay%2C%20near2ethRelayErrorDelay%2C%20near2ethRelayBlockSelectDuration%2C%20near2ethRelayNextBlockSelectDelayMs%2C%20near2ethRelayAfterSubmitDelayMs%2C%20ethGasMultiplier%2C%20ethUseEip1559%2C%20logVerbose%7D)%60%0A%20%20%20%20%20%20-%20%60run%20(options)%20%7Breturn%20this.runInternal(%7B...options%2C%20submitInvalidBlock%3A%20false%7D)%20%7D%60%0A-%20%5BNearBridge.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearBridge.sol)%3A%20Is%20the%20NEAR%20light%20client%20deployed%20on%20ethereum.%0A%20%20-%20It%20imports%20the%20following%20contracts%20(see%20%5Bnearbridge%20cryptographic%20primitives%5D(%23nearbridge-cryptographic-primitives))%0A%20%20%20%20-%20%60import%20%22.%2FAdminControlled.sol%22%3B%60%0A%20%20%20%20-%20%60import%20%22.%2FINearBridge.sol%22%3B%60%0A%20%20%20%20-%20%60import%20%22.%2FNearDecoder.sol%22%3B%60%0A%20%20%20%20-%20%60import%20%22.%2FEd25519.sol%22%3B%60%0A%20%20-%20It%20provides%20the%20following%20structure%20for%20Bridge%20State.%20If%20there%20is%20currently%20no%20unconfirmed%20block%2C%20the%20last%20three%20fields%20are%20zero.%0A%20%20%20%20-%20%60uint%20currentHeight%3B%60%3A%20Height%20of%20the%20current%20confirmed%20block%0A%20%20%20%20-%20%60uint%20nextTimestamp%3B%60%3A%20Timestamp%20of%20the%20current%20unconfirmed%20block%0A%20%20%20%20-%20%60uint%20nextValidAt%3B%60%3A%20Timestamp%20when%20the%20current%20unconfirmed%20block%20will%20be%20confirmed%0A%20%20%20%20-%20%60uint%20numBlockProducers%3B%60%3A%20Number%20of%20block%20producers%20for%20the%20current%20unconfirmed%20block%0A%20%20-%20It%20provides%20the%20following%20storage%0A%20%20%20%20-%20%60uint%20constant%20MAX_BLOCK_PRODUCERS%20%3D%20100%3B%60%3A%20Assumed%20to%20be%20even%20and%20to%20not%20exceed%20256.%0A%20%20%20%20-%20%60struct%20Epoch%20%7Bbytes32%20epochId%3B%20uint%20numBPs%3B%20bytes%20%5BMAX_BLOCK_PRODUCERS%5D%20keys%3B%20bytes32%5BMAX_BLOCK_PRODUCERS%20%2F%202%5D%20packedStakes%3B%20uint256%20stakeThreshold%3B%7D%60%0A%20%20%20%20-%20%60uint256%20public%20lockEthAmount%3B%60%0A%20%20%20%20-%20%60uint256%20public%20lockDuration%3B%60%3A%20lockDuration%20and%20replaceDuration%20shouldn't%20be%20extremely%20big%2C%20so%20adding%20them%20to%20an%20uint64%20timestamp%20should%20not%20overflow%20uint256.%0A%20%20%20%20-%20%60uint256%20public%20replaceDuration%3B%60%3A%20replaceDuration%20is%20in%20nanoseconds%2C%20because%20it%20is%20a%20difference%20between%20NEAR%20timestamps.%0A%20%20%20%20-%20%60Ed25519%20immutable%20edwards%3B%60%0A%20%20%20%20-%20%60uint256%20public%20lastValidAt%3B%60%3A%20End%20of%20challenge%20period.%20If%20zero%2C%20_%60untrusted%60_%20fields%20and%20%60lastSubmitter%60%20are%20not%20meaningful.%0A%20%20%20%20-%20%60uint64%20curHeight%3B%60%0A%20%20%20%20-%20%60uint64%20untrustedHeight%3B%60%3A%20The%20most%20recently%20added%20block.%20May%20still%20be%20in%20its%20challenge%20period%2C%20so%20should%20not%20be%20trusted.%0A%20%20%20%20-%20%60address%20lastSubmitter%3B%60%3A%20Address%20of%20the%20account%20which%20submitted%20the%20last%20block.%0A%20%20%20%20-%20%60bool%20public%20initialized%3B%60%3A%20Whether%20the%20contract%20was%20initialized.%0A%20%20%20%20-%20%60bool%20untrustedNextEpoch%3B%60%0A%20%20%20%20-%20%60bytes32%20untrustedHash%3B%60%0A%20%20%20%20-%20%60bytes32%20untrustedMerkleRoot%3B%60%0A%20%20%20%20-%20%60bytes32%20untrustedNextHash%3B%60%0A%20%20%20%20-%20%60uint256%20untrustedTimestamp%3B%60%0A%20%20%20%20-%20%60uint256%20untrustedSignatureSet%3B%60%0A%20%20%20%20-%20%60NearDecoder.Signature%5BMAX_BLOCK_PRODUCERS%5D%20untrustedSignatures%3B%60%0A%20%20%20%20-%20%60Epoch%5B3%5D%20epochs%3B%60%0A%20%20%20%20-%20%60uint256%20curEpoch%3B%60%0A%20%20%20%20-%20%60mapping(uint64%20%3D%3E%20bytes32)%20blockHashes_%3B%60%0A%20%20%20%20-%20%60mapping(uint64%20%3D%3E%20bytes32)%20blockMerkleRoots_%3B%60%0A%20%20%20%20-%20%60mapping(address%20%3D%3E%20uint256)%20public%20override%20balanceOf%3B%60%0A%20%20-%20It%20provides%20the%20following%20functions%0A%20%20%20%20-%20%60constructor(Ed25519%20ed%2C%20uint256%20lockEthAmount_%2C%20uint256%20lockDuration_%2C%20uint256%20replaceDuration_%2C%20address%20admin_%2C%20uint256%20pausedFlags_)%60%3A%20_Note%3A%20require%20the%20%60lockDuration%60%20(in%20seconds)%20to%20be%20at%20least%20one%20second%20less%20than%20the%20%60replaceDuration%60%20(in%20nanoseconds)%20%60require(replaceDuration*%20%3E%20lockDuration*%20_%201000000000)%3B%60%0A%20%20%20%20%20%20-%20%60ethEd25519Address%60%3A%20The%20address%20of%20the%20ECDSA%20signature%20checker%20using%20Ed25519%20curve%20(see%20%5Bhere%5D(https%3A%2F%2Fnbeguier.medium.com%2Fa-real-world-comparison-of-the-ssh-key-algorithms-b26b0b31bfd9))%0A%20%20%20%20%20%20-%20%60lockEthAmount%60%3A%20The%20amount%20that%20%60BLOCK_PRODUCERS%60%20need%20to%20deposit%20(in%20wei)to%20be%20able%20to%20provide%20blocks.%20This%20amount%20will%20be%20slashed%20if%20the%20block%20is%20challenged%20and%20proven%20not%20to%20have%20a%20valid%20signature.%20Default%20value%20is%20100000000000000000000%20WEI%20%3D%20100%20ETH.%0A%20%20%20%20%20%20-%20%60lockDuration%60%20%3A%2030%20seconds%0A%20%20%20%20%20%20-%20%60replaceDuration%60%3A%2060%20seconds%20it%20is%20passed%20in%20nanoseconds%2C%20because%20it%20is%20a%20difference%20between%20NEAR%20timestamps.%0A%20%20%20%20%20%20-%20%60ethAdminAddress%60%3A%20Bridge%20Administrator%20Address%0A%20%20%20%20%20%20-%20%600%60%20%3A%20Indicates%20nothing%20is%20paused%20%60UNPAUSE_ALL%60%0A%20%20%20%20-%20%60function%20deposit()%20public%20payable%20override%20pausable(PAUSED_DEPOSIT)%60%0A%20%20%20%20-%20%60function%20withdraw()%20public%20override%20pausable(PAUSED_WITHDRAW)%60%0A%20%20%20%20-%20%60function%20challenge(address%20payable%20receiver%2C%20uint%20signatureIndex)%20external%20override%20pausable(PAUSED_CHALLENGE%60%0A%20%20%20%20-%20%60function%20checkBlockProducerSignatureInHead(uint%20signatureIndex)%20public%20view%20override%20returns%20(bool)%60%0A%20%20%20%20-%20%60function%20initWithValidators(bytes%20memory%20data)%20public%20override%20onlyAdmin%60%3A%20The%20first%20part%20of%20initialization%20--%20setting%20the%20validators%20of%20the%20current%20epoch.%0A%20%20%20%20-%20%60function%20initWithBlock(bytes%20memory%20data)%20public%20override%20onlyAdmin%60%3A%20The%20second%20part%20of%20the%20initialization%20--%20setting%20the%20current%20head.%0A%20%20%20%20-%20%60function%20bridgeState()%20public%20view%20returns%20(BridgeState%20memory%20res)%60%0A%20%20%20%20-%20%60function%20bridgeState()%20public%20view%20returns%20(BridgeState%20memory%20res)%60%0A%20%20%20%20-%20%60function%20addLightClientBlock(bytes%20memory%20data)%20public%20override%20pausable(PAUSED_ADD_BLOCK)%60%0A%20%20%20%20-%20%60function%20setBlockProducers(NearDecoder.BlockProducer%5B%5D%20memory%20src%2C%20Epoch%20storage%20epoch)%20internal%60%0A%20%20%20%20-%20%60function%20blockHashes(uint64%20height)%20public%20view%20override%20pausable(PAUSED_VERIFY)%20returns%20(bytes32%20res)%60%0A%20%20%20%20-%20%60function%20blockMerkleRoots(uint64%20height)%20public%20view%20override%20pausable(PAUSED_VERIFY)%20returns%20(bytes32%20res)%60%0A-%20%5BNearProver.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FNearProver.sol)%3A%20Is%20used%20to%20prove%20the%20validity%20of%20NEAR%20blocks%20on%20Ethereum.%0A%20%20-%20It%20imports%20the%20following%20contracts%20(see%20%5Bnearbridge%20cryptographic%20primitives%5D(%23nearbridge-cryptographic-primitives))%0A%20%20%20%20-%20%60import%20%22rainbow-bridge-sol%2Fnearbridge%2Fcontracts%2FNearDecoder.sol%22%3B%60%0A%20%20%20%20-%20%60import%20%22.%2FProofDecoder.sol%22%3B%60%0A%20%20-%20It%20has%20the%20following%20functions%0A%20%20%20%20-%20%60constructor(INearBridge%20_bridge%2C%20address%20_admin%2C%20uint%20_pausedFlags)%60%0A%20%20%20%20%20%20-%20%60_bridge%60%3A%20Interface%20to%20%60NearBridge.sol%60%0A%20%20%20%20%20%20-%20%60_admin%60%3A%20Administrator%20address%0A%20%20%20%20%20%20-%20%60_pausedFlags%60%3A%20paused%20indicator%20defaults%20to%20%60UNPAUSE_ALL%20%3D%200%60%0A%20%20%20%20-%20%60function%20proveOutcome(bytes%20memory%20proofData%2C%20uint64%20blockHeight)%60%0A%20%20%20%20-%20%60function%20_computeRoot(bytes32%20node%2C%20ProofDecoder.MerklePath%20memory%20proof)%20internal%20pure%20returns%20(bytes32%20hash)%60%0A%0A%23%23%23%23%20NEAR%20Rainbow%20Bridge%20Utils%0A%0A%5Brainbow-bridge-utils%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Futils)%20provides%20a%20set%20of%20utilities%20for%20the%20near%20rainbow%20bridge%20written%20in%20javascript.%0A%0A-%20It%20has%20the%20following%20%5Bdependencies%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Fpackage.json)%0A%20%20-%20%5Bbn.js%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fbn.js)%3A%20Big%20number%20implementation%20in%20pure%20javascript%0A%20%20-%20%5Bbsert%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fbsert)%3A%20Minimal%20assert%20with%20type%20checking.%0A%20%20-%20%5Bbs58%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fbs58)%3A%20JavaScript%20component%20to%20compute%20base%2058%20encoding%0A%20%20-%20%5Bchange-case%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fchange-case)%3A%20Transform%20a%20string%20between%20camelCase%2C%20PascalCase%2C%20Capital%20Case%2C%20snake_case%2C%20param-case%2C%20CONSTANT_CASE%20and%20others.%0A%20%20-%20%5Bconfigstore%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fconfigstore)%3A%20Easily%20load%20and%20save%20config%20without%20having%20to%20think%20about%20where%20and%20how%0A%20%20-%20%5Beth-object%5D(https%3A%2F%2Fgithub.com%2Fnear%2Feth-object%23383b6ea68c7050bea4cab6950c1d5a7fa553e72b)%3A%20re-usable%20and%20composable%20objects%20that%20you%20can%20just%20call%20Object.from%20to%20ingest%20new%20data%20to%20serialize%20Ethereum%20Trie%20%2F%20LevelDB%20data%20from%20hex%2C%20buffers%20and%20rpc%20into%20the%20same%20format.%0A%20%20-%20%5Beth-util-lite%5D(https%3A%2F%2Fgithub.com%2Fnear%2Feth-util-lite)%3A%20a%20low-dependency%20utility%20for%20Ethereum.%20It%20replaces%20a%20small%20subset%20of%20the%20ethereumjs-util%20and%20ethjs-util%20APIs.%0A%20%20-%20%5Blodash%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Flodash)%3A%20A%20set%20of%20utilities%20for%20working%20with%20arrays%2C%20numbers%2C%20objects%2C%20strings%2C%20etc.%0A%20%20-%20%5Bnear-api-js%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fnear-api-js)%3A%20JavaScript%20library%20to%20interact%20with%20NEAR%20Protocol%20via%20RPC%20API%0A%20%20-%20%5Bweb3%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fweb3)%3A%20Ethereum%20JavaScript%20API%0A-%20It%20provides%20the%20following%20functions%0A%20%20-%20%5Baddress-watcher%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Faddress-watcher.js)%3A%20Watches%20a%20group%20of%20near%20and%20ethereum%20acccounts%20polling%20NEAR%20and%20Ethereum%20every%20second%20and%20updating%20%60nearAccount.balanceGauge%60%2C%20%60nearAccount.stateStorageGauge%60%20and%20%60ethereumAccount.balanceGauge%60.%0A%20%20-%20%5Bborsh%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Fborsh.js)%3A%20provides%20the%20following%20functions%20for%20Binary%20Object%20Representation%20Serializer%20for%20Hashing%20%5Bborsh%5D(https%3A%2F%2Fborsh.io%2F)%0A%20%20%20%20-%20%60function%20serializeField%20(schema%2C%20value%2C%20fieldType%2C%20writer)%60%0A%20%20%20%20-%20%60function%20deserializeField%20(schema%2C%20fieldType%2C%20reader)%60%0A%20%20%20%20-%20%60function%20serialize%20(schema%2C%20fieldType%2C%20obj)%60%3A%20Serialize%20given%20object%20using%20schema%20of%20the%20form%3A%20%60%7B%20class_name%20-%3E%20%5B%20%5Bfield_name%2C%20field_type%5D%2C%20..%20%5D%2C%20..%20%7D%60%0A%20%20%20%20-%20%60class%20BinaryReader%60%3A%20Includes%20utilities%20to%20read%20numbers%2C%20strings%20arrays%20and%20burggers%0A%20%20%20%20-%20%60function%20deserialize%20(schema%2C%20fieldType%2C%20buffer)%60%0A%20%20%20%20-%20%60const%20signAndSendTransactionAsync%20%3D%20async%20(accessKey%2C%20account%2C%20receiverId%2Cactions)%20%3D%3E%60%0A%20%20%20%20-%20%60const%20txnStatus%20%3D%20async%20(account%2C%20txHash%2C%20retries%20%3D%20RETRY_TX_STATUS%2C%20wait%20%3D%201000)%20%3D%3E%60%0A%20%20%20%20-%20%60function%20getBorshTransactionLastResult%20(txResult)%60%0A%20%20%20%20-%20%60class%20BorshContract%20%7B%60%0A%20%20%20%20%20%20-%20%60constructor%20(borshSchema%2C%20account%2C%20contractId%2C%20options)%60%0A%20%20%20%20%20%20-%20%60async%20accessKeyInit%20()%60%0A%20%20%20%20-%20%60function%20borshify%20(block)%60%0A%20%20%20%20-%20%60function%20borshifyInitialValidators%20(initialValidators)%60%0A%20%20%20%20-%20%60const%20hexToBuffer%20%3D%20(hex)%20%3D%3E%60%0A%20%20%20%20-%20%60const%20readerToHex%20%3D%20(len)%20%3D%3E%60%0A%20%20-%20%5Bborshify-proof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Fborshify-proof.js)%0A%20%20%20%20-%20%60function%20borshifyOutcomeProof%20(proof)%60%0A%20%20-%20%5Brobust%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Frobust.js)%3A%20his%20module%20gives%20a%20few%20utils%20for%20robust%20error%20handling%2C%20and%20wrap%20web3%20with%20error%20handling%20and%20retry%0A%20%20-%20%5Butils%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Futils.js)%0A%20%20%20%20-%20%60async%20function%20setupNear%20(config)%60%0A%20%20%20%20-%20%60async%20function%20setupEth%20(config)%60%0A%20%20%20%20-%20%60async%20function%20setupEthNear%20(config)%60%3A%20Setup%20connection%20to%20NEAR%20and%20Ethereum%20from%20given%20configuration.%0A%20%20%20%20-%20%60function%20remove0x%20(value)%60%3A%20Remove%200x%20if%20prepended%0A%20%20%20%20-%20%60function%20normalizeHex%20(value)%60%0A%20%20%20%20-%20%60async%20function%20accountExists%20(connection%2C%20accountId)%60%0A%20%20%20%20-%20%60async%20function%20createLocalKeyStore%20(networkId%2C%20keyPath)%60%0A%20%20%20%20-%20%60function%20getWeb3%20(config)%60%0A%20%20%20%20-%20%60function%20getEthContract%20(web3%2C%20path%2C%20address)%60%0A%20%20%20%20-%20%60function%20addSecretKey%20(web3%2C%20secretKey)%60%0A%20%20%20%20-%20%60async%20function%20ethCallContract%20(contract%2C%20methodName%2C%20args)%60%3A%20Wrap%20pure%20calls%20to%20Web3%20contract%20to%20handle%20errors%2Freverts%2Fgas%20usage.%0A%0A%23%23%23%23%20nearbridge%20Cryptographic%20Primitives%0A%0A-%20%5BEd25519.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FEd25519.sol)%3A%20Solidity%20implementation%20of%20the%20%5BEd25519%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FEdDSA)%20which%20is%20the%20EdDSA%20signature%20scheme%20using%20SHA-512%20(SHA-2)%20and%20Curve25519%20(see%20%5Bhere%5D(https%3A%2F%2Fnbeguier.medium.com%2Fa-real-world-comparison-of-the-ssh-key-algorithms-b26b0b31bfd9)).%20It%20has%20the%20following%20functions%0A%20%20-%20%60function%20pow22501(uint256%20v)%20private%20pure%20returns%20(uint256%20p22501%2C%20uint256%20p11)%60%20%3A%20Computes%20(v%5E(2%5E250-1)%2C%20v%5E11)%20mod%20p%0A%20%20-%20%60function%20check(bytes32%20k%2C%20bytes32%20r%2C%20bytes32%20s%2C%20bytes32%20m1%2C%20bytes9%20m2)%60%20%3A%20has%20the%20following%20steps%0A%20%20%20%20-%20Step%201%3A%20compute%20SHA-512(R%2C%20A%2C%20M)%0A%20%20%20%20-%20Step%202%3A%20unpack%20k%0A%20%20%20%20-%20Step%203%3A%20compute%20multiples%20of%20k%0A%20%20%20%20-%20Step%204%3A%20compute%20s*G%20-%20h*A%0A%20%20%20%20-%20Step%205%3A%20compare%20the%20points%0A-%20%5BUtils.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FUtils.sol)%3A%20A%20set%20of%20utilty%20functions%20for%20byte%20manipulation%2C%20memory%20updates%20and%20%5Bkeccak%5D(https%3A%2F%2Fkeccak.team%2Fkeccak_specs_summary.html)%20functions.%0A%20%20-%20%60function%20swapBytes2(uint16%20v)%20internal%20pure%20returns%20(uint16)%60%0A%20%20-%20%60function%20swapBytes4(uint32%20v)%20internal%20pure%20returns%20(uint32)%60%0A%20%20-%20%60function%20swapBytes8(uint64%20v)%20internal%20pure%20returns%20(uint64)%60%0A%20%20-%20%60function%20swapBytes16(uint128%20v)%20internal%20pure%20returns%20(uint128)%60%0A%20%20-%20%60function%20swapBytes32(uint256%20v)%20internal%20pure%20returns%20(uint256)%60%0A%20%20-%20%60function%20readMemory(uint%20ptr)%20internal%20pure%20returns%20(uint%20res)%60%0A%20%20-%20%60function%20writeMemory(uint%20ptr%2C%20uint%20value)%20internal%20pure%60%0A%20%20-%20%60function%20memoryToBytes(uint%20ptr%2C%20uint%20length)%20internal%20pure%20returns%20(bytes%20memory%20res)%60%0A%20%20-%20%60function%20keccak256Raw(uint%20ptr%2C%20uint%20length)%20internal%20pure%20returns%20(bytes32%20res)%60%0A%20%20-%20%60function%20sha256Raw(uint%20ptr%2C%20uint%20length)%20internal%20view%20returns%20(bytes32%20res)%60%0A-%20%5BBorsh.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FBorsh.sol)%20provides%20Binary%20Object%20Representation%20Serializer%20for%20Hashing%20%5Bborsh%5D(https%3A%2F%2Fborsh.io%2F)%20functionality%20and%20imports%20%60Utils.sols%60.%20Structures%20and%20functions%20include%0A%20%20-%20%60struct%20Data%20%7Buint%20ptr%3B%20uint%20end%3B%7D%60%0A%20%20-%20%60function%20from(bytes%20memory%20data)%20internal%20pure%20returns%20(Data%20memory%20res)%60%0A%20%20-%20%60function%20requireSpace(Data%20memory%20data%2C%20uint%20length)%20internal%20pure%60%3A%20This%20function%20assumes%20that%20length%20is%20reasonably%20small%2C%20so%20that%20data.ptr%20%2B%20length%20will%20not%20overflow.%20In%20the%20current%20code%2C%20length%20is%20always%20less%20than%202%5E32.%0A%20%20-%20%60function%20read(Data%20memory%20data%2C%20uint%20length)%20internal%20pure%20returns%20(bytes32%20res)%60%0A%20%20-%20%60function%20done(Data%20memory%20data)%20internal%20pure%60%0A%20%20-%20%60function%20peekKeccak256(Data%20memory%20data%2C%20uint%20length)%20internal%20pure%20returns%20(bytes32)%60%3A%20Same%20considerations%20as%20for%20requireSpace.%0A%20%20-%20%60function%20peekSha256(Data%20memory%20data%2C%20uint%20length)%20internal%20view%20returns%20(bytes32)%60%3A%20Same%20considerations%20as%20for%20requireSpace.%0A%20%20-%20%60function%20decodeU8(Data%20memory%20data)%20internal%20pure%20returns%20(uint8)%60%0A%20%20-%20%60function%20decodeU16(Data%20memory%20data)%20internal%20pure%20returns%20(uint16)%60%0A%20%20-%20%60function%20decodeU32(Data%20memory%20data)%20internal%20pure%20returns%20(uint32)%60%0A%20%20-%20%60function%20decodeU64(Data%20memory%20data)%20internal%20pure%20returns%20(uint64)%60%0A%20%20-%20%60function%20decodeU128(Data%20memory%20data)%20internal%20pure%20returns%20(uint128)%60%0A%20%20-%20%60function%20decodeU256(Data%20memory%20data)%20internal%20pure%20returns%20(uint256)%60%0A%20%20-%20%60function%20decodeBytes20(Data%20memory%20data)%20internal%20pure%20returns%20(bytes20)%60%0A%20%20-%20%60function%20decodeBytes32(Data%20memory%20data)%20internal%20pure%20returns%20(bytes32)%60%0A%20%20-%20%60function%20decodeBool(Data%20memory%20data)%20internal%20pure%20returns%20(bool)%60%0A%20%20-%20%60function%20skipBytes(Data%20memory%20data)%20internal%20pure%60%0A%20%20-%20%60function%20decodeBytes(Data%20memory%20data)%20internal%20pure%20returns%20(bytes%20memory%20res)%60%0A-%20%5BNearDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearDecoder.sol)%3A%20Imports%20%60Borsh.sol%60%20and%20has%20utilities%20for%20decoding%20Public%20Keys%2C%20Signatures%2C%20Block%20Producers%2C%20Block%20Headers%20and%20Light%20Client%20Blocks.%0A%20%20-%20%60function%20decodePublicKey(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(PublicKey%20memory%20res)%60%0A%20%20-%20%60function%20decodeSignature(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(Signature%20memory%20res)%60%0A%20%20-%20%60function%20decodeBlockProducer(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(BlockProducer%20memory%20res)%60%0A%20%20-%20%60function%20decodeBlockProducers(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(BlockProducer%5B%5D%20memory%20res)%60%0A%20%20-%20%60function%20decodeOptionalBlockProducers(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(OptionalBlockProducers%20memory%20res)%60%0A%20%20-%20%60function%20decodeOptionalSignature(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(OptionalSignature%20memory%20res)%60%0A%20%20-%20%60function%20decodeBlockHeaderInnerLite(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(BlockHeaderInnerLite%20memory%20res)%60%0A%20%20-%20%60function%20decodeLightClientBlock(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(LightClientBlock%20memory%20res)%60%0A-%20%5BProofDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FProofDecoder.sol)%3A%20Imports%20%60Borsh.sol%60%20and%20%60NearDecoder.sol%60%20and%20has%20utilities%20for%20decoding%20Proofs%2C%20BlockHeader%2C%20ExecutionStatus%2C%20ExecutionOutcome%20and%20MerklePaths.%20Structures%20and%20functions%20include%0A%20%20-%20%60struct%20FullOutcomeProof%20%7BExecutionOutcomeWithIdAndProof%20outcome_proof%3B%20MerklePath%20outcome_root_proof%3B%20BlockHeaderLight%20block_header_lite%3B%20MerklePath%20block_proof%3B%7D%60%0A%20%20-%20%60function%20decodeFullOutcomeProof(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(FullOutcomeProof%20memory%20proof)%60%0A%20%20-%20%60struct%20BlockHeaderLight%20%7Bbytes32%20prev_block_hash%3B%20bytes32%20inner_rest_hash%3B%20NearDecoder.BlockHeaderInnerLite%20inner_lite%3B%20bytes32%20hash%3B%7D%60%0A%20%20-%20%60function%20decodeBlockHeaderLight(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(BlockHeaderLight%20memory%20header)%60%0A%20%20-%20%60struct%20ExecutionStatus%20%7Buint8%20enumIndex%3B%20bool%20unknown%3B%20bool%20failed%3B%20bytes%20successValue%3B%20bytes32%20successReceiptId%3B%7D%60%0A%20%20%20%20-%20%60successValue%60%20indicates%20if%20the%20final%20action%20succeeded%20and%20returned%20some%20value%20or%20an%20empty%20vec.%0A%20%20%20%20-%20%60successReceiptId%60%20is%20the%20final%20action%20of%20the%20receipt%20returned%20a%20promise%20or%20the%20signed%20transaction%20was%20converted%20to%20a%20receipt.%20Contains%20the%20receipt_id%20of%20the%20generated%20receipt.%0A%20%20-%20%60function%20decodeExecutionStatus(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(ExecutionStatus%20memory%20executionStatus)%60%0A%20%20-%20%60struct%20ExecutionOutcome%20%7Bbytes%5B%5D%20logs%3B%20bytes32%5B%5D%20receipt_ids%3B%20uint64%20gas_burnt%3B%20uint128%20tokens_burnt%3B%20bytes%20executor_id%3B%20ExecutionStatus%20status%3B%20bytes32%5B%5D%20merkelization_hashes%3B%7D%60%0A%20%20%20%20-%20%60bytes%5B%5D%20logs%3B%60%3A%20Logs%20from%20this%20transaction%20or%20receipt.%0A%20%20%20%20-%20%60bytes32%5B%5D%20receipt_ids%3B%60%3A%20Receipt%20IDs%20generated%20by%20this%20transaction%20or%20receipt.%0A%20%20%20%20-%20%60uint64%20gas_burnt%3B%60%3A%20The%20amount%20of%20the%20gas%20burnt%20by%20the%20given%20transaction%20or%20receipt.%0A%20%20%20%20-%20%60uint128%20tokens_burnt%3B%60%3A%20The%20total%20number%20of%20the%20tokens%20burnt%20by%20the%20given%20transaction%20or%20receipt.%0A%20%20%20%20-%20%60bytes%20executor_id%3B%60%3A%20Hash%20of%20the%20transaction%20or%20receipt%20id%20that%20produced%20this%20outcome.%0A%20%20%20%20-%20%60ExecutionStatus%20status%60%3A%20Execution%20status.%20Contains%20the%20result%20in%20case%20of%20successful%20execution.%0A%20%20%20%20-%20%60bytes32%5B%5D%20merkelization_hashes%3B%60%0A%20%20-%20%60function%20decodeExecutionOutcome(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(ExecutionOutcome%20memory%20outcome)%60%0A%20%20-%20%60struct%20ExecutionOutcomeWithId%20%7Bbytes32%20id%3B%20ExecutionOutcome%20outcome%3B%20bytes32%20hash%3B%7D%60%0A%20%20%20%20-%20%60bytes32%20id%60%3A%20is%20the%20transaction%20hash%20or%20the%20receipt%20ID.%0A%20%20-%20%60function%20decodeExecutionOutcomeWithId(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(ExecutionOutcomeWithId%20memory%20outcome)%60%0A%20%20-%20%60struct%20MerklePathItem%20%7Bbytes32%20hash%3B%20uint8%20direction%3B%7D%60%0A%20%20%20%20-%20%60uint8%20direction%60%3A%20where%200%20%3D%20left%2C%201%20%3D%20right%0A%20%20-%20%60function%20decodeMerklePathItem(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(MerklePathItem%20memory%20item)%60%0A%20%20-%20%60struct%20MerklePath%20%7BMerklePathItem%5B%5D%20items%3B%7D%60%0A%20%20-%20%60function%20decodeMerklePath(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(MerklePath%20memory%20path)%60%0A%20%20-%20%60struct%20ExecutionOutcomeWithIdAndProof%20%7BMerklePath%20proof%3B%20bytes32%20block_hash%3B%20ExecutionOutcomeWithId%20outcome_with_id%3B%7D%60%0A%20%20-%20%60function%20decodeExecutionOutcomeWithIdAndProof(Borsh.Data%20memory%20data)internal%20view%20returns%20(ExecutionOutcomeWithIdAndProof%20memory%20outcome)%60%0A%0A%23%23%23%20Token%20Transfer%20Process%20Flow%0A%0AThe%20%5BNEAR%20Rainbow%20Bridge%5D(https%3A%2F%2Fnear.org%2Fbridge%2F)%20uses%20ERC-20%20connectors%20which%20are%20developed%20in%20%5Brainbow-token-connector%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector)%20and%20%5Brainbow-bridge-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge-client).%20Also%20see%20%5Beth2near-fun-transfer.md%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fdocs%2Fworkflows%2Feth2near-fun-transfer.mdx).%0A%0AFollowing%20is%20an%20overview%20of%20timing%20and%20anticipated%20costs%0A%0A-%20Once%20on%20NEAR%2C%20transactions%20will%20confirm%20in%201-2%20seconds%20and%20cost%20well%20under%20%241%20in%20most%20cases.%0A-%20Since%20the%20Bridge%20requires%20transactions%20on%20Ethereum%20for%20NEAR%20and%20Ethereum%2C%20the%20following%20costs%20are%20expected.%0A-%20Sending%20assets%20from%20Ethereum%20to%20NEAR%20takes%20about%20six%20minutes%20(20%20blocks)%20and%20for%20ERC-20%20costs%20about%20%2410%20on%20average.%0A-%20Sending%20assets%20from%20NEAR%20back%20to%20Ethereum%20currently%20takes%20a%20maximum%20of%20sixteen%20hours%20(due%20to%20Ethereum%20finality%20times)%20and%20costs%20around%20%2460%20(due%20to%20ETH%20gas%20costs%20and%20at%20current%20ETH%20price).%20These%20costs%20and%20speeds%20will%20improve%20in%20the%20near%20future.%0A%0A_Note%3A%20This%20uses%20Ethreum%20%5BERC20%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-20)%20and%20NEAR%20%5BNEP-141%5D(https%3A%2F%2Fnomicon.io%2FStandards%2FTokens%2FFungibleToken%2FCore)%20initally%20developed%20for%20%5BNEP-21%5D(https%3A%2F%2Fgithub.com%2Fnear%2FNEPs%2Fpull%2F21)_%0A%0A**%5BGeneric%20ERC-20%2FNEP-141%20connector%20for%20Rainbow%20Bridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2FREADME.mdx)**%0A%0A**Specification**%0A%0A**Ethereum's%20side**%0A%0A%60%60%60solidity%0Acontract%20ERC20Locker%20%7B%0A%20%20constructor(bytes%20memory%20nearTokenFactory%2C%20INearProver%20prover)%20public%3B%0A%20%20function%20lockToken(IERC20%20token%2C%20uint256%20amount%2C%20string%20memory%20accountId)%20public%3B%0A%20%20function%20unlockToken(bytes%20memory%20proofData%2C%20uint64%20proofBlockHeader)%20public%3B%0A%7D%0A%60%60%60%0A%0A**NEAR's%20side**%0A%0A%60%60%60rust%0Astruct%20BridgeTokenFactory%20%7B%0A%20%20%20%20%2F%2F%2F%20The%20account%20of%20the%20prover%20that%20we%20can%20use%20to%20prove%0A%20%20%20%20pub%20prover_account%3A%20AccountId%2C%0A%20%20%20%20%2F%2F%2F%20Address%20of%20the%20Ethereum%20locker%20contract.%0A%20%20%20%20pub%20locker_address%3A%20%5Bu8%3B%2020%5D%2C%0A%20%20%20%20%2F%2F%2F%20Hashes%20of%20the%20events%20that%20were%20already%20used.%0A%20%20%20%20pub%20used_events%3A%20UnorderedSet%3CVec%3Cu8%3E%3E%2C%0A%20%20%20%20%2F%2F%2F%20Mapping%20from%20Ethereum%20tokens%20to%20NEAR%20tokens.%0A%20%20%20%20pub%20tokens%3A%20UnorderedMap%3CEvmAddress%2C%20AccountId%3E%3B%0A%7D%0A%0Aimpl%20BridgeTokenFactory%20%7B%0A%20%20%20%20%2F%2F%2F%20Initializes%20the%20contract.%0A%20%20%20%20%2F%2F%2F%20%60prover_account%60%3A%20NEAR%20account%20of%20the%20Near%20Prover%20contract%3B%0A%20%20%20%20%2F%2F%2F%20%60locker_address%60%3A%20Ethereum%20address%20of%20the%20locker%20contract%2C%20in%20hex.%0A%20%20%20%20%23%5Binit%5D%0A%20%20%20%20pub%20fn%20new(prover_account%3A%20AccountId%2C%20locker_address%3A%20String)%20-%3E%20Self%3B%0A%0A%20%20%20%20%2F%2F%2F%20Relays%20the%20lock%20event%20from%20Ethereum.%0A%20%20%20%20%2F%2F%2F%20Uses%20prover%20to%20validate%20that%20proof%20is%20correct%20and%20relies%20on%20a%20canonical%20Ethereum%20chain.%0A%20%20%20%20%2F%2F%2F%20Send%20%60mint%60%20action%20to%20the%20token%20that%20is%20specified%20in%20the%20proof.%0A%20%20%20%20%23%5Bpayable%5D%0A%20%20%20%20pub%20fn%20deposit(%26mut%20self%2C%20proof%3A%20Proof)%3B%0A%0A%20%20%20%20%2F%2F%2F%20A%20callback%20from%20BridgeToken%20contract%20deployed%20under%20this%20factory.%0A%20%20%20%20%2F%2F%2F%20Is%20called%20after%20tokens%20are%20burned%20there%20to%20create%20an%20receipt%20result%20%60(amount%2C%20token_address%2C%20recipient_address)%60%20for%20Ethereum%20to%20unlock%20the%20token.%0A%20%20%20%20pub%20fn%20finish_withdraw(token_account%3A%20AccountId%2C%20amount%3A%20Balance%2C%20recipient%3A%20EvmAddress)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Transfers%20given%20NEP-21%20token%20from%20%60predecessor_id%60%20to%20factory%20to%20lock.%0A%20%20%20%20%2F%2F%2F%20On%20success%2C%20leaves%20a%20receipt%20result%20%60(amount%2C%20token_address%2C%20recipient_address)%60.%0A%20%20%20%20%23%5Bpayable%5D%0A%20%20%20%20pub%20fn%20lock(%26mut%20self%2C%20token%3A%20AccountId%2C%20amount%3A%20Balance%2C%20recipient%3A%20String)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Relays%20the%20unlock%20event%20from%20Ethereum.%0A%20%20%20%20%2F%2F%2F%20Uses%20prover%20to%20validate%20that%20proof%20is%20correct%20and%20relies%20on%20a%20canonical%20Ethereum%20chain.%0A%20%20%20%20%2F%2F%2F%20Uses%20NEP-21%20%60transfer%60%20action%20to%20move%20funds%20to%20%60recipient%60%20account.%0A%20%20%20%20%23%5Bpayable%5D%0A%20%20%20%20pub%20fn%20unlock(%26mut%20self%2C%20proof%3A%20Proof)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Deploys%20BridgeToken%20contract%20for%20the%20given%20EVM%20address%20in%20hex%20code.%0A%20%20%20%20%2F%2F%2F%20The%20name%20of%20new%20NEP21%20compatible%20contract%20will%20be%20%3Chex(evm_address)%3E.%3Ccurrent_id%3E.%0A%20%20%20%20%2F%2F%2F%20Expects%20~35N%20attached%20to%20cover%20storage%20for%20BridgeToken.%0A%20%20%20%20%23%5Bpayable%5D%0A%20%20%20%20pub%20fn%20deploy_bridge_token(address%3A%20String)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Checks%20if%20Bridge%20Token%20has%20been%20successfully%20deployed%20with%20%60deploy_bridge_token%60.%0A%20%20%20%20%2F%2F%2F%20On%20success%2C%20returns%20the%20name%20of%20NEP21%20contract%20associated%20with%20given%20address%20(%3Chex(evm_address)%3E.%3Ccurrent_id%3E).%0A%20%20%20%20%2F%2F%2F%20Otherwise%2C%20returns%20%22token%20do%20not%20exists%22%20error.%0A%20%20%20%20pub%20fn%20get_bridge_token_account_id(%26self%2C%20address%3A%20String)%20-%3E%20AccountId%3B%0A%7D%0A%0Astruct%20BridgeToken%20%7B%0A%20%20%20controller%3A%20AccountId%2C%0A%20%20%20token%3A%20Token%2C%20%2F%2F%20uses%20https%3A%2F%2Fgithub.com%2Filblackdragon%2Fbalancer-near%2Ftree%2Fmaster%2Fnear-lib-rs%0A%7D%0A%0Aimpl%20BridgeToken%20%7B%0A%20%20%20%20%2F%2F%2F%20Setup%20the%20Token%20contract%20with%20given%20factory%2Fcontroller.%0A%20%20%20%20pub%20fn%20new(controller%3A%20AccountId)%20-%3E%20Self%3B%0A%0A%20%20%20%20%2F%2F%2F%20Mint%20tokens%20to%20given%20user.%20Only%20can%20be%20called%20by%20the%20controller.%0A%20%20%20%20pub%20fn%20mint(%26mut%20self%2C%20account_id%3A%20AccountId%2C%20amount%3A%20Balance)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Withdraw%20tokens%20from%20this%20contract.%0A%20%20%20%20%2F%2F%2F%20Burns%20sender's%20tokens%20and%20calls%20controller%20to%20create%20event%20for%20relaying.%0A%20%20%20%20pub%20fn%20withdraw(%26mut%20self%2C%20amount%3A%20U128%2C%20recipient%3A%20String)%20-%3E%20Promise%3B%0A%7D%0A%0Aimpl%20FungibleToken%20for%20BridgeToken%20%7B%0A%20%20%20%2F%2F%20see%20example%20https%3A%2F%2Fgithub.com%2Filblackdragon%2Fbalancer-near%2Fblob%2Fmaster%2Fbalancer-pool%2Fsrc%2Flib.rs%23L329%0A%7D%0A%60%60%60%0A%0A**Setup%20new%20ERC-20%20on%20NEAR**%0A%0ATo%20setup%20token%20contract%20on%20NEAR%20side%2C%20anyone%20can%20call%20%60%3Cbridge_token_factory%3E.deploy_bridge_token(%3Cerc20%3E)%60%20where%20%60%3Cerc20%3E%60%20is%20the%20address%20of%20the%20token.%0AWith%20this%20call%20must%20attach%20the%20amount%20of%20%24NEAR%20to%20cover%20storage%20for%20(at%20least%2030%20%24NEAR%20currently).%0A%0AThis%20will%20create%20%60%3C%3Chex(erc20)%3E.%3Cbridge_token_factory%3E%3E%60%20NEP141-compatible%20contract.%0A%0A**Usage%20flow%20Ethereum%20-%3E%20NEAR**%0A%0A1.%20User%20sends%20%60%3Cerc20%3E.approve(%3Cerc20locker%3E%2C%20%3Camount%3E)%60%20Ethereum%20transaction.%0A2.%20User%20sends%20%60%3Cerc20locker%3E.lock(%3Cerc20%3E%2C%20%3Camount%3E%2C%20%3Cdestination%3E)%60%20Ethereum%20transaction.%20This%20transaction%20will%20create%20%60Locked%60%20event.%0A3.%20Relayers%20will%20be%20sending%20Ethereum%20blocks%20to%20the%20%60EthClient%60%20on%20NEAR%20side.%0A4.%20After%20sufficient%20number%20of%20confirmations%20on%20top%20of%20the%20mined%20Ethereum%20block%20that%20contain%20the%20%60lock%60%20transaction%2C%20user%20or%20relayer%20can%20call%20%60BridgeTokenFactory.deposit(proof)%60.%20Proof%20is%20the%20extracted%20information%20from%20the%20event%20on%20Ethereum%20side.%0A5.%20%60BridgeTokenFactory.deposit%60%20function%20will%20call%20%60EthProver%60%20and%20verify%20that%20proof%20is%20correct%20and%20relies%20on%20a%20block%20with%20sufficient%20number%20of%20confirmations.%0A6.%20%60EthProver%60%20will%20return%20callback%20to%20%60BridgeTokenFactory%60%20confirming%20that%20proof%20is%20correct.%0A7.%20%60BridgeTokenFactory%60%20will%20call%20%60%3C%3Chex(erc20)%3E.%3Cbridge_token_factory%3E%3E.mint(%3Cnear_account_id%3E%2C%20%3Camount%3E)%60.%0A8.%20User%20can%20use%20%60%3C%3Chex(erc20)%3E.%3Cbridge_token_factory%3E%3E%60%20token%20in%20other%20applications%20now%20on%20NEAR.%0A%0A**Usage%20flow%20NEAR%20-%3E%20Ethereum**%0A%0A1.%20%60token-locker%60%20locks%20NEP141%20tokens%20on%20NEAR%20side.%0A%0ATo%20deposit%20funds%20into%20the%20locker%2C%20call%20%60ft_transfer_call%60%20where%20%60msg%60%20contains%20Ethereum%20address%20the%20funds%20should%20arrive%20to.%0AThis%20will%20emit%20%60%3Ctoken%3A%20String%2C%20amount%3A%20u128%2C%20recipient%20address%3A%20EthAddress%3E%60%20(which%20arrives%20to%20%60deposit%60%20on%20Ethereum%20side).%0A%0AAccepts%20%60Unlock(token%3A%20String%2C%20sender_id%3A%20EthAddress%2C%20amount%3A%20u256%2C%20recipient%3A%20String)%60%20event%20from%20Ethereum%20side%20with%20a%20proof%2C%20verifies%20its%20correctness.%0AIf%20%60recipient%60%20contains%20'%3A'%20will%20split%20it%20into%20%60%3Crecipient%2C%20msg%3E%60%20and%20do%20%60ft_transfer_call(recipient%2C%20amount%2C%20None%2C%20msg)%60.%20Otherwise%20will%20%60ft_transfer%60%20to%20%60recipient%60.%0A%0ATo%20get%20metadata%20of%20token%20to%20Ethereum%2C%20need%20to%20call%20%60log_metadata%60%2C%20which%20will%20create%20a%20result%20%60%3Ctoken%3A%20String%2C%20name%3A%20String%2C%20symbol%3A%20String%2C%20decimals%3A%20u8%2C%20blockHeight%3A%20u64%3E%60.%0A%0A2.%20%60erc20-bridge-token%60%20-%20%60BridgeTokenFactory%60%20and%20%60BridgeToken%60%20Ethereum%20contracts.%0A%0A%60BridgeTokenFactory%60%20creates%20new%20%60BridgeToken%60%20that%20correspond%20to%20specific%20token%20account%20id%20on%20NEAR%20side.%0A%0A%60BridgeTokenFactory%60%20receives%20%60deposit%60%20with%20proof%20from%20NEAR%2C%20verify%20them%20and%20mint%20appropriate%20amounts%20on%20recipient%20addresses.%0A%0ACalling%20%60withdraw%60%20will%20burn%20tokens%20of%20this%20user%20and%20will%20generate%20event%20%60%3Ctoken%3A%20String%2C%20sender_id%3A%20EthAddress%2C%20amount%3A%20u256%2C%20recipient%3A%20String%3E%60%20that%20can%20be%20relayed%20to%20%60token-factory%60.%0A%0A**Caveats**%0A%0AGenerally%2C%20this%20connector%20allows%20any%20account%20to%20call%20%60ft_transfer_call%60%20opening%20for%20potential%20malicious%20tokens%20to%20be%20bridged%20to%20Ethereum.%0AThe%20expectation%20here%20is%20that%20on%20Ethereum%20side%2C%20the%20token%20lists%20will%20handle%20this%2C%20as%20it's%20the%20same%20attack%20model%20as%20malicious%20tokens%20on%20Uniswap%20and%20other%20DEXs.%0A%0AUsing%20Ethereum%20%60BridgeTokenFactory%60%20contract%20can%20always%20resolve%20Ethereum%20address%20of%20a%20contract%20back%20to%20NEAR%20one%20to%20check%20that%20it%20is%20indeed%20bridging%20token%20from%20NEAR%20and%20is%20created%20by%20this%20factory.%0A%0A**Testing**%0A%0ATesting%20Ethereum%20side%0A%0A%60%60%60%0Acd%20erc20-connector%0Ayarn%0Ayarn%20run%20test%0A%60%60%60%0A%0ATesting%20NEAR%20side%0A%0A%60%60%60%0Amake%20res%2Fbridge_token_factory.wasm%0Acargo%20test%20--all%0A%60%60%60%0A%0A%23%23%23%23%20Token%20Transfer%20Components%0A%0A_Note%3A%20This%20uses%20Ethreum%20%5BERC20%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-20)%20and%20NEAR%20%5BNEP-141%5D(https%3A%2F%2Fnomicon.io%2FStandards%2FTokens%2FFungibleToken%2FCore)%20initally%20developed%20for%20%5BNEP-21%5D(https%3A%2F%2Fgithub.com%2Fnear%2FNEPs%2Fpull%2F21)_%0A%0A-%20%5Brainbow-token-connector%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector)%0A%20%20-%20NEAR%20rust%20based%20contracts%0A%20%20%20%20-%20%5Bbridge-common%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Fbridge-common)%3A%20Common%20functions%20for%20NEAR%2C%20currently%20only%20%60pub%20fn%20parse_recipient(recipient%3A%20String)%20-%3E%20Recipient%60%0A%20%20%20%20-%20%5Bbridge-token-factory%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Fbridge-token-factory)%3A%20Functions%20for%20managing%20tokens%20on%20NEAR%20including%20but%20not%20limited%20to%20%60update_metadata%60%2C%20%60deposit%60%2C%20%60get_tokens%60%2C%20%60finish_updating_metadata%60%2C%20%60finish_updating_metadata%60%2C%20%60finish_withdraw%60%2C%20%60deploy_bridge_token%60%2C%20%60get_bridge_token_account_id%60%2C%20%60is_used_proof%60%2C%20%60record_proof%60%0A%20%20%20%20-%20%5Bbridge-token%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Fbridge-token)%3A%20Token%20functions%20on%20NEAR%20including%20but%20not%20limited%20to%20%60mint%60%20and%20%60withdraw%60%0A%20%20%20%20-%20%5Btoken-locker%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Ftoken-locker)%3A%20Token%20Locker%20functions%20on%20NEAR%20including%20but%20not%20limited%20to%20%60withdraw%60%2C%20%60finish_deposit%60%2C%20%60is_used_proof%60%0A%20%20-%20Ethereum%20solidity%20based%20contracts%0A%20%20%20%20-%20%5Berc20-bridge-token%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Ferc20-bridge-token)%3A%20Ethereum%20Bridge%20token%20contracts%20including%20but%20not%20limited%20to%0A%20%20%20%20%20%20-%20%5BBridgeToken.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FBridgeToken.sol)%0A%20%20%20%20%20%20-%20%5BBridgeTokenFactory.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FBridgeTokenFactory.sol)%0A%20%20%20%20%20%20-%20%5BBridgeTokenProxy.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FBridgeTokenProxy.sol)%0A%20%20%20%20%20%20-%20%5BProofConsumer.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FProofConsumer.sol)%0A%20%20%20%20%20%20-%20%5BResultsDecoder%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FResultsDecoder.sol)%0A%20%20%20%20-%20%5Berc20-connector%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Ferc20-connector)%3A%20has%20%5BERC20Locker.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-connector%2Fcontracts%2FERC20Locker.sol)%20which%20is%20used%20to%20lock%20and%20unlock%20tokens.%20It%20is%20linked%20to%20the%20bridge%20token%20factory%20on%20NEAR%20side.%20It%20also%20links%20to%20the%20prover%20that%20it%20uses%20to%20unlock%20the%20tokens.%20(see%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts))%0A%0A%23%23%23%23%20References%0A%0A-%20%5BLighthouse%20Documentation%5D(https%3A%2F%2Flighthouse-book.sigmaprime.io%2F)%3A%20ETH%202.0%20Consensus%20Client%20Lighthouse%20documentation%0A%0A-%20%5BLighthouse%20Github%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse)%3A%20ETH%202.0%20Consensus%20Client%20Lighthouse%20Github%0A-%20%5BLighthouse%3A%20Blog%5D(https%3A%2F%2Flighthouse-blog.sigmaprime.io%2F)%3A%20ETH%202.0%20Consensus%20Client%20Lighthouse%20Blog%0A-%20%5Beth2near-block-relay-rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs)%0A-%20%5Bnearbridge%20contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge)%0A-%20%5Bnearprover%20contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearprover)%0A%0A%23%23%23%20Prysm%20Light%20Client%0A%0A%23%23%23%23%20References%0A%0A-%20%5BPrysm%3A%20Light-client%20(WORK%20IN%20PROGRESS)%5D(https%3A%2F%2Fgithub.com%2Fjinfwhuang%2Fprysm%2Fpull%2F5)%3A%0A%0A-%20%5BPrysm%3A%20Light-client%20Client%20WIP%5D(https%3A%2F%2Fgithub.com%2Fjinfwhuang%2Fprysm%2Ftree%2Fjin-light%2Fcmd%2Flight-client%23light-client-client)%3A%20An%20independent%20light%20client%20client%0A-%20%5BPrysm%3A%20light-client%20server%20PR%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fpull%2F10034)%3A%20a%20feature%20PR%20that%20implements%20the%20basic%20production%20level%20changes%20to%20Prysm%20to%20comply%20as%20a%20light-client%20server%20to%20begin%20serving%20light%20client%20requests%0A%0A%23%23%20Harmony%20Merkle%20Mount%20Range%0A%0A-%20Harmony%20%5BMMR%20PR%20Review%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F3872)%20and%20%5Blatest%20PR%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198%2Ffiles)%20uses%20Merkle%20Mountain%20Ranges%20to%20facilitate%20light%20client%20development%20against%20Harmony's%20sharded%20Proof%20of%20Stake%20Chain%0A%0A%23%23%20Near%20Rainbow%20Bridge%20Review%0A%0AThe%20%5BNEAR%20Rainbow%20bridge%5D(https%3A%2F%2Fnear.org%2Fbridge%2F)%20is%20in%20%5Bthis%20github%20repository%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge)%20and%20is%20supported%20by%20%5BAurora-labs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near).%0A%0AIt%20recently%20provided%20support%20for%20ETH%202.0%20in%20this%20%5BPull%20Request%20(762)%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fpull%2F762).%0A%0AIt%20interacts%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20for%20Ethereum%202.0%20Consensus%20and%20tree_hash%20functions%20as%20well%20as%20bls%20signatures.%0A%0AHigh%20Level%20their%20architecture%20is%20similar%20to%20the%20Horizon%20Bridge%20but%20with%20some%20key%20differences%2C%20including%20but%20not%20limited%20to%0A%0A-%20interacting%20with%20the%20beacon%20chain%20now%20for%20finality%20%60is_correct_finality_update%60%20%5Bsee%20finality-update-verify%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2Fsrc%2Flib.rs%23L36)%0A-%20Updated%20execution%20block%20proof%20to%20use%20the%20BEACONRPCClient%20and%20with%20an%20updated%20merkle%20tree%0A%20%20-%20Design%20can%20be%20found%20in%20%5BPR-762%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fpull%2F762)%0A%0A%23%23%23%20NEAR%20Rainbow%20Bridge%3A%20Component%20Overview%0A%0AThe%20following%20smart%20contracts%20are%20deployed%20on%20NEAR%20and%20work%20in%20conjunction%20with%20eth2near%20bridging%20functionality%20to%20propogate%20blocks%20from%20Ethereum%20to%20NEAR.%0A%0A**%5C*Note**%20here%20we%20will%20focus%20on%20the%20%60eth2-client%60%20for%20ETH%202.0%20Proof%20of%20Stake%20Bridging%20however%20if%20interested%20in%20however%20there%20is%20also%20an%20%60eth-client%60%20which%20was%20used%20for%20ETH%201.0%20Proof%20of%20Work%20Integration%20using%20%5Brust-ethhash%5D(https%3A%2F%2Fgithub.com%2Fnearprotocol%2Frust-ethash).%5C*%0A%0A-%20%5BSmart%20Contracts%20Deployed%20on%20NEAR%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear)%0A%20%20-%20%5Beth2-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-client)%20implements%20the%20Ethereum%20Light%20Client%20on%20Near%0A%20%20%20%20-%20it%20provides%20functions%20including%20but%20not%20limited%20to%3A%0A%20%20%20%20%20%20-%20validate%20the%20light%20client%0A%20%20%20%20%20%20-%20verify%20the%20finality%20branch%0A%20%20%20%20%20%20-%20verify%20bls%20signatures%0A%20%20%20%20%20%20-%20update%20finalized%20headers%0A%20%20%20%20%20%20-%20updates%20the%20submittes%0A%20%20%20%20%20%20-%20prune%20finalized%20blocks.%0A%20%20%20%20-%20It%20interacts%20with%20the%20beach%20chain%2C%20uses%20%5BBorsh%5D(https%3A%2F%2Fborsh.io%2F)%20for%20serialization%20and%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20for%20Ethereum%202.0%20Consensus%20and%20tree_hash%20functions%20as%20well%20as%20bls%20signatures.%20See%20%5Bhere%5D(https%3A%2F%2Flighthouse-book.sigmaprime.io%2F)%20for%20more%20information%20on%20lighthouse.%20Below%20is%20a%20list%20of%20dependencies%20from%20%5Beth2-client%2FCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2FCargo.toml)%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bdependencies%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20ethereum-types%20%3D%20%220.9.2%22%0A%20%20%20%20%20%20%20%20%20%20%20%20eth-types%20%3D%20%20%7B%20path%20%3D%20%22..%2Feth-types%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth2-utility%20%3D%20%20%7B%20path%20%3D%20%22..%2Feth2-utility%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20merkle_proof%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20bls%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20optional%20%3D%20true%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%2C%20default-features%20%3D%20false%2C%20features%20%3D%20%5B%22milagro%22%5D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20admin-controlled%20%3D%20%20%7B%20path%20%3D%20%22..%2Fadmin-controlled%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20near-sdk%20%3D%20%224.0.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20borsh%20%3D%20%220.9.3%22%0A%20%20%20%20%20%20%20%20%20%20%20%20bitvec%20%3D%20%221.0.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A-%20%5Beth2near%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near)%20supports%20the%20relaying%20of%20blocks%20and%20the%20verification%20of%20finality%20between%20etherum%20and%20Near.%20It%20has%20the%20following%20components%0A%20%20-%20%5Bcontract_wrapper%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Fcontract_wrapper)%3A%20provides%20rust%20wrappers%20for%20interacting%20with%20the%20%5Bsolidity%20contracts%20on%20near%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear)%0A%20%20%20%20-%20Contracts%20include%20(from%20%5B%60lib.rs%60%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Flib.rs))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20contract_wrapper_trait%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20dao_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20dao_eth_client_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20dao_types%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20errors%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20eth_client_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20eth_client_contract_trait%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20file_eth_client_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20near_contract_wrapper%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20sandbox_contract_wrapper%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20utils%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Bcontract_wrapper%2FCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2FCargo.toml))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bdependencies%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20borsh%20%3D%20%220.9.3%22%0A%20%20%20%20%20%20%20%20%20%20%20%20futures%20%3D%20%220.3.21%22%0A%20%20%20%20%20%20%20%20%20%20%20%20async-std%20%3D%20%221.12.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-sdk%20%3D%20%224.0.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-jsonrpc-client%20%3D%20%22%3D0.4.0-beta.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-crypto%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-primitives%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-chain-configs%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-jsonrpc-primitives%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20tokio%20%3D%20%7B%20version%20%3D%20%221.1%22%2C%20features%20%3D%20%5B%22rt%22%2C%20%22macros%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20reqwest%20%3D%20%7B%20version%20%3D%20%220.11%22%2C%20features%20%3D%20%5B%22blocking%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20serde_json%20%3D%20%221.0.74%22%0A%20%20%20%20%20%20%20%20%20%20%20%20serde%20%3D%20%7B%20version%20%3D%20%221.0%22%2C%20features%20%3D%20%5B%22derive%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth-types%20%3D%20%7B%20path%20%3D%20%22..%2F..%2Fcontracts%2Fnear%2Feth-types%2F%22%2C%20features%20%3D%20%5B%22eip1559%22%5D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20workspaces%20%3D%20%220.5.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20anyhow%20%3D%20%221.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20%5Beth2near-block-relay-rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs)%20is%20built%20in%20rust%20and%20integrates%20with%20the%20Ethereum%202.0%20lgihthouse%20consensus%20client%20to%20propogate%20blocks%20to%20near.%0A%20%20%20%20-%20Functionality%20includes%20(from%20%5Blib.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Flib.rs))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20beacon_block_body_merkle_tree%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20beacon_rpc_client%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20config%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20eth1_rpc_client%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20eth2near_relay%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20execution_block_proof%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20hand_made_finality_light_client_update%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20init_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20last_slot_searcher%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20light_client_snapshot_with_proof%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20logger%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20near_rpc_client%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20prometheus_metrics%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20relay_errors%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Beth2near-block-relay-rs%2FCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2FCargo.toml))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20types%20%3D%20%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20merkle_proof%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth2_hashing%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth2_ssz%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20eth-types%20%3D%20%7B%20path%20%3D%20%22..%2F..%2Fcontracts%2Fnear%2Feth-types%2F%22%2C%20features%20%3D%20%5B%22eip1559%22%5D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth2-utility%20%20%3D%20%7B%20path%20%3D%20%22..%2F..%2Fcontracts%2Fnear%2Feth2-utility%22%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20contract_wrapper%20%3D%20%7B%20path%20%3D%20%22..%2Fcontract_wrapper%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20finality-update-verify%20%3D%20%7B%20path%20%3D%20%22..%2Ffinality-update-verify%22%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20log%20%3D%20%7B%20version%20%3D%20%220.4%22%2C%20features%20%3D%20%5B%22std%22%2C%20%22serde%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20serde_json%20%3D%20%221.0.74%22%0A%20%20%20%20%20%20%20%20%20%20%20%20serde%20%3D%20%7B%20version%20%3D%20%221.0%22%2C%20features%20%3D%20%5B%22derive%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20ethereum-types%20%3D%20%220.9.2%22%0A%20%20%20%20%20%20%20%20%20%20%20%20reqwest%20%3D%20%7B%20version%20%3D%20%220.11%22%2C%20features%20%3D%20%5B%22blocking%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20clap%20%3D%20%7B%20version%20%3D%20%223.1.6%22%2C%20features%20%3D%20%5B%22derive%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20tokio%20%3D%20%7B%20version%20%3D%20%221.1%22%2C%20features%20%3D%20%5B%22macros%22%2C%20%22rt%22%2C%20%22time%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20env_logger%20%3D%20%220.9.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20borsh%20%3D%20%220.9.3%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-sdk%20%3D%20%224.0.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20futures%20%3D%20%7B%20version%20%3D%20%220.3.21%22%2C%20default-features%20%3D%20false%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20async-std%20%3D%20%221.12.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20hex%20%3D%20%22*%22%0A%20%20%20%20%20%20%20%20%20%20%20%20toml%20%3D%20%220.5.9%22%0A%20%20%20%20%20%20%20%20%20%20%20%20atomic_refcell%20%3D%20%220.1.8%22%0A%20%20%20%20%20%20%20%20%20%20%20%20bitvec%20%3D%20%22*%22%0A%20%20%20%20%20%20%20%20%20%20%20%20primitive-types%20%3D%20%220.7.3%22%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20near-jsonrpc-client%20%3D%20%22%3D0.4.0-beta.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-crypto%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-primitives%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-chain-configs%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-jsonrpc-primitives%20%3D%20%220.14.0%22%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20prometheus%20%3D%20%7B%20version%20%3D%20%220.9%22%2C%20features%20%3D%20%5B%22process%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20lazy_static%20%3D%20%221.4%22%0A%20%20%20%20%20%20%20%20%20%20%20%20warp%20%3D%20%220.2%22%0A%20%20%20%20%20%20%20%20%20%20%20%20thread%20%3D%20%22*%22%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20%5Beth2near-block-relay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay)%20is%20built%20using%20javascript%20and%20supports%20ETH%201.0%20Proof%20of%20Work%20(%60ethhash%60)%20using%20merkle%20patrica%20trees.%0A%20%20%20%20-%20key%20classes%20from%20%5Bindex.js%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay%2Findex.js)%20include%0A%20%20%20%20%20%20-%20%60Ethashproof%60%20%3A%20which%20has%20functions%20to%20%60getParseBlock%60%20and%20%60calculateNextEpoch%60%0A%20%20%20%20%20%20-%20%60Eth2NearRelay%60%20%3A%20which%20interacts%20with%20the%20%60ethClientContract%60%20and%20has%20a%20%60run()%60%20function%20which%20loops%20through%20relaying%20blocks%20and%20includes%20additional%20functions%20such%20as%20%60getParseBlock%60%20%2C%20%60submitBlock%60%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Bpackage.json%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay%2Fpackage.json))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%22dependencies%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22bn.js%22%3A%20%22%5E5.1.3%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22eth-object%22%3A%20%22https%3A%2F%2Fgithub.com%2Fnear%2Feth-object%23383b6ea68c7050bea4cab6950c1d5a7fa553e72b%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22eth-util-lite%22%3A%20%22near%2Feth-util-lite%23master%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22%40ethereumjs%2Fblock%22%3A%20%22%5E3.4.0%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22merkle-patricia-tree%22%3A%20%22%5E2.1.2%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22prom-client%22%3A%20%22%5E12.0.0%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22promisfy%22%3A%20%22%5E1.2.0%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22rainbow-bridge-utils%22%3A%20%221.0.0%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22got%22%3A%20%22%5E11.8.5%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20%5Bethhashproof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Fethashproof)%3A%20is%20a%20commandline%20to%20calculate%20proof%20data%20for%20an%20ethash%20POW%2C%20it%20is%20used%20by%20project%20%60SmartPool%60%20and%20a%20decentralizedbridge%20between%20Etherum%20and%20EOS%20developed%20by%20Kyber%20Network%20team.%20It%20is%20written%20in%20%60GO%60.%0A%20%20%20%20-%20Features%20Include%201.%20Calculate%20merkle%20root%20of%20the%20ethash%20dag%20dataset%20with%20given%20epoch%202.%20Calculate%20merkle%20proof%20of%20the%20pow%20(dataset%20elements%20and%20their%20merkle%20proofs)%20given%20the%20pow%20submission%20with%20given%20block%20header%203.%20Generate%20dag%20datase%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Bethahsproof%2Fgo.mod%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fethashproof%2Fgo.mod))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20require%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%20github.com%2Fdeckarep%2Fgolang-set%20v1.7.1%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20github.com%2Fedsrzf%2Fmmap-go%20v1.0.0%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20github.com%2Fethereum%2Fgo-ethereum%20v1.10.4%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20github.com%2Fhashicorp%2Fgolang-lru%20v0.5.5-0.20210104140557-80c98217689d%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20golang.org%2Fx%2Fcrypto%20v0.0.0-20210322153248-0c34fe9e7dc2%0A%20%20%20%20%20%20%20%20%20%20%20%20)%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20%5Bfinality-update-verify%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Ffinality-update-verify)%20checks%20and%20updates%20finality%20using%20the%20lighthouse%20beacon%20blocks.%0A%20%20%20%20-%20Functions%20include%20(from%20%5Blib.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2Fsrc%2Flib.rs))%0A%20%20%20%20%20%20-%20%60fn%20h256_to_hash256(hash%3A%20H256)%20-%3E%20Hash256%60%0A%20%20%20%20%20%20-%20%60fn%20tree_hash_h256_to_eth_type_h256(hash%3A%20tree_hash%3A%3AHash256)%20-%3E%20eth_types%3A%3AH256%60%0A%20%20%20%20%20%20-%20%60fn%20to_lighthouse_beacon_block_header(bridge_beacon_block_header%3A%20%26BeaconBlockHeader%2C)%20-%3E%20types%3A%3ABeaconBlockHeader%20%7Btypes%3A%3ABeaconBlockHeader%60%0A%20%20%20%20%20%20-%20%60pub%20fn%20is_correct_finality_update(ethereum_network%3A%20%26str%2C%20light_client_update%3A%20%26LightClientUpdate%2C%20sync_committee%3A%20SyncCommittee%2C%20)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Bfinality-update-verify%2FCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2FCargo.toml))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bdependencies%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20eth-types%20%3D%20%7B%20path%20%3D%22..%2F..%2Fcontracts%2Fnear%2Feth-types%2F%22%2C%20features%20%3D%20%5B%22eip1559%22%5D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20bls%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20eth2-utility%20%20%3D%20%7B%20path%20%3D%22..%2F..%2Fcontracts%2Fnear%2Feth2-utility%22%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20types%20%3D%20%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20bitvec%20%3D%20%221.0.0%22%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Bdev-dependencies%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20eth2_to_near_relay%20%3D%20%7B%20path%20%3D%20%22..%2Feth2near-block-relay-rs%22%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20serde_json%20%3D%20%221.0.74%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20serde%20%3D%20%7B%20version%20%3D%20%221.0%22%2C%20features%20%3D%20%5B%22derive%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20toml%20%3D%20%220.5.9%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0AThe%20following%20smart%20contracts%20are%20deployed%20on%20Ethereum%20and%20used%20for%20propogating%20blocks%20from%20NEAR%20to%20Ethereum.%0A%0A-%20%5BSmart%20Contracts%20deployed%20on%20Ethereum%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth)%20including%0A%20%20-%20%5BNear%20Bridge%20Contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts)%20including%20%5BNearBridge.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearBridge.sol)%20which%20the%20interface%20%5BINearBridge.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FINearBridge.sol)%0A%20%20-%20Interface%20Overview%0A%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20interface%20INearBridge%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20event%20BlockHashAdded(uint64%20indexed%20height%2C%20bytes32%20blockHash)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20event%20BlockHashReverted(uint64%20indexed%20height%2C%20bytes32%20blockHash)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20blockHashes(uint64%20blockNumber)%20external%20view%20returns%20(bytes32)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20blockMerkleRoots(uint64%20blockNumber)%20external%20view%20returns%20(bytes32)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20balanceOf(address%20wallet)%20external%20view%20returns%20(uint256)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20deposit()%20external%20payable%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20withdraw()%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20initWithValidators(bytes%20calldata%20initialValidators)%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20initWithBlock(bytes%20calldata%20data)%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20addLightClientBlock(bytes%20calldata%20data)%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20challenge(address%20payable%20receiver%2C%20uint256%20signatureIndex)%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20checkBlockProducerSignatureInHead(uint256%20signatureIndex)%20external%20view%20returns%20(bool)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20Key%20Storage%20items%20for%20epoch%20and%20block%20information%0A%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20Epoch%5B3%5D%20epochs%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20uint256%20curEpoch%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20mapping(uint64%20%3D%3E%20bytes32)%20blockHashes_%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20mapping(uint64%20%3D%3E%20bytes32)%20blockMerkleRoots_%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20mapping(address%20%3D%3E%20uint256)%20public%20override%20balanceOf%3B%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20Signing%20and%20Serializing%20Primitives%0A%20%20%20%20-%20%5BNearDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearDecoder.sol)%3A%20handles%20decoing%20of%20Public%20Keys%2C%20Signatures%2C%20BlockProducers%20and%20LightClientBlocks%20using%20%60Borsh.sol%60%0A%20%20%20%20-%20%5BUtils.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FUtils.sol)%3A%20handles%20reading%20and%20writing%20to%20memory%2C%20memoryToBytes%20and%20has%20functions%20such%20as%20%60keccak256Raw%60%20and%20%60sha256Raw%60%0A%20%20%20%20-%20%5BBorsh.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FBorsh.sol)%3A%20%5BBorsh%5D(https%3A%2F%2Fborsh.io%2F)%3A%20Binary%20Object%20Representation%20Serializer%20for%20Hashing.%20It%20is%20meant%20to%20be%20used%20in%20security-critical%20projects%20as%20it%20prioritizes%20consistency%2C%20safety%2C%20speed%3B%20and%20comes%20with%20a%20strict%20specification.%0A%20%20%20%20-%20%5BEd25519.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FEd25519.sol)%3A%20%5BEd25519%5D(https%3A%2F%2Fed25519.cr.yp.to%2F)%20high-speed%20high-security%20signatures%0A%0A%20%20-%20%5BNear%20Prover%20Contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts)%0A%20%20%20%20-%20%5BNearProver.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FNearProver.sol)%3A%20Has%20a%20%60proveOutcome%60%20which%20validates%20the%20outcome%20merkle%20proof%20and%20the%20block%20proof%20is%20valid%20using%20%60_computeRoot%60%20which%20is%20passed%20in%20a%20%60bytes32%20node%2C%20ProofDecoder.MerklePath%20memory%20proof%60%0A%20%20%20%20-%20%5BProofDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FProofDecoder.sol)%3A%20Uses%20MerklePaths%20to%20provide%20decoding%20functions%20such%20as%20%60decodeExecutionStatus%60%2C%20%60decodeExecutionOutcome%60%2C%20%60decodeExecutionOutcomeWithId%60%2C%20%60decodeMerklePathItem%60%2C%20%60decodeMerklePath%60%20and%20%60decodeExecutionOutcomeWithIdAndProof%60.%20It%20relies%20on%20the%20primitives%20%60Borsh.sol%60%20and%20%60NearDecoder.sol%60%20above.%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./ethereum-near-DFMvq_-z.js"),[]),path:"/research/code/ethereum-near.html",type:"mdx",filePath:"research/code/ethereum-near.mdx",content:"%23%20Ethereum%20Near%20Bridging%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AThis%20document%20reviews%20the%20Ethereum%202.0%20specifications%20including%20Light%20Client%20specifications.%20It%20does%20a%20detailed%20review%20of%20the%20NEAR%20Rainbow%20Bridge%20implementation%20and%20also%20includes%20references%20to%20Harmony's%20design%20to%20support%20Mountain%20Merkle%20Ranges.%0A%0AKey%20differences%20in%20supporting%20Ethereum%202.0%20(Proof%20of%20Stake)%20vs%20Proof%20of%20Work%20involves%20removing%20the%20ETHHASH%20logic%20and%20SPV%20client%20and%20potentially%20replacing%20with%20MMR%20trees%20per%20epoch%20and%20checkpoints%20similar%20to%20Harmony%20Light%20Client%20on%20Ethereum.%0A%0A%23%23%20Ethereum%202.0%20Specifications%0A%0A-%20%5BBeacon%20Chain%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fmaster%2Fspecs%2Fphase0%2Fbeacon-chain.mdx)%0A-%20%5BExtended%20light%20client%20protocol%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fextended_light_client_protocol)%0A-%20%5BAltair%20Light%20Client%20--%20Light%20Client%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%0A-%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%0A-%20%5BBeacon%20Chain%20Fork%20Choice%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Ffork-choice.mdx)%0A%0A%23%23%20Ethereum%202.0%20Light%20Client%20Support%0A%0AHow%20light%20client%20implementation%20and%20verification%20of%20ETH%20and%20ETH2%20can%20be%20done%20via%20smart%20contracts%20in%20other%20protocols.%0A%0AFor%20this%20we%20review%20three%20Key%20items%0A%0A1.%20Light%20Client%20Specifications%20including%20%5BExtended%20light%20client%20protocol%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fextended_light_client_protocol)%20described%20by%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%20and%20the%20%5BThe%20Portal%20Network%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs)%0A2.%20Near%20Rainbow%20Bridge%20Light%20Client%20Walkthrough%20include%20%5Beth2near-block-relay-rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs)%2C%20%5Bnearbridge%20contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge)%20and%20%5Bnearprover%20contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearprover)%0A3.%20Prysm%20light-client%20%5Bprototype%5D(https%3A%2F%2Fgithub.com%2Fjinfwhuang%2Fprysm%2Ftree%2Fjin-light%2Fcmd%2Flight-client)%0A%0A_Note%3A%20Time%20on%20Ethereum%202.0%20Proof%20of%20Stake%20is%20divided%20into%20slots%20and%20epochs.%20One%20slot%20is%2012%20seconds.%20One%20epoch%20is%206.4%20minutes%2C%20consisting%20of%2032%20slots.%20One%20block%20can%20be%20created%20for%20each%20slot._%0A%0A%23%23%23%20Light%20Client%20Specification%0A%0A%23%23%23%23%20Altair%20Light%20Client%20--%20Sync%20Protocol%0A%0A-%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%3A%20The%20beacon%20chain%20is%20designed%20to%20be%20light%20client%20friendly%20for%20constrained%20environments%20to%20access%20Ethereum%20with%20reasonable%20safety%20and%20liveness.%0A%0A%20%20Such%20environments%20include%20resource-constrained%20devices%20(e.g.%20phones%20for%20trust-minimized%20wallets)and%20metered%20VMs%20(e.g.%20blockchain%20VMs%20for%20cross-chain%20bridges).%0A%0A%20%20This%20document%20suggests%20a%20minimal%20light%20client%20design%20for%20the%20beacon%20chain%20thatuses%20sync%20committees%20introduced%20in%20%5Bthis%20beacon%20chain%20extension%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fbeacon-chain.mdx).%0A%0A%20%20Additional%20documents%20describe%20how%20the%20light%20client%20sync%20protocol%20can%20be%20used%3A%0A%20%20-%20%5BFull%20node%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Ffull-node.mdx)%0A%20%20-%20%5BLight%20client%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%0A%20%20-%20%5BNetworking%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.mdx)%0A%0A-%20%5BLight%20client%20sync%20process%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%3A%20explains%20how%20light%20clients%20MAY%20obtain%20light%20client%20data%20to%20sync%20with%20the%20network.%0A%20%201.%20The%20light%20client%20MUST%20be%20configured%20out-of-band%20with%20a%20spec%2Fpreset%20(including%20fork%20schedule)%2C%20with%20%60genesis_state%60%20(including%20%60genesis_time%60%20and%20%60genesis_validators_root%60)%2C%20and%20with%20a%20trusted%20block%20root.%20The%20trusted%20block%20SHOULD%20be%20within%20the%20weak%20subjectivity%20period%2C%20and%20its%20root%20SHOULD%20be%20from%20a%20finalized%20%60Checkpoint%60.%0A%20%202.%20The%20local%20clock%20is%20initialized%20based%20on%20the%20configured%20%60genesis_time%60%2C%20and%20the%20current%20fork%20digest%20is%20determined%20to%20browse%20for%20and%20connect%20to%20relevant%20light%20client%20data%20providers.%0A%20%203.%20The%20light%20client%20fetches%20a%20%5B%60LightClientBootstrap%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%20object%20for%20the%20configured%20trusted%20block%20root.%20The%20%60bootstrap%60%20object%20is%20passed%20to%20%5B%60initialize_light_client_store%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23initialize_light_client_store)%20to%20obtain%20a%20local%20%5B%60LightClientStore%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientstore).%0A%20%204.%20The%20light%20client%20tracks%20the%20sync%20committee%20periods%20%60finalized_period%60%20from%20%60store.finalized_header.slot%60%2C%20%60optimistic_period%60%20from%20%60store.optimistic_header.slot%60%2C%20and%20%60current_period%60%20from%20%60current_slot%60%20based%20on%20the%20local%20clock.%0A%20%20%20%20%201.%20When%20%60finalized_period%20%3D%3D%20optimistic_period%60%20and%20%5B%60is_next_sync_committee_known%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23is_next_sync_committee_known)%20indicates%20%60False%60%2C%20the%20light%20client%20fetches%20a%20%5B%60LightClientUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientupdate)%20for%20%60finalized_period%60.%20If%20%60finalized_period%20%3D%3D%20current_period%60%2C%20this%20fetch%20SHOULD%20be%20scheduled%20at%20a%20random%20time%20before%20%60current_period%60%20advances.%0A%20%20%20%20%202.%20When%20%60finalized_period%20%2B%201%20%3C%20current_period%60%2C%20the%20light%20client%20fetches%20a%20%60LightClientUpdate%60%20for%20each%20sync%20committee%20period%20in%20range%20%60%5Bfinalized_period%20%2B%201%2C%20current_period)%60%20(current%20period%20excluded)%0A%20%20%20%20%203.%20When%20%60finalized_period%20%2B%201%20%3E%3D%20current_period%60%2C%20the%20light%20client%20keeps%20observing%20%5B%60LightClientFinalityUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientfinalityupdate)%20and%20%5B%60LightClientOptimisticUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientoptimisticupdate).%20Received%20objects%20are%20passed%20to%20%5B%60process_light_client_finality_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_finality_update)%20and%20%5B%60process_light_client_optimistic_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_optimistic_update).%20This%20ensures%20that%20%60finalized_header%60%20and%20%60optimistic_header%60%20reflect%20the%20latest%20blocks.%0A%20%205.%20%5B%60process_light_client_store_force_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_store_force_update)%20MAY%20be%20called%20based%20on%20use%20case%20dependent%20heuristics%20if%20light%20client%20sync%20appears%20stuck.%20If%20available%2C%20falling%20back%20to%20an%20alternative%20syncing%20mechanism%20to%20cover%20the%20affected%20sync%20committee%20period%20is%20preferred.%0A%0A%23%23%23%23%20The%20Portal%20Network%0A%0A-%20%5BThe%20Portal%20Network%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs)%3A%20The%20Portal%20Network%20is%20an%20in%20progess%20effort%20to%20enable%20lightweight%20protocol%20access%20by%20resource%20constrained%20devices.%20The%20term%20_%22portal%22_%20is%20used%20to%20indicate%20that%20these%20networks%20provide%20a%20_view_%20into%20the%20protocol%20but%20are%20not%20critical%20to%20the%20operation%20of%20the%20core%20Ethereum%20protocol.%0A%0A%20%20The%20Portal%20Network%20is%20comprised%20of%20multiple%20peer-to-peer%20networks%20which%20together%20provide%20the%20data%20and%20functionality%20necessary%20to%20expose%20the%20standard%20%5BJSON-RPC%20API%5D(https%3A%2F%2Feth.wiki%2Fjson-rpc%2FAPI).%20These%20networks%20are%20specially%20designed%20to%20ensure%20that%20clients%20participating%20in%20these%20networks%20can%20do%20so%20with%20minimal%20expenditure%20of%20networking%20bandwidth%2C%20CPU%2C%20RAM%2C%20and%20HDD%20resources.%0A%0A%20%20The%20term%20'Portal%20Client'%20describes%20a%20piece%20of%20software%20which%20participates%20in%20these%20networks.%20Portal%20Clients%20typically%20expose%20the%20standard%20JSON-RPC%20API.%0A%20%20-%20Motivation%3A%20The%20Portal%20Network%20is%20focused%20on%20delivering%20reliable%2C%20lightweight%2C%20and%20decentralized%20access%20to%20the%20Ethereum%20protocol.%0A%0A%20%20-%20Prior%20Work%20on%20the%20%22Light%20Ethereum%20Subprotocol%22%20(LES)%3A%20The%20term%20%22light%20client%22%20has%20historically%20refered%20to%20a%20client%20of%20the%20existing%20%5BDevP2P%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Frlpx.mdx)%20based%20%5BLES%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Fcaps%2Fles.mdx)%20network.%20This%20network%20is%20designed%20using%20a%20client%2Fserver%20architecture.%20The%20LES%20network%20has%20a%20total%20capacity%20dictated%20by%20the%20number%20of%20%22servers%22%20on%20the%20network.%20In%20order%20for%20this%20network%20to%20scale%2C%20the%20%22server%22%20capacity%20has%20to%20increase.%20This%20also%20means%20that%20at%20any%20point%20in%20time%20the%20network%20has%20some%20total%20capacity%20which%20if%20exceeded%20will%20cause%20service%20degradation%20across%20the%20network.%20Because%20of%20this%20the%20LES%20network%20is%20unreliable%20when%20operating%20near%20capacity.%0A%0A-%20Block%20Relay%0A%20%20-%20%5BBeacon%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23dht-overview)%3A%20A%20client%20has%20a%20trusted%20beacon%20state%20root%2C%20and%20it%20wants%20to%20access%20some%20parts%20of%20the%20state.%20Each%20of%20the%20access%20request%20corresponds%20to%20some%20leave%20nodes%20of%20the%20beacon%20state.%20The%20request%20is%20a%20content%20lookup%20on%20a%20DHT.%20The%20response%20is%20a%20Merkle%20proof.%0A%0A%20%20%20%20%20%20%20%20A%20Distributed%20Hash%20Table%20(DHT)%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%0A%0A%20%20-%20%5BSyncing%20Block%20Headers%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx)%3A%20A%20beacon%20chain%20client%20could%20sync%20committee%20to%20perform%20state%20updates.%20The%20data%20object%20LightClientSkipSyncUpdate%20allows%20a%20client%20to%20quickly%20sync%20to%20a%20recent%20header%20with%20the%20appropriate%20sync%20committee.%20Once%20the%20client%20establishes%20a%20recent%20header%2C%20it%20could%20sync%20to%20other%20headers%20by%20processing%20LightClientUpdates.%20These%20two%20data%20types%20allow%20a%20client%20to%20stay%20up-to-date%20with%20the%20beacon%20chain.%0A%20%20%20%20-%20%5BSync%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fskip-sync-network.mdx)%3A%20A%20client%20uses%20SkipSyncUpdate%20to%20skip%20sync%20from%20a%20known%20header%20to%20a%20recent%20header.%20A%20client%20with%20a%20trusted%20but%20outdated%20header%20cannot%20use%20the%20messages%20in%20the%20gossip%20channel%20bc-light-client-update%20to%20update.%20The%20client's%20sync-committee%20in%20the%20stored%20snapshot%20is%20too%20old%20and%20not%20connected%20to%20any%20update%20messages.%20The%20client%20look%20for%20the%20appropriate%20SkipSyncUpdate%20to%20skip%20sync%20its%20header.%0A%20%20%20%20-%20%5BAdvance%20Block%20Headers%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx)%3A%20A%20beacon%20chain%20client%20could%20sync%20committee%20to%20perform%20%5Bstate%20updates%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fsync-protocol.mdx).%20The%20data%20object%20%5BLightClientSkipSyncUpdate%5D(skip-sync-network)%20allows%20a%20client%20to%20quickly%20sync%20to%20a%20recent%20header%20with%20the%20appropriate%20sync%20committee.%20Once%20the%20client%20establishes%20a%20recent%20header%2C%20it%20could%20sync%20to%20other%20headers%20by%20processing%20%5BLightClientUpdates%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fsync-protocol.md%23lightclientupdate).%20These%20two%20data%20types%20allow%20a%20client%20to%20stay%20up-to-date%20with%20the%20beacon%20chain.%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20These%20two%20data%20types%20are%20placed%20into%20separate%20sub-networks.%20A%20light%20client%20make%20find-content%20requests%20on%20%60skip-sync-network%60%20at%20start%20of%20the%20sync%20to%20get%20a%20header%20with%20the%20same%20%60SyncCommittee%60%20object%20as%20in%20the%20current%20sync%20period.%20The%20client%20uses%20messages%20in%20the%20gossip%20topic%20%60bc-light-client-update%60%20to%20advance%20its%20header.%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20The%20gossip%20topics%20described%20in%20this%20document%20is%20part%20of%20a%20%5Bproposal%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fa-beacon-chain-light-client-proposal%2F11064)%20for%20a%20beacon%20chain%20light%20client.%0A%0A%23%23%23%23%20Transaction%20Proofs%0A%0A-%20%5BRetrieving%20Beacon%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.mdx)%3A%20A%20client%20has%20a%20trusted%20beacon%20state%20root%2C%20and%20it%20wants%20to%20access%20some%20parts%20of%20the%20state.%20Each%20of%20the%20access%20request%20corresponds%20to%20some%20leave%20nodes%20of%20the%20beacon%20state.%20The%20request%20is%20a%20content%20lookup%20on%20a%20DHT.%20The%20response%20is%20a%20Merkle%20proof.%0A%0A%20%20A%20Distributed%20Hash%20Table%20(DHT)%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%20key.%20A%20portal-network%20DHT%20is%20different%20than%20a%20traditional%20one%20in%20that%20each%20participant%20could%20selectively%20limit%20its%20workload%20by%20choosing%20a%20small%20interest%20radius%20r.%20A%20participants%20only%20process%20messages%20that%20are%20within%20its%20chosen%20radius%20boundary.%0A%20%20-%20%5BWire%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23wire-protocol)%3A%20For%20a%20subprotocol%2C%20we%20need%20to%20further%20define%20the%20following%20to%20be%20able%20to%20instantiate%20the%20wire%20format%20of%20each%20message%20type.%201.%20%60content_key%60%202.%20%60content_id%60%203.%20%60payload%60%0A%0A%20%20%20%20%20%20%20%20The%20content%20of%20the%20message%20is%20a%20Merkle%20proof%20contains%20multiple%20leave%20nodes%20for%20a%20%5BBeaconState%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fbeacon-chain.md%23beaconstate).%0A%0A%20%20%20%20%20%20%20%20Finally%2C%20we%20define%20the%20necessary%20encodings.%20A%20light%20client%20only%20knows%20the%20root%20of%20the%20beacon%20state.%20The%20client%20wants%20to%20know%20the%20details%20of%20some%20leave%20nodes.%20The%20client%20has%20to%20be%20able%20to%20construct%20the%20%60content_key%60%20only%20knowing%20the%20root%20and%20which%20leave%20nodes%20it%20wants%20see.%20The%20%60content_key%60%20is%20the%20ssz%20serialization%20of%20the%20paths.%20The%20paths%20represent%20the%20part%20of%20the%20beacon%20state%20that%20one%20wants%20to%20know%20about.%20The%20paths%20are%20represented%20by%20generalized%20indices.%20Note%20that%20%60hash_tree_root%60%20and%20%60serialize%60%20are%20the%20same%20as%20those%20defined%20in%20%5Bsync-gossip%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx).%0A%0A-%20TODO%3A%20Review%20of%20Retrieving%20a%20transaction%20proof%20not%20just%20retrieving%20data%20on-demand%0A%0A%23%23%23%23%20References%0A%0A-%20Ethereum%202.0%20Specifications%0A%20%20-%20%5BBeacon%20Chain%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fmaster%2Fspecs%2Fphase0%2Fbeacon-chain.mdx)%0A%20%20-%20%5BExtended%20light%20client%20protocol%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fextended_light_client_protocol)%0A%20%20-%20%5BAltair%20Light%20Client%20--%20Light%20Client%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%0A%20%20-%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%0A%20%20-%20%5BBeacon%20Chain%20Fork%20Choice%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Ffork-choice.mdx)%0A%20%20-%20%5BThe%20Portal%20Network%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs)%3A%20an%20in%20progess%20effort%20to%20enable%20lightweight%20protocol%20access%20by%20resource%20constrained%20devices.%0A%0A-%20%5BLight%20Ethereum%20Subprotocol%20(LES)%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Fcaps%2Fles.mdx)%3A%20the%20protocol%20used%20by%20%22light%22%20clients%2C%20which%20only%20download%20block%20headers%20as%20they%20appear%20and%20fetch%20other%20parts%20of%20the%20blockchain%20on-demand.%0A-%20%5BBlockDaemon%3A%20Ethereum%20Altair%20Hard%20Folk%3A%20Light%20Clients%20%26%20Sync%20Committees%5D(https%3A%2F%2Fblockdaemon.com%2Fblog%2Fethereum-altair-hard-folk-light-clients-sync-committees%2F)%0A-%20%5BEfficient%20algorithms%20for%20CBC%20Casper%5D(https%3A%2F%2Fdocs.google.com%2Fpresentation%2Fd%2F1oc_zdywOsHxz3zez1ILAgrerS7RkaF1hHoW0FLtp0Gw%2Fedit%23slide%3Did.p)%3A%20Review%20of%20LMD%20GHOST%20(Latest%20Message%20Driven%2C%20Greediest%20Heaviest%20Observed%20Sub-Tree)%0A-%20%5BSSZ%3A%20Simple%20Serialize%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fssz%2F)%3A%20Overview%20of%20Simple%20serialize%20(SSZ)%20is%20the%20serialization%20method%20used%20on%20the%20Beacon%20Chain.%20(including%20merkalization%20and%20multiproofs)%0A-%20%5BThe%20Noise%20Protocol%20Framework%5D(https%3A%2F%2Fnoiseprotocol.org%2Fnoise.html)%3A%20Noise%20is%20a%20framework%20for%20crypto%20protocols%20based%20on%20Diffie-Hellman%20key%20agreement.%0A-%20%5BFlashbots%20for%20Ethereum%20Consensus%20Clients%5D(https%3A%2F%2Fhackmd.io%2FQoLwVQf3QK6EiVt15YOYqQ%3Fview)%0A-%20%5BOptimistic%20Sync%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fsync%2Foptimistic.mdx)%3A%20Optimistic%20Sync%20is%20a%20stop-gap%20measure%20to%20allow%20execution%20nodes%20to%20sync%20via%20established%20methods%20until%20future%20Ethereum%20roadmap%20items%20are%20implemented%20(e.g.%2C%20statelessness).%0A-%20%5BConsensus%20Light%20Client%20Server%20Implementation%20Notes%5D(https%3A%2F%2Fhackmd.io%2FhsCz1G3BTyiwwJtjT4pe2Q%3Fview)%3A%20How%20Lodestar%20beacon%20node%20was%20tweaked%20to%20serve%20light%20clients%0A-%20%5Bbeacon%20chain%20light%20client%20design%20doc%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40ralexstokes%2FHJxDMi8vY)%3A%20notes%20about%20the%20design%2Fimplementation%20of%20a%20beacon%20chain%20light%20client%20using%20standard%20APIs%20and%20protocol%20features%0A-%20%5BA%20Beacon%20Chain%20Light%20Client%20Proposal%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fa-beacon-chain-light-client-proposal%2F11064)%3A%20proposing%20a%20light%20client%20implementation%20that%20goes%20a%20step%20further%20than%20the%20minimum%20light%20client%20described%20in%20the%20altair%20consensus-spec.%20The%20proposed%20client%20aims%20to%20allow%20queries%20into%20the%20beacon%20state.%0A-%20%5BDistributed%20Hash%20Table%20(DHT)%20Overview%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23dht-overview)%3A%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%20key.%0A-%20%5B(WIP)%20Light%20client%20p2p%20interface%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fpull%2F2786)%3A%20a%20PR%20to%20get%20the%20conversation%20going%20about%20a%20p2p%20approach.%0A%0A%23%23%23%20Near%20Rainbow%20Bridge%20Ethereum%20Light%20Client%20Walkthrough%0A%0AThe%20following%20is%20a%20walkthrough%20of%20how%20a%20transaction%20executed%20on%20Ethereum%20is%20propogated%20to%20NEAR's%20%5Beth2-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-client).%20See%20%5BCryptographic%20Primitives%5D(%23cryptographic-primitives)%20for%20more%20information%20on%20the%20cryptography%20used.%0A%0A**At%20a%20high%20level%20the%20ethereum%20light%20client%20contract**%0A%0A-%20Optionally%20accepts%20client%20updates%20only%20from%20a%20trusted%20client%0A-%20Can%20pause%20functions%0A-%20Validates%20a%20sync%20committee%20exists%20for%20the%20curremt%20slot%0A-%20Validates%20sync%20committe%20has%20greater%20than%20the%20minimum%20required%20sync%20committee%20members%0A-%20Validates%202%2F3%20or%20more%20of%20the%20committe%20members%20have%20signed%20the%20blocks%0A-%20Validates%20bls%20signatures%20(i.e.%20the%20bls%20signatures%20of%20the%20sync%20comittee%20for%20the%20blocks%20propogated)%0A-%20Stores%20the%20hashes%20of%20the%20blocks%20for%20the%20past%20%60hashes_gc_threshold%60%20headers.%20Events%20that%20happen%20past%20this%20threshold%20cannot%20be%20verified%20by%20the%20client.%20It%20is%20desirable%20that%20this%20number%20is%20larger%20than%207%20days'%20worth%20of%20headers%2C%20which%20is%20roughly%2051k%20Ethereum%20blocks.%20So%20this%20number%20should%20be%2051k%20in%20production.%0A-%20Stores%20the%20Ethereum%20Network%20(e.g.%20mainnet%2C%20kiln)%0A-%20Stores%20Hashes%20of%20the%20finalized%20execution%20blocks%20mapped%20to%20their%20numbers.%0A-%20Stores%20All%20unfinalized%20execution%20blocks'%20headers%20hashes%20mapped%20to%20their%20%60HeaderInfo%60.%0A-%20Stores%20%60AccountId%60s%20mapped%20to%20their%20number%20of%20submitted%20headers.%0A-%20Stores%20Max%20number%20of%20unfinalized%20blocks%20allowed%20to%20be%20stored%20by%20one%20submitter%20account.%20This%20value%20should%20be%20at%20least%2032%20blocks%20(1%20epoch)%2C%20but%20the%20recommended%20value%20is%201024%20(32%20epochs)%0A-%20Stores%20minimum%20balance%20that%20should%20be%20attached%20to%20register%20a%20new%20submitter%20account.%0A-%20Stores%20finalized%20beacon%20header%0A-%20Stores%20finalized%20execution%20header%0A-%20Stores%20current_sync_committee%0A-%20Stores%20next_sync_committee%0A%0A%23%23%23%23%20Ethereum%20to%20NEAR%20block%20propagation%20flow%0A%0A-%20%5BLight%20Clients%20are%20deployed%20on%20Near%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L107)%3A%0A%20%20-%20%5Binit_contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L107)%3A%20The%20eth2near%20relayer%20is%20called%20with%20an%20argument%20to%20initialize%20the%20%5Beth2-client%20contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%0A%20%20%20%20-%20%5Beth_client_contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L108)%3A%20is%20created%20using%20a%20contract_wrapper%0A%20%20%20%20%20%20-%20%60let%20mut%20eth_client_contract%20%3D%20EthClientContract%3A%3Anew(get_eth_contract_wrapper(%26config))%3B%60%0A%20%20%20%20-%20%5BEthClientContract%20Wrapper%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Feth_client_contract.rs)%3A%20creates%20an%20instance%20of%20%5Beth2-client%20contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%20with%20the%20following%20arguments%0A%20%20%20%20%20%20-%20%60network%60%20-%20the%20name%20of%20Ethereum%20network%20such%20as%20%60mainnet%60%2C%20%60goerli%60%2C%20%60kiln%60%2C%20etc.%0A%20%20%20%20%20%20-%20%60finalized_execution_header%60%20-%20the%20finalized%20execution%20header%20to%20start%20initialization%20with.%0A%20%20%20%20%20%20-%20%60finalized_beacon_header%60%20-%20correspondent%20finalized%20beacon%20header.%0A%20%20%20%20%20%20-%20%60current_sync_committee%60%20-%20sync%20committee%20correspondent%20for%20finalized%20block.%0A%20%20%20%20%20%20-%20%60next_sync_committee%60%20-%20sync%20committee%20for%20the%20next%20period%20after%20period%20for%20finalized%20block.%0A%20%20%20%20%20%20-%20%60hashes_gs_threshold%60%20-%20the%20maximum%20number%20of%20stored%20finalized%20blocks.%0A%20%20%20%20%20%20-%20%60max_submitted_block_by_account%60%20-%20the%20maximum%20number%20of%20unfinalized%20blocks%20which%20one%20relay%20can%20store%20in%20the%20client's%20storage.%0A%20%20%20%20%20%20-%20%60trusted_signer%60%20-%20the%20account%20address%20of%20the%20trusted%20signer%20which%20is%20allowed%20to%20submit%20light%20client%20updates.%0A-%20%5BRelayer%20is%20Created%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L111)%3A%0A%20%20-%20%5Beth2near_relay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs%23L111)%20is%20created%20using%20the%20following%20arguments%0A%20%20%20%20-%20%60let%20mut%20eth2near_relay%20%3D%20Eth2NearRelay%3A%3Ainit(%26config%2C%20get_eth_client_contract(%26config)%2C%20args.enable_binary_search%2C%20args.submit_only_finalized_blocks%2C)%3B%60%0A-%20%5BRelayer%20is%20Started%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs)%3A%0A%20%20-%20The%20relayer%20is%20started%20using%20%60eth2near_relay.run(None)%3B%60%0A%20%20-%20This%20executes%20the%20%5Beth2near_relay%20run%20function%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L257)%20%60pub%20fn%20run(%26mut%20self%2C%20max_iterations%3A%20Option%3Cu64%3E)%60%20which%20runs%20until%20terminated%20doing%20using%20the%20following%20loop%20%60while%20!self.terminate%60%0A%20%20%20%20-%20%60self.wait_for_synchronization()%2C%60%3A%20gets%20the%20sync%20status%0A%20%20%20%20-%20%60sleep(Duration%3A%3Afrom_secs(12))%3B%60%3A%20waits%20for%2012%20seconds%0A%20%20%20%20-%20%60self.get_max_slot_for_submission()%60%3A%20gets%20the%20maximum%20slot%20for%20submission%20from%20Ethereum%0A%20%20%20%20-%20%60self.get_last_eth2_slot_on_near%60%3A%20gets%20the%20latest%20slot%20propogated%20from%20Ethereum%20to%20NEAR%0A%20%20%20%20-%20%60if%20last_eth2_slot_on_near%20%3C%20max_slot_for_submission%60%3A%20If%20there%20are%20slots%20to%20process%0A%20%20%20%20%20%20-%20%60self.get_execution_blocks_between(last_eth2_slot_on_near%20%2B%201%2C%20max_slot_for_submission%2C)%2C%60%3A%20Get%20the%20execution%20blocks%20to%20be%20processed%0A%20%20%20%20%20%20-%20%60self.submit_execution_blocks(headers%2C%20current_slot%2C%20%26mut%20last_eth2_slot_on_near)%60%3A%20submit%20them%0A%20%20%20%20%20%20-%20%60were_submission_on_iter%20%3D%20true%3B%60%3A%20flags%20that%20there%20were%20submissions%0A%20%20%20%20-%20%60were_submission_on_iter%20%7C%3D%20self.send_light_client_updates_with_checks(last_eth2_slot_on_near)%3B%60%3A%20send%20light_client%20updates%20with%20checks%20and%20updates%20the%20submission%20flag%20to%20true%20if%20if%20passes.%20Following%20is%20some%20key%20logic%0A%20%20%20%20%20%20-%20%60self.is_enough_blocks_for_light_client_update%60%3A%20Checks%20if%20there%20are%20enough%20blocks%20for%20a%20light%20client%20update%0A%20%20%20%20%20%20%20%20-%20%60self.send_light_client_updates%60%20calls%20%60send_light_client_update%60%20which%0A%20%20%20%20%20%20%20%20%20%20-%20%60if%20last_finalized_slot_on_eth%20%3E%3D%20last_finalized_slot_on_near%20%2B%20self.max_blocks_for_finalization%60%3A%20checks%20if%20the%20gap%20is%20too%20big%20(i.e.%20we%20are%20at%20a%20new%20slot)%20between%20slot%20of%20finalized%20block%20on%20NEAR%20and%20ETH.%20If%20it%20is%20it%20sends%20a%20hand%20made%20client%20update%20(which%20will%20loop%20getting%20the%20new%20slots%20sync%20committees)%20otherwise%20it%20sends%20a%20regular%20client%20update%20(which%20propogates%20the%20block%20headers)%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.send_hand_made_light_client_update(last_finalized_slot_on_near)%3B%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20-%20%60let%20include_next_sync_committee%20%3D%20BeaconRPCClient%3A%3Aget_period_for_slot%20(last_finalized_slot_on_near)%20!%3D%20BeaconRPCClient%3A%3Aget_period_for_slot(attested_slot)%3B%60%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.send_regular_light_client_update(last_finalized_slot_on_eth%2C%20last_finalized_slot_on_near%2C)%3B%60%0A%20%20%20%20%20%20%20%20%20%20-%20%60self.send_specific_light_client_update(light_client_update)%60%20is%20called%20for%20both%20regular%20and%20hand%20made%20updates.%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.eth_client_contract.is_known_block%60%3A%20Checks%20if%20the%20block%20is%20already%20known%20on%20the%20Etherum%20Client%20Contract%20on%20NEAR%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.verify_bls_signature_for_finality_update(%26light_client_update)%60%3A%20Verifies%20the%20BLS%20signatures.%20This%20calls%20%60is_correct_finality_update%60%20in%20%60eth2near%2Ffinality-update-verify%2Fsrc%2Flib.rs%60%20%5C*%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.eth_client_contract.send_light_client_update(light_client_update.clone())%60%3A%20Updates%20the%20light%20client%20with%20the%20finalized%20block%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60self.beacon_rpc_client.get_block_number_for_slot(types%3A%3ASlot%3A%3Anew(light_client_update.finality_update.header_update.beacon_header.slot.as_u64()))%2C%60%3A%20Validates%20Finalized%20block%20number%20is%20correct%20on%20Ethereum%20usng%20the%20%60beacon_rpc_client%60.%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20%60sleep(Duration%3A%3Afrom_secs(self.sleep_time_after_submission_secs))%3B%60%3A%20sleeps%20for%20the%20configured%20submission%20sleep%20time.%0A%20%20%20%20-%20%60if%20!were_submission_on_iter%20%7Bthread%3A%3Asleep(Duration%3A%3Afrom_secs(self.sleep_time_on_sync_secs))%3B%7D%60%3A%20if%20there%20were%20submissions%20sleep%20for%20however%20many%20seconds%20were%20configured%20for%20sync%20sleep%20time.%0A%0A%23%23%23%23%20Ethereum%20to%20NEAR%20block%20propagation%20components%0A%0A-%20%5BEthClientContract%20Wrapper%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Feth_client_contract.rs)%3A%20supports%20%5Beth2-client%20contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%20functions%20%60impl%20EthClientContractTrait%20for%20EthClientContract%60%0A%20%20-%20%60fn%20get_last_submitted_slot(%26self)%20-%3E%20u64%60%0A%20%20-%20%60fn%20is_known_block(%26self%2C%20execution_block_hash%3A%20%26H256)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20send_light_client_update(%26mut%20self%2C%20light_client_update%3A%20LightClientUpdate%2C)%20-%3E%20Result%3CFinalExecutionOutcomeView%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_finalized_beacon_block_hash(%26self)%20-%3E%20Result%3CH256%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_finalized_beacon_block_slot(%26self)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20send_headers(%26mut%20self%2C%20headers%3A%20%26%5BBlockHeader%5D%2C%20end_slot%3A%20u64%2C)%20-%3E%20Result%3CFinalExecutionOutcomeView%2C%20Box%3Cdyn%20std%3A%3Aerror%3A%3AError%3E%3E%60%0A%20%20-%20%60fn%20get_min_deposit(%26self)%20-%3E%20Result%3CBalance%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20register_submitter(%26self)%20-%3E%20Result%3CFinalExecutionOutcomeView%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20is_submitter_registered(%26self%2Caccount_id%3A%20Option%3CAccountId%3E%2C)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_light_client_state(%26self)%20-%3E%20Result%3CLightClientState%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_num_of_submitted_blocks_by_account(%26self)%20-%3E%20Result%3Cu32%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_max_submitted_blocks_by_account(%26self)%20-%3E%20Result%3Cu32%2C%20Box%3Cdyn%20Error%3E%3E%60%0A-%20%5Beth2-client%20contract%20storage%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%3A%0A%20%20-%20High%20level%20storage%20overview%0A%20%20-%20provides%20the%20%60Eth2Client%60%20public%20data%20stucture%0A%0A%20%20%20%20%60%60%60%0A%20%20%20%20pub%20struct%20Eth2Client%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20If%20set%2C%20only%20light%20client%20updates%20by%20the%20trusted%20signer%20will%20be%20accepted%0A%20%20%20%20%20%20%20%20trusted_signer%3A%20Option%3CAccountId%3E%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Mask%20determining%20all%20paused%20functions%0A%20%20%20%20%20%20%20%20paused%3A%20Mask%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Whether%20the%20client%20validates%20the%20updates.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Should%20only%20be%20set%20to%20%60false%60%20for%20debugging%2C%20testing%2C%20and%20diagnostic%20purposes%0A%20%20%20%20%20%20%20%20validate_updates%3A%20bool%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Whether%20the%20client%20verifies%20BLS%20signatures.%0A%20%20%20%20%20%20%20%20verify_bls_signatures%3A%20bool%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20We%20store%20the%20hashes%20of%20the%20blocks%20for%20the%20past%20%60hashes_gc_threshold%60%20headers.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Events%20that%20happen%20past%20this%20threshold%20cannot%20be%20verified%20by%20the%20client.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20It%20is%20desirable%20that%20this%20number%20is%20larger%20than%207%20days'%20worth%20of%20headers%2C%20which%20is%20roughly%0A%20%20%20%20%20%20%20%20%2F%2F%2F%2051k%20Ethereum%20blocks.%20So%20this%20number%20should%20be%2051k%20in%20production.%0A%20%20%20%20%20%20%20%20hashes_gc_threshold%3A%20u64%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Network.%20e.g.%20mainnet%2C%20kiln%0A%20%20%20%20%20%20%20%20network%3A%20Network%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Hashes%20of%20the%20finalized%20execution%20blocks%20mapped%20to%20their%20numbers.%20Stores%20up%20to%20%60hashes_gc_threshold%60%20entries.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Execution%20block%20number%20-%3E%20execution%20block%20hash%0A%20%20%20%20%20%20%20%20finalized_execution_blocks%3A%20LookupMap%3Cu64%2C%20H256%3E%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20All%20unfinalized%20execution%20blocks'%20headers%20hashes%20mapped%20to%20their%20%60HeaderInfo%60.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Execution%20block%20hash%20-%3E%20ExecutionHeaderInfo%20object%0A%20%20%20%20%20%20%20%20unfinalized_headers%3A%20UnorderedMap%3CH256%2C%20ExecutionHeaderInfo%3E%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20%60AccountId%60s%20mapped%20to%20their%20number%20of%20submitted%20headers.%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Submitter%20account%20-%3E%20Num%20of%20submitted%20headers%0A%20%20%20%20%20%20%20%20submitters%3A%20LookupMap%3CAccountId%2C%20u32%3E%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Max%20number%20of%20unfinalized%20blocks%20allowed%20to%20be%20stored%20by%20one%20submitter%20account%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20This%20value%20should%20be%20at%20least%2032%20blocks%20(1%20epoch)%2C%20but%20the%20recommended%20value%20is%201024%20(32%20epochs)%0A%20%20%20%20%20%20%20%20max_submitted_blocks_by_account%3A%20u32%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20The%20minimum%20balance%20that%20should%20be%20attached%20to%20register%20a%20new%20submitter%20account%0A%20%20%20%20%20%20%20%20min_storage_balance_for_submitter%3A%20Balance%2C%0A%20%20%20%20%20%20%20%20%2F%2F%2F%20Light%20client%20state%0A%20%20%20%20%20%20%20%20finalized_beacon_header%3A%20ExtendedBeaconBlockHeader%2C%0A%20%20%20%20%20%20%20%20finalized_execution_header%3A%20LazyOption%3CExecutionHeaderInfo%3E%2C%0A%20%20%20%20%20%20%20%20current_sync_committee%3A%20LazyOption%3CSyncCommittee%3E%2C%0A%20%20%20%20%20%20%20%20next_sync_committee%3A%20LazyOption%3CSyncCommittee%3E%2C%0A%20%20%20%20%7D%0A%20%20%20%20%60%60%60%0A%0A-%20%5Beth2-client%20dependencies%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2FCargo.toml)%20relys%20heavily%20on%20the%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20codebase%20for%20it's%20consensus%20and%20cryptogrphic%20primitives.%20See%20%5BCryptographic%20Primitives%5D(%23cryptographic-primitives)%20for%20more%20information.%0A%20%20-%20%60ethereum-types%20%3D%20%220.9.2%22%60%0A%20%20-%20%60eth-types%20%3D%20%20%7B%20path%20%3D%20%22..%2Feth-types%22%20%7D%60%0A%20%20-%20%60eth2-utility%20%3D%20%20%7B%20path%20%3D%20%22..%2Feth2-utility%22%20%7D%60%0A%20%20-%20%60tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60merkle_proof%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60bls%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20optional%20%3D%20true%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%2C%20default-features%20%3D%20false%2C%20features%20%3D%20%5B%22milagro%22%5D%7D%60%0A%20%20-%20%60admin-controlled%20%3D%20%20%7B%20path%20%3D%20%22..%2Fadmin-controlled%22%20%7D%60%0A%20%20-%20%60near-sdk%20%3D%20%224.0.0%22%60%0A%20%20-%20%60borsh%20%3D%20%220.9.3%22%60%0A%20%20-%20%60bitvec%20%3D%20%221.0.0%22%60%0A%0A-%20%5Beth2-client%20contract%20functions%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2Fsrc%2Flib.rs)%3A%20provides%20the%20following%20functions%20in%20%60impl%20Eth2Client%60%0A%20%20-%20%60fn%20validate_light_client_update(%26self%2C%20update%3A%20%26LightClientUpdate)%60%0A%20%20-%20%60fn%20verify_finality_branch(%26self%2C%20update%3A%20%26LightClientUpdate%2C%20finalized_period%3A%20u64)%60%0A%20%20-%20%60fn%20verify_bls_signatures(%26self%2C%20update%3A%20%26LightClientUpdate%2C%20sync_committee_bits%3A%20BitVec%3Cu8%3E%2C%20finalized_period%3A%20u64%2C)%60%0A%20%20-%20%60fn%20update_finalized_header(%26mut%20self%2C%20finalized_header%3A%20ExtendedBeaconBlockHeader)%60%0A%20%20-%20%60fn%20commit_light_client_update(%26mut%20self%2C%20update%3A%20LightClientUpdate)%60%0A%20%20-%20%60fn%20gc_finalized_execution_blocks(%26mut%20self%2C%20mut%20header_number%3A%20u64)%60%0A%20%20-%20%60fn%20update_submitter(%26mut%20self%2C%20submitter%3A%20%26AccountId%2C%20value%3A%20i64)%60%0A%20%20-%20%60fn%20is_light_client_update_allowed(%26self)%60%0A-%20%5BEth2NearRelay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L84)%3A%20has%20the%20following%20public%20structure%0A%0A%20%20%60%60%60%0A%20%20pub%20struct%20Eth2NearRelay%20%7B%0A%20%20%20%20%20%20beacon_rpc_client%3A%20BeaconRPCClient%2C%0A%20%20%20%20%20%20eth1_rpc_client%3A%20Eth1RPCClient%2C%0A%20%20%20%20%20%20near_rpc_client%3A%20NearRPCClient%2C%0A%20%20%20%20%20%20eth_client_contract%3A%20Box%3Cdyn%20EthClientContractTrait%3E%2C%0A%20%20%20%20%20%20headers_batch_size%3A%20u64%2C%0A%20%20%20%20%20%20ethereum_network%3A%20String%2C%0A%20%20%20%20%20%20interval_between_light_client_updates_submission_in_epochs%3A%20u64%2C%0A%20%20%20%20%20%20max_blocks_for_finalization%3A%20u64%2C%0A%20%20%20%20%20%20near_network_name%3A%20String%2C%0A%20%20%20%20%20%20last_slot_searcher%3A%20LastSlotSearcher%2C%0A%20%20%20%20%20%20terminate%3A%20bool%2C%0A%20%20%20%20%20%20submit_only_finalized_blocks%3A%20bool%2C%0A%20%20%20%20%20%20next_light_client_update%3A%20Option%3CLightClientUpdate%3E%2C%0A%20%20%20%20%20%20sleep_time_on_sync_secs%3A%20u64%2C%0A%20%20%20%20%20%20sleep_time_after_submission_secs%3A%20u64%2C%0A%20%20%20%20%20%20max_submitted_blocks_by_account%3A%20u32%2C%0A%20%20%7D%0A%20%20%60%60%60%0A%0A-%20%5BEth2NearRelay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L103)%3A%20Implements%20the%20following%20functions%0A%20%20-%20%60fn%20get_max_slot_for_submission(%26self)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_last_eth2_slot_on_near(%26mut%20self%2C%20max_slot%3A%20u64)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_last_finalized_slot_on_near(%26self)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_last_finalized_slot_on_eth(%26self)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20**%60pub%20fn%20run(%26mut%20self%2C%20max_iterations%3A%20Option%3Cu64%3E)%60**%0A%20%20-%20%60fn%20wait_for_synchronization(%26self)%20-%3E%20Result%3C()%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_light_client_update_from_file(config%3A%20%26Config%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C)%20-%3E%20Result%3COption%3CLightClientUpdate%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20set_terminate(%26mut%20self%2C%20iter_id%3A%20u64%2C%20max_iterations%3A%20Option%3Cu64%3E)%60%0A%20%20-%20%60fn%20get_execution_blocks_between(%26self%2C%20start_slot%3A%20u64%2C%20last_eth2_slot_on_eth_chain%3A%20u64%2C)%20-%3E%20Result%3C(Vec%3CBlockHeader%3E%2C%20u64)%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20submit_execution_blocks(%26mut%20self%2C%20headers%3A%20Vec%3CBlockHeader%3E%2C%20current_slot%3A%20u64%2Clast_eth2_slot_on_near%3A%20%26mut%20u64%2C)%60%0A%20%20-%20%60fn%20verify_bls_signature_for_finality_update(%26mut%20self%2C%20light_client_update%3A%20%26LightClientUpdate%2C)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20get_execution_block_by_slot(%26self%2C%20slot%3A%20u64)%20-%3E%20Result%3CBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%0A-%20%5BEth2NearRelay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L461)%3A%20has%20a%20second%20implementation%20of%20functions%20for%20submitting%20light%20client%20updates%0A%20%20-%20%60fn%20is_enough_blocks_for_light_client_update(%26self%2C%20last_submitted_slot%3A%20u64%2Clast_finalized_slot_on_near%3A%20u64%2C%20last_finalized_slot_on_eth%3A%20u64%2C)%20-%3E%20bool%60%0A%20%20-%20%60fn%20is_shot_run_mode(%26self)%20-%3E%20bool%60%0A%20%20-%20%60fn%20send_light_client_updates_with_checks(%26mut%20self%2C%20last_submitted_slot%3A%20u64)%20-%3E%20bool%60%0A%20%20-%20%60fn%20send_light_client_updates(%26mut%20self%2C%20last_submitted_slot%3A%20u64%2C%20last_finalized_slot_on_near%3A%20u64%2C%20last_finalized_slot_on_eth%3A%20u64%2C)%60%0A%20%20-%20%60fn%20send_light_client_update_from_file(%26mut%20self%2C%20last_submitted_slot%3A%20u64)%60%0A%20%20-%20%60fn%20send_regular_light_client_update(%26mut%20self%2C%20last_finalized_slot_on_eth%3A%20u64%2Clast_finalized_slot_on_near%3A%20u64%2C)%60%0A%20%20-%20%60fn%20get_attested_slot(%26mut%20self%2C%20last_finalized_slot_on_near%3A%20u64%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%60fn%20send_hand_made_light_client_update(%26mut%20self%2C%20last_finalized_slot_on_near%3A%20u64)%60%0A%20%20-%20%60fn%20send_specific_light_client_update(%26mut%20self%2C%20light_client_update%3A%20LightClientUpdate)%60%0A%0A-%20%5Beth2-contract-init%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2-contract-init)%20includes%20(but%20not%20limited%20to)%20the%20following%20additional%20components%0A%20%20-%20%5Binit_contract.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2-contract-init%2Fsrc%2Finit_contract.rs)%3A%20Verifies%20light%20client%20snapshot%20and%20initializes%20the%20Ethereum%20Light%20Contract%20on%20Near.%0A%20%20%20%20-%20%60pub%20fn%20verify_light_client_snapshot(block_root%3A%20String%2C%20light_client_snapshot%3A%20%26LightClientSnapshotWithProof%2C)%20-%3E%20bool%60%3A%20Verifies%20the%20light%20client%20by%20checking%20the%20snapshot%20format%20getting%20the%20current%20consensus%20branch%20and%20verifying%20it%20via%20a%20merkle%20proof.%0A%20%20%20%20-%20%60pub%20fn%20init_contract(config%3A%20%26Config%2C%20eth_client_contract%3A%20%26mut%20EthClientContract%2C%20mut%20init_block_root%3A%20String%2C)%20-%3E%20Result%3C()%2C%20Box%3Cdyn%20std%3A%3Aerror%3A%3AError%3E%3E%60%3A%20Initializes%20the%20Ethereum%20Light%20Client%20Contract%20on%20Near.%0A-%20%5Beth_rpc_client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth_rpc_client)%20includes%20(but%20not%20limited%20to)%20the%20following%20additional%20components%0A%20%20-%20%5Beth1_rpc_client.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth1_rpc_client.rs)%3A%20Is%20used%20to%20get%20block%20headers%20and%20check%20sync%20status.%20It%20has%20the%20following%20functions%0A%20%20%20%20-%20%60pub%20fn%20new(endpoint_url%3A%20%26str)%20-%3E%20Self%60%0A%20%20%20%20-%20%60pub%20fn%20get_block_header_by_number(%26self%2C%20number%3A%20u64)%20-%3E%20Result%3CBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20is_syncing(%26self)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%5Bexecution_block_proof.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fexecution_block_proof.rs)%3A%20%60ExecutionBlockProof%60%20contains%20a%20%60block_hash%60%20(execution%20block)%20and%20a%20proof%20of%20its%20inclusion%20in%20the%20%60BeaconBlockBody%60%20tree%20hash.%20The%20%60block_hash%60%20is%20the%2012th%20field%20in%20execution_payload%2C%20which%20is%20the%209th%20field%20in%20%60BeaconBlockBody%60.%20The%20first%204%20elements%20in%20proof%20correspondent%20to%20the%20proof%20of%20inclusion%20of%20%60block_hash%60%20in%20Merkle%20tree%20built%20for%20%60ExecutionPayload%60.%20The%20last%204%20elements%20of%20the%20proof%20of%20%60ExecutionPayload%60%20in%20the%20Merkle%20tree%20are%20built%20on%20high-level%20%60BeaconBlockBody%60%20fields.%20The%20proof%20starts%20from%20the%20leaf.%20It%20has%20the%20following%20structure%20and%20functions%0A%20%20%20%20-%20%60pub%20struct%20ExecutionBlockProof%20%7Bblock_hash%3A%20H256%2C%20proof%3A%20%5BH256%3B%20Self%3A%3APROOF_SIZE%5D%2C%7D%60%0A%20%20%20%20-%20%60pub%20fn%20construct_from_raw_data(block_hash%3A%20%26H256%2C%20proof%3A%20%26%5BH256%3B%20Self%3A%3APROOF_SIZE%5D)%20-%3E%20Self%60%0A%20%20%20%20-%20%60pub%20fn%20construct_from_beacon_block_body(beacon_block_body%3A%20%26BeaconBlockBody%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3CSelf%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_proof(%26self)%20-%3E%20%5BH256%3B%20Self%3A%3APROOF_SIZE%5D%60%0A%20%20%20%20-%20%60pub%20fn%20get_execution_block_hash(%26self)%20-%3E%20H256%60%0A%20%20%20%20-%20%60pub%20fn%20verify_proof_for_hash(%26self%2C%20beacon_block_body_hash%3A%20%26H256%2C)%20-%3E%20Result%3Cbool%2C%20IncorrectBranchLength%3E%60%0A%20%20%20%20-%20%60fn%20merkle_root_from_branch(leaf%3A%20H256%2C%20branch%3A%20%26%5BH256%5D%2C%20depth%3A%20usize%2C%20index%3A%20usize%2C)%20-%3E%20Result%3CH256%2C%20IncorrectBranchLength%3E%60%0A%20%20-%20%5Bbeacon_block_body_merkle_tree.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth_rpc_client%2Fsrc%2Fbeacon_block_body_merkle_tree.rs)%3A%20implements%20merkle%20trees%20for%20the%20Beacon%20and%20the%20ExecutionPayload%0A%20%20%20%20-%20%60BeaconBlockBodyMerkleTree%60%20is%20built%20on%20the%20%60BeaconBlockBody%60%20data%20structure%2C%20where%20the%20leaves%20of%20the%20Merkle%20Tree%20are%20the%20hashes%20of%20the%20high-level%20fields%20of%20the%20%60BeaconBlockBody%60.%20The%20hashes%20of%20each%20element%20are%20produced%20by%20using%20%60ssz%60%20serialization.%0A%20%20%20%20-%20%60ExecutionPayloadMerkleTree%60%20is%20a%20built%20on%20the%20%60ExecutionPayload%60%20data%20structure%2C%20where%20the%20leaves%20of%20the%20Merkle%20Tree%20are%20the%20hashes%20of%20the%20high-level%20fields%20of%20the%20%60ExecutionPayload%60.%20The%20hashes%20of%20each%20element%20are%20produced%20by%20using%20%60ssz%60%20serialization.%20%60ExecutionPayload%60%20is%20one%20of%20the%20field%20in%20BeaconBlockBody.%20The%20hash%20of%20the%20root%20of%20%60ExecutionPlayloadMerkleTree%60%20is%20the%209th%20leaf%20in%20BeaconBlockBody%20Merkle%20Tree.%0A%20%20-%20%5Bbeacon_rpc_client.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth_rpc_client%2Fsrc%2Fbeacon_rpc_client.rs)%3A%20allows%20getting%20beacon%20block%20body%2C%20beacon%20block%20header%20and%20light%20client%20updates%20using%20%5BBeacon%20RPC%20API%5D(https%3A%2F%2Fethereum.github.io%2Fbeacon-APIs%2F).%20It%20has%20the%20following%20functions%0A%20%20%20%20-%20%60pub%20fn%20new(endpoint_url%3A%20%26str%2C%20timeout_seconds%3A%20u64%2C%20timeout_state_seconds%3A%20u64)%20-%3E%20Self%60%3A%20Creates%20%60BeaconRPCClient%60%20for%20the%20given%20BeaconAPI%20%60endpoint_url%60%0A%20%20%20%20-%20%60pub%20fn%20get_beacon_block_body_for_block_id(%26self%2C%20block_id%3A%20%26str%2C)%20-%3E%20Result%3CBeaconBlockBody%3CMainnetEthSpec%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20%60BeaconBlockBody%60%20struct%20for%20the%20given%20%60block_id%60.%20It%20uses%20the%20following%20arguments%0A%20%20%20%20%20%20-%20%60block_id%60%20-%20Block%20identifier.%20Can%20be%20one%20of%3A%20%60%22head%22%20(canonical%20head%20in%20node's%20view)%2C%22genesis%22%2C%20%22finalized%22%2C%20%3Cslot%3E%2C%20%3Chex%20encoded%20blockRoot%20with%200x%20prefix%3E%60(see%20%5Bbeacon-APIs%2F%23%2FBeacon%2FgetBlockV2%5D(https%3A%2F%2Fethereum.github.io%2Fbeacon-APIs%2F%23%2FBeacon%2FgetBlockV2)).%0A%20%20%20%20-%20%60pub%20fn%20get_beacon_block_header_for_block_id(%26self%2C%20block_id%3A%20%26str%2C)%20-%3E%20Result%3Ctypes%3A%3ABeaconBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20%60BeaconBlockHeader%60%20struct%20for%20the%20given%20%60block_id%60.%20It%20uses%20the%20following%20arguments%0A%20%20%20%20%20%20-%20%60block_id%60%20-%20Block%20identifier.%20Can%20be%20one%20of%3A%20%60%22head%22%20(canonical%20head%20in%20node's%20view)%2C%22genesis%22%2C%20%22finalized%22%2C%20%3Cslot%3E%2C%20%3Chex%20encoded%20blockRoot%20with%200x%20prefix%3E%60(see%20%5Bbeacon-APIs%2F%23%2FBeacon%2FgetBlockV2%5D(https%3A%2F%2Fethereum.github.io%2Fbeacon-APIs%2F%23%2FBeacon%2FgetBlockV2)).%0A%20%20%20%20-%20%60pub%20fn%20get_light_client_update(%26self%2C%20period%3A%20u64%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20%60LightClientUpdate%60%20struct%20for%20the%20given%20%60period%60.%20It%20uses%20the%20following%20arguments%0A%20%20%20%20%20%20-%20%60period%60%20-%20period%20id%20for%20which%20%60LightClientUpdate%60%20is%20fetched.%20On%20Mainnet%2C%20one%20period%20consists%20of%20256%20epochs%2C%20and%20one%20epoch%20consists%20of%2032%20slots%0A%20%20%20%20-%20%60pub%20fn%20get_bootstrap(%26self%2C%20block_root%3A%20String%2C)%20-%3E%20Result%3CLightClientSnapshotWithProof%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Fetch%20a%20bootstrapping%20state%20with%20a%20proof%20to%20a%20trusted%20block%20root.%20The%20trusted%20block%20root%20should%20be%20fetched%20with%20similar%20means%20to%20a%20weak%20subjectivity%20checkpoint.%20Only%20block%20roots%20for%20checkpoints%20are%20guaranteed%20to%20be%20available.%0A%20%20%20%20-%20%60pub%20fn%20get_checkpoint_root(%26self)%20-%3E%20Result%3CString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_last_finalized_slot_number(%26self)%20-%3E%20Result%3Ctypes%3A%3ASlot%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Return%20the%20last%20finalized%20slot%20in%20the%20Beacon%20chain%0A%20%20%20%20-%20%60pub%20fn%20get_last_slot_number(%26self)%20-%3E%20Result%3Ctypes%3A%3ASlot%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Return%20the%20last%20slot%20in%20the%20Beacon%20chain%0A%20%20%20%20-%20%60pub%20fn%20get_slot_by_beacon_block_root(%26self%2C%20beacon_block_hash%3A%20H256%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_block_number_for_slot(%26self%2C%20slot%3A%20types%3A%3ASlot)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_finality_light_client_update(%26self)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_finality_light_client_update_with_sync_commity_update(%26self%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_beacon_state(%26self%2C%20state_id%3A%20%26str%2C)%20-%3E%20Result%3CBeaconState%3CMainnetEthSpec%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20is_syncing(%26self)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_json_from_client(client%3A%20%26Client%2C%20url%3A%20%26str)%20-%3E%20Result%3CString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_json_from_raw_request(%26self%2C%20url%3A%20%26str)%20-%3E%20Result%3CString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_body_json_from_rpc_result(block_json_str%3A%20%26str%2C)%20-%3E%20Result%3Cstd%3A%3Astring%3A%3AString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_header_json_from_rpc_result(json_str%3A%20%26str%2C)%20-%3E%20Result%3Cstd%3A%3Astring%3A%3AString%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_attested_header_from_light_client_update_json_str(light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CBeaconBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_sync_aggregate_from_light_client_update_json_str(light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CSyncAggregate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_signature_slot(%26self%2C%20light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CSlot%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20%60signature_slot%60%20is%20not%20provided%20in%20the%20current%20API.%20The%20slot%20is%20brute-forced%20until%20%60SyncAggregate%60%20in%20%60BeconBlockBody%60%20in%20the%20current%20slot%20is%20equal%20to%20%60SyncAggregate%60%20in%20%60LightClientUpdate%60%0A%20%20%20%20-%20%60fn%20get_finality_update_from_light_client_update_json_str(%26self%2C%20light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CFinalizedHeaderUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20get_sync_committee_update_from_light_client_update_json_str(light_client_update_json_str%3A%20%26str%2C)%20-%3E%20Result%3CSyncCommitteeUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20get_period_for_slot(slot%3A%20u64)%20-%3E%20u64%60%0A%20%20%20%20-%20%60pub%20fn%20get_non_empty_beacon_block_header(%26self%2C%20start_slot%3A%20u64%2C)%20-%3E%20Result%3Ctypes%3A%3ABeaconBlockHeader%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60fn%20check_block_found_for_slot(%26self%2C%20json_str%3A%20%26str)%20-%3E%20Result%3C()%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%5Bhand_made_finality_light_client_update.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth_rpc_client%2Fsrc%2Fhand_made_finality_light_client_update.rs)%3A%20Has%20two%20implementations%0A%20%20%20%20-%20The%20first%20implementation%20which%20calls%20functions%20in%20the%20second%0A%20%20%20%20%20%20-%20%60pub%20fn%20get_finality_light_client_update(beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20attested_slot%3A%20u64%2C%20include_next_sync_committee%3A%20bool%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60pub%20fn%20get_finality_light_client_update_from_file(beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20file_name%3A%20%26str%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60pub%20fn%20get_light_client_update_from_file_with_next_sync_committee(beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20attested_state_file_name%3A%20%26str%2C%20finality_state_file_name%3A%20%26str%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20The%20second%20implementation%0A%20%20%20%20%20%20-%20%60fn%20get_attested_slot_with_enough_sync_committee_bits_sum(beacon_rpc_client%3A%20%26BeaconRPCClient%2Cattested_slot%3A%20u64%2C)%20-%3E%20Result%3C(u64%2C%20u64)%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_state_from_file(file_name%3A%20%26str)%20-%3E%20Result%3CBeaconState%3CMainnetEthSpec%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_finality_light_client_update_for_state(beacon_rpc_client%3A%20%26BeaconRPCClient%2Cattested_slot%3A%20u64%2C%20signature_slot%3A%20u64%2C%20beacon_state%3A%20BeaconState%3CMainnetEthSpec%3E%2C%20finality_beacon_state%3A%20Option%3CBeaconState%3CMainnetEthSpec%3E%3E%2C)%20-%3E%20Result%3CLightClientUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_next_sync_committee(beacon_state%3A%20%26BeaconState%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3CSyncCommitteeUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20from_lighthouse_beacon_header(beacon_header%3A%20%26BeaconBlockHeader%2C)%20-%3E%20eth_types%3A%3Aeth2%3A%3ABeaconBlockHeader%60%0A%20%20%20%20%20%20-%20%60fn%20get_sync_committee_bits(sync_committee_signature%3A%20%26types%3A%3ASyncAggregate%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3C%5Bu8%3B%2064%5D%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_finality_branch(beacon_state%3A%20%26BeaconState%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3CVec%3CH256%3E%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20%20%20-%20%60fn%20get_finality_update(finality_header%3A%20%26BeaconBlockHeader%2C%20beacon_state%3A%20%26BeaconState%3CMainnetEthSpec%3E%2C%20finalized_block_body%3A%20%26BeaconBlockBody%3CMainnetEthSpec%3E%2C)%20-%3E%20Result%3CFinalizedHeaderUpdate%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20-%20%5Blight_client_snapshot_with_proof.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth_rpc_client%2Fsrc%2Flight_client_snapshot_with_proof.rs)%3A%20contains%20the%20structure%20for%20%60LightClientSnapshotWithProof%60%0A%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20pub%20struct%20LightClientSnapshotWithProof%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20beacon_header%3A%20BeaconBlockHeader%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20current_sync_committee%3A%20SyncCommittee%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20current_sync_committee_branch%3A%20Vec%3CH256%3E%2C%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A-%20%5Beth2near-block-relay-rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs)%20includes%20(but%20not%20limited%20to)%20the%20following%20additional%20components%0A%20%20-%20%5Bconfig.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fconfig.rs)%3A%0A%20%20-%20%5Blast_slot_searcher.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Flast_slot_searcher.rs)%3A%20Implementation%20of%20functions%20for%20searching%20last%20slot%20on%20NEAR%20contract.%20Supports%20both%20binary%20and%20linear%20searches.%0A%20%20%20%20-%20%60pub%20fn%20get_last_slot(%26mut%20self%2C%20last_eth_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60n%20binary_slot_search(%26self%2C%20slot%3A%20u64%2C%20finalized_slot%3A%20u64%2C%20last_eth_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%20%3A%20Search%20for%20the%20slot%20before%20the%20first%20unknown%20slot%20on%20NEAR.%20Assumptions%3A%20(1)%20start_slot%20is%20known%20on%20NEAR%20(2)%20last_slot%20is%20unknown%20on%20NEAR.%20Return%20error%20in%20case%20of%20problem%20with%20network%20connection.%0A%20%20%20%20-%20%60fn%20binsearch_slot_forward(%26self%2C%20slot%3A%20u64%2C%20max_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2Ceth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%20%7B%60%3A%20Search%20for%20the%20slot%20before%20the%20first%20unknown%20slot%20on%20NEAR.%20Assumptions%3A%20(1)%20start_slot%20is%20known%20on%20NEAR%20(2)%20last_slot%20is%20unknown%20on%20NEAR.%20Return%20error%20in%20case%20of%20problem%20with%20network%20connection.%0A%20%20%20%20-%20%60fn%20binsearch_slot_range(%26self%2C%20start_slot%3A%20u64%2C%20last_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Search%20for%20the%20slot%20before%20the%20first%20unknown%20slot%20on%20NEAR.%20Assumptions%3A%20(1)%20start_slot%20is%20known%20on%20NEAR%20(2)%20last_slot%20is%20unknown%20on%20NEAR.%20Return%20error%20in%20case%20of%20problem%20with%20network%20connection.%0A%20%20%20%20-%20%60fn%20linear_slot_search(%26self%2C%20slot%3A%20u64%2C%20finalized_slot%3A%20u64%2C%20last_eth_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20the%20last%20slot%20known%20with%20block%20known%20on%20NEAR.%20%60Slot%60%20--%20expected%20last%20known%20slot.%20%60finalized_slot%60%20--%20last%20finalized%20slot%20on%20NEAR%2C%20assume%20as%20known%20slot.%20%60last_eth_slot%60%20--%20head%20slot%20on%20Eth.%0A%20%20%20%20-%20%60fn%20linear_search_forward(%26self%2C%20slot%3A%20u64%2C%20max_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2Ceth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20the%20slot%20before%20the%20first%20unknown%20block%20on%20NEAR.%20The%20search%20range%20is%20%5Bslot%20..%20max_slot).%20If%20there%20is%20no%20unknown%20block%20in%20this%20range%20max_slot%20-%201%20will%20be%20returned.%20Assumptions%3A%20(1)%20block%20for%20slot%20is%20submitted%20to%20NEAR.%20(2)%20block%20for%20max_slot%20is%20not%20submitted%20to%20NEAR.%0A%20%20%20%20-%20%60fn%20linear_search_backward(%26self%2C%20start_slot%3A%20u64%2C%20last_slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cu64%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Returns%20the%20slot%20before%20the%20first%20unknown%20block%20on%20NEAR.%20The%20search%20range%20is%20%5Blast_slot%20..%20start_slot).%20If%20no%20such%20block%20are%20found%20the%20start_slot%20will%20be%20returned.%20Assumptions%3A%20(1)%20block%20for%20start_slot%20is%20submitted%20to%20NEAR%20(2)%20block%20for%20last_slot%20%2B%201%20is%20not%20submitted%20to%20NEAR.%0A%20%20%20%20-%20%60fn%20find_left_non_error_slot(%26self%2C%20left_slot%3A%20u64%2C%20right_slot%3A%20u64%2C%20step%3A%20i8%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2C%20eth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20(u64%2C%20bool)%60%3A%20Find%20the%20leftmost%20non-empty%20slot.%20Search%20range%3A%20%5Bleft_slot%2C%20right_slot).%20Returns%20pair%3A%20(1)%20slot_id%20and%20(2)%20is%20this%20block%20already%20known%20on%20Eth%20client%20on%20NEAR.%20Assume%20that%20right_slot%20is%20non-empty%20and%20it's%20block%20were%20submitted%20to%20NEAR%2C%20so%20if%20non%20correspondent%20block%20is%20found%20we%20return%20(right_slot%2C%20false).%0A%20%20%20%20-%20%60fn%20block_known_on_near(%20%26self%2C%20slot%3A%20u64%2C%20beacon_rpc_client%3A%20%26BeaconRPCClient%2Ceth_client_contract%3A%20%26Box%3Cdyn%20EthClientContractTrait%3E%2C)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%3A%20Check%20if%20the%20block%20for%20current%20slot%20in%20Eth2%20already%20were%20submitted%20to%20NEAR.%20Returns%20Error%20if%20slot%20doesn't%20contain%20any%20block.%0A%20%20-%20%5Bmain.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fmain.rs)%3A%20%5BCommand%20Line%20Argument%20Parser%5D(https%3A%2F%2Fdocs.rs%2Fclap%2Flatest%2Fclap%2F)%20used%20to%20run%20the%20Ethereum%20to%20Near%20Block%20Relay.%20It%20contains%20the%20following%20functions%0A%20%20%20%20-%20%60fn%20get_eth_contract_wrapper(config%3A%20%26Config)%20-%3E%20Box%3Cdyn%20ContractWrapper%3E%60%0A%20%20%20%20-%20%60fn%20get_dao_contract_wrapper(config%3A%20%26Config)%20-%3E%20Box%3Cdyn%20ContractWrapper%3E%60%0A%20%20%20%20-%20%60fn%20get_eth_client_contract(config%3A%20%26Config)%20-%3E%20Box%3Cdyn%20EthClientContractTrait%3E%60%0A%20%20%20%20-%20%60fn%20init_log(args%3A%20%26Arguments%2C%20config%3A%20%26Config)%60%0A%20%20%20%20-%20%60fn%20main()%20-%3E%20Result%3C()%2C%20Box%3Cdyn%20std%3A%3Aerror%3A%3AError%3E%3E%60%0A%20%20-%20%5Bnear_rpc_client.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Fnear_rpc_client.rs)%0A%20%20%20%20-%20%60pub%20fn%20new(endpoint_url%3A%20%26str)%20-%3E%20Self%60%0A%20%20%20%20-%20%60pub%20fn%20check_account_exists(%26self%2C%20account_id%3A%20%26str)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20%60pub%20fn%20is_syncing(%26self)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%0A%23%23%23%23%20Ethereum%20Light%20Client%20Finality%20Update%20Verify%20Components%0A%0A%5Bfinality-update-verify%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Ffinality-update-verify)%20is%20called%20from%20%5Bfn%20verify_bls_signature_for_finality_update%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Feth2near_relay.rs%23L422)%20to%20verify%20signatures%20as%20part%20of%20light_client%20updates.%20It%20relies%20heavily%20on%20the%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20codebase%20for%20it's%20consensus%20and%20cryptogrphic%20primitives.%20See%20%5BCryptographic%20Primitives%5D(%23cryptographic-primitives)%20for%20more%20information.%0A%0A-%20Dependencies%20in%20%5BCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2FCargo.toml)%0A%20%20-%20%60eth-types%20%3D%20%7B%20path%20%3D%22..%2F..%2Fcontracts%2Fnear%2Feth-types%2F%22%2C%20features%20%3D%20%5B%22eip1559%22%5D%7D%60%0A%20%20-%20%60bls%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60eth2-utility%20%20%3D%20%7B%20path%20%3D%22..%2F..%2Fcontracts%2Fnear%2Feth2-utility%22%7D%60%0A%20%20-%20%60tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60types%20%3D%20%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%60%0A%20%20-%20%60bitvec%20%3D%20%221.0.0%22%60%0A%0A-%20Functions%20in%20%5Blib.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2Fsrc%2Flib.rs)%0A%20%20-%20%60fn%20h256_to_hash256(hash%3A%20H256)%20-%3E%20Hash256%60%0A%20%20-%20%60fn%20tree_hash_h256_to_eth_type_h256(hash%3A%20tree_hash%3A%3AHash256)%20-%3E%20eth_types%3A%3AH256%60%0A%20%20-%20%60fn%20to_lighthouse_beacon_block_header(bridge_beacon_block_header%3A%20%26BeaconBlockHeader%2C)%20-%3E%20types%3A%3ABeaconBlockHeader%60%0A%20%20-%20%60pub%20fn%20is_correct_finality_update(ethereum_network%3A%20%26str%2C%20light_client_update%3A%20%26LightClientUpdate%2C%20%20%20sync_committee%3A%20SyncCommittee%2C)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%0A%23%23%23%23%20Cryptographic%20Primitives%0A%0AFollowing%20are%20cryptographic%20primitives%20used%20in%20the%20%5Beth2-client%20contract%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-client)%20and%20%5Bfinality-update-verify%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Ffinality-update-verify).%20Many%20are%20from%20the%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20codebase.%20Specifically%20%5Bconsensus%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fconsensus)%20and%20%5Bcrypto%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto)%20functions.%0A%0ASome%20common%20primitives%0A%0A-%20%5Bbitvec%5D(https%3A%2F%2Fdocs.rs%2Fbitvec%2F1.0.1%2Fbitvec%2F)%3A%20Addresses%20memory%20by%20bits%2C%20for%20packed%20collections%20and%20bitfields%0A-%20%5Beth2_serde_utils%5D(https%3A%2F%2Fdocs.rs%2Feth2_serde_utils%2F0.1.0%2Feth2_serde_utils%2F)%3A%20Serialization%20and%20deserialization%20utilities%20useful%20for%20JSON%20representations%20of%20Ethereum%202.0%20types.%0A-%20%5Beth2_hashing%5D(https%3A%2F%2Fdocs.rs%2Feth2_hashing%2F0.2.0%2Feth2_hashing%2F)%3A%20Hashing%20primitives%20used%20in%20Ethereum%202.0%0A-%20%5Bblst%5D(https%3A%2F%2Fdocs.rs%2Fblst%2F0.3.10%2Fblst%2F)%3A%20The%20blst%20crate%20provides%20a%20rust%20interface%20to%20the%20blst%20BLS12-381%20signature%20library.%0A-%20%5Btree_hash%5D(https%3A%2F%2Fdocs.rs%2Ftree_hash%2F0.4.0%2Ftree_hash%2F)%3A%20Efficient%20Merkle-hashing%20as%20used%20in%20Ethereum%202.0%0A-%20%5Beth2_ssz_types%5D(https%3A%2F%2Fdocs.rs%2Feth2_ssz_types%2F0.2.1%2Fssz_types%2F)%3A%20Provides%20types%20with%20unique%20properties%20required%20for%20SSZ%20serialization%20and%20Merklization.%0A%0ASome%20Primitives%20from%20Lighthouse%0A%0A-%20%5Bbls%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls)%3A%20%5BBoneh%E2%80%93Lynn%E2%80%93Shacham%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBLS_digital_signature)%20digital%20signature%20support%0A%20%20-%20%5Bimpls%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls)%3A%20Implementations%0A%20%20%20%20-%20%5Bblst%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Fblst.rs)%0A%20%20%20%20-%20%5Bfake_crypto%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Ffake_crypto.rs)%0A%20%20%20%20-%20%5Bmilagro%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Fmilagro.rs)%3A%20support%20for%20%5BApache%20Milagro%5D(https%3A%2F%2Fmilagro.apache.org%2Fdocs%2Fmilagro-intro%2F)%0A%20%20%20%20-%20%5Bfunctionality%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls%2Fsrc)%0A%20%20%20%20%20%20-%20%5Bgeneric_aggregate_public_key%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_aggregate_public_key.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_aggregate_signature%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_aggregate_signature.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_keypair%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_keypair.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_public_key%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_public_key.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_public_key_bytes%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_public_key_bytes.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_secret_key%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_secret_key.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_signature%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_signature.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_signature_bytes%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_signature_bytes.rs)%0A%20%20%20%20%20%20-%20%5Bgeneric_signature_set%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fgeneric_signature_set.rs)%0A%20%20%20%20%20%20-%20%5Bget_withdrawal_credentials%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fget_withdrawal_credentials.rs)%0A%20%20%20%20%20%20-%20%5Bzeroize_hash%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fzeroize_hash.rs)%0A-%20%5Bmerkle_proof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fmerkle_proof)%0A-%20%5Btree_hash%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Ftree_hash)%0A-%20%5Btypes%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Ftypes%2Fsrc)%3A%20Implements%20Ethereum%202.0%20types%20including%20but%20not%20limited%20to%0A%20%20-%20%5Battestation%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fattestation.rs)%0A%20%20-%20%5Bbeacon_block%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_block.rs)%0A%20%20-%20%5Bbeacon_committee%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_committee.rs)%0A%20%20-%20%5Bbeacon_state%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_state.rs)%0A%20%20-%20%5Bbuilder_bid%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbuilder_bid.rs)%0A%20%20-%20%5Bchain_spec%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fchain_spec.rs)%0A%20%20-%20%5Bcheckpoint%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fcheckpoint.rs)%0A%20%20-%20%5Bcontribution_and_proof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fcontribution_and_proof.rs)%3A%20A%20Validators%20aggregate%20sync%20committee%20contribution%20and%20selection%20proof.%0A%20%20-%20%5Bdeposit%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fdeposit.rs)%3A%20A%20deposit%20to%20potentially%20become%20a%20beacon%20chain%20validator.%0A%20%20-%20%5Benr_fork_id%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fenr_fork_id.rs)%3A%20Specifies%20a%20fork%20which%20allows%20nodes%20to%20identify%20each%20other%20on%20the%20network.%20This%20fork%20is%20used%20in%20a%20nodes%20local%20ENR.%0A%20%20-%20%5Beth_spec%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Feth_spec.rs)%3A%20Ethereum%20Foundation%20specifications.%0A%20%20-%20%5Bexecution_block_hash%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fexecution_block_hash.rs)%0A%20%20-%20%5Bexecution_payload%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fexecution_payload.rs)%0A%20%20-%20%5Bfork%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Ffork.rs)%3A%20Specifies%20a%20fork%20of%20the%20%60BeaconChain%60%2C%20to%20prevent%20replay%20attacks.%0A%20%20-%20%5Bfree_attestation%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Ffree_attestation.rs)%3A%20Note%3A%20this%20object%20does%20not%20actually%20exist%20in%20the%20spec.%20We%20use%20it%20for%20managing%20attestations%20that%20have%20not%20been%20aggregated.%0A%20%20-%20%5Bpayload%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fpayload.rs)%0A%20%20-%20%5Bsigned_aggregate_and_proof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fsigned_aggregate_and_proof.rs)%3A%20A%20Validators%20signed%20aggregate%20proof%20to%20publish%20on%20the%20%60beacon_aggregate_and_proof%60%20gossipsub%20topic.%0A%20%20-%20%5Bsigned_beacon_block%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fsigned_beacon_block.rs)%3A%20A%20%60BeaconBlock%60%20and%20a%20signature%20from%20its%20proposer.%0A%20%20-%20%5Bslot_data%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fslot_data.rs)%3A%20A%20trait%20providing%20a%20%60Slot%60%20getter%20for%20messages%20that%20are%20related%20to%20a%20single%20slot.%20Useful%20in%20making%20parts%20of%20attestation%20and%20sync%20committee%20processing%20generic.%0A%20%20-%20%5Bslot_epoch%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fslot_epoch.rs)%3A%20The%20%60Slot%60%20and%20%60Epoch%60%20types%20are%20defined%20as%20new%20types%20over%20u64%20to%20enforce%20type-safety%20between%20the%20two%20types.%20Note%3A%20Time%20on%20Ethereum%202.0%20Proof%20of%20Stake%20is%20divided%20into%20slots%20and%20epochs.%20One%20slot%20is%2012%20seconds.%20One%20epoch%20is%206.4%20minutes%2C%20consisting%20of%2032%20slots.%20One%20block%20can%20be%20created%20for%20each%20slot.%0A%20%20-%20%5Bsync_aggregate%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fsync_aggregate.rs)%3A%20Create%20a%20%60SyncAggregate%60%20from%20a%20slice%20of%20%60SyncCommitteeContribution%60s.%20Equivalent%20to%20%60process_sync_committee_contributions%60%20from%20the%20spec.%0A%20%20-%20%5Bsync_committee%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fsync_committee.rs)%0A%20%20-%20%5Btree_hash_impls%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Ftree_hash_impls.rs)%3A%20contains%20custom%20implementations%20of%20%60CachedTreeHash%60%20for%20ETH2-specific%20types.%20It%20makes%20some%20assumptions%20about%20the%20layouts%20and%20update%20patterns%20of%20other%20structs%20in%20this%20crate%2C%20and%20should%20be%20updated%20carefully%20whenever%20those%20structs%20are%20changed.%0A%20%20-%20%5Bvalidator%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fvalidator.rs)%3A%20Information%20about%20a%20%60BeaconChain%60%20validator.%0A%0ASome%20Smart%20Contracts%20deployed%20on%20Ethereum%0A%0A-%20%5Bnearprover%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearprover)%0A%20%20-%20%5BProofDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FProofDecoder.sol)%0A%20%20-%20%5BNearProver.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FNearProver.sol)%0A-%20%5Bnearbridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts)%0A%20%20-%20%5BNearDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearDecoder.sol)%3A%20handles%20decoing%20of%20Public%20Keys%2C%20Signatures%2C%20BlockProducers%20and%20LightClientBlocks%20using%20%60Borsh.sol%60%0A%20%20-%20%5BUtils.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FUtils.sol)%3A%20handles%20reading%20and%20writing%20to%20memory%2C%20memoryToBytes%20and%20has%20functions%20such%20as%20%60keccak256Raw%60%20and%20%60sha256Raw%60%0A%20%20-%20%5BBorsh.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FBorsh.sol)%3A%20%5BBorsh%5D(https%3A%2F%2Fborsh.io%2F)%3A%20Binary%20Object%20Representation%20Serializer%20for%20Hashing.%20It%20is%20meant%20to%20be%20used%20in%20security-critical%20projects%20as%20it%20prioritizes%20consistency%2C%20safety%2C%20speed%3B%20and%20comes%20with%20a%20strict%20specification.%0A%20%20-%20%5BEd25519.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FEd25519.sol)%3A%20%5BEd25519%5D(https%3A%2F%2Fed25519.cr.yp.to%2F)%20high-speed%20high-security%20signatures%0A%0ASome%20Primitives%20from%20NEAR%20Rainbow%20Bridge%0A%0A-%20%5Beth-types%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth-types)%3A%20utilities%20to%20serialize%20and%20encode%20eth2%20types%20using%20%5Bborsh%5D(https%3A%2F%2Fborsh.io%2F)%20and%20%5Brlp%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Frlp).%0A-%20%5Beth2-utility%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-utility)%3A%20Utility%20functions%20used%20for%20Ethereum%202.0%20Consensus.%20Functions%20include%0A%20%20-%20%60fn%20from_str(input%3A%20%26str)%20-%3E%20Result%3CNetwork%2C%20Self%3A%3AErr%3E%60%0A%20%20-%20%60pub%20fn%20new(network%3A%20%26Network)%20-%3E%20Self%60%0A%20%20-%20%60pub%20fn%20compute_fork_version(%26self%2C%20epoch%3A%20Epoch)%20-%3E%20Option%3CForkVersion%3E%60%0A%20%20-%20%60pub%20fn%20compute_fork_version_by_slot(%26self%2C%20slot%3A%20Slot)%20-%3E%20Option%3CForkVersion%3E%60%0A%20%20-%20%60pub%20const%20fn%20compute_epoch_at_slot(slot%3A%20Slot)%20-%3E%20u64%60%0A%20%20-%20%60pub%20const%20fn%20compute_sync_committee_period(slot%3A%20Slot)%20-%3E%20u64%60%0A%20%20-%20%60pub%20const%20fn%20floorlog2(x%3A%20u32)%20-%3E%20u32%60%3A%20Compute%20floor%20of%20log2%20of%20a%20u32.%0A%20%20-%20%60pub%20const%20fn%20get_subtree_index(generalized_index%3A%20u32)%20-%3E%20u32%60%0A%20%20-%20%60pub%20fn%20compute_domain(domain_constant%3A%20DomainType%2C%20fork_version%3A%20ForkVersion%2C%20genesis_validators_root%3A%20H256%2C)%20-%3E%20H256%60%0A%20%20-%20%60pub%20fn%20compute_signing_root(object_root%3A%20H256%2C%20domain%3A%20H256)%20-%3E%20H256%60%0A%20%20-%20%60pub%20fn%20get_participant_pubkeys(public_keys%3A%20%26%5BPublicKeyBytes%5D%2C%20sync_committee_bits%3A%20%26BitVec%3Cu8%2C%20Lsb0%3E%2C)%20-%3E%20Vec%3CPublicKeyBytes%3E%60%0A%20%20-%20%60pub%20fn%20convert_branch(branch%3A%20%26%5BH256%5D)%20-%3E%20Vec%3Cethereum_types%3A%3AH256%3E%60%0A%20%20-%20%60pub%20fn%20validate_beacon_block_header_update(header_update%3A%20%26HeaderUpdate)%20-%3E%20bool%60%0A%20%20-%20%60pub%20fn%20calculate_min_storage_balance_for_submitter(max_submitted_blocks_by_account%3A%20u32%2C)%20-%3E%20Balance%60%0A%0A%23%23%23%20Near%20Rainbow%20Bridge%20Near%20Light%20Client%20Walkthrough%0A%0AThe%20following%20is%20a%20walkthrough%20of%20how%20a%20transaction%20executed%20on%20NEAR%20is%20propogated%20to%20Ethereum's%20%5Bnearbridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge).%20See%20%5Bnearbridge%20Cryptographic%20Primitives%5D(%23nearbridge-cryptographic-primitives)%20for%20more%20information%20on%20the%20cryptography%20used.%0A%0A**NearOnEthClient%20Overview**%0A%0A_The%20following%20is%20an%20excerpt%20from%20a%20blog%20by%20near%20on%20%5Beth-near-rainbow-bridge%5D(https%3A%2F%2Fnear.org%2Fblog%2Feth-near-rainbow-bridge%2F)_%0A%0A%3E%20NearOnEthClient%20is%20an%20implementation%20of%20the%20NEAR%20light%20client%20in%20Solidity%20as%20an%20Ethereum%20contract.%20Unlike%20EthOnNearClient%20it%20does%20not%20need%20to%20verify%20every%20single%20NEAR%20header%20and%20can%20skip%20most%20of%20them%20as%20long%20as%20it%20verifies%20at%20least%20one%20header%20per%20NEAR%20epoch%2C%20which%20is%20about%2043k%20blocks%20and%20lasts%20about%20half%20a%20day.%20As%20a%20result%2C%20NearOnEthClient%20can%20memorize%20hashes%20of%20all%20submitted%20NEAR%20headers%20in%20history%2C%20so%20if%20you%20are%20making%20a%20transfer%20from%20NEAR%20to%20Ethereum%20and%20it%20gets%20interrupted%20you%20don%E2%80%99t%20need%20to%20worry%20and%20you%20can%20resume%20it%20any%20time%2C%20even%20months%20later.%20Another%20useful%20property%20of%20the%20NEAR%20light%20client%20is%20that%20every%20NEAR%20header%20contains%20a%20root%20of%20the%20merkle%20tree%20computed%20from%20all%20headers%20before%20it.%20As%20a%20result%2C%20if%20you%20have%20one%20NEAR%20header%20you%20can%20efficiently%20verify%20any%20event%20that%20happened%20in%20any%20header%20before%20it.%0A%3E%0A%3E%20Another%20useful%20property%20of%20the%20NEAR%20light%20client%20is%20that%20it%20only%20accepts%20final%20blocks%2C%20and%20final%20blocks%20cannot%20leave%20the%20canonical%20chain%20in%20NEAR.%20This%20means%20that%20NearOnEthClient%20does%20not%20need%20to%20worry%20about%20forks.%0A%3E%0A%3E%20However%2C%20unfortunately%2C%20NEAR%20uses%20%5BEd25519%5D(https%3A%2F%2Fgithub.com%2Fethereum%2FEIPs%2Fblob%2Fmaster%2FEIPS%2Feip-665.mdx)%20to%20sign%20messages%20of%20the%20validators%20who%20approve%20the%20blocks%2C%20and%20this%20signature%20is%20not%20available%20as%20an%20EVM%20precompile.%20It%20makes%20verification%20of%20all%20signatures%20of%20a%20single%20NEAR%20header%20prohibitively%20expensive.%20So%20technically%2C%20we%20cannot%20verify%20one%20NEAR%20header%20within%20one%20contract%20call%20to%20NearOnEthClient.%20Therefore%20we%20adopt%20the%20%5Boptimistic%20approach%5D(https%3A%2F%2Fmedium.com%2F%40deaneigenmann%2Foptimistic-contracts-fb75efa7ca84)%20where%20NearOnEthClient%20verifies%20everything%20in%20the%20NEAR%20header%20except%20the%20signatures.%20Then%20anyone%20can%20challenge%20a%20signature%20in%20a%20submitted%20header%20within%20a%204-hour%20challenge%20window.%20The%20challenge%20requires%20verification%20of%20a%20single%20Ed25519%20signature%20which%20would%20cost%20about%20500k%20Ethereum%20gas%20(expensive%2C%20but%20possible).%20The%20user%20submitting%20the%20NEAR%20header%20would%20have%20to%20post%20a%20bond%20in%20Ethereum%20tokens%2C%20and%20a%20successful%20challenge%20would%20burn%20half%20of%20the%20bond%20and%20return%20the%20other%20half%20to%20the%20challenger.%20The%20bond%20should%20be%20large%20enough%20to%20pay%20for%20the%20gas%20even%20if%20the%20gas%20price%20increases%20exponentially%20during%20the%204%20hours.%20For%20instance%2C%20a%2020%20ETH%20bond%20would%20cover%20gas%20price%20hikes%20up%20to%2020000%20Gwei.%20This%20optimistic%20approach%20requires%20having%20a%20watchdog%20service%20that%20monitors%20submitted%20NEAR%20headers%20and%20challenges%20any%20headers%20with%20invalid%20signatures.%20For%20added%20security%2C%20independent%20users%20can%20run%20several%20watchdog%20services.%0A%3E%0A%3E%20Once%20EIP665%20is%20accepted%2C%20Ethereum%20will%20have%20the%20Ed25519%20signature%20available%20as%20an%20EVM%20precompile.%20This%20will%20make%20watchdog%20services%20and%20the%204-hour%20challenge%20window%20unnecessary.%0A%3E%0A%3E%20At%20its%20bare%20minimum%2C%20Rainbow%20Bridge%20consists%20of%20EthOnNearClient%20and%20NearOnEthClient%20contracts%2C%20and%20three%20services%3A%20Eth2NearRelay%2C%20Near2EthRelay%2C%20and%20the%20Watchdog.%20We%20might%20argue%20that%20this%20already%20constitutes%20a%20bridge%20since%20we%20have%20established%20a%20cryptographic%20link%20between%20two%20blockchains%2C%20but%20practically%20speaking%20it%20requires%20a%20large%20portion%20of%20additional%20code%20to%20make%20application%20developers%20even%20consider%20using%20the%20Rainbow%20Bridge%20for%20their%20applications.%0A%0A_The%20following%20information%20on%20sending%20assets%20from%20NEAR%20back%20to%20Ethereum%20is%20an%20excerpt%20from%20%5Bhttps%3A%2F%2Fnear.org%2Fbridge%2F%5D(https%3A%2F%2Fnear.org%2Fbridge%2F)._%0A%0A%3E%20Sending%20assets%20from%20NEAR%20back%20to%20Ethereum%20currently%20takes%20a%20maximum%20of%20sixteen%20hours%20(due%20to%20Ethereum%20finality%20times)%20and%20costs%20around%20%2460%20(due%20to%20ETH%20gas%20costs%20and%20at%20current%20ETH%20price).%20These%20costs%20and%20speeds%20will%20improve%20in%20the%20near%20future.%0A%0A%23%23%23%23%20NEAR%20to%20Ethereum%20block%20propagation%20costing%0A%0AThe%20following%20links%20provide%20the%20production%20Ethereum%20addresses%20and%20blockexplorer%20views%20for%20NearBridge.sol%20and%20the%20ERC20%20Locker%0A%0A-%20%5BEthereum%20Mainnet%20Bridge%20addresses%20and%20parameters%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge-client%2Ftree%2Fmain%2Fpackages%2Fclient%23ethereum-mainnet-bridge-addresses-and-parameters)%0A-%20%5BNearBridge.sol%20on%20Ethereum%20Block%20Explorer%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x3fefc5a4b1c02f21cbc8d3613643ba0635b9a873)%0A%20%20-%20%5BSample%20%60addLightClientBlock(bytes%20data)%60%20function%20call%5D(https%3A%2F%2Fetherscan.io%2Ftx%2F0xa0fbf1405747dbc1c1bda1227e46bc7c5feac36c0eeaab051022cfdb268e60cc%2Fadvanced)%0A-%20%5BNEAR%20ERC20Locker%20on%20Ethereum%20Block%20Explorer%5D(https%3A%2F%2Fetherscan.io%2Faddress%2F0x23ddd3e3692d1861ed57ede224608875809e127f%23code)%0A%0AAt%20time%20of%20writing%20(Oct%2026th%2C%202022).%0A%0A-%20NEAR%20Light%20Client%20Blocks%20are%20propogated%20every%20%604%20hours%60%0A-%20Sample%20Transaction%20fee%20%600.061600109576901025%20Ether%20(%2496.56)%60%0A-%20Daily%20Transaction%20fees%20cost%20approximately%20%60%24600%60%0A-%20_Note%3A%20Infrastructure%20costs%20for%20running%20relayer%2C%20watchdog%2C%20etc%20are%20not%20included._%0A%0A%23%23%23%23%20NEAR%20to%20Ethereum%20block%20propagation%20flow%0A%0A%5BNEAR%20Light%20Client%20Documentation%5D(https%3A%2F%2Fnomicon.io%2FChainSpec%2FLightClient)%20gives%20an%20overview%20of%20how%20light%20clients%20work.%20At%20a%20high%20level%20the%20light%20client%20needs%20to%20fetch%20at%20least%20one%20block%20per%20%5Bepoch%5D(https%3A%2F%2Fdocs.near.org%2Fconcepts%2Fbasics%2Fepoch)%20i.e.%20every%2042%2C200%20blocks%20or%20approxmiately%2012%20hours.%20Also%20Having%20the%20LightClientBlockView%20for%20block%20B%20is%20sufficient%20to%20be%20able%20to%20verify%20any%20statement%20about%20state%20or%20outcomes%20in%20any%20block%20in%20the%20ancestry%20of%20B%20(including%20B%20itself).%0A%0AThe%20current%20scripts%20and%20codebase%20indicates%20that%20a%20block%20would%20be%20fetched%20every%2030%20seconds%20with%20a%20max%20delay%20of%2010%20seconds.%20It%20feels%20that%20this%20would%20be%20expensive%20to%20update%20Ethereum%20so%20frequently.%20%5BNEAR's%20bridge%20documentation%5D(https%3A%2F%2Fnear.org%2Fbridge%2F)%20states%20_Sending%20assets%20from%20NEAR%20back%20to%20Ethereum%20currently%20takes%20a%20maximum%20of%20sixteen%20hours%20(due%20to%20Ethereum%20finality%20times)_.%20This%20seems%20to%20align%20with%20sending%20light%20client%20updates%20once%20per%20NEAR%20epoch.%20The%20block%20fetch%20period%20is%20configurable%20in%20the%20relayer.%0A%0A%3E%20The%20RPC%20returns%20the%20LightClientBlock%20for%20the%20block%20as%20far%20into%20the%20future%20from%20the%20last%20known%20hash%20as%20possible%20for%20the%20light%20client%20to%20still%20accept%20it.%20Specifically%2C%20it%20either%20returns%20the%20last%20final%20block%20of%20the%20next%20epoch%2C%20or%20the%20last%20final%20known%20block.%20If%20there's%20no%20newer%20final%20block%20than%20the%20one%20the%20light%20client%20knows%20about%2C%20the%20RPC%20returns%20an%20empty%20result.%0A%3E%0A%3E%20A%20standalone%20light%20client%20would%20bootstrap%20by%20requesting%20next%20blocks%20until%20it%20receives%20an%20empty%20result%2C%20and%20then%20periodically%20request%20the%20next%20light%20client%20block.%0A%3E%0A%3E%20A%20smart%20contract-based%20light%20client%20that%20enables%20a%20bridge%20to%20NEAR%20on%20a%20different%20blockchain%20naturally%20cannot%20request%20blocks%20itself.%20Instead%20external%20oracles%20query%20the%20next%20light%20client%20block%20from%20one%20of%20the%20full%20nodes%2C%20and%20submit%20it%20to%20the%20light%20client%20smart%20contract.%20The%20smart%20contract-based%20light%20client%20performs%20the%20same%20checks%20described%20above%2C%20so%20the%20oracle%20doesn't%20need%20to%20be%20trusted.%0A%0ABlock%20Submitters%20stake%20ETH%20to%20be%20allowed%20to%20submit%20blocks%20which%20get's%20slashed%20if%20the%20watchdog%20identifies%20blocks%20with%20invalid%20signatures.%0A%0A_Note%3A%20Have%20not%20identified%20how%20the%20block%20submitters%20are%20rewarded%20for%20submitting%20blocks.%20Currently%20have%20only%20identified%20them%20locking%20ETH%20to%20be%20able%20to%20submit%20blocks%20and%20being%20slashed%20if%20they%20submit%20blocks%20with%20invalid%20signatures._%0A%0A-%20%5BLight%20Clients%20are%20deployed%20on%20Ethereum%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Findex.js%23L518)%20via%20the%20CLI%20using%20%5Beth-contracts.js%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Finit%2Feth-contracts.js)%0A%20%20-%20%5Binit-eth-ed25519%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Findex.js%23L505)%3A%20Deploys%20%60Ed25519.sol%60%20see%20more%20information%20under%20%5Bnearbridge%20Cryptographic%20Primitives%5D(%23nearbridge-cryptographic-primitives)%0A%20%20-%20%5Binit-eth-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Findex.js%23L520)%3A%20Deploys%20%60NearBridge.sol%60%20see%20more%20information%20under%20%5BNEAR%20to%20Ethereum%20block%20propagation%20components%5D(%23near-to-ethereum-block-propagation-components).%20It%20takes%20the%20following%20arguments%0A%20%20%20%20-%20%60ethEd25519Address%60%3A%20The%20address%20of%20the%20ECDSA%20signature%20checker%20using%20Ed25519%20curve%20(see%20%5Bhere%5D(https%3A%2F%2Fnbeguier.medium.com%2Fa-real-world-comparison-of-the-ssh-key-algorithms-b26b0b31bfd9))%0A%20%20%20%20-%20%60lockEthAmount%60%3A%20The%20amount%20that%20%60BLOCK_PRODUCERS%60%20need%20to%20deposit%20(in%20wei)to%20be%20able%20to%20provide%20blocks.%20This%20amount%20will%20be%20slashed%20if%20the%20block%20is%20challenged%20and%20proven%20not%20to%20have%20a%20valid%20signature.%20Default%20value%20is%20100000000000000000000%20WEI%20%3D%20100%20ETH.%0A%20%20%20%20-%20%60lockDuration%60%20%3A%2030%20seconds%0A%20%20%20%20-%20%60replaceDuration%60%3A%2060%20seconds%20it%20is%20passed%20in%20nanoseconds%2C%20because%20it%20is%20a%20difference%20between%20NEAR%20timestamps.%0A%20%20%20%20-%20%60ethAdminAddress%60%3A%20Bridge%20Administrator%20Address%0A%20%20%20%20-%20%600%60%20%3A%20Indicates%20nothing%20is%20paused%20%60UNPAUSE_ALL%60%0A%20%20-%20%5Binit-eth-prover%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Findex.js%23L538)%3A%20Deploys%20%60NearProver.sol%60%20see%20more%20information%20under%20%5BNEAR%20to%20Ethereum%20block%20propagation%20components%5D(%23near-to-ethereum-block-propagation-components).%20It%20takes%20the%20following%20arguments%0A%20%20%20%20-%20%60ethClientAddress%60%3A%20Interface%20to%20%60NearBridge.sol%60%0A%20%20%20%20-%20%60ethAdminAddress%60%3A%20Administrator%20address%0A%20%20%20%20-%20%600%60%3A%20paused%20indicator%20defaults%20to%20%60UNPAUSE_ALL%20%3D%200%60%0A-%20%5BRelayer%20is%20Started%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Fcommands%2Fstart%2Fnear2eth-relay.js)%0A%20%20-%20Relayer%20is%20started%20using%20the%20following%20command%0A%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20cli%2Findex.js%20start%20near2eth-relay%20%5C%0A%20%20%20%20%20%20%20%20--eth-node-url%20http%3A%2F%2F127.0.0.1%3A8545%2F%20%5C%0A%20%20%20%20%20%20%20%20--eth-master-sk%200xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80%20%5C%0A%20%20%20%20%20%20%20%20--near-node-url%20https%3A%2F%2Frpc.testnet.near.org%2F%20%5C%0A%20%20%20%20%20%20%20%20--near-network-id%20testnet%20%5C%0A%20%20%20%20%20%20%20%20--eth-client-address%200xe7f1725e7734ce288f8367e1bb143e90bb3f0512%20%5C%0A%20%20%20%20%20%20%20%20--eth-use-eip-1559%20true%20%5C%0A%20%20%20%20%20%20%20%20--near2eth-relay-max-delay%2010%20%5C%0A%20%20%20%20%20%20%20%20--near2eth-relay-block-select-duration%2030%20%5C%0A%20%20%20%20%20%20%20%20--near2eth-relay-after-submit-delay-ms%201000%20%5C%0A%20%20%20%20%20%20%20%20--log-verbose%20true%20%5C%0A%20%20%20%20%20%20%20%20--daemon%20false%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A-%20%5BRelayer%20Logic%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fnear2eth%2Fnear2eth-block-relay%2Findex.js)%0A%20%20-%20Loops%20%60while%20(true)%60%0A%20%20%20%20-%20Get%20the%20bridge%20state%20(including%20%60currentHeight%60%2C%20%60nextTimestamp%60%2C%20%60nextValidAt%60%2C%20%60numBlockProducers%60%20)%0A%20%20%20%20-%20Get%20the%20%60currentBlockHash%60%20the%20hash%20of%20the%20current%20untrursted%20block%20based%20on%20%60lastValidAt%60%0A%20%20%20%20-%20Gets%20the%20%60lastBlock%60%20by%20calling%20the%20NEAR%20rpc%20%60next_light_client_block%60%20using%20the%20hash%20of%20last%20untrusted%20block%20%60bs58.encode(currentBlockHash)%60%0A%20%20%20%20-%20Get's%20the%20%60replaceDuration%60%20by%20%60clientContract.methods.replaceDuration().call()%60%20this%20will%20be%2060%20seconds%20if%20we%20deployed%20%60NearBridge.sol%60%20with%20the%20default%20values%20above%0A%20%20%20%20-%20Sets%20%60nextValidAt%60%20from%20the%20bridge%20state%20%60web3.utils.toBN(bridgeState.nextValidAt)%60%0A%20%20%20%20-%20Sets%20%60replaceDelay%60%20to%200%20then%20updates%20it%20to%20the%20%60nextTimestamp%60%20%2B%20%60replaceDuration%60%20-%20%60lastBlock.inner_lite.timestamp%60%20i.e.%20The%20new%20block%20has%20to%20be%20at%20least%2060%20seconds%20after%20the%20current%20block%20stored%20on%20the%20light%20client.%0A%20%20%20%20-%20Checks%20the%20height%20of%20the%20%60currentHeight%60%20of%20the%20bridge%20is%20less%20than%20the%20%60lastblock%60%20from%20the%20near%20light%20client%20%60(bridgeState.currentHeight%20%3C%20lastBlock.inner_lite.height)%60%0A%20%20%20%20-%20Serializes%20the%20%60lastBlock%60%20using%20Borsh%20and%20check%20that%20the%20block%20is%20suitable%0A%20%20%20%20-%20Checks%20that%20the%20%60replaceDelay%60%20has%20been%20met%2C%20if%20not%20sleeps%20until%20it%20has%0A%20%20%20%20-%20Checks%20that%20the%20Master%20Account%20(the%20one%20submitting%20the%20block)%20has%20enough%20locked%20ETH%20(if%20not%20tries%20to%20deposit%20more).%20So%20that%20it%20can%20be%20slashed%20if%20the%20block%20proposed%20is%20invalid.%0A%20%20%20%20-%20Adds%20the%20light%20client%20block%20%60await%20clientContract.methods.addLightClientBlock(nextBlockSelection.borshBlock).send%60%0A%20%20%20%20%20%20-%20Checks%20%60NearBridge.sol%60%20(the%20light%20client)%20has%20been%20initialized%0A%20%20%20%20%20%20-%20Checks%20%60balanceOf%5Bmsg.sender%5D%20%3E%3D%20lockEthAmount%60%20that%20the%20sender%20has%20locked%20enough%20Eth%20to%20allow%20them%20to%20submit%20blocks%0A%20%20%20%20%20%20-%20Decodes%20the%20nearBlock%20using%20%60Borsh.from(data)%60%20and%20%60borsh.decodeLightClientBlock()%60%0A%20%20%20%20%20%20-%20Commis%20the%20previous%20block%2C%20or%20make%20sure%20that%20it%20is%20OK%20to%20replace%20it%20using%0A%20%20%20%20%20%20%20%20-%20%60lastValidAt%20%3D%200%3B%60%0A%20%20%20%20%20%20%20%20-%20%60blockHashes_%5BcurHeight%5D%20%3D%20untrustedHash%3B%60%0A%20%20%20%20%20%20%20%20-%20%60blockMerkleRoots_%5BcurHeight%5D%20%3D%20untrustedMerkleRoot%3B%60%0A%20%20%20%20%20%20-%20Check%20that%20the%20new%20block's%20height%20is%20greater%20than%20the%20current%20one's.%20%60nearBlock.inner_lite.height%20%3E%20curHeight%60%0A%20%20%20%20%20%20-%20Check%20that%20the%20new%20block%20is%20from%20the%20same%20epoch%20as%20the%20current%20one%2C%20or%20from%20the%20next%20one.%0A%20%20%20%20%20%20-%20Check%20that%20the%20new%20block%20is%20signed%20by%20more%20than%202%2F3%20of%20the%20validators.%0A%20%20%20%20%20%20-%20If%20the%20block%20is%20from%20the%20next%20epoch%2C%20make%20sure%20that%20the%20Block%20producers%20%60next_bps%60%20are%20supplied%20and%20have%20a%20correct%20hash.%0A%20%20%20%20%20%20-%20Add%20the%20Block%20to%20the%20Light%20client%0A%20%20%20%20%20%20%20%20-%20Updates%20untrusted%20information%20to%20this%20block%20including%20%60untrustedHeight%60%2C%20%60untrustedTimestamp%60%2C%20%60untrustedHash%60%2C%20%60untrustedMerkleRoot%60%2C%20%60untrustedNextHash%60%2C%20%60untrustedSignatureSet%60%2C%20%60untrustedNextEpoch%60%0A%20%20%20%20%20%20%20%20-%20If%20%60fromNextEpoch%60%20also%20update%20the%20Block%20Producers%0A%20%20%20%20%20%20%20%20-%20Updates%20the%20%60lastSubmitter%60%20and%20%60lastValidAt%60%0A%20%20%20%20-%20Cleans%20up%20the%20selected%20block%20to%20prevent%20submitting%20the%20same%20block%20again%20%60await%20sleep(afterSubmitDelayMs)%60%0A%20%20%20%20-%20Sets%20the%20HeightGauuges%20to%20the%20correct%20block%20height%0A%20%20%20%20%20%20-%20%60clientHeightGauge.set(Number(BigInt(bridgeState.currentHeight))%60%0A%20%20%20%20%20%20-%20%60chainHeightGauge.set(Number(BigInt(lastBlock.inner_lite.height)))%60%0A%20%20%20%20-%20Sleeps%20for%20delay%20calculated%20from%20the%20maximum%20of%20the%20relayer%20days%20(10%20seconds)%20and%20differnce%20between%20the%20current%20and%20next%20block%20time%20stamps%20and%20%60await%20sleep(1000%20*%20delay)%60%0A%0A%23%23%23%23%20NEAR%20to%20Ethereum%20watchdog%0A%0AThe%20%5Bwatchdog%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fnear2eth%2Fwatchdog%2Findex.js)%20runs%20every%2010%20seconds%20and%20validates%20blocks%20on%20%60NearBridge.sol%60%20challenging%20blocks%20with%20incorrect%20signatures.%20_Note%3A%20It%20uses%20%5Bheep-prometheus%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Fhttp-prometheus.js)%20for%20monitoring%20and%20storing%20block%20and%20producer%20information%20using%20%60gauges%60%20and%20%60counters%60._%0A%0A-%20%5Bwatchdog%20is%20started%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Fcommands%2Fstart%2Fwatchdog.js)%20from%20the%20CLI%0A-%20%5Bwatchdog%20logic%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fnear2eth%2Fwatchdog%2Findex.js)%0A%20%20-%20Initializes%20monitoring%20information%20on%20%60Prometheus%60%0A%20%20%20%20-%20%60const%20httpPrometheus%20%3D%20new%20HttpPrometheus(this.metricsPort%2C%20'near_bridge_watchdog_')%60%0A%20%20%20%20-%20%60const%20lastBlockVerified%20%3D%20httpPrometheus.gauge('last_block_verified'%2C%20'last%20block%20that%20was%20already%20verified')%60%0A%20%20%20%20-%20%60const%20totBlockProducers%20%3D%20httpPrometheus.gauge('block_producers'%2C%20'number%20of%20block%20producers%20for%20current%20block')%60%0A%20%20%20%20-%20%60const%20incorrectBlocks%20%3D%20httpPrometheus.counter('incorrect_blocks'%2C%20'number%20of%20incorrect%20blocks%20found')%60%0A%20%20%20%20-%20%60const%20challengesSubmitted%20%3D%20httpPrometheus.counter('challenges_submitted'%2C%20'number%20of%20blocks%20challenged')%60%0A%20%20-%20Loops%20%60while%20(true)%60%0A%20%20%20%20-%20Gets%20the%20%60bridgeState%60%0A%20%20%20%20-%20Loops%20through%20all%20blockProducers%20checking%20their%20signatures%0A%20%20%20%20-%20%60for%20(let%20i%20%3D%200%3B%20i%20%3C%20numBlockProducers%3B%20i%2B%2B)%60%0A%20%20%20%20%20%20-%20Check%20each%20signature%20%60this.clientContract.methods.checkBlockProducerSignatureInHead(i).call()%60%0A%20%20%20%20%20%20-%20If%20invalid%20challenge%20the%20signature%3A%20%60this.clientContract.methods.challenge(this.ethMasterAccount%2C%20i).encodeABI()%60%20calls%20%5Bchallenge%20function%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearBridge.sol%23L93)%0A%20%20%20%20%20%20%20%20-%20%60function%20challenge(address%20payable%20receiver%2C%20uint%20signatureIndex)%20external%20override%20pausable(PAUSED_CHALLENGE)%60%0A%20%20%20%20%20%20%20%20%20%20-%20checks%20block.timestamp%20is%20less%20than%20lastValidAt%20%60block.timestamp%20%3C%20lastValidAt%2C%60%0A%20%20%20%20%20%20%20%20%20%20-%20Check%20if%20the%20signature%20is%20valid%20%60!checkBlockProducerSignatureInHead(signatureIndex)%60%0A%20%20%20%20%20%20%20%20%20%20-%20slashes%20the%20last%20submitter%20%60balanceOf%5BlastSubmitter%5D%20%3D%20balanceOf%5BlastSubmitter%5D%20-%20lockEthAmount%3B%60%0A%20%20%20%20%20%20%20%20%20%20-%20resets%20lastValidAt%20%60lastValidAt%20%3D%200%3B%60%0A%20%20%20%20%20%20%20%20%20%20-%20Refunds%20half%20of%20the%20funds%20to%20the%20watchdog%20account%20%60receiver.call%7Bvalue%3A%20lockEthAmount%20%2F%202%7D(%22%22)%3B%60%0A%20%20%20%20%20%20-%20Sleeps%20for%20watchdog%20Delay%20seconds%20%60await%20sleep(watchdogDelay%20*%201000)%60%0A%0A%23%23%23%23%20NEAR%20to%20Ethereum%20block%20propagation%20components%0A%0A-%20%5Beth2near-relay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcli%2Fcommands%2Fstart%2Feth2near-relay.js)%3A%20Command%20to%20start%20the%20NEAR%20to%20Ethereum%20relay.%20See%20sample%20invocation%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fdocs%2Fdevelopment.md%23near2eth-relay)%0A-%20%5Bnear2eth-block-relay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fnear2eth%2Fnear2eth-block-relay)%20is%20written%20in%20javascript%0A%20%20-%20Has%20%5Bdependencies%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fnear2eth%2Fnear2eth-block-relay%2Fpackage.json)%20including%20%5Brainbow-bridge-utils%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Futils)%20see%20%5Bhere%5D(near-rainbow-bridge-utils)%20for%20more%20information.%20It's%20other%20dependencies%20are%20also%20included%20in%20%60rainbow-bridge-utils%60.%0A%20%20%20%20-%20%5Bethereumjs-util%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fethereumjs-util)%3A%20A%20collection%20of%20utility%20functions%20for%20Ethereum.%0A%20%20-%20Has%20the%20following%20functions%20and%20classes%0A%20%20%20%20-%20%60class%20Near2EthRelay%60%0A%20%20%20%20%20%20-%20%60async%20initialize%20(%7BnearNodeUrl%2C%20nearNetworkId%2C%20ethNodeUrl%2C%20ethMasterSk%2C%20ethClientArtifactPath%2C%20ethClientAddress%2C%20ethGasMultiplier%2C%20metricsPort%20%7D)%60%0A%20%20%20%20%20%20-%20%60async%20withdraw%20(%7BethGasMultiplier%7D)%60%0A%20%20%20%20%20%20-%20%60async%20runInternal%20(%7BsubmitInvalidBlock%2C%20near2ethRelayMinDelay%2C%20near2ethRelayMaxDelay%2C%20near2ethRelayErrorDelay%2C%20near2ethRelayBlockSelectDuration%2C%20near2ethRelayNextBlockSelectDelayMs%2C%20near2ethRelayAfterSubmitDelayMs%2C%20ethGasMultiplier%2C%20ethUseEip1559%2C%20logVerbose%7D)%60%0A%20%20%20%20%20%20-%20%60run%20(options)%20%7Breturn%20this.runInternal(%7B...options%2C%20submitInvalidBlock%3A%20false%7D)%20%7D%60%0A-%20%5BNearBridge.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearBridge.sol)%3A%20Is%20the%20NEAR%20light%20client%20deployed%20on%20ethereum.%0A%20%20-%20It%20imports%20the%20following%20contracts%20(see%20%5Bnearbridge%20cryptographic%20primitives%5D(%23nearbridge-cryptographic-primitives))%0A%20%20%20%20-%20%60import%20%22.%2FAdminControlled.sol%22%3B%60%0A%20%20%20%20-%20%60import%20%22.%2FINearBridge.sol%22%3B%60%0A%20%20%20%20-%20%60import%20%22.%2FNearDecoder.sol%22%3B%60%0A%20%20%20%20-%20%60import%20%22.%2FEd25519.sol%22%3B%60%0A%20%20-%20It%20provides%20the%20following%20structure%20for%20Bridge%20State.%20If%20there%20is%20currently%20no%20unconfirmed%20block%2C%20the%20last%20three%20fields%20are%20zero.%0A%20%20%20%20-%20%60uint%20currentHeight%3B%60%3A%20Height%20of%20the%20current%20confirmed%20block%0A%20%20%20%20-%20%60uint%20nextTimestamp%3B%60%3A%20Timestamp%20of%20the%20current%20unconfirmed%20block%0A%20%20%20%20-%20%60uint%20nextValidAt%3B%60%3A%20Timestamp%20when%20the%20current%20unconfirmed%20block%20will%20be%20confirmed%0A%20%20%20%20-%20%60uint%20numBlockProducers%3B%60%3A%20Number%20of%20block%20producers%20for%20the%20current%20unconfirmed%20block%0A%20%20-%20It%20provides%20the%20following%20storage%0A%20%20%20%20-%20%60uint%20constant%20MAX_BLOCK_PRODUCERS%20%3D%20100%3B%60%3A%20Assumed%20to%20be%20even%20and%20to%20not%20exceed%20256.%0A%20%20%20%20-%20%60struct%20Epoch%20%7Bbytes32%20epochId%3B%20uint%20numBPs%3B%20bytes%20%5BMAX_BLOCK_PRODUCERS%5D%20keys%3B%20bytes32%5BMAX_BLOCK_PRODUCERS%20%2F%202%5D%20packedStakes%3B%20uint256%20stakeThreshold%3B%7D%60%0A%20%20%20%20-%20%60uint256%20public%20lockEthAmount%3B%60%0A%20%20%20%20-%20%60uint256%20public%20lockDuration%3B%60%3A%20lockDuration%20and%20replaceDuration%20shouldn't%20be%20extremely%20big%2C%20so%20adding%20them%20to%20an%20uint64%20timestamp%20should%20not%20overflow%20uint256.%0A%20%20%20%20-%20%60uint256%20public%20replaceDuration%3B%60%3A%20replaceDuration%20is%20in%20nanoseconds%2C%20because%20it%20is%20a%20difference%20between%20NEAR%20timestamps.%0A%20%20%20%20-%20%60Ed25519%20immutable%20edwards%3B%60%0A%20%20%20%20-%20%60uint256%20public%20lastValidAt%3B%60%3A%20End%20of%20challenge%20period.%20If%20zero%2C%20_%60untrusted%60_%20fields%20and%20%60lastSubmitter%60%20are%20not%20meaningful.%0A%20%20%20%20-%20%60uint64%20curHeight%3B%60%0A%20%20%20%20-%20%60uint64%20untrustedHeight%3B%60%3A%20The%20most%20recently%20added%20block.%20May%20still%20be%20in%20its%20challenge%20period%2C%20so%20should%20not%20be%20trusted.%0A%20%20%20%20-%20%60address%20lastSubmitter%3B%60%3A%20Address%20of%20the%20account%20which%20submitted%20the%20last%20block.%0A%20%20%20%20-%20%60bool%20public%20initialized%3B%60%3A%20Whether%20the%20contract%20was%20initialized.%0A%20%20%20%20-%20%60bool%20untrustedNextEpoch%3B%60%0A%20%20%20%20-%20%60bytes32%20untrustedHash%3B%60%0A%20%20%20%20-%20%60bytes32%20untrustedMerkleRoot%3B%60%0A%20%20%20%20-%20%60bytes32%20untrustedNextHash%3B%60%0A%20%20%20%20-%20%60uint256%20untrustedTimestamp%3B%60%0A%20%20%20%20-%20%60uint256%20untrustedSignatureSet%3B%60%0A%20%20%20%20-%20%60NearDecoder.Signature%5BMAX_BLOCK_PRODUCERS%5D%20untrustedSignatures%3B%60%0A%20%20%20%20-%20%60Epoch%5B3%5D%20epochs%3B%60%0A%20%20%20%20-%20%60uint256%20curEpoch%3B%60%0A%20%20%20%20-%20%60mapping(uint64%20%3D%3E%20bytes32)%20blockHashes_%3B%60%0A%20%20%20%20-%20%60mapping(uint64%20%3D%3E%20bytes32)%20blockMerkleRoots_%3B%60%0A%20%20%20%20-%20%60mapping(address%20%3D%3E%20uint256)%20public%20override%20balanceOf%3B%60%0A%20%20-%20It%20provides%20the%20following%20functions%0A%20%20%20%20-%20%60constructor(Ed25519%20ed%2C%20uint256%20lockEthAmount_%2C%20uint256%20lockDuration_%2C%20uint256%20replaceDuration_%2C%20address%20admin_%2C%20uint256%20pausedFlags_)%60%3A%20_Note%3A%20require%20the%20%60lockDuration%60%20(in%20seconds)%20to%20be%20at%20least%20one%20second%20less%20than%20the%20%60replaceDuration%60%20(in%20nanoseconds)%20%60require(replaceDuration*%20%3E%20lockDuration*%20_%201000000000)%3B%60%0A%20%20%20%20%20%20-%20%60ethEd25519Address%60%3A%20The%20address%20of%20the%20ECDSA%20signature%20checker%20using%20Ed25519%20curve%20(see%20%5Bhere%5D(https%3A%2F%2Fnbeguier.medium.com%2Fa-real-world-comparison-of-the-ssh-key-algorithms-b26b0b31bfd9))%0A%20%20%20%20%20%20-%20%60lockEthAmount%60%3A%20The%20amount%20that%20%60BLOCK_PRODUCERS%60%20need%20to%20deposit%20(in%20wei)to%20be%20able%20to%20provide%20blocks.%20This%20amount%20will%20be%20slashed%20if%20the%20block%20is%20challenged%20and%20proven%20not%20to%20have%20a%20valid%20signature.%20Default%20value%20is%20100000000000000000000%20WEI%20%3D%20100%20ETH.%0A%20%20%20%20%20%20-%20%60lockDuration%60%20%3A%2030%20seconds%0A%20%20%20%20%20%20-%20%60replaceDuration%60%3A%2060%20seconds%20it%20is%20passed%20in%20nanoseconds%2C%20because%20it%20is%20a%20difference%20between%20NEAR%20timestamps.%0A%20%20%20%20%20%20-%20%60ethAdminAddress%60%3A%20Bridge%20Administrator%20Address%0A%20%20%20%20%20%20-%20%600%60%20%3A%20Indicates%20nothing%20is%20paused%20%60UNPAUSE_ALL%60%0A%20%20%20%20-%20%60function%20deposit()%20public%20payable%20override%20pausable(PAUSED_DEPOSIT)%60%0A%20%20%20%20-%20%60function%20withdraw()%20public%20override%20pausable(PAUSED_WITHDRAW)%60%0A%20%20%20%20-%20%60function%20challenge(address%20payable%20receiver%2C%20uint%20signatureIndex)%20external%20override%20pausable(PAUSED_CHALLENGE%60%0A%20%20%20%20-%20%60function%20checkBlockProducerSignatureInHead(uint%20signatureIndex)%20public%20view%20override%20returns%20(bool)%60%0A%20%20%20%20-%20%60function%20initWithValidators(bytes%20memory%20data)%20public%20override%20onlyAdmin%60%3A%20The%20first%20part%20of%20initialization%20--%20setting%20the%20validators%20of%20the%20current%20epoch.%0A%20%20%20%20-%20%60function%20initWithBlock(bytes%20memory%20data)%20public%20override%20onlyAdmin%60%3A%20The%20second%20part%20of%20the%20initialization%20--%20setting%20the%20current%20head.%0A%20%20%20%20-%20%60function%20bridgeState()%20public%20view%20returns%20(BridgeState%20memory%20res)%60%0A%20%20%20%20-%20%60function%20bridgeState()%20public%20view%20returns%20(BridgeState%20memory%20res)%60%0A%20%20%20%20-%20%60function%20addLightClientBlock(bytes%20memory%20data)%20public%20override%20pausable(PAUSED_ADD_BLOCK)%60%0A%20%20%20%20-%20%60function%20setBlockProducers(NearDecoder.BlockProducer%5B%5D%20memory%20src%2C%20Epoch%20storage%20epoch)%20internal%60%0A%20%20%20%20-%20%60function%20blockHashes(uint64%20height)%20public%20view%20override%20pausable(PAUSED_VERIFY)%20returns%20(bytes32%20res)%60%0A%20%20%20%20-%20%60function%20blockMerkleRoots(uint64%20height)%20public%20view%20override%20pausable(PAUSED_VERIFY)%20returns%20(bytes32%20res)%60%0A-%20%5BNearProver.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FNearProver.sol)%3A%20Is%20used%20to%20prove%20the%20validity%20of%20NEAR%20blocks%20on%20Ethereum.%0A%20%20-%20It%20imports%20the%20following%20contracts%20(see%20%5Bnearbridge%20cryptographic%20primitives%5D(%23nearbridge-cryptographic-primitives))%0A%20%20%20%20-%20%60import%20%22rainbow-bridge-sol%2Fnearbridge%2Fcontracts%2FNearDecoder.sol%22%3B%60%0A%20%20%20%20-%20%60import%20%22.%2FProofDecoder.sol%22%3B%60%0A%20%20-%20It%20has%20the%20following%20functions%0A%20%20%20%20-%20%60constructor(INearBridge%20_bridge%2C%20address%20_admin%2C%20uint%20_pausedFlags)%60%0A%20%20%20%20%20%20-%20%60_bridge%60%3A%20Interface%20to%20%60NearBridge.sol%60%0A%20%20%20%20%20%20-%20%60_admin%60%3A%20Administrator%20address%0A%20%20%20%20%20%20-%20%60_pausedFlags%60%3A%20paused%20indicator%20defaults%20to%20%60UNPAUSE_ALL%20%3D%200%60%0A%20%20%20%20-%20%60function%20proveOutcome(bytes%20memory%20proofData%2C%20uint64%20blockHeight)%60%0A%20%20%20%20-%20%60function%20_computeRoot(bytes32%20node%2C%20ProofDecoder.MerklePath%20memory%20proof)%20internal%20pure%20returns%20(bytes32%20hash)%60%0A%0A%23%23%23%23%20NEAR%20Rainbow%20Bridge%20Utils%0A%0A%5Brainbow-bridge-utils%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Futils)%20provides%20a%20set%20of%20utilities%20for%20the%20near%20rainbow%20bridge%20written%20in%20javascript.%0A%0A-%20It%20has%20the%20following%20%5Bdependencies%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Fpackage.json)%0A%20%20-%20%5Bbn.js%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fbn.js)%3A%20Big%20number%20implementation%20in%20pure%20javascript%0A%20%20-%20%5Bbsert%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fbsert)%3A%20Minimal%20assert%20with%20type%20checking.%0A%20%20-%20%5Bbs58%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fbs58)%3A%20JavaScript%20component%20to%20compute%20base%2058%20encoding%0A%20%20-%20%5Bchange-case%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fchange-case)%3A%20Transform%20a%20string%20between%20camelCase%2C%20PascalCase%2C%20Capital%20Case%2C%20snake_case%2C%20param-case%2C%20CONSTANT_CASE%20and%20others.%0A%20%20-%20%5Bconfigstore%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fconfigstore)%3A%20Easily%20load%20and%20save%20config%20without%20having%20to%20think%20about%20where%20and%20how%0A%20%20-%20%5Beth-object%5D(https%3A%2F%2Fgithub.com%2Fnear%2Feth-object%23383b6ea68c7050bea4cab6950c1d5a7fa553e72b)%3A%20re-usable%20and%20composable%20objects%20that%20you%20can%20just%20call%20Object.from%20to%20ingest%20new%20data%20to%20serialize%20Ethereum%20Trie%20%2F%20LevelDB%20data%20from%20hex%2C%20buffers%20and%20rpc%20into%20the%20same%20format.%0A%20%20-%20%5Beth-util-lite%5D(https%3A%2F%2Fgithub.com%2Fnear%2Feth-util-lite)%3A%20a%20low-dependency%20utility%20for%20Ethereum.%20It%20replaces%20a%20small%20subset%20of%20the%20ethereumjs-util%20and%20ethjs-util%20APIs.%0A%20%20-%20%5Blodash%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Flodash)%3A%20A%20set%20of%20utilities%20for%20working%20with%20arrays%2C%20numbers%2C%20objects%2C%20strings%2C%20etc.%0A%20%20-%20%5Bnear-api-js%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fnear-api-js)%3A%20JavaScript%20library%20to%20interact%20with%20NEAR%20Protocol%20via%20RPC%20API%0A%20%20-%20%5Bweb3%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fweb3)%3A%20Ethereum%20JavaScript%20API%0A-%20It%20provides%20the%20following%20functions%0A%20%20-%20%5Baddress-watcher%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Faddress-watcher.js)%3A%20Watches%20a%20group%20of%20near%20and%20ethereum%20acccounts%20polling%20NEAR%20and%20Ethereum%20every%20second%20and%20updating%20%60nearAccount.balanceGauge%60%2C%20%60nearAccount.stateStorageGauge%60%20and%20%60ethereumAccount.balanceGauge%60.%0A%20%20-%20%5Bborsh%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Fborsh.js)%3A%20provides%20the%20following%20functions%20for%20Binary%20Object%20Representation%20Serializer%20for%20Hashing%20%5Bborsh%5D(https%3A%2F%2Fborsh.io%2F)%0A%20%20%20%20-%20%60function%20serializeField%20(schema%2C%20value%2C%20fieldType%2C%20writer)%60%0A%20%20%20%20-%20%60function%20deserializeField%20(schema%2C%20fieldType%2C%20reader)%60%0A%20%20%20%20-%20%60function%20serialize%20(schema%2C%20fieldType%2C%20obj)%60%3A%20Serialize%20given%20object%20using%20schema%20of%20the%20form%3A%20%60%7B%20class_name%20-%3E%20%5B%20%5Bfield_name%2C%20field_type%5D%2C%20..%20%5D%2C%20..%20%7D%60%0A%20%20%20%20-%20%60class%20BinaryReader%60%3A%20Includes%20utilities%20to%20read%20numbers%2C%20strings%20arrays%20and%20burggers%0A%20%20%20%20-%20%60function%20deserialize%20(schema%2C%20fieldType%2C%20buffer)%60%0A%20%20%20%20-%20%60const%20signAndSendTransactionAsync%20%3D%20async%20(accessKey%2C%20account%2C%20receiverId%2Cactions)%20%3D%3E%60%0A%20%20%20%20-%20%60const%20txnStatus%20%3D%20async%20(account%2C%20txHash%2C%20retries%20%3D%20RETRY_TX_STATUS%2C%20wait%20%3D%201000)%20%3D%3E%60%0A%20%20%20%20-%20%60function%20getBorshTransactionLastResult%20(txResult)%60%0A%20%20%20%20-%20%60class%20BorshContract%20%7B%60%0A%20%20%20%20%20%20-%20%60constructor%20(borshSchema%2C%20account%2C%20contractId%2C%20options)%60%0A%20%20%20%20%20%20-%20%60async%20accessKeyInit%20()%60%0A%20%20%20%20-%20%60function%20borshify%20(block)%60%0A%20%20%20%20-%20%60function%20borshifyInitialValidators%20(initialValidators)%60%0A%20%20%20%20-%20%60const%20hexToBuffer%20%3D%20(hex)%20%3D%3E%60%0A%20%20%20%20-%20%60const%20readerToHex%20%3D%20(len)%20%3D%3E%60%0A%20%20-%20%5Bborshify-proof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Fborshify-proof.js)%0A%20%20%20%20-%20%60function%20borshifyOutcomeProof%20(proof)%60%0A%20%20-%20%5Brobust%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Frobust.js)%3A%20his%20module%20gives%20a%20few%20utils%20for%20robust%20error%20handling%2C%20and%20wrap%20web3%20with%20error%20handling%20and%20retry%0A%20%20-%20%5Butils%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Futils%2Futils.js)%0A%20%20%20%20-%20%60async%20function%20setupNear%20(config)%60%0A%20%20%20%20-%20%60async%20function%20setupEth%20(config)%60%0A%20%20%20%20-%20%60async%20function%20setupEthNear%20(config)%60%3A%20Setup%20connection%20to%20NEAR%20and%20Ethereum%20from%20given%20configuration.%0A%20%20%20%20-%20%60function%20remove0x%20(value)%60%3A%20Remove%200x%20if%20prepended%0A%20%20%20%20-%20%60function%20normalizeHex%20(value)%60%0A%20%20%20%20-%20%60async%20function%20accountExists%20(connection%2C%20accountId)%60%0A%20%20%20%20-%20%60async%20function%20createLocalKeyStore%20(networkId%2C%20keyPath)%60%0A%20%20%20%20-%20%60function%20getWeb3%20(config)%60%0A%20%20%20%20-%20%60function%20getEthContract%20(web3%2C%20path%2C%20address)%60%0A%20%20%20%20-%20%60function%20addSecretKey%20(web3%2C%20secretKey)%60%0A%20%20%20%20-%20%60async%20function%20ethCallContract%20(contract%2C%20methodName%2C%20args)%60%3A%20Wrap%20pure%20calls%20to%20Web3%20contract%20to%20handle%20errors%2Freverts%2Fgas%20usage.%0A%0A%23%23%23%23%20nearbridge%20Cryptographic%20Primitives%0A%0A-%20%5BEd25519.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FEd25519.sol)%3A%20Solidity%20implementation%20of%20the%20%5BEd25519%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FEdDSA)%20which%20is%20the%20EdDSA%20signature%20scheme%20using%20SHA-512%20(SHA-2)%20and%20Curve25519%20(see%20%5Bhere%5D(https%3A%2F%2Fnbeguier.medium.com%2Fa-real-world-comparison-of-the-ssh-key-algorithms-b26b0b31bfd9)).%20It%20has%20the%20following%20functions%0A%20%20-%20%60function%20pow22501(uint256%20v)%20private%20pure%20returns%20(uint256%20p22501%2C%20uint256%20p11)%60%20%3A%20Computes%20(v%5E(2%5E250-1)%2C%20v%5E11)%20mod%20p%0A%20%20-%20%60function%20check(bytes32%20k%2C%20bytes32%20r%2C%20bytes32%20s%2C%20bytes32%20m1%2C%20bytes9%20m2)%60%20%3A%20has%20the%20following%20steps%0A%20%20%20%20-%20Step%201%3A%20compute%20SHA-512(R%2C%20A%2C%20M)%0A%20%20%20%20-%20Step%202%3A%20unpack%20k%0A%20%20%20%20-%20Step%203%3A%20compute%20multiples%20of%20k%0A%20%20%20%20-%20Step%204%3A%20compute%20s*G%20-%20h*A%0A%20%20%20%20-%20Step%205%3A%20compare%20the%20points%0A-%20%5BUtils.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FUtils.sol)%3A%20A%20set%20of%20utilty%20functions%20for%20byte%20manipulation%2C%20memory%20updates%20and%20%5Bkeccak%5D(https%3A%2F%2Fkeccak.team%2Fkeccak_specs_summary.html)%20functions.%0A%20%20-%20%60function%20swapBytes2(uint16%20v)%20internal%20pure%20returns%20(uint16)%60%0A%20%20-%20%60function%20swapBytes4(uint32%20v)%20internal%20pure%20returns%20(uint32)%60%0A%20%20-%20%60function%20swapBytes8(uint64%20v)%20internal%20pure%20returns%20(uint64)%60%0A%20%20-%20%60function%20swapBytes16(uint128%20v)%20internal%20pure%20returns%20(uint128)%60%0A%20%20-%20%60function%20swapBytes32(uint256%20v)%20internal%20pure%20returns%20(uint256)%60%0A%20%20-%20%60function%20readMemory(uint%20ptr)%20internal%20pure%20returns%20(uint%20res)%60%0A%20%20-%20%60function%20writeMemory(uint%20ptr%2C%20uint%20value)%20internal%20pure%60%0A%20%20-%20%60function%20memoryToBytes(uint%20ptr%2C%20uint%20length)%20internal%20pure%20returns%20(bytes%20memory%20res)%60%0A%20%20-%20%60function%20keccak256Raw(uint%20ptr%2C%20uint%20length)%20internal%20pure%20returns%20(bytes32%20res)%60%0A%20%20-%20%60function%20sha256Raw(uint%20ptr%2C%20uint%20length)%20internal%20view%20returns%20(bytes32%20res)%60%0A-%20%5BBorsh.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FBorsh.sol)%20provides%20Binary%20Object%20Representation%20Serializer%20for%20Hashing%20%5Bborsh%5D(https%3A%2F%2Fborsh.io%2F)%20functionality%20and%20imports%20%60Utils.sols%60.%20Structures%20and%20functions%20include%0A%20%20-%20%60struct%20Data%20%7Buint%20ptr%3B%20uint%20end%3B%7D%60%0A%20%20-%20%60function%20from(bytes%20memory%20data)%20internal%20pure%20returns%20(Data%20memory%20res)%60%0A%20%20-%20%60function%20requireSpace(Data%20memory%20data%2C%20uint%20length)%20internal%20pure%60%3A%20This%20function%20assumes%20that%20length%20is%20reasonably%20small%2C%20so%20that%20data.ptr%20%2B%20length%20will%20not%20overflow.%20In%20the%20current%20code%2C%20length%20is%20always%20less%20than%202%5E32.%0A%20%20-%20%60function%20read(Data%20memory%20data%2C%20uint%20length)%20internal%20pure%20returns%20(bytes32%20res)%60%0A%20%20-%20%60function%20done(Data%20memory%20data)%20internal%20pure%60%0A%20%20-%20%60function%20peekKeccak256(Data%20memory%20data%2C%20uint%20length)%20internal%20pure%20returns%20(bytes32)%60%3A%20Same%20considerations%20as%20for%20requireSpace.%0A%20%20-%20%60function%20peekSha256(Data%20memory%20data%2C%20uint%20length)%20internal%20view%20returns%20(bytes32)%60%3A%20Same%20considerations%20as%20for%20requireSpace.%0A%20%20-%20%60function%20decodeU8(Data%20memory%20data)%20internal%20pure%20returns%20(uint8)%60%0A%20%20-%20%60function%20decodeU16(Data%20memory%20data)%20internal%20pure%20returns%20(uint16)%60%0A%20%20-%20%60function%20decodeU32(Data%20memory%20data)%20internal%20pure%20returns%20(uint32)%60%0A%20%20-%20%60function%20decodeU64(Data%20memory%20data)%20internal%20pure%20returns%20(uint64)%60%0A%20%20-%20%60function%20decodeU128(Data%20memory%20data)%20internal%20pure%20returns%20(uint128)%60%0A%20%20-%20%60function%20decodeU256(Data%20memory%20data)%20internal%20pure%20returns%20(uint256)%60%0A%20%20-%20%60function%20decodeBytes20(Data%20memory%20data)%20internal%20pure%20returns%20(bytes20)%60%0A%20%20-%20%60function%20decodeBytes32(Data%20memory%20data)%20internal%20pure%20returns%20(bytes32)%60%0A%20%20-%20%60function%20decodeBool(Data%20memory%20data)%20internal%20pure%20returns%20(bool)%60%0A%20%20-%20%60function%20skipBytes(Data%20memory%20data)%20internal%20pure%60%0A%20%20-%20%60function%20decodeBytes(Data%20memory%20data)%20internal%20pure%20returns%20(bytes%20memory%20res)%60%0A-%20%5BNearDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearDecoder.sol)%3A%20Imports%20%60Borsh.sol%60%20and%20has%20utilities%20for%20decoding%20Public%20Keys%2C%20Signatures%2C%20Block%20Producers%2C%20Block%20Headers%20and%20Light%20Client%20Blocks.%0A%20%20-%20%60function%20decodePublicKey(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(PublicKey%20memory%20res)%60%0A%20%20-%20%60function%20decodeSignature(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(Signature%20memory%20res)%60%0A%20%20-%20%60function%20decodeBlockProducer(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(BlockProducer%20memory%20res)%60%0A%20%20-%20%60function%20decodeBlockProducers(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(BlockProducer%5B%5D%20memory%20res)%60%0A%20%20-%20%60function%20decodeOptionalBlockProducers(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(OptionalBlockProducers%20memory%20res)%60%0A%20%20-%20%60function%20decodeOptionalSignature(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(OptionalSignature%20memory%20res)%60%0A%20%20-%20%60function%20decodeBlockHeaderInnerLite(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(BlockHeaderInnerLite%20memory%20res)%60%0A%20%20-%20%60function%20decodeLightClientBlock(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(LightClientBlock%20memory%20res)%60%0A-%20%5BProofDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FProofDecoder.sol)%3A%20Imports%20%60Borsh.sol%60%20and%20%60NearDecoder.sol%60%20and%20has%20utilities%20for%20decoding%20Proofs%2C%20BlockHeader%2C%20ExecutionStatus%2C%20ExecutionOutcome%20and%20MerklePaths.%20Structures%20and%20functions%20include%0A%20%20-%20%60struct%20FullOutcomeProof%20%7BExecutionOutcomeWithIdAndProof%20outcome_proof%3B%20MerklePath%20outcome_root_proof%3B%20BlockHeaderLight%20block_header_lite%3B%20MerklePath%20block_proof%3B%7D%60%0A%20%20-%20%60function%20decodeFullOutcomeProof(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(FullOutcomeProof%20memory%20proof)%60%0A%20%20-%20%60struct%20BlockHeaderLight%20%7Bbytes32%20prev_block_hash%3B%20bytes32%20inner_rest_hash%3B%20NearDecoder.BlockHeaderInnerLite%20inner_lite%3B%20bytes32%20hash%3B%7D%60%0A%20%20-%20%60function%20decodeBlockHeaderLight(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(BlockHeaderLight%20memory%20header)%60%0A%20%20-%20%60struct%20ExecutionStatus%20%7Buint8%20enumIndex%3B%20bool%20unknown%3B%20bool%20failed%3B%20bytes%20successValue%3B%20bytes32%20successReceiptId%3B%7D%60%0A%20%20%20%20-%20%60successValue%60%20indicates%20if%20the%20final%20action%20succeeded%20and%20returned%20some%20value%20or%20an%20empty%20vec.%0A%20%20%20%20-%20%60successReceiptId%60%20is%20the%20final%20action%20of%20the%20receipt%20returned%20a%20promise%20or%20the%20signed%20transaction%20was%20converted%20to%20a%20receipt.%20Contains%20the%20receipt_id%20of%20the%20generated%20receipt.%0A%20%20-%20%60function%20decodeExecutionStatus(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(ExecutionStatus%20memory%20executionStatus)%60%0A%20%20-%20%60struct%20ExecutionOutcome%20%7Bbytes%5B%5D%20logs%3B%20bytes32%5B%5D%20receipt_ids%3B%20uint64%20gas_burnt%3B%20uint128%20tokens_burnt%3B%20bytes%20executor_id%3B%20ExecutionStatus%20status%3B%20bytes32%5B%5D%20merkelization_hashes%3B%7D%60%0A%20%20%20%20-%20%60bytes%5B%5D%20logs%3B%60%3A%20Logs%20from%20this%20transaction%20or%20receipt.%0A%20%20%20%20-%20%60bytes32%5B%5D%20receipt_ids%3B%60%3A%20Receipt%20IDs%20generated%20by%20this%20transaction%20or%20receipt.%0A%20%20%20%20-%20%60uint64%20gas_burnt%3B%60%3A%20The%20amount%20of%20the%20gas%20burnt%20by%20the%20given%20transaction%20or%20receipt.%0A%20%20%20%20-%20%60uint128%20tokens_burnt%3B%60%3A%20The%20total%20number%20of%20the%20tokens%20burnt%20by%20the%20given%20transaction%20or%20receipt.%0A%20%20%20%20-%20%60bytes%20executor_id%3B%60%3A%20Hash%20of%20the%20transaction%20or%20receipt%20id%20that%20produced%20this%20outcome.%0A%20%20%20%20-%20%60ExecutionStatus%20status%60%3A%20Execution%20status.%20Contains%20the%20result%20in%20case%20of%20successful%20execution.%0A%20%20%20%20-%20%60bytes32%5B%5D%20merkelization_hashes%3B%60%0A%20%20-%20%60function%20decodeExecutionOutcome(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(ExecutionOutcome%20memory%20outcome)%60%0A%20%20-%20%60struct%20ExecutionOutcomeWithId%20%7Bbytes32%20id%3B%20ExecutionOutcome%20outcome%3B%20bytes32%20hash%3B%7D%60%0A%20%20%20%20-%20%60bytes32%20id%60%3A%20is%20the%20transaction%20hash%20or%20the%20receipt%20ID.%0A%20%20-%20%60function%20decodeExecutionOutcomeWithId(Borsh.Data%20memory%20data)%20internal%20view%20returns%20(ExecutionOutcomeWithId%20memory%20outcome)%60%0A%20%20-%20%60struct%20MerklePathItem%20%7Bbytes32%20hash%3B%20uint8%20direction%3B%7D%60%0A%20%20%20%20-%20%60uint8%20direction%60%3A%20where%200%20%3D%20left%2C%201%20%3D%20right%0A%20%20-%20%60function%20decodeMerklePathItem(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(MerklePathItem%20memory%20item)%60%0A%20%20-%20%60struct%20MerklePath%20%7BMerklePathItem%5B%5D%20items%3B%7D%60%0A%20%20-%20%60function%20decodeMerklePath(Borsh.Data%20memory%20data)%20internal%20pure%20returns%20(MerklePath%20memory%20path)%60%0A%20%20-%20%60struct%20ExecutionOutcomeWithIdAndProof%20%7BMerklePath%20proof%3B%20bytes32%20block_hash%3B%20ExecutionOutcomeWithId%20outcome_with_id%3B%7D%60%0A%20%20-%20%60function%20decodeExecutionOutcomeWithIdAndProof(Borsh.Data%20memory%20data)internal%20view%20returns%20(ExecutionOutcomeWithIdAndProof%20memory%20outcome)%60%0A%0A%23%23%23%20Token%20Transfer%20Process%20Flow%0A%0AThe%20%5BNEAR%20Rainbow%20Bridge%5D(https%3A%2F%2Fnear.org%2Fbridge%2F)%20uses%20ERC-20%20connectors%20which%20are%20developed%20in%20%5Brainbow-token-connector%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector)%20and%20%5Brainbow-bridge-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge-client).%20Also%20see%20%5Beth2near-fun-transfer.md%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fdocs%2Fworkflows%2Feth2near-fun-transfer.mdx).%0A%0AFollowing%20is%20an%20overview%20of%20timing%20and%20anticipated%20costs%0A%0A-%20Once%20on%20NEAR%2C%20transactions%20will%20confirm%20in%201-2%20seconds%20and%20cost%20well%20under%20%241%20in%20most%20cases.%0A-%20Since%20the%20Bridge%20requires%20transactions%20on%20Ethereum%20for%20NEAR%20and%20Ethereum%2C%20the%20following%20costs%20are%20expected.%0A-%20Sending%20assets%20from%20Ethereum%20to%20NEAR%20takes%20about%20six%20minutes%20(20%20blocks)%20and%20for%20ERC-20%20costs%20about%20%2410%20on%20average.%0A-%20Sending%20assets%20from%20NEAR%20back%20to%20Ethereum%20currently%20takes%20a%20maximum%20of%20sixteen%20hours%20(due%20to%20Ethereum%20finality%20times)%20and%20costs%20around%20%2460%20(due%20to%20ETH%20gas%20costs%20and%20at%20current%20ETH%20price).%20These%20costs%20and%20speeds%20will%20improve%20in%20the%20near%20future.%0A%0A_Note%3A%20This%20uses%20Ethreum%20%5BERC20%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-20)%20and%20NEAR%20%5BNEP-141%5D(https%3A%2F%2Fnomicon.io%2FStandards%2FTokens%2FFungibleToken%2FCore)%20initally%20developed%20for%20%5BNEP-21%5D(https%3A%2F%2Fgithub.com%2Fnear%2FNEPs%2Fpull%2F21)_%0A%0A**%5BGeneric%20ERC-20%2FNEP-141%20connector%20for%20Rainbow%20Bridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2FREADME.mdx)**%0A%0A**Specification**%0A%0A**Ethereum's%20side**%0A%0A%60%60%60solidity%0Acontract%20ERC20Locker%20%7B%0A%20%20constructor(bytes%20memory%20nearTokenFactory%2C%20INearProver%20prover)%20public%3B%0A%20%20function%20lockToken(IERC20%20token%2C%20uint256%20amount%2C%20string%20memory%20accountId)%20public%3B%0A%20%20function%20unlockToken(bytes%20memory%20proofData%2C%20uint64%20proofBlockHeader)%20public%3B%0A%7D%0A%60%60%60%0A%0A**NEAR's%20side**%0A%0A%60%60%60rust%0Astruct%20BridgeTokenFactory%20%7B%0A%20%20%20%20%2F%2F%2F%20The%20account%20of%20the%20prover%20that%20we%20can%20use%20to%20prove%0A%20%20%20%20pub%20prover_account%3A%20AccountId%2C%0A%20%20%20%20%2F%2F%2F%20Address%20of%20the%20Ethereum%20locker%20contract.%0A%20%20%20%20pub%20locker_address%3A%20%5Bu8%3B%2020%5D%2C%0A%20%20%20%20%2F%2F%2F%20Hashes%20of%20the%20events%20that%20were%20already%20used.%0A%20%20%20%20pub%20used_events%3A%20UnorderedSet%3CVec%3Cu8%3E%3E%2C%0A%20%20%20%20%2F%2F%2F%20Mapping%20from%20Ethereum%20tokens%20to%20NEAR%20tokens.%0A%20%20%20%20pub%20tokens%3A%20UnorderedMap%3CEvmAddress%2C%20AccountId%3E%3B%0A%7D%0A%0Aimpl%20BridgeTokenFactory%20%7B%0A%20%20%20%20%2F%2F%2F%20Initializes%20the%20contract.%0A%20%20%20%20%2F%2F%2F%20%60prover_account%60%3A%20NEAR%20account%20of%20the%20Near%20Prover%20contract%3B%0A%20%20%20%20%2F%2F%2F%20%60locker_address%60%3A%20Ethereum%20address%20of%20the%20locker%20contract%2C%20in%20hex.%0A%20%20%20%20%23%5Binit%5D%0A%20%20%20%20pub%20fn%20new(prover_account%3A%20AccountId%2C%20locker_address%3A%20String)%20-%3E%20Self%3B%0A%0A%20%20%20%20%2F%2F%2F%20Relays%20the%20lock%20event%20from%20Ethereum.%0A%20%20%20%20%2F%2F%2F%20Uses%20prover%20to%20validate%20that%20proof%20is%20correct%20and%20relies%20on%20a%20canonical%20Ethereum%20chain.%0A%20%20%20%20%2F%2F%2F%20Send%20%60mint%60%20action%20to%20the%20token%20that%20is%20specified%20in%20the%20proof.%0A%20%20%20%20%23%5Bpayable%5D%0A%20%20%20%20pub%20fn%20deposit(%26mut%20self%2C%20proof%3A%20Proof)%3B%0A%0A%20%20%20%20%2F%2F%2F%20A%20callback%20from%20BridgeToken%20contract%20deployed%20under%20this%20factory.%0A%20%20%20%20%2F%2F%2F%20Is%20called%20after%20tokens%20are%20burned%20there%20to%20create%20an%20receipt%20result%20%60(amount%2C%20token_address%2C%20recipient_address)%60%20for%20Ethereum%20to%20unlock%20the%20token.%0A%20%20%20%20pub%20fn%20finish_withdraw(token_account%3A%20AccountId%2C%20amount%3A%20Balance%2C%20recipient%3A%20EvmAddress)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Transfers%20given%20NEP-21%20token%20from%20%60predecessor_id%60%20to%20factory%20to%20lock.%0A%20%20%20%20%2F%2F%2F%20On%20success%2C%20leaves%20a%20receipt%20result%20%60(amount%2C%20token_address%2C%20recipient_address)%60.%0A%20%20%20%20%23%5Bpayable%5D%0A%20%20%20%20pub%20fn%20lock(%26mut%20self%2C%20token%3A%20AccountId%2C%20amount%3A%20Balance%2C%20recipient%3A%20String)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Relays%20the%20unlock%20event%20from%20Ethereum.%0A%20%20%20%20%2F%2F%2F%20Uses%20prover%20to%20validate%20that%20proof%20is%20correct%20and%20relies%20on%20a%20canonical%20Ethereum%20chain.%0A%20%20%20%20%2F%2F%2F%20Uses%20NEP-21%20%60transfer%60%20action%20to%20move%20funds%20to%20%60recipient%60%20account.%0A%20%20%20%20%23%5Bpayable%5D%0A%20%20%20%20pub%20fn%20unlock(%26mut%20self%2C%20proof%3A%20Proof)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Deploys%20BridgeToken%20contract%20for%20the%20given%20EVM%20address%20in%20hex%20code.%0A%20%20%20%20%2F%2F%2F%20The%20name%20of%20new%20NEP21%20compatible%20contract%20will%20be%20%3Chex(evm_address)%3E.%3Ccurrent_id%3E.%0A%20%20%20%20%2F%2F%2F%20Expects%20~35N%20attached%20to%20cover%20storage%20for%20BridgeToken.%0A%20%20%20%20%23%5Bpayable%5D%0A%20%20%20%20pub%20fn%20deploy_bridge_token(address%3A%20String)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Checks%20if%20Bridge%20Token%20has%20been%20successfully%20deployed%20with%20%60deploy_bridge_token%60.%0A%20%20%20%20%2F%2F%2F%20On%20success%2C%20returns%20the%20name%20of%20NEP21%20contract%20associated%20with%20given%20address%20(%3Chex(evm_address)%3E.%3Ccurrent_id%3E).%0A%20%20%20%20%2F%2F%2F%20Otherwise%2C%20returns%20%22token%20do%20not%20exists%22%20error.%0A%20%20%20%20pub%20fn%20get_bridge_token_account_id(%26self%2C%20address%3A%20String)%20-%3E%20AccountId%3B%0A%7D%0A%0Astruct%20BridgeToken%20%7B%0A%20%20%20controller%3A%20AccountId%2C%0A%20%20%20token%3A%20Token%2C%20%2F%2F%20uses%20https%3A%2F%2Fgithub.com%2Filblackdragon%2Fbalancer-near%2Ftree%2Fmaster%2Fnear-lib-rs%0A%7D%0A%0Aimpl%20BridgeToken%20%7B%0A%20%20%20%20%2F%2F%2F%20Setup%20the%20Token%20contract%20with%20given%20factory%2Fcontroller.%0A%20%20%20%20pub%20fn%20new(controller%3A%20AccountId)%20-%3E%20Self%3B%0A%0A%20%20%20%20%2F%2F%2F%20Mint%20tokens%20to%20given%20user.%20Only%20can%20be%20called%20by%20the%20controller.%0A%20%20%20%20pub%20fn%20mint(%26mut%20self%2C%20account_id%3A%20AccountId%2C%20amount%3A%20Balance)%3B%0A%0A%20%20%20%20%2F%2F%2F%20Withdraw%20tokens%20from%20this%20contract.%0A%20%20%20%20%2F%2F%2F%20Burns%20sender's%20tokens%20and%20calls%20controller%20to%20create%20event%20for%20relaying.%0A%20%20%20%20pub%20fn%20withdraw(%26mut%20self%2C%20amount%3A%20U128%2C%20recipient%3A%20String)%20-%3E%20Promise%3B%0A%7D%0A%0Aimpl%20FungibleToken%20for%20BridgeToken%20%7B%0A%20%20%20%2F%2F%20see%20example%20https%3A%2F%2Fgithub.com%2Filblackdragon%2Fbalancer-near%2Fblob%2Fmaster%2Fbalancer-pool%2Fsrc%2Flib.rs%23L329%0A%7D%0A%60%60%60%0A%0A**Setup%20new%20ERC-20%20on%20NEAR**%0A%0ATo%20setup%20token%20contract%20on%20NEAR%20side%2C%20anyone%20can%20call%20%60%3Cbridge_token_factory%3E.deploy_bridge_token(%3Cerc20%3E)%60%20where%20%60%3Cerc20%3E%60%20is%20the%20address%20of%20the%20token.%0AWith%20this%20call%20must%20attach%20the%20amount%20of%20%24NEAR%20to%20cover%20storage%20for%20(at%20least%2030%20%24NEAR%20currently).%0A%0AThis%20will%20create%20%60%3C%3Chex(erc20)%3E.%3Cbridge_token_factory%3E%3E%60%20NEP141-compatible%20contract.%0A%0A**Usage%20flow%20Ethereum%20-%3E%20NEAR**%0A%0A1.%20User%20sends%20%60%3Cerc20%3E.approve(%3Cerc20locker%3E%2C%20%3Camount%3E)%60%20Ethereum%20transaction.%0A2.%20User%20sends%20%60%3Cerc20locker%3E.lock(%3Cerc20%3E%2C%20%3Camount%3E%2C%20%3Cdestination%3E)%60%20Ethereum%20transaction.%20This%20transaction%20will%20create%20%60Locked%60%20event.%0A3.%20Relayers%20will%20be%20sending%20Ethereum%20blocks%20to%20the%20%60EthClient%60%20on%20NEAR%20side.%0A4.%20After%20sufficient%20number%20of%20confirmations%20on%20top%20of%20the%20mined%20Ethereum%20block%20that%20contain%20the%20%60lock%60%20transaction%2C%20user%20or%20relayer%20can%20call%20%60BridgeTokenFactory.deposit(proof)%60.%20Proof%20is%20the%20extracted%20information%20from%20the%20event%20on%20Ethereum%20side.%0A5.%20%60BridgeTokenFactory.deposit%60%20function%20will%20call%20%60EthProver%60%20and%20verify%20that%20proof%20is%20correct%20and%20relies%20on%20a%20block%20with%20sufficient%20number%20of%20confirmations.%0A6.%20%60EthProver%60%20will%20return%20callback%20to%20%60BridgeTokenFactory%60%20confirming%20that%20proof%20is%20correct.%0A7.%20%60BridgeTokenFactory%60%20will%20call%20%60%3C%3Chex(erc20)%3E.%3Cbridge_token_factory%3E%3E.mint(%3Cnear_account_id%3E%2C%20%3Camount%3E)%60.%0A8.%20User%20can%20use%20%60%3C%3Chex(erc20)%3E.%3Cbridge_token_factory%3E%3E%60%20token%20in%20other%20applications%20now%20on%20NEAR.%0A%0A**Usage%20flow%20NEAR%20-%3E%20Ethereum**%0A%0A1.%20%60token-locker%60%20locks%20NEP141%20tokens%20on%20NEAR%20side.%0A%0ATo%20deposit%20funds%20into%20the%20locker%2C%20call%20%60ft_transfer_call%60%20where%20%60msg%60%20contains%20Ethereum%20address%20the%20funds%20should%20arrive%20to.%0AThis%20will%20emit%20%60%3Ctoken%3A%20String%2C%20amount%3A%20u128%2C%20recipient%20address%3A%20EthAddress%3E%60%20(which%20arrives%20to%20%60deposit%60%20on%20Ethereum%20side).%0A%0AAccepts%20%60Unlock(token%3A%20String%2C%20sender_id%3A%20EthAddress%2C%20amount%3A%20u256%2C%20recipient%3A%20String)%60%20event%20from%20Ethereum%20side%20with%20a%20proof%2C%20verifies%20its%20correctness.%0AIf%20%60recipient%60%20contains%20'%3A'%20will%20split%20it%20into%20%60%3Crecipient%2C%20msg%3E%60%20and%20do%20%60ft_transfer_call(recipient%2C%20amount%2C%20None%2C%20msg)%60.%20Otherwise%20will%20%60ft_transfer%60%20to%20%60recipient%60.%0A%0ATo%20get%20metadata%20of%20token%20to%20Ethereum%2C%20need%20to%20call%20%60log_metadata%60%2C%20which%20will%20create%20a%20result%20%60%3Ctoken%3A%20String%2C%20name%3A%20String%2C%20symbol%3A%20String%2C%20decimals%3A%20u8%2C%20blockHeight%3A%20u64%3E%60.%0A%0A2.%20%60erc20-bridge-token%60%20-%20%60BridgeTokenFactory%60%20and%20%60BridgeToken%60%20Ethereum%20contracts.%0A%0A%60BridgeTokenFactory%60%20creates%20new%20%60BridgeToken%60%20that%20correspond%20to%20specific%20token%20account%20id%20on%20NEAR%20side.%0A%0A%60BridgeTokenFactory%60%20receives%20%60deposit%60%20with%20proof%20from%20NEAR%2C%20verify%20them%20and%20mint%20appropriate%20amounts%20on%20recipient%20addresses.%0A%0ACalling%20%60withdraw%60%20will%20burn%20tokens%20of%20this%20user%20and%20will%20generate%20event%20%60%3Ctoken%3A%20String%2C%20sender_id%3A%20EthAddress%2C%20amount%3A%20u256%2C%20recipient%3A%20String%3E%60%20that%20can%20be%20relayed%20to%20%60token-factory%60.%0A%0A**Caveats**%0A%0AGenerally%2C%20this%20connector%20allows%20any%20account%20to%20call%20%60ft_transfer_call%60%20opening%20for%20potential%20malicious%20tokens%20to%20be%20bridged%20to%20Ethereum.%0AThe%20expectation%20here%20is%20that%20on%20Ethereum%20side%2C%20the%20token%20lists%20will%20handle%20this%2C%20as%20it's%20the%20same%20attack%20model%20as%20malicious%20tokens%20on%20Uniswap%20and%20other%20DEXs.%0A%0AUsing%20Ethereum%20%60BridgeTokenFactory%60%20contract%20can%20always%20resolve%20Ethereum%20address%20of%20a%20contract%20back%20to%20NEAR%20one%20to%20check%20that%20it%20is%20indeed%20bridging%20token%20from%20NEAR%20and%20is%20created%20by%20this%20factory.%0A%0A**Testing**%0A%0ATesting%20Ethereum%20side%0A%0A%60%60%60%0Acd%20erc20-connector%0Ayarn%0Ayarn%20run%20test%0A%60%60%60%0A%0ATesting%20NEAR%20side%0A%0A%60%60%60%0Amake%20res%2Fbridge_token_factory.wasm%0Acargo%20test%20--all%0A%60%60%60%0A%0A%23%23%23%23%20Token%20Transfer%20Components%0A%0A_Note%3A%20This%20uses%20Ethreum%20%5BERC20%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-20)%20and%20NEAR%20%5BNEP-141%5D(https%3A%2F%2Fnomicon.io%2FStandards%2FTokens%2FFungibleToken%2FCore)%20initally%20developed%20for%20%5BNEP-21%5D(https%3A%2F%2Fgithub.com%2Fnear%2FNEPs%2Fpull%2F21)_%0A%0A-%20%5Brainbow-token-connector%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector)%0A%20%20-%20NEAR%20rust%20based%20contracts%0A%20%20%20%20-%20%5Bbridge-common%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Fbridge-common)%3A%20Common%20functions%20for%20NEAR%2C%20currently%20only%20%60pub%20fn%20parse_recipient(recipient%3A%20String)%20-%3E%20Recipient%60%0A%20%20%20%20-%20%5Bbridge-token-factory%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Fbridge-token-factory)%3A%20Functions%20for%20managing%20tokens%20on%20NEAR%20including%20but%20not%20limited%20to%20%60update_metadata%60%2C%20%60deposit%60%2C%20%60get_tokens%60%2C%20%60finish_updating_metadata%60%2C%20%60finish_updating_metadata%60%2C%20%60finish_withdraw%60%2C%20%60deploy_bridge_token%60%2C%20%60get_bridge_token_account_id%60%2C%20%60is_used_proof%60%2C%20%60record_proof%60%0A%20%20%20%20-%20%5Bbridge-token%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Fbridge-token)%3A%20Token%20functions%20on%20NEAR%20including%20but%20not%20limited%20to%20%60mint%60%20and%20%60withdraw%60%0A%20%20%20%20-%20%5Btoken-locker%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Ftoken-locker)%3A%20Token%20Locker%20functions%20on%20NEAR%20including%20but%20not%20limited%20to%20%60withdraw%60%2C%20%60finish_deposit%60%2C%20%60is_used_proof%60%0A%20%20-%20Ethereum%20solidity%20based%20contracts%0A%20%20%20%20-%20%5Berc20-bridge-token%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Ferc20-bridge-token)%3A%20Ethereum%20Bridge%20token%20contracts%20including%20but%20not%20limited%20to%0A%20%20%20%20%20%20-%20%5BBridgeToken.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FBridgeToken.sol)%0A%20%20%20%20%20%20-%20%5BBridgeTokenFactory.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FBridgeTokenFactory.sol)%0A%20%20%20%20%20%20-%20%5BBridgeTokenProxy.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FBridgeTokenProxy.sol)%0A%20%20%20%20%20%20-%20%5BProofConsumer.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FProofConsumer.sol)%0A%20%20%20%20%20%20-%20%5BResultsDecoder%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-bridge-token%2Fcontracts%2FResultsDecoder.sol)%0A%20%20%20%20-%20%5Berc20-connector%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Ftree%2Fmaster%2Ferc20-connector)%3A%20has%20%5BERC20Locker.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector%2Fblob%2Fmaster%2Ferc20-connector%2Fcontracts%2FERC20Locker.sol)%20which%20is%20used%20to%20lock%20and%20unlock%20tokens.%20It%20is%20linked%20to%20the%20bridge%20token%20factory%20on%20NEAR%20side.%20It%20also%20links%20to%20the%20prover%20that%20it%20uses%20to%20unlock%20the%20tokens.%20(see%20%5Bhere%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts))%0A%0A%23%23%23%23%20References%0A%0A-%20%5BLighthouse%20Documentation%5D(https%3A%2F%2Flighthouse-book.sigmaprime.io%2F)%3A%20ETH%202.0%20Consensus%20Client%20Lighthouse%20documentation%0A%0A-%20%5BLighthouse%20Github%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse)%3A%20ETH%202.0%20Consensus%20Client%20Lighthouse%20Github%0A-%20%5BLighthouse%3A%20Blog%5D(https%3A%2F%2Flighthouse-blog.sigmaprime.io%2F)%3A%20ETH%202.0%20Consensus%20Client%20Lighthouse%20Blog%0A-%20%5Beth2near-block-relay-rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs)%0A-%20%5Bnearbridge%20contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge)%0A-%20%5Bnearprover%20contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearprover)%0A%0A%23%23%23%20Prysm%20Light%20Client%0A%0A%23%23%23%23%20References%0A%0A-%20%5BPrysm%3A%20Light-client%20(WORK%20IN%20PROGRESS)%5D(https%3A%2F%2Fgithub.com%2Fjinfwhuang%2Fprysm%2Fpull%2F5)%3A%0A%0A-%20%5BPrysm%3A%20Light-client%20Client%20WIP%5D(https%3A%2F%2Fgithub.com%2Fjinfwhuang%2Fprysm%2Ftree%2Fjin-light%2Fcmd%2Flight-client%23light-client-client)%3A%20An%20independent%20light%20client%20client%0A-%20%5BPrysm%3A%20light-client%20server%20PR%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fpull%2F10034)%3A%20a%20feature%20PR%20that%20implements%20the%20basic%20production%20level%20changes%20to%20Prysm%20to%20comply%20as%20a%20light-client%20server%20to%20begin%20serving%20light%20client%20requests%0A%0A%23%23%20Harmony%20Merkle%20Mount%20Range%0A%0A-%20Harmony%20%5BMMR%20PR%20Review%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F3872)%20and%20%5Blatest%20PR%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198%2Ffiles)%20uses%20Merkle%20Mountain%20Ranges%20to%20facilitate%20light%20client%20development%20against%20Harmony's%20sharded%20Proof%20of%20Stake%20Chain%0A%0A%23%23%20Near%20Rainbow%20Bridge%20Review%0A%0AThe%20%5BNEAR%20Rainbow%20bridge%5D(https%3A%2F%2Fnear.org%2Fbridge%2F)%20is%20in%20%5Bthis%20github%20repository%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge)%20and%20is%20supported%20by%20%5BAurora-labs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near).%0A%0AIt%20recently%20provided%20support%20for%20ETH%202.0%20in%20this%20%5BPull%20Request%20(762)%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fpull%2F762).%0A%0AIt%20interacts%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20for%20Ethereum%202.0%20Consensus%20and%20tree_hash%20functions%20as%20well%20as%20bls%20signatures.%0A%0AHigh%20Level%20their%20architecture%20is%20similar%20to%20the%20Horizon%20Bridge%20but%20with%20some%20key%20differences%2C%20including%20but%20not%20limited%20to%0A%0A-%20interacting%20with%20the%20beacon%20chain%20now%20for%20finality%20%60is_correct_finality_update%60%20%5Bsee%20finality-update-verify%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2Fsrc%2Flib.rs%23L36)%0A-%20Updated%20execution%20block%20proof%20to%20use%20the%20BEACONRPCClient%20and%20with%20an%20updated%20merkle%20tree%0A%20%20-%20Design%20can%20be%20found%20in%20%5BPR-762%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fpull%2F762)%0A%0A%23%23%23%20NEAR%20Rainbow%20Bridge%3A%20Component%20Overview%0A%0AThe%20following%20smart%20contracts%20are%20deployed%20on%20NEAR%20and%20work%20in%20conjunction%20with%20eth2near%20bridging%20functionality%20to%20propogate%20blocks%20from%20Ethereum%20to%20NEAR.%0A%0A**%5C*Note**%20here%20we%20will%20focus%20on%20the%20%60eth2-client%60%20for%20ETH%202.0%20Proof%20of%20Stake%20Bridging%20however%20if%20interested%20in%20however%20there%20is%20also%20an%20%60eth-client%60%20which%20was%20used%20for%20ETH%201.0%20Proof%20of%20Work%20Integration%20using%20%5Brust-ethhash%5D(https%3A%2F%2Fgithub.com%2Fnearprotocol%2Frust-ethash).%5C*%0A%0A-%20%5BSmart%20Contracts%20Deployed%20on%20NEAR%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear)%0A%20%20-%20%5Beth2-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-client)%20implements%20the%20Ethereum%20Light%20Client%20on%20Near%0A%20%20%20%20-%20it%20provides%20functions%20including%20but%20not%20limited%20to%3A%0A%20%20%20%20%20%20-%20validate%20the%20light%20client%0A%20%20%20%20%20%20-%20verify%20the%20finality%20branch%0A%20%20%20%20%20%20-%20verify%20bls%20signatures%0A%20%20%20%20%20%20-%20update%20finalized%20headers%0A%20%20%20%20%20%20-%20updates%20the%20submittes%0A%20%20%20%20%20%20-%20prune%20finalized%20blocks.%0A%20%20%20%20-%20It%20interacts%20with%20the%20beach%20chain%2C%20uses%20%5BBorsh%5D(https%3A%2F%2Fborsh.io%2F)%20for%20serialization%20and%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse)%20for%20Ethereum%202.0%20Consensus%20and%20tree_hash%20functions%20as%20well%20as%20bls%20signatures.%20See%20%5Bhere%5D(https%3A%2F%2Flighthouse-book.sigmaprime.io%2F)%20for%20more%20information%20on%20lighthouse.%20Below%20is%20a%20list%20of%20dependencies%20from%20%5Beth2-client%2FCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Fnear%2Feth2-client%2FCargo.toml)%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bdependencies%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20ethereum-types%20%3D%20%220.9.2%22%0A%20%20%20%20%20%20%20%20%20%20%20%20eth-types%20%3D%20%20%7B%20path%20%3D%20%22..%2Feth-types%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth2-utility%20%3D%20%20%7B%20path%20%3D%20%22..%2Feth2-utility%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20merkle_proof%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20bls%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20optional%20%3D%20true%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%2C%20default-features%20%3D%20false%2C%20features%20%3D%20%5B%22milagro%22%5D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20admin-controlled%20%3D%20%20%7B%20path%20%3D%20%22..%2Fadmin-controlled%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20near-sdk%20%3D%20%224.0.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20borsh%20%3D%20%220.9.3%22%0A%20%20%20%20%20%20%20%20%20%20%20%20bitvec%20%3D%20%221.0.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A-%20%5Beth2near%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near)%20supports%20the%20relaying%20of%20blocks%20and%20the%20verification%20of%20finality%20between%20etherum%20and%20Near.%20It%20has%20the%20following%20components%0A%20%20-%20%5Bcontract_wrapper%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Fcontract_wrapper)%3A%20provides%20rust%20wrappers%20for%20interacting%20with%20the%20%5Bsolidity%20contracts%20on%20near%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear)%0A%20%20%20%20-%20Contracts%20include%20(from%20%5B%60lib.rs%60%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2Fsrc%2Flib.rs))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20contract_wrapper_trait%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20dao_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20dao_eth_client_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20dao_types%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20errors%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20eth_client_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20eth_client_contract_trait%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20file_eth_client_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20near_contract_wrapper%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20sandbox_contract_wrapper%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20utils%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Bcontract_wrapper%2FCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fcontract_wrapper%2FCargo.toml))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bdependencies%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20borsh%20%3D%20%220.9.3%22%0A%20%20%20%20%20%20%20%20%20%20%20%20futures%20%3D%20%220.3.21%22%0A%20%20%20%20%20%20%20%20%20%20%20%20async-std%20%3D%20%221.12.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-sdk%20%3D%20%224.0.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-jsonrpc-client%20%3D%20%22%3D0.4.0-beta.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-crypto%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-primitives%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-chain-configs%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-jsonrpc-primitives%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20tokio%20%3D%20%7B%20version%20%3D%20%221.1%22%2C%20features%20%3D%20%5B%22rt%22%2C%20%22macros%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20reqwest%20%3D%20%7B%20version%20%3D%20%220.11%22%2C%20features%20%3D%20%5B%22blocking%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20serde_json%20%3D%20%221.0.74%22%0A%20%20%20%20%20%20%20%20%20%20%20%20serde%20%3D%20%7B%20version%20%3D%20%221.0%22%2C%20features%20%3D%20%5B%22derive%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth-types%20%3D%20%7B%20path%20%3D%20%22..%2F..%2Fcontracts%2Fnear%2Feth-types%2F%22%2C%20features%20%3D%20%5B%22eip1559%22%5D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20workspaces%20%3D%20%220.5.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20anyhow%20%3D%20%221.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20%5Beth2near-block-relay-rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay-rs)%20is%20built%20in%20rust%20and%20integrates%20with%20the%20Ethereum%202.0%20lgihthouse%20consensus%20client%20to%20propogate%20blocks%20to%20near.%0A%20%20%20%20-%20Functionality%20includes%20(from%20%5Blib.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2Fsrc%2Flib.rs))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20beacon_block_body_merkle_tree%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20beacon_rpc_client%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20config%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20eth1_rpc_client%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20eth2near_relay%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20execution_block_proof%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20hand_made_finality_light_client_update%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20init_contract%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20last_slot_searcher%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20light_client_snapshot_with_proof%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20logger%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20near_rpc_client%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20prometheus_metrics%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20pub%20mod%20relay_errors%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Beth2near-block-relay-rs%2FCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay-rs%2FCargo.toml))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20types%20%3D%20%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20merkle_proof%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth2_hashing%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth2_ssz%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20eth-types%20%3D%20%7B%20path%20%3D%20%22..%2F..%2Fcontracts%2Fnear%2Feth-types%2F%22%2C%20features%20%3D%20%5B%22eip1559%22%5D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20eth2-utility%20%20%3D%20%7B%20path%20%3D%20%22..%2F..%2Fcontracts%2Fnear%2Feth2-utility%22%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20contract_wrapper%20%3D%20%7B%20path%20%3D%20%22..%2Fcontract_wrapper%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20finality-update-verify%20%3D%20%7B%20path%20%3D%20%22..%2Ffinality-update-verify%22%20%7D%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20log%20%3D%20%7B%20version%20%3D%20%220.4%22%2C%20features%20%3D%20%5B%22std%22%2C%20%22serde%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20serde_json%20%3D%20%221.0.74%22%0A%20%20%20%20%20%20%20%20%20%20%20%20serde%20%3D%20%7B%20version%20%3D%20%221.0%22%2C%20features%20%3D%20%5B%22derive%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20ethereum-types%20%3D%20%220.9.2%22%0A%20%20%20%20%20%20%20%20%20%20%20%20reqwest%20%3D%20%7B%20version%20%3D%20%220.11%22%2C%20features%20%3D%20%5B%22blocking%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20clap%20%3D%20%7B%20version%20%3D%20%223.1.6%22%2C%20features%20%3D%20%5B%22derive%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20tokio%20%3D%20%7B%20version%20%3D%20%221.1%22%2C%20features%20%3D%20%5B%22macros%22%2C%20%22rt%22%2C%20%22time%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20env_logger%20%3D%20%220.9.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20borsh%20%3D%20%220.9.3%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-sdk%20%3D%20%224.0.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20futures%20%3D%20%7B%20version%20%3D%20%220.3.21%22%2C%20default-features%20%3D%20false%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20async-std%20%3D%20%221.12.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20hex%20%3D%20%22*%22%0A%20%20%20%20%20%20%20%20%20%20%20%20toml%20%3D%20%220.5.9%22%0A%20%20%20%20%20%20%20%20%20%20%20%20atomic_refcell%20%3D%20%220.1.8%22%0A%20%20%20%20%20%20%20%20%20%20%20%20bitvec%20%3D%20%22*%22%0A%20%20%20%20%20%20%20%20%20%20%20%20primitive-types%20%3D%20%220.7.3%22%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20near-jsonrpc-client%20%3D%20%22%3D0.4.0-beta.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-crypto%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-primitives%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-chain-configs%20%3D%20%220.14.0%22%0A%20%20%20%20%20%20%20%20%20%20%20%20near-jsonrpc-primitives%20%3D%20%220.14.0%22%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20prometheus%20%3D%20%7B%20version%20%3D%20%220.9%22%2C%20features%20%3D%20%5B%22process%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20lazy_static%20%3D%20%221.4%22%0A%20%20%20%20%20%20%20%20%20%20%20%20warp%20%3D%20%220.2%22%0A%20%20%20%20%20%20%20%20%20%20%20%20thread%20%3D%20%22*%22%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20%5Beth2near-block-relay%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Feth2near-block-relay)%20is%20built%20using%20javascript%20and%20supports%20ETH%201.0%20Proof%20of%20Work%20(%60ethhash%60)%20using%20merkle%20patrica%20trees.%0A%20%20%20%20-%20key%20classes%20from%20%5Bindex.js%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay%2Findex.js)%20include%0A%20%20%20%20%20%20-%20%60Ethashproof%60%20%3A%20which%20has%20functions%20to%20%60getParseBlock%60%20and%20%60calculateNextEpoch%60%0A%20%20%20%20%20%20-%20%60Eth2NearRelay%60%20%3A%20which%20interacts%20with%20the%20%60ethClientContract%60%20and%20has%20a%20%60run()%60%20function%20which%20loops%20through%20relaying%20blocks%20and%20includes%20additional%20functions%20such%20as%20%60getParseBlock%60%20%2C%20%60submitBlock%60%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Bpackage.json%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Feth2near-block-relay%2Fpackage.json))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%22dependencies%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22bn.js%22%3A%20%22%5E5.1.3%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22eth-object%22%3A%20%22https%3A%2F%2Fgithub.com%2Fnear%2Feth-object%23383b6ea68c7050bea4cab6950c1d5a7fa553e72b%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22eth-util-lite%22%3A%20%22near%2Feth-util-lite%23master%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22%40ethereumjs%2Fblock%22%3A%20%22%5E3.4.0%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22merkle-patricia-tree%22%3A%20%22%5E2.1.2%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22prom-client%22%3A%20%22%5E12.0.0%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22promisfy%22%3A%20%22%5E1.2.0%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22rainbow-bridge-utils%22%3A%20%221.0.0%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22got%22%3A%20%22%5E11.8.5%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20%5Bethhashproof%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Fethashproof)%3A%20is%20a%20commandline%20to%20calculate%20proof%20data%20for%20an%20ethash%20POW%2C%20it%20is%20used%20by%20project%20%60SmartPool%60%20and%20a%20decentralizedbridge%20between%20Etherum%20and%20EOS%20developed%20by%20Kyber%20Network%20team.%20It%20is%20written%20in%20%60GO%60.%0A%20%20%20%20-%20Features%20Include%201.%20Calculate%20merkle%20root%20of%20the%20ethash%20dag%20dataset%20with%20given%20epoch%202.%20Calculate%20merkle%20proof%20of%20the%20pow%20(dataset%20elements%20and%20their%20merkle%20proofs)%20given%20the%20pow%20submission%20with%20given%20block%20header%203.%20Generate%20dag%20datase%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Bethahsproof%2Fgo.mod%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Fethashproof%2Fgo.mod))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20require%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%20github.com%2Fdeckarep%2Fgolang-set%20v1.7.1%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20github.com%2Fedsrzf%2Fmmap-go%20v1.0.0%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20github.com%2Fethereum%2Fgo-ethereum%20v1.10.4%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20github.com%2Fhashicorp%2Fgolang-lru%20v0.5.5-0.20210104140557-80c98217689d%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20golang.org%2Fx%2Fcrypto%20v0.0.0-20210322153248-0c34fe9e7dc2%0A%20%20%20%20%20%20%20%20%20%20%20%20)%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20%5Bfinality-update-verify%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Feth2near%2Ffinality-update-verify)%20checks%20and%20updates%20finality%20using%20the%20lighthouse%20beacon%20blocks.%0A%20%20%20%20-%20Functions%20include%20(from%20%5Blib.rs%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2Fsrc%2Flib.rs))%0A%20%20%20%20%20%20-%20%60fn%20h256_to_hash256(hash%3A%20H256)%20-%3E%20Hash256%60%0A%20%20%20%20%20%20-%20%60fn%20tree_hash_h256_to_eth_type_h256(hash%3A%20tree_hash%3A%3AHash256)%20-%3E%20eth_types%3A%3AH256%60%0A%20%20%20%20%20%20-%20%60fn%20to_lighthouse_beacon_block_header(bridge_beacon_block_header%3A%20%26BeaconBlockHeader%2C)%20-%3E%20types%3A%3ABeaconBlockHeader%20%7Btypes%3A%3ABeaconBlockHeader%60%0A%20%20%20%20%20%20-%20%60pub%20fn%20is_correct_finality_update(ethereum_network%3A%20%26str%2C%20light_client_update%3A%20%26LightClientUpdate%2C%20sync_committee%3A%20SyncCommittee%2C%20)%20-%3E%20Result%3Cbool%2C%20Box%3Cdyn%20Error%3E%3E%60%0A%20%20%20%20-%20Dependencies%20include%20(from%20%5Bfinality-update-verify%2FCargo.toml%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Feth2near%2Ffinality-update-verify%2FCargo.toml))%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bdependencies%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20eth-types%20%3D%20%7B%20path%20%3D%22..%2F..%2Fcontracts%2Fnear%2Feth-types%2F%22%2C%20features%20%3D%20%5B%22eip1559%22%5D%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20bls%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20eth2-utility%20%20%3D%20%7B%20path%20%3D%22..%2F..%2Fcontracts%2Fnear%2Feth2-utility%22%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20tree_hash%20%3D%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20types%20%3D%20%20%7B%20git%20%3D%20%22https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse.git%22%2C%20rev%20%3D%20%22b624c3f0d3c5bc9ea46faa14c9cb2d90ee1e1dec%22%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20bitvec%20%3D%20%221.0.0%22%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Bdev-dependencies%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20eth2_to_near_relay%20%3D%20%7B%20path%20%3D%20%22..%2Feth2near-block-relay-rs%22%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20serde_json%20%3D%20%221.0.74%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20serde%20%3D%20%7B%20version%20%3D%20%221.0%22%2C%20features%20%3D%20%5B%22derive%22%5D%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20toml%20%3D%20%220.5.9%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%60%60%60%0A%0AThe%20following%20smart%20contracts%20are%20deployed%20on%20Ethereum%20and%20used%20for%20propogating%20blocks%20from%20NEAR%20to%20Ethereum.%0A%0A-%20%5BSmart%20Contracts%20deployed%20on%20Ethereum%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth)%20including%0A%20%20-%20%5BNear%20Bridge%20Contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts)%20including%20%5BNearBridge.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearBridge.sol)%20which%20the%20interface%20%5BINearBridge.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FINearBridge.sol)%0A%20%20-%20Interface%20Overview%0A%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20interface%20INearBridge%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20event%20BlockHashAdded(uint64%20indexed%20height%2C%20bytes32%20blockHash)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20event%20BlockHashReverted(uint64%20indexed%20height%2C%20bytes32%20blockHash)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20blockHashes(uint64%20blockNumber)%20external%20view%20returns%20(bytes32)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20blockMerkleRoots(uint64%20blockNumber)%20external%20view%20returns%20(bytes32)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20balanceOf(address%20wallet)%20external%20view%20returns%20(uint256)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20deposit()%20external%20payable%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20withdraw()%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20initWithValidators(bytes%20calldata%20initialValidators)%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20initWithBlock(bytes%20calldata%20data)%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20addLightClientBlock(bytes%20calldata%20data)%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20challenge(address%20payable%20receiver%2C%20uint256%20signatureIndex)%20external%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20function%20checkBlockProducerSignatureInHead(uint256%20signatureIndex)%20external%20view%20returns%20(bool)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20Key%20Storage%20items%20for%20epoch%20and%20block%20information%0A%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%20%20%20%20Epoch%5B3%5D%20epochs%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20uint256%20curEpoch%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20mapping(uint64%20%3D%3E%20bytes32)%20blockHashes_%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20mapping(uint64%20%3D%3E%20bytes32)%20blockMerkleRoots_%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20mapping(address%20%3D%3E%20uint256)%20public%20override%20balanceOf%3B%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20-%20Signing%20and%20Serializing%20Primitives%0A%20%20%20%20-%20%5BNearDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FNearDecoder.sol)%3A%20handles%20decoing%20of%20Public%20Keys%2C%20Signatures%2C%20BlockProducers%20and%20LightClientBlocks%20using%20%60Borsh.sol%60%0A%20%20%20%20-%20%5BUtils.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FUtils.sol)%3A%20handles%20reading%20and%20writing%20to%20memory%2C%20memoryToBytes%20and%20has%20functions%20such%20as%20%60keccak256Raw%60%20and%20%60sha256Raw%60%0A%20%20%20%20-%20%5BBorsh.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FBorsh.sol)%3A%20%5BBorsh%5D(https%3A%2F%2Fborsh.io%2F)%3A%20Binary%20Object%20Representation%20Serializer%20for%20Hashing.%20It%20is%20meant%20to%20be%20used%20in%20security-critical%20projects%20as%20it%20prioritizes%20consistency%2C%20safety%2C%20speed%3B%20and%20comes%20with%20a%20strict%20specification.%0A%20%20%20%20-%20%5BEd25519.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FEd25519.sol)%3A%20%5BEd25519%5D(https%3A%2F%2Fed25519.cr.yp.to%2F)%20high-speed%20high-security%20signatures%0A%0A%20%20-%20%5BNear%20Prover%20Contracts%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts)%0A%20%20%20%20-%20%5BNearProver.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FNearProver.sol)%3A%20Has%20a%20%60proveOutcome%60%20which%20validates%20the%20outcome%20merkle%20proof%20and%20the%20block%20proof%20is%20valid%20using%20%60_computeRoot%60%20which%20is%20passed%20in%20a%20%60bytes32%20node%2C%20ProofDecoder.MerklePath%20memory%20proof%60%0A%20%20%20%20-%20%5BProofDecoder.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearprover%2Fcontracts%2FProofDecoder.sol)%3A%20Uses%20MerklePaths%20to%20provide%20decoding%20functions%20such%20as%20%60decodeExecutionStatus%60%2C%20%60decodeExecutionOutcome%60%2C%20%60decodeExecutionOutcomeWithId%60%2C%20%60decodeMerklePathItem%60%2C%20%60decodeMerklePath%60%20and%20%60decodeExecutionOutcomeWithIdAndProof%60.%20It%20relies%20on%20the%20primitives%20%60Borsh.sol%60%20and%20%60NearDecoder.sol%60%20above.%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./ethereum-DXwpBSxV.js"),[]),path:"/research/code/ethereum",type:"mdx",filePath:"research/code/ethereum.mdx",content:"%23%20Ethereum%20Code%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AWith%20the%20Introduction%20of%20Ethereum%202.0%3Csup%3E%5B1%5D(%23bp1)%3C%2Fsup%3E%20%3Csup%3E%5B2%5D(%23bp2)%3C%2Fsup%3E%20%3Csup%3E%5B3%5D(%23bp3)%3C%2Fsup%3E%20block%20production%20and%20consensus%20were%20separated%3Csup%3E%5B4%5D(%23bp4)%3C%2Fsup%3E%20into%20execution%20clients%3Csup%3E%5B5%5D(%23bp5)%3C%2Fsup%3E%20and%20consensus%20clients%3Csup%3E%5B6%5D(%23ts6)%3C%2Fsup%3E%20%3Csup%3E%5B7%5D(%23bp7)%3C%2Fsup%3E.%0A%0AThe%20execution%20chain%20implemented%20a%20simplified%20Proof%20of%20Work%3Csup%3E%5B1%5D(%23bp1)%3C%2Fsup%3E%20reducing%20difficutly%20to%20zero%20and%20removing%20the%20need%20for%20omners%20(uncles)%20which%20would%20now%20be%20handled%20by%20the%20beacon%20chain%3Csup%3E%5B3%5D(%23bp3)%3C%2Fsup%3E%20which%20is%20responsible%20for%20providing%20consensus%20%3Csup%3E%5B2%5D(%23bp2)%3C%2Fsup%3E.%0A%0ALight%20Clients%3Csup%3E%5B11%5D(%23ts11)%3C%2Fsup%3E%20were%20also%20introduced.%20To%20facilate%20this%0Aa%20sync%20committee%20of%20512%20current%20validators%20is%20elected%20every%20255%20epochs%2C%20approximately%20every%2027%20hours%20(see%20%5Bsample%20sync%20comittee%20data%5D(%23sync-committee-latest))%2C%20they%20are%20responsible%20for%20signing%20each%20block.%0A%0AAs%20at%20December%2011th%2C%202022%20Ethereum%20has%20487%2C920%20validators%3Csup%3E%5B8%5D(%23bp8)%3C%2Fsup%3E%20with%20a%20sample%20epoch%20(%5B166581%5D(https%3A%2F%2Fbeaconcha.in%2Fepoch%2F166581))%20and%20slot%20(%5B5%2C330%2C592%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5330592))%20having%20%5B139%20transactions%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5330592%23transactions)%20with%20%5B19%2C227%20votes%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5330592%23votes)%20from%2063%20committees%20and%20%5B126%20aggregated%20committe%20attestations%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5330592%23attestations).%0A%0A%23%23%20Abstract%0A%0AThis%20research%20follows%20on%20from%20What%20to%20build%20next%20in%20Zero%20Knowledge%3Csup%3E%5B1%5D(%23ov1)%3C%2Fsup%3E%2C%20Crosschain%20Future%3Csup%3E%5B2%5D(%23ov2)%3C%2Fsup%3E%20and%20Technical%20Problems%20Overview%3Csup%3E%5B3%5D(%23ov3)%3C%2Fsup%3E.%0A%0AHere%20we%20propose%20an%20approach%20for%20building%20a%20trustless%20bridging%20infrastructure%20between%20Ethereum%20and%20Multiple%20Chains%2C%20complete%20with%20costing%20information%20for%20storage%2C%20proof%20generation%20and%20verification%20across%20multiple%20chains.%0A%0AWe%20review%20technical%20approaches%20for%20Trustless%20Bridge%20Design%20using%20Zero%20Knowledge%20Proofs%20including%20storage%20and%20validation%20of%20block%20headers%2C%20verification%20of%20ethereum%20events%20on%20other%20chains%20and%20asset%20bridging%20functionality.%0A%0AFor%20completenes%20we%20include%20a%20technical%20review%20of%20Ethereum%202.0%20block%20production%2C%20consensus%2C%20signature%20schemes%20and%20light%20client%20functionality.%0A%0A%23%23%20Trustless%20Bridge%20Design%0A%0A%23%23%23%20High%20level%20Approach%0A%0A1.%20Define%20logic%20flow%20for%20bridging%20data%20(ERC20%20initially)%20between%20Etheruem%20and%20a%20target%20chain.%0A2.%20Identify%20Key%20Data%20Points%20which%20Need%20to%20be%20Synched%20and%20Frequency%0A%20%20%201.%20Active%20Validators%20(Sync%20Committee%3Csup%3E%5B10%5D(%23ts10)%3C%2Fsup%3E)%20%3A%20every%20255%20epochs%2C%20approximately%2027%20hours.%0A%20%20%202.%20Epoch%20Committee%20Verification%3A%20every%20epoch%20(32%20slots)%2C%20approx%206.4%20minutes.%0A%20%20%203.%20Block%20Headers%3A%20every%20epoch%20(32%20slots)%2C%20approx%206.4%20minutes.%0A%20%20%204.%20Bridge%20Transactions%3A%20as%20Needed.%0A3.%20Identify%20Proving%20Mechanisms%20for%20Data%20Points%0A%20%20%201.%20Sync%20Committee%3A%20SSZ%20Proof%0A%20%20%202.%20Epoch%20Comittees%0A%20%20%203.%20Block%20Headers%3A%20Aggregated%20BLS%20Signature%20Verification%20Proof%2C%20Patricia%20Merkle%0A%20%20%204.%20Bridge%20Transactions%3A%20Transaction%20Proofs%0A4.%20Use%20Zero%20Knowledge%20Proofs%20where%20possible%20to%20reduce%20storage%20and%20compute%20costing%0A%20%20%201.%20Sync%20Committee%3A%20SSZ%20Proof%0A%20%20%202.%20Epoch%20Comittees%3A%0A%20%20%203.%20Block%20Headers%3A%20Aggregated%20BLS%20Signature%20Verification%20Proof%2C%20Patricia%20Merkle%0A%20%20%204.%20Bridge%20Transactions%3A%20Transaction%20Proofs%0A5.%20Relayer%20and%20Proving%20Infrastructure%0A%20%20%201.%20Relayer%20operational%20and%20verification%20costs%20and%20incentives%0A%20%20%202.%20Proving%20infrastructure%20and%20proof%20generation%20costs%20(proofs%20can%20be%20used%20for%20multiple%20chains)%0A%20%20%203.%20Bridging%20assets%20infrastructure%2C%20incentives%20and%20transactional%20costs%0A%0AReference%20design%20articles%20include%20Succinct%3Csup%3E%5B1%5D(%23tb1)%3C%2Fsup%3E%20and%20%5BAppendix%20B%5D(%23appendix-b-proving-and-verification-mechanisms)%20includes%20codebases%20for%20proving%20and%20verification%20mechanisms.%0A%0A%23%23%23%20Logic%20Flow%0A%0A**Consensus**%0A%0A1.%20Active%20Validator%20Set%20is%20retrieved%0A2.%20Sync%20Committee%20is%20Validated%20(27%20hours)%0A3.%20Finality%20Checkpoint%20is%20Validated%20(per%20epoch)%0A4.%20Block%20(headers)%20are%20relayed%0A5.%20Block%20(headers)%20are%20validated%3A%20BLS%20Signatures%20on%20Block%20and%20Block%20is%20in%20the%20canonical%20chain.%0A%0A**Transaction**%0A%0A1.%20Ethereum%3A%20A%20transaction%20to%20bridge%20100%20ISO%20Tokens%20is%20sent%0A2.%20Relayer%3A%20Picks%20up%20Transaction%20(via%20event%20listening)%20and%20forwards%20to%20Target%20Light%20Client.%0A3.%20Light%20Client%20Verifies%20Transaction%20is%20in%20a%20valid%20block.%0A%20%20%201.%20Transaction%20is%20in%20Block%0A%20%20%202.%20Block%20is%20in%20Cannonical%20Chain%0A%20%20%203.%20Block%20has%20been%20signed%20correctly%20by%20valid%20committee%0A%20%20%204.%20Committe%20is%20valid%20based%20on%20the%20committe%20allocated%20to%20the%20slot%0A%20%20%205.%20Sync%20Committee%20signed%20the%20Comittee%20Allocation%0A%0A%23%23%23%20Key%20Data%20Points%20and%20Storage%0A%0A-%20Sync%20Committe%20Validator%20Set%20Change%20(Every%20255%20epochs%20approx%2027%20hours)%0A%0A-%20Epoch%20Committee%20Verification%20(Every%20Epoch%20(32%20slots)%20approx%206.4%20minutes)%0A-%20Block%20Verification%20(Every%20slot%20appox%2012%20seconds)%0A-%20Transaction%20Verifications%20(As%20Needed)%0A%0A%23%23%23%20Proving%20Logic%20and%20Costs%0A%0A-%20Sync%20committee%20proof%0A%0A-%20Epoch%20comittees%20proof%0A-%20Block%20proofs%0A-%20Transaction%20proofs%0A%0A%23%23%23%20ZKP%20Proving%20and%20Verification%20Costs%20ZKP%20Comparison%0A%0A%23%23%23%20Relayer%20and%20Prover%20Infrastructure%0A%0A%23%23%23%20Bridging%20Assets%0A%0A-%20Asset%20Lockers%0A-%20Mint%20and%20Burn%20Process%0A-%20Utilization%20of%20Locked%20Assets%0A%0A%23%23%20Ethereum%202.0%20Technical%20Overview%0A%0A%23%23%23%20Block%20Production%0A%0AValidators%20run%20both%20an%20Ethereum%201%20client%20(e.g.%20geth)%20and%20a%20Beacon%20Chain%20Client%20(e.g.%20prysm).%20The%20geth%20client%20recieves%20transactions%20and%20places%20them%20into%20blocks.%20For%20additional%20details%20see%20the%20Ethereum%20Builder%20Specs%3Csup%3E%5B12%5D(%23ts12)%3C%2Fsup%3E.%20The%20following%20diagrams%20give%20an%20overview%20of%20how%20blocks%20are%20proposed%20and%20how%20MEV%20Boost%3Csup%3E%5B13%5D(%23ts13)%3C%2Fsup%3E%20could%20be%20integrated.%20For%20simplification%20we%20can%20replace%20mev_boost%20and%20relay%20with%20geth%20in%20the%20block%20proposal%20diagram%20as%20the%20majority%20of%20validators%20simply%20run%20a%20geth%20node.%0A%0A!%5BBlock%20Proposal%5D(%2Fimages%2Fresearch%2Fblock-proposal.png%20%22Block%20Proposal%22)%0A%0A%23%23%23%20Slots%20and%20Epochs%20%3Csup%3E%5B6%5D(%23ts6)%3C%2Fsup%3E%0A%0A%3E%20The%20Beacon%20Chain%20provides%20the%20heartbeat%20to%20Ethereum%E2%80%99s%20consensus.%20Each%20slot%20is%2012%20seconds%20and%20an%20epoch%20is%2032%20slots%3A%206.4%20minutes.%0A%0A!%5BSlots%20and%20Epochs%5D(%2Fimages%2Fresearch%2FBeacon-Chain-Slots-and-Epochs.png.webp%20%22Slots%20and%20Epochs%22)%0A%0A%23%23%23%20Block%20Proposals%0A%0AWhen%20a%20validator%20is%20nominated%20as%20a%20proposer%20for%20a%20slot%20in%20an%20Epoch%20they%20propose%20a%20block%20gathered%20from%20there%20Ethereum%201%20client.%0A%0AThis%20proposed%20block%20is%20attested%20to%20by%20other%20validators%20who%20have%20been%20assigned%20as%20committe%20members%20for%20this%20slot%3Csup%3E%5B6%5D(%23ts6)%3C%2Fsup%3E.%0A%0A%3E%20A%20block%20proposer%20is%20a%20validator%20that%20has%20been%20pseudorandomly%20selected%20to%20build%20a%20block.%0A%3E%0A%3E%20Most%20of%20the%20time%2C%20validators%20are%20attesters%20that%20vote%20on%20blocks.%20These%20votes%20are%20recorded%20in%20the%20Beacon%20Chain%20and%20determine%20the%20head%20of%20the%20Beacon%20Chain.%0A%0A!%5BValidators%20and%20Attestations%5D(%2Fimages%2Fresearch%2FBeacon-Chain-Validators.png%20%22Validators%20and%20Attestations%22)%0A%0A%23%23%23%20Committees%0A%0A%3E%20A%20committee%20is%20a%20group%20of%20validators.%20For%20security%2C%20each%20slot%20has%20committees%20of%20at%20least%20128%20validators.%20An%20attacker%20has%20less%20than%20a%20one%20in%20a%20trillion%20probability%20of%20controlling%20%E2%85%94%20of%20a%20committee.%0A%3E%0A%3E%20The%20concept%20of%20a%20randomness%20beacon%20that%20emits%20random%20numbers%20for%20the%20public%2C%20lends%20its%20name%20to%20the%20Ethereum%20Beacon%20Chain.%20The%20Beacon%20Chain%20enforces%20consensus%20on%20a%20pseudorandom%20process%20called%20RANDAO.%0A%0A!%5BCommittees%5D(%2Fimages%2Fresearch%2FBeacon-Chain-RANDAO.png%20%22Committees%22)%0A%0A%23%23%23%20Attestations%0A%0AThe%20attestation%20lifecyle%3Csup%3E%5B9%5D(%23ts9)%3C%2Fsup%3E%20involves%0A%0A1.%20Generation%20of%20the%20proposed%20Block%0A2.%20Propagation%20of%20the%20block%20to%20committee%20members%20to%20vote%20on%20and%20sign%0A3.%20Aggregation%20of%20the%20votes%20(signatures)%20of%20the%20committee%20members%20by%20Aggregators%0A4.%20Propagation%20of%20the%20aggregated%20attestations%20back%20to%20the%20block%20Proposer%0A5.%20Inclusion%20of%20the%20block%20in%20the%20Beaconchain%0A%0A!%5BAttestation%20Life%20Cycle%5D(%2Fimages%2Fresearch%2FAttestationLifeCycle.png%20%22Attestation%20Life%20Cycle%22)%0A%0A%23%23%23%20Checkpoints%20and%20Finality%3Csup%3E%5B6b%5D(%23ts6b)%3C%2Fsup%3E%0A%0A%3E%20When%20an%20epoch%20ends%2C%20if%20its%20checkpoint%20has%20garnered%20a%20%E2%85%94%20supermajority%2C%20the%20checkpoint%20gets%20justified.%0A%0A!%5BCheckpoints%5D(%2Fimages%2Fresearch%2FBeacon-Chain-Checkpoints.jpg%20%22Checkpoints%22)%0A%0A%3E%20If%20a%20checkpoint%20B%20is%20justified%20and%20the%20checkpoint%20in%20the%20immediate%20next%20epoch%20becomes%20justified%2C%20then%20B%20becomes%20finalized.%20Typically%2C%20a%20checkpoint%20is%20finalized%20in%20two%20epochs%2C%2012.8%20minutes.%0A%0A!%5BFinality%5D(%2Fimages%2Fresearch%2FBeacon-Chain-Justification-and-Finalization.png%20%22Finality%22)%0A%0A%23%23%23%20Sync%20Committee%20%3Csup%3E%5B10%5D(%23ts10)%3C%2Fsup%3E%0A%0AA%20sync%20committee%20of%20512%20current%20validators%20is%20elected%20every%20255%20epochs%2C%20approximately%20every%2027%20hours%20(see%20%5Bsample%20sync%20comittee%20data%5D(%23sync-committee-latest)).%0AThey%20are%20responsible%20for%20signing%20each%20block%20which%20records%20which%20sync%20committee%20members%20(validtors)%20signed%20the%20block%2C%20held%20in%20%60syncaggregate_bits%60%2C%20and%20creates%20a%20bls%20aggregate%20signature%20held%20in%20%60syncaggregate_signature%60%20(see%20%5Bblock-data%5D(%23block-data-for-slot-5330592)).%0A%0A%60%60%60%0A%20%20%20%20%22syncaggregate_bits%22%3A%20%220xdffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffdfffffffffffffffdffffffffffffffffffffffff%22%2C%0A%20%20%20%20%22syncaggregate_participation%22%3A%200.9921875%2C%0A%20%20%20%20%22syncaggregate_signature%22%3A%20%220x95332c55790018eed3d17eada01cb4045348d09137505bc8697eeedaa3800a830ee2c138251850a9577f62a5488419ef0a722579156a177fb3a147017f1077af5d778f46a4cdf815fc450129d135fe5286e16df68333592e4aa45821bde780dd%22%2C%0A%60%60%60%0A%0AThis%20is%20used%20in%20Altair%20Light%20Client%20--%20Sync%20Protocol%3Csup%3E%5B11%5D(%23ts11)%3C%2Fsup%3E%20which%20enables%20the%20beacon%20chain%20to%20be%20light%20client%20friendly%20for%20constrained%20environments%20to%20access%20Ethereum.%0A%0A%23%23%23%20Validator%20Lifecycle%0A%0AFollowing%20is%20an%20overview%20of%20statuses%20for%20validators%20in%20Ethereum%202.0%20phase%200%20%3Csup%3E%5B14%5D(%23ts14)%3C%2Fsup%3E.%0A%0A%3E%201.%20**Deposited**%3A%20the%20validator%20has%20made%20a%20deposit%20and%20has%20registered%20in%20BeaconState.%0A%3E%202.%20**Eligible%20to%20be%20activated%20(Pending)**%3A%20the%20validator%20is%20eligible%20to%20be%20activated.%0A%3E%203.%20**Activated**%3A%20the%20validator%20is%20activated%0A%3E%20%20%20%20-%20_Note%20that%20the%20validator%20may%20be%20%E2%80%9Celigible%20to%20be%20activated%2C%20but%20has%20not%20been%20activated%20yet%E2%80%9D._%0A%3E%204.%20**Slashed**%3A%20the%20validator%20has%20been%20slashed%0A%3E%205.%20**Exited**%3A%20the%20validator%20is%20exited%0A%3E%206.%20**Withdrawable**%3A%20the%20validator%20is%20withdrawable%0A%3E%20%20%20%20-%20_Note%20that%20the%20validator%20will%20be%20able%20to%20withdraw%20to%20EEs%20in%20phase%202_%0A%3E%0A%3E%20_Note%20that%20in%20some%20cases%2C%20a%20validator%20can%20be%20in%20multiple%20statuses%20at%20the%20same%20time%2C%20e.g.%2C%20an%20active%20validator%20may%20be%20%E2%80%9Cactivated%20and%20slashed%E2%80%9D._%0A%0A!%5BValidator%20Status%20Transition%5D(%2Fimages%2Fresearch%2FValidatorStateTransition.png%20%22Validator%20Status%20Transition%22)%0A%0A%23%23%20Ethreum%202.0%20Technical%20Deep%20Dive%0A%0A%23%23%23%20Block%20Production%0A%0A**Process%20Flow**%0A%0A-%20Transactions%20are%20placed%20in%20%5Btxpool%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcore%2Ftxpool)%0A-%20The%20transaction%20pool%20is%20read%20and%20%5Bblocks%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fcore%2Ftypes%2Fblock.go%23L169)%20are%20produced%20by%20the%20%5Bminer%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fminer%2Fminer.go)%0A-%20Blocks%20Headers%20get%20forwarded%20to%20the%20Beacon%20chain%20once%20they%20pass%20%5Bbeacon%20consensus%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fconsensus%2Fbeacon%2Fconsensus.go)%0A-%20The%20Beacon%20chain%20embeds%20the%20EthChain%20Header%20into%20a%20%5BBeaconBlock%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconsensus-types%2Fblocks%2Ftypes.go%23L43)%0A%0A%23%23%23%20Consensus%20and%20Finality%0A%0AAttestation%20Process%20Flow%0A%0A-%20Proposing%20Block%0A-%20Signing%20Blocks%0A-%20Aggregated%20Attestation%20generation%0A-%20Block%20Proposal%20and%20Inclusion%20of%20Attestation%0A-%20The%20%5BSignedBeaconBlock%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconsensus-types%2Fblocks%2Ftypes.go%23L72)%20is%20added%20to%20the%20chain%0A%0AAttestations%20Block(LMD%20Ghost%20Vote)%20and%20Epoch%20Checkpoints%20(FFG%20Votes)%0A%0A-%20The%20validators%20in%20the%20committee%20attest%20to%20the%20validity%20of%20the%20block%20(LMD%20Ghost%20Vote)%0A-%20The%20validators%20in%20the%20comittee%20attest%20to%20the%20first%20block%20in%20the%20Epoch%20(FFG%20Vote)%0A%0AFrom%20%5BAttestations%2C%20ethereum.org%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fconsensus-mechanisms%2Fpos%2Fattestations)%0A%0A%3E%20Every%20epoch%20(6.4%20minutes)%20a%20validator%20proposes%20an%20attestation%20to%20the%20network.%20The%20attestation%20is%20for%20a%20specific%20slot%20in%20the%20epoch.%20The%20purpose%20of%20the%20attestation%20is%20to%20vote%20in%20favor%20of%20the%20validator's%20view%20of%20the%20chain%2C%20in%20particular%20the%20most%20recent%20justified%20block%20and%20the%20first%20block%20in%20the%20current%20epoch%20(known%20as%20source%20and%20target%20checkpoints).%20This%20information%20is%20combined%20for%20all%20participating%20validators%2C%20enabling%20the%20network%20to%20reach%20consensus%20about%20the%20state%20of%20the%20blockchain.%0A%3E%0A%3E%20The%20attestation%20contains%20the%20following%20components%3A%0A%3E%0A%3E%20-%20aggregation_bits%3A%20a%20bitlist%20of%20validators%20where%20the%20position%20maps%20to%20the%20validator%20index%20in%20their%20committee%3B%20the%20value%20(0%2F1)%20indicates%20whether%20the%20validator%20signed%20the%20data%20(i.e.%20whether%20they%20are%20active%20and%20agree%20with%20the%20block%20proposer)%0A%3E%20-%20data%3A%20details%20relating%20to%20the%20attestation%2C%20as%20defined%20below%0A%3E%20-%20signature%3A%20a%20BLS%20signature%20that%20aggregates%20the%20signatures%20of%20individual%20validators%0A%3E%0A%3E%20The%20first%20task%20for%20an%20attesting%20validator%20is%20to%20build%20the%20data.%20The%20data%20contains%20the%20following%20information%3A%0A%3E%0A%3E%20-%20slot%3A%20The%20slot%20number%20that%20the%20attestation%20refers%20to%0A%3E%20-%20index%3A%20A%20number%20that%20identifies%20which%20committee%20the%20validator%20belongs%20to%20in%20a%20given%20slot%0A%3E%20-%20beacon_block_root%3A%20Root%20hash%20of%20the%20block%20the%20validator%20sees%20at%20the%20head%20of%20the%20chain%20(the%20result%20of%20applying%20the%20fork-choice%20algorithm)%0A%3E%20-%20source%3A%20Part%20of%20the%20finality%20vote%20indicating%20what%20the%20validators%20see%20as%20the%20most%20recent%20justified%20block%0A%3E%20-%20target%3A%20Part%20of%20the%20finality%20vote%20indicating%20what%20the%20validators%20see%20as%20the%20first%20block%20in%20the%20current%20epoch%0A%3E%0A%3E%20Once%20the%20data%20is%20built%2C%20the%20validator%20can%20flip%20the%20bit%20in%20aggregation_bits%20corresponding%20to%20their%20own%20validator%20index%20from%200%20to%201%20to%20show%20that%20they%20participated.%0A%3E%0A%3E%20Finally%2C%20the%20validator%20signs%20the%20attestation%20and%20broadcasts%20it%20to%20the%20network.%0A%0A**Technical%20Details**%0A%0AFollowing%20is%20an%20overview%20of%20the%20state%20structure%20and%20logic%20for%20generating%20committees%20and%20aggregating%20attestations.%20For%20data%20structures%2C%20please%20see%20%5BBeacon%20State%20Data%20Structures%20from%20Prysm%5D(%23beacon-state-data-structures-from-prysm)%20and%20%5Bweb3signer_types%20from%20prysm%5D(%23web3signer_types-from-prysm).%0A%0A%5BBeaconState%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23BeaconState)%20contains%20both%20a%20%5BReadOnlyBeaconState%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23ReadOnlyBeaconState)%20and%20a%20%5BWriteOnlyBeaconState%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23WriteOnlyBeaconState)%20wich%20contain%20%5BReadOnlyValidators%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23ReadOnlyValidators)%20and%20%5BReadOnlyRandaoMixes%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23ReadOnlyRandaoMixes)%20and%20%5BWriteOnlyValidators%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23WriteOnlyValidators)%20and%20%5BWriteOnlyRandaoMixes%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23WriteOnlyRandaoMixes)%20respectively.%0A%0AAt%20the%20beginning%20of%20each%20epoch%20%5Bfunc%20ProcessRandaoMixesReset%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fepoch%23ProcessRandaoMixesReset)%20processes%20the%20final%20updates%20to%20RANDAO%20mix%20during%20epoch%20processing.%20This%20calls%20%5BRandaoMix%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23RandaoMix)%20which%20returns%20the%20randao%20mix%20(xor'ed%20seed)%20of%20a%20given%20slot.%20It%20is%20used%20to%20shuffle%20validators.%0A%0AFollowing%20are%20sample%20mixes%20generated%20from%20%5Bfunc%20TestRandaoMix_OK%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Frandao_test.go%23L16)%20by%20adding%20the%20statement%20%60fmt.Printf(%22mix%3A%20%25v%5Cn%22%2C%20mix)%60%0A%0A%60%60%60%0Amix%3A%20%5B10%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%5D%0Amix%3A%20%5B40%209%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%5D%0Amix%3A%20%5B159%20134%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%5D%0A%60%60%60%0A%0AThe%20shuffle%20functions%20consist%20of%0A%0A-%20%5Bfunc%20ShuffleList%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ShuffleList)%3A%20returns%20list%20of%20shuffled%20indexes%20in%20a%20pseudorandom%20permutation%20%60p%60%20of%20%600...list_size%20-%201%60%20with%20%E2%80%9Cseed%E2%80%9C%20as%20entropy.%20We%20utilize%20'swap%20or%20not'%20shuffling%20in%20this%20implementation%3B%20we%20are%20allocating%20the%20memory%20with%20the%20seed%20that%20stays%20constant%20between%20iterations%20instead%20of%20reallocating%20it%20each%20iteration%20as%20in%20the%20spec.%20This%20implementation%20is%20based%20on%20the%20original%20implementation%20from%20protolambda%2C%20https%3A%2F%2Fgithub.com%2Fprotolambda%2Feth2-shuffle%0A%0A%20%20Following%20is%20an%20example%20of%20a%20shuffled%20list%20generated%20from%20%5BTestShuffleList_OK%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fshuffle_test.go%23L25)%0A%0A%20%20%60%60%60%0A%20%20list1%3A%20%5B0%201%202%203%204%205%206%207%208%209%5D%0A%20%20seed1%3A%20%5B1%20128%2012%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%5D%0A%20%20shuffledList1%3A%20%5B0%207%208%206%203%209%204%205%202%201%5D%0A%20%20%60%60%60%0A%0A-%20%5Bfunc%20ShuffleIndex%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ShuffledIndex)%3A%20returns%20%60p(index)%60%20in%20a%20pseudorandom%20permutation%20%60p%60%20of%20%600...list_size%20-%201%60%20with%20%E2%80%9Cseed%E2%80%9C%20as%20entropy.%20We%20utilize%20'swap%20or%20not'%20shuffling%20in%20this%20implementation%3B%20we%20are%20allocating%20the%20memory%20with%20the%20seed%20that%20stays%20constant%20between%20iterations%20instead%20of%20reallocating%20it%20each%20iteration%20as%20in%20the%20spec.%20This%20implementation%20is%20based%20on%20the%20original%20implementation%20from%20protolambda%2C%20https%3A%2F%2Fgithub.com%2Fprotolambda%2Feth2-shuffle%0A%0A-%20%5Bfunc%20ShuffleIndices%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ShuffledIndices)%3A%20ShuffledIndices%20uses%20input%20beacon%20state%20and%20returns%20the%20shuffled%20indices%20of%20the%20input%20epoch%2C%20the%20shuffled%20indices%20then%20can%20be%20used%20to%20break%20up%20into%20committees.%0A%0ACommittes%20are%20formed%20using%20functions%20from%20%5Bbeacon_comittee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fbeacon_committee.go)%0A%0A-%20%5Bfunc%20BeaconComittee%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23BeaconCommittee)%3A%20returns%20the%20beacon%20committee%20of%20a%20given%20slot%20and%20committee%20index.%20The%20validator%20indices%20and%20seed%20are%20provided%20as%20an%20argument%20rather%20than%20an%20imported%20implementation%20from%20the%20spec%20definition.%20Having%20them%20as%20an%20argument%20allows%20for%20cheaper%20computation%20run%20time.%20(This%20is%20an%20optomized%20version%20of%20%5Bfunc%20BeaconComitteFromState%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23BeaconCommitteeFromState))%0A%0A%20%20Following%20is%20an%20example%20of%20a%20%60beaconComittee%60%20generated%20by%20adding%20the%20following%20lines%20to%20%5BTestBeaconCommitteeFromState_UpdateCacheForPreviousEpoch%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fbeacon_committee_test.go%23L574)%3A%0A%0A%60%60%60%0Avar%20beaconCommittee%20%5B%5Dtypes.ValidatorIndex%0AbeaconCommittee%2C%20err%20%3D%20BeaconCommitteeFromState(context.Background()%2C%20state%2C%201%20%2F_previous%20epoch_%2F%2C%200)%0Afmt.Printf(%22beaconComittee%3A%20%25%2Bv%5Cn%22%2C%20beaconCommittee)%0A%60%60%60%0A%0AResult%0A%0A%60%60%60%0AbeaconComittee%3A%20%5B160%20338%20313%20307%20320%20324%2045%20469%20196%20303%2023%2014%2097%20312%20126%20488%5D%0A%60%60%60%0A%0A-%20%5Bfunc%20CommitteeAssignments%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23CommitteeAssignments)%3A%20is%20a%20map%20of%20validator%20indices%20pointing%20to%20the%20appropriate%20committee%20assignment%20for%20the%20given%20epoch.%0A%0A1.%20Determine%20the%20proposer%20validator%20index%20for%20each%20slot.%0A2.%20Compute%20all%20committees.%0A3.%20Determine%20the%20attesting%20slot%20for%20each%20committee.%0A4.%20Construct%20a%20map%20of%20validator%20indices%20pointing%20to%20the%20respective%20committees.%0A%0AFollowing%20is%20an%20example%20of%20%60commitees%60%20generated%20by%20adding%20the%20following%20lines%20to%20%5BTestComputeCommittee_WithoutCache%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fbeacon_committee_test.go%23L23)%0A%0A%60%60%60%0Acommittees%2C%20err%20%3A%3D%20computeCommittee(indices%2C%20seed%2C%200%2C%201%20%2F_%20Total%20committee_%2F)%0Afmt.Printf(%22committees%3A%20%25%2Bv%5Cn%22%2C%20committees)%0A%60%60%60%0A%0A%20%20%20%20%3Cdetails%3E%0A%20%20%20%20%3Csummary%3Eresult%3C%2Fsummary%3E%0A%0A%20%20%20%20%60%60%60%0A%20%20%20%20committeesdetails%3E%0A%0AAttestations%20are%20managed%20using%20functions%20from%20%5Battestation.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fattestation.go)%0A%0A-%20%5Bfunc%20ValidateNilAttestation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ValidateNilAttestation)%3A%20checks%20if%20any%20composite%20field%20of%20input%20attestation%20is%20nil.%20Access%20to%20these%20nil%20fields%20will%20result%20in%20run%20time%20panic%2C%20it%20is%20recommended%20to%20run%20these%20checks%20as%20first%20line%20of%20defense.%0A-%20%5Bfunc%20ValidateSlotTargetEpoch%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ValidateSlotTargetEpoch)%3A%20ValidateSlotTargetEpoch%20checks%20if%20attestation%20data's%20epoch%20matches%20target%20checkpoint's%20epoch.%20It%20is%20recommended%20to%20run%20%60ValidateNilAttestation%60%20first%20to%20ensure%20%60data.Target%60%20can't%20be%20nil.%0A-%20%5Bfunc%20IsAggregator%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23IsAggregator)%3A%20IsAggregator%20returns%20true%20if%20the%20signature%20is%20from%20the%20input%20validator.%20The%20committee%20count%20is%20provided%20as%20an%20argument%20rather%20than%20imported%20implementation%20from%20spec.%20Having%20committee%20count%20as%20an%20argument%20allows%20cheaper%20computation%20at%20run%20time.%0A-%20%5Bfunc%20AggregateSignature%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23AggregateSignature)%3A%20returns%20the%20aggregated%20signature%20of%20the%20input%20attestations.%0A%0A%20%20Spec%20pseudocode%20definition%3A%0A%0A%60%60%60%0Adef%20get_aggregate_signature(attestations%3A%20Sequence%5BAttestation%5D)%20-%3E%20BLSSignature%3A%0Asignatures%20%3D%20%5Battestation.signature%20for%20attestation%20in%20attestations%5D%0Areturn%20bls.Aggregate(signatures)%0A%60%60%60%0A%0AFollowing%20is%20an%20example%20aggregrated%20signature%20by%20adding%20the%20following%20lines%20to%20%5BTestAttestation_AggregateSignature%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fattestation_test.go%23L48)%0A%0A%60%60%60%0AaggSig%2C%20err%20%3A%3D%20helpers.AggregateSignature(atts)%0A%60%60%60%0A%0Afmt.Printf(%22aggSig%3A%20%25%2Bv%5Cn%22%2C%20aggSig)%0A%0AResult%0A%0A%60%60%60%0A%20%20%20%20aggSig%3A%20%26%7Bs%3A0xc0003fe000%7D%0A%60%60%60%0A%0A-%20%5Bfunc%20IsAggregated%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23IsAggregated)%3A%20IsAggregated%20returns%20true%20if%20the%20attestation%20is%20an%20aggregated%20attestation%2C%20false%20otherwise.%0A%0A-%20%5Bfunc%20ComputeSubnetForAttestation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ComputeSubnetForAttestation)%3A%20returns%20the%20subnet%20for%20which%20the%20provided%20attestation%20will%20be%20broadcasted%20to.This%20differs%20from%20the%20spec%20definition%20by%20instead%20passing%20in%20the%20active%20validators%20indices%20in%20the%20attestation's%20given%20epoch.%0A%0ASpec%20pseudocode%20definition%3A%0A%0A%60%60%60%0Adef%20compute_subnet_for_attestation(committees_per_slot%3A%20uint64%2C%20slot%3A%20Slot%2C%20committee_index%3A%20CommitteeIndex)%20-%3E%20uint64%3A%0A%0A%22%22%22%0ACompute%20the%20correct%20subnet%20for%20an%20attestation%20for%20Phase%200.%0ANote%2C%20this%20mimics%20expected%20future%20behavior%20where%20attestations%20will%20be%20mapped%20to%20their%20shard%20subnet.%0A%22%22%22%0Aslots_since_epoch_start%20%3D%20uint64(slot%20%25%20SLOTS_PER_EPOCH)%0Acommittees_since_epoch_start%20%3D%20committees_per_slot%20%5C*%20slots_since_epoch_start%0A%0Areturn%20uint64((committees_since_epoch_start%20%2B%20committee_index)%20%25%20ATTESTATION_SUBNET_COUNT)%0A%60%60%60%0A%0A-%20%5Bfunc%20ComputeSubnetFromCommitteeAndSlot%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ComputeSubnetFromCommitteeAndSlot)%3A%20is%20a%20flattened%20version%20of%20ComputeSubnetForAttestation%20where%20we%20only%20pass%20in%20the%20relevant%20fields%20from%20the%20attestation%20as%20function%20arguments.%0A%0ASpec%20pseudocode%20definition%3A%0A%0A%60%60%60%0A%0Adef%20compute_subnet_for_attestation(committees_per_slot%3A%20uint64%2C%20slot%3A%20Slot%2C%20committee_index%3A%20CommitteeIndex)%20-%3E%20uint64%3A%0A%0A%22%22%22%0ACompute%20the%20correct%20subnet%20for%20an%20attestation%20for%20Phase%200.%0ANote%2C%20this%20mimics%20expected%20future%20behavior%20where%20attestations%20will%20be%20mapped%20to%20their%20shard%20subnet.%0A%22%22%22%0Aslots_since_epoch_start%20%3D%20uint64(slot%20%25%20SLOTS_PER_EPOCH)%0Acommittees_since_epoch_start%20%3D%20committees_per_slot%20%5C*%20slots_since_epoch_start%0A%0Areturn%20uint64((committees_since_epoch_start%20%2B%20committee_index)%20%25%20ATTESTATION_SUBNET_COUNT)%0A%0A%60%60%60%0A%0A-%20%5Bfunc%20ValidateAttestationTime%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ValidateAttestationTime)%3A%20Validates%20that%20the%20incoming%20attestation%20is%20in%20the%20desired%20time%20range.%0A%20%20An%20attestation%20is%20valid%20only%20if%20received%20within%20the%20last%20ATTESTATION_PROPAGATION_SLOT_RANGE%20slots.%0A%0AExample%3A%0A%0A%60%60%60%0A%0AATTESTATION_PROPAGATION_SLOT_RANGE%20%3D%205%0AclockDisparity%20%3D%2024%20seconds%0Acurrent_slot%20%3D%20100%0Ainvalid_attestation_slot%20%3D%2092%0Ainvalid_attestation_slot%20%3D%20103%0Avalid_attestation_slot%20%3D%2098%0Avalid_attestation_slot%20%3D%20101%0A%0A%60%60%60%0A%0AIn%20the%20attestation%20must%20be%20within%20the%20range%20of%2095%20to%20102%20in%20the%20example%20above.%0A%0A-%20%5Bfunc%20VerifyCheckpointEpoch%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23VerifyCheckpointEpoch)%3A%20VerifyCheckpointEpoch%20is%20within%20current%20epoch%20and%20previous%20epoch%20with%20respect%20to%20current%20time.%20Returns%20true%20if%20it's%20within%2C%20false%20if%20it's%20not.%0A%0A_Note%3A%20Sample%20command%20for%20running%20tests%20in%20Prysm%3A%20%60bazel%20test%20%2F%2Fbeacon-chain%2Fcore%2Fhelpers%3Ago_default_test%20--test_output%3Dstreamed%20--test_filter%3DTestAttestation_AggregateSignature%60._%0A%0A**Consensus%20Committee%20Selection**%0A%0A-%20%5Bfunc%20ProcessRandoa%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fblocks%23ProcessRandao)%3A%20checks%20the%20block%20proposer's%20randao%20commitment%20and%20generates%20a%20new%20randao%20mix%20to%20update%20in%20the%20beacon%20state's%20latest%20randao%20mixes%20slice.%0A-%20%5Bfunc%20randaoSigningData%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fblocks%2Fsignature.go%23L157)%3A%20retrieves%20the%20randao%20related%20signing%20data%20from%20the%20state.%0A%20%20-%20%5Bfunc%20(b%20%5C*BeaconState)%20PubkeyAtIndex(idx%20types.ValidatorIndex)%20%5Bfieldparams.BLSPubkeyLength%5Dbyte%20%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fstate%2Fstate-native%2Fgetters_validator.go%23L135)%3A%20returns%20the%20pubkey%20at%20the%20given%20validator%20index.%0A%0A%23%23%23%20Light%20Client%20Support%0A%0A%23%23%23%20Signature%20Schemes%20Review%0A%0A-%20Execution%20Chain%20Block%20Signing%0A%0A-%20Vote%20Signing%0A-%20Aggregated%20Attestations%20Signing%0A-%20Synch%20Committee%20Signing%0A%0A%23%23%20Ethereum%202.0%20Light%20Client%0A%0A%23%23%23%20Key%20Concepts%0A%0A-%20Syncing%20to%20Current%20state%0A%0A-%20Advancing%20Blocks%0A-%20Communication%20can%20be%20either%20via%0A-%20RPC%20to%20the%20%5BEth%20BEACON%20Node%20API%5D(https%3A%2F%2Fethereum.github.io%2Fbeacon-APIs%2F%23%2FBeacon)%0A-%20%5BNetworking%20Gossip%20Topics%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.md%23global-topics)%0A%20%20-%20%5Blight_client_finality_update%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.md%23light_client_finality_update)%3A%20This%20topic%20is%20used%20to%20propagate%20the%20latest%20%60LightClientFinalityUpdate%60%20to%20light%20clients%2C%20allowing%20them%20to%20keep%20track%20of%20the%20latest%20%60finalized_header%60.%0A%20%20-%20%5Blight_client_optimistic_update%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.md%23light_client_optimistic_update)%3A%20This%20topic%20is%20used%20to%20propagate%20the%20latest%60LightClientOptimisticUpdate%60%20to%20light%20clients%2C%20allowing%20them%20to%20keep%20track%20of%20the%20latest%20%60optimistic_header%60.%0A%0A_Note%3A%20Time%20on%20Ethereum%202.0%20Proof%20of%20Stake%20is%20divided%20into%20slots%20and%20epochs.%20One%20slot%20is%2012%20seconds.%20One%20epoch%20is%206.4%20minutes%2C%20consisting%20of%2032%20slots.%20One%20block%20can%20be%20created%20for%20each%20slot._%0A%0A%23%23%23%20Altair%20Light%20Client%20--%20Sync%20Protocol%0A%0A-%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%3A%20The%20beacon%20chain%20is%20designed%20to%20be%20light%20client%20friendly%20for%20constrained%20environments%20to%20access%20Ethereum%20with%20reasonable%20safety%20and%20liveness.%0A%0ASuch%20environments%20include%20resource-constrained%20devices%20(e.g.%20phones%20for%20trust-minimized%20wallets)and%20metered%20VMs%20(e.g.%20blockchain%20VMs%20for%20cross-chain%20bridges).%0A%0AThis%20document%20suggests%20a%20minimal%20light%20client%20design%20for%20the%20beacon%20chain%20thatuses%20sync%20committees%20introduced%20in%20%5Bthis%20beacon%20chain%20extension%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fbeacon-chain.mdx).%0A%0AAdditional%20documents%20describe%20how%20the%20light%20client%20sync%20protocol%20can%20be%20used%3A%0A%0A-%20%5BFull%20node%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Ffull-node.mdx)%0A-%20%5BLight%20client%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%0A-%20%5BNetworking%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.mdx)%0A%0A-%20%5BLight%20client%20sync%20process%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%3A%20explains%20how%20light%20clients%20MAY%20obtain%20light%20client%20data%20to%20sync%20with%20the%20network.%0A%0A1.%20The%20light%20client%20MUST%20be%20configured%20out-of-band%20with%20a%20spec%2Fpreset%20(including%20fork%20schedule)%2C%20with%20%60genesis_state%60%20(including%20%60genesis_time%60%20and%20%60genesis_validators_root%60)%2C%20and%20with%20a%20trusted%20block%20root.%20The%20trusted%20block%20SHOULD%20be%20within%20the%20weak%20subjectivity%20period%2C%20and%20its%20root%20SHOULD%20be%20from%20a%20finalized%20%60Checkpoint%60.%0A2.%20The%20local%20clock%20is%20initialized%20based%20on%20the%20configured%20%60genesis_time%60%2C%20and%20the%20current%20fork%20digest%20is%20determined%20to%20browse%20for%20and%20connect%20to%20relevant%20light%20client%20data%20providers.%0A3.%20The%20light%20client%20fetches%20a%20%5B%60LightClientBootstrap%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%20object%20for%20the%20configured%20trusted%20block%20root.%20The%20%60bootstrap%60%20object%20is%20passed%20to%20%5B%60initialize_light_client_store%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23initialize_light_client_store)%20to%20obtain%20a%20local%20%5B%60LightClientStore%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientstore).%0A4.%20The%20light%20client%20tracks%20the%20sync%20committee%20periods%20%60finalized_period%60%20from%20%60store.finalized_header.slot%60%2C%20%60optimistic_period%60%20from%20%60store.optimistic_header.slot%60%2C%20and%20%60current_period%60%20from%20%60current_slot%60%20based%20on%20the%20local%20clock.%0A%20%20%201.%20When%20%60finalized_period%20%3D%3D%20optimistic_period%60%20and%20%5B%60is_next_sync_committee_known%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23is_next_sync_committee_known)%20indicates%20%60False%60%2C%20the%20light%20client%20fetches%20a%20%5B%60LightClientUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientupdate)%20for%20%60finalized_period%60.%20If%20%60finalized_period%20%3D%3D%20current_period%60%2C%20this%20fetch%20SHOULD%20be%20scheduled%20at%20a%20random%20time%20before%20%60current_period%60%20advances.%0A%20%20%202.%20When%20%60finalized_period%20%2B%201%20%3C%20current_period%60%2C%20the%20light%20client%20fetches%20a%20%60LightClientUpdate%60%20for%20each%20sync%20committee%20period%20in%20range%20%60%5Bfinalized_period%20%2B%201%2C%20current_period)%60%20(current%20period%20excluded)%0A%20%20%203.%20When%20%60finalized_period%20%2B%201%20%3E%3D%20current_period%60%2C%20the%20light%20client%20keeps%20observing%20%5B%60LightClientFinalityUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientfinalityupdate)%20and%20%5B%60LightClientOptimisticUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientoptimisticupdate).%20Received%20objects%20are%20passed%20to%20%5B%60process_light_client_finality_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_finality_update)%20and%20%5B%60process_light_client_optimistic_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_optimistic_update).%20This%20ensures%20that%20%60finalized_header%60%20and%20%60optimistic_header%60%20reflect%20the%20latest%20blocks.%0A5.%20%5B%60process_light_client_store_force_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_store_force_update)%20MAY%20be%20called%20based%20on%20use%20case%20dependent%20heuristics%20if%20light%20client%20sync%20appears%20stuck.%20If%20available%2C%20falling%20back%20to%20an%20alternative%20syncing%20mechanism%20to%20cover%20the%20affected%20sync%20committee%20period%20is%20preferred.%0A%0A%23%23%23%20The%20Portal%20Network%0A%0A-%20%5BThe%20Portal%20Network%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs)%3A%20The%20Portal%20Network%20is%20an%20in%20progess%20effort%20to%20enable%20lightweight%20protocol%20access%20by%20resource%20constrained%20devices.%20The%20term%20_%22portal%22_%20is%20used%20to%20indicate%20that%20these%20networks%20provide%20a%20_view_%20into%20the%20protocol%20but%20are%20not%20critical%20to%20the%20operation%20of%20the%20core%20Ethereum%20protocol.%0A%0AThe%20Portal%20Network%20is%20comprised%20of%20multiple%20peer-to-peer%20networks%20which%20together%20provide%20the%20data%20and%20functionality%20necessary%20to%20expose%20the%20standard%20%5BJSON-RPC%20API%5D(https%3A%2F%2Feth.wiki%2Fjson-rpc%2FAPI).%20These%20networks%20are%20specially%20designed%20to%20ensure%20that%20clients%20participating%20in%20these%20networks%20can%20do%20so%20with%20minimal%20expenditure%20of%20networking%20bandwidth%2C%20CPU%2C%20RAM%2C%20and%20HDD%20resources.%0A%0AThe%20term%20'Portal%20Client'%20describes%20a%20piece%20of%20software%20which%20participates%20in%20these%20networks.%20Portal%20Clients%20typically%20expose%20the%20standard%20JSON-RPC%20API.%0A%0A-%20Motivation%3A%20The%20Portal%20Network%20is%20focused%20on%20delivering%20reliable%2C%20lightweight%2C%20and%20decentralized%20access%20to%20the%20Ethereum%20protocol.%0A%0A-%20Prior%20Work%20on%20the%20%22Light%20Ethereum%20Subprotocol%22%20(LES)%3A%20The%20term%20%22light%20client%22%20has%20historically%20refered%20to%20a%20client%20of%20the%20existing%20%5BDevP2P%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Frlpx.mdx)%20based%20%5BLES%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Fcaps%2Fles.mdx)%20network.%20This%20network%20is%20designed%20using%20a%20client%2Fserver%20architecture.%20The%20LES%20network%20has%20a%20total%20capacity%20dictated%20by%20the%20number%20of%20%22servers%22%20on%20the%20network.%20In%20order%20for%20this%20network%20to%20scale%2C%20the%20%22server%22%20capacity%20has%20to%20increase.%20This%20also%20means%20that%20at%20any%20point%20in%20time%20the%20network%20has%20some%20total%20capacity%20which%20if%20exceeded%20will%20cause%20service%20degradation%20across%20the%20network.%20Because%20of%20this%20the%20LES%20network%20is%20unreliable%20when%20operating%20near%20capacity.%0A%0A-%20Block%20Relay%0A%0A-%20%5BBeacon%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23dht-overview)%3A%20A%20client%20has%20a%20trusted%20beacon%20state%20root%2C%20and%20it%20wants%20to%20access%20some%20parts%20of%20the%20state.%20Each%20of%20the%20access%20request%20corresponds%20to%20some%20leave%20nodes%20of%20the%20beacon%20state.%20The%20request%20is%20a%20content%20lookup%20on%20a%20DHT.%20The%20response%20is%20a%20Merkle%20proof.%0A%0A%20%20%20%20%20%20A%20Distributed%20Hash%20Table%20(DHT)%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%0A%0A-%20%5BSyncing%20Block%20Headers%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx)%3A%20A%20beacon%20chain%20client%20could%20sync%20committee%20to%20perform%20state%20updates.%20The%20data%20object%20LightClientSkipSyncUpdate%20allows%20a%20client%20to%20quickly%20sync%20to%20a%20recent%20header%20with%20the%20appropriate%20sync%20committee.%20Once%20the%20client%20establishes%20a%20recent%20header%2C%20it%20could%20sync%20to%20other%20headers%20by%20processing%20LightClientUpdates.%20These%20two%20data%20types%20allow%20a%20client%20to%20stay%20up-to-date%20with%20the%20beacon%20chain.%0A%20%20-%20%5BSync%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fskip-sync-network.mdx)%3A%20A%20client%20uses%20SkipSyncUpdate%20to%20skip%20sync%20from%20a%20known%20header%20to%20a%20recent%20header.%20A%20client%20with%20a%20trusted%20but%20outdated%20header%20cannot%20use%20the%20messages%20in%20the%20gossip%20channel%20bc-light-client-update%20to%20update.%20The%20client's%20sync-committee%20in%20the%20stored%20snapshot%20is%20too%20old%20and%20not%20connected%20to%20any%20update%20messages.%20The%20client%20look%20for%20the%20appropriate%20SkipSyncUpdate%20to%20skip%20sync%20its%20header.%0A%20%20-%20%5BAdvance%20Block%20Headers%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx)%3A%20A%20beacon%20chain%20client%20could%20sync%20committee%20to%20perform%20%5Bstate%20updates%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fsync-protocol.mdx).%20The%20data%20object%20%5BLightClientSkipSyncUpdate%5D(skip-sync-network)%20allows%20a%20client%20to%20quickly%20sync%20to%20a%20recent%20header%20with%20the%20appropriate%20sync%20committee.%20Once%20the%20client%20establishes%20a%20recent%20header%2C%20it%20could%20sync%20to%20other%20headers%20by%20processing%20%5BLightClientUpdates%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fsync-protocol.md%23lightclientupdate).%20These%20two%20data%20types%20allow%20a%20client%20to%20stay%20up-to-date%20with%20the%20beacon%20chain.%0A%0A%20%20%20%20%20%20%20%20%20%20These%20two%20data%20types%20are%20placed%20into%20separate%20sub-networks.%20A%20light%20client%20make%20find-content%20requests%20on%20%60skip-sync-network%60%20at%20start%20of%20the%20sync%20to%20get%20a%20header%20with%20the%20same%20%60SyncCommittee%60%20object%20as%20in%20the%20current%20sync%20period.%20The%20client%20uses%20messages%20in%20the%20gossip%20topic%20%60bc-light-client-update%60%20to%20advance%20its%20header.%0A%0A%20%20%20%20%20%20%20%20%20%20The%20gossip%20topics%20described%20in%20this%20document%20is%20part%20of%20a%20%5Bproposal%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fa-beacon-chain-light-client-proposal%2F11064)%20for%20a%20beacon%20chain%20light%20client.%0A%0A%23%23%23%20Transaction%20Proofs%0A%0A-%20%5BRetrieving%20Beacon%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.mdx)%3A%20A%20client%20has%20a%20trusted%20beacon%20state%20root%2C%20and%20it%20wants%20to%20access%20some%20parts%20of%20the%20state.%20Each%20of%20the%20access%20request%20corresponds%20to%20some%20leave%20nodes%20of%20the%20beacon%20state.%20The%20request%20is%20a%20content%20lookup%20on%20a%20DHT.%20The%20response%20is%20a%20Merkle%20proof.%0A%0AA%20Distributed%20Hash%20Table%20(DHT)%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%20key.%20A%20portal-network%20DHT%20is%20different%20than%20a%20traditional%20one%20in%20that%20each%20participant%20could%20selectively%20limit%20its%20workload%20by%20choosing%20a%20small%20interest%20radius%20r.%20A%20participants%20only%20process%20messages%20that%20are%20within%20its%20chosen%20radius%20boundary.%0A%0A-%20%5BWire%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23wire-protocol)%3A%20For%20a%20subprotocol%2C%20we%20need%20to%20further%20define%20the%20following%20to%20be%20able%20to%20instantiate%20the%20wire%20format%20of%20each%20message%20type.%201.%20%60content_key%60%202.%20%60content_id%60%203.%20%60payload%60%0A%0A%20%20%20%20%20%20The%20content%20of%20the%20message%20is%20a%20Merkle%20proof%20contains%20multiple%20leave%20nodes%20for%20a%20%5BBeaconState%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fbeacon-chain.md%23beaconstate).%0A%0A%20%20%20%20%20%20Finally%2C%20we%20define%20the%20necessary%20encodings.%20A%20light%20client%20only%20knows%20the%20root%20of%20the%20beacon%20state.%20The%20client%20wants%20to%20know%20the%20details%20of%20some%20leave%20nodes.%20The%20client%20has%20to%20be%20able%20to%20construct%20the%20%60content_key%60%20only%20knowing%20the%20root%20and%20which%20leave%20nodes%20it%20wants%20see.%20The%20%60content_key%60%20is%20the%20ssz%20serialization%20of%20the%20paths.%20The%20paths%20represent%20the%20part%20of%20the%20beacon%20state%20that%20one%20wants%20to%20know%20about.%20The%20paths%20are%20represented%20by%20generalized%20indices.%20Note%20that%20%60hash_tree_root%60%20and%20%60serialize%60%20are%20the%20same%20as%20those%20defined%20in%20%5Bsync-gossip%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx).%0A%0A-%20TODO%3A%20Review%20of%20Retrieving%20a%20transaction%20proof%20not%20just%20retrieving%20data%20on-demand%0A%0A%23%23%23%20Further%20Information%0A%0A-%20Ethereum%202.0%20Specifications%0A-%20%5BBeacon%20Chain%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fmaster%2Fspecs%2Fphase0%2Fbeacon-chain.mdx)%0A-%20%5BExtended%20light%20client%20protocol%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fextended_light_client_protocol)%0A-%20%5BAltair%20Light%20Client%20--%20Light%20Client%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%0A-%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%0A-%20%5BBeacon%20Chain%20Fork%20Choice%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Ffork-choice.mdx)%0A-%20%5BThe%20Portal%20Network%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs)%3A%20an%20in%20progess%20effort%20to%20enable%20lightweight%20protocol%20access%20by%20resource%20constrained%20devices.%0A-%20%5BLight%20Ethereum%20Subprotocol%20(LES)%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Fcaps%2Fles.mdx)%3A%20the%20protocol%20used%20by%20%22light%22%20clients%2C%20which%20only%20download%20block%20headers%20as%20they%20appear%20and%20fetch%20other%20parts%20of%20the%20blockchain%20on-demand.%0A-%20%5BBlockDaemon%3A%20Ethereum%20Altair%20Hard%20Folk%3A%20Light%20Clients%20%26%20Sync%20Committees%5D(https%3A%2F%2Fblockdaemon.com%2Fblog%2Fethereum-altair-hard-folk-light-clients-sync-committees%2F)%0A-%20%5BEfficient%20algorithms%20for%20CBC%20Casper%5D(https%3A%2F%2Fdocs.google.com%2Fpresentation%2Fd%2F1oc_zdywOsHxz3zez1ILAgrerS7RkaF1hHoW0FLtp0Gw%2Fedit%23slide%3Did.p)%3A%20Review%20of%20LMD%20GHOST%20(Latest%20Message%20Driven%2C%20Greediest%20Heaviest%20Observed%20Sub-Tree)%0A-%20%5BSSZ%3A%20Simple%20Serialize%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fssz%2F)%3A%20Overview%20of%20Simple%20serialize%20(SSZ)%20is%20the%20serialization%20method%20used%20on%20the%20Beacon%20Chain.%20(including%20merkalization%20and%20multiproofs)%0A-%20%5BThe%20Noise%20Protocol%20Framework%5D(https%3A%2F%2Fnoiseprotocol.org%2Fnoise.html)%3A%20Noise%20is%20a%20framework%20for%20crypto%20protocols%20based%20on%20Diffie-Hellman%20key%20agreement.%0A-%20%5BFlashbots%20for%20Ethereum%20Consensus%20Clients%5D(https%3A%2F%2Fhackmd.io%2FQoLwVQf3QK6EiVt15YOYqQ%3Fview)%0A-%20%5BOptimistic%20Sync%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fsync%2Foptimistic.mdx)%3A%20Optimistic%20Sync%20is%20a%20stop-gap%20measure%20to%20allow%20execution%20nodes%20to%20sync%20via%20established%20methods%20until%20future%20Ethereum%20roadmap%20items%20are%20implemented%20(e.g.%2C%20statelessness).%0A-%20%5BConsensus%20Light%20Client%20Server%20Implementation%20Notes%5D(https%3A%2F%2Fhackmd.io%2FhsCz1G3BTyiwwJtjT4pe2Q%3Fview)%3A%20How%20Lodestar%20beacon%20node%20was%20tweaked%20to%20serve%20light%20clients%0A-%20%5Bbeacon%20chain%20light%20client%20design%20doc%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40ralexstokes%2FHJxDMi8vY)%3A%20notes%20about%20the%20design%2Fimplementation%20of%20a%20beacon%20chain%20light%20client%20using%20standard%20APIs%20and%20protocol%20features%0A-%20%5BA%20Beacon%20Chain%20Light%20Client%20Proposal%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fa-beacon-chain-light-client-proposal%2F11064)%3A%20proposing%20a%20light%20client%20implementation%20that%20goes%20a%20step%20further%20than%20the%20minimum%20light%20client%20described%20in%20the%20altair%20consensus-spec.%20The%20proposed%20client%20aims%20to%20allow%20queries%20into%20the%20beacon%20state.%0A-%20%5BDistributed%20Hash%20Table%20(DHT)%20Overview%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23dht-overview)%3A%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%20key.%0A-%20%5B(WIP)%20Light%20client%20p2p%20interface%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fpull%2F2786)%3A%20a%20PR%20to%20get%20the%20conversation%20going%20about%20a%20p2p%20approach.%0A%20%20Here%20we%20cover%20two%20approaches%20which%20may%20be%20combined%0A%0A%23%23%20References%0A%0A**References%20Overview**%0A%0A%3Ca%20name%3D%22ov1%22%3E%5B1%5D%3C%2Fa%3E%20%5BPart%20I%3A%20What%20to%20build%20next%20in%20Zero%0AKnowledge%3F%5D(https%3A%2F%2Fdelendum.xyz%2F2022%2F11%2F22%2Fwhat-to-build-next-in-zero-knowledge.html)%3A%0AWhat%20are%20the%20problems%20that%20haven%E2%80%99t%20been%20solved%20in%20blockchain%20and%20how%20can%20we%0Aleverage%20zero-knowledge%20proof%20as%20a%20tool%20to%20solve%20these%20problems%3F%0A%0A%3Ca%20name%3D%22ov1%22%3E%5B2%5D%3C%2Fa%3E%20%5BCrosschain%0AFuture%5D(https%3A%2F%2Fgithub.com%2Fisolab-gg%2Fisomorph%2Fblob%2Fmain%2Fdocs%2Fblog%2Fcrosschain-future.mdx)%3A%0AA%20review%20of%20the%20growing%20blockchain%20ecosystem%20and%20the%20role%20of%20zkp%20in%20building%0Atrustless%20bridges.%0A%0A%3Ca%20name%3D%22ov2%22%3E%5B3%5D%3C%2Fa%3E%20%5BTechnical%20Problems%0AOverview%5D(https%3A%2F%2Fgithub.com%2Fisolab-gg%2Fisomorph%2Fblob%2Fmain%2Fdocs%2Fproblems%2Ftechnical-problems-part-1.mdx)%3A%0ATrustless%20Bridging%20Technical%20Problems%20-%20PART%201%3A%20Problem%20Overview%2C%20Consensus%0AProtocols%2C%20Signature%20Schemes.%0A%0A**Reference%20Trustless%20Bridge%20Design**%0A%0A%3Ca%20name%3D%22tb1%22%3E%5B1%5D%3C%2Fa%3E%20%5BSuccinct%3A%20Proof%20of%20Consensus%20Bridging%20between%20Ethereum%0Aand%20Gnosis%20Chain%5D(https%3A%2F%2Fblog.succinct.xyz%2Fblog%2Fproof-of-consensus%2F)%3A%20gas%0Aefficient%20on-chain%20light%20client%20for%20Ethereum%20PoS%2C%20powered%20by%20succinct%0Azero-knowledge%20proofs%20(zkSNARKs)%2C%20allowing%20for%20arbitrary%2C%20trust-minimized%0Across-chain%20communication%20between%20Ethereum%20and%20Gnosis%20Chain.%0A%0A**References%20Block%20Production**%0A%0A%3Ca%20name%3D%22bp1%22%3E%5B1%5D%3C%2Fa%3E%20%5BEIP-3675%3A%20Upgrade%20consensus%20to%0AProof-of-Stake%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-3675%23pow-block-processing)%3A%0ASpecification%20of%20the%20consensus%20mechanism%20upgrade%20on%20Ethereum%20Mainnet%20that%0Aintroduces%20Proof-of-Stake.%0A%0A%3Ca%20name%3D%22bp2%22%3E%5B2%5D%3C%2Fa%3E%20%5BEIP-2982%3A%20Serenity%20Phase%0A0%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-2982)%3A%20Phase%200%20of%20the%20release%20schedule%20of%0ASerenity%2C%20a%20series%20of%20updates%20to%20Ethereum%20a%20scalable%2C%20proof-of-stake%20consensus.%0A%0A%3Ca%20name%3D%22bp3%22%3E%5B3%5D%3C%2Fa%3E%20%5BEthreum%20Consensus%20Specs%20Phase%0A0%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Ftree%2Fdev%2Fspecs%2Fphase0)%3A%0ASpecifications%20for%20Ethereum%202.0%20Phase%200%20including%0A%5Bbeacon-chain%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fbeacon-chain.mdx)%2C%0A%5Bdeposit-contract%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fdeposit-contract.mdx)%2C%0A%5Bfork-choice%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Ffork-choice.mdx)%2C%0A%5Bp2p-interface%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fp2p-interface.mdx)%2C%0A%5Bvalidator%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fvalidator.mdx)%0Aand%0A%5Bweak-subjectivity%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fweak-subjectivity.mdx)%0A%0A%3Ca%20name%3D%22bp4%22%3E%5B6%5D%3C%2Fa%3E%20%5BEthereum%20Consensus%20and%20Execution%20Client%0ADistribution%5D(https%3A%2F%2Fclientdiversity.org%2F%23distribution)%3A%20Percentages%20of%20nodes%0Arunning%20client%20types%20for%20both%20Consensus%20(Prysm%2C%20Lighthours%2C%20Nimbus%2C%20Teku)%20and%0AExecution%20(Geth%2C%20Erigon%2C%20Besu%2C%20Nethermind)%20clients.%0A%0A%3Ca%20name%3D%22bp5%22%3E%5B5%5D%3C%2Fa%3E%20%5Bgo-ethereum%20go%0Adocumentation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fethereum%2Fgo-ethereum%40v1.10.26)%3A%0ADocumentation%20for%20Go%20Ethereum%2C%20Official%20Golang%20implementation%20of%20the%20Ethereum%0Aprotocol.%20Which%20is%20an%20execution%20chain%20implementation.%0A%0A%3Ca%20name%3D%22bp6%22%3E%5B6%5D%3C%2Fa%3E%20%5Bprysm%20go%0Adocumentation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2)%3A%0ADocumentation%20for%20prysm%2C%20An%20Ethereum%20Consensus%20Implementation%20Written%20in%20Go.%20A%0Abeacon-chain%20immplementation.%20Also%20see%20%5BPrysm%0ADocumentation%5D(https%3A%2F%2Fdocs.prylabs.network%2Fdocs%2Fgetting-started)%0A%0A%3Ca%20name%3D%22bp7%22%3E%5B7%5D%3C%2Fa%3E%20%5Blighthouse%0Adocumentation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2)%3A%0ADocumentation%20for%20lighthouse%2C%20written%20in%20Rust.%20A%20beacon-chain%20immplementation.%0A%0A%3Ca%20name%3D%22bp8%22%3E%5B8%5D%3C%2Fa%3E%20%5BEtherum%202.0%20Validators%0AOverview%5D(https%3A%2F%2Fbeaconcha.in%2Fvalidators)%3A%20Live%20Monitoring%20of%20Ethreum%202.0%0AValidators%20from%20beachoncha.in%0A%0A**References%20Technical%20Summary**%0A%0A%3Ca%20name%3D%22ts1%22%3E%5B1%5D%3C%2Fa%3E%20%5BEthereum%20EVM%0Aillustrated%5D(https%3A%2F%2Ftakenobu-hs.github.io%2Fdownloads%2Fethereum_evm_illustrated.pdf)%3A%0AA%20technical%20overview%20of%20Ethereum%20including%20state%2C%20accounts%2C%20transactions%20and%0Amessages%20as%20well%20as%20the%20EVM.%20%5BAppendix%20E%5D(%23appendix-e-data-structures)%20has%20links%0Ato%20type%20definitions%20for%20blocks%2C%20transactions%2C%20state%20etc%20in%20geth.%0A%0A%3Ca%20name%3D%22ts2%22%3E%5B2%5D%3C%2Fa%3E%20%5BBlocks%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fblocks%2F)%3A%0ABlock%20data%20definitions%20including%20attestations%20from%20ethereum.org%0A%0A%3Ca%20name%3D%22ts3%22%3E%5B3%5D%3C%2Fa%3E%20%5Beth1%20block%0Aproposal%5D(https%3A%2F%2Fhackmd.io%2F%40flashbots%2Fmev-in-eth2%23eth1-block-proposal)%3A%0ATechnical%20walkthrough%20of%20how%20blocks%20are%20proposed%20and%20potential%20MEV%20opportunities%0Afrom%20FlashBots.%0A%0A%3Ca%20name%3D%22ts4%22%3E%5B4%5D%3C%2Fa%3E%20%5BAssemble%0ABlock%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Frayonism%2Fblob%2Fmaster%2Fspecs%2Fmerge.md%23assemble-block)%3A%0AEthereum%20Specification%20for%20block%20Assembly%20as%20part%20of%20Rayonism%20--%20The%20Merge%20spec.%0A%0A%3Ca%20name%3D%22ts5%22%3E%5B5%5D%3C%2Fa%3E%20%5BPrysm%20running%20a%0Anode%5D(https%3A%2F%2Fdocs.prylabs.network%2Fdocs%2Finstall%2Finstall-with-script)%3A%0AOperational%20procedures%20for%20Validators%20by%20Prysm.%20Note%20validators%20run%20both%20the%0Abeacon%20chain(consensus)%20and%20a%20geth%20node(execution)%0A%0A%3Ca%20name%3D%22ts6%22%3E%5B6%5D%3C%2Fa%3E%5BThe%20Beacon%20Chain%20Ethereum%202.0%20explainer%20you%20need%20to%20read%0Afirst%5D(https%3A%2F%2Fethos.dev%2Fbeacon-chain)%3A%20Detailed%20walk%20through%20og%20Ethereum%202.0%0Ablock%20production%20including%20slots%2C%20epochs%2C%20validators%2C%20commitees%20and%20finality.%0A%0A%3Ca%20name%3D%22ts6b%22%3E%5B6%5D%3C%2Fa%3E%5BThe%20Beacon%20Chain%20Ethereum%202.0%20explainer%20you%20need%20to%20read%0Afirst%5D(https%3A%2F%2Fethos.dev%2Fbeacon-chain)%3A%20Detailed%20walk%20through%20og%20Ethereum%202.0%0Ablock%20production%20including%20slots%2C%20epochs%2C%20validators%2C%20commitees%20and%20finality.%0A%0A%3Ca%20name%3D%22ts7%22%3E%5B7%5D%3C%2Fa%3E%20%5BEtherum%202.0%20Validators%0AOverview%5D(https%3A%2F%2Fbeaconcha.in%2Fvalidators)%3A%20Live%20Monitoring%20of%20Ethreum%202.0%0AValidators%20from%20beachoncha.in%0A%0A%3Ca%20name%3D%22ts8%22%3E%5B8%5D%3C%2Fa%3E%5BBLS%0ASignatures%5D(https%3A%2F%2Feth2book.info%2Fbellatrix%2Fpart2%2Fbuilding_blocks%2Fsignatures%2F)%3A%0ADetailed%20walkthrough%20of%20BLS%20Signatures%20and%20how%20they%20can%20be%20used%20in%20aggregation.%0A%0A%3Ca%20name%3D%22ts9%22%3E%5B8%5D%3C%2Fa%3E%5BAttestation%20Inclusion%0ALifecycle%5D(https%3A%2F%2Fkb.beaconcha.in%2Fattestation%23attestation-inclusion-lifecycle)%3A%0AHigh%20Level%20overview%20of%20the%20attestation%20life%20cycle%20including%20geeration%2C%0Apropogation%2C%20aggregation%20and%20inclusion.Attest%0A%0A%3Ca%20name%3D%22ts10%22%3E%5Bts10%5D%3C%2Fa%3E%20%5BBeacon%20Chain%20Proposal%3A%20Sync%0AComittees%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2FHF1_proposal%23Sync-committees)%3A%0AFor%20each%20period%20(~27%20hours)%2C%201024%20validators%20are%20randomly%20selected%20to%20be%20part%20of%0Athe%20sync%20committee%20during%20that%20period.%20Validators%20in%20the%20sync%20committee%20would%0Apublish%20signatures%20attesting%20to%20the%20current%20head.%20These%20signatures%20would%20be%0Abroadcasted%20as%20part%20of%20a%20LightClientUpdate%20object%20that%20could%20help%20light%20clients%0Afind%20the%20head%2C%20and%20would%20be%20included%20in%20the%20beacon%20chain%20to%20be%20rewarded.%0A%0A%3Ca%20name%3D%22ts11%22%3E%5Bts11%5D%3C%2Fa%3E%20%5BAltair%20Light%20Client%20--%20Sync%0AProtocol%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2FHF1_proposal%23Sync-committees)%3A%0AThis%20document%20suggests%20a%20minimal%20light%20client%20design%20for%20the%20beacon%20chain%20that%0Auses%20sync%20committees.%0A%0A%3Ca%20name%3D%22ts12%22%3E%5Bts12%5D%3C%2Fa%3E%20%5BEthereum%20Builder%20Specifications%3A%20Honest%0AValidator%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fbuilder-specs%2Fblob%2Fmain%2Fspecs%2Fvalidator.mdx)%3A%0Aexplains%20the%20way%20in%20which%20a%20beacon%20chain%20validator%20is%20expected%20to%20use%20the%0ABuilder%20spec%20to%20participate%20in%20an%20external%20builder%20network.%0A%0A%3Ca%20name%3D%22ts13%22%3E%5Bts13%5D%3C%2Fa%3E%20%5BFlashbots%3A%0Amev-boost%5D(https%3A%2F%2Fgithub.com%2Fflashbots%2Fmev-boost)%3A%20open%20source%20middleware%20run%0Aby%20validators%20to%20access%20a%20competitive%20block-building%20market.%0A%0A%3Ca%20name%3D%22ts14%22%3E%5Bts14%5D%3C%2Fa%3E%20%5BA%20note%20on%20Ethereum%202.0%20phase%200%20validator%0Alifecycle%5D(https%3A%2F%2Fnotes.ethereum.org%2F7CFxjwMgQSWOHIxLgJP2Bw%23A-note-on-Ethereum-20-phase-0-validator-lifecycle)%3A%0Adescribes%20the%20concept%20of%20validator%20status%20epochs%20and%20the%20cases%20of%20validator%0Alifecycle%20in%20the%20view%20of%20%E2%80%9Cvalidator%20status%20transition%E2%80%9D%20in%20phase%200.%0A%0A%23%23%20Appendices%0A%0A%23%23%23%20Appendix%20A%3A%20Signing%20Libraries%0A%0A%23%23%23%20Appendix%20B%3A%20Proving%20and%20Verification%20Mechanisms%0A%0A%23%23%23%23%20%5Beth-proof-of-consensus%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus)%3A%20Proof%20of%20Consensus%20for%20Ethereum%20by%20succinctlabs%0A%0ACircuits%0A%0A-%20%5Baggregate_bls_verify.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Faggregate_bls_verify.circom)%3A%20Computes%20an%20aggregate%20BLS12-381%20public%20key%20over%20a%20set%20of%20public%20keys%20and%20a%20bitmask%0A-%20%5Bassert_valid_signed_header.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fassert_valid_signed_header.circom)%0A-%20%5Bpubkey_poseidon.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fpubkey_poseidon.circom)%3A%20Computes%20the%20Poseidon%20merkle%20root%20of%20a%20list%20of%20field%20elements%0A-%20%5Bsha256_bytes.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fsha256_bytes.circom)%3A%20Wrapper%20around%20SHA256%20to%20support%20bytes%20as%20input%20instead%20of%20bits%0A-%20%5Bsimple_serialize.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fsimple_serialize.circom)%3A%20Helper%20function%20to%20implement%20SSZArray%0A-%20%5Bsync_committee_committments.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fsync_committee_committments.circom)%3A%20Asserts%20that%20the%20byte%20representation%20of%20a%20BLS12-381%20public%20key's%20x-coordinate%20matches%20the%20BigInt%20representation%0A%0AVerification%0A%0A-%20%5BAMB%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Famb)%3A%20Arbitrary%20Message%20Passing%0A-%20%5BTrustlessAMB.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Famb%2FTrustlessAMB.sol)%3A%20sends%20and%20executes%20messages%0A-%20%5BTrustlessAMBStorage.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Famb%2FTrustlessAMBStorage.sol)%3A%20Storage%20for%20messages%20between%20two%20chains%0A-%20%5Bbridge%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Fbridge)%3A%20Allows%20for%20the%20deposit%20and%20withdrawal%20of%20ERC20%20tokens%0A-%20%5BBridge.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Fbridge%2FBridge.sol)%3A%20Deposit%20and%20withdraw%20functionality%0A-%20%5BToken.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Fbridge%2FTokens.sol)%3A%20ERC20%20bridge%20token%20definitions%0A-%20%5Blightclient%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Flightclient)%0A-%20%5BBLSAggregatedSignatureVerifier.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBLSAggregatedSignatureVerifier.sol)%3A%20Verifies%20BLS%20aggregated%20signature%20proofs%0A-%20%5BBeaconLightClient.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol)%3A%20Beacon%20Light%20Client%20Functionality%20including%0A%20%20-%20%5Bstep(LightClientUpdate%20memory%20update)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L86)%3A%20Updates%20the%20head%20given%20a%20finalized%20light%20client%20update.%0A%20%20-%20%5Bfunction%20updateSyncCommittee(LightClientUpdate%20memory%20update%2C%20bytes32%20nextSyncCommitteePoseidon%2C%20Groth16Proof%20memory%20commitmentMappingProof)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L102)%3A%20Set%20the%20sync%20committee%20validator%20set%20root%20for%20the%20next%20sync%20commitee%20period.%0A%20%20-%20%5Bfunction%20forceUpdate()%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L131)%3A%20Finalizes%20the%20optimistic%20update%20and%20sets%20the%20next%20sync%20committee%20if%20no%20finalized%20updates%20have%20been%20received%20for%20a%20period.%0A%20%20-%20%5Bfunction%20processLightClientUpdate(LightClientUpdate%20memory%20update)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L131)%3A%20Implements%20shared%20logic%20for%20processing%20light%20client%20updates.%0A%20%20-%20%5Bfunction%20zkMapSSZToPoseidon(bytes32%20sszCommitment%2C%20bytes32%20poseidonCommitment%2C%20Groth16Proof%20memory%20proof)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L190)%3A%20Maps%20a%20simple%20serialize%20merkle%20root%20to%20a%20poseidon%20merkle%20root%20with%20a%20zkSNARK.%20The%20proof%20asserts%20that%3A%20SimpleSerialize(syncCommittee)%20%3D%3D%20Poseidon(syncCommittee).%0A%20%20-%20%5Bfunction%20zkBLSVerify(bytes32%20signingRoot%2C%20bytes32%20syncCommitteeRoot%2C%20uint256%20claimedParticipation%2C%20Groth16Proof%20memory%20proof)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L208)%3A%20Does%20an%20aggregated%20BLS%20signature%20verification%20with%20a%20zkSNARK.%0A-%20%5Bscripts%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Fscripts)%3A%20A%20collection%20of%20%5Bforge-scripts%5D(https%3A%2F%2Fbook.getfoundry.sh%2Freference%2Fforge%2Fforge-script)%20for%20contract%20deployment.%0A%0A%23%23%23%20Appendix%20C%3A%20Topics%0A%0ABeacon%20Chain%20Topics%20%5BPrysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fp2p%2Ftopics.go)%0A%0Apackage%20p2p%0A%0Aconst%20(%0A%2F%2F%20GossipProtocolAndDigest%20represents%20the%20protocol%20and%20fork%20digest%20prefix%20in%20a%20gossip%20topic.%0AGossipProtocolAndDigest%20%3D%20%22%2Feth2%2F%25x%2F%22%0A%0A%2F%2F%20Message%20Types%0A%2F%2F%0A%2F%2F%20GossipAttestationMessage%20is%20the%20name%20for%20the%20attestation%20message%20type.%20It%20is%0A%2F%2F%20specially%20extracted%20so%20as%20to%20determine%20the%20correct%20message%20type%20from%20an%20attestation%0A%2F%2F%20subnet.%0AGossipAttestationMessage%20%3D%20%22beacon_attestation%22%0A%2F%2F%20GossipSyncCommitteeMessage%20is%20the%20name%20for%20the%20sync%20committee%20message%20type.%20It%20is%0A%2F%2F%20specially%20extracted%20so%20as%20to%20determine%20the%20correct%20message%20type%20from%20a%20sync%20committee%0A%2F%2F%20subnet.%0AGossipSyncCommitteeMessage%20%3D%20%22sync_committee%22%0A%2F%2F%20GossipBlockMessage%20is%20the%20name%20for%20the%20block%20message%20type.%0AGossipBlockMessage%20%3D%20%22beacon_block%22%0A%2F%2F%20GossipExitMessage%20is%20the%20name%20for%20the%20voluntary%20exit%20message%20type.%0AGossipExitMessage%20%3D%20%22voluntary_exit%22%0A%2F%2F%20GossipProposerSlashingMessage%20is%20the%20name%20for%20the%20proposer%20slashing%20message%20type.%0AGossipProposerSlashingMessage%20%3D%20%22proposer_slashing%22%0A%2F%2F%20GossipAttesterSlashingMessage%20is%20the%20name%20for%20the%20attester%20slashing%20message%20type.%0AGossipAttesterSlashingMessage%20%3D%20%22attester_slashing%22%0A%2F%2F%20GossipAggregateAndProofMessage%20is%20the%20name%20for%20the%20attestation%20aggregate%20and%20proof%20message%20type.%0AGossipAggregateAndProofMessage%20%3D%20%22beacon_aggregate_and_proof%22%0A%2F%2F%20GossipContributionAndProofMessage%20is%20the%20name%20for%20the%20sync%20contribution%20and%20proof%20message%20type.%0AGossipContributionAndProofMessage%20%3D%20%22sync_committee_contribution_and_proof%22%0A%2F%2F%20GossipBlsToExecutionChangeMessage%20is%20the%20name%20for%20the%20bls%20to%20execution%20change%20message%20type.%0AGossipBlsToExecutionChangeMessage%20%3D%20%22bls_to_execution_change%22%0A%0A%2F%2F%20Topic%20Formats%0A%2F%2F%0A%2F%2F%20AttestationSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20attestation%20subnet.%0AAttestationSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipAttestationMessage%20%2B%20%22_%25d%22%0A%2F%2F%20SyncCommitteeSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20sync%20committee%20subnet.%0ASyncCommitteeSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipSyncCommitteeMessage%20%2B%20%22_%25d%22%0A%2F%2F%20BlockSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20block%20subnet.%0ABlockSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipBlockMessage%0A%2F%2F%20ExitSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20voluntary%20exit%20subnet.%0AExitSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipExitMessage%0A%2F%2F%20ProposerSlashingSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20proposer%20slashing%20subnet.%0AProposerSlashingSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipProposerSlashingMessage%0A%2F%2F%20AttesterSlashingSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20attester%20slashing%20subnet.%0AAttesterSlashingSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipAttesterSlashingMessage%0A%2F%2F%20AggregateAndProofSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20aggregate%20and%20proof%20subnet.%0AAggregateAndProofSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipAggregateAndProofMessage%0A%2F%2F%20SyncContributionAndProofSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20sync%20aggregate%20and%20proof%20subnet.%0ASyncContributionAndProofSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipContributionAndProofMessage%0A%2F%2F%20BlsToExecutionChangeSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20bls%20to%20execution%20change%20subnet.%0ABlsToExecutionChangeSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipBlsToExecutionChangeMessage%0A)%0A%0A%23%23%23%20Appendix%20D%3A%20gRPC%20and%20API's%0A%0A%5BBeaconcha.in%20ETH2%20API%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html)%0A%0A%23%23%23%20Appendix%20E%3A%20Data%20Structures%0A%0A-%20Block%20Structure%20from%20%5Bgo-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fconsensus%2Fethash%2Fconsensus.go)%0A%0A%60%60%60%0A%0A%2F%2F%20SealHash%20returns%20the%20hash%20of%20a%20block%20prior%20to%20it%20being%20sealed.%0Afunc%20(ethash%20*Ethash)%20SealHash(header%20*types.Header)%20(hash%20common.Hash)%20%7B%0Ahasher%20%3A%3D%20sha3.NewLegacyKeccak256()%0A%0Arlp.Encode(hasher%2C%20%5B%5Dinterface%7B%7D%7B%0Aheader.ParentHash%2C%0Aheader.UncleHash%2C%0Aheader.Coinbase%2C%0Aheader.Root%2C%0Aheader.TxHash%2C%0Aheader.ReceiptHash%2C%0Aheader.Bloom%2C%0Aheader.Difficulty%2C%0Aheader.Number%2C%0Aheader.GasLimit%2C%0Aheader.GasUsed%2C%0Aheader.Time%2C%0Aheader.Extra%2C%0A%7D)%0Ahasher.Sum(hash%5B%3A0%5D)%0Areturn%20hash%0A%7D%0A%0A%60%60%60%0A%0A-%20Blocks%20Headers%20get%20forwarded%20to%20the%20Beacon%20chain%20once%20they%20pass%20%5Bbeacon%20consensus%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fconsensus%2Fbeacon%2Fconsensus.go)%0A-%20The%20Beacon%20chain%20embeds%20the%20EthChain%20Header%20into%20a%20%5BBeaconBlock%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconsensus-types%2Fblocks%2Ftypes.go%23L43)%0A%0ABeaconBlockBody%20from%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconsensus-types%2Fblocks%2Ftypes.go)%20(golang)%0A%0A%60%60%60%0A%0A%2F%2F%20BeaconBlockBody%20is%20the%20main%20beacon%20block%20body%20structure.%20It%20can%20represent%20any%20block%20type.%0Atype%20BeaconBlockBody%20struct%20%7B%0Aversion%20int%0AisBlinded%20bool%0ArandaoReveal%20%5Bfield_params.BLSSignatureLength%5Dbyte%0Aeth1Data%20*eth.Eth1Data%0Agraffiti%20%5Bfield_params.RootLength%5Dbyte%0AproposerSlashings%20%5B%5D*eth.ProposerSlashing%0AattesterSlashings%20%5B%5D*eth.AttesterSlashing%0Aattestations%20%5B%5D*eth.Attestation%0Adeposits%20%5B%5D*eth.Deposit%0AvoluntaryExits%20%5B%5D*eth.SignedVoluntaryExit%0AsyncAggregate%20*eth.SyncAggregate%0AexecutionPayload%20*engine.ExecutionPayload%0AexecutionPayloadHeader%20%5C*engine.ExecutionPayloadHeader%0A%7D%0A%0A%2F%2F%20BeaconBlock%20is%20the%20main%20beacon%20block%20structure.%20It%20can%20represent%20any%20block%20type.%0Atype%20BeaconBlock%20struct%20%7B%0Aversion%20int%0Aslot%20types.Slot%0AproposerIndex%20types.ValidatorIndex%0AparentRoot%20%5Bfield_params.RootLength%5Dbyte%0AstateRoot%20%5Bfield_params.RootLength%5Dbyte%0Abody%20%5C*BeaconBlockBody%0A%7D%0A%0A%2F%2F%20SignedBeaconBlock%20is%20the%20main%20signed%20beacon%20block%20structure.%20It%20can%20represent%20any%20block%20type.%0Atype%20SignedBeaconBlock%20struct%20%7B%0Aversion%20int%0Ablock%20%5C*BeaconBlock%0Asignature%20%5Bfield_params.BLSSignatureLength%5Dbyte%0A%7D%0A%0A%60%60%60%0A%0AEth1Data%20from%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Fprysm%2Fv1alpha1%2Fpowchain.pb.go%23L24)%20(golang)%0A%0A%60%60%60%0A%0Atype%20ETH1ChainData%20struct%20%7B%0Astate%20protoimpl.MessageState%0AsizeCache%20protoimpl.SizeCache%0AunknownFields%20protoimpl.UnknownFields%0A%0ACurrentEth1Data%20*LatestETH1Data%20%60protobuf%3A%22bytes%2C1%2Copt%2Cname%3Dcurrent_eth1_data%2Cjson%3DcurrentEth1Data%2Cproto3%22%20json%3A%22current_eth1_data%2Comitempty%22%60%0AChainstartData%20*ChainStartData%20%60protobuf%3A%22bytes%2C2%2Copt%2Cname%3Dchainstart_data%2Cjson%3DchainstartData%2Cproto3%22%20json%3A%22chainstart_data%2Comitempty%22%60%0ABeaconState%20*BeaconState%20%60protobuf%3A%22bytes%2C3%2Copt%2Cname%3Dbeacon_state%2Cjson%3DbeaconState%2Cproto3%22%20json%3A%22beacon_state%2Comitempty%22%60%0ATrie%20*SparseMerkleTrie%20%60protobuf%3A%22bytes%2C4%2Copt%2Cname%3Dtrie%2Cproto3%22%20json%3A%22trie%2Comitempty%22%60%0ADepositContainers%20%5B%5D%5C*DepositContainer%20%60protobuf%3A%22bytes%2C5%2Crep%2Cname%3Ddeposit_containers%2Cjson%3DdepositContainers%2Cproto3%22%20json%3A%22deposit_containers%2Comitempty%22%60%0A%7D%0A%0Atype%20LatestETH1Data%20struct%20%7B%0Astate%20protoimpl.MessageState%0AsizeCache%20protoimpl.SizeCache%0AunknownFields%20protoimpl.UnknownFields%0A%0ABlockHeight%20uint64%20%60protobuf%3A%22varint%2C2%2Copt%2Cname%3Dblock_height%2Cjson%3DblockHeight%2Cproto3%22%20json%3A%22block_height%2Comitempty%22%60%0ABlockTime%20uint64%20%60protobuf%3A%22varint%2C3%2Copt%2Cname%3Dblock_time%2Cjson%3DblockTime%2Cproto3%22%20json%3A%22block_time%2Comitempty%22%60%0ABlockHash%20%5B%5Dbyte%20%60protobuf%3A%22bytes%2C4%2Copt%2Cname%3Dblock_hash%2Cjson%3DblockHash%2Cproto3%22%20json%3A%22block_hash%2Comitempty%22%60%0ALastRequestedBlock%20uint64%20%60protobuf%3A%22varint%2C5%2Copt%2Cname%3Dlast_requested_block%2Cjson%3DlastRequestedBlock%2Cproto3%22%20json%3A%22last_requested_block%2Comitempty%22%60%0A%7D%0A%0A%60%60%60%0A%0ABeaconBlockAltair%20from%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_block.rs%23L407)%20rust%0A%0A%60%60%60%0A%0A%20%20%20%20%2F%2F%2F%20Return%20an%20Altair%20block%20where%20the%20block%20has%20maximum%20size.%0A%20%20%20%20pub%20fn%20full(spec%3A%20%26ChainSpec)%20-%3E%20Self%20%7B%0A%20%20%20%20%20%20%20%20let%20base_block%3A%20BeaconBlockBase%3C_%2C%20Payload%3E%20%3D%20BeaconBlockBase%3A%3Afull(spec)%3B%0A%20%20%20%20%20%20%20%20let%20sync_aggregate%20%3D%20SyncAggregate%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20sync_committee_signature%3A%20AggregateSignature%3A%3Aempty()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20sync_committee_bits%3A%20BitVector%3A%3Adefault()%2C%0A%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20BeaconBlockAltair%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20slot%3A%20spec.genesis_slot%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20proposer_index%3A%200%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20parent_root%3A%20Hash256%3A%3Azero()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20state_root%3A%20Hash256%3A%3Azero()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20body%3A%20BeaconBlockBodyAltair%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20proposer_slashings%3A%20base_block.body.proposer_slashings%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20attester_slashings%3A%20base_block.body.attester_slashings%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20attestations%3A%20base_block.body.attestations%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20deposits%3A%20base_block.body.deposits%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20voluntary_exits%3A%20base_block.body.voluntary_exits%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20sync_aggregate%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20randao_reveal%3A%20Signature%3A%3Aempty()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20eth1_data%3A%20Eth1Data%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20deposit_root%3A%20Hash256%3A%3Azero()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20block_hash%3A%20Hash256%3A%3Azero()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20deposit_count%3A%200%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20graffiti%3A%20Graffiti%3A%3Adefault()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20_phantom%3A%20PhantomData%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20Beacon%20State%20Data%20Structures%20from%20Prysm%0A%0A%60%60%60%0A%0Atype%20BeaconState%20interface%20%7B%0ASpecParametersProvider%0AReadOnlyBeaconState%0AWriteOnlyBeaconState%0ACopy()%20BeaconState%0AHashTreeRoot(ctx%20context.Context)%20(%5B32%5Dbyte%2C%20error)%0AFutureForkStub%0AStateProver%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20ReadOnlyBeaconState%20interface%20%7B%0AReadOnlyBlockRoots%0AReadOnlyStateRoots%0AReadOnlyRandaoMixes%0AReadOnlyEth1Data%0AReadOnlyValidators%0AReadOnlyBalances%0AReadOnlyCheckpoint%0AReadOnlyAttestations%0AToProtoUnsafe()%20interface%7B%7D%0AToProto()%20interface%7B%7D%0AGenesisTime()%20uint64%0AGenesisValidatorsRoot()%20%5B%5Dbyte%0ASlot()%20types.Slot%0AFork()%20*ethpb.Fork%0ALatestBlockHeader()%20*ethpb.BeaconBlockHeader%0AHistoricalRoots()%20%5B%5D%5B%5Dbyte%0ASlashings()%20%5B%5Duint64%0AFieldReferencesCount()%20map%5Bstring%5Duint64%0AMarshalSSZ()%20(%5B%5Dbyte%2C%20error)%0AIsNil()%20bool%0AVersion()%20int%0ALatestExecutionPayloadHeader()%20(interfaces.ExecutionData%2C%20error)%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20ReadOnlyValidators%20interface%20%7B%0AValidators()%20%5B%5D*ethpb.Validator%0AValidatorAtIndex(idx%20types.ValidatorIndex)%20(*ethpb.Validator%2C%20error)%0AValidatorAtIndexReadOnly(idx%20types.ValidatorIndex)%20(ReadOnlyValidator%2C%20error)%0AValidatorIndexByPubkey(key%20%5Bfieldparams.BLSPubkeyLength%5Dbyte)%20(types.ValidatorIndex%2C%20bool)%0APubkeyAtIndex(idx%20types.ValidatorIndex)%20%5Bfieldparams.BLSPubkeyLength%5Dbyte%0ANumValidators()%20int%0AReadFromEveryValidator(f%20func(idx%20int%2C%20val%20ReadOnlyValidator)%20error)%20error%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20ReadOnlyRandaoMixes%20interface%20%7B%0ARandaoMixes()%20%5B%5D%5B%5Dbyte%0ARandaoMixAtIndex(idx%20uint64)%20(%5B%5Dbyte%2C%20error)%0ARandaoMixesLength()%20int%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20WriteOnlyBeaconState%20interface%20%7B%0AWriteOnlyBlockRoots%0AWriteOnlyStateRoots%0AWriteOnlyRandaoMixes%0AWriteOnlyEth1Data%0AWriteOnlyValidators%0AWriteOnlyBalances%0AWriteOnlyCheckpoint%0AWriteOnlyAttestations%0ASetGenesisTime(val%20uint64)%20error%0ASetGenesisValidatorsRoot(val%20%5B%5Dbyte)%20error%0ASetSlot(val%20types.Slot)%20error%0ASetFork(val%20*ethpb.Fork)%20error%0ASetLatestBlockHeader(val%20*ethpb.BeaconBlockHeader)%20error%0ASetHistoricalRoots(val%20%5B%5D%5B%5Dbyte)%20error%0ASetSlashings(val%20%5B%5Duint64)%20error%0AUpdateSlashingsAtIndex(idx%2C%20val%20uint64)%20error%0AAppendHistoricalRoots(root%20%5B32%5Dbyte)%20error%0ASetLatestExecutionPayloadHeader(payload%20interfaces.ExecutionData)%20error%0ASetWithdrawalQueue(val%20%5B%5D*enginev1.Withdrawal)%20error%0AAppendWithdrawal(val%20*enginev1.Withdrawal)%20error%0ASetNextWithdrawalIndex(i%20uint64)%20error%0ASetNextPartialWithdrawalValidatorIndex(i%20types.ValidatorIndex)%20error%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20WriteOnlyValidators%20interface%20%7B%0ASetValidators(val%20%5B%5D*ethpb.Validator)%20error%0AApplyToEveryValidator(f%20func(idx%20int%2C%20val%20*ethpb.Validator)%20(bool%2C%20*ethpb.Validator%2C%20error))%20error%0AUpdateValidatorAtIndex(idx%20types.ValidatorIndex%2C%20val%20*ethpb.Validator)%20error%0AAppendValidator(val%20%5C*ethpb.Validator)%20error%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20WriteOnlyRandaoMixes%20interface%20%7B%0ASetRandaoMixes(val%20%5B%5D%5B%5Dbyte)%20error%0AUpdateRandaoMixesAtIndex(idx%20uint64%2C%20val%20%5B%5Dbyte)%20error%0A%7D%0A%0A%60%60%60%0A%0A%5BValidator%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fproto%2Fprysm%2Fv1alpha1%23Validator)%20information%0A%0A%60%60%60%0A%0Atype%20Validator%20struct%20%7B%0APublicKey%20%5B%5Dbyte%20%60protobuf%3A%22bytes%2C1%2Copt%2Cname%3Dpublic_key%2Cjson%3DpublicKey%2Cproto3%22%20json%3A%22public_key%2Comitempty%22%20spec-name%3A%22pubkey%22%20ssz-size%3A%2248%22%60%0AWithdrawalCredentials%20%5B%5Dbyte%20%60%60%2F*%20138-byte%20string%20literal%20not%20displayed%20*%2F%0A%20EffectiveBalance%20%20%20%20%20%20%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%60protobuf%3A%22varint%2C3%2Copt%2Cname%3Deffective_balance%2Cjson%3DeffectiveBalance%2Cproto3%22%20json%3A%22effective_balance%2Comitempty%22%60%0A%20Slashed%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20bool%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%60protobuf%3A%22varint%2C4%2Copt%2Cname%3Dslashed%2Cproto3%22%20json%3A%22slashed%2Comitempty%22%60%0A%20ActivationEligibilityEpoch%20github_com_prysmaticlabs_prysm_v3_consensus_types_primitives.Epoch%60%60%20%2F_%20221-byte%20string%20literal%20not%20displayed%20_%2F%0AActivationEpoch%20github*com_prysmaticlabs_prysm_v3_consensus_types_primitives.Epoch%20%60%2F*%20186-byte%20string%20literal%20not%20displayed%20_%2F%0AExitEpoch%20github_com_prysmaticlabs_prysm_v3_consensus_types_primitives.Epoch%60%20%2F_%20168-byte%20string%20literal%20not%20displayed%20_%2F%0AWithdrawableEpoch%20github_com_prysmaticlabs_prysm_v3_consensus_types_primitives.Epoch%20%60%60%20%2F_%20192-byte%20string%20literal%20not%20displayed%20%5C_%2F%0A%2F%2F%20contains%20filtered%20or%20unexported%20fields%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20%5Bweb3signer_types%20from%20prysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fvalidator%2Fkeymanager%2Fremote-web3signer%2Fv1%2Fweb3signer_types.go%23L107)%0A%0A%60%60%60%0A%0A%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%0A%2F%2F%20sub%20properties%20of%20Sign%20Requests%20%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%0A%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%0A%0A%2F%2F%20ForkInfo%20a%20sub%20property%20object%20of%20the%20Sign%20request%0Atype%20ForkInfo%20struct%20%7B%0AFork%20%5C*Fork%20%60json%3A%22fork%22%60%0AGenesisValidatorsRoot%20hexutil.Bytes%20%60json%3A%22genesis_validators_root%22%60%0A%7D%0A%0A%2F%2F%20Fork%20a%20sub%20property%20of%20ForkInfo.%0Atype%20Fork%20struct%20%7B%0APreviousVersion%20hexutil.Bytes%20%60json%3A%22previous_version%22%60%0ACurrentVersion%20hexutil.Bytes%20%60json%3A%22current_version%22%60%0AEpoch%20string%20%60json%3A%22epoch%22%60%20%2F_uint64_%2F%0A%7D%0A%0A%2F%2F%20AggregationSlot%20a%20sub%20property%20of%20AggregationSlotSignRequest.%0Atype%20AggregationSlot%20struct%20%7B%0ASlot%20string%20%60json%3A%22slot%22%60%0A%7D%0A%0A%2F%2F%20AggregateAndProof%20a%20sub%20property%20of%20AggregateAndProofSignRequest.%0Atype%20AggregateAndProof%20struct%20%7B%0AAggregatorIndex%20string%20%60json%3A%22aggregator_index%22%60%20%2F_%20uint64%20_%2F%0AAggregate%20_Attestation%20%60json%3A%22aggregate%22%60%0ASelectionProof%20hexutil.Bytes%20%60json%3A%22selection_proof%22%60%20%2F_%2096%20bytes%20_%2F%0A%7D%0A%0A%2F%2F%20Attestation%20a%20sub%20property%20of%20AggregateAndProofSignRequest.%0Atype%20Attestation%20struct%20%7B%0AAggregationBits%20hexutil.Bytes%20%60json%3A%22aggregation_bits%22%60%20%2F_hex%20bitlist_%2F%0AData%20%5C*AttestationData%20%60json%3A%22data%22%60%0ASignature%20hexutil.Bytes%20%60json%3A%22signature%22%60%0A%7D%0A%0A%2F%2F%20AttestationData%20a%20sub%20property%20of%20Attestation.%0Atype%20AttestationData%20struct%20%7B%0ASlot%20string%20%60json%3A%22slot%22%60%20%2F_%20uint64%20_%2F%0AIndex%20string%20%60json%3A%22index%22%60%20%2F_%20uint64%20_%2F%20%2F%2F%20Prysm%20uses%20CommitteeIndex%20but%20web3signer%20uses%20index.%0ABeaconBlockRoot%20hexutil.Bytes%20%60json%3A%22beacon_block_root%22%60%0ASource%20*Checkpoint%20%60json%3A%22source%22%60%0ATarget%20*Checkpoint%20%60json%3A%22target%22%60%0A%7D%0A%0A%2F%2F%20Checkpoint%20a%20sub%20property%20of%20AttestationData.%0Atype%20Checkpoint%20struct%20%7B%0AEpoch%20string%20%60json%3A%22epoch%22%60%0ARoot%20string%20%60json%3A%22root%22%60%0A%7D%0A%0A%60%60%60%0A%0A%5Battestation.proto%20from%20prysm%20(Message%20Structure)%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Fprysm%2Fv1alpha1%2Fattestation.proto)%0A%0A%60%60%60%0A%0Amessage%20AttestationData%20%7B%0A%2F%2F%20Attestation%20data%20includes%20information%20on%20Casper%20the%20Friendly%20Finality%20Gadget's%20votes%0A%2F%2F%20See%3A%20https%3A%2F%2Farxiv.org%2Fpdf%2F1710.09437.pdf%0A%0A%20%20%20%20%2F%2F%20Slot%20of%20the%20attestation%20attesting%20for.%0A%20%20%20%20uint64%20slot%20%3D%201%20%5B(ethereum.eth.ext.cast_type)%20%3D%20%22github.com%2Fprysmaticlabs%2Fprysm%2Fv3%2Fconsensus-types%2Fprimitives.Slot%22%5D%3B%0A%0A%20%20%20%20%2F%2F%20The%20committee%20index%20that%20submitted%20this%20attestation.%0A%20%20%20%20uint64%20committee_index%20%3D%202%20%20%5B(ethereum.eth.ext.cast_type)%20%3D%20%22github.com%2Fprysmaticlabs%2Fprysm%2Fv3%2Fconsensus-types%2Fprimitives.CommitteeIndex%22%5D%3B%0A%0A%20%20%20%20%2F%2F%2032%20byte%20root%20of%20the%20LMD%20GHOST%20block%20vote.%0A%20%20%20%20bytes%20beacon_block_root%20%3D%203%20%5B(ethereum.eth.ext.ssz_size)%20%3D%20%2232%22%5D%3B%0A%0A%20%20%20%20%2F%2F%20The%20most%20recent%20justified%20checkpoint%20in%20the%20beacon%20state%0A%20%20%20%20Checkpoint%20source%20%3D%204%3B%0A%0A%20%20%20%20%2F%2F%20The%20checkpoint%20attempting%20to%20be%20justified%20for%20the%20current%20epoch%20and%20its%20epoch%20boundary%20block%0A%20%20%20%20Checkpoint%20target%20%3D%205%3B%0A%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%20Appendix%20F%3A%20Sample%20Data%0A%0A%23%23%23%23%20Epoch%20Data%20for%20167040%0A%0AFollowing%20is%20the%20Epoch%20Data%20for%20167040%0AIt%20can%20be%20retrieved%20from%20%5Bhere%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html%23%2FEpoch%2Fget_api_v1_epoch__epoch_)%20or%20by%20using%20this%20curl%20command%0A%0A%60curl%20-X%20'GET'%20%5C%0A%20%20'https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fepoch%2F167040'%20%5C%0A%20%20-H%20'accept%3A%20application%2Fjson'%60%0A%0AResponse%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%7B%0A%22attestationscount%22%3A%203457%2C%0A%22attesterslashingscount%22%3A%200%2C%0A%22averagevalidatorbalance%22%3A%2033899775551%2C%0A%22blockscount%22%3A%2032%2C%0A%22depositscount%22%3A%200%2C%0A%22eligibleether%22%3A%2015596542000000000%2C%0A%22epoch%22%3A%20167040%2C%0A%22finalized%22%3A%20true%2C%0A%22globalparticipationrate%22%3A%200.9963188171386719%2C%0A%22missedblocks%22%3A%200%2C%0A%22orphanedblocks%22%3A%200%2C%0A%22proposedblocks%22%3A%2032%2C%0A%22proposerslashingscount%22%3A%200%2C%0A%22scheduledblocks%22%3A%200%2C%0A%22totalvalidatorbalance%22%3A%2016522615004645864%2C%0A%22validatorscount%22%3A%20487396%2C%0A%22voluntaryexitscount%22%3A%200%2C%0A%22votedether%22%3A%2015539128000000000%0A%7D%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20Block%20Data%20for%20Slot%205%2C330%2C592%0A%0AFollowing%20is%20the%20Block%20Data%20for%20Slot%205%2C330%2C592%0AIt%20can%20be%20retrieved%20from%20%5Bhere%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html%23%2FBlock%2Fget_api_v1_block__slotOrHash_)%20or%20by%20using%20this%20curl%20command%0A%0A%60curl%20-X%20'GET'%20'https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fblock%2F5330592'%20-H%20'accept%3A%20application%2Fjson'%60%0A%0AResponse%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%7B%0A%22attestationscount%22%3A%20126%2C%0A%22attesterslashingscount%22%3A%200%2C%0A%22blockroot%22%3A%20%220xaebe891086c79ab79b325f474dc1150f1223e567337bff815cc318f14c64c233%22%2C%0A%22depositscount%22%3A%200%2C%0A%22epoch%22%3A%20166581%2C%0A%22eth1data_blockhash%22%3A%20%220xd346f84ffe7c600b7714d6411c8bea988d9d64dbdb432f26db58e72946337954%22%2C%0A%22eth1data_depositcount%22%3A%20498785%2C%0A%22eth1data_depositroot%22%3A%20%220x9a5603a34aa60f299384679bf4bfc267e99b68278a81f343bde8cb5650bf1d60%22%2C%0A%22exec_base_fee_per_gas%22%3A%2012376913565%2C%0A%22exec_block_hash%22%3A%20%220x26239efe09f51b24bdf7c518b1aa925a3b0b6453682408ec8a5c906d5038a6e7%22%2C%0A%22exec_block_number%22%3A%2016163905%2C%0A%22exec_extra_data%22%3A%20%220x496c6c756d696e61746520446d6f63726174697a6520447374726962757465%22%2C%0A%22exec_fee_recipient%22%3A%20%220xdafea492d9c6733ae3d56b7ed1adb60692c98bc5%22%2C%0A%22exec_gas_limit%22%3A%2030000000%2C%0A%22exec_gas_used%22%3A%209901267%2C%0A%22exec_logs_bloom%22%3A%20%220x8c21554815843b4084a999b2901917a52c58004a82a8440d94919a77f9241181388a0c404f000a8c0321ab024800bf899610e60ec801fb4b0352e34f147626192648619065381ded6b9d92bcd0861120adc1ec01064e7a016ea91c478d01b81316462d2d622a60010bc0139f6fb8ccf200499c0e211a85c042047d1601aa0c2ea2833902a2a3091528492dad09f6dc064529c455d328413b78c680c4699815ac9a91610f19e66542edca45a10518ee65b02cf02241a124232d5958b6004cd0a5846c5703d00b5e4d8353221015f7d38c1429074e34aaa11f3804f933082860c401152088251479918297a1a9237d9ac35539f6d069cca07a005819494a653913%22%2C%0A%22exec_parent_hash%22%3A%20%220x06746d5ff105e96a1b8961c2490c0261b474604fbcbf934e86295c0030e26ce2%22%2C%0A%22exec_random%22%3A%20%220xc2861c72cf4d34b37ec73519dbc20b690742b5cc119ed3738f1dd67d8ca52723%22%2C%0A%22exec_receipts_root%22%3A%20%220x33cdf5c6e03dd341f282d02d3c354c2361a6212692b2a3c06b520397045313f4%22%2C%0A%22exec_state_root%22%3A%20%220x517304bade8d83337c9a52f8ceeb13f924b64486b3b8033f7c348c176922104a%22%2C%0A%22exec_timestamp%22%3A%201670791127%2C%0A%22exec_transactions_count%22%3A%20139%2C%0A%22graffiti%22%3A%20%220x0000000000000000000000000000000000000000000000000000000000000000%22%2C%0A%22graffiti_text%22%3A%20%22%22%2C%0A%22parentroot%22%3A%20%220x0cab36616bbcbbc67c343ddce00241c27d0df2c367c5fa82fc7c0fdf0ed37405%22%2C%0A%22proposer%22%3A%204345%2C%0A%22proposerslashingscount%22%3A%200%2C%0A%22randaoreveal%22%3A%20%220x83950cb64781aff91f4bd14aa6abb0f5fdb7e08e4e81c264f0754c93d7672c4a9615de196491fdb53eafdeb8f49e9cf515f1bd3dc05bb5dc0e2dd8bff5a8d783b503e3385e80b61485f0ddac1caa9361132a863db84e7e234df5815e6908e4e7%22%2C%0A%22signature%22%3A%20%220x84865a9480ae6313b0e5fcadfa294b35f5963e06c66ad1c7613dc081e9700c07f82a2583ba4b62b2483b4a1b9d49aafe0690f22fcf4d0072f9f44a5ce3067ef4fda560d171001cc6bf5dc84e09d9055d92894b86b27695c297f25530cd8db7a0%22%2C%0A%22slot%22%3A%205330592%2C%0A%22stateroot%22%3A%20%220x9e7e40d844c3b229cd9497d662a6d94276d285945073849995aba93c7e73cfe7%22%2C%0A%22status%22%3A%20%221%22%2C%0A%22syncaggregate_bits%22%3A%20%220xdffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffdfffffffffffffffdffffffffffffffffffffffff%22%2C%0A%22syncaggregate_participation%22%3A%200.9921875%2C%0A%22syncaggregate_signature%22%3A%20%220x95332c55790018eed3d17eada01cb4045348d09137505bc8697eeedaa3800a830ee2c138251850a9577f62a5488419ef0a722579156a177fb3a147017f1077af5d778f46a4cdf815fc450129d135fe5286e16df68333592e4aa45821bde780dd%22%2C%0A%22voluntaryexitscount%22%3A%200%2C%0A%22votes%22%3A%2019227%0A%7D%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20Execution%20Block%20for%2016163905%0A%0AFollowing%20is%20the%20execution%20block%20data%20for%2016163905%0AIt%20can%20be%20retrieved%20from%20%5Bhere%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html%23%2FExecution%2Fget_api_v1_execution_block__blockNumber_)%20or%20by%20using%20this%20curl%20command%0A%0A%60curl%20-X%20'GET'%20'https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fexecution%2Fblock%2F16163905'%20%20-H%20'accept%3A%20application%2Fjson'%60%0A%0AResult%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%5B%0A%7B%0A%22blockHash%22%3A%20%220x26239efe09f51b24bdf7c518b1aa925a3b0b6453682408ec8a5c906d5038a6e7%22%2C%0A%22blockNumber%22%3A%2016163905%2C%0A%22timestamp%22%3A%201670791127%2C%0A%22blockReward%22%3A%2037343826945103810%2C%0A%22blockMevReward%22%3A%2037083911760238810%2C%0A%22producerReward%22%3A%2037083911760238810%2C%0A%22feeRecipient%22%3A%20%220xdafea492d9c6733ae3d56b7ed1adb60692c98bc5%22%2C%0A%22gasLimit%22%3A%2030000000%2C%0A%22gasUsed%22%3A%209901267%2C%0A%22baseFee%22%3A%2012376913565%2C%0A%22txCount%22%3A%20139%2C%0A%22internalTxCount%22%3A%2054%2C%0A%22uncleCount%22%3A%200%2C%0A%22parentHash%22%3A%20%220x06746d5ff105e96a1b8961c2490c0261b474604fbcbf934e86295c0030e26ce2%22%2C%0A%22uncleHash%22%3A%20%220x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347%22%2C%0A%22difficulty%22%3A%200%2C%0A%22posConsensus%22%3A%20%7B%0A%22executionBlockNumber%22%3A%2016163905%2C%0A%22proposerIndex%22%3A%204345%2C%0A%22slot%22%3A%205330592%2C%0A%22epoch%22%3A%20166581%2C%0A%22finalized%22%3A%20true%0A%7D%2C%0A%22relay%22%3A%20%7B%0A%22tag%22%3A%20%22flashbots-relay%22%2C%0A%22builderPubkey%22%3A%20%220x81beef03aafd3dd33ffd7deb337407142c80fea2690e5b3190cfc01bde5753f28982a7857c96172a75a234cb7bcb994f%22%2C%0A%22producerFeeRecipient%22%3A%20%220x60987e0d8b5e0095869ca6f0e642828e3f258bb5%22%0A%7D%2C%0A%22consensusAlgorithm%22%3A%20%22pos%22%0A%7D%0A%5D%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20Sync%20Committee%20(latest)%0A%0AFollowing%20is%20a%20sample%20Sync%20Committee%0AIt%20can%20be%20retrieved%20from%20%5Bhere%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html%23%2FSyncCommittee%2Fget_api_v1_sync_committee__period_)%20or%20by%20using%20this%20curl%20command%0A%0A%60curl%20-X%20'GET'%20'https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fsync_committee%2Flatest'%20-H%20'accept%3A%20application%2Fjson'%60%0A%0AAbbrieviated%20Result%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%7B%0A%22end_epoch%22%3A%20167167%2C%0A%22period%22%3A%20652%2C%0A%22start_epoch%22%3A%20166912%2C%0A%22validators%22%3A%20%5B%0A328781%2C%0A184949%2C%0A...%0A%5D%0A%7D%0A%7D%0A%0A%60%60%60%0A%0A%3Cdetails%3E%0A%3Csummary%3EFull%20Result%3C%2Fsummary%3E%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%7B%0A%22end_epoch%22%3A%20167167%2C%0A%22period%22%3A%20652%2C%0A%22start_epoch%22%3A%20166912%2C%0A%22validators%22%3A%20%5B%0A328781%2C%0A184949%2C%0A269719%2C%0A484753%2C%0A447707%2C%0A190522%2C%0A222987%2C%0A429436%2C%0A23553%2C%0A353182%2C%0A394935%2C%0A347121%2C%0A3941%2C%0A77287%2C%0A390407%2C%0A41282%2C%0A440380%2C%0A477794%2C%0A13208%2C%0A321552%2C%0A338223%2C%0A414921%2C%0A77542%2C%0A57797%2C%0A471002%2C%0A238719%2C%0A87491%2C%0A85099%2C%0A16484%2C%0A220174%2C%0A256680%2C%0A194973%2C%0A77409%2C%0A150279%2C%0A322042%2C%0A275140%2C%0A393620%2C%0A21206%2C%0A59424%2C%0A308071%2C%0A20736%2C%0A173428%2C%0A365316%2C%0A293687%2C%0A136783%2C%0A459882%2C%0A9048%2C%0A128613%2C%0A132177%2C%0A267018%2C%0A290896%2C%0A236936%2C%0A406218%2C%0A380040%2C%0A481667%2C%0A34410%2C%0A413701%2C%0A158755%2C%0A222721%2C%0A295335%2C%0A106306%2C%0A426104%2C%0A229412%2C%0A377442%2C%0A300381%2C%0A251157%2C%0A2301%2C%0A255801%2C%0A160943%2C%0A417370%2C%0A290905%2C%0A435535%2C%0A164094%2C%0A204304%2C%0A258455%2C%0A366943%2C%0A119808%2C%0A311117%2C%0A79552%2C%0A164660%2C%0A446993%2C%0A347592%2C%0A256827%2C%0A244517%2C%0A277343%2C%0A303208%2C%0A425967%2C%0A216346%2C%0A13359%2C%0A481813%2C%0A142254%2C%0A105339%2C%0A465226%2C%0A200109%2C%0A198691%2C%0A43343%2C%0A32947%2C%0A392889%2C%0A304855%2C%0A452188%2C%0A148690%2C%0A441869%2C%0A15210%2C%0A216221%2C%0A33338%2C%0A124091%2C%0A299153%2C%0A305746%2C%0A230810%2C%0A484937%2C%0A464816%2C%0A474017%2C%0A307185%2C%0A370171%2C%0A430926%2C%0A21371%2C%0A7607%2C%0A209940%2C%0A439052%2C%0A398079%2C%0A238559%2C%0A108372%2C%0A127122%2C%0A62084%2C%0A5906%2C%0A278678%2C%0A404838%2C%0A253340%2C%0A146867%2C%0A437165%2C%0A470827%2C%0A252487%2C%0A430474%2C%0A433777%2C%0A282060%2C%0A221522%2C%0A273826%2C%0A56274%2C%0A359184%2C%0A401626%2C%0A43613%2C%0A287311%2C%0A465536%2C%0A301609%2C%0A21832%2C%0A192551%2C%0A412598%2C%0A186526%2C%0A447005%2C%0A112768%2C%0A404399%2C%0A289582%2C%0A290124%2C%0A191275%2C%0A213003%2C%0A39276%2C%0A200971%2C%0A315798%2C%0A135302%2C%0A121320%2C%0A227480%2C%0A156978%2C%0A98919%2C%0A201671%2C%0A195988%2C%0A186622%2C%0A475967%2C%0A314720%2C%0A58582%2C%0A404742%2C%0A215008%2C%0A306959%2C%0A267381%2C%0A126574%2C%0A73725%2C%0A156317%2C%0A83010%2C%0A375189%2C%0A167000%2C%0A459137%2C%0A294856%2C%0A144931%2C%0A234176%2C%0A371047%2C%0A446790%2C%0A219650%2C%0A26577%2C%0A64091%2C%0A482916%2C%0A203241%2C%0A306809%2C%0A178005%2C%0A380280%2C%0A452614%2C%0A266272%2C%0A264801%2C%0A428464%2C%0A342535%2C%0A310436%2C%0A297012%2C%0A173959%2C%0A384721%2C%0A311372%2C%0A375367%2C%0A304633%2C%0A247177%2C%0A373217%2C%0A43689%2C%0A363227%2C%0A447608%2C%0A203474%2C%0A186229%2C%0A63975%2C%0A189189%2C%0A391682%2C%0A197510%2C%0A423160%2C%0A168160%2C%0A336488%2C%0A11240%2C%0A86706%2C%0A316746%2C%0A272065%2C%0A50516%2C%0A411785%2C%0A25826%2C%0A212663%2C%0A233378%2C%0A186547%2C%0A268142%2C%0A387972%2C%0A275194%2C%0A134600%2C%0A337298%2C%0A51510%2C%0A206067%2C%0A111837%2C%0A461165%2C%0A137209%2C%0A317427%2C%0A153989%2C%0A464678%2C%0A975%2C%0A384374%2C%0A433258%2C%0A62611%2C%0A413087%2C%0A424810%2C%0A449054%2C%0A190150%2C%0A310602%2C%0A336220%2C%0A71740%2C%0A230657%2C%0A453370%2C%0A468144%2C%0A322259%2C%0A283775%2C%0A1606%2C%0A139348%2C%0A352593%2C%0A356482%2C%0A156500%2C%0A157489%2C%0A454159%2C%0A337203%2C%0A63370%2C%0A369541%2C%0A170461%2C%0A99771%2C%0A398154%2C%0A126177%2C%0A281482%2C%0A24217%2C%0A234556%2C%0A251792%2C%0A201614%2C%0A249765%2C%0A130900%2C%0A409074%2C%0A46296%2C%0A172953%2C%0A194464%2C%0A229313%2C%0A120835%2C%0A141417%2C%0A187795%2C%0A169516%2C%0A352531%2C%0A402467%2C%0A433379%2C%0A73331%2C%0A345245%2C%0A167093%2C%0A176171%2C%0A198482%2C%0A486643%2C%0A456439%2C%0A449333%2C%0A221367%2C%0A481580%2C%0A200704%2C%0A197099%2C%0A314035%2C%0A336100%2C%0A146714%2C%0A415630%2C%0A47127%2C%0A287953%2C%0A153548%2C%0A438248%2C%0A2664%2C%0A325723%2C%0A467719%2C%0A408858%2C%0A82963%2C%0A180891%2C%0A192679%2C%0A86617%2C%0A100068%2C%0A2394%2C%0A11764%2C%0A48047%2C%0A127406%2C%0A149052%2C%0A283994%2C%0A342457%2C%0A463547%2C%0A320210%2C%0A293252%2C%0A6540%2C%0A464926%2C%0A265551%2C%0A109109%2C%0A164735%2C%0A381110%2C%0A29080%2C%0A246178%2C%0A355576%2C%0A448267%2C%0A430466%2C%0A444401%2C%0A126905%2C%0A414347%2C%0A451523%2C%0A331926%2C%0A366508%2C%0A480803%2C%0A387850%2C%0A413867%2C%0A17772%2C%0A268744%2C%0A427797%2C%0A163955%2C%0A333814%2C%0A93663%2C%0A338046%2C%0A236013%2C%0A180066%2C%0A68685%2C%0A466537%2C%0A3904%2C%0A277412%2C%0A449845%2C%0A16633%2C%0A62120%2C%0A108501%2C%0A486885%2C%0A60466%2C%0A380719%2C%0A269930%2C%0A365432%2C%0A377380%2C%0A260009%2C%0A300616%2C%0A203897%2C%0A289145%2C%0A249814%2C%0A26558%2C%0A343110%2C%0A48226%2C%0A365643%2C%0A401664%2C%0A7355%2C%0A350107%2C%0A100836%2C%0A99073%2C%0A294093%2C%0A7587%2C%0A169932%2C%0A166154%2C%0A396054%2C%0A108167%2C%0A229069%2C%0A307648%2C%0A148531%2C%0A233563%2C%0A40093%2C%0A44708%2C%0A353913%2C%0A456080%2C%0A176129%2C%0A156427%2C%0A412072%2C%0A154317%2C%0A271015%2C%0A126289%2C%0A345876%2C%0A156388%2C%0A195860%2C%0A25422%2C%0A482057%2C%0A362295%2C%0A466187%2C%0A115725%2C%0A387438%2C%0A170886%2C%0A224753%2C%0A126768%2C%0A421612%2C%0A96187%2C%0A9314%2C%0A194598%2C%0A297360%2C%0A121794%2C%0A422582%2C%0A428474%2C%0A281996%2C%0A211966%2C%0A303980%2C%0A232330%2C%0A314475%2C%0A485%2C%0A146262%2C%0A8780%2C%0A459648%2C%0A88780%2C%0A371355%2C%0A283376%2C%0A480636%2C%0A67695%2C%0A153169%2C%0A205011%2C%0A52231%2C%0A103646%2C%0A432471%2C%0A433747%2C%0A16092%2C%0A78487%2C%0A165644%2C%0A412660%2C%0A451750%2C%0A8088%2C%0A185452%2C%0A192135%2C%0A355751%2C%0A59734%2C%0A341708%2C%0A347491%2C%0A466763%2C%0A446951%2C%0A670%2C%0A392454%2C%0A39840%2C%0A469691%2C%0A329363%2C%0A61899%2C%0A384770%2C%0A317497%2C%0A282776%2C%0A211703%2C%0A427937%2C%0A284122%2C%0A238949%2C%0A417486%2C%0A341081%2C%0A241572%2C%0A67225%2C%0A294159%2C%0A302865%2C%0A227806%2C%0A123006%2C%0A329514%2C%0A449279%2C%0A31448%2C%0A450144%2C%0A485006%2C%0A199737%2C%0A253646%2C%0A117814%2C%0A408604%2C%0A141399%2C%0A121937%2C%0A237632%2C%0A315197%2C%0A10397%2C%0A318494%2C%0A221051%2C%0A444960%2C%0A417643%2C%0A90991%2C%0A153828%2C%0A291638%2C%0A96654%2C%0A280019%2C%0A218632%2C%0A74162%2C%0A119769%2C%0A20024%2C%0A420771%2C%0A219118%2C%0A96325%0A%5D%0A%7D%0A%7D%0A%0A%60%60%60%0A%0A%3C%2Fdetails%3E%0A%0A%23%23%23%20Appendix%20G%3A%20Storing%20minimal%20information%0A%0A%23%23%23%23%20Minimal%20footprint%0A%0A%23%23%23%23%20Header%20Checkpoints%0A%0A%23%23%23%23%23%20Inclusion%20Proof%0A%0A%23%23%23%23%23%20ZKP%20for%20Checkpoints%0A%0A%23%23%23%23%20Proving%0A%0A%23%23%23%23%20Verification%0A%0A%23%23%23%20Appendix%20H%3A%20Validating%20Header%0A%0A%23%23%23%23%20Tracking%20Validators%0A%0A%23%23%23%23%23%20ZKP%20for%20validator%20change%0A%0A%23%23%23%23%20Verifying%20Signatures%0A%0A%23%23%23%23%23%20ECDSA%0A%0A%23%23%23%23%23%20RSA%0A%0A%23%23%23%23%23%20EdDSA%0A%0A%23%23%23%23%20Pure%20on-chain%20implementation%20and%20costs%0A%0A%23%23%23%23%23%23%20ZKP%20for%20EdDSA%0A%0A%23%23%23%23%23%20BLS12-381%20and%20variants%0A%0A%23%23%23%23%23%23%20Pure%20on-chain%20implementation%20and%20costs%0A%0A%23%23%23%23%23%23%20ZKP%20for%20BLS12-381%0A%0A%23%23%23%20Appendix%20I%3A%20Cost%20analysis%20and%20benchmark%0A%0A%23%23%23%20Appendix%20J%3A%20Sync%20Committe%20Creation%20and%20Retrieval%0A%0A**Sync%20Committee%20Configuration**%0A%0A%60EPOCHS_PER_SYNC_COMMITTEE_PERIOD%60%20is%20set%20in%20%5Bconfig.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconfig%2Fparams%2Fconfig.go%23L185)%20currently%20255%20epochs%20per%20synch%20comittee%20(approx%2027%20hrs)%20for%20Ethreum%20Mainnet.%0A%0A**Sync%20Committee%20Update%20Process**%0A%0A-%20%5Bbeacon-chain%2Fblockchain%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fblockchain)%0A%20%20-%20%5Bprocess_block.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fblockchain%2Fprocess_block.go)%3A%20has%20function%20%60onBlock%60%20which%20is%20called%20when%20a%20gossip%20block%20is%20received.%20It%20also%20has%20function%20%60handleEpochBoundary%60%20which%20calls%20%60ProcessSlots%60%20in%20%5Bbeacon-chain%2Fcore%2Ftransition%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Ftransition)%20and%20calls%20function%20%60UpdateCommitteeCache%60%20in%20%5Bbeacon-chain%2Fcore%2Fhelpers%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Fhelpers)%0A-%20%5Bbeacon-chain%2Fcore%2Ftransition%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Ftransition)%0A%20%20-%20%5Btransition.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Ftransition%2Ftransition.go)%3A%20implements%20the%20whole%20state%20transition%20function%20which%20consists%20of%20per%20slot%2C%20per-epoch%20transitions.%20function%20%60ProcessSlots%60%20calls%20%60ProcessEpoch%60%20in%20%5Bbeacon-chain%2Fcore%2Faltair%2Ftransition.go%5D(%3C(%253Chttps%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Ftransition.go)%253E%3E)%0A-%20%5Bbeacon-chain%2Fcore%2Faltair%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair)%0A%20%20-%20%5Btransition.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Ftransition.go)%3A%20includes%20function%20%60ProcessEpoch%60%20which%20calls%20%60ProcessSyncCommitteeUpdates%60%20in%20%5Bepoch_spec.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Fepoch_spec.go)%0A%20%20-%20%5Bepoch_spec.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Fepoch_spec.go)%3A%20includes%20function%20%60ProcessSyncCommitteeUpdates%60%20which%20calls%20%60NextSyncCommittee%60%20it%20also%20persists%20beacon%20state%20syncCommittee%20by%20calling%20%60beaconState.SetNextSyncCommittee(nextSyncCommittee)%60%20in%20%5Bsetters_sync_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fstate%2Fstate-native%2Fsetters_sync_committee.go)%0A%20%20-%20%5Bsync_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Fsync_committee.go)%3A%20includes%20function%20%60NextSyncCommittee%60%20which%20calls%20%60NextSyncCommittee%60%20to%20return%20the%20sync%20committee%20indices%2C%20with%20possible%20duplicates%2C%20for%20the%20next%20sync%20committee.%0A%20%20-%20%5Bblock.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Fblock.go)%3A%20includes%20function%20%60VerifySyncCommitteeSig%60%0A-%20%5Bbeacon-chain%2Fcore%2Fhelpers%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Fhelpers)%0A%20%20-%20%5Bbeacon_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Fhelpers%2Fbeacon_committee.go)%20has%20function%20%60UpdateCommitteeCache%60%20which%20gets%20called%20at%20the%20beginning%20of%20every%20epoch%20to%20cache%20the%20committee%20shuffled%20indices%20list%20with%20committee%20index%20and%20epoch%20number.%20It%20caches%20the%20shuffled%20indices%20for%20current%20epoch%20and%20next%20epoch.%20it%20calls%20%60UpdatePositionsInCommittee%60%20in%20%5Bsync_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcache%2Fsync_committee.go)%0A-%20%5Bbeacon-chain%2Fcache%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcache)%0A%20%20-%20%5Bsync_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcache%2Fsync_committee.go)%3A%20has%20function%20%60UpdatePositionsInCommittee%60%20which%20updates%20caching%20of%20validators%20position%20in%20sync%20committee%20in%20respect%20to%20current%20epoch%20and%20next%20epoch.%20This%20should%20be%20called%20when%20%60current_sync_committee%60%20and%20%60next_sync_committee%60%20change%20and%20that%20happens%20every%20%60EPOCHS_PER_SYNC_COMMITTEE_PERIOD%60.%0A%0A**Sync%20Committee%20Retrieval**%0AgRPC%20and%20API%20methods%0A%0A-%20%5Bbeacon-chain%2Frpc%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Frpc)%0A%20%20-%20%5Bprysm%2Fv1alpha1%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1)%0A%20%20%20%20-%20%5Bvalidator%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1%2Fvalidator)%0A%20%20%20%20%20%20-%20%5Bassignments.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1%2Fvalidator%2Fassignments.go)%3A%20has%20functions%20%60GetDuties%60%20and%20%60StreamDuties%60%20which%20calls%20function%20%60duties%60%20to%20compute%20the%20validator%20duties%20from%20the%20head%20state's%20corresponding%20epoch%20for%20validators%20public%20key%20%2F%20indices%20requested.%0A%0Awhich%20%5Bmanages%20sync%20committee%20duties%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1%2Fvalidator%2Fassignments.go%23L213)%20every%20%60EPOCHS_PER_SYNC_COMMITTEE_PERIOD%20-%201%60%20which%20is%20set%20in%20%5Bconfig.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconfig%2Fparams%2Fconfig.go%23L185)%20currently%20255%20epochs%20per%20synch%20comittee%20(approx%2027%20hrs)%20for%20Ethreum%20Mainnet.%0A%0A%5BregisterSyncSubnetNextPeriod%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1%2Fvalidator%2Fassignments.go%23L281)%0A%0A%60%60%60%0A%0Afunc%20registerSyncSubnetNextPeriod(s%20beaconState.BeaconState%2C%20epoch%20types.Epoch%2C%20pubKey%20%5B%5Dbyte%2C%20status%20ethpb.ValidatorStatus)%20error%20%7B%0Acommittee%2C%20err%20%3A%3D%20s.NextSyncCommittee()%0Aif%20err%20!%3D%20nil%20%7B%0Areturn%20err%0A%7D%0AsyncCommPeriod%20%3A%3D%20slots.SyncCommitteePeriod(epoch)%0AregisterSyncSubnet(epoch%2C%20syncCommPeriod%2B1%2C%20pubKey%2C%20committee%2C%20status)%0Areturn%20nil%0A%7D%0A%0A%60%60%60%0A%0A**Sync%20Committee%20Storage**%0A%0APersistence%20Mechanism%0A%0A-%20%5Bproto%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fproto)%0A%20%20-%20%5Beth%2Fv2%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fproto%2Feth%2Fv2)%0A%20%20%20%20-%20%5Bvalidator.proto%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Feth%2Fv2%2Fvalidator.proto)%3A%20messages%20for%20validators%20including%20%60SyncCommitteeDuty%60%0A%20%20%20%20-%20%5Bsync_committee.proto%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Feth%2Fv2%2Fsync_committee.proto)%3A%20messages%20for%20SyncCommittee%20which%20serves%20as%20committees%20to%20facilitate%20light%20client%20syncing%20to%20beacon%20chain.%0A%0A%5Bbeacon_state_mainnet.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fstate%2Fstate-native%2Fbeacon_state_mainnet.go)%0A%0A%60%60%60%0A%0A%2F%2F%20BeaconState%20defines%20a%20struct%20containing%20utilities%20for%20the%20Ethereum%20Beacon%20Chain%20state%2C%20defining%0A%2F%2F%20getters%20and%20setters%20for%20its%20respective%20values%20and%20helpful%20functions%20such%20as%20HashTreeRoot().%0Atype%20BeaconState%20struct%20%7B%0Aversion%20int%0AgenesisTime%20uint64%0AgenesisValidatorsRoot%20%5B32%5Dbyte%0Aslot%20eth2types.Slot%0Afork%20*ethpb.Fork%0AlatestBlockHeader%20*ethpb.BeaconBlockHeader%0AblockRoots%20*customtypes.BlockRoots%0AstateRoots%20*customtypes.StateRoots%0AhistoricalRoots%20customtypes.HistoricalRoots%0Aeth1Data%20*ethpb.Eth1Data%0Aeth1DataVotes%20%5B%5D*ethpb.Eth1Data%0Aeth1DepositIndex%20uint64%0Avalidators%20%5B%5D*ethpb.Validator%0Abalances%20%5B%5Duint64%0ArandaoMixes%20*customtypes.RandaoMixes%0Aslashings%20%5B%5Duint64%0ApreviousEpochAttestations%20%5B%5D*ethpb.PendingAttestation%0AcurrentEpochAttestations%20%5B%5D*ethpb.PendingAttestation%0ApreviousEpochParticipation%20%5B%5Dbyte%0AcurrentEpochParticipation%20%5B%5Dbyte%0AjustificationBits%20bitfield.Bitvector4%0ApreviousJustifiedCheckpoint%20*ethpb.Checkpoint%0AcurrentJustifiedCheckpoint%20*ethpb.Checkpoint%0AfinalizedCheckpoint%20*ethpb.Checkpoint%0AinactivityScores%20%5B%5Duint64%0AcurrentSyncCommittee%20*ethpb.SyncCommittee%0AnextSyncCommittee%20*ethpb.SyncCommittee%0AlatestExecutionPayloadHeader%20*enginev1.ExecutionPayloadHeader%0AlatestExecutionPayloadHeaderCapella%20%5C*enginev1.ExecutionPayloadHeaderCapella%0AnextWithdrawalIndex%20uint64%0AnextWithdrawalValidatorIndex%20eth2types.ValidatorIndex%0A%0Alock%20sync.RWMutex%0AdirtyFields%20map%5Bnativetypes.FieldIndex%5Dbool%0AdirtyIndices%20map%5Bnativetypes.FieldIndex%5D%5B%5Duint64%0AstateFieldLeaves%20map%5Bnativetypes.FieldIndex%5D*fieldtrie.FieldTrie%0ArebuildTrie%20map%5Bnativetypes.FieldIndex%5Dbool%0AvalMapHandler%20*stateutil.ValidatorMapHandler%0AmerkleLayers%20%5B%5D%5B%5D%5B%5Dbyte%0AsharedFieldReferences%20map%5Bnativetypes.FieldIndex%5D%5C*stateutil.Reference%0A%7D%0A%0A%60%60%60%0A%0A%5Bbeacon_state.pb.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Fprysm%2Fv1alpha1%2Fbeacon_state.pb.go%23L962)%0A%0A%60%60%60%0A%0Atype%20SyncCommittee%20struct%20%7B%0Astate%20protoimpl.MessageState%0AsizeCache%20protoimpl.SizeCache%0AunknownFields%20protoimpl.UnknownFields%0A%0APubkeys%20%5B%5D%5B%5Dbyte%20%60protobuf%3A%22bytes%2C1%2Crep%2Cname%3Dpubkeys%2Cproto3%22%20json%3A%22pubkeys%2Comitempty%22%20ssz-size%3A%22512%2C48%22%60%0AAggregatePubkey%20%5B%5Dbyte%20%60protobuf%3A%22bytes%2C2%2Copt%2Cname%3Daggregate_pubkey%2Cjson%3DaggregatePubkey%2Cproto3%22%20json%3A%22aggregate_pubkey%2Comitempty%22%20ssz-size%3A%2248%22%60%0A%7D%0A%0A%60%60%60%0A%0A%5BInterfaces%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fstate%2Finterfaces.go)%0A%0A%60%60%60%0A%0A%2F%2F%20BeaconState%20has%20read%20and%20write%20access%20to%20beacon%20state%20methods.%0Atype%20BeaconState%20interface%20%7B%0ASpecParametersProvider%0AReadOnlyBeaconState%0AReadOnlyWithdrawals%0AWriteOnlyBeaconState%0ACopy()%20BeaconState%0AHashTreeRoot(ctx%20context.Context)%20(%5B32%5Dbyte%2C%20error)%0AFutureForkStub%0AStateProver%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0A%2F%2F%20StateProver%20defines%20the%20ability%20to%20create%20Merkle%20proofs%20for%20beacon%20state%20fields.%0Atype%20StateProver%20interface%20%7B%0AFinalizedRootProof(ctx%20context.Context)%20(%5B%5D%5B%5Dbyte%2C%20error)%0ACurrentSyncCommitteeProof(ctx%20context.Context)%20(%5B%5D%5B%5Dbyte%2C%20error)%0ANextSyncCommitteeProof(ctx%20context.Context)%20(%5B%5D%5B%5Dbyte%2C%20error)%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0A%60%60%60%0A%0A%60%60%60%0A%0A%60%60%60%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./ethereum-DXwpBSxV.js"),[]),path:"/research/code/ethereum.html",type:"mdx",filePath:"research/code/ethereum.mdx",content:"%23%20Ethereum%20Code%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AWith%20the%20Introduction%20of%20Ethereum%202.0%3Csup%3E%5B1%5D(%23bp1)%3C%2Fsup%3E%20%3Csup%3E%5B2%5D(%23bp2)%3C%2Fsup%3E%20%3Csup%3E%5B3%5D(%23bp3)%3C%2Fsup%3E%20block%20production%20and%20consensus%20were%20separated%3Csup%3E%5B4%5D(%23bp4)%3C%2Fsup%3E%20into%20execution%20clients%3Csup%3E%5B5%5D(%23bp5)%3C%2Fsup%3E%20and%20consensus%20clients%3Csup%3E%5B6%5D(%23ts6)%3C%2Fsup%3E%20%3Csup%3E%5B7%5D(%23bp7)%3C%2Fsup%3E.%0A%0AThe%20execution%20chain%20implemented%20a%20simplified%20Proof%20of%20Work%3Csup%3E%5B1%5D(%23bp1)%3C%2Fsup%3E%20reducing%20difficutly%20to%20zero%20and%20removing%20the%20need%20for%20omners%20(uncles)%20which%20would%20now%20be%20handled%20by%20the%20beacon%20chain%3Csup%3E%5B3%5D(%23bp3)%3C%2Fsup%3E%20which%20is%20responsible%20for%20providing%20consensus%20%3Csup%3E%5B2%5D(%23bp2)%3C%2Fsup%3E.%0A%0ALight%20Clients%3Csup%3E%5B11%5D(%23ts11)%3C%2Fsup%3E%20were%20also%20introduced.%20To%20facilate%20this%0Aa%20sync%20committee%20of%20512%20current%20validators%20is%20elected%20every%20255%20epochs%2C%20approximately%20every%2027%20hours%20(see%20%5Bsample%20sync%20comittee%20data%5D(%23sync-committee-latest))%2C%20they%20are%20responsible%20for%20signing%20each%20block.%0A%0AAs%20at%20December%2011th%2C%202022%20Ethereum%20has%20487%2C920%20validators%3Csup%3E%5B8%5D(%23bp8)%3C%2Fsup%3E%20with%20a%20sample%20epoch%20(%5B166581%5D(https%3A%2F%2Fbeaconcha.in%2Fepoch%2F166581))%20and%20slot%20(%5B5%2C330%2C592%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5330592))%20having%20%5B139%20transactions%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5330592%23transactions)%20with%20%5B19%2C227%20votes%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5330592%23votes)%20from%2063%20committees%20and%20%5B126%20aggregated%20committe%20attestations%5D(https%3A%2F%2Fbeaconcha.in%2Fslot%2F5330592%23attestations).%0A%0A%23%23%20Abstract%0A%0AThis%20research%20follows%20on%20from%20What%20to%20build%20next%20in%20Zero%20Knowledge%3Csup%3E%5B1%5D(%23ov1)%3C%2Fsup%3E%2C%20Crosschain%20Future%3Csup%3E%5B2%5D(%23ov2)%3C%2Fsup%3E%20and%20Technical%20Problems%20Overview%3Csup%3E%5B3%5D(%23ov3)%3C%2Fsup%3E.%0A%0AHere%20we%20propose%20an%20approach%20for%20building%20a%20trustless%20bridging%20infrastructure%20between%20Ethereum%20and%20Multiple%20Chains%2C%20complete%20with%20costing%20information%20for%20storage%2C%20proof%20generation%20and%20verification%20across%20multiple%20chains.%0A%0AWe%20review%20technical%20approaches%20for%20Trustless%20Bridge%20Design%20using%20Zero%20Knowledge%20Proofs%20including%20storage%20and%20validation%20of%20block%20headers%2C%20verification%20of%20ethereum%20events%20on%20other%20chains%20and%20asset%20bridging%20functionality.%0A%0AFor%20completenes%20we%20include%20a%20technical%20review%20of%20Ethereum%202.0%20block%20production%2C%20consensus%2C%20signature%20schemes%20and%20light%20client%20functionality.%0A%0A%23%23%20Trustless%20Bridge%20Design%0A%0A%23%23%23%20High%20level%20Approach%0A%0A1.%20Define%20logic%20flow%20for%20bridging%20data%20(ERC20%20initially)%20between%20Etheruem%20and%20a%20target%20chain.%0A2.%20Identify%20Key%20Data%20Points%20which%20Need%20to%20be%20Synched%20and%20Frequency%0A%20%20%201.%20Active%20Validators%20(Sync%20Committee%3Csup%3E%5B10%5D(%23ts10)%3C%2Fsup%3E)%20%3A%20every%20255%20epochs%2C%20approximately%2027%20hours.%0A%20%20%202.%20Epoch%20Committee%20Verification%3A%20every%20epoch%20(32%20slots)%2C%20approx%206.4%20minutes.%0A%20%20%203.%20Block%20Headers%3A%20every%20epoch%20(32%20slots)%2C%20approx%206.4%20minutes.%0A%20%20%204.%20Bridge%20Transactions%3A%20as%20Needed.%0A3.%20Identify%20Proving%20Mechanisms%20for%20Data%20Points%0A%20%20%201.%20Sync%20Committee%3A%20SSZ%20Proof%0A%20%20%202.%20Epoch%20Comittees%0A%20%20%203.%20Block%20Headers%3A%20Aggregated%20BLS%20Signature%20Verification%20Proof%2C%20Patricia%20Merkle%0A%20%20%204.%20Bridge%20Transactions%3A%20Transaction%20Proofs%0A4.%20Use%20Zero%20Knowledge%20Proofs%20where%20possible%20to%20reduce%20storage%20and%20compute%20costing%0A%20%20%201.%20Sync%20Committee%3A%20SSZ%20Proof%0A%20%20%202.%20Epoch%20Comittees%3A%0A%20%20%203.%20Block%20Headers%3A%20Aggregated%20BLS%20Signature%20Verification%20Proof%2C%20Patricia%20Merkle%0A%20%20%204.%20Bridge%20Transactions%3A%20Transaction%20Proofs%0A5.%20Relayer%20and%20Proving%20Infrastructure%0A%20%20%201.%20Relayer%20operational%20and%20verification%20costs%20and%20incentives%0A%20%20%202.%20Proving%20infrastructure%20and%20proof%20generation%20costs%20(proofs%20can%20be%20used%20for%20multiple%20chains)%0A%20%20%203.%20Bridging%20assets%20infrastructure%2C%20incentives%20and%20transactional%20costs%0A%0AReference%20design%20articles%20include%20Succinct%3Csup%3E%5B1%5D(%23tb1)%3C%2Fsup%3E%20and%20%5BAppendix%20B%5D(%23appendix-b-proving-and-verification-mechanisms)%20includes%20codebases%20for%20proving%20and%20verification%20mechanisms.%0A%0A%23%23%23%20Logic%20Flow%0A%0A**Consensus**%0A%0A1.%20Active%20Validator%20Set%20is%20retrieved%0A2.%20Sync%20Committee%20is%20Validated%20(27%20hours)%0A3.%20Finality%20Checkpoint%20is%20Validated%20(per%20epoch)%0A4.%20Block%20(headers)%20are%20relayed%0A5.%20Block%20(headers)%20are%20validated%3A%20BLS%20Signatures%20on%20Block%20and%20Block%20is%20in%20the%20canonical%20chain.%0A%0A**Transaction**%0A%0A1.%20Ethereum%3A%20A%20transaction%20to%20bridge%20100%20ISO%20Tokens%20is%20sent%0A2.%20Relayer%3A%20Picks%20up%20Transaction%20(via%20event%20listening)%20and%20forwards%20to%20Target%20Light%20Client.%0A3.%20Light%20Client%20Verifies%20Transaction%20is%20in%20a%20valid%20block.%0A%20%20%201.%20Transaction%20is%20in%20Block%0A%20%20%202.%20Block%20is%20in%20Cannonical%20Chain%0A%20%20%203.%20Block%20has%20been%20signed%20correctly%20by%20valid%20committee%0A%20%20%204.%20Committe%20is%20valid%20based%20on%20the%20committe%20allocated%20to%20the%20slot%0A%20%20%205.%20Sync%20Committee%20signed%20the%20Comittee%20Allocation%0A%0A%23%23%23%20Key%20Data%20Points%20and%20Storage%0A%0A-%20Sync%20Committe%20Validator%20Set%20Change%20(Every%20255%20epochs%20approx%2027%20hours)%0A%0A-%20Epoch%20Committee%20Verification%20(Every%20Epoch%20(32%20slots)%20approx%206.4%20minutes)%0A-%20Block%20Verification%20(Every%20slot%20appox%2012%20seconds)%0A-%20Transaction%20Verifications%20(As%20Needed)%0A%0A%23%23%23%20Proving%20Logic%20and%20Costs%0A%0A-%20Sync%20committee%20proof%0A%0A-%20Epoch%20comittees%20proof%0A-%20Block%20proofs%0A-%20Transaction%20proofs%0A%0A%23%23%23%20ZKP%20Proving%20and%20Verification%20Costs%20ZKP%20Comparison%0A%0A%23%23%23%20Relayer%20and%20Prover%20Infrastructure%0A%0A%23%23%23%20Bridging%20Assets%0A%0A-%20Asset%20Lockers%0A-%20Mint%20and%20Burn%20Process%0A-%20Utilization%20of%20Locked%20Assets%0A%0A%23%23%20Ethereum%202.0%20Technical%20Overview%0A%0A%23%23%23%20Block%20Production%0A%0AValidators%20run%20both%20an%20Ethereum%201%20client%20(e.g.%20geth)%20and%20a%20Beacon%20Chain%20Client%20(e.g.%20prysm).%20The%20geth%20client%20recieves%20transactions%20and%20places%20them%20into%20blocks.%20For%20additional%20details%20see%20the%20Ethereum%20Builder%20Specs%3Csup%3E%5B12%5D(%23ts12)%3C%2Fsup%3E.%20The%20following%20diagrams%20give%20an%20overview%20of%20how%20blocks%20are%20proposed%20and%20how%20MEV%20Boost%3Csup%3E%5B13%5D(%23ts13)%3C%2Fsup%3E%20could%20be%20integrated.%20For%20simplification%20we%20can%20replace%20mev_boost%20and%20relay%20with%20geth%20in%20the%20block%20proposal%20diagram%20as%20the%20majority%20of%20validators%20simply%20run%20a%20geth%20node.%0A%0A!%5BBlock%20Proposal%5D(%2Fimages%2Fresearch%2Fblock-proposal.png%20%22Block%20Proposal%22)%0A%0A%23%23%23%20Slots%20and%20Epochs%20%3Csup%3E%5B6%5D(%23ts6)%3C%2Fsup%3E%0A%0A%3E%20The%20Beacon%20Chain%20provides%20the%20heartbeat%20to%20Ethereum%E2%80%99s%20consensus.%20Each%20slot%20is%2012%20seconds%20and%20an%20epoch%20is%2032%20slots%3A%206.4%20minutes.%0A%0A!%5BSlots%20and%20Epochs%5D(%2Fimages%2Fresearch%2FBeacon-Chain-Slots-and-Epochs.png.webp%20%22Slots%20and%20Epochs%22)%0A%0A%23%23%23%20Block%20Proposals%0A%0AWhen%20a%20validator%20is%20nominated%20as%20a%20proposer%20for%20a%20slot%20in%20an%20Epoch%20they%20propose%20a%20block%20gathered%20from%20there%20Ethereum%201%20client.%0A%0AThis%20proposed%20block%20is%20attested%20to%20by%20other%20validators%20who%20have%20been%20assigned%20as%20committe%20members%20for%20this%20slot%3Csup%3E%5B6%5D(%23ts6)%3C%2Fsup%3E.%0A%0A%3E%20A%20block%20proposer%20is%20a%20validator%20that%20has%20been%20pseudorandomly%20selected%20to%20build%20a%20block.%0A%3E%0A%3E%20Most%20of%20the%20time%2C%20validators%20are%20attesters%20that%20vote%20on%20blocks.%20These%20votes%20are%20recorded%20in%20the%20Beacon%20Chain%20and%20determine%20the%20head%20of%20the%20Beacon%20Chain.%0A%0A!%5BValidators%20and%20Attestations%5D(%2Fimages%2Fresearch%2FBeacon-Chain-Validators.png%20%22Validators%20and%20Attestations%22)%0A%0A%23%23%23%20Committees%0A%0A%3E%20A%20committee%20is%20a%20group%20of%20validators.%20For%20security%2C%20each%20slot%20has%20committees%20of%20at%20least%20128%20validators.%20An%20attacker%20has%20less%20than%20a%20one%20in%20a%20trillion%20probability%20of%20controlling%20%E2%85%94%20of%20a%20committee.%0A%3E%0A%3E%20The%20concept%20of%20a%20randomness%20beacon%20that%20emits%20random%20numbers%20for%20the%20public%2C%20lends%20its%20name%20to%20the%20Ethereum%20Beacon%20Chain.%20The%20Beacon%20Chain%20enforces%20consensus%20on%20a%20pseudorandom%20process%20called%20RANDAO.%0A%0A!%5BCommittees%5D(%2Fimages%2Fresearch%2FBeacon-Chain-RANDAO.png%20%22Committees%22)%0A%0A%23%23%23%20Attestations%0A%0AThe%20attestation%20lifecyle%3Csup%3E%5B9%5D(%23ts9)%3C%2Fsup%3E%20involves%0A%0A1.%20Generation%20of%20the%20proposed%20Block%0A2.%20Propagation%20of%20the%20block%20to%20committee%20members%20to%20vote%20on%20and%20sign%0A3.%20Aggregation%20of%20the%20votes%20(signatures)%20of%20the%20committee%20members%20by%20Aggregators%0A4.%20Propagation%20of%20the%20aggregated%20attestations%20back%20to%20the%20block%20Proposer%0A5.%20Inclusion%20of%20the%20block%20in%20the%20Beaconchain%0A%0A!%5BAttestation%20Life%20Cycle%5D(%2Fimages%2Fresearch%2FAttestationLifeCycle.png%20%22Attestation%20Life%20Cycle%22)%0A%0A%23%23%23%20Checkpoints%20and%20Finality%3Csup%3E%5B6b%5D(%23ts6b)%3C%2Fsup%3E%0A%0A%3E%20When%20an%20epoch%20ends%2C%20if%20its%20checkpoint%20has%20garnered%20a%20%E2%85%94%20supermajority%2C%20the%20checkpoint%20gets%20justified.%0A%0A!%5BCheckpoints%5D(%2Fimages%2Fresearch%2FBeacon-Chain-Checkpoints.jpg%20%22Checkpoints%22)%0A%0A%3E%20If%20a%20checkpoint%20B%20is%20justified%20and%20the%20checkpoint%20in%20the%20immediate%20next%20epoch%20becomes%20justified%2C%20then%20B%20becomes%20finalized.%20Typically%2C%20a%20checkpoint%20is%20finalized%20in%20two%20epochs%2C%2012.8%20minutes.%0A%0A!%5BFinality%5D(%2Fimages%2Fresearch%2FBeacon-Chain-Justification-and-Finalization.png%20%22Finality%22)%0A%0A%23%23%23%20Sync%20Committee%20%3Csup%3E%5B10%5D(%23ts10)%3C%2Fsup%3E%0A%0AA%20sync%20committee%20of%20512%20current%20validators%20is%20elected%20every%20255%20epochs%2C%20approximately%20every%2027%20hours%20(see%20%5Bsample%20sync%20comittee%20data%5D(%23sync-committee-latest)).%0AThey%20are%20responsible%20for%20signing%20each%20block%20which%20records%20which%20sync%20committee%20members%20(validtors)%20signed%20the%20block%2C%20held%20in%20%60syncaggregate_bits%60%2C%20and%20creates%20a%20bls%20aggregate%20signature%20held%20in%20%60syncaggregate_signature%60%20(see%20%5Bblock-data%5D(%23block-data-for-slot-5330592)).%0A%0A%60%60%60%0A%20%20%20%20%22syncaggregate_bits%22%3A%20%220xdffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffdfffffffffffffffdffffffffffffffffffffffff%22%2C%0A%20%20%20%20%22syncaggregate_participation%22%3A%200.9921875%2C%0A%20%20%20%20%22syncaggregate_signature%22%3A%20%220x95332c55790018eed3d17eada01cb4045348d09137505bc8697eeedaa3800a830ee2c138251850a9577f62a5488419ef0a722579156a177fb3a147017f1077af5d778f46a4cdf815fc450129d135fe5286e16df68333592e4aa45821bde780dd%22%2C%0A%60%60%60%0A%0AThis%20is%20used%20in%20Altair%20Light%20Client%20--%20Sync%20Protocol%3Csup%3E%5B11%5D(%23ts11)%3C%2Fsup%3E%20which%20enables%20the%20beacon%20chain%20to%20be%20light%20client%20friendly%20for%20constrained%20environments%20to%20access%20Ethereum.%0A%0A%23%23%23%20Validator%20Lifecycle%0A%0AFollowing%20is%20an%20overview%20of%20statuses%20for%20validators%20in%20Ethereum%202.0%20phase%200%20%3Csup%3E%5B14%5D(%23ts14)%3C%2Fsup%3E.%0A%0A%3E%201.%20**Deposited**%3A%20the%20validator%20has%20made%20a%20deposit%20and%20has%20registered%20in%20BeaconState.%0A%3E%202.%20**Eligible%20to%20be%20activated%20(Pending)**%3A%20the%20validator%20is%20eligible%20to%20be%20activated.%0A%3E%203.%20**Activated**%3A%20the%20validator%20is%20activated%0A%3E%20%20%20%20-%20_Note%20that%20the%20validator%20may%20be%20%E2%80%9Celigible%20to%20be%20activated%2C%20but%20has%20not%20been%20activated%20yet%E2%80%9D._%0A%3E%204.%20**Slashed**%3A%20the%20validator%20has%20been%20slashed%0A%3E%205.%20**Exited**%3A%20the%20validator%20is%20exited%0A%3E%206.%20**Withdrawable**%3A%20the%20validator%20is%20withdrawable%0A%3E%20%20%20%20-%20_Note%20that%20the%20validator%20will%20be%20able%20to%20withdraw%20to%20EEs%20in%20phase%202_%0A%3E%0A%3E%20_Note%20that%20in%20some%20cases%2C%20a%20validator%20can%20be%20in%20multiple%20statuses%20at%20the%20same%20time%2C%20e.g.%2C%20an%20active%20validator%20may%20be%20%E2%80%9Cactivated%20and%20slashed%E2%80%9D._%0A%0A!%5BValidator%20Status%20Transition%5D(%2Fimages%2Fresearch%2FValidatorStateTransition.png%20%22Validator%20Status%20Transition%22)%0A%0A%23%23%20Ethreum%202.0%20Technical%20Deep%20Dive%0A%0A%23%23%23%20Block%20Production%0A%0A**Process%20Flow**%0A%0A-%20Transactions%20are%20placed%20in%20%5Btxpool%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcore%2Ftxpool)%0A-%20The%20transaction%20pool%20is%20read%20and%20%5Bblocks%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fcore%2Ftypes%2Fblock.go%23L169)%20are%20produced%20by%20the%20%5Bminer%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fminer%2Fminer.go)%0A-%20Blocks%20Headers%20get%20forwarded%20to%20the%20Beacon%20chain%20once%20they%20pass%20%5Bbeacon%20consensus%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fconsensus%2Fbeacon%2Fconsensus.go)%0A-%20The%20Beacon%20chain%20embeds%20the%20EthChain%20Header%20into%20a%20%5BBeaconBlock%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconsensus-types%2Fblocks%2Ftypes.go%23L43)%0A%0A%23%23%23%20Consensus%20and%20Finality%0A%0AAttestation%20Process%20Flow%0A%0A-%20Proposing%20Block%0A-%20Signing%20Blocks%0A-%20Aggregated%20Attestation%20generation%0A-%20Block%20Proposal%20and%20Inclusion%20of%20Attestation%0A-%20The%20%5BSignedBeaconBlock%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconsensus-types%2Fblocks%2Ftypes.go%23L72)%20is%20added%20to%20the%20chain%0A%0AAttestations%20Block(LMD%20Ghost%20Vote)%20and%20Epoch%20Checkpoints%20(FFG%20Votes)%0A%0A-%20The%20validators%20in%20the%20committee%20attest%20to%20the%20validity%20of%20the%20block%20(LMD%20Ghost%20Vote)%0A-%20The%20validators%20in%20the%20comittee%20attest%20to%20the%20first%20block%20in%20the%20Epoch%20(FFG%20Vote)%0A%0AFrom%20%5BAttestations%2C%20ethereum.org%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fconsensus-mechanisms%2Fpos%2Fattestations)%0A%0A%3E%20Every%20epoch%20(6.4%20minutes)%20a%20validator%20proposes%20an%20attestation%20to%20the%20network.%20The%20attestation%20is%20for%20a%20specific%20slot%20in%20the%20epoch.%20The%20purpose%20of%20the%20attestation%20is%20to%20vote%20in%20favor%20of%20the%20validator's%20view%20of%20the%20chain%2C%20in%20particular%20the%20most%20recent%20justified%20block%20and%20the%20first%20block%20in%20the%20current%20epoch%20(known%20as%20source%20and%20target%20checkpoints).%20This%20information%20is%20combined%20for%20all%20participating%20validators%2C%20enabling%20the%20network%20to%20reach%20consensus%20about%20the%20state%20of%20the%20blockchain.%0A%3E%0A%3E%20The%20attestation%20contains%20the%20following%20components%3A%0A%3E%0A%3E%20-%20aggregation_bits%3A%20a%20bitlist%20of%20validators%20where%20the%20position%20maps%20to%20the%20validator%20index%20in%20their%20committee%3B%20the%20value%20(0%2F1)%20indicates%20whether%20the%20validator%20signed%20the%20data%20(i.e.%20whether%20they%20are%20active%20and%20agree%20with%20the%20block%20proposer)%0A%3E%20-%20data%3A%20details%20relating%20to%20the%20attestation%2C%20as%20defined%20below%0A%3E%20-%20signature%3A%20a%20BLS%20signature%20that%20aggregates%20the%20signatures%20of%20individual%20validators%0A%3E%0A%3E%20The%20first%20task%20for%20an%20attesting%20validator%20is%20to%20build%20the%20data.%20The%20data%20contains%20the%20following%20information%3A%0A%3E%0A%3E%20-%20slot%3A%20The%20slot%20number%20that%20the%20attestation%20refers%20to%0A%3E%20-%20index%3A%20A%20number%20that%20identifies%20which%20committee%20the%20validator%20belongs%20to%20in%20a%20given%20slot%0A%3E%20-%20beacon_block_root%3A%20Root%20hash%20of%20the%20block%20the%20validator%20sees%20at%20the%20head%20of%20the%20chain%20(the%20result%20of%20applying%20the%20fork-choice%20algorithm)%0A%3E%20-%20source%3A%20Part%20of%20the%20finality%20vote%20indicating%20what%20the%20validators%20see%20as%20the%20most%20recent%20justified%20block%0A%3E%20-%20target%3A%20Part%20of%20the%20finality%20vote%20indicating%20what%20the%20validators%20see%20as%20the%20first%20block%20in%20the%20current%20epoch%0A%3E%0A%3E%20Once%20the%20data%20is%20built%2C%20the%20validator%20can%20flip%20the%20bit%20in%20aggregation_bits%20corresponding%20to%20their%20own%20validator%20index%20from%200%20to%201%20to%20show%20that%20they%20participated.%0A%3E%0A%3E%20Finally%2C%20the%20validator%20signs%20the%20attestation%20and%20broadcasts%20it%20to%20the%20network.%0A%0A**Technical%20Details**%0A%0AFollowing%20is%20an%20overview%20of%20the%20state%20structure%20and%20logic%20for%20generating%20committees%20and%20aggregating%20attestations.%20For%20data%20structures%2C%20please%20see%20%5BBeacon%20State%20Data%20Structures%20from%20Prysm%5D(%23beacon-state-data-structures-from-prysm)%20and%20%5Bweb3signer_types%20from%20prysm%5D(%23web3signer_types-from-prysm).%0A%0A%5BBeaconState%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23BeaconState)%20contains%20both%20a%20%5BReadOnlyBeaconState%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23ReadOnlyBeaconState)%20and%20a%20%5BWriteOnlyBeaconState%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23WriteOnlyBeaconState)%20wich%20contain%20%5BReadOnlyValidators%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23ReadOnlyValidators)%20and%20%5BReadOnlyRandaoMixes%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23ReadOnlyRandaoMixes)%20and%20%5BWriteOnlyValidators%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23WriteOnlyValidators)%20and%20%5BWriteOnlyRandaoMixes%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fstate%23WriteOnlyRandaoMixes)%20respectively.%0A%0AAt%20the%20beginning%20of%20each%20epoch%20%5Bfunc%20ProcessRandaoMixesReset%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fepoch%23ProcessRandaoMixesReset)%20processes%20the%20final%20updates%20to%20RANDAO%20mix%20during%20epoch%20processing.%20This%20calls%20%5BRandaoMix%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23RandaoMix)%20which%20returns%20the%20randao%20mix%20(xor'ed%20seed)%20of%20a%20given%20slot.%20It%20is%20used%20to%20shuffle%20validators.%0A%0AFollowing%20are%20sample%20mixes%20generated%20from%20%5Bfunc%20TestRandaoMix_OK%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Frandao_test.go%23L16)%20by%20adding%20the%20statement%20%60fmt.Printf(%22mix%3A%20%25v%5Cn%22%2C%20mix)%60%0A%0A%60%60%60%0Amix%3A%20%5B10%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%5D%0Amix%3A%20%5B40%209%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%5D%0Amix%3A%20%5B159%20134%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%5D%0A%60%60%60%0A%0AThe%20shuffle%20functions%20consist%20of%0A%0A-%20%5Bfunc%20ShuffleList%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ShuffleList)%3A%20returns%20list%20of%20shuffled%20indexes%20in%20a%20pseudorandom%20permutation%20%60p%60%20of%20%600...list_size%20-%201%60%20with%20%E2%80%9Cseed%E2%80%9C%20as%20entropy.%20We%20utilize%20'swap%20or%20not'%20shuffling%20in%20this%20implementation%3B%20we%20are%20allocating%20the%20memory%20with%20the%20seed%20that%20stays%20constant%20between%20iterations%20instead%20of%20reallocating%20it%20each%20iteration%20as%20in%20the%20spec.%20This%20implementation%20is%20based%20on%20the%20original%20implementation%20from%20protolambda%2C%20https%3A%2F%2Fgithub.com%2Fprotolambda%2Feth2-shuffle%0A%0A%20%20Following%20is%20an%20example%20of%20a%20shuffled%20list%20generated%20from%20%5BTestShuffleList_OK%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fshuffle_test.go%23L25)%0A%0A%20%20%60%60%60%0A%20%20list1%3A%20%5B0%201%202%203%204%205%206%207%208%209%5D%0A%20%20seed1%3A%20%5B1%20128%2012%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%5D%0A%20%20shuffledList1%3A%20%5B0%207%208%206%203%209%204%205%202%201%5D%0A%20%20%60%60%60%0A%0A-%20%5Bfunc%20ShuffleIndex%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ShuffledIndex)%3A%20returns%20%60p(index)%60%20in%20a%20pseudorandom%20permutation%20%60p%60%20of%20%600...list_size%20-%201%60%20with%20%E2%80%9Cseed%E2%80%9C%20as%20entropy.%20We%20utilize%20'swap%20or%20not'%20shuffling%20in%20this%20implementation%3B%20we%20are%20allocating%20the%20memory%20with%20the%20seed%20that%20stays%20constant%20between%20iterations%20instead%20of%20reallocating%20it%20each%20iteration%20as%20in%20the%20spec.%20This%20implementation%20is%20based%20on%20the%20original%20implementation%20from%20protolambda%2C%20https%3A%2F%2Fgithub.com%2Fprotolambda%2Feth2-shuffle%0A%0A-%20%5Bfunc%20ShuffleIndices%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ShuffledIndices)%3A%20ShuffledIndices%20uses%20input%20beacon%20state%20and%20returns%20the%20shuffled%20indices%20of%20the%20input%20epoch%2C%20the%20shuffled%20indices%20then%20can%20be%20used%20to%20break%20up%20into%20committees.%0A%0ACommittes%20are%20formed%20using%20functions%20from%20%5Bbeacon_comittee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fbeacon_committee.go)%0A%0A-%20%5Bfunc%20BeaconComittee%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23BeaconCommittee)%3A%20returns%20the%20beacon%20committee%20of%20a%20given%20slot%20and%20committee%20index.%20The%20validator%20indices%20and%20seed%20are%20provided%20as%20an%20argument%20rather%20than%20an%20imported%20implementation%20from%20the%20spec%20definition.%20Having%20them%20as%20an%20argument%20allows%20for%20cheaper%20computation%20run%20time.%20(This%20is%20an%20optomized%20version%20of%20%5Bfunc%20BeaconComitteFromState%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23BeaconCommitteeFromState))%0A%0A%20%20Following%20is%20an%20example%20of%20a%20%60beaconComittee%60%20generated%20by%20adding%20the%20following%20lines%20to%20%5BTestBeaconCommitteeFromState_UpdateCacheForPreviousEpoch%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fbeacon_committee_test.go%23L574)%3A%0A%0A%60%60%60%0Avar%20beaconCommittee%20%5B%5Dtypes.ValidatorIndex%0AbeaconCommittee%2C%20err%20%3D%20BeaconCommitteeFromState(context.Background()%2C%20state%2C%201%20%2F_previous%20epoch_%2F%2C%200)%0Afmt.Printf(%22beaconComittee%3A%20%25%2Bv%5Cn%22%2C%20beaconCommittee)%0A%60%60%60%0A%0AResult%0A%0A%60%60%60%0AbeaconComittee%3A%20%5B160%20338%20313%20307%20320%20324%2045%20469%20196%20303%2023%2014%2097%20312%20126%20488%5D%0A%60%60%60%0A%0A-%20%5Bfunc%20CommitteeAssignments%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23CommitteeAssignments)%3A%20is%20a%20map%20of%20validator%20indices%20pointing%20to%20the%20appropriate%20committee%20assignment%20for%20the%20given%20epoch.%0A%0A1.%20Determine%20the%20proposer%20validator%20index%20for%20each%20slot.%0A2.%20Compute%20all%20committees.%0A3.%20Determine%20the%20attesting%20slot%20for%20each%20committee.%0A4.%20Construct%20a%20map%20of%20validator%20indices%20pointing%20to%20the%20respective%20committees.%0A%0AFollowing%20is%20an%20example%20of%20%60commitees%60%20generated%20by%20adding%20the%20following%20lines%20to%20%5BTestComputeCommittee_WithoutCache%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fbeacon_committee_test.go%23L23)%0A%0A%60%60%60%0Acommittees%2C%20err%20%3A%3D%20computeCommittee(indices%2C%20seed%2C%200%2C%201%20%2F_%20Total%20committee_%2F)%0Afmt.Printf(%22committees%3A%20%25%2Bv%5Cn%22%2C%20committees)%0A%60%60%60%0A%0A%20%20%20%20%3Cdetails%3E%0A%20%20%20%20%3Csummary%3Eresult%3C%2Fsummary%3E%0A%0A%20%20%20%20%60%60%60%0A%20%20%20%20committeesdetails%3E%0A%0AAttestations%20are%20managed%20using%20functions%20from%20%5Battestation.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fattestation.go)%0A%0A-%20%5Bfunc%20ValidateNilAttestation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ValidateNilAttestation)%3A%20checks%20if%20any%20composite%20field%20of%20input%20attestation%20is%20nil.%20Access%20to%20these%20nil%20fields%20will%20result%20in%20run%20time%20panic%2C%20it%20is%20recommended%20to%20run%20these%20checks%20as%20first%20line%20of%20defense.%0A-%20%5Bfunc%20ValidateSlotTargetEpoch%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ValidateSlotTargetEpoch)%3A%20ValidateSlotTargetEpoch%20checks%20if%20attestation%20data's%20epoch%20matches%20target%20checkpoint's%20epoch.%20It%20is%20recommended%20to%20run%20%60ValidateNilAttestation%60%20first%20to%20ensure%20%60data.Target%60%20can't%20be%20nil.%0A-%20%5Bfunc%20IsAggregator%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23IsAggregator)%3A%20IsAggregator%20returns%20true%20if%20the%20signature%20is%20from%20the%20input%20validator.%20The%20committee%20count%20is%20provided%20as%20an%20argument%20rather%20than%20imported%20implementation%20from%20spec.%20Having%20committee%20count%20as%20an%20argument%20allows%20cheaper%20computation%20at%20run%20time.%0A-%20%5Bfunc%20AggregateSignature%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23AggregateSignature)%3A%20returns%20the%20aggregated%20signature%20of%20the%20input%20attestations.%0A%0A%20%20Spec%20pseudocode%20definition%3A%0A%0A%60%60%60%0Adef%20get_aggregate_signature(attestations%3A%20Sequence%5BAttestation%5D)%20-%3E%20BLSSignature%3A%0Asignatures%20%3D%20%5Battestation.signature%20for%20attestation%20in%20attestations%5D%0Areturn%20bls.Aggregate(signatures)%0A%60%60%60%0A%0AFollowing%20is%20an%20example%20aggregrated%20signature%20by%20adding%20the%20following%20lines%20to%20%5BTestAttestation_AggregateSignature%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%2Fattestation_test.go%23L48)%0A%0A%60%60%60%0AaggSig%2C%20err%20%3A%3D%20helpers.AggregateSignature(atts)%0A%60%60%60%0A%0Afmt.Printf(%22aggSig%3A%20%25%2Bv%5Cn%22%2C%20aggSig)%0A%0AResult%0A%0A%60%60%60%0A%20%20%20%20aggSig%3A%20%26%7Bs%3A0xc0003fe000%7D%0A%60%60%60%0A%0A-%20%5Bfunc%20IsAggregated%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23IsAggregated)%3A%20IsAggregated%20returns%20true%20if%20the%20attestation%20is%20an%20aggregated%20attestation%2C%20false%20otherwise.%0A%0A-%20%5Bfunc%20ComputeSubnetForAttestation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ComputeSubnetForAttestation)%3A%20returns%20the%20subnet%20for%20which%20the%20provided%20attestation%20will%20be%20broadcasted%20to.This%20differs%20from%20the%20spec%20definition%20by%20instead%20passing%20in%20the%20active%20validators%20indices%20in%20the%20attestation's%20given%20epoch.%0A%0ASpec%20pseudocode%20definition%3A%0A%0A%60%60%60%0Adef%20compute_subnet_for_attestation(committees_per_slot%3A%20uint64%2C%20slot%3A%20Slot%2C%20committee_index%3A%20CommitteeIndex)%20-%3E%20uint64%3A%0A%0A%22%22%22%0ACompute%20the%20correct%20subnet%20for%20an%20attestation%20for%20Phase%200.%0ANote%2C%20this%20mimics%20expected%20future%20behavior%20where%20attestations%20will%20be%20mapped%20to%20their%20shard%20subnet.%0A%22%22%22%0Aslots_since_epoch_start%20%3D%20uint64(slot%20%25%20SLOTS_PER_EPOCH)%0Acommittees_since_epoch_start%20%3D%20committees_per_slot%20%5C*%20slots_since_epoch_start%0A%0Areturn%20uint64((committees_since_epoch_start%20%2B%20committee_index)%20%25%20ATTESTATION_SUBNET_COUNT)%0A%60%60%60%0A%0A-%20%5Bfunc%20ComputeSubnetFromCommitteeAndSlot%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ComputeSubnetFromCommitteeAndSlot)%3A%20is%20a%20flattened%20version%20of%20ComputeSubnetForAttestation%20where%20we%20only%20pass%20in%20the%20relevant%20fields%20from%20the%20attestation%20as%20function%20arguments.%0A%0ASpec%20pseudocode%20definition%3A%0A%0A%60%60%60%0A%0Adef%20compute_subnet_for_attestation(committees_per_slot%3A%20uint64%2C%20slot%3A%20Slot%2C%20committee_index%3A%20CommitteeIndex)%20-%3E%20uint64%3A%0A%0A%22%22%22%0ACompute%20the%20correct%20subnet%20for%20an%20attestation%20for%20Phase%200.%0ANote%2C%20this%20mimics%20expected%20future%20behavior%20where%20attestations%20will%20be%20mapped%20to%20their%20shard%20subnet.%0A%22%22%22%0Aslots_since_epoch_start%20%3D%20uint64(slot%20%25%20SLOTS_PER_EPOCH)%0Acommittees_since_epoch_start%20%3D%20committees_per_slot%20%5C*%20slots_since_epoch_start%0A%0Areturn%20uint64((committees_since_epoch_start%20%2B%20committee_index)%20%25%20ATTESTATION_SUBNET_COUNT)%0A%0A%60%60%60%0A%0A-%20%5Bfunc%20ValidateAttestationTime%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23ValidateAttestationTime)%3A%20Validates%20that%20the%20incoming%20attestation%20is%20in%20the%20desired%20time%20range.%0A%20%20An%20attestation%20is%20valid%20only%20if%20received%20within%20the%20last%20ATTESTATION_PROPAGATION_SLOT_RANGE%20slots.%0A%0AExample%3A%0A%0A%60%60%60%0A%0AATTESTATION_PROPAGATION_SLOT_RANGE%20%3D%205%0AclockDisparity%20%3D%2024%20seconds%0Acurrent_slot%20%3D%20100%0Ainvalid_attestation_slot%20%3D%2092%0Ainvalid_attestation_slot%20%3D%20103%0Avalid_attestation_slot%20%3D%2098%0Avalid_attestation_slot%20%3D%20101%0A%0A%60%60%60%0A%0AIn%20the%20attestation%20must%20be%20within%20the%20range%20of%2095%20to%20102%20in%20the%20example%20above.%0A%0A-%20%5Bfunc%20VerifyCheckpointEpoch%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fhelpers%23VerifyCheckpointEpoch)%3A%20VerifyCheckpointEpoch%20is%20within%20current%20epoch%20and%20previous%20epoch%20with%20respect%20to%20current%20time.%20Returns%20true%20if%20it's%20within%2C%20false%20if%20it's%20not.%0A%0A_Note%3A%20Sample%20command%20for%20running%20tests%20in%20Prysm%3A%20%60bazel%20test%20%2F%2Fbeacon-chain%2Fcore%2Fhelpers%3Ago_default_test%20--test_output%3Dstreamed%20--test_filter%3DTestAttestation_AggregateSignature%60._%0A%0A**Consensus%20Committee%20Selection**%0A%0A-%20%5Bfunc%20ProcessRandoa%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fbeacon-chain%2Fcore%2Fblocks%23ProcessRandao)%3A%20checks%20the%20block%20proposer's%20randao%20commitment%20and%20generates%20a%20new%20randao%20mix%20to%20update%20in%20the%20beacon%20state's%20latest%20randao%20mixes%20slice.%0A-%20%5Bfunc%20randaoSigningData%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fcore%2Fblocks%2Fsignature.go%23L157)%3A%20retrieves%20the%20randao%20related%20signing%20data%20from%20the%20state.%0A%20%20-%20%5Bfunc%20(b%20%5C*BeaconState)%20PubkeyAtIndex(idx%20types.ValidatorIndex)%20%5Bfieldparams.BLSPubkeyLength%5Dbyte%20%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fstate%2Fstate-native%2Fgetters_validator.go%23L135)%3A%20returns%20the%20pubkey%20at%20the%20given%20validator%20index.%0A%0A%23%23%23%20Light%20Client%20Support%0A%0A%23%23%23%20Signature%20Schemes%20Review%0A%0A-%20Execution%20Chain%20Block%20Signing%0A%0A-%20Vote%20Signing%0A-%20Aggregated%20Attestations%20Signing%0A-%20Synch%20Committee%20Signing%0A%0A%23%23%20Ethereum%202.0%20Light%20Client%0A%0A%23%23%23%20Key%20Concepts%0A%0A-%20Syncing%20to%20Current%20state%0A%0A-%20Advancing%20Blocks%0A-%20Communication%20can%20be%20either%20via%0A-%20RPC%20to%20the%20%5BEth%20BEACON%20Node%20API%5D(https%3A%2F%2Fethereum.github.io%2Fbeacon-APIs%2F%23%2FBeacon)%0A-%20%5BNetworking%20Gossip%20Topics%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.md%23global-topics)%0A%20%20-%20%5Blight_client_finality_update%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.md%23light_client_finality_update)%3A%20This%20topic%20is%20used%20to%20propagate%20the%20latest%20%60LightClientFinalityUpdate%60%20to%20light%20clients%2C%20allowing%20them%20to%20keep%20track%20of%20the%20latest%20%60finalized_header%60.%0A%20%20-%20%5Blight_client_optimistic_update%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.md%23light_client_optimistic_update)%3A%20This%20topic%20is%20used%20to%20propagate%20the%20latest%60LightClientOptimisticUpdate%60%20to%20light%20clients%2C%20allowing%20them%20to%20keep%20track%20of%20the%20latest%20%60optimistic_header%60.%0A%0A_Note%3A%20Time%20on%20Ethereum%202.0%20Proof%20of%20Stake%20is%20divided%20into%20slots%20and%20epochs.%20One%20slot%20is%2012%20seconds.%20One%20epoch%20is%206.4%20minutes%2C%20consisting%20of%2032%20slots.%20One%20block%20can%20be%20created%20for%20each%20slot._%0A%0A%23%23%23%20Altair%20Light%20Client%20--%20Sync%20Protocol%0A%0A-%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%3A%20The%20beacon%20chain%20is%20designed%20to%20be%20light%20client%20friendly%20for%20constrained%20environments%20to%20access%20Ethereum%20with%20reasonable%20safety%20and%20liveness.%0A%0ASuch%20environments%20include%20resource-constrained%20devices%20(e.g.%20phones%20for%20trust-minimized%20wallets)and%20metered%20VMs%20(e.g.%20blockchain%20VMs%20for%20cross-chain%20bridges).%0A%0AThis%20document%20suggests%20a%20minimal%20light%20client%20design%20for%20the%20beacon%20chain%20thatuses%20sync%20committees%20introduced%20in%20%5Bthis%20beacon%20chain%20extension%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fbeacon-chain.mdx).%0A%0AAdditional%20documents%20describe%20how%20the%20light%20client%20sync%20protocol%20can%20be%20used%3A%0A%0A-%20%5BFull%20node%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Ffull-node.mdx)%0A-%20%5BLight%20client%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%0A-%20%5BNetworking%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fp2p-interface.mdx)%0A%0A-%20%5BLight%20client%20sync%20process%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%3A%20explains%20how%20light%20clients%20MAY%20obtain%20light%20client%20data%20to%20sync%20with%20the%20network.%0A%0A1.%20The%20light%20client%20MUST%20be%20configured%20out-of-band%20with%20a%20spec%2Fpreset%20(including%20fork%20schedule)%2C%20with%20%60genesis_state%60%20(including%20%60genesis_time%60%20and%20%60genesis_validators_root%60)%2C%20and%20with%20a%20trusted%20block%20root.%20The%20trusted%20block%20SHOULD%20be%20within%20the%20weak%20subjectivity%20period%2C%20and%20its%20root%20SHOULD%20be%20from%20a%20finalized%20%60Checkpoint%60.%0A2.%20The%20local%20clock%20is%20initialized%20based%20on%20the%20configured%20%60genesis_time%60%2C%20and%20the%20current%20fork%20digest%20is%20determined%20to%20browse%20for%20and%20connect%20to%20relevant%20light%20client%20data%20providers.%0A3.%20The%20light%20client%20fetches%20a%20%5B%60LightClientBootstrap%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%20object%20for%20the%20configured%20trusted%20block%20root.%20The%20%60bootstrap%60%20object%20is%20passed%20to%20%5B%60initialize_light_client_store%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23initialize_light_client_store)%20to%20obtain%20a%20local%20%5B%60LightClientStore%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientstore).%0A4.%20The%20light%20client%20tracks%20the%20sync%20committee%20periods%20%60finalized_period%60%20from%20%60store.finalized_header.slot%60%2C%20%60optimistic_period%60%20from%20%60store.optimistic_header.slot%60%2C%20and%20%60current_period%60%20from%20%60current_slot%60%20based%20on%20the%20local%20clock.%0A%20%20%201.%20When%20%60finalized_period%20%3D%3D%20optimistic_period%60%20and%20%5B%60is_next_sync_committee_known%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23is_next_sync_committee_known)%20indicates%20%60False%60%2C%20the%20light%20client%20fetches%20a%20%5B%60LightClientUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientupdate)%20for%20%60finalized_period%60.%20If%20%60finalized_period%20%3D%3D%20current_period%60%2C%20this%20fetch%20SHOULD%20be%20scheduled%20at%20a%20random%20time%20before%20%60current_period%60%20advances.%0A%20%20%202.%20When%20%60finalized_period%20%2B%201%20%3C%20current_period%60%2C%20the%20light%20client%20fetches%20a%20%60LightClientUpdate%60%20for%20each%20sync%20committee%20period%20in%20range%20%60%5Bfinalized_period%20%2B%201%2C%20current_period)%60%20(current%20period%20excluded)%0A%20%20%203.%20When%20%60finalized_period%20%2B%201%20%3E%3D%20current_period%60%2C%20the%20light%20client%20keeps%20observing%20%5B%60LightClientFinalityUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientfinalityupdate)%20and%20%5B%60LightClientOptimisticUpdate%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23lightclientoptimisticupdate).%20Received%20objects%20are%20passed%20to%20%5B%60process_light_client_finality_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_finality_update)%20and%20%5B%60process_light_client_optimistic_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_optimistic_update).%20This%20ensures%20that%20%60finalized_header%60%20and%20%60optimistic_header%60%20reflect%20the%20latest%20blocks.%0A5.%20%5B%60process_light_client_store_force_update%60%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.md%23process_light_client_store_force_update)%20MAY%20be%20called%20based%20on%20use%20case%20dependent%20heuristics%20if%20light%20client%20sync%20appears%20stuck.%20If%20available%2C%20falling%20back%20to%20an%20alternative%20syncing%20mechanism%20to%20cover%20the%20affected%20sync%20committee%20period%20is%20preferred.%0A%0A%23%23%23%20The%20Portal%20Network%0A%0A-%20%5BThe%20Portal%20Network%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs)%3A%20The%20Portal%20Network%20is%20an%20in%20progess%20effort%20to%20enable%20lightweight%20protocol%20access%20by%20resource%20constrained%20devices.%20The%20term%20_%22portal%22_%20is%20used%20to%20indicate%20that%20these%20networks%20provide%20a%20_view_%20into%20the%20protocol%20but%20are%20not%20critical%20to%20the%20operation%20of%20the%20core%20Ethereum%20protocol.%0A%0AThe%20Portal%20Network%20is%20comprised%20of%20multiple%20peer-to-peer%20networks%20which%20together%20provide%20the%20data%20and%20functionality%20necessary%20to%20expose%20the%20standard%20%5BJSON-RPC%20API%5D(https%3A%2F%2Feth.wiki%2Fjson-rpc%2FAPI).%20These%20networks%20are%20specially%20designed%20to%20ensure%20that%20clients%20participating%20in%20these%20networks%20can%20do%20so%20with%20minimal%20expenditure%20of%20networking%20bandwidth%2C%20CPU%2C%20RAM%2C%20and%20HDD%20resources.%0A%0AThe%20term%20'Portal%20Client'%20describes%20a%20piece%20of%20software%20which%20participates%20in%20these%20networks.%20Portal%20Clients%20typically%20expose%20the%20standard%20JSON-RPC%20API.%0A%0A-%20Motivation%3A%20The%20Portal%20Network%20is%20focused%20on%20delivering%20reliable%2C%20lightweight%2C%20and%20decentralized%20access%20to%20the%20Ethereum%20protocol.%0A%0A-%20Prior%20Work%20on%20the%20%22Light%20Ethereum%20Subprotocol%22%20(LES)%3A%20The%20term%20%22light%20client%22%20has%20historically%20refered%20to%20a%20client%20of%20the%20existing%20%5BDevP2P%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Frlpx.mdx)%20based%20%5BLES%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Fcaps%2Fles.mdx)%20network.%20This%20network%20is%20designed%20using%20a%20client%2Fserver%20architecture.%20The%20LES%20network%20has%20a%20total%20capacity%20dictated%20by%20the%20number%20of%20%22servers%22%20on%20the%20network.%20In%20order%20for%20this%20network%20to%20scale%2C%20the%20%22server%22%20capacity%20has%20to%20increase.%20This%20also%20means%20that%20at%20any%20point%20in%20time%20the%20network%20has%20some%20total%20capacity%20which%20if%20exceeded%20will%20cause%20service%20degradation%20across%20the%20network.%20Because%20of%20this%20the%20LES%20network%20is%20unreliable%20when%20operating%20near%20capacity.%0A%0A-%20Block%20Relay%0A%0A-%20%5BBeacon%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23dht-overview)%3A%20A%20client%20has%20a%20trusted%20beacon%20state%20root%2C%20and%20it%20wants%20to%20access%20some%20parts%20of%20the%20state.%20Each%20of%20the%20access%20request%20corresponds%20to%20some%20leave%20nodes%20of%20the%20beacon%20state.%20The%20request%20is%20a%20content%20lookup%20on%20a%20DHT.%20The%20response%20is%20a%20Merkle%20proof.%0A%0A%20%20%20%20%20%20A%20Distributed%20Hash%20Table%20(DHT)%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%0A%0A-%20%5BSyncing%20Block%20Headers%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx)%3A%20A%20beacon%20chain%20client%20could%20sync%20committee%20to%20perform%20state%20updates.%20The%20data%20object%20LightClientSkipSyncUpdate%20allows%20a%20client%20to%20quickly%20sync%20to%20a%20recent%20header%20with%20the%20appropriate%20sync%20committee.%20Once%20the%20client%20establishes%20a%20recent%20header%2C%20it%20could%20sync%20to%20other%20headers%20by%20processing%20LightClientUpdates.%20These%20two%20data%20types%20allow%20a%20client%20to%20stay%20up-to-date%20with%20the%20beacon%20chain.%0A%20%20-%20%5BSync%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fskip-sync-network.mdx)%3A%20A%20client%20uses%20SkipSyncUpdate%20to%20skip%20sync%20from%20a%20known%20header%20to%20a%20recent%20header.%20A%20client%20with%20a%20trusted%20but%20outdated%20header%20cannot%20use%20the%20messages%20in%20the%20gossip%20channel%20bc-light-client-update%20to%20update.%20The%20client's%20sync-committee%20in%20the%20stored%20snapshot%20is%20too%20old%20and%20not%20connected%20to%20any%20update%20messages.%20The%20client%20look%20for%20the%20appropriate%20SkipSyncUpdate%20to%20skip%20sync%20its%20header.%0A%20%20-%20%5BAdvance%20Block%20Headers%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx)%3A%20A%20beacon%20chain%20client%20could%20sync%20committee%20to%20perform%20%5Bstate%20updates%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fsync-protocol.mdx).%20The%20data%20object%20%5BLightClientSkipSyncUpdate%5D(skip-sync-network)%20allows%20a%20client%20to%20quickly%20sync%20to%20a%20recent%20header%20with%20the%20appropriate%20sync%20committee.%20Once%20the%20client%20establishes%20a%20recent%20header%2C%20it%20could%20sync%20to%20other%20headers%20by%20processing%20%5BLightClientUpdates%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fsync-protocol.md%23lightclientupdate).%20These%20two%20data%20types%20allow%20a%20client%20to%20stay%20up-to-date%20with%20the%20beacon%20chain.%0A%0A%20%20%20%20%20%20%20%20%20%20These%20two%20data%20types%20are%20placed%20into%20separate%20sub-networks.%20A%20light%20client%20make%20find-content%20requests%20on%20%60skip-sync-network%60%20at%20start%20of%20the%20sync%20to%20get%20a%20header%20with%20the%20same%20%60SyncCommittee%60%20object%20as%20in%20the%20current%20sync%20period.%20The%20client%20uses%20messages%20in%20the%20gossip%20topic%20%60bc-light-client-update%60%20to%20advance%20its%20header.%0A%0A%20%20%20%20%20%20%20%20%20%20The%20gossip%20topics%20described%20in%20this%20document%20is%20part%20of%20a%20%5Bproposal%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fa-beacon-chain-light-client-proposal%2F11064)%20for%20a%20beacon%20chain%20light%20client.%0A%0A%23%23%23%20Transaction%20Proofs%0A%0A-%20%5BRetrieving%20Beacon%20State%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.mdx)%3A%20A%20client%20has%20a%20trusted%20beacon%20state%20root%2C%20and%20it%20wants%20to%20access%20some%20parts%20of%20the%20state.%20Each%20of%20the%20access%20request%20corresponds%20to%20some%20leave%20nodes%20of%20the%20beacon%20state.%20The%20request%20is%20a%20content%20lookup%20on%20a%20DHT.%20The%20response%20is%20a%20Merkle%20proof.%0A%0AA%20Distributed%20Hash%20Table%20(DHT)%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%20key.%20A%20portal-network%20DHT%20is%20different%20than%20a%20traditional%20one%20in%20that%20each%20participant%20could%20selectively%20limit%20its%20workload%20by%20choosing%20a%20small%20interest%20radius%20r.%20A%20participants%20only%20process%20messages%20that%20are%20within%20its%20chosen%20radius%20boundary.%0A%0A-%20%5BWire%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23wire-protocol)%3A%20For%20a%20subprotocol%2C%20we%20need%20to%20further%20define%20the%20following%20to%20be%20able%20to%20instantiate%20the%20wire%20format%20of%20each%20message%20type.%201.%20%60content_key%60%202.%20%60content_id%60%203.%20%60payload%60%0A%0A%20%20%20%20%20%20The%20content%20of%20the%20message%20is%20a%20Merkle%20proof%20contains%20multiple%20leave%20nodes%20for%20a%20%5BBeaconState%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Fbeacon-chain.md%23beaconstate).%0A%0A%20%20%20%20%20%20Finally%2C%20we%20define%20the%20necessary%20encodings.%20A%20light%20client%20only%20knows%20the%20root%20of%20the%20beacon%20state.%20The%20client%20wants%20to%20know%20the%20details%20of%20some%20leave%20nodes.%20The%20client%20has%20to%20be%20able%20to%20construct%20the%20%60content_key%60%20only%20knowing%20the%20root%20and%20which%20leave%20nodes%20it%20wants%20see.%20The%20%60content_key%60%20is%20the%20ssz%20serialization%20of%20the%20paths.%20The%20paths%20represent%20the%20part%20of%20the%20beacon%20state%20that%20one%20wants%20to%20know%20about.%20The%20paths%20are%20represented%20by%20generalized%20indices.%20Note%20that%20%60hash_tree_root%60%20and%20%60serialize%60%20are%20the%20same%20as%20those%20defined%20in%20%5Bsync-gossip%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fsync-gossip.mdx).%0A%0A-%20TODO%3A%20Review%20of%20Retrieving%20a%20transaction%20proof%20not%20just%20retrieving%20data%20on-demand%0A%0A%23%23%23%20Further%20Information%0A%0A-%20Ethereum%202.0%20Specifications%0A-%20%5BBeacon%20Chain%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fmaster%2Fspecs%2Fphase0%2Fbeacon-chain.mdx)%0A-%20%5BExtended%20light%20client%20protocol%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fextended_light_client_protocol)%0A-%20%5BAltair%20Light%20Client%20--%20Light%20Client%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Flight-client.mdx)%0A-%20%5BAltair%20Light%20Client%20--%20Sync%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Faltair%2Flight-client%2Fsync-protocol.mdx)%0A-%20%5BBeacon%20Chain%20Fork%20Choice%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Ffork-choice.mdx)%0A-%20%5BThe%20Portal%20Network%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs)%3A%20an%20in%20progess%20effort%20to%20enable%20lightweight%20protocol%20access%20by%20resource%20constrained%20devices.%0A-%20%5BLight%20Ethereum%20Subprotocol%20(LES)%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fdevp2p%2Fblob%2Fmaster%2Fcaps%2Fles.mdx)%3A%20the%20protocol%20used%20by%20%22light%22%20clients%2C%20which%20only%20download%20block%20headers%20as%20they%20appear%20and%20fetch%20other%20parts%20of%20the%20blockchain%20on-demand.%0A-%20%5BBlockDaemon%3A%20Ethereum%20Altair%20Hard%20Folk%3A%20Light%20Clients%20%26%20Sync%20Committees%5D(https%3A%2F%2Fblockdaemon.com%2Fblog%2Fethereum-altair-hard-folk-light-clients-sync-committees%2F)%0A-%20%5BEfficient%20algorithms%20for%20CBC%20Casper%5D(https%3A%2F%2Fdocs.google.com%2Fpresentation%2Fd%2F1oc_zdywOsHxz3zez1ILAgrerS7RkaF1hHoW0FLtp0Gw%2Fedit%23slide%3Did.p)%3A%20Review%20of%20LMD%20GHOST%20(Latest%20Message%20Driven%2C%20Greediest%20Heaviest%20Observed%20Sub-Tree)%0A-%20%5BSSZ%3A%20Simple%20Serialize%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fssz%2F)%3A%20Overview%20of%20Simple%20serialize%20(SSZ)%20is%20the%20serialization%20method%20used%20on%20the%20Beacon%20Chain.%20(including%20merkalization%20and%20multiproofs)%0A-%20%5BThe%20Noise%20Protocol%20Framework%5D(https%3A%2F%2Fnoiseprotocol.org%2Fnoise.html)%3A%20Noise%20is%20a%20framework%20for%20crypto%20protocols%20based%20on%20Diffie-Hellman%20key%20agreement.%0A-%20%5BFlashbots%20for%20Ethereum%20Consensus%20Clients%5D(https%3A%2F%2Fhackmd.io%2FQoLwVQf3QK6EiVt15YOYqQ%3Fview)%0A-%20%5BOptimistic%20Sync%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fsync%2Foptimistic.mdx)%3A%20Optimistic%20Sync%20is%20a%20stop-gap%20measure%20to%20allow%20execution%20nodes%20to%20sync%20via%20established%20methods%20until%20future%20Ethereum%20roadmap%20items%20are%20implemented%20(e.g.%2C%20statelessness).%0A-%20%5BConsensus%20Light%20Client%20Server%20Implementation%20Notes%5D(https%3A%2F%2Fhackmd.io%2FhsCz1G3BTyiwwJtjT4pe2Q%3Fview)%3A%20How%20Lodestar%20beacon%20node%20was%20tweaked%20to%20serve%20light%20clients%0A-%20%5Bbeacon%20chain%20light%20client%20design%20doc%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40ralexstokes%2FHJxDMi8vY)%3A%20notes%20about%20the%20design%2Fimplementation%20of%20a%20beacon%20chain%20light%20client%20using%20standard%20APIs%20and%20protocol%20features%0A-%20%5BA%20Beacon%20Chain%20Light%20Client%20Proposal%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fa-beacon-chain-light-client-proposal%2F11064)%3A%20proposing%20a%20light%20client%20implementation%20that%20goes%20a%20step%20further%20than%20the%20minimum%20light%20client%20described%20in%20the%20altair%20consensus-spec.%20The%20proposed%20client%20aims%20to%20allow%20queries%20into%20the%20beacon%20state.%0A-%20%5BDistributed%20Hash%20Table%20(DHT)%20Overview%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fportal-network-specs%2Fblob%2Fmaster%2Fbeacon-chain%2Fbeacon-state-network.md%23dht-overview)%3A%20allows%20network%20participants%20to%20have%20retrieve%20data%20on-demand%20based%20on%20a%20content%20key.%0A-%20%5B(WIP)%20Light%20client%20p2p%20interface%20Specification%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fpull%2F2786)%3A%20a%20PR%20to%20get%20the%20conversation%20going%20about%20a%20p2p%20approach.%0A%20%20Here%20we%20cover%20two%20approaches%20which%20may%20be%20combined%0A%0A%23%23%20References%0A%0A**References%20Overview**%0A%0A%3Ca%20name%3D%22ov1%22%3E%5B1%5D%3C%2Fa%3E%20%5BPart%20I%3A%20What%20to%20build%20next%20in%20Zero%0AKnowledge%3F%5D(https%3A%2F%2Fdelendum.xyz%2F2022%2F11%2F22%2Fwhat-to-build-next-in-zero-knowledge.html)%3A%0AWhat%20are%20the%20problems%20that%20haven%E2%80%99t%20been%20solved%20in%20blockchain%20and%20how%20can%20we%0Aleverage%20zero-knowledge%20proof%20as%20a%20tool%20to%20solve%20these%20problems%3F%0A%0A%3Ca%20name%3D%22ov1%22%3E%5B2%5D%3C%2Fa%3E%20%5BCrosschain%0AFuture%5D(https%3A%2F%2Fgithub.com%2Fisolab-gg%2Fisomorph%2Fblob%2Fmain%2Fdocs%2Fblog%2Fcrosschain-future.mdx)%3A%0AA%20review%20of%20the%20growing%20blockchain%20ecosystem%20and%20the%20role%20of%20zkp%20in%20building%0Atrustless%20bridges.%0A%0A%3Ca%20name%3D%22ov2%22%3E%5B3%5D%3C%2Fa%3E%20%5BTechnical%20Problems%0AOverview%5D(https%3A%2F%2Fgithub.com%2Fisolab-gg%2Fisomorph%2Fblob%2Fmain%2Fdocs%2Fproblems%2Ftechnical-problems-part-1.mdx)%3A%0ATrustless%20Bridging%20Technical%20Problems%20-%20PART%201%3A%20Problem%20Overview%2C%20Consensus%0AProtocols%2C%20Signature%20Schemes.%0A%0A**Reference%20Trustless%20Bridge%20Design**%0A%0A%3Ca%20name%3D%22tb1%22%3E%5B1%5D%3C%2Fa%3E%20%5BSuccinct%3A%20Proof%20of%20Consensus%20Bridging%20between%20Ethereum%0Aand%20Gnosis%20Chain%5D(https%3A%2F%2Fblog.succinct.xyz%2Fblog%2Fproof-of-consensus%2F)%3A%20gas%0Aefficient%20on-chain%20light%20client%20for%20Ethereum%20PoS%2C%20powered%20by%20succinct%0Azero-knowledge%20proofs%20(zkSNARKs)%2C%20allowing%20for%20arbitrary%2C%20trust-minimized%0Across-chain%20communication%20between%20Ethereum%20and%20Gnosis%20Chain.%0A%0A**References%20Block%20Production**%0A%0A%3Ca%20name%3D%22bp1%22%3E%5B1%5D%3C%2Fa%3E%20%5BEIP-3675%3A%20Upgrade%20consensus%20to%0AProof-of-Stake%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-3675%23pow-block-processing)%3A%0ASpecification%20of%20the%20consensus%20mechanism%20upgrade%20on%20Ethereum%20Mainnet%20that%0Aintroduces%20Proof-of-Stake.%0A%0A%3Ca%20name%3D%22bp2%22%3E%5B2%5D%3C%2Fa%3E%20%5BEIP-2982%3A%20Serenity%20Phase%0A0%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-2982)%3A%20Phase%200%20of%20the%20release%20schedule%20of%0ASerenity%2C%20a%20series%20of%20updates%20to%20Ethereum%20a%20scalable%2C%20proof-of-stake%20consensus.%0A%0A%3Ca%20name%3D%22bp3%22%3E%5B3%5D%3C%2Fa%3E%20%5BEthreum%20Consensus%20Specs%20Phase%0A0%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Ftree%2Fdev%2Fspecs%2Fphase0)%3A%0ASpecifications%20for%20Ethereum%202.0%20Phase%200%20including%0A%5Bbeacon-chain%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fbeacon-chain.mdx)%2C%0A%5Bdeposit-contract%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fdeposit-contract.mdx)%2C%0A%5Bfork-choice%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Ffork-choice.mdx)%2C%0A%5Bp2p-interface%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fp2p-interface.mdx)%2C%0A%5Bvalidator%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fvalidator.mdx)%0Aand%0A%5Bweak-subjectivity%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fspecs%2Fphase0%2Fweak-subjectivity.mdx)%0A%0A%3Ca%20name%3D%22bp4%22%3E%5B6%5D%3C%2Fa%3E%20%5BEthereum%20Consensus%20and%20Execution%20Client%0ADistribution%5D(https%3A%2F%2Fclientdiversity.org%2F%23distribution)%3A%20Percentages%20of%20nodes%0Arunning%20client%20types%20for%20both%20Consensus%20(Prysm%2C%20Lighthours%2C%20Nimbus%2C%20Teku)%20and%0AExecution%20(Geth%2C%20Erigon%2C%20Besu%2C%20Nethermind)%20clients.%0A%0A%3Ca%20name%3D%22bp5%22%3E%5B5%5D%3C%2Fa%3E%20%5Bgo-ethereum%20go%0Adocumentation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fethereum%2Fgo-ethereum%40v1.10.26)%3A%0ADocumentation%20for%20Go%20Ethereum%2C%20Official%20Golang%20implementation%20of%20the%20Ethereum%0Aprotocol.%20Which%20is%20an%20execution%20chain%20implementation.%0A%0A%3Ca%20name%3D%22bp6%22%3E%5B6%5D%3C%2Fa%3E%20%5Bprysm%20go%0Adocumentation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2)%3A%0ADocumentation%20for%20prysm%2C%20An%20Ethereum%20Consensus%20Implementation%20Written%20in%20Go.%20A%0Abeacon-chain%20immplementation.%20Also%20see%20%5BPrysm%0ADocumentation%5D(https%3A%2F%2Fdocs.prylabs.network%2Fdocs%2Fgetting-started)%0A%0A%3Ca%20name%3D%22bp7%22%3E%5B7%5D%3C%2Fa%3E%20%5Blighthouse%0Adocumentation%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2)%3A%0ADocumentation%20for%20lighthouse%2C%20written%20in%20Rust.%20A%20beacon-chain%20immplementation.%0A%0A%3Ca%20name%3D%22bp8%22%3E%5B8%5D%3C%2Fa%3E%20%5BEtherum%202.0%20Validators%0AOverview%5D(https%3A%2F%2Fbeaconcha.in%2Fvalidators)%3A%20Live%20Monitoring%20of%20Ethreum%202.0%0AValidators%20from%20beachoncha.in%0A%0A**References%20Technical%20Summary**%0A%0A%3Ca%20name%3D%22ts1%22%3E%5B1%5D%3C%2Fa%3E%20%5BEthereum%20EVM%0Aillustrated%5D(https%3A%2F%2Ftakenobu-hs.github.io%2Fdownloads%2Fethereum_evm_illustrated.pdf)%3A%0AA%20technical%20overview%20of%20Ethereum%20including%20state%2C%20accounts%2C%20transactions%20and%0Amessages%20as%20well%20as%20the%20EVM.%20%5BAppendix%20E%5D(%23appendix-e-data-structures)%20has%20links%0Ato%20type%20definitions%20for%20blocks%2C%20transactions%2C%20state%20etc%20in%20geth.%0A%0A%3Ca%20name%3D%22ts2%22%3E%5B2%5D%3C%2Fa%3E%20%5BBlocks%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fblocks%2F)%3A%0ABlock%20data%20definitions%20including%20attestations%20from%20ethereum.org%0A%0A%3Ca%20name%3D%22ts3%22%3E%5B3%5D%3C%2Fa%3E%20%5Beth1%20block%0Aproposal%5D(https%3A%2F%2Fhackmd.io%2F%40flashbots%2Fmev-in-eth2%23eth1-block-proposal)%3A%0ATechnical%20walkthrough%20of%20how%20blocks%20are%20proposed%20and%20potential%20MEV%20opportunities%0Afrom%20FlashBots.%0A%0A%3Ca%20name%3D%22ts4%22%3E%5B4%5D%3C%2Fa%3E%20%5BAssemble%0ABlock%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Frayonism%2Fblob%2Fmaster%2Fspecs%2Fmerge.md%23assemble-block)%3A%0AEthereum%20Specification%20for%20block%20Assembly%20as%20part%20of%20Rayonism%20--%20The%20Merge%20spec.%0A%0A%3Ca%20name%3D%22ts5%22%3E%5B5%5D%3C%2Fa%3E%20%5BPrysm%20running%20a%0Anode%5D(https%3A%2F%2Fdocs.prylabs.network%2Fdocs%2Finstall%2Finstall-with-script)%3A%0AOperational%20procedures%20for%20Validators%20by%20Prysm.%20Note%20validators%20run%20both%20the%0Abeacon%20chain(consensus)%20and%20a%20geth%20node(execution)%0A%0A%3Ca%20name%3D%22ts6%22%3E%5B6%5D%3C%2Fa%3E%5BThe%20Beacon%20Chain%20Ethereum%202.0%20explainer%20you%20need%20to%20read%0Afirst%5D(https%3A%2F%2Fethos.dev%2Fbeacon-chain)%3A%20Detailed%20walk%20through%20og%20Ethereum%202.0%0Ablock%20production%20including%20slots%2C%20epochs%2C%20validators%2C%20commitees%20and%20finality.%0A%0A%3Ca%20name%3D%22ts6b%22%3E%5B6%5D%3C%2Fa%3E%5BThe%20Beacon%20Chain%20Ethereum%202.0%20explainer%20you%20need%20to%20read%0Afirst%5D(https%3A%2F%2Fethos.dev%2Fbeacon-chain)%3A%20Detailed%20walk%20through%20og%20Ethereum%202.0%0Ablock%20production%20including%20slots%2C%20epochs%2C%20validators%2C%20commitees%20and%20finality.%0A%0A%3Ca%20name%3D%22ts7%22%3E%5B7%5D%3C%2Fa%3E%20%5BEtherum%202.0%20Validators%0AOverview%5D(https%3A%2F%2Fbeaconcha.in%2Fvalidators)%3A%20Live%20Monitoring%20of%20Ethreum%202.0%0AValidators%20from%20beachoncha.in%0A%0A%3Ca%20name%3D%22ts8%22%3E%5B8%5D%3C%2Fa%3E%5BBLS%0ASignatures%5D(https%3A%2F%2Feth2book.info%2Fbellatrix%2Fpart2%2Fbuilding_blocks%2Fsignatures%2F)%3A%0ADetailed%20walkthrough%20of%20BLS%20Signatures%20and%20how%20they%20can%20be%20used%20in%20aggregation.%0A%0A%3Ca%20name%3D%22ts9%22%3E%5B8%5D%3C%2Fa%3E%5BAttestation%20Inclusion%0ALifecycle%5D(https%3A%2F%2Fkb.beaconcha.in%2Fattestation%23attestation-inclusion-lifecycle)%3A%0AHigh%20Level%20overview%20of%20the%20attestation%20life%20cycle%20including%20geeration%2C%0Apropogation%2C%20aggregation%20and%20inclusion.Attest%0A%0A%3Ca%20name%3D%22ts10%22%3E%5Bts10%5D%3C%2Fa%3E%20%5BBeacon%20Chain%20Proposal%3A%20Sync%0AComittees%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2FHF1_proposal%23Sync-committees)%3A%0AFor%20each%20period%20(~27%20hours)%2C%201024%20validators%20are%20randomly%20selected%20to%20be%20part%20of%0Athe%20sync%20committee%20during%20that%20period.%20Validators%20in%20the%20sync%20committee%20would%0Apublish%20signatures%20attesting%20to%20the%20current%20head.%20These%20signatures%20would%20be%0Abroadcasted%20as%20part%20of%20a%20LightClientUpdate%20object%20that%20could%20help%20light%20clients%0Afind%20the%20head%2C%20and%20would%20be%20included%20in%20the%20beacon%20chain%20to%20be%20rewarded.%0A%0A%3Ca%20name%3D%22ts11%22%3E%5Bts11%5D%3C%2Fa%3E%20%5BAltair%20Light%20Client%20--%20Sync%0AProtocol%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2FHF1_proposal%23Sync-committees)%3A%0AThis%20document%20suggests%20a%20minimal%20light%20client%20design%20for%20the%20beacon%20chain%20that%0Auses%20sync%20committees.%0A%0A%3Ca%20name%3D%22ts12%22%3E%5Bts12%5D%3C%2Fa%3E%20%5BEthereum%20Builder%20Specifications%3A%20Honest%0AValidator%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fbuilder-specs%2Fblob%2Fmain%2Fspecs%2Fvalidator.mdx)%3A%0Aexplains%20the%20way%20in%20which%20a%20beacon%20chain%20validator%20is%20expected%20to%20use%20the%0ABuilder%20spec%20to%20participate%20in%20an%20external%20builder%20network.%0A%0A%3Ca%20name%3D%22ts13%22%3E%5Bts13%5D%3C%2Fa%3E%20%5BFlashbots%3A%0Amev-boost%5D(https%3A%2F%2Fgithub.com%2Fflashbots%2Fmev-boost)%3A%20open%20source%20middleware%20run%0Aby%20validators%20to%20access%20a%20competitive%20block-building%20market.%0A%0A%3Ca%20name%3D%22ts14%22%3E%5Bts14%5D%3C%2Fa%3E%20%5BA%20note%20on%20Ethereum%202.0%20phase%200%20validator%0Alifecycle%5D(https%3A%2F%2Fnotes.ethereum.org%2F7CFxjwMgQSWOHIxLgJP2Bw%23A-note-on-Ethereum-20-phase-0-validator-lifecycle)%3A%0Adescribes%20the%20concept%20of%20validator%20status%20epochs%20and%20the%20cases%20of%20validator%0Alifecycle%20in%20the%20view%20of%20%E2%80%9Cvalidator%20status%20transition%E2%80%9D%20in%20phase%200.%0A%0A%23%23%20Appendices%0A%0A%23%23%23%20Appendix%20A%3A%20Signing%20Libraries%0A%0A%23%23%23%20Appendix%20B%3A%20Proving%20and%20Verification%20Mechanisms%0A%0A%23%23%23%23%20%5Beth-proof-of-consensus%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus)%3A%20Proof%20of%20Consensus%20for%20Ethereum%20by%20succinctlabs%0A%0ACircuits%0A%0A-%20%5Baggregate_bls_verify.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Faggregate_bls_verify.circom)%3A%20Computes%20an%20aggregate%20BLS12-381%20public%20key%20over%20a%20set%20of%20public%20keys%20and%20a%20bitmask%0A-%20%5Bassert_valid_signed_header.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fassert_valid_signed_header.circom)%0A-%20%5Bpubkey_poseidon.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fpubkey_poseidon.circom)%3A%20Computes%20the%20Poseidon%20merkle%20root%20of%20a%20list%20of%20field%20elements%0A-%20%5Bsha256_bytes.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fsha256_bytes.circom)%3A%20Wrapper%20around%20SHA256%20to%20support%20bytes%20as%20input%20instead%20of%20bits%0A-%20%5Bsimple_serialize.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fsimple_serialize.circom)%3A%20Helper%20function%20to%20implement%20SSZArray%0A-%20%5Bsync_committee_committments.circom%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcircuits%2Fcircuits%2Fsync_committee_committments.circom)%3A%20Asserts%20that%20the%20byte%20representation%20of%20a%20BLS12-381%20public%20key's%20x-coordinate%20matches%20the%20BigInt%20representation%0A%0AVerification%0A%0A-%20%5BAMB%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Famb)%3A%20Arbitrary%20Message%20Passing%0A-%20%5BTrustlessAMB.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Famb%2FTrustlessAMB.sol)%3A%20sends%20and%20executes%20messages%0A-%20%5BTrustlessAMBStorage.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Famb%2FTrustlessAMBStorage.sol)%3A%20Storage%20for%20messages%20between%20two%20chains%0A-%20%5Bbridge%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Fbridge)%3A%20Allows%20for%20the%20deposit%20and%20withdrawal%20of%20ERC20%20tokens%0A-%20%5BBridge.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Fbridge%2FBridge.sol)%3A%20Deposit%20and%20withdraw%20functionality%0A-%20%5BToken.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Fbridge%2FTokens.sol)%3A%20ERC20%20bridge%20token%20definitions%0A-%20%5Blightclient%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Flightclient)%0A-%20%5BBLSAggregatedSignatureVerifier.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBLSAggregatedSignatureVerifier.sol)%3A%20Verifies%20BLS%20aggregated%20signature%20proofs%0A-%20%5BBeaconLightClient.sol%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol)%3A%20Beacon%20Light%20Client%20Functionality%20including%0A%20%20-%20%5Bstep(LightClientUpdate%20memory%20update)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L86)%3A%20Updates%20the%20head%20given%20a%20finalized%20light%20client%20update.%0A%20%20-%20%5Bfunction%20updateSyncCommittee(LightClientUpdate%20memory%20update%2C%20bytes32%20nextSyncCommitteePoseidon%2C%20Groth16Proof%20memory%20commitmentMappingProof)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L102)%3A%20Set%20the%20sync%20committee%20validator%20set%20root%20for%20the%20next%20sync%20commitee%20period.%0A%20%20-%20%5Bfunction%20forceUpdate()%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L131)%3A%20Finalizes%20the%20optimistic%20update%20and%20sets%20the%20next%20sync%20committee%20if%20no%20finalized%20updates%20have%20been%20received%20for%20a%20period.%0A%20%20-%20%5Bfunction%20processLightClientUpdate(LightClientUpdate%20memory%20update)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L131)%3A%20Implements%20shared%20logic%20for%20processing%20light%20client%20updates.%0A%20%20-%20%5Bfunction%20zkMapSSZToPoseidon(bytes32%20sszCommitment%2C%20bytes32%20poseidonCommitment%2C%20Groth16Proof%20memory%20proof)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L190)%3A%20Maps%20a%20simple%20serialize%20merkle%20root%20to%20a%20poseidon%20merkle%20root%20with%20a%20zkSNARK.%20The%20proof%20asserts%20that%3A%20SimpleSerialize(syncCommittee)%20%3D%3D%20Poseidon(syncCommittee).%0A%20%20-%20%5Bfunction%20zkBLSVerify(bytes32%20signingRoot%2C%20bytes32%20syncCommitteeRoot%2C%20uint256%20claimedParticipation%2C%20Groth16Proof%20memory%20proof)%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Fblob%2Fmain%2Fcontracts%2Fsrc%2Flightclient%2FBeaconLightClient.sol%23L208)%3A%20Does%20an%20aggregated%20BLS%20signature%20verification%20with%20a%20zkSNARK.%0A-%20%5Bscripts%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Fscripts)%3A%20A%20collection%20of%20%5Bforge-scripts%5D(https%3A%2F%2Fbook.getfoundry.sh%2Freference%2Fforge%2Fforge-script)%20for%20contract%20deployment.%0A%0A%23%23%23%20Appendix%20C%3A%20Topics%0A%0ABeacon%20Chain%20Topics%20%5BPrysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fp2p%2Ftopics.go)%0A%0Apackage%20p2p%0A%0Aconst%20(%0A%2F%2F%20GossipProtocolAndDigest%20represents%20the%20protocol%20and%20fork%20digest%20prefix%20in%20a%20gossip%20topic.%0AGossipProtocolAndDigest%20%3D%20%22%2Feth2%2F%25x%2F%22%0A%0A%2F%2F%20Message%20Types%0A%2F%2F%0A%2F%2F%20GossipAttestationMessage%20is%20the%20name%20for%20the%20attestation%20message%20type.%20It%20is%0A%2F%2F%20specially%20extracted%20so%20as%20to%20determine%20the%20correct%20message%20type%20from%20an%20attestation%0A%2F%2F%20subnet.%0AGossipAttestationMessage%20%3D%20%22beacon_attestation%22%0A%2F%2F%20GossipSyncCommitteeMessage%20is%20the%20name%20for%20the%20sync%20committee%20message%20type.%20It%20is%0A%2F%2F%20specially%20extracted%20so%20as%20to%20determine%20the%20correct%20message%20type%20from%20a%20sync%20committee%0A%2F%2F%20subnet.%0AGossipSyncCommitteeMessage%20%3D%20%22sync_committee%22%0A%2F%2F%20GossipBlockMessage%20is%20the%20name%20for%20the%20block%20message%20type.%0AGossipBlockMessage%20%3D%20%22beacon_block%22%0A%2F%2F%20GossipExitMessage%20is%20the%20name%20for%20the%20voluntary%20exit%20message%20type.%0AGossipExitMessage%20%3D%20%22voluntary_exit%22%0A%2F%2F%20GossipProposerSlashingMessage%20is%20the%20name%20for%20the%20proposer%20slashing%20message%20type.%0AGossipProposerSlashingMessage%20%3D%20%22proposer_slashing%22%0A%2F%2F%20GossipAttesterSlashingMessage%20is%20the%20name%20for%20the%20attester%20slashing%20message%20type.%0AGossipAttesterSlashingMessage%20%3D%20%22attester_slashing%22%0A%2F%2F%20GossipAggregateAndProofMessage%20is%20the%20name%20for%20the%20attestation%20aggregate%20and%20proof%20message%20type.%0AGossipAggregateAndProofMessage%20%3D%20%22beacon_aggregate_and_proof%22%0A%2F%2F%20GossipContributionAndProofMessage%20is%20the%20name%20for%20the%20sync%20contribution%20and%20proof%20message%20type.%0AGossipContributionAndProofMessage%20%3D%20%22sync_committee_contribution_and_proof%22%0A%2F%2F%20GossipBlsToExecutionChangeMessage%20is%20the%20name%20for%20the%20bls%20to%20execution%20change%20message%20type.%0AGossipBlsToExecutionChangeMessage%20%3D%20%22bls_to_execution_change%22%0A%0A%2F%2F%20Topic%20Formats%0A%2F%2F%0A%2F%2F%20AttestationSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20attestation%20subnet.%0AAttestationSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipAttestationMessage%20%2B%20%22_%25d%22%0A%2F%2F%20SyncCommitteeSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20sync%20committee%20subnet.%0ASyncCommitteeSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipSyncCommitteeMessage%20%2B%20%22_%25d%22%0A%2F%2F%20BlockSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20block%20subnet.%0ABlockSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipBlockMessage%0A%2F%2F%20ExitSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20voluntary%20exit%20subnet.%0AExitSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipExitMessage%0A%2F%2F%20ProposerSlashingSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20proposer%20slashing%20subnet.%0AProposerSlashingSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipProposerSlashingMessage%0A%2F%2F%20AttesterSlashingSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20attester%20slashing%20subnet.%0AAttesterSlashingSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipAttesterSlashingMessage%0A%2F%2F%20AggregateAndProofSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20aggregate%20and%20proof%20subnet.%0AAggregateAndProofSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipAggregateAndProofMessage%0A%2F%2F%20SyncContributionAndProofSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20sync%20aggregate%20and%20proof%20subnet.%0ASyncContributionAndProofSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipContributionAndProofMessage%0A%2F%2F%20BlsToExecutionChangeSubnetTopicFormat%20is%20the%20topic%20format%20for%20the%20bls%20to%20execution%20change%20subnet.%0ABlsToExecutionChangeSubnetTopicFormat%20%3D%20GossipProtocolAndDigest%20%2B%20GossipBlsToExecutionChangeMessage%0A)%0A%0A%23%23%23%20Appendix%20D%3A%20gRPC%20and%20API's%0A%0A%5BBeaconcha.in%20ETH2%20API%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html)%0A%0A%23%23%23%20Appendix%20E%3A%20Data%20Structures%0A%0A-%20Block%20Structure%20from%20%5Bgo-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Frelease%2F1.9%2Fconsensus%2Fethash%2Fconsensus.go)%0A%0A%60%60%60%0A%0A%2F%2F%20SealHash%20returns%20the%20hash%20of%20a%20block%20prior%20to%20it%20being%20sealed.%0Afunc%20(ethash%20*Ethash)%20SealHash(header%20*types.Header)%20(hash%20common.Hash)%20%7B%0Ahasher%20%3A%3D%20sha3.NewLegacyKeccak256()%0A%0Arlp.Encode(hasher%2C%20%5B%5Dinterface%7B%7D%7B%0Aheader.ParentHash%2C%0Aheader.UncleHash%2C%0Aheader.Coinbase%2C%0Aheader.Root%2C%0Aheader.TxHash%2C%0Aheader.ReceiptHash%2C%0Aheader.Bloom%2C%0Aheader.Difficulty%2C%0Aheader.Number%2C%0Aheader.GasLimit%2C%0Aheader.GasUsed%2C%0Aheader.Time%2C%0Aheader.Extra%2C%0A%7D)%0Ahasher.Sum(hash%5B%3A0%5D)%0Areturn%20hash%0A%7D%0A%0A%60%60%60%0A%0A-%20Blocks%20Headers%20get%20forwarded%20to%20the%20Beacon%20chain%20once%20they%20pass%20%5Bbeacon%20consensus%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fconsensus%2Fbeacon%2Fconsensus.go)%0A-%20The%20Beacon%20chain%20embeds%20the%20EthChain%20Header%20into%20a%20%5BBeaconBlock%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconsensus-types%2Fblocks%2Ftypes.go%23L43)%0A%0ABeaconBlockBody%20from%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconsensus-types%2Fblocks%2Ftypes.go)%20(golang)%0A%0A%60%60%60%0A%0A%2F%2F%20BeaconBlockBody%20is%20the%20main%20beacon%20block%20body%20structure.%20It%20can%20represent%20any%20block%20type.%0Atype%20BeaconBlockBody%20struct%20%7B%0Aversion%20int%0AisBlinded%20bool%0ArandaoReveal%20%5Bfield_params.BLSSignatureLength%5Dbyte%0Aeth1Data%20*eth.Eth1Data%0Agraffiti%20%5Bfield_params.RootLength%5Dbyte%0AproposerSlashings%20%5B%5D*eth.ProposerSlashing%0AattesterSlashings%20%5B%5D*eth.AttesterSlashing%0Aattestations%20%5B%5D*eth.Attestation%0Adeposits%20%5B%5D*eth.Deposit%0AvoluntaryExits%20%5B%5D*eth.SignedVoluntaryExit%0AsyncAggregate%20*eth.SyncAggregate%0AexecutionPayload%20*engine.ExecutionPayload%0AexecutionPayloadHeader%20%5C*engine.ExecutionPayloadHeader%0A%7D%0A%0A%2F%2F%20BeaconBlock%20is%20the%20main%20beacon%20block%20structure.%20It%20can%20represent%20any%20block%20type.%0Atype%20BeaconBlock%20struct%20%7B%0Aversion%20int%0Aslot%20types.Slot%0AproposerIndex%20types.ValidatorIndex%0AparentRoot%20%5Bfield_params.RootLength%5Dbyte%0AstateRoot%20%5Bfield_params.RootLength%5Dbyte%0Abody%20%5C*BeaconBlockBody%0A%7D%0A%0A%2F%2F%20SignedBeaconBlock%20is%20the%20main%20signed%20beacon%20block%20structure.%20It%20can%20represent%20any%20block%20type.%0Atype%20SignedBeaconBlock%20struct%20%7B%0Aversion%20int%0Ablock%20%5C*BeaconBlock%0Asignature%20%5Bfield_params.BLSSignatureLength%5Dbyte%0A%7D%0A%0A%60%60%60%0A%0AEth1Data%20from%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Fprysm%2Fv1alpha1%2Fpowchain.pb.go%23L24)%20(golang)%0A%0A%60%60%60%0A%0Atype%20ETH1ChainData%20struct%20%7B%0Astate%20protoimpl.MessageState%0AsizeCache%20protoimpl.SizeCache%0AunknownFields%20protoimpl.UnknownFields%0A%0ACurrentEth1Data%20*LatestETH1Data%20%60protobuf%3A%22bytes%2C1%2Copt%2Cname%3Dcurrent_eth1_data%2Cjson%3DcurrentEth1Data%2Cproto3%22%20json%3A%22current_eth1_data%2Comitempty%22%60%0AChainstartData%20*ChainStartData%20%60protobuf%3A%22bytes%2C2%2Copt%2Cname%3Dchainstart_data%2Cjson%3DchainstartData%2Cproto3%22%20json%3A%22chainstart_data%2Comitempty%22%60%0ABeaconState%20*BeaconState%20%60protobuf%3A%22bytes%2C3%2Copt%2Cname%3Dbeacon_state%2Cjson%3DbeaconState%2Cproto3%22%20json%3A%22beacon_state%2Comitempty%22%60%0ATrie%20*SparseMerkleTrie%20%60protobuf%3A%22bytes%2C4%2Copt%2Cname%3Dtrie%2Cproto3%22%20json%3A%22trie%2Comitempty%22%60%0ADepositContainers%20%5B%5D%5C*DepositContainer%20%60protobuf%3A%22bytes%2C5%2Crep%2Cname%3Ddeposit_containers%2Cjson%3DdepositContainers%2Cproto3%22%20json%3A%22deposit_containers%2Comitempty%22%60%0A%7D%0A%0Atype%20LatestETH1Data%20struct%20%7B%0Astate%20protoimpl.MessageState%0AsizeCache%20protoimpl.SizeCache%0AunknownFields%20protoimpl.UnknownFields%0A%0ABlockHeight%20uint64%20%60protobuf%3A%22varint%2C2%2Copt%2Cname%3Dblock_height%2Cjson%3DblockHeight%2Cproto3%22%20json%3A%22block_height%2Comitempty%22%60%0ABlockTime%20uint64%20%60protobuf%3A%22varint%2C3%2Copt%2Cname%3Dblock_time%2Cjson%3DblockTime%2Cproto3%22%20json%3A%22block_time%2Comitempty%22%60%0ABlockHash%20%5B%5Dbyte%20%60protobuf%3A%22bytes%2C4%2Copt%2Cname%3Dblock_hash%2Cjson%3DblockHash%2Cproto3%22%20json%3A%22block_hash%2Comitempty%22%60%0ALastRequestedBlock%20uint64%20%60protobuf%3A%22varint%2C5%2Copt%2Cname%3Dlast_requested_block%2Cjson%3DlastRequestedBlock%2Cproto3%22%20json%3A%22last_requested_block%2Comitempty%22%60%0A%7D%0A%0A%60%60%60%0A%0ABeaconBlockAltair%20from%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Fblob%2Fstable%2Fconsensus%2Ftypes%2Fsrc%2Fbeacon_block.rs%23L407)%20rust%0A%0A%60%60%60%0A%0A%20%20%20%20%2F%2F%2F%20Return%20an%20Altair%20block%20where%20the%20block%20has%20maximum%20size.%0A%20%20%20%20pub%20fn%20full(spec%3A%20%26ChainSpec)%20-%3E%20Self%20%7B%0A%20%20%20%20%20%20%20%20let%20base_block%3A%20BeaconBlockBase%3C_%2C%20Payload%3E%20%3D%20BeaconBlockBase%3A%3Afull(spec)%3B%0A%20%20%20%20%20%20%20%20let%20sync_aggregate%20%3D%20SyncAggregate%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20sync_committee_signature%3A%20AggregateSignature%3A%3Aempty()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20sync_committee_bits%3A%20BitVector%3A%3Adefault()%2C%0A%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20BeaconBlockAltair%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20slot%3A%20spec.genesis_slot%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20proposer_index%3A%200%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20parent_root%3A%20Hash256%3A%3Azero()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20state_root%3A%20Hash256%3A%3Azero()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20body%3A%20BeaconBlockBodyAltair%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20proposer_slashings%3A%20base_block.body.proposer_slashings%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20attester_slashings%3A%20base_block.body.attester_slashings%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20attestations%3A%20base_block.body.attestations%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20deposits%3A%20base_block.body.deposits%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20voluntary_exits%3A%20base_block.body.voluntary_exits%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20sync_aggregate%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20randao_reveal%3A%20Signature%3A%3Aempty()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20eth1_data%3A%20Eth1Data%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20deposit_root%3A%20Hash256%3A%3Azero()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20block_hash%3A%20Hash256%3A%3Azero()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20deposit_count%3A%200%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20graffiti%3A%20Graffiti%3A%3Adefault()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20_phantom%3A%20PhantomData%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20Beacon%20State%20Data%20Structures%20from%20Prysm%0A%0A%60%60%60%0A%0Atype%20BeaconState%20interface%20%7B%0ASpecParametersProvider%0AReadOnlyBeaconState%0AWriteOnlyBeaconState%0ACopy()%20BeaconState%0AHashTreeRoot(ctx%20context.Context)%20(%5B32%5Dbyte%2C%20error)%0AFutureForkStub%0AStateProver%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20ReadOnlyBeaconState%20interface%20%7B%0AReadOnlyBlockRoots%0AReadOnlyStateRoots%0AReadOnlyRandaoMixes%0AReadOnlyEth1Data%0AReadOnlyValidators%0AReadOnlyBalances%0AReadOnlyCheckpoint%0AReadOnlyAttestations%0AToProtoUnsafe()%20interface%7B%7D%0AToProto()%20interface%7B%7D%0AGenesisTime()%20uint64%0AGenesisValidatorsRoot()%20%5B%5Dbyte%0ASlot()%20types.Slot%0AFork()%20*ethpb.Fork%0ALatestBlockHeader()%20*ethpb.BeaconBlockHeader%0AHistoricalRoots()%20%5B%5D%5B%5Dbyte%0ASlashings()%20%5B%5Duint64%0AFieldReferencesCount()%20map%5Bstring%5Duint64%0AMarshalSSZ()%20(%5B%5Dbyte%2C%20error)%0AIsNil()%20bool%0AVersion()%20int%0ALatestExecutionPayloadHeader()%20(interfaces.ExecutionData%2C%20error)%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20ReadOnlyValidators%20interface%20%7B%0AValidators()%20%5B%5D*ethpb.Validator%0AValidatorAtIndex(idx%20types.ValidatorIndex)%20(*ethpb.Validator%2C%20error)%0AValidatorAtIndexReadOnly(idx%20types.ValidatorIndex)%20(ReadOnlyValidator%2C%20error)%0AValidatorIndexByPubkey(key%20%5Bfieldparams.BLSPubkeyLength%5Dbyte)%20(types.ValidatorIndex%2C%20bool)%0APubkeyAtIndex(idx%20types.ValidatorIndex)%20%5Bfieldparams.BLSPubkeyLength%5Dbyte%0ANumValidators()%20int%0AReadFromEveryValidator(f%20func(idx%20int%2C%20val%20ReadOnlyValidator)%20error)%20error%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20ReadOnlyRandaoMixes%20interface%20%7B%0ARandaoMixes()%20%5B%5D%5B%5Dbyte%0ARandaoMixAtIndex(idx%20uint64)%20(%5B%5Dbyte%2C%20error)%0ARandaoMixesLength()%20int%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20WriteOnlyBeaconState%20interface%20%7B%0AWriteOnlyBlockRoots%0AWriteOnlyStateRoots%0AWriteOnlyRandaoMixes%0AWriteOnlyEth1Data%0AWriteOnlyValidators%0AWriteOnlyBalances%0AWriteOnlyCheckpoint%0AWriteOnlyAttestations%0ASetGenesisTime(val%20uint64)%20error%0ASetGenesisValidatorsRoot(val%20%5B%5Dbyte)%20error%0ASetSlot(val%20types.Slot)%20error%0ASetFork(val%20*ethpb.Fork)%20error%0ASetLatestBlockHeader(val%20*ethpb.BeaconBlockHeader)%20error%0ASetHistoricalRoots(val%20%5B%5D%5B%5Dbyte)%20error%0ASetSlashings(val%20%5B%5Duint64)%20error%0AUpdateSlashingsAtIndex(idx%2C%20val%20uint64)%20error%0AAppendHistoricalRoots(root%20%5B32%5Dbyte)%20error%0ASetLatestExecutionPayloadHeader(payload%20interfaces.ExecutionData)%20error%0ASetWithdrawalQueue(val%20%5B%5D*enginev1.Withdrawal)%20error%0AAppendWithdrawal(val%20*enginev1.Withdrawal)%20error%0ASetNextWithdrawalIndex(i%20uint64)%20error%0ASetNextPartialWithdrawalValidatorIndex(i%20types.ValidatorIndex)%20error%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20WriteOnlyValidators%20interface%20%7B%0ASetValidators(val%20%5B%5D*ethpb.Validator)%20error%0AApplyToEveryValidator(f%20func(idx%20int%2C%20val%20*ethpb.Validator)%20(bool%2C%20*ethpb.Validator%2C%20error))%20error%0AUpdateValidatorAtIndex(idx%20types.ValidatorIndex%2C%20val%20*ethpb.Validator)%20error%0AAppendValidator(val%20%5C*ethpb.Validator)%20error%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0Atype%20WriteOnlyRandaoMixes%20interface%20%7B%0ASetRandaoMixes(val%20%5B%5D%5B%5Dbyte)%20error%0AUpdateRandaoMixesAtIndex(idx%20uint64%2C%20val%20%5B%5Dbyte)%20error%0A%7D%0A%0A%60%60%60%0A%0A%5BValidator%5D(https%3A%2F%2Fpkg.go.dev%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fv3%40v3.1.2%2Fproto%2Fprysm%2Fv1alpha1%23Validator)%20information%0A%0A%60%60%60%0A%0Atype%20Validator%20struct%20%7B%0APublicKey%20%5B%5Dbyte%20%60protobuf%3A%22bytes%2C1%2Copt%2Cname%3Dpublic_key%2Cjson%3DpublicKey%2Cproto3%22%20json%3A%22public_key%2Comitempty%22%20spec-name%3A%22pubkey%22%20ssz-size%3A%2248%22%60%0AWithdrawalCredentials%20%5B%5Dbyte%20%60%60%2F*%20138-byte%20string%20literal%20not%20displayed%20*%2F%0A%20EffectiveBalance%20%20%20%20%20%20%20%20%20%20%20uint64%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%60protobuf%3A%22varint%2C3%2Copt%2Cname%3Deffective_balance%2Cjson%3DeffectiveBalance%2Cproto3%22%20json%3A%22effective_balance%2Comitempty%22%60%0A%20Slashed%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20bool%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%60protobuf%3A%22varint%2C4%2Copt%2Cname%3Dslashed%2Cproto3%22%20json%3A%22slashed%2Comitempty%22%60%0A%20ActivationEligibilityEpoch%20github_com_prysmaticlabs_prysm_v3_consensus_types_primitives.Epoch%60%60%20%2F_%20221-byte%20string%20literal%20not%20displayed%20_%2F%0AActivationEpoch%20github*com_prysmaticlabs_prysm_v3_consensus_types_primitives.Epoch%20%60%2F*%20186-byte%20string%20literal%20not%20displayed%20_%2F%0AExitEpoch%20github_com_prysmaticlabs_prysm_v3_consensus_types_primitives.Epoch%60%20%2F_%20168-byte%20string%20literal%20not%20displayed%20_%2F%0AWithdrawableEpoch%20github_com_prysmaticlabs_prysm_v3_consensus_types_primitives.Epoch%20%60%60%20%2F_%20192-byte%20string%20literal%20not%20displayed%20%5C_%2F%0A%2F%2F%20contains%20filtered%20or%20unexported%20fields%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20%5Bweb3signer_types%20from%20prysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fvalidator%2Fkeymanager%2Fremote-web3signer%2Fv1%2Fweb3signer_types.go%23L107)%0A%0A%60%60%60%0A%0A%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%0A%2F%2F%20sub%20properties%20of%20Sign%20Requests%20%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%0A%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%0A%0A%2F%2F%20ForkInfo%20a%20sub%20property%20object%20of%20the%20Sign%20request%0Atype%20ForkInfo%20struct%20%7B%0AFork%20%5C*Fork%20%60json%3A%22fork%22%60%0AGenesisValidatorsRoot%20hexutil.Bytes%20%60json%3A%22genesis_validators_root%22%60%0A%7D%0A%0A%2F%2F%20Fork%20a%20sub%20property%20of%20ForkInfo.%0Atype%20Fork%20struct%20%7B%0APreviousVersion%20hexutil.Bytes%20%60json%3A%22previous_version%22%60%0ACurrentVersion%20hexutil.Bytes%20%60json%3A%22current_version%22%60%0AEpoch%20string%20%60json%3A%22epoch%22%60%20%2F_uint64_%2F%0A%7D%0A%0A%2F%2F%20AggregationSlot%20a%20sub%20property%20of%20AggregationSlotSignRequest.%0Atype%20AggregationSlot%20struct%20%7B%0ASlot%20string%20%60json%3A%22slot%22%60%0A%7D%0A%0A%2F%2F%20AggregateAndProof%20a%20sub%20property%20of%20AggregateAndProofSignRequest.%0Atype%20AggregateAndProof%20struct%20%7B%0AAggregatorIndex%20string%20%60json%3A%22aggregator_index%22%60%20%2F_%20uint64%20_%2F%0AAggregate%20_Attestation%20%60json%3A%22aggregate%22%60%0ASelectionProof%20hexutil.Bytes%20%60json%3A%22selection_proof%22%60%20%2F_%2096%20bytes%20_%2F%0A%7D%0A%0A%2F%2F%20Attestation%20a%20sub%20property%20of%20AggregateAndProofSignRequest.%0Atype%20Attestation%20struct%20%7B%0AAggregationBits%20hexutil.Bytes%20%60json%3A%22aggregation_bits%22%60%20%2F_hex%20bitlist_%2F%0AData%20%5C*AttestationData%20%60json%3A%22data%22%60%0ASignature%20hexutil.Bytes%20%60json%3A%22signature%22%60%0A%7D%0A%0A%2F%2F%20AttestationData%20a%20sub%20property%20of%20Attestation.%0Atype%20AttestationData%20struct%20%7B%0ASlot%20string%20%60json%3A%22slot%22%60%20%2F_%20uint64%20_%2F%0AIndex%20string%20%60json%3A%22index%22%60%20%2F_%20uint64%20_%2F%20%2F%2F%20Prysm%20uses%20CommitteeIndex%20but%20web3signer%20uses%20index.%0ABeaconBlockRoot%20hexutil.Bytes%20%60json%3A%22beacon_block_root%22%60%0ASource%20*Checkpoint%20%60json%3A%22source%22%60%0ATarget%20*Checkpoint%20%60json%3A%22target%22%60%0A%7D%0A%0A%2F%2F%20Checkpoint%20a%20sub%20property%20of%20AttestationData.%0Atype%20Checkpoint%20struct%20%7B%0AEpoch%20string%20%60json%3A%22epoch%22%60%0ARoot%20string%20%60json%3A%22root%22%60%0A%7D%0A%0A%60%60%60%0A%0A%5Battestation.proto%20from%20prysm%20(Message%20Structure)%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Fprysm%2Fv1alpha1%2Fattestation.proto)%0A%0A%60%60%60%0A%0Amessage%20AttestationData%20%7B%0A%2F%2F%20Attestation%20data%20includes%20information%20on%20Casper%20the%20Friendly%20Finality%20Gadget's%20votes%0A%2F%2F%20See%3A%20https%3A%2F%2Farxiv.org%2Fpdf%2F1710.09437.pdf%0A%0A%20%20%20%20%2F%2F%20Slot%20of%20the%20attestation%20attesting%20for.%0A%20%20%20%20uint64%20slot%20%3D%201%20%5B(ethereum.eth.ext.cast_type)%20%3D%20%22github.com%2Fprysmaticlabs%2Fprysm%2Fv3%2Fconsensus-types%2Fprimitives.Slot%22%5D%3B%0A%0A%20%20%20%20%2F%2F%20The%20committee%20index%20that%20submitted%20this%20attestation.%0A%20%20%20%20uint64%20committee_index%20%3D%202%20%20%5B(ethereum.eth.ext.cast_type)%20%3D%20%22github.com%2Fprysmaticlabs%2Fprysm%2Fv3%2Fconsensus-types%2Fprimitives.CommitteeIndex%22%5D%3B%0A%0A%20%20%20%20%2F%2F%2032%20byte%20root%20of%20the%20LMD%20GHOST%20block%20vote.%0A%20%20%20%20bytes%20beacon_block_root%20%3D%203%20%5B(ethereum.eth.ext.ssz_size)%20%3D%20%2232%22%5D%3B%0A%0A%20%20%20%20%2F%2F%20The%20most%20recent%20justified%20checkpoint%20in%20the%20beacon%20state%0A%20%20%20%20Checkpoint%20source%20%3D%204%3B%0A%0A%20%20%20%20%2F%2F%20The%20checkpoint%20attempting%20to%20be%20justified%20for%20the%20current%20epoch%20and%20its%20epoch%20boundary%20block%0A%20%20%20%20Checkpoint%20target%20%3D%205%3B%0A%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%20Appendix%20F%3A%20Sample%20Data%0A%0A%23%23%23%23%20Epoch%20Data%20for%20167040%0A%0AFollowing%20is%20the%20Epoch%20Data%20for%20167040%0AIt%20can%20be%20retrieved%20from%20%5Bhere%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html%23%2FEpoch%2Fget_api_v1_epoch__epoch_)%20or%20by%20using%20this%20curl%20command%0A%0A%60curl%20-X%20'GET'%20%5C%0A%20%20'https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fepoch%2F167040'%20%5C%0A%20%20-H%20'accept%3A%20application%2Fjson'%60%0A%0AResponse%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%7B%0A%22attestationscount%22%3A%203457%2C%0A%22attesterslashingscount%22%3A%200%2C%0A%22averagevalidatorbalance%22%3A%2033899775551%2C%0A%22blockscount%22%3A%2032%2C%0A%22depositscount%22%3A%200%2C%0A%22eligibleether%22%3A%2015596542000000000%2C%0A%22epoch%22%3A%20167040%2C%0A%22finalized%22%3A%20true%2C%0A%22globalparticipationrate%22%3A%200.9963188171386719%2C%0A%22missedblocks%22%3A%200%2C%0A%22orphanedblocks%22%3A%200%2C%0A%22proposedblocks%22%3A%2032%2C%0A%22proposerslashingscount%22%3A%200%2C%0A%22scheduledblocks%22%3A%200%2C%0A%22totalvalidatorbalance%22%3A%2016522615004645864%2C%0A%22validatorscount%22%3A%20487396%2C%0A%22voluntaryexitscount%22%3A%200%2C%0A%22votedether%22%3A%2015539128000000000%0A%7D%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20Block%20Data%20for%20Slot%205%2C330%2C592%0A%0AFollowing%20is%20the%20Block%20Data%20for%20Slot%205%2C330%2C592%0AIt%20can%20be%20retrieved%20from%20%5Bhere%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html%23%2FBlock%2Fget_api_v1_block__slotOrHash_)%20or%20by%20using%20this%20curl%20command%0A%0A%60curl%20-X%20'GET'%20'https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fblock%2F5330592'%20-H%20'accept%3A%20application%2Fjson'%60%0A%0AResponse%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%7B%0A%22attestationscount%22%3A%20126%2C%0A%22attesterslashingscount%22%3A%200%2C%0A%22blockroot%22%3A%20%220xaebe891086c79ab79b325f474dc1150f1223e567337bff815cc318f14c64c233%22%2C%0A%22depositscount%22%3A%200%2C%0A%22epoch%22%3A%20166581%2C%0A%22eth1data_blockhash%22%3A%20%220xd346f84ffe7c600b7714d6411c8bea988d9d64dbdb432f26db58e72946337954%22%2C%0A%22eth1data_depositcount%22%3A%20498785%2C%0A%22eth1data_depositroot%22%3A%20%220x9a5603a34aa60f299384679bf4bfc267e99b68278a81f343bde8cb5650bf1d60%22%2C%0A%22exec_base_fee_per_gas%22%3A%2012376913565%2C%0A%22exec_block_hash%22%3A%20%220x26239efe09f51b24bdf7c518b1aa925a3b0b6453682408ec8a5c906d5038a6e7%22%2C%0A%22exec_block_number%22%3A%2016163905%2C%0A%22exec_extra_data%22%3A%20%220x496c6c756d696e61746520446d6f63726174697a6520447374726962757465%22%2C%0A%22exec_fee_recipient%22%3A%20%220xdafea492d9c6733ae3d56b7ed1adb60692c98bc5%22%2C%0A%22exec_gas_limit%22%3A%2030000000%2C%0A%22exec_gas_used%22%3A%209901267%2C%0A%22exec_logs_bloom%22%3A%20%220x8c21554815843b4084a999b2901917a52c58004a82a8440d94919a77f9241181388a0c404f000a8c0321ab024800bf899610e60ec801fb4b0352e34f147626192648619065381ded6b9d92bcd0861120adc1ec01064e7a016ea91c478d01b81316462d2d622a60010bc0139f6fb8ccf200499c0e211a85c042047d1601aa0c2ea2833902a2a3091528492dad09f6dc064529c455d328413b78c680c4699815ac9a91610f19e66542edca45a10518ee65b02cf02241a124232d5958b6004cd0a5846c5703d00b5e4d8353221015f7d38c1429074e34aaa11f3804f933082860c401152088251479918297a1a9237d9ac35539f6d069cca07a005819494a653913%22%2C%0A%22exec_parent_hash%22%3A%20%220x06746d5ff105e96a1b8961c2490c0261b474604fbcbf934e86295c0030e26ce2%22%2C%0A%22exec_random%22%3A%20%220xc2861c72cf4d34b37ec73519dbc20b690742b5cc119ed3738f1dd67d8ca52723%22%2C%0A%22exec_receipts_root%22%3A%20%220x33cdf5c6e03dd341f282d02d3c354c2361a6212692b2a3c06b520397045313f4%22%2C%0A%22exec_state_root%22%3A%20%220x517304bade8d83337c9a52f8ceeb13f924b64486b3b8033f7c348c176922104a%22%2C%0A%22exec_timestamp%22%3A%201670791127%2C%0A%22exec_transactions_count%22%3A%20139%2C%0A%22graffiti%22%3A%20%220x0000000000000000000000000000000000000000000000000000000000000000%22%2C%0A%22graffiti_text%22%3A%20%22%22%2C%0A%22parentroot%22%3A%20%220x0cab36616bbcbbc67c343ddce00241c27d0df2c367c5fa82fc7c0fdf0ed37405%22%2C%0A%22proposer%22%3A%204345%2C%0A%22proposerslashingscount%22%3A%200%2C%0A%22randaoreveal%22%3A%20%220x83950cb64781aff91f4bd14aa6abb0f5fdb7e08e4e81c264f0754c93d7672c4a9615de196491fdb53eafdeb8f49e9cf515f1bd3dc05bb5dc0e2dd8bff5a8d783b503e3385e80b61485f0ddac1caa9361132a863db84e7e234df5815e6908e4e7%22%2C%0A%22signature%22%3A%20%220x84865a9480ae6313b0e5fcadfa294b35f5963e06c66ad1c7613dc081e9700c07f82a2583ba4b62b2483b4a1b9d49aafe0690f22fcf4d0072f9f44a5ce3067ef4fda560d171001cc6bf5dc84e09d9055d92894b86b27695c297f25530cd8db7a0%22%2C%0A%22slot%22%3A%205330592%2C%0A%22stateroot%22%3A%20%220x9e7e40d844c3b229cd9497d662a6d94276d285945073849995aba93c7e73cfe7%22%2C%0A%22status%22%3A%20%221%22%2C%0A%22syncaggregate_bits%22%3A%20%220xdffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffdfffffffffffffffdffffffffffffffffffffffff%22%2C%0A%22syncaggregate_participation%22%3A%200.9921875%2C%0A%22syncaggregate_signature%22%3A%20%220x95332c55790018eed3d17eada01cb4045348d09137505bc8697eeedaa3800a830ee2c138251850a9577f62a5488419ef0a722579156a177fb3a147017f1077af5d778f46a4cdf815fc450129d135fe5286e16df68333592e4aa45821bde780dd%22%2C%0A%22voluntaryexitscount%22%3A%200%2C%0A%22votes%22%3A%2019227%0A%7D%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20Execution%20Block%20for%2016163905%0A%0AFollowing%20is%20the%20execution%20block%20data%20for%2016163905%0AIt%20can%20be%20retrieved%20from%20%5Bhere%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html%23%2FExecution%2Fget_api_v1_execution_block__blockNumber_)%20or%20by%20using%20this%20curl%20command%0A%0A%60curl%20-X%20'GET'%20'https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fexecution%2Fblock%2F16163905'%20%20-H%20'accept%3A%20application%2Fjson'%60%0A%0AResult%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%5B%0A%7B%0A%22blockHash%22%3A%20%220x26239efe09f51b24bdf7c518b1aa925a3b0b6453682408ec8a5c906d5038a6e7%22%2C%0A%22blockNumber%22%3A%2016163905%2C%0A%22timestamp%22%3A%201670791127%2C%0A%22blockReward%22%3A%2037343826945103810%2C%0A%22blockMevReward%22%3A%2037083911760238810%2C%0A%22producerReward%22%3A%2037083911760238810%2C%0A%22feeRecipient%22%3A%20%220xdafea492d9c6733ae3d56b7ed1adb60692c98bc5%22%2C%0A%22gasLimit%22%3A%2030000000%2C%0A%22gasUsed%22%3A%209901267%2C%0A%22baseFee%22%3A%2012376913565%2C%0A%22txCount%22%3A%20139%2C%0A%22internalTxCount%22%3A%2054%2C%0A%22uncleCount%22%3A%200%2C%0A%22parentHash%22%3A%20%220x06746d5ff105e96a1b8961c2490c0261b474604fbcbf934e86295c0030e26ce2%22%2C%0A%22uncleHash%22%3A%20%220x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347%22%2C%0A%22difficulty%22%3A%200%2C%0A%22posConsensus%22%3A%20%7B%0A%22executionBlockNumber%22%3A%2016163905%2C%0A%22proposerIndex%22%3A%204345%2C%0A%22slot%22%3A%205330592%2C%0A%22epoch%22%3A%20166581%2C%0A%22finalized%22%3A%20true%0A%7D%2C%0A%22relay%22%3A%20%7B%0A%22tag%22%3A%20%22flashbots-relay%22%2C%0A%22builderPubkey%22%3A%20%220x81beef03aafd3dd33ffd7deb337407142c80fea2690e5b3190cfc01bde5753f28982a7857c96172a75a234cb7bcb994f%22%2C%0A%22producerFeeRecipient%22%3A%20%220x60987e0d8b5e0095869ca6f0e642828e3f258bb5%22%0A%7D%2C%0A%22consensusAlgorithm%22%3A%20%22pos%22%0A%7D%0A%5D%0A%7D%0A%0A%60%60%60%0A%0A%23%23%23%23%20Sync%20Committee%20(latest)%0A%0AFollowing%20is%20a%20sample%20Sync%20Committee%0AIt%20can%20be%20retrieved%20from%20%5Bhere%5D(https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fdocs%2Findex.html%23%2FSyncCommittee%2Fget_api_v1_sync_committee__period_)%20or%20by%20using%20this%20curl%20command%0A%0A%60curl%20-X%20'GET'%20'https%3A%2F%2Fbeaconcha.in%2Fapi%2Fv1%2Fsync_committee%2Flatest'%20-H%20'accept%3A%20application%2Fjson'%60%0A%0AAbbrieviated%20Result%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%7B%0A%22end_epoch%22%3A%20167167%2C%0A%22period%22%3A%20652%2C%0A%22start_epoch%22%3A%20166912%2C%0A%22validators%22%3A%20%5B%0A328781%2C%0A184949%2C%0A...%0A%5D%0A%7D%0A%7D%0A%0A%60%60%60%0A%0A%3Cdetails%3E%0A%3Csummary%3EFull%20Result%3C%2Fsummary%3E%0A%0A%60%60%60%0A%0A%7B%0A%22status%22%3A%20%22OK%22%2C%0A%22data%22%3A%20%7B%0A%22end_epoch%22%3A%20167167%2C%0A%22period%22%3A%20652%2C%0A%22start_epoch%22%3A%20166912%2C%0A%22validatorsdetails%3E%0A%0A%23%23%23%20Appendix%20G%3A%20Storing%20minimal%20information%0A%0A%23%23%23%23%20Minimal%20footprint%0A%0A%23%23%23%23%20Header%20Checkpoints%0A%0A%23%23%23%23%23%20Inclusion%20Proof%0A%0A%23%23%23%23%23%20ZKP%20for%20Checkpoints%0A%0A%23%23%23%23%20Proving%0A%0A%23%23%23%23%20Verification%0A%0A%23%23%23%20Appendix%20H%3A%20Validating%20Header%0A%0A%23%23%23%23%20Tracking%20Validators%0A%0A%23%23%23%23%23%20ZKP%20for%20validator%20change%0A%0A%23%23%23%23%20Verifying%20Signatures%0A%0A%23%23%23%23%23%20ECDSA%0A%0A%23%23%23%23%23%20RSA%0A%0A%23%23%23%23%23%20EdDSA%0A%0A%23%23%23%23%20Pure%20on-chain%20implementation%20and%20costs%0A%0A%23%23%23%23%23%23%20ZKP%20for%20EdDSA%0A%0A%23%23%23%23%23%20BLS12-381%20and%20variants%0A%0A%23%23%23%23%23%23%20Pure%20on-chain%20implementation%20and%20costs%0A%0A%23%23%23%23%23%23%20ZKP%20for%20BLS12-381%0A%0A%23%23%23%20Appendix%20I%3A%20Cost%20analysis%20and%20benchmark%0A%0A%23%23%23%20Appendix%20J%3A%20Sync%20Committe%20Creation%20and%20Retrieval%0A%0A**Sync%20Committee%20Configuration**%0A%0A%60EPOCHS_PER_SYNC_COMMITTEE_PERIOD%60%20is%20set%20in%20%5Bconfig.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconfig%2Fparams%2Fconfig.go%23L185)%20currently%20255%20epochs%20per%20synch%20comittee%20(approx%2027%20hrs)%20for%20Ethreum%20Mainnet.%0A%0A**Sync%20Committee%20Update%20Process**%0A%0A-%20%5Bbeacon-chain%2Fblockchain%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fblockchain)%0A%20%20-%20%5Bprocess_block.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fblockchain%2Fprocess_block.go)%3A%20has%20function%20%60onBlock%60%20which%20is%20called%20when%20a%20gossip%20block%20is%20received.%20It%20also%20has%20function%20%60handleEpochBoundary%60%20which%20calls%20%60ProcessSlots%60%20in%20%5Bbeacon-chain%2Fcore%2Ftransition%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Ftransition)%20and%20calls%20function%20%60UpdateCommitteeCache%60%20in%20%5Bbeacon-chain%2Fcore%2Fhelpers%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Fhelpers)%0A-%20%5Bbeacon-chain%2Fcore%2Ftransition%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Ftransition)%0A%20%20-%20%5Btransition.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Ftransition%2Ftransition.go)%3A%20implements%20the%20whole%20state%20transition%20function%20which%20consists%20of%20per%20slot%2C%20per-epoch%20transitions.%20function%20%60ProcessSlots%60%20calls%20%60ProcessEpoch%60%20in%20%5Bbeacon-chain%2Fcore%2Faltair%2Ftransition.go%5D(%3C(%253Chttps%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Ftransition.go)%253E%3E)%0A-%20%5Bbeacon-chain%2Fcore%2Faltair%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair)%0A%20%20-%20%5Btransition.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Ftransition.go)%3A%20includes%20function%20%60ProcessEpoch%60%20which%20calls%20%60ProcessSyncCommitteeUpdates%60%20in%20%5Bepoch_spec.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Fepoch_spec.go)%0A%20%20-%20%5Bepoch_spec.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Fepoch_spec.go)%3A%20includes%20function%20%60ProcessSyncCommitteeUpdates%60%20which%20calls%20%60NextSyncCommittee%60%20it%20also%20persists%20beacon%20state%20syncCommittee%20by%20calling%20%60beaconState.SetNextSyncCommittee(nextSyncCommittee)%60%20in%20%5Bsetters_sync_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fstate%2Fstate-native%2Fsetters_sync_committee.go)%0A%20%20-%20%5Bsync_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Fsync_committee.go)%3A%20includes%20function%20%60NextSyncCommittee%60%20which%20calls%20%60NextSyncCommittee%60%20to%20return%20the%20sync%20committee%20indices%2C%20with%20possible%20duplicates%2C%20for%20the%20next%20sync%20committee.%0A%20%20-%20%5Bblock.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Faltair%2Fblock.go)%3A%20includes%20function%20%60VerifySyncCommitteeSig%60%0A-%20%5Bbeacon-chain%2Fcore%2Fhelpers%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcore%2Fhelpers)%0A%20%20-%20%5Bbeacon_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcore%2Fhelpers%2Fbeacon_committee.go)%20has%20function%20%60UpdateCommitteeCache%60%20which%20gets%20called%20at%20the%20beginning%20of%20every%20epoch%20to%20cache%20the%20committee%20shuffled%20indices%20list%20with%20committee%20index%20and%20epoch%20number.%20It%20caches%20the%20shuffled%20indices%20for%20current%20epoch%20and%20next%20epoch.%20it%20calls%20%60UpdatePositionsInCommittee%60%20in%20%5Bsync_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcache%2Fsync_committee.go)%0A-%20%5Bbeacon-chain%2Fcache%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Fcache)%0A%20%20-%20%5Bsync_committee.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fcache%2Fsync_committee.go)%3A%20has%20function%20%60UpdatePositionsInCommittee%60%20which%20updates%20caching%20of%20validators%20position%20in%20sync%20committee%20in%20respect%20to%20current%20epoch%20and%20next%20epoch.%20This%20should%20be%20called%20when%20%60current_sync_committee%60%20and%20%60next_sync_committee%60%20change%20and%20that%20happens%20every%20%60EPOCHS_PER_SYNC_COMMITTEE_PERIOD%60.%0A%0A**Sync%20Committee%20Retrieval**%0AgRPC%20and%20API%20methods%0A%0A-%20%5Bbeacon-chain%2Frpc%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Frpc)%0A%20%20-%20%5Bprysm%2Fv1alpha1%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1)%0A%20%20%20%20-%20%5Bvalidator%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1%2Fvalidator)%0A%20%20%20%20%20%20-%20%5Bassignments.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1%2Fvalidator%2Fassignments.go)%3A%20has%20functions%20%60GetDuties%60%20and%20%60StreamDuties%60%20which%20calls%20function%20%60duties%60%20to%20compute%20the%20validator%20duties%20from%20the%20head%20state's%20corresponding%20epoch%20for%20validators%20public%20key%20%2F%20indices%20requested.%0A%0Awhich%20%5Bmanages%20sync%20committee%20duties%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1%2Fvalidator%2Fassignments.go%23L213)%20every%20%60EPOCHS_PER_SYNC_COMMITTEE_PERIOD%20-%201%60%20which%20is%20set%20in%20%5Bconfig.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fconfig%2Fparams%2Fconfig.go%23L185)%20currently%20255%20epochs%20per%20synch%20comittee%20(approx%2027%20hrs)%20for%20Ethreum%20Mainnet.%0A%0A%5BregisterSyncSubnetNextPeriod%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Frpc%2Fprysm%2Fv1alpha1%2Fvalidator%2Fassignments.go%23L281)%0A%0A%60%60%60%0A%0Afunc%20registerSyncSubnetNextPeriod(s%20beaconState.BeaconState%2C%20epoch%20types.Epoch%2C%20pubKey%20%5B%5Dbyte%2C%20status%20ethpb.ValidatorStatus)%20error%20%7B%0Acommittee%2C%20err%20%3A%3D%20s.NextSyncCommittee()%0Aif%20err%20!%3D%20nil%20%7B%0Areturn%20err%0A%7D%0AsyncCommPeriod%20%3A%3D%20slots.SyncCommitteePeriod(epoch)%0AregisterSyncSubnet(epoch%2C%20syncCommPeriod%2B1%2C%20pubKey%2C%20committee%2C%20status)%0Areturn%20nil%0A%7D%0A%0A%60%60%60%0A%0A**Sync%20Committee%20Storage**%0A%0APersistence%20Mechanism%0A%0A-%20%5Bproto%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fproto)%0A%20%20-%20%5Beth%2Fv2%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fproto%2Feth%2Fv2)%0A%20%20%20%20-%20%5Bvalidator.proto%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Feth%2Fv2%2Fvalidator.proto)%3A%20messages%20for%20validators%20including%20%60SyncCommitteeDuty%60%0A%20%20%20%20-%20%5Bsync_committee.proto%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Feth%2Fv2%2Fsync_committee.proto)%3A%20messages%20for%20SyncCommittee%20which%20serves%20as%20committees%20to%20facilitate%20light%20client%20syncing%20to%20beacon%20chain.%0A%0A%5Bbeacon_state_mainnet.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fstate%2Fstate-native%2Fbeacon_state_mainnet.go)%0A%0A%60%60%60%0A%0A%2F%2F%20BeaconState%20defines%20a%20struct%20containing%20utilities%20for%20the%20Ethereum%20Beacon%20Chain%20state%2C%20defining%0A%2F%2F%20getters%20and%20setters%20for%20its%20respective%20values%20and%20helpful%20functions%20such%20as%20HashTreeRoot().%0Atype%20BeaconState%20struct%20%7B%0Aversion%20int%0AgenesisTime%20uint64%0AgenesisValidatorsRoot%20%5B32%5Dbyte%0Aslot%20eth2types.Slot%0Afork%20*ethpb.Fork%0AlatestBlockHeader%20*ethpb.BeaconBlockHeader%0AblockRoots%20*customtypes.BlockRoots%0AstateRoots%20*customtypes.StateRoots%0AhistoricalRoots%20customtypes.HistoricalRoots%0Aeth1Data%20*ethpb.Eth1Data%0Aeth1DataVotes%20%5B%5D*ethpb.Eth1Data%0Aeth1DepositIndex%20uint64%0Avalidators%20%5B%5D*ethpb.Validator%0Abalances%20%5B%5Duint64%0ArandaoMixes%20*customtypes.RandaoMixes%0Aslashings%20%5B%5Duint64%0ApreviousEpochAttestations%20%5B%5D*ethpb.PendingAttestation%0AcurrentEpochAttestations%20%5B%5D*ethpb.PendingAttestation%0ApreviousEpochParticipation%20%5B%5Dbyte%0AcurrentEpochParticipation%20%5B%5Dbyte%0AjustificationBits%20bitfield.Bitvector4%0ApreviousJustifiedCheckpoint%20*ethpb.Checkpoint%0AcurrentJustifiedCheckpoint%20*ethpb.Checkpoint%0AfinalizedCheckpoint%20*ethpb.Checkpoint%0AinactivityScores%20%5B%5Duint64%0AcurrentSyncCommittee%20*ethpb.SyncCommittee%0AnextSyncCommittee%20*ethpb.SyncCommittee%0AlatestExecutionPayloadHeader%20*enginev1.ExecutionPayloadHeader%0AlatestExecutionPayloadHeaderCapella%20%5C*enginev1.ExecutionPayloadHeaderCapella%0AnextWithdrawalIndex%20uint64%0AnextWithdrawalValidatorIndex%20eth2types.ValidatorIndex%0A%0Alock%20sync.RWMutex%0AdirtyFields%20map%5Bnativetypes.FieldIndex%5Dbool%0AdirtyIndices%20map%5Bnativetypes.FieldIndex%5D%5B%5Duint64%0AstateFieldLeaves%20map%5Bnativetypes.FieldIndex%5D*fieldtrie.FieldTrie%0ArebuildTrie%20map%5Bnativetypes.FieldIndex%5Dbool%0AvalMapHandler%20*stateutil.ValidatorMapHandler%0AmerkleLayers%20%5B%5D%5B%5D%5B%5Dbyte%0AsharedFieldReferences%20map%5Bnativetypes.FieldIndex%5D%5C*stateutil.Reference%0A%7D%0A%0A%60%60%60%0A%0A%5Bbeacon_state.pb.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fproto%2Fprysm%2Fv1alpha1%2Fbeacon_state.pb.go%23L962)%0A%0A%60%60%60%0A%0Atype%20SyncCommittee%20struct%20%7B%0Astate%20protoimpl.MessageState%0AsizeCache%20protoimpl.SizeCache%0AunknownFields%20protoimpl.UnknownFields%0A%0APubkeys%20%5B%5D%5B%5Dbyte%20%60protobuf%3A%22bytes%2C1%2Crep%2Cname%3Dpubkeys%2Cproto3%22%20json%3A%22pubkeys%2Comitempty%22%20ssz-size%3A%22512%2C48%22%60%0AAggregatePubkey%20%5B%5Dbyte%20%60protobuf%3A%22bytes%2C2%2Copt%2Cname%3Daggregate_pubkey%2Cjson%3DaggregatePubkey%2Cproto3%22%20json%3A%22aggregate_pubkey%2Comitempty%22%20ssz-size%3A%2248%22%60%0A%7D%0A%0A%60%60%60%0A%0A%5BInterfaces%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fv3.1.2%2Fbeacon-chain%2Fstate%2Finterfaces.go)%0A%0A%60%60%60%0A%0A%2F%2F%20BeaconState%20has%20read%20and%20write%20access%20to%20beacon%20state%20methods.%0Atype%20BeaconState%20interface%20%7B%0ASpecParametersProvider%0AReadOnlyBeaconState%0AReadOnlyWithdrawals%0AWriteOnlyBeaconState%0ACopy()%20BeaconState%0AHashTreeRoot(ctx%20context.Context)%20(%5B32%5Dbyte%2C%20error)%0AFutureForkStub%0AStateProver%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0A%2F%2F%20StateProver%20defines%20the%20ability%20to%20create%20Merkle%20proofs%20for%20beacon%20state%20fields.%0Atype%20StateProver%20interface%20%7B%0AFinalizedRootProof(ctx%20context.Context)%20(%5B%5D%5B%5Dbyte%2C%20error)%0ACurrentSyncCommitteeProof(ctx%20context.Context)%20(%5B%5D%5B%5Dbyte%2C%20error)%0ANextSyncCommitteeProof(ctx%20context.Context)%20(%5B%5D%5B%5Dbyte%2C%20error)%0A%7D%0A%0A%60%60%60%0A%0A%60%60%60%0A%0A%60%60%60%0A%0A%60%60%60%0A%0A%60%60%60%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./intro-Dqr2jNPQ.js"),[]),path:"/research/code/intro",type:"mdx",filePath:"research/code/intro.mdx",content:"%23%20Code%20bases%20and%20reviews%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0A**Disclaimer%3A%20The%20content%20in%20this%20section%20are%20notes%20I%20took%20doing%20research%20and%20design%20work%2C%20primarily%20around%20bridging%20and%20consensus.%20Some%20are%20incomplete%20and%20they%20lack%20structure.%20I%20have%20included%20them%20here%20for%20completeness.**%0A%0A-%20%5BCode%20bases%20and%20reviews%5D(%23code-bases-and-reviews)%0A%20%20-%20%5BOverview%5D(%23overview)%0A%20%20-%20%5BFunctionality%5D(%23functionality)%0A%20%20-%20%5BReference%20Codebases%5D(%23reference-codebases)%0A%20%20%20%20-%20%5BBlockchains%5D(%23blockchains)%0A%20%20%20%20-%20%5BBridging%20and%20Light%20Clients%5D(%23bridging-and-light-clients)%0A%20%20%20%20-%20%5BZero%20Knowledge%5D(%23zero-knowledge)%0A%0A%23%23%20Functionality%0A%0AIn%20this%20section%20we%20list%20codebases%20that%20implement%20cryptographic%20functions.%20We%20organize%20by%20functional%20areas%20such%20as%20signing%2C%20hashing%2C%20primitives%20and%20consensus.%20Where%20possible%20we%20provide%20a%20link%20to%20the%20algorithms%2Fspecifications%20being%20implemented%20followed%20by%20reference%20codebases.%0A%0AWe%20have%20summarized%20the%20functionality%20in%20three%20areas%0A%0A-%20%5BSigning%5D(..%2Fprimitives%2Fsignatures.mdx)%0A-%20%5BCryptographic%20Primitives%5D(..%2Fprimitives%2Fprimitives.mdx)%0A-%20%5BConsensus%5D(..%2Fchains%2Fintro.mdx)%0A%0A%23%23%20Reference%20Codebases%0A%0A%23%23%23%20Blockchains%0A%0A-%20%5BBinance%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc)%20(go)%0A-%20%5BAvalanche%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego)%20(go)%0A-%20%5BEthereum%5D(https%3A%2F%2Fclientdiversity.org%2F%23distribution)%20%5Broadmap%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40domothy%2Froadmap)%20%5Bupgrading%20ethereum%5D(https%3A%2F%2Feth2book.info%2Fbellatrix%2Fcontents%2F)%20%5Bconsensus-specs%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs)%0A%20%20-%20Consensus%20Clients%20(Beacon%20Chain)%0A%20%20%20%20-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm)%20(go)%0A%20%20%20%20-%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2F)%20(rust)%0A%20%20%20%20-%20%5Bteku%5D(https%3A%2F%2Fgithub.com%2FConsenSys%2Fteku)%20(java)%0A%20%20%20%20-%20%5Bnimbus%5D(https%3A%2F%2Fgithub.com%2Fstatus-im%2Fnimbus-eth2)%20(%5Bnim%5D(https%3A%2F%2Fnim-lang.org%2F))%0A%20%20%20%20-%20%5Blodestar%5D(https%3A%2F%2Fgithub.com%2FChainSafe%2Flodestar)%20(typescript)%0A%20%20%20%20-%20%5Bgrandine%5D(https%3A%2F%2Fgithub.com%2Fsifraitech%2Fgrandine)%20(rust)%20not%20open%20source%0A%20%20-%20Execution%20Clients%20(Execution%20Chain)%0A%20%20%20%20-%20%5Bgeth%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum)%20(go)%0A%20%20%20%20-%20%5Bnethermind%5D(https%3A%2F%2Fgithub.com%2FNethermindEth%2Fnethermind)%20(c%23)%0A%20%20%20%20-%20%5BErigon%5D(https%3A%2F%2Fgithub.com%2Fledgerwatch%2Ferigon)%20(go)%0A%20%20%20%20-%20%5BBesu%5D(https%3A%2F%2Fgithub.com%2Fhyperledger%2Fbesu)%20(java)%0A%20%20-%20Light%20Client%0A%20%20%20%20-%20%5Bhelios%5D(https%3A%2F%2Fgithub.com%2Fa16z%2Fhelios)%20(rust)%3A%20%5Barticle%5D(https%3A%2F%2Fa16zcrypto.com%2Fbuilding-helios-ethereum-light-client%2F)%0A%20%20%20%20-%20%5Bnear%20rainbow%20bridge%20eth2-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-client)%20(rust)%0A%20%20%20%20-%20%5Bsuccinctlabs%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Flightclient)%20(solidity)%0A-%20%5BHarmony%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony)%0A%20%20-%20%5BHarmony%20MMRHardFork%5D(https%3A%2F%2Fgithub.com%2Fpeekpi%2Fharmony%2Ftree%2FmmrHardfork)%0A-%20%5BNear%5D(https%3A%2F%2Fgithub.com%2Fnear%2Fnearcore)%0A-%20%5BPolkadot%5D(https%3A%2F%2Fgithub.com%2Forgs%2Fparitytech%2Frepositories)%0A%20%20-%20%5Bsubstrate%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate)%0A%20%20-%20%5Bcumulus%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fcumulus)%0A%20%20-%20%5Bsmoldot%5D(https%3A%2F%2Fgithub.com%2Fsmol-dot%2Fsmoldot)%0A%20%20-%20%5Bopen-runtime-module-library%5D(https%3A%2F%2Fgithub.com%2Fopen-web3-stack%2Fopen-runtime-module-library)%0A-%20%5BPolygon%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork)%0A%20%20-%20%5Bpeppermint%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Ftree%2Fpeppermint)%20(go)%20fork%20of%20tendermint%0A%20%20-%20%5Bheimdall%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Fheimdall)%20(go)%0A-%20%5BTendermint%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint)%0A%0A%23%23%23%20Bridging%20and%20Light%20Clients%0A%0A-%20Light%20Clients%0A%20%20-%20%5BHarmony%20MMRHardFork%5D(https%3A%2F%2Fgithub.com%2Fpeekpi%2Fharmony%2Ftree%2FmmrHardfork)%0A%0A-%20Bridging%0A%20%20-%20%5BHarmony%20Horizon%20Bridge%5D(.%2FHorizon.mdx)%3A%20Detailed%20code%20review%0A%20%20%20%20-%20%5BHorizon%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2)%3A%20javascript%2C%20solidity%0A%20%20-%20%5BNear%20Rainbow%20Bridge%5D(.%2Fethereum-near.mdx)%3A%20Detailed%20code%20review%0A%20%20%20%20-%20%5BNear%20Rainbow%20Bridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge)%3A%20rust%2C%20go%2C%20solidity%2C%20javascript%0A%20%20%20%20-%20%5BNear%20Rainbow%20Token%20Connector%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector)%3A%20soldity%0A%20%20%20%20-%20SDK%0A%20%20%20%20%20%20-%20%5BNear%20Rainbow%20Bridge%20Client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge-client%2Ftree%2Fmain%2Fpackages%2Fclient)%3A%20typescript%0A%20%20%20%20-%20Frontend%0A%20%20%20%20%20%20-%20%5BNEAR%20Rainbow%20Bridge%20Frontend%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge-frontend)%0A%20%20-%20%5BNomad%20monprepo%5D(https%3A%2F%2Fgithub.com%2Fnomad-xyz%2Fmonorepo)%3A%20Nomad%20is%20a%20cross-chain%20communication%20protocol.%20This%20repo%20contains%20the%20following%3A%20Smart%20contracts%20for%20the%20core%20Nomad%20protocol%2C%20Smart%20contracts%20for%20the%20Nomad%20token%20bridge%20SDKs%20for%20Nomad's%20core%20protocol%2C%20bridge%2C%20and%20governance%20systems%2C%20Tooling%20for%20local%20environment%20simulation%20and%20Smart%20contract%20deployment%20tooling.%0A%20%20%20%20-%20%5BNomad%20rust%5D(https%3A%2F%2Fgithub.com%2Fnomad-xyz%2Frust)%3A%20Nomad%20is%20a%20cross-chain%20communication%20standard%20that%20supports%20passing%20messages%20between%20blockchains%20easily%20and%20inexpensively.%20Like%20IBC%20light%20clients%20and%20similar%20systems%2C%20Nomad%20establishes%20message-passing%20channels%20between%20chains.%20Once%20a%20channel%20is%20established%2C%20any%20application%20on%20that%20chain%20can%20use%20it%20to%20send%20messages%20to%20others%20chains.%0A%20%20%20%20-%20%5BNomad%20gelato-sdk%5D(https%3A%2F%2Fgithub.com%2Fnomad-xyz%2Fgelato-sdk)%3A%20This%20crate%20reimplements%20Gelato's%20Relay%20SDK%20in%20Rust.%20It%20simply%20wraps%20Gelato%20Relay%20requests%20and%20responses%20to%2Ffrom%20Gelato%20endpoints%20with%20Rust%20types%20and%20methods.%0A%20%20-%20%5BSuccinct%20labs%5D(..%2Fbridge%2Fsuccinct.mdx)%3A%20Deep%20dive%20on%20Succinct%20labs%20Proof%20of%20Consensus%20for%20Ethreum.%0A%20%20%20%20-%20%5BProof%20of%20Consensus%20for%20Ethereum%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus)%3A%20contains%20both%20the%20zkSNARK%20circuits%20as%20well%20as%20the%20smart%20contracts%20needed%20for%20our%20succinct%20light%20client%20implementation%2C%20as%20well%20as%20prototype%20message%20passing%20contracts%20and%20bridge%20contracts.%0A%20%20-%20%5BDatachain%20lcp%5D(https%3A%2F%2Fgithub.com%2Fdatachainlab%3A)A%20proxy%20for%20light%20client%20verification%20executed%20in%20TEE.%0A%20%20-%20%5BCosmos%20ibc-go%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc-go)%3A%20allows%20blockchains%20to%20talk%20to%20each%20other.%20This%20end-to-end%2C%20connection-oriented%2C%20stateful%20protocol%20provides%20reliable%2C%20ordered%2C%20and%20authenticated%20communication%20between%20heterogeneous%20blockchains.%0A%20%20%20%20-%20%5BCosmos%20ibc%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc)%3A%20ibc%20specification%0A%20%20-%20%5BCosmos%20gravity%20bridge%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fgravity-bridge)%3A%20Cosmos%20and%20Ethereum%20bridge%20designed%20to%20run%20on%20the%20Cosmos%20Hub%20focused%20on%20maximum%20design%20simplicity%20and%20efficiency.%0A%20%20-%20%5BAxelar%5D(https%3A%2F%2Fgithub.com%2Faxelarnetwork%2Faxelar-core)%3A%20based%20on%20the%20Cosmos%20SDK%20is%20the%20main%20application%20of%20the%20axelar%20network.%20%5Bwhitepaper%5D(https%3A%2F%2Faxelar.network%2Faxelar_whitepaper.pdf)%20%5Bdocs%5D(https%3A%2F%2Fdocs.axelar.dev%2F)%0A%20%20-%20%5BCeler%20cBridge-node%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2FcBridge-node)%3A%20Celer%20cBridge%20relay%20node%20implementation%20in%20Golang.%20(%5Bdocs%5D(https%3A%2F%2Fcbridge-docs.celer.network%2F))%0A%20%20%20%20-%20%5BCeler%20cBridge-contracts%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2FcBridge-contracts)%3A%20Contracts%20for%20cBridge%2C%20cross-chain%20liquidity%20solution%20powered%20by%20Hashed-Timelock%20Transfers%0A%20%20%20%20-%20%5BCeler%20cBridge-cowa%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2Fcbridge-cowa)%3A%20CosmWasm%20Rust%20smart%20contracts%20for%20cbridge%0A%20%20-%20%5BWormhole%5D(https%3A%2F%2Fgithub.com%2Fwormhole-foundation%2Fwormhole)%3A%20the%20reference%20implementation%20of%20the%20Wormhole%20protocol.%20(%5Bdocs%5D(https%3A%2F%2Fbook.wormhole.com%2Fintroduction%2Fintroduction.html))%0A%20%20-%20%5BLayerZero%20Labs%20LayerZero%5D(https%3A%2F%2Fgithub.com%2FLayerZero-Labs%2FLayerZero)%3A%20contains%20the%20smart%20contracts%20for%20LayerZero%20Endpoints.%20(%5Bdocs%5D(https%3A%2F%2Flayerzero.gitbook.io%2Fdocs%2F))%0A%20%20-%20%5BMultichain%20CrossChain-Bridge%5D(https%3A%2F%2Fgithub.com%2Fanyswap%2FCrossChain-Bridge)%3A%20Cross-Chain%20bridge%20based%20on%20Anyswap%20MPC%20network.%20(%5Bdocs%5D(https%3A%2F%2Fdocs.multichain.org%2Fgetting-started%2Fintroduction))%0A%20%20-%20%5BSynapse%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fsynapsecns)%3A%20a%20universal%20interoperability%20protocol%20that%20enables%20secure%20cross-chain%20communication.(%20%5Bdocs%5D(https%3A%2F%2Fdocs.synapseprotocol.com%2F))%0A%20%20%20%20-%20%5Bsynapse-contracts%5D(https%3A%2F%2Fgithub.com%2Fsynapsecns%2Fsynapse-contracts)%3A%20smart%20contracts%20for%20Synapse%20Protocol.%0A%20%20-%20%5BHop%20Protocol%20contracts%5D(https%3A%2F%2Fgithub.com%2Fhop-protocol%2Fcontracts)%3A%20Hop%20is%20a%20scalable%20rollup-to-rollup%20general%20token%20bridge.%20Heare%20are%20the%20smart%20contracts%20that%20power%20the%20Hop%20Exchange.%20(%5Bwhitepaper%5D(https%3A%2F%2Fhop.exchange%2Fwhitepaper.pdf)%2C%20%5Bdocs%5D(https%3A%2F%2Fdocs.hop.exchange%2Fbasics%2Fa-short-explainer)).%0A%20%20-%20%5BRouter%20Protocol%5D(https%3A%2F%2Fgithub.com%2Forgs%2Frouter-protocol%2Frepositories)%3A%20(%5Bwhitepaper%5D(https%3A%2F%2Fdocs.routerprotocol.com%2Fwhitepaper%2Fintroducing-router-protocol)%2C%20%5Bdocs%5D(https%3A%2F%2Fdev.routerprotocol.com%2F))%0A%20%20-%20%5BParity%20Bridges%20Common%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fparity-bridges-common)%3A%20a%20collection%20of%20components%20for%20building%20bridges.%0A%20%20-%20%5BSnowfork%20snowbridge%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge)%3A%20A%20trustless%20bridge%20between%20Polkadot%20and%20Ethereum.%20(%5Bdocs%5D(https%3A%2F%2Fdocs.snowbridge.network%2F))%0A%0A%23%23%23%20Zero%20Knowledge%0A%0A-%20Foundational%0A%20%20-%20%5Bhalo2%5D(https%3A%2F%2Fgithub.com%2Fzcash%2Fhalo2)%20(rust)%0A%20%20%20%20-%20%5Bhalo2%20privacy-scaling-explorations%5D(https%3A%2F%2Fgithub.com%2Fprivacy-scaling-explorations%2Fhalo2%2Fcommits%2Fmain)%20(rust)%20fork%0A%20%20%20%20-%20%5Bjunyu0312%5D(https%3A%2F%2Fgithub.com%2Fjunyu0312%2Fhalo2)%20(rust)%20fork%0A%20%20-%20%5BCircom%5D(https%3A%2F%2Fgithub.com%2Fiden3%2Fcircom)%20a%20novel%20domain-specific%20language%20for%20defining%20arithmetic%20circuits%20that%20can%20be%20used%20to%20generate%20zero-knowledge%20proofs%0A%20%20-%20%5BArkworks%5D(https%3A%2F%2Fgithub.com%2Farkworks-rs)%20(rust)%0A%20%20-%20%5Bnoir%5D(https%3A%2F%2Fgithub.com%2Fnoir-lang%2Fnoir)%20(rust)%0A%20%20-%20%5BStarkWare's%20Poseidon%20Hash%5D(https%3A%2F%2Fgithub.com%2Fstarkware-industries%2Fposeidon)%0A-%20Applications%0A%20%20-%20%5Bhalo2ecc-s%5D(https%3A%2F%2Fgithub.com%2FDelphinusLab%2Fhalo2ecc-s)%20(rust)%3A%20ecc%20circuits%20with%20halo2%0A%20%20-%20%5BDarkForest%5D(https%3A%2F%2Fgithub.com%2Fdarkforest-eth)%20zkSNARK%20space%20warfare%0A%20%20-%20%5BAwesome%20List%5D(https%3A%2F%2Fgithub.com%2Fsnowtigersoft%2Fawesome-darkforest)%0A-%20Proof%20of%20Consensus%2FBridging%0A%20%20-%20%5Bsuccinctlabs%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus)%20(circom)%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./intro-Dqr2jNPQ.js"),[]),path:"/research/code/intro.html",type:"mdx",filePath:"research/code/intro.mdx",content:"%23%20Code%20bases%20and%20reviews%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0A**Disclaimer%3A%20The%20content%20in%20this%20section%20are%20notes%20I%20took%20doing%20research%20and%20design%20work%2C%20primarily%20around%20bridging%20and%20consensus.%20Some%20are%20incomplete%20and%20they%20lack%20structure.%20I%20have%20included%20them%20here%20for%20completeness.**%0A%0A-%20%5BCode%20bases%20and%20reviews%5D(%23code-bases-and-reviews)%0A%20%20-%20%5BOverview%5D(%23overview)%0A%20%20-%20%5BFunctionality%5D(%23functionality)%0A%20%20-%20%5BReference%20Codebases%5D(%23reference-codebases)%0A%20%20%20%20-%20%5BBlockchains%5D(%23blockchains)%0A%20%20%20%20-%20%5BBridging%20and%20Light%20Clients%5D(%23bridging-and-light-clients)%0A%20%20%20%20-%20%5BZero%20Knowledge%5D(%23zero-knowledge)%0A%0A%23%23%20Functionality%0A%0AIn%20this%20section%20we%20list%20codebases%20that%20implement%20cryptographic%20functions.%20We%20organize%20by%20functional%20areas%20such%20as%20signing%2C%20hashing%2C%20primitives%20and%20consensus.%20Where%20possible%20we%20provide%20a%20link%20to%20the%20algorithms%2Fspecifications%20being%20implemented%20followed%20by%20reference%20codebases.%0A%0AWe%20have%20summarized%20the%20functionality%20in%20three%20areas%0A%0A-%20%5BSigning%5D(..%2Fprimitives%2Fsignatures.mdx)%0A-%20%5BCryptographic%20Primitives%5D(..%2Fprimitives%2Fprimitives.mdx)%0A-%20%5BConsensus%5D(..%2Fchains%2Fintro.mdx)%0A%0A%23%23%20Reference%20Codebases%0A%0A%23%23%23%20Blockchains%0A%0A-%20%5BBinance%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc)%20(go)%0A-%20%5BAvalanche%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego)%20(go)%0A-%20%5BEthereum%5D(https%3A%2F%2Fclientdiversity.org%2F%23distribution)%20%5Broadmap%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40domothy%2Froadmap)%20%5Bupgrading%20ethereum%5D(https%3A%2F%2Feth2book.info%2Fbellatrix%2Fcontents%2F)%20%5Bconsensus-specs%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs)%0A%20%20-%20Consensus%20Clients%20(Beacon%20Chain)%0A%20%20%20%20-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm)%20(go)%0A%20%20%20%20-%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2F)%20(rust)%0A%20%20%20%20-%20%5Bteku%5D(https%3A%2F%2Fgithub.com%2FConsenSys%2Fteku)%20(java)%0A%20%20%20%20-%20%5Bnimbus%5D(https%3A%2F%2Fgithub.com%2Fstatus-im%2Fnimbus-eth2)%20(%5Bnim%5D(https%3A%2F%2Fnim-lang.org%2F))%0A%20%20%20%20-%20%5Blodestar%5D(https%3A%2F%2Fgithub.com%2FChainSafe%2Flodestar)%20(typescript)%0A%20%20%20%20-%20%5Bgrandine%5D(https%3A%2F%2Fgithub.com%2Fsifraitech%2Fgrandine)%20(rust)%20not%20open%20source%0A%20%20-%20Execution%20Clients%20(Execution%20Chain)%0A%20%20%20%20-%20%5Bgeth%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum)%20(go)%0A%20%20%20%20-%20%5Bnethermind%5D(https%3A%2F%2Fgithub.com%2FNethermindEth%2Fnethermind)%20(c%23)%0A%20%20%20%20-%20%5BErigon%5D(https%3A%2F%2Fgithub.com%2Fledgerwatch%2Ferigon)%20(go)%0A%20%20%20%20-%20%5BBesu%5D(https%3A%2F%2Fgithub.com%2Fhyperledger%2Fbesu)%20(java)%0A%20%20-%20Light%20Client%0A%20%20%20%20-%20%5Bhelios%5D(https%3A%2F%2Fgithub.com%2Fa16z%2Fhelios)%20(rust)%3A%20%5Barticle%5D(https%3A%2F%2Fa16zcrypto.com%2Fbuilding-helios-ethereum-light-client%2F)%0A%20%20%20%20-%20%5Bnear%20rainbow%20bridge%20eth2-client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Ftree%2Fmaster%2Fcontracts%2Fnear%2Feth2-client)%20(rust)%0A%20%20%20%20-%20%5Bsuccinctlabs%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus%2Ftree%2Fmain%2Fcontracts%2Fsrc%2Flightclient)%20(solidity)%0A-%20%5BHarmony%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony)%0A%20%20-%20%5BHarmony%20MMRHardFork%5D(https%3A%2F%2Fgithub.com%2Fpeekpi%2Fharmony%2Ftree%2FmmrHardfork)%0A-%20%5BNear%5D(https%3A%2F%2Fgithub.com%2Fnear%2Fnearcore)%0A-%20%5BPolkadot%5D(https%3A%2F%2Fgithub.com%2Forgs%2Fparitytech%2Frepositories)%0A%20%20-%20%5Bsubstrate%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate)%0A%20%20-%20%5Bcumulus%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fcumulus)%0A%20%20-%20%5Bsmoldot%5D(https%3A%2F%2Fgithub.com%2Fsmol-dot%2Fsmoldot)%0A%20%20-%20%5Bopen-runtime-module-library%5D(https%3A%2F%2Fgithub.com%2Fopen-web3-stack%2Fopen-runtime-module-library)%0A-%20%5BPolygon%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork)%0A%20%20-%20%5Bpeppermint%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Ftree%2Fpeppermint)%20(go)%20fork%20of%20tendermint%0A%20%20-%20%5Bheimdall%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Fheimdall)%20(go)%0A-%20%5BTendermint%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint)%0A%0A%23%23%23%20Bridging%20and%20Light%20Clients%0A%0A-%20Light%20Clients%0A%20%20-%20%5BHarmony%20MMRHardFork%5D(https%3A%2F%2Fgithub.com%2Fpeekpi%2Fharmony%2Ftree%2FmmrHardfork)%0A%0A-%20Bridging%0A%20%20-%20%5BHarmony%20Horizon%20Bridge%5D(.%2FHorizon.mdx)%3A%20Detailed%20code%20review%0A%20%20%20%20-%20%5BHorizon%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fhorizon%2Ftree%2FrefactorV2)%3A%20javascript%2C%20solidity%0A%20%20-%20%5BNear%20Rainbow%20Bridge%5D(.%2Fethereum-near.mdx)%3A%20Detailed%20code%20review%0A%20%20%20%20-%20%5BNear%20Rainbow%20Bridge%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge)%3A%20rust%2C%20go%2C%20solidity%2C%20javascript%0A%20%20%20%20-%20%5BNear%20Rainbow%20Token%20Connector%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-token-connector)%3A%20soldity%0A%20%20%20%20-%20SDK%0A%20%20%20%20%20%20-%20%5BNear%20Rainbow%20Bridge%20Client%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge-client%2Ftree%2Fmain%2Fpackages%2Fclient)%3A%20typescript%0A%20%20%20%20-%20Frontend%0A%20%20%20%20%20%20-%20%5BNEAR%20Rainbow%20Bridge%20Frontend%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge-frontend)%0A%20%20-%20%5BNomad%20monprepo%5D(https%3A%2F%2Fgithub.com%2Fnomad-xyz%2Fmonorepo)%3A%20Nomad%20is%20a%20cross-chain%20communication%20protocol.%20This%20repo%20contains%20the%20following%3A%20Smart%20contracts%20for%20the%20core%20Nomad%20protocol%2C%20Smart%20contracts%20for%20the%20Nomad%20token%20bridge%20SDKs%20for%20Nomad's%20core%20protocol%2C%20bridge%2C%20and%20governance%20systems%2C%20Tooling%20for%20local%20environment%20simulation%20and%20Smart%20contract%20deployment%20tooling.%0A%20%20%20%20-%20%5BNomad%20rust%5D(https%3A%2F%2Fgithub.com%2Fnomad-xyz%2Frust)%3A%20Nomad%20is%20a%20cross-chain%20communication%20standard%20that%20supports%20passing%20messages%20between%20blockchains%20easily%20and%20inexpensively.%20Like%20IBC%20light%20clients%20and%20similar%20systems%2C%20Nomad%20establishes%20message-passing%20channels%20between%20chains.%20Once%20a%20channel%20is%20established%2C%20any%20application%20on%20that%20chain%20can%20use%20it%20to%20send%20messages%20to%20others%20chains.%0A%20%20%20%20-%20%5BNomad%20gelato-sdk%5D(https%3A%2F%2Fgithub.com%2Fnomad-xyz%2Fgelato-sdk)%3A%20This%20crate%20reimplements%20Gelato's%20Relay%20SDK%20in%20Rust.%20It%20simply%20wraps%20Gelato%20Relay%20requests%20and%20responses%20to%2Ffrom%20Gelato%20endpoints%20with%20Rust%20types%20and%20methods.%0A%20%20-%20%5BSuccinct%20labs%5D(..%2Fbridge%2Fsuccinct.mdx)%3A%20Deep%20dive%20on%20Succinct%20labs%20Proof%20of%20Consensus%20for%20Ethreum.%0A%20%20%20%20-%20%5BProof%20of%20Consensus%20for%20Ethereum%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus)%3A%20contains%20both%20the%20zkSNARK%20circuits%20as%20well%20as%20the%20smart%20contracts%20needed%20for%20our%20succinct%20light%20client%20implementation%2C%20as%20well%20as%20prototype%20message%20passing%20contracts%20and%20bridge%20contracts.%0A%20%20-%20%5BDatachain%20lcp%5D(https%3A%2F%2Fgithub.com%2Fdatachainlab%3A)A%20proxy%20for%20light%20client%20verification%20executed%20in%20TEE.%0A%20%20-%20%5BCosmos%20ibc-go%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc-go)%3A%20allows%20blockchains%20to%20talk%20to%20each%20other.%20This%20end-to-end%2C%20connection-oriented%2C%20stateful%20protocol%20provides%20reliable%2C%20ordered%2C%20and%20authenticated%20communication%20between%20heterogeneous%20blockchains.%0A%20%20%20%20-%20%5BCosmos%20ibc%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fibc)%3A%20ibc%20specification%0A%20%20-%20%5BCosmos%20gravity%20bridge%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fgravity-bridge)%3A%20Cosmos%20and%20Ethereum%20bridge%20designed%20to%20run%20on%20the%20Cosmos%20Hub%20focused%20on%20maximum%20design%20simplicity%20and%20efficiency.%0A%20%20-%20%5BAxelar%5D(https%3A%2F%2Fgithub.com%2Faxelarnetwork%2Faxelar-core)%3A%20based%20on%20the%20Cosmos%20SDK%20is%20the%20main%20application%20of%20the%20axelar%20network.%20%5Bwhitepaper%5D(https%3A%2F%2Faxelar.network%2Faxelar_whitepaper.pdf)%20%5Bdocs%5D(https%3A%2F%2Fdocs.axelar.dev%2F)%0A%20%20-%20%5BCeler%20cBridge-node%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2FcBridge-node)%3A%20Celer%20cBridge%20relay%20node%20implementation%20in%20Golang.%20(%5Bdocs%5D(https%3A%2F%2Fcbridge-docs.celer.network%2F))%0A%20%20%20%20-%20%5BCeler%20cBridge-contracts%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2FcBridge-contracts)%3A%20Contracts%20for%20cBridge%2C%20cross-chain%20liquidity%20solution%20powered%20by%20Hashed-Timelock%20Transfers%0A%20%20%20%20-%20%5BCeler%20cBridge-cowa%5D(https%3A%2F%2Fgithub.com%2Fceler-network%2Fcbridge-cowa)%3A%20CosmWasm%20Rust%20smart%20contracts%20for%20cbridge%0A%20%20-%20%5BWormhole%5D(https%3A%2F%2Fgithub.com%2Fwormhole-foundation%2Fwormhole)%3A%20the%20reference%20implementation%20of%20the%20Wormhole%20protocol.%20(%5Bdocs%5D(https%3A%2F%2Fbook.wormhole.com%2Fintroduction%2Fintroduction.html))%0A%20%20-%20%5BLayerZero%20Labs%20LayerZero%5D(https%3A%2F%2Fgithub.com%2FLayerZero-Labs%2FLayerZero)%3A%20contains%20the%20smart%20contracts%20for%20LayerZero%20Endpoints.%20(%5Bdocs%5D(https%3A%2F%2Flayerzero.gitbook.io%2Fdocs%2F))%0A%20%20-%20%5BMultichain%20CrossChain-Bridge%5D(https%3A%2F%2Fgithub.com%2Fanyswap%2FCrossChain-Bridge)%3A%20Cross-Chain%20bridge%20based%20on%20Anyswap%20MPC%20network.%20(%5Bdocs%5D(https%3A%2F%2Fdocs.multichain.org%2Fgetting-started%2Fintroduction))%0A%20%20-%20%5BSynapse%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fsynapsecns)%3A%20a%20universal%20interoperability%20protocol%20that%20enables%20secure%20cross-chain%20communication.(%20%5Bdocs%5D(https%3A%2F%2Fdocs.synapseprotocol.com%2F))%0A%20%20%20%20-%20%5Bsynapse-contracts%5D(https%3A%2F%2Fgithub.com%2Fsynapsecns%2Fsynapse-contracts)%3A%20smart%20contracts%20for%20Synapse%20Protocol.%0A%20%20-%20%5BHop%20Protocol%20contracts%5D(https%3A%2F%2Fgithub.com%2Fhop-protocol%2Fcontracts)%3A%20Hop%20is%20a%20scalable%20rollup-to-rollup%20general%20token%20bridge.%20Heare%20are%20the%20smart%20contracts%20that%20power%20the%20Hop%20Exchange.%20(%5Bwhitepaper%5D(https%3A%2F%2Fhop.exchange%2Fwhitepaper.pdf)%2C%20%5Bdocs%5D(https%3A%2F%2Fdocs.hop.exchange%2Fbasics%2Fa-short-explainer)).%0A%20%20-%20%5BRouter%20Protocol%5D(https%3A%2F%2Fgithub.com%2Forgs%2Frouter-protocol%2Frepositories)%3A%20(%5Bwhitepaper%5D(https%3A%2F%2Fdocs.routerprotocol.com%2Fwhitepaper%2Fintroducing-router-protocol)%2C%20%5Bdocs%5D(https%3A%2F%2Fdev.routerprotocol.com%2F))%0A%20%20-%20%5BParity%20Bridges%20Common%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fparity-bridges-common)%3A%20a%20collection%20of%20components%20for%20building%20bridges.%0A%20%20-%20%5BSnowfork%20snowbridge%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge)%3A%20A%20trustless%20bridge%20between%20Polkadot%20and%20Ethereum.%20(%5Bdocs%5D(https%3A%2F%2Fdocs.snowbridge.network%2F))%0A%0A%23%23%23%20Zero%20Knowledge%0A%0A-%20Foundational%0A%20%20-%20%5Bhalo2%5D(https%3A%2F%2Fgithub.com%2Fzcash%2Fhalo2)%20(rust)%0A%20%20%20%20-%20%5Bhalo2%20privacy-scaling-explorations%5D(https%3A%2F%2Fgithub.com%2Fprivacy-scaling-explorations%2Fhalo2%2Fcommits%2Fmain)%20(rust)%20fork%0A%20%20%20%20-%20%5Bjunyu0312%5D(https%3A%2F%2Fgithub.com%2Fjunyu0312%2Fhalo2)%20(rust)%20fork%0A%20%20-%20%5BCircom%5D(https%3A%2F%2Fgithub.com%2Fiden3%2Fcircom)%20a%20novel%20domain-specific%20language%20for%20defining%20arithmetic%20circuits%20that%20can%20be%20used%20to%20generate%20zero-knowledge%20proofs%0A%20%20-%20%5BArkworks%5D(https%3A%2F%2Fgithub.com%2Farkworks-rs)%20(rust)%0A%20%20-%20%5Bnoir%5D(https%3A%2F%2Fgithub.com%2Fnoir-lang%2Fnoir)%20(rust)%0A%20%20-%20%5BStarkWare's%20Poseidon%20Hash%5D(https%3A%2F%2Fgithub.com%2Fstarkware-industries%2Fposeidon)%0A-%20Applications%0A%20%20-%20%5Bhalo2ecc-s%5D(https%3A%2F%2Fgithub.com%2FDelphinusLab%2Fhalo2ecc-s)%20(rust)%3A%20ecc%20circuits%20with%20halo2%0A%20%20-%20%5BDarkForest%5D(https%3A%2F%2Fgithub.com%2Fdarkforest-eth)%20zkSNARK%20space%20warfare%0A%20%20-%20%5BAwesome%20List%5D(https%3A%2F%2Fgithub.com%2Fsnowtigersoft%2Fawesome-darkforest)%0A-%20Proof%20of%20Consensus%2FBridging%0A%20%20-%20%5Bsuccinctlabs%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs%2Feth-proof-of-consensus)%20(circom)%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./architecture-Cyo9IHxp.js"),__vite__mapDeps([2,1])),path:"/research/deprecated/architecture",type:"mdx",filePath:"research/deprecated/architecture.mdx",content:"import%20%7B%20ZoomImage%20%7D%20from%20%22..%2F..%2F..%2Fpublic%2Fcomponents%2FZoomImage%22%3B%0A%0A%23%20Overview%0A%0AThis%20is%20an%20opinionated%20architecture%20for%20an%20intent%20based%20solving%20protocol%20which%20facilitates%20single%20and%20mult-chain%20solving%20of%20intents.%20Intents%20can%20be%20solved%20on%20a%20single%20chain%20without%20provisioning%20up%20front%20capital%20as%20we%20arbiters%20can%20confirm%20mandates%20have%20been%20met%20by%20solvers%20at%20execution%20time%2C%20thus%20solvers%20may%20used%20the%20swappers%20locked%20funds%20for%20execution.%0A%0A%23%23%20Goals%0A%0AKey%20Goals%20for%20this%20design%20include%0A%0A-%20Intent%20Based%20Architecture%20to%20improve%20execution%0A-%20Ability%20for%20Solvers%20to%20execute%20fills%20without%20needing%20to%20provide%20upfront%20capital%0A%0AFuture%20work%20includes%0A%0A-%20Capital%20Efficient%20Liquidity%20Provisioning%20including%20rehypothecation%0A-%20Improved%20Price%20Discover%20via%20the%20use%20of%20Oracles%20and%20external%20services%0A-%20Incorporating%20BackRunning%20of%20Transactions%20into%20Protocols%20such%20as%20Uniswap%20V4%20via%20hooks%0A%0A%23%23%20Architecture%20Digrams%0A%0A%3CZoomImage%0A%20%20src%3D%22%2Fimages%2FIntentSwapProtocolMonoChain.png%22%0A%20%20alt%3D%22IntentSwap%20Components%22%0A%20%20title%3D%22IntentSwap%20Components%22%0A%2F%3E%0A%0A%23%23%20Opinionated%20Sample%20Architecture%20from%20%5Bjincubator%5D(https%3A%2F%2Fgithub.com%2Fjincubator)%0A%0AThis%20work%20focuses%20on%20designing%20and%20building%20solutions%20around%20Solving%2C%20Arbitrage%20and%20Indexing.%20This%20work%20is%20being%20done%20in%20a%20combination%20of%20public%20and%20private%20repositories%20on%20%5Bjincubator%5D(https%3A%2F%2Fgithub.com%2Fjincubator).%20The%20project%20is%20drawing%20inspiration%20from%20and%20leveraging%20the%20following%20codebases%20for%20key%20components%0A%0A-%20Solving%20built%20in%20RUST%20leveraging%20%5BTycho%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Foverview)%20from%20%5BPropellor%20Heads%5D(https%3A%2F%2Fwww.propellerheads.xyz%2F)%20including%0A%20%20-%20%5Btycho-sdk%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-protocol-sdk)%3A%20For%20integrate%20DEXs%20and%20other%20onchain%20liquidity%20protocols%0A%20%20-%20%5Btycho-indexer%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-indexer)%3A%20a%20low-latency%2C%20reorg-aware%20stream%20of%20all%20attributes%20you%20need%20to%20simulate%20swaps%20over%20DEX%20and%20other%20on-chain%20liquidity%20built%20on%20%5Bsubstreams%5D(https%3A%2F%2Fgithub.com%2Fstreamingfast%2Fsubstreams)%0A%20%20-%20%5Btycho-simulation%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-simulation)%3A%20a%20Rust%20crate%20which%20allows%20simulating%20a%20set%20of%20supported%20protocols%20off-chain%0A%20%20-%20%5Btycho-execution%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-execution)%3A%20a%20simple%2C%20ready-to-use%20tool%20that%20generates%20the%20necessary%20data%20to%20execute%20trades%20on%20multiple%20chains%20and%20DEX's%0A-%20Intent%20Management%20platform%20allowing%20optimized%20trading%20routes%20optimized%20by%20solvers%20who%20do%20not%20need%20to%20provide%20liquidity%20up%20front%0A%20%20-%20%5Bthe-compact%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Fthe-compact)%3A%20an%20ownerless%20ERC6909%20contract%20that%20facilitates%20the%20voluntary%20formation%20(and%2C%20if%20necessary%2C%20eventual%20dissolution)%20of%20reusable%20resource%20locks.%0A%20%20-%20%5Barbiters%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Farbiters)%3A%20selects%20a%20claim%20method%20based%20on%20the%20type%20of%20Compact%20message%20signed%20by%20the%20sponsor%20and%20allocator%20and%20on%20the%20desired%20settlement%20behavior.%20To%20finalize%20a%20claim%2C%20some%20actor%20must%20call%20into%20the%20arbiter%2C%20which%20will%20act%20on%20the%20input%20and%20translate%20it%20into%20their%20preferred%20claim%20method.%20The%20arbiter%20then%20must%20call%20the%20derived%20claim%20method%20on%20The%20Compact%20to%20finalize%20the%20claim%20process.%0A%20%20-%20%5BTribunal%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Ftribunal)%3A%20a%20framework%20for%20processing%20cross-chain%20swap%20settlements%20against%20PGA%20(priority%20gas%20auction)%20blockchains.%20It%20ensures%20that%20tokens%20are%20transferred%20according%20to%20the%20mandate%20specified%20by%20the%20originating%20sponsor%20and%20enforces%20that%20a%20single%20party%20is%20able%20to%20perform%20the%20settlement%20in%20the%20event%20of%20a%20dispute.%20_Note%3A%20currently%20working%20on%20enhancing%20the%20%5BEIP712%20Signing%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712)%20of%20the%20%5Bmandates%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Ftribunal%3Ftab%3Dreadme-ov-file%23mandate-structure)%20so%20that%20the%20protocol%20can%20be%20used%20for%20solving%20on%20a%20single%20chain%20and%20multichain%20settlement._%0A%20%20-%20Services%20that%20enable%20Solving%20and%20Arbitrage%20are%20drawn%20primarily%20from%20uniswap%20prototypes%20for%20%5BcompactX%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fcompactx).%20_Note%3A%20it%20would%20be%20good%20to%20develop%20the%20majority%20of%20these%20in%20Rust%20and%20leverage%20Tycho's%20indexing%20and%20execution%20services_%0A%20%20%20%20-%20%5Bcallibrator%5D(https%3A%2F%2Fgithub.com%2FUniswap%2FCalibrator)%3A%20An%20intent%20parameterization%20service%2C%20demo%20is%20%5Bhere%5D(https%3A%2F%2Fcalibrat0r.com%2F).%20_Note%3A%20This%20will%20need%20to%20incorprate%2Fintegrate%20%5Bmandates%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Ftribunal%3Ftab%3Dreadme-ov-file%23mandate-structure)%20as%20we%20build%20a%20solution%20for%20solving._%0A%20%20%20%20-%20%5Bv4-router%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fv4-router)%3A%20a%20simple%20and%20optimized%20router%20for%20swapping%20on%20Uniswap%20V4.%20_Note%3A%20Currently%20working%20on%20integrating%20intents%20into%20this%20management%20into%20this%20codebase%20and%20integrating%20this%20with%20an%20optimized%20smart%20order%20router._%0A%20%20%20%20-%20%5Bautocator%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fautocator)%3A%20A%20server-based%20allocator%20for%20The%20Compact%20that%20leverages%20protocol%20signatures%20and%20transactions%20for%20authentication%2C%20API%20reference%20is%20%5Bhere%5D(https%3A%2F%2Fautocator.org%2F).%0A%20%20%20%20-%20%5Bsmallocator%5D(https%3A%2F%2Fgithub.com%2FUniswap%2FSmallocator)%3A%20Similar%20to%20autocator%20with%20smart%20contract%20support%20via%20EIP-4361%20session%20authentication%20and%20signing%20EIP-712%20Compact%20messages.%0A%20%20%20%20-%20%5BFillanthropist%5D(https%3A%2F%2Fgithub.com%2FUniswap%2FFillanthropist)%3A%20receiving%20and%20filling%20broadcasted%20cross-chain%20swap%20intents%2C%20demo%20is%20%5Bhere%5D(https%3A%2F%2Ffillanthropist.org%2F).%20_Note%3A%20This%20infrastructure%20can%20be%20replaced%20by%20solver%20technology%20built%20on%20tycho%20as%20well%20as%20an%20update%20dissemination%20approach%20(see%20repo%20below)%20which%20can%20leverage%20tycho%20indexing._%0A%20%20%20%20-%20%5Bdisseminator%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Fdisseminator)%3A%20A%20TypeScript%20WebSocket%20server%20implementation%20that%20broadcasts%20messages%20to%20both%20HTTP%20endpoints%20and%20WebSocket%20clients.%20The%20server%20validates%20incoming%20messages%20using%20Zod%20schemas%20and%20ensures%20proper%20message%20delivery%20to%20all%20connected%20clients.%20_Note%3A%20Design%20work%20still%20needs%20to%20be%20done%20as%20to%20the%20most%20efficient%20way%20to%20store%20and%20transmit%20detailed%20intent%20and%20mandate%20information_%0A%20%20-%20Frontend%20would%20include%20swapping%20and%20also%20liquidity%20provisioning%20and%20optimized%20Yield%20strategies%20for%20Liquidity%20Providers%20two%20inspirational%20repositories%20are%0A%20%20%20%20-%20%5BcompactX%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fcompactx)%3A%20a%20proof-of-concept%2C%20React-based%20web%20interface%20for%20performing%20cross-chain%20swaps.%0A%20%20%20%20-%20%5BYOLO%20Protocol%5D(https%3A%2F%2Fyolo-demo-ui-hackathon-chainlink-ch.vercel.app%2F)%3A%20A%20Demo%20app%20developed%20for%20a%20hackathon%20by%20%5BYOLO%20Protocol%5D(https%3A%2F%2Flinktr.ee%2Fyolo.protocol)%20which%20includes%20a%20dashboard%20for%20Liquidity%20Providers%20to%20manage%20their%20positions.%0A%0A%23%23%20Proposed%20Rollout%20Strategy%0A%0AThe%20following%20diagram%20gives%20an%20overview%20of%20the%20components%20to%20be%20developed.%0A%0ATechnology%3A%20Proposed%20developing%20%24E%20%3D%20mc%5E2%24%0A%0A-%20Back%20end%20services%20predominately%20in%20%5BRUST%5D(https%3A%2F%2Fwww.rust-lang.org%2F)%20using%20%5BAlloy%5D(https%3A%2F%2Falloy.rs%2F).%0A-%20Off%20Chain%20Persistence%20and%20Indexing%3A%20using%20%5BSubstreams%5D(https%3A%2F%2Fdocs.substreams.dev%2F)%20and%20%5BTycho%5D(https%3A%2F%2Fwww.propellerheads.xyz%2Ftycho)%0A-%20Frontend%20Components%20leveraging%20%5BPorto%5D(https%3A%2F%2Fporto.sh%2F)%0A%0AOutstanding%20Design%20Considerations%3A%0A%0A-%20Intent%20Management%3A%20Should%20detail%20intent%20information%20be%20stored%20completely%20off%20chain%2C%20or%20can%20it%20be%20passed%20in%20callData%20and%20leveraged%20in%20events%2C%20with%20only%20the%20Hash%20on%20chain%3F%0A-%20Source%20of%20Funds%3A%20The%20proposed%20architecture's%20goal%20is%20to%20allow%20Solvers%20to%20use%20Swappers%20funds%20through%20mandate%20validation%20using%20EIP-721.%0A-%20Price%20Discovery%3A%20What%20is%20the%20most%20accurate%20price%20to%20be%20used%20for%20quoting%2C%20is%20it%20the%20best%20price%20we%20can%20get%20on-chain%20using%20Tycho%20Simulation%20or%20should%20we%20use%20feeds%20such%20as%20Coingecko%20and%20Uniswap%20API%20as%20used%20in%20%5Bcalibrator%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Fcalibrator).%0A",lastUpdatedAt:1758687736e3},{lazy:()=>J(()=>import("./architecture-Cyo9IHxp.js"),__vite__mapDeps([2,1])),path:"/research/deprecated/architecture.html",type:"mdx",filePath:"research/deprecated/architecture.mdx",content:"import%20%7B%20ZoomImage%20%7D%20from%20%22..%2F..%2F..%2Fpublic%2Fcomponents%2FZoomImage%22%3B%0A%0A%23%20Overview%0A%0AThis%20is%20an%20opinionated%20architecture%20for%20an%20intent%20based%20solving%20protocol%20which%20facilitates%20single%20and%20mult-chain%20solving%20of%20intents.%20Intents%20can%20be%20solved%20on%20a%20single%20chain%20without%20provisioning%20up%20front%20capital%20as%20we%20arbiters%20can%20confirm%20mandates%20have%20been%20met%20by%20solvers%20at%20execution%20time%2C%20thus%20solvers%20may%20used%20the%20swappers%20locked%20funds%20for%20execution.%0A%0A%23%23%20Goals%0A%0AKey%20Goals%20for%20this%20design%20include%0A%0A-%20Intent%20Based%20Architecture%20to%20improve%20execution%0A-%20Ability%20for%20Solvers%20to%20execute%20fills%20without%20needing%20to%20provide%20upfront%20capital%0A%0AFuture%20work%20includes%0A%0A-%20Capital%20Efficient%20Liquidity%20Provisioning%20including%20rehypothecation%0A-%20Improved%20Price%20Discover%20via%20the%20use%20of%20Oracles%20and%20external%20services%0A-%20Incorporating%20BackRunning%20of%20Transactions%20into%20Protocols%20such%20as%20Uniswap%20V4%20via%20hooks%0A%0A%23%23%20Architecture%20Digrams%0A%0A%3CZoomImage%0A%20%20src%3D%22%2Fimages%2FIntentSwapProtocolMonoChain.png%22%0A%20%20alt%3D%22IntentSwap%20Components%22%0A%20%20title%3D%22IntentSwap%20Components%22%0A%2F%3E%0A%0A%23%23%20Opinionated%20Sample%20Architecture%20from%20%5Bjincubator%5D(https%3A%2F%2Fgithub.com%2Fjincubator)%0A%0AThis%20work%20focuses%20on%20designing%20and%20building%20solutions%20around%20Solving%2C%20Arbitrage%20and%20Indexing.%20This%20work%20is%20being%20done%20in%20a%20combination%20of%20public%20and%20private%20repositories%20on%20%5Bjincubator%5D(https%3A%2F%2Fgithub.com%2Fjincubator).%20The%20project%20is%20drawing%20inspiration%20from%20and%20leveraging%20the%20following%20codebases%20for%20key%20components%0A%0A-%20Solving%20built%20in%20RUST%20leveraging%20%5BTycho%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Foverview)%20from%20%5BPropellor%20Heads%5D(https%3A%2F%2Fwww.propellerheads.xyz%2F)%20including%0A%20%20-%20%5Btycho-sdk%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-protocol-sdk)%3A%20For%20integrate%20DEXs%20and%20other%20onchain%20liquidity%20protocols%0A%20%20-%20%5Btycho-indexer%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-indexer)%3A%20a%20low-latency%2C%20reorg-aware%20stream%20of%20all%20attributes%20you%20need%20to%20simulate%20swaps%20over%20DEX%20and%20other%20on-chain%20liquidity%20built%20on%20%5Bsubstreams%5D(https%3A%2F%2Fgithub.com%2Fstreamingfast%2Fsubstreams)%0A%20%20-%20%5Btycho-simulation%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-simulation)%3A%20a%20Rust%20crate%20which%20allows%20simulating%20a%20set%20of%20supported%20protocols%20off-chain%0A%20%20-%20%5Btycho-execution%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-execution)%3A%20a%20simple%2C%20ready-to-use%20tool%20that%20generates%20the%20necessary%20data%20to%20execute%20trades%20on%20multiple%20chains%20and%20DEX's%0A-%20Intent%20Management%20platform%20allowing%20optimized%20trading%20routes%20optimized%20by%20solvers%20who%20do%20not%20need%20to%20provide%20liquidity%20up%20front%0A%20%20-%20%5Bthe-compact%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Fthe-compact)%3A%20an%20ownerless%20ERC6909%20contract%20that%20facilitates%20the%20voluntary%20formation%20(and%2C%20if%20necessary%2C%20eventual%20dissolution)%20of%20reusable%20resource%20locks.%0A%20%20-%20%5Barbiters%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Farbiters)%3A%20selects%20a%20claim%20method%20based%20on%20the%20type%20of%20Compact%20message%20signed%20by%20the%20sponsor%20and%20allocator%20and%20on%20the%20desired%20settlement%20behavior.%20To%20finalize%20a%20claim%2C%20some%20actor%20must%20call%20into%20the%20arbiter%2C%20which%20will%20act%20on%20the%20input%20and%20translate%20it%20into%20their%20preferred%20claim%20method.%20The%20arbiter%20then%20must%20call%20the%20derived%20claim%20method%20on%20The%20Compact%20to%20finalize%20the%20claim%20process.%0A%20%20-%20%5BTribunal%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Ftribunal)%3A%20a%20framework%20for%20processing%20cross-chain%20swap%20settlements%20against%20PGA%20(priority%20gas%20auction)%20blockchains.%20It%20ensures%20that%20tokens%20are%20transferred%20according%20to%20the%20mandate%20specified%20by%20the%20originating%20sponsor%20and%20enforces%20that%20a%20single%20party%20is%20able%20to%20perform%20the%20settlement%20in%20the%20event%20of%20a%20dispute.%20_Note%3A%20currently%20working%20on%20enhancing%20the%20%5BEIP712%20Signing%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712)%20of%20the%20%5Bmandates%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Ftribunal%3Ftab%3Dreadme-ov-file%23mandate-structure)%20so%20that%20the%20protocol%20can%20be%20used%20for%20solving%20on%20a%20single%20chain%20and%20multichain%20settlement._%0A%20%20-%20Services%20that%20enable%20Solving%20and%20Arbitrage%20are%20drawn%20primarily%20from%20uniswap%20prototypes%20for%20%5BcompactX%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fcompactx).%20_Note%3A%20it%20would%20be%20good%20to%20develop%20the%20majority%20of%20these%20in%20Rust%20and%20leverage%20Tycho's%20indexing%20and%20execution%20services_%0A%20%20%20%20-%20%5Bcallibrator%5D(https%3A%2F%2Fgithub.com%2FUniswap%2FCalibrator)%3A%20An%20intent%20parameterization%20service%2C%20demo%20is%20%5Bhere%5D(https%3A%2F%2Fcalibrat0r.com%2F).%20_Note%3A%20This%20will%20need%20to%20incorprate%2Fintegrate%20%5Bmandates%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Ftribunal%3Ftab%3Dreadme-ov-file%23mandate-structure)%20as%20we%20build%20a%20solution%20for%20solving._%0A%20%20%20%20-%20%5Bv4-router%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fv4-router)%3A%20a%20simple%20and%20optimized%20router%20for%20swapping%20on%20Uniswap%20V4.%20_Note%3A%20Currently%20working%20on%20integrating%20intents%20into%20this%20management%20into%20this%20codebase%20and%20integrating%20this%20with%20an%20optimized%20smart%20order%20router._%0A%20%20%20%20-%20%5Bautocator%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fautocator)%3A%20A%20server-based%20allocator%20for%20The%20Compact%20that%20leverages%20protocol%20signatures%20and%20transactions%20for%20authentication%2C%20API%20reference%20is%20%5Bhere%5D(https%3A%2F%2Fautocator.org%2F).%0A%20%20%20%20-%20%5Bsmallocator%5D(https%3A%2F%2Fgithub.com%2FUniswap%2FSmallocator)%3A%20Similar%20to%20autocator%20with%20smart%20contract%20support%20via%20EIP-4361%20session%20authentication%20and%20signing%20EIP-712%20Compact%20messages.%0A%20%20%20%20-%20%5BFillanthropist%5D(https%3A%2F%2Fgithub.com%2FUniswap%2FFillanthropist)%3A%20receiving%20and%20filling%20broadcasted%20cross-chain%20swap%20intents%2C%20demo%20is%20%5Bhere%5D(https%3A%2F%2Ffillanthropist.org%2F).%20_Note%3A%20This%20infrastructure%20can%20be%20replaced%20by%20solver%20technology%20built%20on%20tycho%20as%20well%20as%20an%20update%20dissemination%20approach%20(see%20repo%20below)%20which%20can%20leverage%20tycho%20indexing._%0A%20%20%20%20-%20%5Bdisseminator%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Fdisseminator)%3A%20A%20TypeScript%20WebSocket%20server%20implementation%20that%20broadcasts%20messages%20to%20both%20HTTP%20endpoints%20and%20WebSocket%20clients.%20The%20server%20validates%20incoming%20messages%20using%20Zod%20schemas%20and%20ensures%20proper%20message%20delivery%20to%20all%20connected%20clients.%20_Note%3A%20Design%20work%20still%20needs%20to%20be%20done%20as%20to%20the%20most%20efficient%20way%20to%20store%20and%20transmit%20detailed%20intent%20and%20mandate%20information_%0A%20%20-%20Frontend%20would%20include%20swapping%20and%20also%20liquidity%20provisioning%20and%20optimized%20Yield%20strategies%20for%20Liquidity%20Providers%20two%20inspirational%20repositories%20are%0A%20%20%20%20-%20%5BcompactX%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fcompactx)%3A%20a%20proof-of-concept%2C%20React-based%20web%20interface%20for%20performing%20cross-chain%20swaps.%0A%20%20%20%20-%20%5BYOLO%20Protocol%5D(https%3A%2F%2Fyolo-demo-ui-hackathon-chainlink-ch.vercel.app%2F)%3A%20A%20Demo%20app%20developed%20for%20a%20hackathon%20by%20%5BYOLO%20Protocol%5D(https%3A%2F%2Flinktr.ee%2Fyolo.protocol)%20which%20includes%20a%20dashboard%20for%20Liquidity%20Providers%20to%20manage%20their%20positions.%0A%0A%23%23%20Proposed%20Rollout%20Strategy%0A%0AThe%20following%20diagram%20gives%20an%20overview%20of%20the%20components%20to%20be%20developed.%0A%0ATechnology%3A%20Proposed%20developing%20%24E%20%3D%20mc%5E2%24%0A%0A-%20Back%20end%20services%20predominately%20in%20%5BRUST%5D(https%3A%2F%2Fwww.rust-lang.org%2F)%20using%20%5BAlloy%5D(https%3A%2F%2Falloy.rs%2F).%0A-%20Off%20Chain%20Persistence%20and%20Indexing%3A%20using%20%5BSubstreams%5D(https%3A%2F%2Fdocs.substreams.dev%2F)%20and%20%5BTycho%5D(https%3A%2F%2Fwww.propellerheads.xyz%2Ftycho)%0A-%20Frontend%20Components%20leveraging%20%5BPorto%5D(https%3A%2F%2Fporto.sh%2F)%0A%0AOutstanding%20Design%20Considerations%3A%0A%0A-%20Intent%20Management%3A%20Should%20detail%20intent%20information%20be%20stored%20completely%20off%20chain%2C%20or%20can%20it%20be%20passed%20in%20callData%20and%20leveraged%20in%20events%2C%20with%20only%20the%20Hash%20on%20chain%3F%0A-%20Source%20of%20Funds%3A%20The%20proposed%20architecture's%20goal%20is%20to%20allow%20Solvers%20to%20use%20Swappers%20funds%20through%20mandate%20validation%20using%20EIP-721.%0A-%20Price%20Discovery%3A%20What%20is%20the%20most%20accurate%20price%20to%20be%20used%20for%20quoting%2C%20is%20it%20the%20best%20price%20we%20can%20get%20on-chain%20using%20Tycho%20Simulation%20or%20should%20we%20use%20feeds%20such%20as%20Coingecko%20and%20Uniswap%20API%20as%20used%20in%20%5Bcalibrator%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Fcalibrator).%0A",lastUpdatedAt:1758687736e3},{lazy:()=>J(()=>import("./flow-BfVyUDr3.js"),[]),path:"/research/deprecated/flow",type:"mdx",filePath:"research/deprecated/flow.mdx",content:"import%20%7B%20ZoomImage%20%7D%20from%20%22..%2F..%2F..%2Fpublic%2Fcomponents%2FZoomImage%22%3B%0A%0A%23%20IntentSwap%0A%0A%23%23%23%20IntentSwap%20Flow%0A%0A1.%20Swapper(via%20CompactX)%20calls%20Quoter%20(Callibrator%2C%20SmartOrderRouter)%0A2.%20Quoter%20returns%20Output%20Tokens%20for%20Swap%0A3.%20Swapper%20Agrees%20on%20Swap%20and%0A%20%20%20a.%20Calls%20Disseminator%20which%20stores%20all%20Compact%20Information%20and%20Creates%20IntentSwapHash%0A%20%20%20b.%20calls%20Intent%20Manager%20to%20create%20SwapIntent%20(more%20callData%20and%20would%20use%20EventData%20to%20publish%20to%20Solvers)%0A4.%20Intent%20Manager(Sponsor)%20formats%20Compact%2C%20Mandate%20data%20and%20Signature%0A5.%20IntentManager(Sponsor)%20calls%20Allocator%20to%20create%20a%20compact%0A6.%20Allocator%20creates%20a%20compact%20locking%20the%20funds%0A7.%20Allocator%20creates%20a%20claim%20emitting%20an%20event%20that%20can%20be%20processed%20by%20Solvers%0A8.%20Solver%20determines%20the%20optimal%20route%20(using%20Tycho%20Simulation)%0A9.%20Solver%20creates%20a%20SolverPayload%20containing%20the%20callData%20for%20the%20Transactions%20to%20be%20executed%0A10.%20Solver%20calls%20the%20Arbiter%20to%20Execute%20the%20Payload%20and%20Unlock%20the%20Funds%0A11.%20Arbiter%20receives%20the%20IntentSwapSolve%0A12.%20Aribiter%20request%20approval%20to%20use%20the%20IntentSwaps%20InputTokens%20for%20the-compact%20via%20the%20Allocator%0A13.%20Arbiter%20executes%20the%20Solve%20on%20behalf%20of%20the%20Solver%0A%20%20%20%20a.%20using%20the%20SolverPayload%0A%20%20%20%20b.%20Executing%20via%20the%20dispatcher%0A%20%20%20%20c.%20Using%20the%20allocated%20input%20tokens%0A14.%20Arbiter%20then%20checks%20if%20the%20Amount%20of%20Output%20Tokens%20satisfies%20the%20mandate%0A15.%20If%20the%20Output%20Tokens%20are%20less%20than%20the%20mandate%20then%20reverts%20STOP%0A16.%20Arbiter%20sends%20a%20signed%20message%20to%20the%20Allocator%20to%20close%20the%20compact%0A%20%20%20%20a.%20Any%20unused%20input%20tokens%20are%20returned%20to%20the%20Sponsor.%0A%20%20%20%20b.%20Output%20Tokens%20are%20returned%20to%20the%20Solver%0A%0A%23%23%20Usage%20(Flows%20by%20Actor)%0A%0AThe%20Compact%20V1%20facilitates%20interactions%20between%20several%20key%20actors.%20Here's%20how%20typical%20participants%20might%20use%20the%20system.%0A%0A%23%23%23%20Sponsors%20(Depositors)%0A%0ASponsors%20own%20the%20underlying%20assets%20and%20create%20resource%20locks%20to%20make%20them%20available%20under%20specific%20conditions.%0A%0A**1.%20Create%20a%20Resource%20Lock%20(Deposit%20Tokens)%3A**%20-%20A%20sponsor%20starts%20by%20depositing%20assets%20(native%20tokens%20or%20ERC20s)%20into%20The%20Compact.%20This%20action%20creates%20ERC6909%20tokens%20representing%20ownership%20of%20the%20resource%20lock.%20-%20During%20deposit%2C%20the%20sponsor%20defines%20the%20lock's%20properties%3A%20the%20**allocator**%20(who%20must%20be%20registered%20first%2C%20see%20%5BAllocators%20(Infrastructure)%5D(%23allocators-infrastructure)%2C%20the%20**scope**%20(single-chain%20or%20multichain)%2C%20and%20the%20**reset%20period**%20(for%20forced%20withdrawals%20and%20emissary%20replacements).%20These%20are%20packed%20into%20a%20%60bytes12%20lockTag%60.%20A%20resource%20lock's%20ID%20is%20a%20combination%20of%20its%20lock%20tag%20and%20the%20underlying%20token's%20address.%20-%20Deposit%20methods%3A%20-%20Native%20tokens%3A%20%60depositNative%60%20-%20ERC20%20tokens%20(requires%20direct%20approval)%3A%20%60depositERC20%60-%20Batch%20deposits%20(native%20%2B%20ERC20)%3A%20%60batchDeposit%60%20-%20Via%20Permit2%20(optionally%20gasless)%3A%20%60depositERC20ViaPermit2%60%2C%20%60batchDepositViaPermit2%60%0A%0A**2.%20Create%20a%20Compact%3A**%20-%20To%20make%20locked%20funds%20available%20for%20claiming%2C%20a%20sponsor%20creates%20a%20compact%2C%20defining%20terms%20and%20designating%20an%20**arbiter**.%0A%0A-%20**Option%20A%3A%20Signing%20an%20EIP-712%20Payload%3A**%20The%20sponsor%20signs%20a%20%60Compact%60%2C%20%60BatchCompact%60%2C%20or%20%60MultichainCompact%60%20payload.%20This%20signed%20payload%20is%20given%20to%20the%20arbiter.%0A-%20**Option%20B%3A%20Registering%20the%20Compact%3A**%20The%20sponsor%20(or%20a%20third%20party%20with%20an%20existing%20sponsor%20signature)%20registers%20the%20_hash_%20of%20the%20intended%20compact%20details%20using%20%60register%60%20or%20combined%20deposit-and-register%20functions.%20It%20is%20also%20possible%20to%20deposit%20tokens%20on%20behalf%20of%20a%20sponsor%20and%20register%20a%20compact%20using%20only%20the%20deposited%20tokens%20without%20the%20sponsor's%20signature%20using%20the%20%60depositAndRegisterFor%60%20(or%20the%20batch%20and%20permit2%20variants).%0A%0A**3.%20(Optional)%20Transfer%20Resource%20Lock%20Ownership%3A**%20-%20Sponsors%20can%20transfer%20their%20ERC6909%20tokens%2C%20provided%20they%20have%20authorization%20from%20the%20allocator.%20-%20Standard%20ERC6909%20transfers%20require%20allocator%20%60attest%60.%20-%20Alternatively%2C%20use%20%60allocatedTransfer%60%20or%20%60allocatedBatchTransfer%60%20with%20explicit%20%60allocatorData%60.%0A%0A**4.%20(Optional)%20Assign%20an%20Emissary%3A**%20-%20Designate%20an%20%60IEmissary%60%20using%20%60assignEmissary%60%20as%20a%20fallback%20authorizer.%0A%0A**5.%20(Optional)%20Initiate%20Forced%20Withdrawal%3A**%20-%20If%20an%20allocator%20is%20unresponsive%2C%20use%20%60enableForcedWithdrawal%60%2C%20wait%20%60resetPeriod%60%2C%20then%20%60forcedWithdrawal%60.%0A%0A%23%23%23%20Arbiters%20%26%20Claimants%20(e.g.%20Fillers)%0A%0AArbiters%20verify%20conditions%20and%20process%20claims.%20Claimants%20are%20the%20recipients.%0A%0A**1.%20Receive%20Compact%20Details%3A**%20-%20Obtain%20compact%20details%20(signed%20payload%20or%20registered%20compact%20info).%0A%0A**2.%20Fulfill%20Compact%20Conditions%3A**%20-%20Perform%20the%20action%20defined%20by%20the%20compact%20(often%20off-chain).%0A%0A**3.%20Obtain%20Allocator%20Authorization%3A**%20-%20This%20relies%20on%20the%20allocator's%20on-chain%20%60authorizeClaim%60%20logic.%20Note%20that%20the%20arbiter%20may%20submit%20%60allocatorData%60%20(i.e.%2C%20an%20allocator's%20signature%20or%20other%20proof%20the%20allocator%20understands)%20which%20the%20allocator%20can%20evaluate%20as%20part%20of%20its%20authorization%20flow.%0A%0A**4.%20Submit%20the%20Claim%3A**%20-%20Call%20the%20appropriate%20claim%20function%20on%20%60ITheCompactClaims%60%20with%20the%20claim%20payload%20(e.g.%2C%20%60Claim%60%2C%20%60BatchClaim%60).%20-%20The%20payload%20includes%20%60allocatorData%60%2C%20%60sponsorSignature%60%20(if%20not%20registered)%2C%20lock%20details%2C%20and%20%60claimants%60%20array.%20Successful%20execution%20emits%20a%20%60Claim%60%20event%20and%20consumes%20the%20nonce.%0A%0A%23%23%23%20Relayers%0A%0ARelayers%20can%20perform%20certain%20interactions%20on%20behalf%20of%20sponsors%20and%2For%20claimants.%0A%0A**1.%20Relaying%20Permit2%20Interactions%3A**%20-%20Submit%20user-signed%20Permit2%20messages%20for%20deposits%2Fregistrations%20(e.g.%2C%20%60depositERC20ViaPermit2%60%2C%20%60depositERC20AndRegisterViaPermit2%60%2C%20or%20the%20batch%20variants).%20For%20the%20register%20variants%2C%20this%20role%20is%20called%20the%20%60Activator%60%20and%20the%20registration%20is%20authorized%20by%20the%20sponsor%20as%20part%20of%20the%20Permit2%20witness%20data.%0A%0A**2.%20Relaying%20Registrations-for-Sponsor%3A**%20-%20Submit%20sponsor-signed%20registration%20details%20using%20%60registerFor%60%20functions.%0A%0A**3.%20Relaying%20Claims%3A**%20-%20Submit%20authorized%20claims%20on%20behalf%20of%20a%20claimant%20using%20the%20standard%20%60claim%60%20functions.%20This%20would%20generally%20be%20performed%20by%20the%20arbiter%20of%20the%20claim%20being%20relayed.%0A%0A%23%23%23%20Allocators%20(Infrastructure)%0A%0AAllocators%20are%20crucial%20infrastructure%20for%20ensuring%20resource%20lock%20integrity.%0A%0A**1.%20Registration%3A**%20-%20Register%20via%20%60__registerAllocator%60%20to%20get%20an%20%60allocatorId%60.%20This%20is%20a%20required%20step%20that%20must%20be%20performed%20before%20the%20allocator%20may%20be%20assigned%20to%20a%20resource%20lock.%20Anyone%20can%20register%20an%20allocator%20if%20one%20of%20three%20conditions%20is%20met%3A%20the%20caller%20is%20the%20allocator%20address%20being%20registered%3B%20the%20allocator%20address%20contains%20code%3B%20or%20a%20proof%20is%20supplied%20representing%20valid%20create2%20deployment%20parameters.%0A%0A**Create2%20Proof%20Format**%3A%20When%20registering%20an%20allocator%20that%20doesn't%20yet%20exist%20but%20will%20be%20deployed%20via%20create2%2C%20provide%20an%2085-byte%20proof%20containing%3A%20%600xff%20%2B%2B%20factory%20%2B%2B%20salt%20%2B%2B%20initcode%20hash%60.%20This%20allows%20pre-registration%20of%20deterministic%20addresses.%0A%0A**2.%20Implement%20%60IAllocator%60%20Interface%3A**%20-%20Deploy%20a%20contract%20implementing%20%60IAllocator%60.%20-%20%60attest%60%3A%20Called%20during%20ERC6909%20transfers.%20Must%20verify%20safety%20and%20return%20%60IAllocator.attest.selector%60.%20-%20%60authorizeClaim%60%20%2F%20%60isClaimAuthorized%60%3A%20Core%20logic%20to%20validate%20claims%20against%20sponsor%20balances%20and%20nonces.%20%60authorizeClaim%60%20returns%20%60IAllocator.authorizeClaim.selector%60%20for%20on-chain%20validation.%0A%0A**3.%20(Optional)%20Off-chain%20Logic%20%2F%20%60allocatorData%60%20Generation%3A**%20-%20Allocators%20may%20have%20off-chain%20systems%20that%20track%20balances%2C%20validate%20requests%2C%20generate%20%60allocatorData%60%20(e.g.%2C%20signatures)%2C%20and%2For%20manage%20nonces.%20-%20The%20Compact%20is%20unopinionated%20about%20the%20particulars%20of%20allocator%20implementations.%20-%20Two%20basic%20sample%20implementations%20have%20been%20provided%3A%20%5BSmallocator%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fsmallocator)%20and%20%5BAutocator%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fautocator).%0A%0A**4.%20(Optional)%20Consuming%20Nonces%3A**%20-%20Proactively%20invalidate%20compacts%20using%20%60consume%60%20on%20The%20Compact%20contract.%0A",lastUpdatedAt:1758687736e3},{lazy:()=>J(()=>import("./flow-BfVyUDr3.js"),[]),path:"/research/deprecated/flow.html",type:"mdx",filePath:"research/deprecated/flow.mdx",content:"import%20%7B%20ZoomImage%20%7D%20from%20%22..%2F..%2F..%2Fpublic%2Fcomponents%2FZoomImage%22%3B%0A%0A%23%20IntentSwap%0A%0A%23%23%23%20IntentSwap%20Flow%0A%0A1.%20Swapper(via%20CompactX)%20calls%20Quoter%20(Callibrator%2C%20SmartOrderRouter)%0A2.%20Quoter%20returns%20Output%20Tokens%20for%20Swap%0A3.%20Swapper%20Agrees%20on%20Swap%20and%0A%20%20%20a.%20Calls%20Disseminator%20which%20stores%20all%20Compact%20Information%20and%20Creates%20IntentSwapHash%0A%20%20%20b.%20calls%20Intent%20Manager%20to%20create%20SwapIntent%20(more%20callData%20and%20would%20use%20EventData%20to%20publish%20to%20Solvers)%0A4.%20Intent%20Manager(Sponsor)%20formats%20Compact%2C%20Mandate%20data%20and%20Signature%0A5.%20IntentManager(Sponsor)%20calls%20Allocator%20to%20create%20a%20compact%0A6.%20Allocator%20creates%20a%20compact%20locking%20the%20funds%0A7.%20Allocator%20creates%20a%20claim%20emitting%20an%20event%20that%20can%20be%20processed%20by%20Solvers%0A8.%20Solver%20determines%20the%20optimal%20route%20(using%20Tycho%20Simulation)%0A9.%20Solver%20creates%20a%20SolverPayload%20containing%20the%20callData%20for%20the%20Transactions%20to%20be%20executed%0A10.%20Solver%20calls%20the%20Arbiter%20to%20Execute%20the%20Payload%20and%20Unlock%20the%20Funds%0A11.%20Arbiter%20receives%20the%20IntentSwapSolve%0A12.%20Aribiter%20request%20approval%20to%20use%20the%20IntentSwaps%20InputTokens%20for%20the-compact%20via%20the%20Allocator%0A13.%20Arbiter%20executes%20the%20Solve%20on%20behalf%20of%20the%20Solver%0A%20%20%20%20a.%20using%20the%20SolverPayload%0A%20%20%20%20b.%20Executing%20via%20the%20dispatcher%0A%20%20%20%20c.%20Using%20the%20allocated%20input%20tokens%0A14.%20Arbiter%20then%20checks%20if%20the%20Amount%20of%20Output%20Tokens%20satisfies%20the%20mandate%0A15.%20If%20the%20Output%20Tokens%20are%20less%20than%20the%20mandate%20then%20reverts%20STOP%0A16.%20Arbiter%20sends%20a%20signed%20message%20to%20the%20Allocator%20to%20close%20the%20compact%0A%20%20%20%20a.%20Any%20unused%20input%20tokens%20are%20returned%20to%20the%20Sponsor.%0A%20%20%20%20b.%20Output%20Tokens%20are%20returned%20to%20the%20Solver%0A%0A%23%23%20Usage%20(Flows%20by%20Actor)%0A%0AThe%20Compact%20V1%20facilitates%20interactions%20between%20several%20key%20actors.%20Here's%20how%20typical%20participants%20might%20use%20the%20system.%0A%0A%23%23%23%20Sponsors%20(Depositors)%0A%0ASponsors%20own%20the%20underlying%20assets%20and%20create%20resource%20locks%20to%20make%20them%20available%20under%20specific%20conditions.%0A%0A**1.%20Create%20a%20Resource%20Lock%20(Deposit%20Tokens)%3A**%20-%20A%20sponsor%20starts%20by%20depositing%20assets%20(native%20tokens%20or%20ERC20s)%20into%20The%20Compact.%20This%20action%20creates%20ERC6909%20tokens%20representing%20ownership%20of%20the%20resource%20lock.%20-%20During%20deposit%2C%20the%20sponsor%20defines%20the%20lock's%20properties%3A%20the%20**allocator**%20(who%20must%20be%20registered%20first%2C%20see%20%5BAllocators%20(Infrastructure)%5D(%23allocators-infrastructure)%2C%20the%20**scope**%20(single-chain%20or%20multichain)%2C%20and%20the%20**reset%20period**%20(for%20forced%20withdrawals%20and%20emissary%20replacements).%20These%20are%20packed%20into%20a%20%60bytes12%20lockTag%60.%20A%20resource%20lock's%20ID%20is%20a%20combination%20of%20its%20lock%20tag%20and%20the%20underlying%20token's%20address.%20-%20Deposit%20methods%3A%20-%20Native%20tokens%3A%20%60depositNative%60%20-%20ERC20%20tokens%20(requires%20direct%20approval)%3A%20%60depositERC20%60-%20Batch%20deposits%20(native%20%2B%20ERC20)%3A%20%60batchDeposit%60%20-%20Via%20Permit2%20(optionally%20gasless)%3A%20%60depositERC20ViaPermit2%60%2C%20%60batchDepositViaPermit2%60%0A%0A**2.%20Create%20a%20Compact%3A**%20-%20To%20make%20locked%20funds%20available%20for%20claiming%2C%20a%20sponsor%20creates%20a%20compact%2C%20defining%20terms%20and%20designating%20an%20**arbiter**.%0A%0A-%20**Option%20A%3A%20Signing%20an%20EIP-712%20Payload%3A**%20The%20sponsor%20signs%20a%20%60Compact%60%2C%20%60BatchCompact%60%2C%20or%20%60MultichainCompact%60%20payload.%20This%20signed%20payload%20is%20given%20to%20the%20arbiter.%0A-%20**Option%20B%3A%20Registering%20the%20Compact%3A**%20The%20sponsor%20(or%20a%20third%20party%20with%20an%20existing%20sponsor%20signature)%20registers%20the%20_hash_%20of%20the%20intended%20compact%20details%20using%20%60register%60%20or%20combined%20deposit-and-register%20functions.%20It%20is%20also%20possible%20to%20deposit%20tokens%20on%20behalf%20of%20a%20sponsor%20and%20register%20a%20compact%20using%20only%20the%20deposited%20tokens%20without%20the%20sponsor's%20signature%20using%20the%20%60depositAndRegisterFor%60%20(or%20the%20batch%20and%20permit2%20variants).%0A%0A**3.%20(Optional)%20Transfer%20Resource%20Lock%20Ownership%3A**%20-%20Sponsors%20can%20transfer%20their%20ERC6909%20tokens%2C%20provided%20they%20have%20authorization%20from%20the%20allocator.%20-%20Standard%20ERC6909%20transfers%20require%20allocator%20%60attest%60.%20-%20Alternatively%2C%20use%20%60allocatedTransfer%60%20or%20%60allocatedBatchTransfer%60%20with%20explicit%20%60allocatorData%60.%0A%0A**4.%20(Optional)%20Assign%20an%20Emissary%3A**%20-%20Designate%20an%20%60IEmissary%60%20using%20%60assignEmissary%60%20as%20a%20fallback%20authorizer.%0A%0A**5.%20(Optional)%20Initiate%20Forced%20Withdrawal%3A**%20-%20If%20an%20allocator%20is%20unresponsive%2C%20use%20%60enableForcedWithdrawal%60%2C%20wait%20%60resetPeriod%60%2C%20then%20%60forcedWithdrawal%60.%0A%0A%23%23%23%20Arbiters%20%26%20Claimants%20(e.g.%20Fillers)%0A%0AArbiters%20verify%20conditions%20and%20process%20claims.%20Claimants%20are%20the%20recipients.%0A%0A**1.%20Receive%20Compact%20Details%3A**%20-%20Obtain%20compact%20details%20(signed%20payload%20or%20registered%20compact%20info).%0A%0A**2.%20Fulfill%20Compact%20Conditions%3A**%20-%20Perform%20the%20action%20defined%20by%20the%20compact%20(often%20off-chain).%0A%0A**3.%20Obtain%20Allocator%20Authorization%3A**%20-%20This%20relies%20on%20the%20allocator's%20on-chain%20%60authorizeClaim%60%20logic.%20Note%20that%20the%20arbiter%20may%20submit%20%60allocatorData%60%20(i.e.%2C%20an%20allocator's%20signature%20or%20other%20proof%20the%20allocator%20understands)%20which%20the%20allocator%20can%20evaluate%20as%20part%20of%20its%20authorization%20flow.%0A%0A**4.%20Submit%20the%20Claim%3A**%20-%20Call%20the%20appropriate%20claim%20function%20on%20%60ITheCompactClaims%60%20with%20the%20claim%20payload%20(e.g.%2C%20%60Claim%60%2C%20%60BatchClaim%60).%20-%20The%20payload%20includes%20%60allocatorData%60%2C%20%60sponsorSignature%60%20(if%20not%20registered)%2C%20lock%20details%2C%20and%20%60claimants%60%20array.%20Successful%20execution%20emits%20a%20%60Claim%60%20event%20and%20consumes%20the%20nonce.%0A%0A%23%23%23%20Relayers%0A%0ARelayers%20can%20perform%20certain%20interactions%20on%20behalf%20of%20sponsors%20and%2For%20claimants.%0A%0A**1.%20Relaying%20Permit2%20Interactions%3A**%20-%20Submit%20user-signed%20Permit2%20messages%20for%20deposits%2Fregistrations%20(e.g.%2C%20%60depositERC20ViaPermit2%60%2C%20%60depositERC20AndRegisterViaPermit2%60%2C%20or%20the%20batch%20variants).%20For%20the%20register%20variants%2C%20this%20role%20is%20called%20the%20%60Activator%60%20and%20the%20registration%20is%20authorized%20by%20the%20sponsor%20as%20part%20of%20the%20Permit2%20witness%20data.%0A%0A**2.%20Relaying%20Registrations-for-Sponsor%3A**%20-%20Submit%20sponsor-signed%20registration%20details%20using%20%60registerFor%60%20functions.%0A%0A**3.%20Relaying%20Claims%3A**%20-%20Submit%20authorized%20claims%20on%20behalf%20of%20a%20claimant%20using%20the%20standard%20%60claim%60%20functions.%20This%20would%20generally%20be%20performed%20by%20the%20arbiter%20of%20the%20claim%20being%20relayed.%0A%0A%23%23%23%20Allocators%20(Infrastructure)%0A%0AAllocators%20are%20crucial%20infrastructure%20for%20ensuring%20resource%20lock%20integrity.%0A%0A**1.%20Registration%3A**%20-%20Register%20via%20%60__registerAllocator%60%20to%20get%20an%20%60allocatorId%60.%20This%20is%20a%20required%20step%20that%20must%20be%20performed%20before%20the%20allocator%20may%20be%20assigned%20to%20a%20resource%20lock.%20Anyone%20can%20register%20an%20allocator%20if%20one%20of%20three%20conditions%20is%20met%3A%20the%20caller%20is%20the%20allocator%20address%20being%20registered%3B%20the%20allocator%20address%20contains%20code%3B%20or%20a%20proof%20is%20supplied%20representing%20valid%20create2%20deployment%20parameters.%0A%0A**Create2%20Proof%20Format**%3A%20When%20registering%20an%20allocator%20that%20doesn't%20yet%20exist%20but%20will%20be%20deployed%20via%20create2%2C%20provide%20an%2085-byte%20proof%20containing%3A%20%600xff%20%2B%2B%20factory%20%2B%2B%20salt%20%2B%2B%20initcode%20hash%60.%20This%20allows%20pre-registration%20of%20deterministic%20addresses.%0A%0A**2.%20Implement%20%60IAllocator%60%20Interface%3A**%20-%20Deploy%20a%20contract%20implementing%20%60IAllocator%60.%20-%20%60attest%60%3A%20Called%20during%20ERC6909%20transfers.%20Must%20verify%20safety%20and%20return%20%60IAllocator.attest.selector%60.%20-%20%60authorizeClaim%60%20%2F%20%60isClaimAuthorized%60%3A%20Core%20logic%20to%20validate%20claims%20against%20sponsor%20balances%20and%20nonces.%20%60authorizeClaim%60%20returns%20%60IAllocator.authorizeClaim.selector%60%20for%20on-chain%20validation.%0A%0A**3.%20(Optional)%20Off-chain%20Logic%20%2F%20%60allocatorData%60%20Generation%3A**%20-%20Allocators%20may%20have%20off-chain%20systems%20that%20track%20balances%2C%20validate%20requests%2C%20generate%20%60allocatorData%60%20(e.g.%2C%20signatures)%2C%20and%2For%20manage%20nonces.%20-%20The%20Compact%20is%20unopinionated%20about%20the%20particulars%20of%20allocator%20implementations.%20-%20Two%20basic%20sample%20implementations%20have%20been%20provided%3A%20%5BSmallocator%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fsmallocator)%20and%20%5BAutocator%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fautocator).%0A%0A**4.%20(Optional)%20Consuming%20Nonces%3A**%20-%20Proactively%20invalidate%20compacts%20using%20%60consume%60%20on%20The%20Compact%20contract.%0A",lastUpdatedAt:1758687736e3},{lazy:()=>J(()=>import("./hooks-D5SRDL9K.js"),[]),path:"/research/deprecated/hooks",type:"mdx",filePath:"research/deprecated/hooks.mdx",content:"%23%20Uniswap%20V4%20Hook%20Development%20-%20WIP%0A%0A%23%23%20Overview%0A%0AThis%20section%20documents%20design%20work%20to%20be%20done%20for%20enhancing%20Uniswap%20V4%20through%20the%20use%20of%20hooks%20for%20better%20price%20discovery%2C%20swapping%20and%20solver%20execution.%0A%0AIt%20leverages%20%5BTycho%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Foverview)%2C%20Intents%20using%20%5BERC-7683%5D(https%3A%2F%2Fwww.erc7683.org%2Fspec)%2C%20%5BEIP-712%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712)%2C%20%5BCompactx%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fcompactx)%20and%20%5BUniswap%20V4%20Hooks%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fv4%2Foverview).%20Development%20can%20be%20found%20in%20the%20github%20organization%20%5Bjincubator%5D(https%3A%2F%2Fgithub.com%2Fjincubator).%0A%0A%23%23%23%20Hook%20Mods%0A%0A1.%20Booster%20Pools%0A2.%20BackRunning%0A3.%20ReHypothecation%0A4.%20Paymaster%0A5.%20Settlement%20Pools%20-%20CrossChain%0A6.%20Router%20change%20to%20Slippage%20Failure%20to%20create%20an%20Intent.%0A7.%20HOOK%0A%0A%23%23%23%20Deliverables%0A%0A1.%20%20No%20Liquidity%20Pool%0A%20%20%20%201.%20Swap%20via%20preferred%20LP%20at%20fixed%20price%20from%20Oracle%0A2.%20%20IntentSwap%0A%20%20%20%201.%20CreateIntentSwap%20(includes%20output%20amount%20in%20each%20call)%0A%20%20%20%202.%20ExecuteIntentSwap%20(uses%20funds%20from%20compact)%0A%20%20%20%203.%20SweepIntentSwap%20(passed%20a%20compact)%0A3.%20%20BoosterPool%0A%20%20%20%201.%20Adds%20IntentManagement%20to%20Any%20Pool%0A%20%20%20%202.%20Adds%20Dynamic%20fees%20to%20Any%20Pool%0A%20%20%20%203.%20Adds%20BackRunning%20via%20Solver%0A%20%20%20%204.%20Adds%20ReHypothecation%20to%20any%20pool%20USDCY%0A%20%20%20%205.%20Adds%20Oracle%20Pricing%20to%20any%20pool%20EULER-ORACLES%0A%20%20%20%206.%20Adds%20Gas%20Sponsorship%0A",lastUpdatedAt:1758687736e3},{lazy:()=>J(()=>import("./hooks-D5SRDL9K.js"),[]),path:"/research/deprecated/hooks.html",type:"mdx",filePath:"research/deprecated/hooks.mdx",content:"%23%20Uniswap%20V4%20Hook%20Development%20-%20WIP%0A%0A%23%23%20Overview%0A%0AThis%20section%20documents%20design%20work%20to%20be%20done%20for%20enhancing%20Uniswap%20V4%20through%20the%20use%20of%20hooks%20for%20better%20price%20discovery%2C%20swapping%20and%20solver%20execution.%0A%0AIt%20leverages%20%5BTycho%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Foverview)%2C%20Intents%20using%20%5BERC-7683%5D(https%3A%2F%2Fwww.erc7683.org%2Fspec)%2C%20%5BEIP-712%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712)%2C%20%5BCompactx%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fcompactx)%20and%20%5BUniswap%20V4%20Hooks%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fv4%2Foverview).%20Development%20can%20be%20found%20in%20the%20github%20organization%20%5Bjincubator%5D(https%3A%2F%2Fgithub.com%2Fjincubator).%0A%0A%23%23%23%20Hook%20Mods%0A%0A1.%20Booster%20Pools%0A2.%20BackRunning%0A3.%20ReHypothecation%0A4.%20Paymaster%0A5.%20Settlement%20Pools%20-%20CrossChain%0A6.%20Router%20change%20to%20Slippage%20Failure%20to%20create%20an%20Intent.%0A7.%20HOOK%0A%0A%23%23%23%20Deliverables%0A%0A1.%20%20No%20Liquidity%20Pool%0A%20%20%20%201.%20Swap%20via%20preferred%20LP%20at%20fixed%20price%20from%20Oracle%0A2.%20%20IntentSwap%0A%20%20%20%201.%20CreateIntentSwap%20(includes%20output%20amount%20in%20each%20call)%0A%20%20%20%202.%20ExecuteIntentSwap%20(uses%20funds%20from%20compact)%0A%20%20%20%203.%20SweepIntentSwap%20(passed%20a%20compact)%0A3.%20%20BoosterPool%0A%20%20%20%201.%20Adds%20IntentManagement%20to%20Any%20Pool%0A%20%20%20%202.%20Adds%20Dynamic%20fees%20to%20Any%20Pool%0A%20%20%20%203.%20Adds%20BackRunning%20via%20Solver%0A%20%20%20%204.%20Adds%20ReHypothecation%20to%20any%20pool%20USDCY%0A%20%20%20%205.%20Adds%20Oracle%20Pricing%20to%20any%20pool%20EULER-ORACLES%0A%20%20%20%206.%20Adds%20Gas%20Sponsorship%0A",lastUpdatedAt:1758687736e3},{lazy:()=>J(()=>import("./intro-A9hs9w82.js"),[]),path:"/research/deprecated/intro",type:"mdx",filePath:"research/deprecated/intro.mdx",content:"%23%20Solving%20and%20Arbitrage%20Research%0A%0A%23%23%20Overview%0A%0AWork%20in%202025%20on%20Solving%2C%20Arbitrage%20and%20Indexing%20using%20%5BTycho%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Foverview)%2C%20Intents%20using%20%5BERC-7683%5D(https%3A%2F%2Fwww.erc7683.org%2Fspec)%2C%20%5BEIP-712%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712)%2C%20%5BCompactx%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fcompactx)%20and%20%5BUniswap%20V4%20Hooks%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fv4%2Foverview).%20Development%20can%20be%20found%20in%20the%20github%20organization%20%5Bjincubator%5D(https%3A%2F%2Fgithub.com%2Fjincubator).%0A%0A%23%23%20Abstract%0A%0ALiquidity%20Fragmentation%20and%20Capital%20Efficiency%20are%20areas%20that%20can%20be%20optimized%20in%20Blockchain%20protocols%2C%20with%20the%20emergence%20of%20Multiple%20L2%20Chains%20and%20a%20shift%20towards%20intent-based%20architectures.%20There%20is%20a%20greater%20need%20than%20ever%20for%20a%20settlement%20layer%20to%20balance%20provided%20liquidity.%0A%0AThis%20is%20an%20opinionated%20architecture%20for%20an%20intent%20based%20solving%20protocol%20which%20facilitates%20single%20and%20multichain%20solving%20of%20intents.%20Intents%20can%20be%20solved%20on%20a%20single%20chain%20without%20provisioning%20up%20front%20capital%20as%20we%20arbiters%20can%20confirm%20mandates%20have%20been%20met%20by%20solvers%20at%20execution%20time%2C%20thus%20solvers%20may%20use%20the%20swappers%20locked%20funds%20for%20execution.%0A%0A%23%23%20Goals%0A%0AKey%20Goals%20for%20this%20design%20include%0A%0A-%20Intent%20Based%20Architecture%20to%20improve%20execution%0A-%20Ability%20for%20Solvers%20to%20execute%20fills%20without%20needing%20to%20provide%20upfront%20capital%0A%0AFuture%20work%20includes%0A%0A-%20Capital%20Efficient%20Liquidity%20Provisioning%20including%20rehypothecation%0A-%20Improved%20Price%20Discover%20via%20the%20use%20of%20Oracles%20and%20external%20services%0A-%20Incorporating%20BackRunning%20of%20Transactions%20into%20Protocols%20such%20as%20Uniswap%20V4%20via%20hooks%0A%0A%23%23%20Overview%0A%0A%3Ciframe%0A%20%20src%3D%22https%3A%2F%2Fwww.loom.com%2Fembed%2Fb4635dbab0bb473f84f5bc55e514e845%22%0A%20%20frameborder%3D%220%22%0A%20%20allowfullscreen%0A%20%20allow%3D%22autoplay%3B%20encrypted-media%22%0A%20%20style%3D%7B%7B%0A%20%20%20%20width%3A%20%22100%25%22%2C%0A%20%20%20%20height%3A%20%22500px%22%2C%0A%20%20%20%20borderRadius%3A%20%2212px%22%2C%0A%20%20%7D%7D%0A%2F%3E%0A",lastUpdatedAt:1758687736e3},{lazy:()=>J(()=>import("./intro-A9hs9w82.js"),[]),path:"/research/deprecated/intro.html",type:"mdx",filePath:"research/deprecated/intro.mdx",content:"%23%20Solving%20and%20Arbitrage%20Research%0A%0A%23%23%20Overview%0A%0AWork%20in%202025%20on%20Solving%2C%20Arbitrage%20and%20Indexing%20using%20%5BTycho%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Foverview)%2C%20Intents%20using%20%5BERC-7683%5D(https%3A%2F%2Fwww.erc7683.org%2Fspec)%2C%20%5BEIP-712%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-712)%2C%20%5BCompactx%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fcompactx)%20and%20%5BUniswap%20V4%20Hooks%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fv4%2Foverview).%20Development%20can%20be%20found%20in%20the%20github%20organization%20%5Bjincubator%5D(https%3A%2F%2Fgithub.com%2Fjincubator).%0A%0A%23%23%20Abstract%0A%0ALiquidity%20Fragmentation%20and%20Capital%20Efficiency%20are%20areas%20that%20can%20be%20optimized%20in%20Blockchain%20protocols%2C%20with%20the%20emergence%20of%20Multiple%20L2%20Chains%20and%20a%20shift%20towards%20intent-based%20architectures.%20There%20is%20a%20greater%20need%20than%20ever%20for%20a%20settlement%20layer%20to%20balance%20provided%20liquidity.%0A%0AThis%20is%20an%20opinionated%20architecture%20for%20an%20intent%20based%20solving%20protocol%20which%20facilitates%20single%20and%20multichain%20solving%20of%20intents.%20Intents%20can%20be%20solved%20on%20a%20single%20chain%20without%20provisioning%20up%20front%20capital%20as%20we%20arbiters%20can%20confirm%20mandates%20have%20been%20met%20by%20solvers%20at%20execution%20time%2C%20thus%20solvers%20may%20use%20the%20swappers%20locked%20funds%20for%20execution.%0A%0A%23%23%20Goals%0A%0AKey%20Goals%20for%20this%20design%20include%0A%0A-%20Intent%20Based%20Architecture%20to%20improve%20execution%0A-%20Ability%20for%20Solvers%20to%20execute%20fills%20without%20needing%20to%20provide%20upfront%20capital%0A%0AFuture%20work%20includes%0A%0A-%20Capital%20Efficient%20Liquidity%20Provisioning%20including%20rehypothecation%0A-%20Improved%20Price%20Discover%20via%20the%20use%20of%20Oracles%20and%20external%20services%0A-%20Incorporating%20BackRunning%20of%20Transactions%20into%20Protocols%20such%20as%20Uniswap%20V4%20via%20hooks%0A%0A%23%23%20Overview%0A%0A%3Ciframe%0A%20%20src%3D%22https%3A%2F%2Fwww.loom.com%2Fembed%2Fb4635dbab0bb473f84f5bc55e514e845%22%0A%20%20frameborder%3D%220%22%0A%20%20allowfullscreen%0A%20%20allow%3D%22autoplay%3B%20encrypted-media%22%0A%20%20style%3D%7B%7B%0A%20%20%20%20width%3A%20%22100%25%22%2C%0A%20%20%20%20height%3A%20%22500px%22%2C%0A%20%20%20%20borderRadius%3A%20%2212px%22%2C%0A%20%20%7D%7D%0A%2F%3E%0A",lastUpdatedAt:1758687736e3},{lazy:()=>J(()=>import("./protocol-W8q0BHtD.js"),[]),path:"/research/deprecated/protocol",type:"mdx",filePath:"research/deprecated/protocol.mdx",content:"%23%20Protocol%0A%0A%23%23%20Overview%0A%0AThe%20Protocol%20is%20part%20of%20an%20opinionated%20architecture%20for%20an%20intent%20based%20solving%20protocol%20which%20facilitates%20single%20and%20multichain%20solving%20of%20intents.%20Intents%20can%20be%20solved%20on%20a%20single%20chain%20without%20provisioning%20up%20front%20capital%20as%20we%20arbiters%20can%20confirm%20mandates%20have%20been%20met%20by%20solvers%20at%20execution%20time%2C%20thus%20solvers%20may%20use%20the%20swappers%20locked%20funds%20for%20execution.%20It%20does%20this%20by%20introducing%20a%20SolverPayload%20which%20can%20be%20executed%20by%20the%20Arbiter%20to%20ensure%20the%20EIP-712%20signed%20mandate%20is%20met.%0A%0AKey%20Goals%20for%20this%20design%20include%0A%0A-%20Intent%20Based%20Architecture%20to%20improve%20execution%0A-%20Ability%20for%20Solvers%20to%20execute%20fills%20without%20needing%20to%20provide%20upfront%20capital%0A%0AThe%20protocol%20is%20inspired%20by%20or%20leverages%20the%20following%20key%20components%0A%0A-%20%5BTycho%20Execution%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-execution)%3A%20Is%20leveraged%20by%20Arbiters%20and%20solvers%20for%20executing%20most%20efficient%20routes.%0A-%20%5BUniswap%20the-compact%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fthe-compact)%3A%20The%20foundation%20of%20our%20resource%20locking%20mechanism%0A-%20%5BUniswap%20Tribunal%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Ftribunal)%3A%20Mandates%20and%20EIP-712%20signing%20are%20heavily%20utilized%20throughout%20the%20protocol%0A-%20%5BUniswap%20v4%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fv4-core)%3A%20We%20leverage%20V4%20hooks%20for%20IntentSwap%20Execution%20on%20Uniswap%20V4.%0A%0A%3E%20For%20a%20technical%20overview%20of%20this%20repository%20automatically%20generated%20by%20DeepWiki%20please%0A%3E%20%5B!%5BAsk%20DeepWiki%5D(https%3A%2F%2Fdeepwiki.com%2Fbadge.svg)%5D(https%3A%2F%2Fdeepwiki.com%2Fjincubator%2Fprotocol)%0A%0A%23%23%20Mandate%20Functionality%0A%0A%3E%20%3Ainformation_source%3A%20%5C_The%20following%20section%20was%20inspired%20by%20the%20%5B%3Aunicorn%3A%20Tribunal%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Ftribunal)%20and%20updated%20to%20support%20monochain%20swaps%20which%20allow%20for%20solvers%20to%20execute%20intents%20with%20the%20swappers%20funds.%0A%0ATo%20settle%20a%20swap%2C%20the%20filler%20submits%20a%20%22fill%22%20request%20to%20the%20Arbiter%20contract.%20This%20consists%20of%20four%20core%20components%3A%0A%0A1.%20**Claim**%3A%20Contains%20the%20chain%20ID%20of%20a%20Compact%2C%20its%20parameters%2C%20and%20its%20signatures.%0A2.%20**Mandate**%3A%20Specifies%20settlement%20conditions%20and%20amount%20derivation%20parameters%20specified%20by%20the%20sponsor.%0A3.%20**SolverPayload**%3A%20Specifies%20the%20transactions%20to%20execute%20to%20solve%20the%20intent%0A4.%20**Claimant**%3A%20Specifies%20the%20account%20that%20will%20receive%20the%20claimed%20tokens.%0A%0A%3E%20Note%20for%20cross-chain%20message%20protocols%20integrating%20with%20Tribunal%3A%20inherit%20the%20%60Arbiter%60%20contract%20and%20override%20the%20%60_processDirective%60%20and%20%60_quoteDirective%60%20functions%20to%20implement%20the%20relevant%20directive%20processing%20logic%20for%20passing%20a%20message%20to%20the%20arbiter%20on%20the%20claim%20chain%20(or%20ensure%20that%20the%20necessary%20state%20is%20updated%20to%20allow%20for%20the%20arbiter%20to%20%22pull%22%20the%20message%20themselves).%20An%20ERC7683-compatible%20implementation%20is%20provided%20in%20%60ERC7683Arbiter.sol%60.%0A%3E%20%E2%9A%A0%EF%B8%8F%20Note%3A%20for%20cross-chain%20intents%20SolverPayloads%20can%20be%20executed%20on%20the%20destination%20chain%2C%20but%20the%20solver%20must%20provide%20their%20own%20funds%20and%20provisioning%20of%20the%20swapper%20tokens%20to%20the%20solver%20will%20be%20handled%20by%20the%20Settlement%20Service.%0A%0A%23%23%23%20Core%20Components%0A%0A%23%23%23%23%20Claim%20Structure%0A%0A%60%60%60solidity%0Astruct%20Claim%20%7B%0A%20%20%20%20uint256%20chainId%3B%20%20%20%20%20%20%20%20%20%20%2F%2F%20Claim%20processing%20chain%20ID%0A%20%20%20%20Compact%20compact%3B%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20compact%20parameters%0A%20%20%20%20bytes%20sponsorSignature%3B%20%20%20%2F%2F%20Authorization%20from%20the%20sponsor%0A%20%20%20%20bytes%20allocatorSignature%3B%20%2F%2F%20Authorization%20from%20the%20allocator%0A%7D%0A%60%60%60%0A%0A%23%23%23%23%20Compact%20Structure%0A%0A%60%60%60solidity%0Astruct%20Compact%20%7B%0A%20%20%20%20address%20arbiter%3B%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20account%20tasked%20with%20verifying%20and%20submitting%20the%20claim%0A%20%20%20%20address%20sponsor%3B%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20account%20to%20source%20the%20tokens%20from%0A%20%20%20%20uint256%20nonce%3B%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20A%20parameter%20to%20enforce%20replay%20protection%2C%20scoped%20to%20allocator%0A%20%20%20%20uint256%20expires%3B%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20time%20at%20which%20the%20claim%20expires%0A%20%20%20%20uint256%20id%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20token%20ID%20of%20the%20ERC6909%20token%20to%20allocate%0A%20%20%20%20uint256%20amount%3B%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20amount%20of%20ERC6909%20tokens%20to%20allocate%0A%7D%0A%60%60%60%0A%0A%23%23%23%23%20Solver%20Payload%20Structure%0A%0A%60%60%60solidity%0A%2F**%0A%20*%20%40notice%20Defines%20a%20single%20contract%20call%20to%20be%20executed%0A%20*%20%40param%20to%20The%20target%20contract%20address%0A%20*%20%40param%20data%20The%20encoded%20function%20call%20data%0A%20*%20%40param%20value%20Amount%20of%20ETH%20to%20send%0A%20*%2F%0Astruct%20Call%20%7B%0A%20%20%20%20address%20to%3B%20%2F%2F%20The%20target%20contract%20address%0A%20%20%20%20bytes%20data%3B%20%2F%2F%20The%20encoded%20function%20call%20data%0A%20%20%20%20uint256%20value%3B%20%2F%2FAmount%20of%20ETH%20to%20send%0A%7D%0A%0Astruct%20SolverPayload%20%7B%0A%20%20%20%20Call%5B%5D%20calls%3B%20%2F%2FArray%20of%20contract%20calls%20to%20execute%20in%20sequence%0A%7D%0A%60%60%60%0A%0A%23%23%23%23%20Mandate%20Structure%0A%0A%60%60%60solidity%0Astruct%20Mandate%20%7B%0A%20%20%20%20address%20recipient%3B%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Recipient%20of%20filled%20tokens%0A%20%20%20%20uint256%20expires%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Mandate%20expiration%20timestamp%0A%20%20%20%20address%20token%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Fill%20token%20(address(0)%20for%20native)%0A%20%20%20%20uint256%20minimumAmount%3B%20%20%20%20%20%20%20%2F%2F%20Minimum%20fill%20amount%0A%20%20%20%20uint256%20baselinePriorityFee%3B%20%2F%2F%20Base%20fee%20threshold%20where%20scaling%20kicks%20in%0A%20%20%20%20uint256%20scalingFactor%3B%20%20%20%20%20%20%20%2F%2F%20Fee%20scaling%20multiplier%20(1e18%20baseline)%0A%20%20%20%20bytes32%20salt%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Preimage%20resistance%20parameter%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Process%20Flow%0A%0A1.%20Fillers%20initiate%20by%20calling%20%60fill(Claim%20calldata%20claim%2C%20Mandate%20calldata%20mandate%2C%20SolverPayload%20calldata%20solverPayload%20address%20claimant)%60%20and%20providing%20any%20msg.value%20required%20for%20the%20settlement%20to%20pay%20to%20process%20the%20solution.%0A2.%20Arbiter%20verifies%20that%20the%20mandate%20has%20not%20expired%20by%20checking%20the%20mandate's%20%60expires%60%20timestamp%0A3.%20Computation%20phase%3A%0A%20%20%20-%20Derives%20%60mandateHash%60%20using%20an%20EIP712%20typehash%20for%20the%20mandate%2C%20destination%20chainId%2C%20tribunal%20address%2C%20and%20mandate%20data%0A%20%20%20-%20Derives%20%60claimHash%60%20using%20an%20EIP712%20typehash%20for%20the%20compact%20with%20the%20mandate%20as%20a%20witness%20and%20the%20compact%20data%20including%20the%20%60mandateHash%60%0A%20%20%20-%20Ensures%20that%20the%20%60claimHash%60%20has%20not%20already%20been%20used%20and%20marks%20it%20as%20filled%0A%20%20%20-%20Calculates%20%60fillAmount%60%20and%20%60claimAmount%60%20based%20on%3A%0A%20%20%20%20%20-%20Compact%20%60amount%60%0A%20%20%20%20%20-%20Mandate%20parameters%20(%60minimumAmount%60%2C%20%60baselinePriorityFee%60%2C%20%60scalingFactor%60)%0A%20%20%20%20%20-%20%60tx.gasprice%60%20and%20%60block.basefee%60%0A%20%20%20%20%20-%20NOTE%3A%20%60scalingFactor%60%20will%20result%20in%20an%20increased%20%60fillAmount%60%20if%20%60%3E%201e18%60%20or%20a%20decreased%20%60claimAmount%60%20if%20%60%3C%201e18%60%0A%20%20%20%20%20-%20NOTE%3A%20%60scalingFactor%60%20is%20combined%20with%20%60tx.gasprice%20-%20(block.basefee%20%2B%20baselinePriorityFee)%60%20(or%200%20if%20it%20would%20otherwise%20be%20negative)%20before%20being%20applied%20to%20the%20amount%0A4.%20Execution%20phase%3A%0A%20%20%20-%20Executes%3A%20The%20Solver%20Payload%20using%20the%20funds%20locked%20in%20the-compact%20and%20ensures%20that%20this%20results%20in%20output%20funds%20(tokens%20or%20ETH)%20%3E%3D%20that%20specified%20in%20the%20mandate.%20**IF%20NOT%20REVERT**%0A%20%20%20-%20Transfers%20%60fillAmount%60%20of%20%60token%60%20to%20mandate%20%60recipient%60%0A%20%20%20-%20Transfers%20Compact%20%60amount%60%20of%20%60token%60%20to%20the%20filler.%0A%20%20%20-%20Processes%20directive%20via%20%60_processDirective(chainId%2C%20compact%2C%20sponsorSignature%2C%20allocatorSignature%2C%20mandateHash%2C%20claimant%2C%20claimAmount)%60%0A%0AThere%20are%20also%20a%20few%20view%20functions%3A%0A%0A-%20%60quote(Claim%20calldata%20claim%2C%20Mandate%20calldata%20mandate%2C%20address%20claimant)%60%20will%20suggest%20a%20dispensation%20amount%20(function%20of%20gas%20on%20claim%20chain%20%2B%20any%20additional%20%22protocol%20overhead%22%20if%20using%20push-based%20cross-chain%20messaging)%0A-%20%60filled(bytes32%20claimHash)%60%20will%20check%20if%20a%20given%20claim%20hash%20has%20already%20been%20filled%20(used)%0A-%20%60getCompactWitnessDetails()%60%20will%20return%20the%20Mandate%20witness%20typestring%20and%20that%20correlates%20token%20%2B%20amount%20arguments%20(so%20frontends%20can%20show%20context%20about%20the%20token%20and%20use%20decimal%20inputs)%0A-%20%60deriveMandateHash(Mandate%20calldata%20mandate)%60%20will%20return%20the%20EIP712%20typehash%20for%20the%20mandate%0A-%20%60deriveClaimHash(Compact%20calldata%20compact%2C%20bytes32%20mandateHash)%60%20will%20return%20the%20unique%20claim%20hash%20for%20a%20compact%20and%20mandate%20combination%0A-%20%60deriveAmounts(uint256%20maximumAmount%2C%20uint256%20minimumAmount%2C%20uint256%20baselinePriorityFee%2C%20uint256%20scalingFactor)%60%20will%20return%20the%20fill%20and%20claim%20amounts%20based%20on%20the%20parameters%3B%20the%20base%20fee%20and%20priority%20fee%20will%20be%20applied%20to%20the%20amount%20and%20so%20should%20be%20tuned%20in%20the%20call%20appropriately%0A%0A%23%23%23%23%20Mandate%20EIP-712%20Typehash%0A%0AThis%20is%20what%20swappers%20will%20see%20as%20their%20witness%20data%20when%20signing%20a%20%60Compact%60%3A%0A%0A%60%60%60solidity%0Astruct%20Mandate%20%7B%0A%20%20%20%20uint256%20chainId%3B%0A%20%20%20%20address%20tribunal%3B%0A%20%20%20%20address%20recipient%3B%0A%20%20%20%20uint256%20expires%3B%0A%20%20%20%20address%20token%3B%0A%20%20%20%20uint256%20minimumAmount%3B%0A%20%20%20%20uint256%20baselinePriorityFee%3B%0A%20%20%20%20uint256%20scalingFactor%3B%0A%20%20%20%20bytes32%20salt%3B%0A%7D%0A%60%60%60%0A%0A%23%23%23%20ERC7683%20Integration%0A%0AThe%20%60ERC7683Arbiter%60%20contract%20implements%20the%20%60IDestinationSettler%60%20interface%20from%20ERC7683%2C%20allowing%20for%20standardized%20cross-chain%20settlement%3A%0A%0A%60%60%60solidity%0Ainterface%20IDestinationSettler%20%7B%0A%20%20%20%20function%20fill(bytes32%20orderId%2C%20bytes%20calldata%20originData%2C%20bytes%20calldata%20fillerData)%20external%3B%0A%7D%0A%60%60%60%0A%0AThis%20implementation%20allows%20the%20Tribunal%20to%20be%20used%20with%20any%20ERC7683-compatible%20cross-chain%20messaging%20system.%0A",lastUpdatedAt:1758687736e3},{lazy:()=>J(()=>import("./protocol-W8q0BHtD.js"),[]),path:"/research/deprecated/protocol.html",type:"mdx",filePath:"research/deprecated/protocol.mdx",content:"%23%20Protocol%0A%0A%23%23%20Overview%0A%0AThe%20Protocol%20is%20part%20of%20an%20opinionated%20architecture%20for%20an%20intent%20based%20solving%20protocol%20which%20facilitates%20single%20and%20multichain%20solving%20of%20intents.%20Intents%20can%20be%20solved%20on%20a%20single%20chain%20without%20provisioning%20up%20front%20capital%20as%20we%20arbiters%20can%20confirm%20mandates%20have%20been%20met%20by%20solvers%20at%20execution%20time%2C%20thus%20solvers%20may%20use%20the%20swappers%20locked%20funds%20for%20execution.%20It%20does%20this%20by%20introducing%20a%20SolverPayload%20which%20can%20be%20executed%20by%20the%20Arbiter%20to%20ensure%20the%20EIP-712%20signed%20mandate%20is%20met.%0A%0AKey%20Goals%20for%20this%20design%20include%0A%0A-%20Intent%20Based%20Architecture%20to%20improve%20execution%0A-%20Ability%20for%20Solvers%20to%20execute%20fills%20without%20needing%20to%20provide%20upfront%20capital%0A%0AThe%20protocol%20is%20inspired%20by%20or%20leverages%20the%20following%20key%20components%0A%0A-%20%5BTycho%20Execution%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-execution)%3A%20Is%20leveraged%20by%20Arbiters%20and%20solvers%20for%20executing%20most%20efficient%20routes.%0A-%20%5BUniswap%20the-compact%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fthe-compact)%3A%20The%20foundation%20of%20our%20resource%20locking%20mechanism%0A-%20%5BUniswap%20Tribunal%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Ftribunal)%3A%20Mandates%20and%20EIP-712%20signing%20are%20heavily%20utilized%20throughout%20the%20protocol%0A-%20%5BUniswap%20v4%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fv4-core)%3A%20We%20leverage%20V4%20hooks%20for%20IntentSwap%20Execution%20on%20Uniswap%20V4.%0A%0A%3E%20For%20a%20technical%20overview%20of%20this%20repository%20automatically%20generated%20by%20DeepWiki%20please%0A%3E%20%5B!%5BAsk%20DeepWiki%5D(https%3A%2F%2Fdeepwiki.com%2Fbadge.svg)%5D(https%3A%2F%2Fdeepwiki.com%2Fjincubator%2Fprotocol)%0A%0A%23%23%20Mandate%20Functionality%0A%0A%3E%20%3Ainformation_source%3A%20%5C_The%20following%20section%20was%20inspired%20by%20the%20%5B%3Aunicorn%3A%20Tribunal%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Ftribunal)%20and%20updated%20to%20support%20monochain%20swaps%20which%20allow%20for%20solvers%20to%20execute%20intents%20with%20the%20swappers%20funds.%0A%0ATo%20settle%20a%20swap%2C%20the%20filler%20submits%20a%20%22fill%22%20request%20to%20the%20Arbiter%20contract.%20This%20consists%20of%20four%20core%20components%3A%0A%0A1.%20**Claim**%3A%20Contains%20the%20chain%20ID%20of%20a%20Compact%2C%20its%20parameters%2C%20and%20its%20signatures.%0A2.%20**Mandate**%3A%20Specifies%20settlement%20conditions%20and%20amount%20derivation%20parameters%20specified%20by%20the%20sponsor.%0A3.%20**SolverPayload**%3A%20Specifies%20the%20transactions%20to%20execute%20to%20solve%20the%20intent%0A4.%20**Claimant**%3A%20Specifies%20the%20account%20that%20will%20receive%20the%20claimed%20tokens.%0A%0A%3E%20Note%20for%20cross-chain%20message%20protocols%20integrating%20with%20Tribunal%3A%20inherit%20the%20%60Arbiter%60%20contract%20and%20override%20the%20%60_processDirective%60%20and%20%60_quoteDirective%60%20functions%20to%20implement%20the%20relevant%20directive%20processing%20logic%20for%20passing%20a%20message%20to%20the%20arbiter%20on%20the%20claim%20chain%20(or%20ensure%20that%20the%20necessary%20state%20is%20updated%20to%20allow%20for%20the%20arbiter%20to%20%22pull%22%20the%20message%20themselves).%20An%20ERC7683-compatible%20implementation%20is%20provided%20in%20%60ERC7683Arbiter.sol%60.%0A%3E%20%E2%9A%A0%EF%B8%8F%20Note%3A%20for%20cross-chain%20intents%20SolverPayloads%20can%20be%20executed%20on%20the%20destination%20chain%2C%20but%20the%20solver%20must%20provide%20their%20own%20funds%20and%20provisioning%20of%20the%20swapper%20tokens%20to%20the%20solver%20will%20be%20handled%20by%20the%20Settlement%20Service.%0A%0A%23%23%23%20Core%20Components%0A%0A%23%23%23%23%20Claim%20Structure%0A%0A%60%60%60solidity%0Astruct%20Claim%20%7B%0A%20%20%20%20uint256%20chainId%3B%20%20%20%20%20%20%20%20%20%20%2F%2F%20Claim%20processing%20chain%20ID%0A%20%20%20%20Compact%20compact%3B%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20compact%20parameters%0A%20%20%20%20bytes%20sponsorSignature%3B%20%20%20%2F%2F%20Authorization%20from%20the%20sponsor%0A%20%20%20%20bytes%20allocatorSignature%3B%20%2F%2F%20Authorization%20from%20the%20allocator%0A%7D%0A%60%60%60%0A%0A%23%23%23%23%20Compact%20Structure%0A%0A%60%60%60solidity%0Astruct%20Compact%20%7B%0A%20%20%20%20address%20arbiter%3B%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20account%20tasked%20with%20verifying%20and%20submitting%20the%20claim%0A%20%20%20%20address%20sponsor%3B%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20account%20to%20source%20the%20tokens%20from%0A%20%20%20%20uint256%20nonce%3B%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20A%20parameter%20to%20enforce%20replay%20protection%2C%20scoped%20to%20allocator%0A%20%20%20%20uint256%20expires%3B%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20time%20at%20which%20the%20claim%20expires%0A%20%20%20%20uint256%20id%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20token%20ID%20of%20the%20ERC6909%20token%20to%20allocate%0A%20%20%20%20uint256%20amount%3B%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20amount%20of%20ERC6909%20tokens%20to%20allocate%0A%7D%0A%60%60%60%0A%0A%23%23%23%23%20Solver%20Payload%20Structure%0A%0A%60%60%60solidity%0A%2F**%0A%20*%20%40notice%20Defines%20a%20single%20contract%20call%20to%20be%20executed%0A%20*%20%40param%20to%20The%20target%20contract%20address%0A%20*%20%40param%20data%20The%20encoded%20function%20call%20data%0A%20*%20%40param%20value%20Amount%20of%20ETH%20to%20send%0A%20*%2F%0Astruct%20Call%20%7B%0A%20%20%20%20address%20to%3B%20%2F%2F%20The%20target%20contract%20address%0A%20%20%20%20bytes%20data%3B%20%2F%2F%20The%20encoded%20function%20call%20data%0A%20%20%20%20uint256%20value%3B%20%2F%2FAmount%20of%20ETH%20to%20send%0A%7D%0A%0Astruct%20SolverPayload%20%7B%0A%20%20%20%20Call%5B%5D%20calls%3B%20%2F%2FArray%20of%20contract%20calls%20to%20execute%20in%20sequence%0A%7D%0A%60%60%60%0A%0A%23%23%23%23%20Mandate%20Structure%0A%0A%60%60%60solidity%0Astruct%20Mandate%20%7B%0A%20%20%20%20address%20recipient%3B%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Recipient%20of%20filled%20tokens%0A%20%20%20%20uint256%20expires%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Mandate%20expiration%20timestamp%0A%20%20%20%20address%20token%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Fill%20token%20(address(0)%20for%20native)%0A%20%20%20%20uint256%20minimumAmount%3B%20%20%20%20%20%20%20%2F%2F%20Minimum%20fill%20amount%0A%20%20%20%20uint256%20baselinePriorityFee%3B%20%2F%2F%20Base%20fee%20threshold%20where%20scaling%20kicks%20in%0A%20%20%20%20uint256%20scalingFactor%3B%20%20%20%20%20%20%20%2F%2F%20Fee%20scaling%20multiplier%20(1e18%20baseline)%0A%20%20%20%20bytes32%20salt%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Preimage%20resistance%20parameter%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Process%20Flow%0A%0A1.%20Fillers%20initiate%20by%20calling%20%60fill(Claim%20calldata%20claim%2C%20Mandate%20calldata%20mandate%2C%20SolverPayload%20calldata%20solverPayload%20address%20claimant)%60%20and%20providing%20any%20msg.value%20required%20for%20the%20settlement%20to%20pay%20to%20process%20the%20solution.%0A2.%20Arbiter%20verifies%20that%20the%20mandate%20has%20not%20expired%20by%20checking%20the%20mandate's%20%60expires%60%20timestamp%0A3.%20Computation%20phase%3A%0A%20%20%20-%20Derives%20%60mandateHash%60%20using%20an%20EIP712%20typehash%20for%20the%20mandate%2C%20destination%20chainId%2C%20tribunal%20address%2C%20and%20mandate%20data%0A%20%20%20-%20Derives%20%60claimHash%60%20using%20an%20EIP712%20typehash%20for%20the%20compact%20with%20the%20mandate%20as%20a%20witness%20and%20the%20compact%20data%20including%20the%20%60mandateHash%60%0A%20%20%20-%20Ensures%20that%20the%20%60claimHash%60%20has%20not%20already%20been%20used%20and%20marks%20it%20as%20filled%0A%20%20%20-%20Calculates%20%60fillAmount%60%20and%20%60claimAmount%60%20based%20on%3A%0A%20%20%20%20%20-%20Compact%20%60amount%60%0A%20%20%20%20%20-%20Mandate%20parameters%20(%60minimumAmount%60%2C%20%60baselinePriorityFee%60%2C%20%60scalingFactor%60)%0A%20%20%20%20%20-%20%60tx.gasprice%60%20and%20%60block.basefee%60%0A%20%20%20%20%20-%20NOTE%3A%20%60scalingFactor%60%20will%20result%20in%20an%20increased%20%60fillAmount%60%20if%20%60%3E%201e18%60%20or%20a%20decreased%20%60claimAmount%60%20if%20%60%3C%201e18%60%0A%20%20%20%20%20-%20NOTE%3A%20%60scalingFactor%60%20is%20combined%20with%20%60tx.gasprice%20-%20(block.basefee%20%2B%20baselinePriorityFee)%60%20(or%200%20if%20it%20would%20otherwise%20be%20negative)%20before%20being%20applied%20to%20the%20amount%0A4.%20Execution%20phase%3A%0A%20%20%20-%20Executes%3A%20The%20Solver%20Payload%20using%20the%20funds%20locked%20in%20the-compact%20and%20ensures%20that%20this%20results%20in%20output%20funds%20(tokens%20or%20ETH)%20%3E%3D%20that%20specified%20in%20the%20mandate.%20**IF%20NOT%20REVERT**%0A%20%20%20-%20Transfers%20%60fillAmount%60%20of%20%60token%60%20to%20mandate%20%60recipient%60%0A%20%20%20-%20Transfers%20Compact%20%60amount%60%20of%20%60token%60%20to%20the%20filler.%0A%20%20%20-%20Processes%20directive%20via%20%60_processDirective(chainId%2C%20compact%2C%20sponsorSignature%2C%20allocatorSignature%2C%20mandateHash%2C%20claimant%2C%20claimAmount)%60%0A%0AThere%20are%20also%20a%20few%20view%20functions%3A%0A%0A-%20%60quote(Claim%20calldata%20claim%2C%20Mandate%20calldata%20mandate%2C%20address%20claimant)%60%20will%20suggest%20a%20dispensation%20amount%20(function%20of%20gas%20on%20claim%20chain%20%2B%20any%20additional%20%22protocol%20overhead%22%20if%20using%20push-based%20cross-chain%20messaging)%0A-%20%60filled(bytes32%20claimHash)%60%20will%20check%20if%20a%20given%20claim%20hash%20has%20already%20been%20filled%20(used)%0A-%20%60getCompactWitnessDetails()%60%20will%20return%20the%20Mandate%20witness%20typestring%20and%20that%20correlates%20token%20%2B%20amount%20arguments%20(so%20frontends%20can%20show%20context%20about%20the%20token%20and%20use%20decimal%20inputs)%0A-%20%60deriveMandateHash(Mandate%20calldata%20mandate)%60%20will%20return%20the%20EIP712%20typehash%20for%20the%20mandate%0A-%20%60deriveClaimHash(Compact%20calldata%20compact%2C%20bytes32%20mandateHash)%60%20will%20return%20the%20unique%20claim%20hash%20for%20a%20compact%20and%20mandate%20combination%0A-%20%60deriveAmounts(uint256%20maximumAmount%2C%20uint256%20minimumAmount%2C%20uint256%20baselinePriorityFee%2C%20uint256%20scalingFactor)%60%20will%20return%20the%20fill%20and%20claim%20amounts%20based%20on%20the%20parameters%3B%20the%20base%20fee%20and%20priority%20fee%20will%20be%20applied%20to%20the%20amount%20and%20so%20should%20be%20tuned%20in%20the%20call%20appropriately%0A%0A%23%23%23%23%20Mandate%20EIP-712%20Typehash%0A%0AThis%20is%20what%20swappers%20will%20see%20as%20their%20witness%20data%20when%20signing%20a%20%60Compact%60%3A%0A%0A%60%60%60solidity%0Astruct%20Mandate%20%7B%0A%20%20%20%20uint256%20chainId%3B%0A%20%20%20%20address%20tribunal%3B%0A%20%20%20%20address%20recipient%3B%0A%20%20%20%20uint256%20expires%3B%0A%20%20%20%20address%20token%3B%0A%20%20%20%20uint256%20minimumAmount%3B%0A%20%20%20%20uint256%20baselinePriorityFee%3B%0A%20%20%20%20uint256%20scalingFactor%3B%0A%20%20%20%20bytes32%20salt%3B%0A%7D%0A%60%60%60%0A%0A%23%23%23%20ERC7683%20Integration%0A%0AThe%20%60ERC7683Arbiter%60%20contract%20implements%20the%20%60IDestinationSettler%60%20interface%20from%20ERC7683%2C%20allowing%20for%20standardized%20cross-chain%20settlement%3A%0A%0A%60%60%60solidity%0Ainterface%20IDestinationSettler%20%7B%0A%20%20%20%20function%20fill(bytes32%20orderId%2C%20bytes%20calldata%20originData%2C%20bytes%20calldata%20fillerData)%20external%3B%0A%7D%0A%60%60%60%0A%0AThis%20implementation%20allows%20the%20Tribunal%20to%20be%20used%20with%20any%20ERC7683-compatible%20cross-chain%20messaging%20system.%0A",lastUpdatedAt:1758687736e3},{lazy:()=>J(()=>import("./resources-CdFfXqp7.js"),[]),path:"/research/deprecated/resources",type:"mdx",filePath:"research/deprecated/resources.mdx",content:"%23%20Resource%20Management%0A%0A%23%23%20Overview%0A%0AThe%20Protocol%20leverages%20an%20expansive%20locking%20system%20from%20%5Bthe-compact%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fthe-compact%2F).%20We%20have%20incorporated%20%5BMandates%20and%20Solver%20Payloads%5D(.%2Fprotocol)%20to%20allow%20Intents%20to%20be%20solved%20on%20a%20single%20chain%20without%20provisioning%20up%20front%20capital%20as%20we%20arbiters%20can%20confirm%20mandates%20have%20been%20met%20by%20solvers%20at%20execution%20time%2C%20thus%20solvers%20may%20use%20the%20swappers%20locked%20funds%20for%20execution.%0A%0A%3E%20As%20of%20July%2025th%20the%20%5Bthe-compact%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fthe-compact%2F)%20we%20are%20developing%20on%20has%20been%20forked%20from%20%5BUniswap%20the-compact%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Fthe-compact%2Ftree%2Fv1)%20v1%20branch%20which%20has%20not%20as%20yet%20been%20deployed.%0A%0A%23%23%20Summary%0A%0AThe%20Compact%20is%20an%20ownerless%20ERC6909%20contract%20that%20facilitates%20the%20voluntary%20formation%20and%20mediation%20of%20reusable%20**resource%20locks**.%20It%20enables%20tokens%20to%20be%20credibly%20committed%20to%20be%20spent%20in%20exchange%20for%20performing%20actions%20across%20arbitrary%2C%20asynchronous%20environments%2C%20and%20claimed%20once%20the%20specified%20conditions%20have%20been%20met.%0A%0AResource%20locks%20are%20entered%20into%20by%20ERC20%20or%20native%20token%20holders%20(called%20the%20**depositor**).%20Once%20a%20resource%20lock%20has%20been%20established%2C%20the%20owner%20of%20the%20ERC6909%20token%20representing%20a%20resource%20lock%20can%20act%20as%20a%20**sponsor**%20and%20create%20a%20**compact**.%20A%20compact%20is%20a%20commitment%20allowing%20interested%20parties%20to%20claim%20their%20tokens%20through%20the%20sponsor's%20indicated%20**arbiter**.%20The%20arbiter%20is%20then%20responsible%20for%20processing%20the%20claim%20once%20it%20has%20attested%20to%20the%20specified%20conditions%20of%20the%20compact%20having%20been%20met.%0A%0AWhen%20depositing%20into%20a%20resource%20lock%2C%20the%20depositor%20assigns%20an%20**allocator**%20and%20a%20**reset%20period**%20for%20that%20lock.%20The%20allocator%20is%20tasked%20with%20providing%20additional%20authorization%20whenever%20the%20owner%20of%20the%20lock%20wishes%20to%20transfer%20their%206909%20tokens%2C%20withdraw%20the%20underlying%20locked%20assets%2C%20or%20sponsor%20a%20compact%20utilizing%20the%20lock.%20Their%20primary%20role%20is%20essentially%20to%20protect%20**claimants**%E2%80%94entities%20that%20provide%20proof%20of%20having%20met%20the%20conditions%20and%20subsequently%20make%20a%20claim%20against%20a%20compact%E2%80%94by%20ensuring%20the%20credibility%20of%20commitments%2C%20such%20as%20preventing%20%22double-spends%22%20involving%20previously-committed%20locked%20balances.%0A%0AAllocators%20can%20be%20purely%20onchain%20abstractions%2C%20or%20can%20involve%20hybrid%20(onchain%20%2B%20offchain)%20mechanics%20as%20part%20of%20their%20authorization%20procedure.%20Should%20an%20allocator%20erroneously%20or%20maliciously%20fail%20to%20authorize%20the%20use%20of%20an%20unallocated%20resource%20lock%20balance%2C%20the%20depositor%20can%20initiate%20a%20**forced%20withdrawal**%20for%20the%20lock%20in%20question%3B%20after%20waiting%20for%20the%20reset%20period%20indicated%20when%20depositing%20into%20the%20lock%2C%20they%20can%20withdraw%20their%20underlying%20balance%20at%20will%20_without_%20the%20allocator's%20explicit%20permission.%0A%0ASponsors%20can%20also%20optionally%20assign%20an%20**emissary**%20to%20act%20as%20a%20fallback%20signer%20for%20authorizing%20claims%20against%20their%20compacts.%20This%20is%20particularly%20helpful%20for%20smart%20contract%20accounts%20or%20other%20scenarios%20where%20signing%20keys%20might%20change.%0A%0AThe%20Compact%20effectively%20%22activates%22%20any%20deposited%20tokens%20to%20be%20instantly%20spent%20or%20swapped%20across%20arbitrary%2C%20asynchronous%20environments%20as%20long%20as%3A%0A%0A-%20Claimants%20are%20confident%20that%20the%20allocator%20is%20sound%20and%20will%20not%20leave%20the%20resource%20lock%20underallocated.%0A-%20Sponsors%20are%20confident%20that%20the%20allocator%20will%20not%20unduly%20censor%20fully%20allocated%20requests.%0A-%20Sponsors%20are%20confident%20that%20the%20arbiter%20is%20sound%20and%20will%20not%20process%20claims%20where%20the%20conditions%20were%20not%20successfully%20met.%0A-%20Claimants%20are%20confident%20that%20the%20arbiter%20is%20sound%20and%20will%20not%20_fail_%20to%20process%20claims%20where%20the%20conditions%20_were_%20successfully%20met.%0A%0A%23%23%20Key%20Concepts%0A%0A%23%23%23%20Resource%20Locks%0A%0AResource%20locks%20are%20the%20fundamental%20building%20blocks%20of%20The%20Compact%20protocol.%20They%20are%20created%20when%20a%20depositor%20places%20tokens%20(either%20native%20tokens%20or%20ERC20%20tokens)%20into%20The%20Compact.%20Each%20resource%20lock%20has%20four%20key%20properties%3A%0A%0A1.%20%20The%20**underlying%20token**%20held%20in%20the%20resource%20lock.%0A2.%20%20The%20**allocator**%20tasked%20with%20cosigning%20on%20claims%20against%20the%20resource%20locks%20(see%20%5BAllocators%5D(%23allocators)).%0A3.%20%20The%20**scope**%20of%20the%20resource%20lock%20(either%20spendable%20on%20any%20chain%20or%20limited%20to%20a%20single%20chain).%0A4.%20%20The%20**reset%20period**%20for%20forcibly%20exiting%20the%20lock%20(see%20%5BForced%20Withdrawals%5D(%23forced-withdrawals))%20and%20for%20emissary%20reassignment%20timelocks%20(see%20%5BEmissaries%5D(%23emissaries)).%0A%0AEach%20unique%20combination%20of%20these%20four%20properties%20is%20represented%20by%20a%20fungible%20ERC6909%20tokenID.%20The%20owner%20of%20these%20ERC6909%20tokens%20can%20act%20as%20a%20sponsor%20and%20create%20compacts.%0A%0AThe%20%60scope%60%2C%20%60resetPeriod%60%2C%20and%20the%20%60allocatorId%60%20(obtained%20when%20an%20allocator%20is%20registered)%20are%20packed%20into%20a%20%60bytes12%20lockTag%60.%20A%20resource%20lock's%20specific%20ID%20(the%20ERC6909%20%60tokenId%60)%20is%20a%20concatenation%20of%20this%20%60lockTag%60%20and%20the%20underlying%20%60token%60%20address%2C%20represented%20as%20a%20%60uint256%60%20for%20ERC6909%20compatibility.%20This%20%60lockTag%60%20is%20used%20throughout%20various%20interfaces%20to%20succinctly%20identify%20the%20parameters%20of%20a%20lock.%0A%0A**Fee-on-Transfer%20and%20Rebasing%20Token%20Handling%3A**%0A%0A-%20**Fee-on-Transfer%3A**%20The%20Compact%20correctly%20handles%20fee-on-transfer%20tokens%20for%20both%20deposits%20and%20withdrawals.%20The%20amount%20of%20ERC6909%20tokens%20minted%20or%20burned%20is%20based%20on%20the%20_actual%20balance%20change_%20in%20The%20Compact%20contract%2C%20not%20just%20the%20specified%20amount.%20This%20ensures%20ERC6909%20tokens%20accurately%20represent%20the%20underlying%20assets.%0A-%20**Rebasing%20Tokens%3A**%20**Rebasing%20tokens%20(e.g.%2C%20stETH)%20are%20NOT%20supported%20in%20The%20Compact%20V1.**%20Any%20yield%20or%20other%20balance%20changes%20occurring%20_after_%20deposit%20will%20not%20accrue%20to%20the%20depositor's%20ERC6909%20tokens.%20For%20such%20assets%2C%20use%20their%20wrapped%2C%20non-rebasing%20counterparts%20(e.g.%2C%20wstETH)%20to%20avoid%20loss%20of%20value.%0A%0A%23%23%23%20Allocators%0A%0AEach%20resource%20lock%20is%20mediated%20by%20an%20**allocator**.%20Their%20primary%20responsibilities%20include%3A%0A%0A1.%20%20**Preventing%20Double-Spending%3A**%20Ensuring%20sponsors%20don't%20commit%20the%20same%20tokens%20to%20multiple%20compacts%20or%20transfer%20away%20committed%20funds.%0A2.%20%20**Validating%20Transfers%3A**%20Attesting%20to%20standard%20ERC6909%20transfers%20of%20resource%20lock%20tokens%20(via%20%60IAllocator.attest%60).%0A3.%20%20**Authorizing%20Claims%3A**%20Validating%20claims%20against%20resource%20locks%20(via%20%60IAllocator.authorizeClaim%60).%0A4.%20%20**Nonce%20Management%3A**%20Ensuring%20nonces%20are%20not%20reused%20for%20claims%20and%20(optionally)%20consuming%20nonces%20directly%20on%20The%20Compact%20using%20%60consume%60.%0A%0AAllocators%20must%20be%20registered%20with%20The%20Compact%20via%20%60__registerAllocator%60%20before%20they%20can%20be%20assigned%20to%20locks.%20They%20must%20implement%20the%20%60IAllocator%60%20interface%20and%20operate%20under%20specific%20%5Btrust%20assumptions%5D(%23trust-assumptions).%0A%0A%23%23%23%20Arbiters%0A%0AArbiters%20are%20responsible%20for%20verifying%20and%20submitting%20claims.%20When%20a%20sponsor%20creates%20a%20compact%2C%20they%20designate%20an%20arbiter%20who%20will%3A%0A%0A1.%20%20Verify%20that%20the%20specified%20conditions%20of%20the%20compact%20have%20been%20met%20(these%20conditions%20can%20be%20implicitly%20understood%20or%20explicitly%20defined%20via%20witness%20data).%0A2.%20%20Process%20the%20claim%20by%20calling%20the%20appropriate%20function%20on%20The%20Compact%20(from%20%60ITheCompactClaims%60).%0A3.%20%20Specify%20which%20claimants%20are%20entitled%20to%20the%20committed%20resources%20and%20in%20what%20form%20each%20claimant's%20portion%20will%20be%20issued%20(i.e.%2C%20direct%20transfer%2C%20withdrawal%2C%20or%20conversion)%20as%20part%20of%20the%20claim%20payload.%0A%0AOften%2C%20the%20entity%20fulfilling%20an%20off-chain%20condition%20(like%20a%20filler%20or%20solver)%20might%20interface%20directly%20with%20the%20arbiter.%20The%20%5Btrust%20assumptions%5D(%23trust-assumptions)%20around%20arbiters%20are%20critical%20to%20understand.%0A%0A%23%23%23%20Emissaries%0A%0AEmissaries%20provide%20a%20fallback%20verification%20mechanism%20for%20sponsors%20when%20authorizing%20claims.%20This%20is%20particularly%20useful%20for%3A%0A%0A1.%20%20Smart%20contract%20accounts%20that%20might%20update%20their%20EIP-1271%20signature%20verification%20logic.%0A2.%20%20Accounts%20using%20EIP-7702%20delegation%20that%20leverages%20EIP-1271.%0A3.%20%20Situations%20where%20the%20sponsor%20wants%20to%20delegate%20claim%20verification%20to%20a%20trusted%20third%20party.%0A%0AA%20sponsor%20assigns%20an%20emissary%20for%20a%20specific%20%60lockTag%60%20using%20%60assignEmissary%60.%20The%20emissary%20must%20implement%20the%20%60IEmissary%60%20interface%2C%20specifically%20the%20%60verifyClaim%60%20function.%0A%0ATo%20change%20an%20emissary%20after%20one%20has%20been%20assigned%2C%20the%20sponsor%20must%20first%20call%20%60scheduleEmissaryAssignment%60%2C%20wait%20for%20the%20%60resetPeriod%60%20associated%20with%20the%20%60lockTag%60%20to%20elapse%2C%20and%20then%20call%20%60assignEmissary%60%20again%20with%20the%20new%20emissary's%20address%20(or%20%60address(0)%60%20to%20remove).%0A%0A%23%23%23%20Compacts%20%26%20EIP-712%20Payloads%0A%0AA%20**compact**%20is%20the%20agreement%20created%20by%20a%20sponsor%20that%20allows%20their%20locked%20resources%20to%20be%20claimed%20under%20specified%20conditions.%20The%20Compact%20protocol%20uses%20EIP-712%20typed%20structured%20data%20for%20creating%20and%20verifying%20signatures%20for%20these%20agreements.%0A%0AThere%20are%20three%20main%20EIP-712%20payload%20types%20a%20sponsor%20can%20sign%3A%0A%0A1.%20%20**%60Compact%60**%3A%20For%20single%20resource%20lock%20operations%20on%20a%20single%20chain.%0A%0A%20%20%20%20%60%60%60solidity%0A%20%20%20%20%2F%2F%20Defined%20in%20src%2Ftypes%2FEIP712Types.sol%0A%20%20%20%20struct%20Compact%20%7B%0A%20%20%20%20%20%20%20%20address%20arbiter%3B%20%20%20%20%2F%2F%20The%20account%20tasked%20with%20verifying%20and%20submitting%20the%20claim.%0A%20%20%20%20%20%20%20%20address%20sponsor%3B%20%20%20%20%2F%2F%20The%20account%20to%20source%20the%20tokens%20from.%0A%20%20%20%20%20%20%20%20uint256%20nonce%3B%20%20%20%20%20%20%2F%2F%20A%20parameter%20to%20enforce%20replay%20protection%2C%20scoped%20to%20allocator.%0A%20%20%20%20%20%20%20%20uint256%20expires%3B%20%20%20%20%2F%2F%20The%20time%20at%20which%20the%20claim%20expires.%0A%20%20%20%20%20%20%20%20bytes12%20lockTag%3B%20%20%20%20%2F%2F%20A%20tag%20representing%20the%20allocator%2C%20reset%20period%2C%20and%20scope.%0A%20%20%20%20%20%20%20%20address%20token%3B%20%20%20%20%20%20%2F%2F%20The%20locked%20token%2C%20or%20address(0)%20for%20native%20tokens.%0A%20%20%20%20%20%20%20%20uint256%20amount%3B%20%20%20%20%20%2F%2F%20The%20amount%20of%20ERC6909%20tokens%20to%20commit%20from%20the%20lock.%0A%20%20%20%20%20%20%20%20%2F%2F%20(Optional)%20Witness%20data%20may%20follow%3A%0A%20%20%20%20%20%20%20%20%2F%2F%20Mandate%20mandate%3B%0A%20%20%20%20%7D%0A%20%20%20%20%60%60%60%0A%0A2.%20%20**%60BatchCompact%60**%3A%20For%20allocating%20multiple%20resource%20locks%20on%20a%20single%20chain.%0A%0A%20%20%20%20%60%60%60solidity%0A%20%20%20%20%2F%2F%20Defined%20in%20src%2Ftypes%2FEIP712Types.sol%0A%20%20%20%20struct%20BatchCompact%20%7B%0A%20%20%20%20%20%20%20%20address%20arbiter%3B%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20account%20tasked%20with%20verifying%20and%20submitting%20the%20claim.%0A%20%20%20%20%20%20%20%20address%20sponsor%3B%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20account%20to%20source%20the%20tokens%20from.%0A%20%20%20%20%20%20%20%20uint256%20nonce%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20A%20parameter%20to%20enforce%20replay%20protection%2C%20scoped%20to%20allocator.%0A%20%20%20%20%20%20%20%20uint256%20expires%3B%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20time%20at%20which%20the%20claim%20expires.%0A%20%20%20%20%20%20%20%20Lock%5B%5D%20commitments%3B%20%20%20%20%20%20%20%20%20%2F%2F%20The%20committed%20locks%20with%20lock%20tags%2C%20tokens%2C%20%26%20amounts.%0A%20%20%20%20%20%20%20%20%2F%2F%20(Optional)%20Witness%20data%20may%20follow%3A%0A%20%20%20%20%20%20%20%20%2F%2F%20Mandate%20mandate%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20struct%20Lock%20%7B%0A%20%20%20%20%20%20%20%20bytes12%20lockTag%3B%20%20%20%20%2F%2F%20A%20tag%20representing%20the%20allocator%2C%20reset%20period%2C%20and%20scope.%0A%20%20%20%20%20%20%20%20address%20token%3B%20%20%20%20%20%20%2F%2F%20The%20locked%20token%2C%20or%20address(0)%20for%20native%20tokens.%0A%20%20%20%20%20%20%20%20uint256%20amount%3B%20%20%20%20%20%2F%2F%20The%20maximum%20committed%20amount%20of%20tokens.%0A%20%20%20%20%7D%0A%20%20%20%20%60%60%60%0A%0A3.%20%20**%60MultichainCompact%60**%3A%20For%20allocating%20one%20or%20more%20resource%20locks%20across%20multiple%20chains.%0A%0A%20%20%20%20%60%60%60%60solidity%0A%20%20%20%20%2F%2F%20Defined%20in%20src%2Ftypes%2FEIP712Types.sol%0A%20%20%20%20struct%20MultichainCompact%20%7B%0A%20%20%20%20address%20sponsor%3B%20%2F%2F%20The%20account%20to%20source%20the%20tokens%20from.%0A%20%20%20%20uint256%20nonce%3B%20%2F%2F%20A%20parameter%20to%20enforce%20replay%20protection%2C%20scoped%20to%20allocator.%0A%20%20%20%20uint256%20expires%3B%20%2F%2F%20The%20time%20at%20which%20the%20claim%20expires.%0A%20%20%20%20Element%5B%5D%20elements%3B%20%2F%2F%20Arbiter%2C%20chainId%2C%20commitments%2C%20and%20mandate%20for%20each%20chain.%0A%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Defined%20in%20src%2Ftypes%2FEIP712Types.sol%0A%20%20%20%20%20%20%20%20struct%20Element%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20address%20arbiter%3B%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20account%20tasked%20with%20verifying%20and%20submitting%20the%20claim.%0A%20%20%20%20%20%20%20%20%20%20%20%20uint256%20chainId%3B%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20chainId%20where%20the%20tokens%20are%20located.%0A%20%20%20%20%20%20%20%20%20%20%20%20Lock%5B%5D%20commitments%3B%20%20%20%20%20%20%20%20%20%2F%2F%20The%20committed%20locks%20with%20lock%20tags%2C%20tokens%2C%20%26%20amounts.%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Witness%20data%20MUST%20follow%20(mandatory%20for%20multichain%20compacts)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20Mandate%20mandate%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20%20%20The%20%60Mandate%60%20struct%20within%20these%20payloads%20is%20for%20%5BWitness%20Structure%5D(%23witness-structure).%20The%20EIP-712%20typehash%20for%20these%20structures%20is%20constructed%20dynamically%3B%20empty%20%60Mandate%60%20structs%20result%20in%20a%20typestring%20without%20witness%20data.%20Witness%20data%20is%20optional%20_except_%20in%20a%20%60MultichainCompact%60%3B%20a%20multichain%20compact's%20elements%20**must**%20include%20a%20witness.%0A%20%20%20%20%60%60%60%60%0A%0A**Permit2%20Integration%20Payloads%3A**%0AThe%20Compact%20also%20supports%20integration%20with%20Permit2%20for%20gasless%20deposits%2C%20using%20additional%20EIP-712%20structures%20for%20witness%20data%20within%20Permit2%20messages%3A%0A%0A-%20%60CompactDeposit(bytes12%20lockTag%2Caddress%20recipient)%60%3A%20For%20basic%20Permit2%20deposits.%0A-%20%60Activation(address%20activator%2Cuint256%20id%2CCompact%20compact)Compact(...)Mandate(...)%60%3A%20Combines%20deposits%20with%20single%20compact%20registration.%0A-%20%60BatchActivation(address%20activator%2Cuint256%5B%5D%20ids%2CCompact%20compact)Compact(...)Mandate(...)%60%3A%20Combines%20deposits%20with%20batch%20compact%20registration.%0A%0A**CompactCategory%20Enum%3A**%0AThe%20Compact%20introduces%20a%20%60CompactCategory%60%20enum%20to%20distinguish%20between%20different%20types%20of%20compacts%20when%20using%20Permit2%20integration%3A%0A%0A%60%60%60solidity%0A%2F%2F%20Defined%20in%20src%2Ftypes%2FCompactCategory.sol%0Aenum%20CompactCategory%20%7B%0A%20%20%20%20Compact%2C%0A%20%20%20%20BatchCompact%2C%0A%20%20%20%20MultichainCompact%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Witness%20Structure%0A%0AThe%20witness%20mechanism%20(%60Mandate%60%20struct)%20allows%20extending%20compacts%20with%20additional%20data%20for%20specifying%20conditions%20or%20parameters%20for%20a%20claim.%20The%20Compact%20protocol%20itself%20doesn't%20interpret%20the%20%60Mandate%60's%20content%3B%20this%20is%20the%20responsibility%20of%20the%20arbiter.%20However%2C%20The%20Compact%20uses%20the%20hash%20of%20the%20witness%20data%20and%20its%20reconstructed%20EIP-712%20typestring%20to%20derive%20the%20final%20claim%20hash%20for%20validation.%0A%0A**Format%3A**%0AThe%20witness%20is%20always%20a%20%60Mandate%60%20struct%20appended%20to%20the%20compact.%0A%0A%60%60%60solidity%0ACompact(...%2C%20Mandate%20mandate)Mandate(uint256%20myArg%2C%20bytes32%20otherArg)%0A%60%60%60%0A%0AThe%20%60witnessTypestring%60%20provided%20during%20a%20claim%20should%20be%20the%20arguments%20_inside_%20the%20%60Mandate%60%20struct%20(e.g.%2C%20%60uint256%20myArg%2Cbytes32%20otherArg%60)%2C%20followed%20by%20any%20nested%20structs.%20Note%20that%20there%20are%20no%20assumptions%20made%20by%20the%20protocol%20about%20the%20shape%20of%20the%20%60Mandate%60%20or%20any%20nested%20structs%20within%20it.%0A%0A**Nested%20Structs%3A**%0AEIP-712%20requires%20nested%20structs%20to%20be%20ordered%20alphanumerically%20after%20the%20top-level%20struct%20in%20the%20typestring.%20We%20recommend%20prefixing%20nested%20structs%20with%20%22Mandate%22%20(e.g.%2C%20%60MandateCondition%60)%20to%20ensure%20correct%20ordering.%20Failure%20to%20do%20so%20will%20result%20in%20an%20_invalid_%20EIP-712%20typestring.%0A%0AFor%20example%2C%20the%20correct%20witness%20typestring%20for%20%60Mandate(MandateCondition%20condition%2Cuint256%20arg)MandateCondition(bool%20flag%2Cuint256%20val)%60%20would%20be%20%60MandateCondition%20condition%2Cuint256%20arg)MandateCondition(bool%20flag%2Cuint256%20val%60%20(_without_%20a%20closing%20parenthesis).%0A%0A%3E%20%E2%98%9D%EF%B8%8F%20Note%20the%20missing%20closing%20parenthesis%20in%20the%20above%20example.%20It%20will%20be%20added%20by%20the%20protocol%20during%20the%20dynamic%20typestring%20construction%2C%20so%20**do%20not%20include%20the%20closing%20parenthesis%20in%20your%20witness%20typestring.**%20This%20is%20crucial%2C%20otherwise%20the%20generated%20typestring%20_will%20be%20invalid_.%0A%0A%23%23%23%20Registration%0A%0AAs%20an%20alternative%20to%20sponsors%20signing%20EIP-712%20payloads%2C%20compacts%20can%20be%20_registered_%20directly%20on%20The%20Compact%20contract.%20This%20involves%20submitting%20a%20%60claimHash%60%20(derived%20from%20the%20intended%20compact%20details)%20and%20its%20%60typehash%60.%0AThis%20supports%3A%0A%0A-%20Sponsors%20without%20direct%20signing%20capabilities%20(e.g.%2C%20DAOs%2C%20protocols).%0A-%20Smart%20wallet%20%2F%20EIP-7702%20enabled%20sponsors%20with%20alternative%20signature%20logic.%0A-%20Chained%20deposit-and-register%20operations.%0A%0ARegistration%20can%20be%20done%20by%20the%20sponsor%20or%20a%20third%20party%20(if%20they%20provide%20the%20sponsor's%20signature%20for%20%60registerFor%60%20type%20functions%2C%20or%20if%20they%20are%20providing%20the%20deposited%20tokens).%20Registrations%20do%20not%20expire%2C%20and%20registered%20compacts%20cannot%20be%20unregistered%20by%20the%20sponsor.%20Registrations%20can%20be%20invalidated%20by%20the%20allocator%20consuming%20the%20nonce%2C%20or%20by%20letting%20them%20expire.%20Once%20a%20claim%20is%20processed%20for%20a%20compact%20its%20registration%20state%20is%20cleared.%0A%0AThe%20current%20registration%20status%20for%20a%20given%20claim%20can%20be%20queried%20via%20the%20%60ITheCompact.isRegistered%60%20function%3A%0A%0A%60%60%60solidity%0Abool%20isRegistered%20%3D%20theCompact.isRegistered(sponsor%2C%20claimHash%2C%20typehash)%3B%0A%60%60%60%0A%0A%23%23%23%20Claimant%20Processing%20%26%20Structure%0A%0AWhen%20an%20arbiter%20submits%20a%20claim%2C%20they%20provide%20an%20array%20of%20%60Component%60%20structs.%20Each%20%60Component%60%20specifies%20an%20%60amount%60%20and%20a%20%60claimant%60.%0A%0A%60%60%60solidity%0A%2F%2F%20Defined%20in%20src%2Ftypes%2FComponents.sol%0Astruct%20Component%20%7B%0A%20%20%20%20uint256%20claimant%3B%20%2F%2F%20The%20lockTag%20%2B%20recipient%20of%20the%20transfer%20or%20withdrawal.%0A%20%20%20%20uint256%20amount%3B%20%20%20%2F%2F%20The%20amount%20of%20tokens%20to%20transfer%20or%20withdraw.%0A%7D%0A%60%60%60%0A%0AThe%20%60claimant%60%20field%20encodes%20both%20the%20%60recipient%60%20address%20(lower%20160%20bits)%20and%20a%20%60bytes12%20lockTag%60%20(upper%2096%20bits)%3A%20%60claimant%20%3D%20(lockTag%20%3C%3C%20160)%20%7C%20recipient%60.%0A%0AThis%20encoding%20determines%20how%20The%20Compact%20processes%20each%20component%20of%20the%20claim%3A%0A%0A1.%20%20**Direct%20ERC6909%20Transfer%3A**%20If%20the%20encoded%20%60lockTag%60%20matches%20the%20%60lockTag%60%20of%20the%20resource%20lock%20being%20claimed%2C%20the%20%60amount%60%20of%20ERC6909%20tokens%20is%20transferred%20directly%20to%20the%20%60recipient%60.%0A2.%20%20**Convert%20Between%20Resource%20Locks%3A**%20If%20the%20encoded%20%60lockTag%60%20is%20non-zero%20and%20_different_%20from%20the%20claimed%20lock's%20tag%2C%20The%20Compact%20attempts%20to%20_convert_%20the%20claimed%20resource%20lock%20to%20a%20new%20one%20defined%20by%20the%20encoded%20%60lockTag%60%20for%20the%20%60recipient%60.%20This%20allows%20changing%20allocator%2C%20reset%20period%2C%20or%20scope.%0A3.%20%20**Withdraw%20Underlying%20Tokens%3A**%20If%20the%20encoded%20%60lockTag%60%20is%20%60bytes12(0)%60%2C%20The%20Compact%20attempts%20to%20withdraw%20the%20underlying%20tokens%20(native%20or%20ERC20)%20from%20the%20resource%20lock%20and%20send%20them%20to%20the%20%60recipient%60.%0A%0A**Withdrawal%20Fallback%20Mechanism%3A**%0ATo%20prevent%20griefing%20(e.g.%2C%20via%20malicious%20receive%20hooks%20during%20withdrawals%2C%20or%20relayed%20claims%20that%20intentionally%20underpay%20the%20necessary%20amount%20of%20gas)%2C%20The%20Compact%20first%20attempts%20withdrawals%20with%20half%20the%20available%20gas.%20If%20this%20fails%20(and%20sufficient%20gas%20remains%20above%20a%20benchmarked%20stipend)%2C%20it%20falls%20back%20to%20a%20direct%20ERC6909%20transfer%20to%20the%20recipient.%20Stipends%20can%20be%20queried%20via%20%60getRequiredWithdrawalFallbackStipends%60.%20Benchmarking%20for%20these%20stipends%20is%20done%20via%20a%20call%20to%20%60__benchmark%60%20post-deployment%2C%20which%20meters%20cold%20account%20access%20and%20typical%20ERC20%20and%20native%20transfers.%20This%20benchmark%20can%20be%20re-run%20by%20anyone%20at%20any%20time.%0A%0A%23%23%23%20Forced%20Withdrawals%0A%0AThis%20mechanism%20provides%20sponsors%20recourse%20if%20an%20allocator%20becomes%20unresponsive%20or%20censors%20requests.%0A%0A1.%20%20**Enable%3A**%20Sponsor%20calls%20%60enableForcedWithdrawal(uint256%20id)%60.%0A%0A2.%20%20**Wait%3A**%20The%20%60resetPeriod%60%20for%20that%20resource%20lock%20must%20elapse.%0A3.%20%20**Withdraw%3A**%20Sponsor%20calls%20%60forcedWithdrawal(uint256%20id%2C%20address%20recipient%2C%20uint256%20amount)%60%20to%20retrieve%20the%20underlying%20tokens.%0A%0AThe%20forced%20withdrawal%20state%20can%20be%20reversed%20with%20%60disableForcedWithdrawal(uint256%20id)%60.%0A%0A%23%23%23%20Signature%20Verification%0A%0AWhen%20a%20claim%20is%20submitted%20for%20a%20non-registered%20compact%20(i.e.%2C%20one%20relying%20on%20a%20sponsor's%20signature)%2C%20The%20Compact%20verifies%20the%20sponsor's%20authorization%20in%20the%20following%20order%3A%0A%0A1.%20%20**Caller%20is%20Sponsor%3A**%20If%20%60msg.sender%20%3D%3D%20sponsor%60%2C%20authorization%20is%20granted.%0A2.%20%20**ECDSA%20Signature%3A**%20Attempt%20standard%20ECDSA%20signature%20verification.%0A3.%20%20**EIP-1271%20%60isValidSignature%60%3A**%20If%20ECDSA%20fails%2C%20call%20%60isValidSignature%60%20on%20the%20sponsor's%20address%20(if%20it's%20a%20contract)%20with%20half%20the%20remaining%20gas.%0A4.%20%20**Emissary%20%60verifyClaim%60%3A**%20If%20EIP-1271%20fails%20or%20isn't%20applicable%2C%20and%20an%20emissary%20is%20assigned%20for%20the%20sponsor%20and%20%60lockTag%60%2C%20call%20the%20emissary's%20%60verifyClaim%60%20function.%0A%0ASponsors%20cannot%20unilaterally%20cancel%20a%20signed%20compact%3B%20only%20allocators%20can%20effectively%20do%20so%20by%20consuming%20the%20nonce.%20This%20is%20vital%20to%20upholding%20the%20equivocation%20guarantees%20for%20claimants.%0A%0A%23%23%20Trust%20Assumptions%0A%0AThe%20Compact%20protocol%20operates%20under%20a%20specific%20trust%20model%20where%20different%20actors%20have%20varying%20levels%20of%20trust%20requirements%3A%0A%0A**Sponsor%20Trust%20Requirements%3A**%0A%0A-%20**Allocators**%3A%20Sponsors%20must%20trust%20that%20allocators%20will%20not%20unduly%20censor%20valid%20requests%20against%20fully%20funded%20locks.%20However%2C%20sponsors%20retain%20the%20ability%20to%20initiate%20forced%20withdrawals%20if%20allocators%20become%20unresponsive.%0A-%20**Arbiters**%3A%20Sponsors%20must%20trust%20that%20arbiters%20will%20not%20process%20claims%20where%20the%20specified%20conditions%20were%20not%20met.%20Arbiters%20have%20significant%20power%20in%20determining%20claim%20validity.%0A-%20**Emissaries**%3A%20Sponsors%20must%20trust%20that%20emissaries%20(if%20assigned)%20will%20not%20authorize%20claims%20maliciously%2C%20as%20emissaries%20can%20act%20as%20fallback%20signers%20when%20other%20verification%20methods%20fail.%20Emissaries%20effectively%20have%20the%20same%20authorization%20power%20as%20the%20sponsor%20for%20claim%20verification.%0A%0A**Claimant%20Trust%20Requirements%3A**%0A%0A-%20**Allocators**%3A%20Claimants%20must%20trust%20that%20allocators%20are%20sound%20and%20will%20not%20allow%20resource%20locks%20to%20become%20underfunded%20through%20double-spending%20or%20other%20allocation%20failures.%0A-%20**Arbiters**%3A%20Claimants%20must%20trust%20that%20arbiters%20will%20not%20fail%20to%20process%20claims%20where%20conditions%20were%20properly%20met.%0A-%20**Emissaries**%3A%20Claimants%20must%20trust%20that%20emissaries%20(if%20assigned)%20will%20faithfully%20authorize%20valid%20claims%20if%20the%20sponsor%20is%20able%20to%20equivocate%2C%20or%20update%20their%20account%20to%20revoke%20their%20authorization%20on%20a%20previously%20authorized%20compact%20(as%20is%20the%20case%20with%20EIP-7702%20sponsors%20and%20many%20smart%20contracts%20implementing%20EIP-1271).%20Therefore%2C%20claimants%20should%20require%20the%20use%20of%20one%20of%20a%20small%20set%20of%20known%2C%20%22canonical%22%20emissaries%20that%20enforce%20delays%20before%20allowing%20key%20rotation.%0A%0A%23%23%20Key%20Events%0A%0AThe%20Compact%20emits%20several%20events%20to%20signal%20important%20state%20changes%3A%0A%0A-%20%60Claim(address%20indexed%20sponsor%2C%20address%20indexed%20allocator%2C%20address%20indexed%20arbiter%2C%20bytes32%20claimHash%2C%20uint256%20nonce)%60%3A%20Emitted%20when%20a%20claim%20is%20successfully%20processed%20via%20%60ITheCompactClaims%60%20functions.%0A-%20%60NonceConsumedDirectly(address%20indexed%20allocator%2C%20uint256%20nonce)%60%3A%20Emitted%20when%20an%20allocator%20directly%20consumes%20a%20nonce%20via%20%60consume%60.%0A-%20%60ForcedWithdrawalStatusUpdated(address%20indexed%20account%2C%20uint256%20indexed%20id%2C%20bool%20activating%2C%20uint256%20withdrawableAt)%60%3A%20Emitted%20when%20%60enableForcedWithdrawal%60%20or%20%60disableForcedWithdrawal%60%20is%20called.%0A-%20%60CompactRegistered(address%20indexed%20sponsor%2C%20bytes32%20claimHash%2C%20bytes32%20typehash)%60%3A%20Emitted%20when%20a%20compact%20is%20registered%20via%20%60register%60%2C%20%60registerMultiple%60%2C%20or%20combined%20deposit-and-register%20functions.%0A-%20%60AllocatorRegistered(uint96%20allocatorId%2C%20address%20allocator)%60%3A%20Emitted%20when%20a%20new%20allocator%20is%20registered%20via%20%60__registerAllocator%60.%0A-%20%60EmissaryAssigned(address%20indexed%20sponsor%2C%20bytes12%20indexed%20lockTag%2C%20address%20emissary)%60%3A%20Emitted%20when%20a%20sponsor%20assigns%20or%20changes%20an%20emissary%20via%20%60assignEmissary%60.%0A%0AStandard%20%60ERC6909.Transfer%60%20events%20are%20also%20emitted%20for%20mints%2C%20burns%2C%20and%20transfers%20of%20resource%20lock%20tokens.%0A%0A%23%23%20Key%20Data%20Structures%0A%0AMany%20functions%20in%20The%20Compact%20use%20custom%20structs%20for%20their%20calldata.%20Here%20are%20some%20of%20the%20most%20important%20ones%3A%0A%0A-%20**For%20Claims%20(passed%20to%20%60ITheCompactClaims%60%20functions)%3A**%0A%20%20-%20%60Claim%60%3A%20For%20claims%20involving%20a%20single%20resource%20lock%20on%20a%20single%20chain.%0A%20%20%20%20%60%60%60solidity%0A%20%20%20%20%2F%2F%20Defined%20in%20src%2Ftypes%2FClaims.sol%0A%20%20%20%20struct%20Claim%20%7B%0A%20%20%20%20%20%20%20%20bytes%20allocatorData%3B%0A%20%20%20%20%20%20%20%20bytes%20sponsorSignature%3B%0A%20%20%20%20%20%20%20%20address%20sponsor%3B%0A%20%20%20%20%20%20%20%20uint256%20nonce%3B%0A%20%20%20%20%20%20%20%20uint256%20expires%3B%0A%20%20%20%20%20%20%20%20bytes32%20witness%3B%0A%20%20%20%20%20%20%20%20string%20witnessTypestring%3B%0A%20%20%20%20%20%20%20%20uint256%20id%3B%0A%20%20%20%20%20%20%20%20uint256%20allocatedAmount%3B%0A%20%20%20%20%20%20%20%20Component%5B%5D%20claimants%3B%0A%20%20%20%20%7D%0A%20%20%20%20%60%60%60%0A%20%20-%20%60BatchClaim%60%3A%20For%20multiple%20resource%20locks%20on%20a%20single%20chain.%0A%20%20-%20%60MultichainClaim%60%3A%20For%20single%20resource%20lock%20claims%20on%20the%20notarized%20(i.e.%2C%20origin)%20chain%20of%20a%20multichain%20compact.%0A%20%20-%20%60ExogenousMultichainClaim%60%3A%20For%20single%20resource%20lock%20claims%20on%20an%20exogenous%20chain%20(i.e.%2C%20any%20chain%20_other%20than_%20the%20notarized%20chain).%0A%20%20-%20%60BatchMultichainClaim%60%3A%20For%20multiple%20resource%20locks%20on%20the%20notarized%20chain.%0A%20%20-%20%60ExogenousBatchMultichainClaim%60%3A%20For%20multiple%20resource%20locks%20on%20an%20exogenous%20chain.%0A%20%20-%20%60BatchClaimComponent%60%3A%20Used%20within%20batch%20claim%20structs.%0A%20%20%20%20%60%60%60solidity%0A%20%20%20%20%2F%2F%20Defined%20in%20src%2Ftypes%2FComponents.sol%0A%20%20%20%20struct%20BatchClaimComponent%20%7B%0A%20%20%20%20%20%20%20%20uint256%20id%3B%0A%20%20%20%20%20%20%20%20uint256%20allocatedAmount%3B%0A%20%20%20%20%20%20%20%20Component%5B%5D%20portions%3B%0A%20%20%20%20%7D%0A%20%20%20%20%60%60%60%0A%0A-%20**For%20Allocated%20Transfers%20(passed%20to%20%60ITheCompact.allocatedTransfer%60%20etc.)%3A**%0A%20%20-%20%60AllocatedTransfer%60%3A%20For%20transferring%20a%20single%20ID%20to%20multiple%20recipients%20with%20allocator%20approval.%0A%20%20%20%20%60%60%60solidity%0A%20%20%20%20%2F%2F%20Defined%20in%20src%2Ftypes%2FClaims.sol%0A%20%20%20%20struct%20AllocatedTransfer%20%7B%0A%20%20%20%20%20%20%20%20bytes%20allocatorData%3B%0A%20%20%20%20%20%20%20%20uint256%20nonce%3B%0A%20%20%20%20%20%20%20%20uint256%20expires%3B%0A%20%20%20%20%20%20%20%20uint256%20id%3B%0A%20%20%20%20%20%20%20%20Component%5B%5D%20recipients%3B%0A%20%20%20%20%7D%0A%20%20%20%20%60%60%60%0A%20%20-%20%60AllocatedBatchTransfer%60%3A%20For%20transferring%20multiple%20IDs.%0A%0A-%20**For%20Deposits%20(used%20with%20Permit2)%3A**%0A%20%20-%20%60DepositDetails%60%3A%20Helper%20for%20batch%20Permit2%20deposits.%0A",lastUpdatedAt:1758687736e3},{lazy:()=>J(()=>import("./resources-CdFfXqp7.js"),[]),path:"/research/deprecated/resources.html",type:"mdx",filePath:"research/deprecated/resources.mdx",content:"%23%20Resource%20Management%0A%0A%23%23%20Overview%0A%0AThe%20Protocol%20leverages%20an%20expansive%20locking%20system%20from%20%5Bthe-compact%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fthe-compact%2F).%20We%20have%20incorporated%20%5BMandates%20and%20Solver%20Payloads%5D(.%2Fprotocol)%20to%20allow%20Intents%20to%20be%20solved%20on%20a%20single%20chain%20without%20provisioning%20up%20front%20capital%20as%20we%20arbiters%20can%20confirm%20mandates%20have%20been%20met%20by%20solvers%20at%20execution%20time%2C%20thus%20solvers%20may%20use%20the%20swappers%20locked%20funds%20for%20execution.%0A%0A%3E%20As%20of%20July%2025th%20the%20%5Bthe-compact%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fthe-compact%2F)%20we%20are%20developing%20on%20has%20been%20forked%20from%20%5BUniswap%20the-compact%5D(https%3A%2F%2Fgithub.com%2FUniswap%2Fthe-compact%2Ftree%2Fv1)%20v1%20branch%20which%20has%20not%20as%20yet%20been%20deployed.%0A%0A%23%23%20Summary%0A%0AThe%20Compact%20is%20an%20ownerless%20ERC6909%20contract%20that%20facilitates%20the%20voluntary%20formation%20and%20mediation%20of%20reusable%20**resource%20locks**.%20It%20enables%20tokens%20to%20be%20credibly%20committed%20to%20be%20spent%20in%20exchange%20for%20performing%20actions%20across%20arbitrary%2C%20asynchronous%20environments%2C%20and%20claimed%20once%20the%20specified%20conditions%20have%20been%20met.%0A%0AResource%20locks%20are%20entered%20into%20by%20ERC20%20or%20native%20token%20holders%20(called%20the%20**depositor**).%20Once%20a%20resource%20lock%20has%20been%20established%2C%20the%20owner%20of%20the%20ERC6909%20token%20representing%20a%20resource%20lock%20can%20act%20as%20a%20**sponsor**%20and%20create%20a%20**compact**.%20A%20compact%20is%20a%20commitment%20allowing%20interested%20parties%20to%20claim%20their%20tokens%20through%20the%20sponsor's%20indicated%20**arbiter**.%20The%20arbiter%20is%20then%20responsible%20for%20processing%20the%20claim%20once%20it%20has%20attested%20to%20the%20specified%20conditions%20of%20the%20compact%20having%20been%20met.%0A%0AWhen%20depositing%20into%20a%20resource%20lock%2C%20the%20depositor%20assigns%20an%20**allocator**%20and%20a%20**reset%20period**%20for%20that%20lock.%20The%20allocator%20is%20tasked%20with%20providing%20additional%20authorization%20whenever%20the%20owner%20of%20the%20lock%20wishes%20to%20transfer%20their%206909%20tokens%2C%20withdraw%20the%20underlying%20locked%20assets%2C%20or%20sponsor%20a%20compact%20utilizing%20the%20lock.%20Their%20primary%20role%20is%20essentially%20to%20protect%20**claimants**%E2%80%94entities%20that%20provide%20proof%20of%20having%20met%20the%20conditions%20and%20subsequently%20make%20a%20claim%20against%20a%20compact%E2%80%94by%20ensuring%20the%20credibility%20of%20commitments%2C%20such%20as%20preventing%20%22double-spends%22%20involving%20previously-committed%20locked%20balances.%0A%0AAllocators%20can%20be%20purely%20onchain%20abstractions%2C%20or%20can%20involve%20hybrid%20(onchain%20%2B%20offchain)%20mechanics%20as%20part%20of%20their%20authorization%20procedure.%20Should%20an%20allocator%20erroneously%20or%20maliciously%20fail%20to%20authorize%20the%20use%20of%20an%20unallocated%20resource%20lock%20balance%2C%20the%20depositor%20can%20initiate%20a%20**forced%20withdrawal**%20for%20the%20lock%20in%20question%3B%20after%20waiting%20for%20the%20reset%20period%20indicated%20when%20depositing%20into%20the%20lock%2C%20they%20can%20withdraw%20their%20underlying%20balance%20at%20will%20_without_%20the%20allocator's%20explicit%20permission.%0A%0ASponsors%20can%20also%20optionally%20assign%20an%20**emissary**%20to%20act%20as%20a%20fallback%20signer%20for%20authorizing%20claims%20against%20their%20compacts.%20This%20is%20particularly%20helpful%20for%20smart%20contract%20accounts%20or%20other%20scenarios%20where%20signing%20keys%20might%20change.%0A%0AThe%20Compact%20effectively%20%22activates%22%20any%20deposited%20tokens%20to%20be%20instantly%20spent%20or%20swapped%20across%20arbitrary%2C%20asynchronous%20environments%20as%20long%20as%3A%0A%0A-%20Claimants%20are%20confident%20that%20the%20allocator%20is%20sound%20and%20will%20not%20leave%20the%20resource%20lock%20underallocated.%0A-%20Sponsors%20are%20confident%20that%20the%20allocator%20will%20not%20unduly%20censor%20fully%20allocated%20requests.%0A-%20Sponsors%20are%20confident%20that%20the%20arbiter%20is%20sound%20and%20will%20not%20process%20claims%20where%20the%20conditions%20were%20not%20successfully%20met.%0A-%20Claimants%20are%20confident%20that%20the%20arbiter%20is%20sound%20and%20will%20not%20_fail_%20to%20process%20claims%20where%20the%20conditions%20_were_%20successfully%20met.%0A%0A%23%23%20Key%20Concepts%0A%0A%23%23%23%20Resource%20Locks%0A%0AResource%20locks%20are%20the%20fundamental%20building%20blocks%20of%20The%20Compact%20protocol.%20They%20are%20created%20when%20a%20depositor%20places%20tokens%20(either%20native%20tokens%20or%20ERC20%20tokens)%20into%20The%20Compact.%20Each%20resource%20lock%20has%20four%20key%20properties%3A%0A%0A1.%20%20The%20**underlying%20token**%20held%20in%20the%20resource%20lock.%0A2.%20%20The%20**allocator**%20tasked%20with%20cosigning%20on%20claims%20against%20the%20resource%20locks%20(see%20%5BAllocators%5D(%23allocators)).%0A3.%20%20The%20**scope**%20of%20the%20resource%20lock%20(either%20spendable%20on%20any%20chain%20or%20limited%20to%20a%20single%20chain).%0A4.%20%20The%20**reset%20period**%20for%20forcibly%20exiting%20the%20lock%20(see%20%5BForced%20Withdrawals%5D(%23forced-withdrawals))%20and%20for%20emissary%20reassignment%20timelocks%20(see%20%5BEmissaries%5D(%23emissaries)).%0A%0AEach%20unique%20combination%20of%20these%20four%20properties%20is%20represented%20by%20a%20fungible%20ERC6909%20tokenID.%20The%20owner%20of%20these%20ERC6909%20tokens%20can%20act%20as%20a%20sponsor%20and%20create%20compacts.%0A%0AThe%20%60scope%60%2C%20%60resetPeriod%60%2C%20and%20the%20%60allocatorId%60%20(obtained%20when%20an%20allocator%20is%20registered)%20are%20packed%20into%20a%20%60bytes12%20lockTag%60.%20A%20resource%20lock's%20specific%20ID%20(the%20ERC6909%20%60tokenId%60)%20is%20a%20concatenation%20of%20this%20%60lockTag%60%20and%20the%20underlying%20%60token%60%20address%2C%20represented%20as%20a%20%60uint256%60%20for%20ERC6909%20compatibility.%20This%20%60lockTag%60%20is%20used%20throughout%20various%20interfaces%20to%20succinctly%20identify%20the%20parameters%20of%20a%20lock.%0A%0A**Fee-on-Transfer%20and%20Rebasing%20Token%20Handling%3A**%0A%0A-%20**Fee-on-Transfer%3A**%20The%20Compact%20correctly%20handles%20fee-on-transfer%20tokens%20for%20both%20deposits%20and%20withdrawals.%20The%20amount%20of%20ERC6909%20tokens%20minted%20or%20burned%20is%20based%20on%20the%20_actual%20balance%20change_%20in%20The%20Compact%20contract%2C%20not%20just%20the%20specified%20amount.%20This%20ensures%20ERC6909%20tokens%20accurately%20represent%20the%20underlying%20assets.%0A-%20**Rebasing%20Tokens%3A**%20**Rebasing%20tokens%20(e.g.%2C%20stETH)%20are%20NOT%20supported%20in%20The%20Compact%20V1.**%20Any%20yield%20or%20other%20balance%20changes%20occurring%20_after_%20deposit%20will%20not%20accrue%20to%20the%20depositor's%20ERC6909%20tokens.%20For%20such%20assets%2C%20use%20their%20wrapped%2C%20non-rebasing%20counterparts%20(e.g.%2C%20wstETH)%20to%20avoid%20loss%20of%20value.%0A%0A%23%23%23%20Allocators%0A%0AEach%20resource%20lock%20is%20mediated%20by%20an%20**allocator**.%20Their%20primary%20responsibilities%20include%3A%0A%0A1.%20%20**Preventing%20Double-Spending%3A**%20Ensuring%20sponsors%20don't%20commit%20the%20same%20tokens%20to%20multiple%20compacts%20or%20transfer%20away%20committed%20funds.%0A2.%20%20**Validating%20Transfers%3A**%20Attesting%20to%20standard%20ERC6909%20transfers%20of%20resource%20lock%20tokens%20(via%20%60IAllocator.attest%60).%0A3.%20%20**Authorizing%20Claims%3A**%20Validating%20claims%20against%20resource%20locks%20(via%20%60IAllocator.authorizeClaim%60).%0A4.%20%20**Nonce%20Management%3A**%20Ensuring%20nonces%20are%20not%20reused%20for%20claims%20and%20(optionally)%20consuming%20nonces%20directly%20on%20The%20Compact%20using%20%60consume%60.%0A%0AAllocators%20must%20be%20registered%20with%20The%20Compact%20via%20%60__registerAllocator%60%20before%20they%20can%20be%20assigned%20to%20locks.%20They%20must%20implement%20the%20%60IAllocator%60%20interface%20and%20operate%20under%20specific%20%5Btrust%20assumptions%5D(%23trust-assumptions).%0A%0A%23%23%23%20Arbiters%0A%0AArbiters%20are%20responsible%20for%20verifying%20and%20submitting%20claims.%20When%20a%20sponsor%20creates%20a%20compact%2C%20they%20designate%20an%20arbiter%20who%20will%3A%0A%0A1.%20%20Verify%20that%20the%20specified%20conditions%20of%20the%20compact%20have%20been%20met%20(these%20conditions%20can%20be%20implicitly%20understood%20or%20explicitly%20defined%20via%20witness%20data).%0A2.%20%20Process%20the%20claim%20by%20calling%20the%20appropriate%20function%20on%20The%20Compact%20(from%20%60ITheCompactClaims%60).%0A3.%20%20Specify%20which%20claimants%20are%20entitled%20to%20the%20committed%20resources%20and%20in%20what%20form%20each%20claimant's%20portion%20will%20be%20issued%20(i.e.%2C%20direct%20transfer%2C%20withdrawal%2C%20or%20conversion)%20as%20part%20of%20the%20claim%20payload.%0A%0AOften%2C%20the%20entity%20fulfilling%20an%20off-chain%20condition%20(like%20a%20filler%20or%20solver)%20might%20interface%20directly%20with%20the%20arbiter.%20The%20%5Btrust%20assumptions%5D(%23trust-assumptions)%20around%20arbiters%20are%20critical%20to%20understand.%0A%0A%23%23%23%20Emissaries%0A%0AEmissaries%20provide%20a%20fallback%20verification%20mechanism%20for%20sponsors%20when%20authorizing%20claims.%20This%20is%20particularly%20useful%20for%3A%0A%0A1.%20%20Smart%20contract%20accounts%20that%20might%20update%20their%20EIP-1271%20signature%20verification%20logic.%0A2.%20%20Accounts%20using%20EIP-7702%20delegation%20that%20leverages%20EIP-1271.%0A3.%20%20Situations%20where%20the%20sponsor%20wants%20to%20delegate%20claim%20verification%20to%20a%20trusted%20third%20party.%0A%0AA%20sponsor%20assigns%20an%20emissary%20for%20a%20specific%20%60lockTag%60%20using%20%60assignEmissary%60.%20The%20emissary%20must%20implement%20the%20%60IEmissary%60%20interface%2C%20specifically%20the%20%60verifyClaim%60%20function.%0A%0ATo%20change%20an%20emissary%20after%20one%20has%20been%20assigned%2C%20the%20sponsor%20must%20first%20call%20%60scheduleEmissaryAssignment%60%2C%20wait%20for%20the%20%60resetPeriod%60%20associated%20with%20the%20%60lockTag%60%20to%20elapse%2C%20and%20then%20call%20%60assignEmissary%60%20again%20with%20the%20new%20emissary's%20address%20(or%20%60address(0)%60%20to%20remove).%0A%0A%23%23%23%20Compacts%20%26%20EIP-712%20Payloads%0A%0AA%20**compact**%20is%20the%20agreement%20created%20by%20a%20sponsor%20that%20allows%20their%20locked%20resources%20to%20be%20claimed%20under%20specified%20conditions.%20The%20Compact%20protocol%20uses%20EIP-712%20typed%20structured%20data%20for%20creating%20and%20verifying%20signatures%20for%20these%20agreements.%0A%0AThere%20are%20three%20main%20EIP-712%20payload%20types%20a%20sponsor%20can%20sign%3A%0A%0A1.%20%20**%60Compact%60**%3A%20For%20single%20resource%20lock%20operations%20on%20a%20single%20chain.%0A%0A%20%20%20%20%60%60%60solidity%0A%20%20%20%20%2F%2F%20Defined%20in%20src%2Ftypes%2FEIP712Types.sol%0A%20%20%20%20struct%20Compact%20%7B%0A%20%20%20%20%20%20%20%20address%20arbiter%3B%20%20%20%20%2F%2F%20The%20account%20tasked%20with%20verifying%20and%20submitting%20the%20claim.%0A%20%20%20%20%20%20%20%20address%20sponsor%3B%20%20%20%20%2F%2F%20The%20account%20to%20source%20the%20tokens%20from.%0A%20%20%20%20%20%20%20%20uint256%20nonce%3B%20%20%20%20%20%20%2F%2F%20A%20parameter%20to%20enforce%20replay%20protection%2C%20scoped%20to%20allocator.%0A%20%20%20%20%20%20%20%20uint256%20expires%3B%20%20%20%20%2F%2F%20The%20time%20at%20which%20the%20claim%20expires.%0A%20%20%20%20%20%20%20%20bytes12%20lockTag%3B%20%20%20%20%2F%2F%20A%20tag%20representing%20the%20allocator%2C%20reset%20period%2C%20and%20scope.%0A%20%20%20%20%20%20%20%20address%20token%3B%20%20%20%20%20%20%2F%2F%20The%20locked%20token%2C%20or%20address(0)%20for%20native%20tokens.%0A%20%20%20%20%20%20%20%20uint256%20amount%3B%20%20%20%20%20%2F%2F%20The%20amount%20of%20ERC6909%20tokens%20to%20commit%20from%20the%20lock.%0A%20%20%20%20%20%20%20%20%2F%2F%20(Optional)%20Witness%20data%20may%20follow%3A%0A%20%20%20%20%20%20%20%20%2F%2F%20Mandate%20mandate%3B%0A%20%20%20%20%7D%0A%20%20%20%20%60%60%60%0A%0A2.%20%20**%60BatchCompact%60**%3A%20For%20allocating%20multiple%20resource%20locks%20on%20a%20single%20chain.%0A%0A%20%20%20%20%60%60%60solidity%0A%20%20%20%20%2F%2F%20Defined%20in%20src%2Ftypes%2FEIP712Types.sol%0A%20%20%20%20struct%20BatchCompact%20%7B%0A%20%20%20%20%20%20%20%20address%20arbiter%3B%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20account%20tasked%20with%20verifying%20and%20submitting%20the%20claim.%0A%20%20%20%20%20%20%20%20address%20sponsor%3B%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20account%20to%20source%20the%20tokens%20from.%0A%20%20%20%20%20%20%20%20uint256%20nonce%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20A%20parameter%20to%20enforce%20replay%20protection%2C%20scoped%20to%20allocator.%0A%20%20%20%20%20%20%20%20uint256%20expires%3B%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20time%20at%20which%20the%20claim%20expires.%0A%20%20%20%20%20%20%20%20Lock%5B%5D%20commitments%3B%20%20%20%20%20%20%20%20%20%2F%2F%20The%20committed%20locks%20with%20lock%20tags%2C%20tokens%2C%20%26%20amounts.%0A%20%20%20%20%20%20%20%20%2F%2F%20(Optional)%20Witness%20data%20may%20follow%3A%0A%20%20%20%20%20%20%20%20%2F%2F%20Mandate%20mandate%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20struct%20Lock%20%7B%0A%20%20%20%20%20%20%20%20bytes12%20lockTag%3B%20%20%20%20%2F%2F%20A%20tag%20representing%20the%20allocator%2C%20reset%20period%2C%20and%20scope.%0A%20%20%20%20%20%20%20%20address%20token%3B%20%20%20%20%20%20%2F%2F%20The%20locked%20token%2C%20or%20address(0)%20for%20native%20tokens.%0A%20%20%20%20%20%20%20%20uint256%20amount%3B%20%20%20%20%20%2F%2F%20The%20maximum%20committed%20amount%20of%20tokens.%0A%20%20%20%20%7D%0A%20%20%20%20%60%60%60%0A%0A3.%20%20**%60MultichainCompact%60**%3A%20For%20allocating%20one%20or%20more%20resource%20locks%20across%20multiple%20chains.%0A%0A%20%20%20%20%60%60%60%60solidity%0A%20%20%20%20%2F%2F%20Defined%20in%20src%2Ftypes%2FEIP712Types.sol%0A%20%20%20%20struct%20MultichainCompact%20%7B%0A%20%20%20%20address%20sponsor%3B%20%2F%2F%20The%20account%20to%20source%20the%20tokens%20from.%0A%20%20%20%20uint256%20nonce%3B%20%2F%2F%20A%20parameter%20to%20enforce%20replay%20protection%2C%20scoped%20to%20allocator.%0A%20%20%20%20uint256%20expires%3B%20%2F%2F%20The%20time%20at%20which%20the%20claim%20expires.%0A%20%20%20%20Element%5B%5D%20elements%3B%20%2F%2F%20Arbiter%2C%20chainId%2C%20commitments%2C%20and%20mandate%20for%20each%20chain.%0A%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Defined%20in%20src%2Ftypes%2FEIP712Types.sol%0A%20%20%20%20%20%20%20%20struct%20Element%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20address%20arbiter%3B%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20account%20tasked%20with%20verifying%20and%20submitting%20the%20claim.%0A%20%20%20%20%20%20%20%20%20%20%20%20uint256%20chainId%3B%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20The%20chainId%20where%20the%20tokens%20are%20located.%0A%20%20%20%20%20%20%20%20%20%20%20%20Lock%5B%5D%20commitments%3B%20%20%20%20%20%20%20%20%20%2F%2F%20The%20committed%20locks%20with%20lock%20tags%2C%20tokens%2C%20%26%20amounts.%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Witness%20data%20MUST%20follow%20(mandatory%20for%20multichain%20compacts)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20Mandate%20mandate%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20%20%20The%20%60Mandate%60%20struct%20within%20these%20payloads%20is%20for%20%5BWitness%20Structure%5D(%23witness-structure).%20The%20EIP-712%20typehash%20for%20these%20structures%20is%20constructed%20dynamically%3B%20empty%20%60Mandate%60%20structs%20result%20in%20a%20typestring%20without%20witness%20data.%20Witness%20data%20is%20optional%20_except_%20in%20a%20%60MultichainCompact%60%3B%20a%20multichain%20compact's%20elements%20**must**%20include%20a%20witness.%0A%20%20%20%20%60%60%60%60%0A%0A**Permit2%20Integration%20Payloads%3A**%0AThe%20Compact%20also%20supports%20integration%20with%20Permit2%20for%20gasless%20deposits%2C%20using%20additional%20EIP-712%20structures%20for%20witness%20data%20within%20Permit2%20messages%3A%0A%0A-%20%60CompactDeposit(bytes12%20lockTag%2Caddress%20recipient)%60%3A%20For%20basic%20Permit2%20deposits.%0A-%20%60Activation(address%20activator%2Cuint256%20id%2CCompact%20compact)Compact(...)Mandate(...)%60%3A%20Combines%20deposits%20with%20single%20compact%20registration.%0A-%20%60BatchActivation(address%20activator%2Cuint256%5B%5D%20ids%2CCompact%20compact)Compact(...)Mandate(...)%60%3A%20Combines%20deposits%20with%20batch%20compact%20registration.%0A%0A**CompactCategory%20Enum%3A**%0AThe%20Compact%20introduces%20a%20%60CompactCategory%60%20enum%20to%20distinguish%20between%20different%20types%20of%20compacts%20when%20using%20Permit2%20integration%3A%0A%0A%60%60%60solidity%0A%2F%2F%20Defined%20in%20src%2Ftypes%2FCompactCategory.sol%0Aenum%20CompactCategory%20%7B%0A%20%20%20%20Compact%2C%0A%20%20%20%20BatchCompact%2C%0A%20%20%20%20MultichainCompact%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Witness%20Structure%0A%0AThe%20witness%20mechanism%20(%60Mandate%60%20struct)%20allows%20extending%20compacts%20with%20additional%20data%20for%20specifying%20conditions%20or%20parameters%20for%20a%20claim.%20The%20Compact%20protocol%20itself%20doesn't%20interpret%20the%20%60Mandate%60's%20content%3B%20this%20is%20the%20responsibility%20of%20the%20arbiter.%20However%2C%20The%20Compact%20uses%20the%20hash%20of%20the%20witness%20data%20and%20its%20reconstructed%20EIP-712%20typestring%20to%20derive%20the%20final%20claim%20hash%20for%20validation.%0A%0A**Format%3A**%0AThe%20witness%20is%20always%20a%20%60Mandate%60%20struct%20appended%20to%20the%20compact.%0A%0A%60%60%60solidity%0ACompact(...%2C%20Mandate%20mandate)Mandate(uint256%20myArg%2C%20bytes32%20otherArg)%0A%60%60%60%0A%0AThe%20%60witnessTypestring%60%20provided%20during%20a%20claim%20should%20be%20the%20arguments%20_inside_%20the%20%60Mandate%60%20struct%20(e.g.%2C%20%60uint256%20myArg%2Cbytes32%20otherArg%60)%2C%20followed%20by%20any%20nested%20structs.%20Note%20that%20there%20are%20no%20assumptions%20made%20by%20the%20protocol%20about%20the%20shape%20of%20the%20%60Mandate%60%20or%20any%20nested%20structs%20within%20it.%0A%0A**Nested%20Structs%3A**%0AEIP-712%20requires%20nested%20structs%20to%20be%20ordered%20alphanumerically%20after%20the%20top-level%20struct%20in%20the%20typestring.%20We%20recommend%20prefixing%20nested%20structs%20with%20%22Mandate%22%20(e.g.%2C%20%60MandateCondition%60)%20to%20ensure%20correct%20ordering.%20Failure%20to%20do%20so%20will%20result%20in%20an%20_invalid_%20EIP-712%20typestring.%0A%0AFor%20example%2C%20the%20correct%20witness%20typestring%20for%20%60Mandate(MandateCondition%20condition%2Cuint256%20arg)MandateCondition(bool%20flag%2Cuint256%20val)%60%20would%20be%20%60MandateCondition%20condition%2Cuint256%20arg)MandateCondition(bool%20flag%2Cuint256%20val%60%20(_without_%20a%20closing%20parenthesis).%0A%0A%3E%20%E2%98%9D%EF%B8%8F%20Note%20the%20missing%20closing%20parenthesis%20in%20the%20above%20example.%20It%20will%20be%20added%20by%20the%20protocol%20during%20the%20dynamic%20typestring%20construction%2C%20so%20**do%20not%20include%20the%20closing%20parenthesis%20in%20your%20witness%20typestring.**%20This%20is%20crucial%2C%20otherwise%20the%20generated%20typestring%20_will%20be%20invalid_.%0A%0A%23%23%23%20Registration%0A%0AAs%20an%20alternative%20to%20sponsors%20signing%20EIP-712%20payloads%2C%20compacts%20can%20be%20_registered_%20directly%20on%20The%20Compact%20contract.%20This%20involves%20submitting%20a%20%60claimHash%60%20(derived%20from%20the%20intended%20compact%20details)%20and%20its%20%60typehash%60.%0AThis%20supports%3A%0A%0A-%20Sponsors%20without%20direct%20signing%20capabilities%20(e.g.%2C%20DAOs%2C%20protocols).%0A-%20Smart%20wallet%20%2F%20EIP-7702%20enabled%20sponsors%20with%20alternative%20signature%20logic.%0A-%20Chained%20deposit-and-register%20operations.%0A%0ARegistration%20can%20be%20done%20by%20the%20sponsor%20or%20a%20third%20party%20(if%20they%20provide%20the%20sponsor's%20signature%20for%20%60registerFor%60%20type%20functions%2C%20or%20if%20they%20are%20providing%20the%20deposited%20tokens).%20Registrations%20do%20not%20expire%2C%20and%20registered%20compacts%20cannot%20be%20unregistered%20by%20the%20sponsor.%20Registrations%20can%20be%20invalidated%20by%20the%20allocator%20consuming%20the%20nonce%2C%20or%20by%20letting%20them%20expire.%20Once%20a%20claim%20is%20processed%20for%20a%20compact%20its%20registration%20state%20is%20cleared.%0A%0AThe%20current%20registration%20status%20for%20a%20given%20claim%20can%20be%20queried%20via%20the%20%60ITheCompact.isRegistered%60%20function%3A%0A%0A%60%60%60solidity%0Abool%20isRegistered%20%3D%20theCompact.isRegistered(sponsor%2C%20claimHash%2C%20typehash)%3B%0A%60%60%60%0A%0A%23%23%23%20Claimant%20Processing%20%26%20Structure%0A%0AWhen%20an%20arbiter%20submits%20a%20claim%2C%20they%20provide%20an%20array%20of%20%60Component%60%20structs.%20Each%20%60Component%60%20specifies%20an%20%60amount%60%20and%20a%20%60claimant%60.%0A%0A%60%60%60solidity%0A%2F%2F%20Defined%20in%20src%2Ftypes%2FComponents.sol%0Astruct%20Component%20%7B%0A%20%20%20%20uint256%20claimant%3B%20%2F%2F%20The%20lockTag%20%2B%20recipient%20of%20the%20transfer%20or%20withdrawal.%0A%20%20%20%20uint256%20amount%3B%20%20%20%2F%2F%20The%20amount%20of%20tokens%20to%20transfer%20or%20withdraw.%0A%7D%0A%60%60%60%0A%0AThe%20%60claimant%60%20field%20encodes%20both%20the%20%60recipient%60%20address%20(lower%20160%20bits)%20and%20a%20%60bytes12%20lockTag%60%20(upper%2096%20bits)%3A%20%60claimant%20%3D%20(lockTag%20%3C%3C%20160)%20%7C%20recipient%60.%0A%0AThis%20encoding%20determines%20how%20The%20Compact%20processes%20each%20component%20of%20the%20claim%3A%0A%0A1.%20%20**Direct%20ERC6909%20Transfer%3A**%20If%20the%20encoded%20%60lockTag%60%20matches%20the%20%60lockTag%60%20of%20the%20resource%20lock%20being%20claimed%2C%20the%20%60amount%60%20of%20ERC6909%20tokens%20is%20transferred%20directly%20to%20the%20%60recipient%60.%0A2.%20%20**Convert%20Between%20Resource%20Locks%3A**%20If%20the%20encoded%20%60lockTag%60%20is%20non-zero%20and%20_different_%20from%20the%20claimed%20lock's%20tag%2C%20The%20Compact%20attempts%20to%20_convert_%20the%20claimed%20resource%20lock%20to%20a%20new%20one%20defined%20by%20the%20encoded%20%60lockTag%60%20for%20the%20%60recipient%60.%20This%20allows%20changing%20allocator%2C%20reset%20period%2C%20or%20scope.%0A3.%20%20**Withdraw%20Underlying%20Tokens%3A**%20If%20the%20encoded%20%60lockTag%60%20is%20%60bytes12(0)%60%2C%20The%20Compact%20attempts%20to%20withdraw%20the%20underlying%20tokens%20(native%20or%20ERC20)%20from%20the%20resource%20lock%20and%20send%20them%20to%20the%20%60recipient%60.%0A%0A**Withdrawal%20Fallback%20Mechanism%3A**%0ATo%20prevent%20griefing%20(e.g.%2C%20via%20malicious%20receive%20hooks%20during%20withdrawals%2C%20or%20relayed%20claims%20that%20intentionally%20underpay%20the%20necessary%20amount%20of%20gas)%2C%20The%20Compact%20first%20attempts%20withdrawals%20with%20half%20the%20available%20gas.%20If%20this%20fails%20(and%20sufficient%20gas%20remains%20above%20a%20benchmarked%20stipend)%2C%20it%20falls%20back%20to%20a%20direct%20ERC6909%20transfer%20to%20the%20recipient.%20Stipends%20can%20be%20queried%20via%20%60getRequiredWithdrawalFallbackStipends%60.%20Benchmarking%20for%20these%20stipends%20is%20done%20via%20a%20call%20to%20%60__benchmark%60%20post-deployment%2C%20which%20meters%20cold%20account%20access%20and%20typical%20ERC20%20and%20native%20transfers.%20This%20benchmark%20can%20be%20re-run%20by%20anyone%20at%20any%20time.%0A%0A%23%23%23%20Forced%20Withdrawals%0A%0AThis%20mechanism%20provides%20sponsors%20recourse%20if%20an%20allocator%20becomes%20unresponsive%20or%20censors%20requests.%0A%0A1.%20%20**Enable%3A**%20Sponsor%20calls%20%60enableForcedWithdrawal(uint256%20id)%60.%0A%0A2.%20%20**Wait%3A**%20The%20%60resetPeriod%60%20for%20that%20resource%20lock%20must%20elapse.%0A3.%20%20**Withdraw%3A**%20Sponsor%20calls%20%60forcedWithdrawal(uint256%20id%2C%20address%20recipient%2C%20uint256%20amount)%60%20to%20retrieve%20the%20underlying%20tokens.%0A%0AThe%20forced%20withdrawal%20state%20can%20be%20reversed%20with%20%60disableForcedWithdrawal(uint256%20id)%60.%0A%0A%23%23%23%20Signature%20Verification%0A%0AWhen%20a%20claim%20is%20submitted%20for%20a%20non-registered%20compact%20(i.e.%2C%20one%20relying%20on%20a%20sponsor's%20signature)%2C%20The%20Compact%20verifies%20the%20sponsor's%20authorization%20in%20the%20following%20order%3A%0A%0A1.%20%20**Caller%20is%20Sponsor%3A**%20If%20%60msg.sender%20%3D%3D%20sponsor%60%2C%20authorization%20is%20granted.%0A2.%20%20**ECDSA%20Signature%3A**%20Attempt%20standard%20ECDSA%20signature%20verification.%0A3.%20%20**EIP-1271%20%60isValidSignature%60%3A**%20If%20ECDSA%20fails%2C%20call%20%60isValidSignature%60%20on%20the%20sponsor's%20address%20(if%20it's%20a%20contract)%20with%20half%20the%20remaining%20gas.%0A4.%20%20**Emissary%20%60verifyClaim%60%3A**%20If%20EIP-1271%20fails%20or%20isn't%20applicable%2C%20and%20an%20emissary%20is%20assigned%20for%20the%20sponsor%20and%20%60lockTag%60%2C%20call%20the%20emissary's%20%60verifyClaim%60%20function.%0A%0ASponsors%20cannot%20unilaterally%20cancel%20a%20signed%20compact%3B%20only%20allocators%20can%20effectively%20do%20so%20by%20consuming%20the%20nonce.%20This%20is%20vital%20to%20upholding%20the%20equivocation%20guarantees%20for%20claimants.%0A%0A%23%23%20Trust%20Assumptions%0A%0AThe%20Compact%20protocol%20operates%20under%20a%20specific%20trust%20model%20where%20different%20actors%20have%20varying%20levels%20of%20trust%20requirements%3A%0A%0A**Sponsor%20Trust%20Requirements%3A**%0A%0A-%20**Allocators**%3A%20Sponsors%20must%20trust%20that%20allocators%20will%20not%20unduly%20censor%20valid%20requests%20against%20fully%20funded%20locks.%20However%2C%20sponsors%20retain%20the%20ability%20to%20initiate%20forced%20withdrawals%20if%20allocators%20become%20unresponsive.%0A-%20**Arbiters**%3A%20Sponsors%20must%20trust%20that%20arbiters%20will%20not%20process%20claims%20where%20the%20specified%20conditions%20were%20not%20met.%20Arbiters%20have%20significant%20power%20in%20determining%20claim%20validity.%0A-%20**Emissaries**%3A%20Sponsors%20must%20trust%20that%20emissaries%20(if%20assigned)%20will%20not%20authorize%20claims%20maliciously%2C%20as%20emissaries%20can%20act%20as%20fallback%20signers%20when%20other%20verification%20methods%20fail.%20Emissaries%20effectively%20have%20the%20same%20authorization%20power%20as%20the%20sponsor%20for%20claim%20verification.%0A%0A**Claimant%20Trust%20Requirements%3A**%0A%0A-%20**Allocators**%3A%20Claimants%20must%20trust%20that%20allocators%20are%20sound%20and%20will%20not%20allow%20resource%20locks%20to%20become%20underfunded%20through%20double-spending%20or%20other%20allocation%20failures.%0A-%20**Arbiters**%3A%20Claimants%20must%20trust%20that%20arbiters%20will%20not%20fail%20to%20process%20claims%20where%20conditions%20were%20properly%20met.%0A-%20**Emissaries**%3A%20Claimants%20must%20trust%20that%20emissaries%20(if%20assigned)%20will%20faithfully%20authorize%20valid%20claims%20if%20the%20sponsor%20is%20able%20to%20equivocate%2C%20or%20update%20their%20account%20to%20revoke%20their%20authorization%20on%20a%20previously%20authorized%20compact%20(as%20is%20the%20case%20with%20EIP-7702%20sponsors%20and%20many%20smart%20contracts%20implementing%20EIP-1271).%20Therefore%2C%20claimants%20should%20require%20the%20use%20of%20one%20of%20a%20small%20set%20of%20known%2C%20%22canonical%22%20emissaries%20that%20enforce%20delays%20before%20allowing%20key%20rotation.%0A%0A%23%23%20Key%20Events%0A%0AThe%20Compact%20emits%20several%20events%20to%20signal%20important%20state%20changes%3A%0A%0A-%20%60Claim(address%20indexed%20sponsor%2C%20address%20indexed%20allocator%2C%20address%20indexed%20arbiter%2C%20bytes32%20claimHash%2C%20uint256%20nonce)%60%3A%20Emitted%20when%20a%20claim%20is%20successfully%20processed%20via%20%60ITheCompactClaims%60%20functions.%0A-%20%60NonceConsumedDirectly(address%20indexed%20allocator%2C%20uint256%20nonce)%60%3A%20Emitted%20when%20an%20allocator%20directly%20consumes%20a%20nonce%20via%20%60consume%60.%0A-%20%60ForcedWithdrawalStatusUpdated(address%20indexed%20account%2C%20uint256%20indexed%20id%2C%20bool%20activating%2C%20uint256%20withdrawableAt)%60%3A%20Emitted%20when%20%60enableForcedWithdrawal%60%20or%20%60disableForcedWithdrawal%60%20is%20called.%0A-%20%60CompactRegistered(address%20indexed%20sponsor%2C%20bytes32%20claimHash%2C%20bytes32%20typehash)%60%3A%20Emitted%20when%20a%20compact%20is%20registered%20via%20%60register%60%2C%20%60registerMultiple%60%2C%20or%20combined%20deposit-and-register%20functions.%0A-%20%60AllocatorRegistered(uint96%20allocatorId%2C%20address%20allocator)%60%3A%20Emitted%20when%20a%20new%20allocator%20is%20registered%20via%20%60__registerAllocator%60.%0A-%20%60EmissaryAssigned(address%20indexed%20sponsor%2C%20bytes12%20indexed%20lockTag%2C%20address%20emissary)%60%3A%20Emitted%20when%20a%20sponsor%20assigns%20or%20changes%20an%20emissary%20via%20%60assignEmissary%60.%0A%0AStandard%20%60ERC6909.Transfer%60%20events%20are%20also%20emitted%20for%20mints%2C%20burns%2C%20and%20transfers%20of%20resource%20lock%20tokens.%0A%0A%23%23%20Key%20Data%20Structures%0A%0AMany%20functions%20in%20The%20Compact%20use%20custom%20structs%20for%20their%20calldata.%20Here%20are%20some%20of%20the%20most%20important%20ones%3A%0A%0A-%20**For%20Claims%20(passed%20to%20%60ITheCompactClaims%60%20functions)%3A**%0A%20%20-%20%60Claim%60%3A%20For%20claims%20involving%20a%20single%20resource%20lock%20on%20a%20single%20chain.%0A%20%20%20%20%60%60%60solidity%0A%20%20%20%20%2F%2F%20Defined%20in%20src%2Ftypes%2FClaims.sol%0A%20%20%20%20struct%20Claim%20%7B%0A%20%20%20%20%20%20%20%20bytes%20allocatorData%3B%0A%20%20%20%20%20%20%20%20bytes%20sponsorSignature%3B%0A%20%20%20%20%20%20%20%20address%20sponsor%3B%0A%20%20%20%20%20%20%20%20uint256%20nonce%3B%0A%20%20%20%20%20%20%20%20uint256%20expires%3B%0A%20%20%20%20%20%20%20%20bytes32%20witness%3B%0A%20%20%20%20%20%20%20%20string%20witnessTypestring%3B%0A%20%20%20%20%20%20%20%20uint256%20id%3B%0A%20%20%20%20%20%20%20%20uint256%20allocatedAmount%3B%0A%20%20%20%20%20%20%20%20Component%5B%5D%20claimants%3B%0A%20%20%20%20%7D%0A%20%20%20%20%60%60%60%0A%20%20-%20%60BatchClaim%60%3A%20For%20multiple%20resource%20locks%20on%20a%20single%20chain.%0A%20%20-%20%60MultichainClaim%60%3A%20For%20single%20resource%20lock%20claims%20on%20the%20notarized%20(i.e.%2C%20origin)%20chain%20of%20a%20multichain%20compact.%0A%20%20-%20%60ExogenousMultichainClaim%60%3A%20For%20single%20resource%20lock%20claims%20on%20an%20exogenous%20chain%20(i.e.%2C%20any%20chain%20_other%20than_%20the%20notarized%20chain).%0A%20%20-%20%60BatchMultichainClaim%60%3A%20For%20multiple%20resource%20locks%20on%20the%20notarized%20chain.%0A%20%20-%20%60ExogenousBatchMultichainClaim%60%3A%20For%20multiple%20resource%20locks%20on%20an%20exogenous%20chain.%0A%20%20-%20%60BatchClaimComponent%60%3A%20Used%20within%20batch%20claim%20structs.%0A%20%20%20%20%60%60%60solidity%0A%20%20%20%20%2F%2F%20Defined%20in%20src%2Ftypes%2FComponents.sol%0A%20%20%20%20struct%20BatchClaimComponent%20%7B%0A%20%20%20%20%20%20%20%20uint256%20id%3B%0A%20%20%20%20%20%20%20%20uint256%20allocatedAmount%3B%0A%20%20%20%20%20%20%20%20Component%5B%5D%20portions%3B%0A%20%20%20%20%7D%0A%20%20%20%20%60%60%60%0A%0A-%20**For%20Allocated%20Transfers%20(passed%20to%20%60ITheCompact.allocatedTransfer%60%20etc.)%3A**%0A%20%20-%20%60AllocatedTransfer%60%3A%20For%20transferring%20a%20single%20ID%20to%20multiple%20recipients%20with%20allocator%20approval.%0A%20%20%20%20%60%60%60solidity%0A%20%20%20%20%2F%2F%20Defined%20in%20src%2Ftypes%2FClaims.sol%0A%20%20%20%20struct%20AllocatedTransfer%20%7B%0A%20%20%20%20%20%20%20%20bytes%20allocatorData%3B%0A%20%20%20%20%20%20%20%20uint256%20nonce%3B%0A%20%20%20%20%20%20%20%20uint256%20expires%3B%0A%20%20%20%20%20%20%20%20uint256%20id%3B%0A%20%20%20%20%20%20%20%20Component%5B%5D%20recipients%3B%0A%20%20%20%20%7D%0A%20%20%20%20%60%60%60%0A%20%20-%20%60AllocatedBatchTransfer%60%3A%20For%20transferring%20multiple%20IDs.%0A%0A-%20**For%20Deposits%20(used%20with%20Permit2)%3A**%0A%20%20-%20%60DepositDetails%60%3A%20Helper%20for%20batch%20Permit2%20deposits.%0A",lastUpdatedAt:1758687736e3},{lazy:()=>J(()=>import("./celestia-DcZg8BGP.js"),[]),path:"/research/dataAvailabilty/celestia",type:"mdx",filePath:"research/dataAvailabilty/celestia.mdx",content:"%23%20Celestia%0A%0A-%20date%3A%202023-06-19%0A-%20last%20updated%3A%202023-06-19%0A%0A%23%23%20Overview%0A%0ACelestia%5B%5Eov-1%5D%20is%20a%20modular%20consensus%20and%20data%20network%2C%20built%20to%20enable%20anyone%20to%20easily%20deploy%20their%20own%20blockchain%20with%20minimal%20overhead.%0A%0A%23%23%20Cryptographic%20Primitives%0A%0A-%20%5Bwhitepaper%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F1809.09044.pdf)%0A%20%20-%202.2%20Merkle%20Trees%20and%20Sparse%20Merkle%20Trees%0A%20%20-%202.3%20Erasure%20Codes%20and%20Reed-Solomon%20Codes%0A%20%20-%205%20Data%20Availability%20Proofs%0A%20%20%20%20-%205.1%20Strawman%201D%20Reed-Solomon%20Availability%20Scheme%0A%20%20%20%20-%205.2%202D%20Reed-Solomon%20Encoded%20Merkle%20Tree%20Construction%0A%20%20%20%20-%205.3%20Random%20Sampling%20and%20Network%20Block%20Recovery%0A%20%20%20%20-%205.4%20Selective%20Share%20Disclosure%0A%20%20%20%20-%205.5%20Fraud%20Proofs%20of%20Incorrectly%20Generated%20Extended%20Data%0A-%20%5BCelestia%20App%20Architecture%5D(https%3A%2F%2Fgithub.com%2Fcelestiaorg%2Fcelestia-app%2Ftree%2Fmain%2Fdocs%2Farchitecture)%0A-%20%5BImplementation%20celestia-app%20pkg%5D(https%3A%2F%2Fgithub.com%2Fcelestiaorg%2Fcelestia-app%2Ftree%2Fmain%2Fpkg)%0A%0A%23%23%23%20Namespaced%20Merkle%20Tree%20Wrapper%0A%0A-%20%5Bcode%5D(https%3A%2F%2Fgithub.com%2Fcelestiaorg%2Fcelestia-app%2Ftree%2Fmain%2Fpkg%2Fwrapper)%0A%0A%23%23%20Appendices%0A%0A%23%23%20References%0A%0A-%20%5BLearn%20Modular%5D(https%3A%2F%2Fcelestia.org%2Flearn%2F)%0A-%20%5BFraud%20and%20Data%20Availability%20Proofs%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F1809.09044.pdf)%3A%20Maximising%20Light%20Client%20Security%20and%20Scaling%20Blockchains%20with%20Dishonest%20Majorities%0A-%20%5BCelestia%20App%20Specifications%5D(https%3A%2F%2Fcelestiaorg.github.io%2Fcelestia-app%2Findex.html)%0A-%20%5BCelestia%20App%20Architecture%5D(https%3A%2F%2Fgithub.com%2Fcelestiaorg%2Fcelestia-app%2Ftree%2Fmain%2Fdocs%2Farchitecture)%0A-%20%5BRollkit%20Docs%5D(https%3A%2F%2Frollkit.dev%2Fdocs%2Fintro%2F)%0A-%20%5BRollkit%20Architecture%20Design%20Records%5D(https%3A%2F%2Fgithub.com%2Frollkit%2Frollkit%2Ftree%2Fmain%2Fdocs%2Flazy-adr)%0A-%20%5BRollkit%20Dependency%20Graph%5D(https%3A%2F%2Fgithub.com%2Frollkit%2Frollkit%2Fblob%2Fmain%2Fdocs%2Fspecification%2Frollkit-dependency-graph.mdx)%0A-%20%5BQuantum%20Gravity%20Bridge%5D(https%3A%2F%2Fgithub.com%2Fcelestiaorg%2Fquantum-gravity-bridge%2Ftree%2Fmaster)%0A%0A%23%23%20Footnotes%0A%0A%5B%5Eov-1%5D%3A%20%5BCelestia%5D(https%3A%2F%2Fcelestia.org%2F)%3A%20the%20first%20modular%20blockchan%20network.%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./celestia-DcZg8BGP.js"),[]),path:"/research/dataAvailabilty/celestia.html",type:"mdx",filePath:"research/dataAvailabilty/celestia.mdx",content:"%23%20Celestia%0A%0A-%20date%3A%202023-06-19%0A-%20last%20updated%3A%202023-06-19%0A%0A%23%23%20Overview%0A%0ACelestia%5B%5Eov-1%5D%20is%20a%20modular%20consensus%20and%20data%20network%2C%20built%20to%20enable%20anyone%20to%20easily%20deploy%20their%20own%20blockchain%20with%20minimal%20overhead.%0A%0A%23%23%20Cryptographic%20Primitives%0A%0A-%20%5Bwhitepaper%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F1809.09044.pdf)%0A%20%20-%202.2%20Merkle%20Trees%20and%20Sparse%20Merkle%20Trees%0A%20%20-%202.3%20Erasure%20Codes%20and%20Reed-Solomon%20Codes%0A%20%20-%205%20Data%20Availability%20Proofs%0A%20%20%20%20-%205.1%20Strawman%201D%20Reed-Solomon%20Availability%20Scheme%0A%20%20%20%20-%205.2%202D%20Reed-Solomon%20Encoded%20Merkle%20Tree%20Construction%0A%20%20%20%20-%205.3%20Random%20Sampling%20and%20Network%20Block%20Recovery%0A%20%20%20%20-%205.4%20Selective%20Share%20Disclosure%0A%20%20%20%20-%205.5%20Fraud%20Proofs%20of%20Incorrectly%20Generated%20Extended%20Data%0A-%20%5BCelestia%20App%20Architecture%5D(https%3A%2F%2Fgithub.com%2Fcelestiaorg%2Fcelestia-app%2Ftree%2Fmain%2Fdocs%2Farchitecture)%0A-%20%5BImplementation%20celestia-app%20pkg%5D(https%3A%2F%2Fgithub.com%2Fcelestiaorg%2Fcelestia-app%2Ftree%2Fmain%2Fpkg)%0A%0A%23%23%23%20Namespaced%20Merkle%20Tree%20Wrapper%0A%0A-%20%5Bcode%5D(https%3A%2F%2Fgithub.com%2Fcelestiaorg%2Fcelestia-app%2Ftree%2Fmain%2Fpkg%2Fwrapper)%0A%0A%23%23%20Appendices%0A%0A%23%23%20References%0A%0A-%20%5BLearn%20Modular%5D(https%3A%2F%2Fcelestia.org%2Flearn%2F)%0A-%20%5BFraud%20and%20Data%20Availability%20Proofs%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F1809.09044.pdf)%3A%20Maximising%20Light%20Client%20Security%20and%20Scaling%20Blockchains%20with%20Dishonest%20Majorities%0A-%20%5BCelestia%20App%20Specifications%5D(https%3A%2F%2Fcelestiaorg.github.io%2Fcelestia-app%2Findex.html)%0A-%20%5BCelestia%20App%20Architecture%5D(https%3A%2F%2Fgithub.com%2Fcelestiaorg%2Fcelestia-app%2Ftree%2Fmain%2Fdocs%2Farchitecture)%0A-%20%5BRollkit%20Docs%5D(https%3A%2F%2Frollkit.dev%2Fdocs%2Fintro%2F)%0A-%20%5BRollkit%20Architecture%20Design%20Records%5D(https%3A%2F%2Fgithub.com%2Frollkit%2Frollkit%2Ftree%2Fmain%2Fdocs%2Flazy-adr)%0A-%20%5BRollkit%20Dependency%20Graph%5D(https%3A%2F%2Fgithub.com%2Frollkit%2Frollkit%2Fblob%2Fmain%2Fdocs%2Fspecification%2Frollkit-dependency-graph.mdx)%0A-%20%5BQuantum%20Gravity%20Bridge%5D(https%3A%2F%2Fgithub.com%2Fcelestiaorg%2Fquantum-gravity-bridge%2Ftree%2Fmaster)%0A%0A%23%23%20Footnotes%0A%0A%5B%5Eov-1%5D%3A%20%5BCelestia%5D(https%3A%2F%2Fcelestia.org%2F)%3A%20the%20first%20modular%20blockchan%20network.%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./fast-fourier-transforms-B3P4QG2j.js"),[]),path:"/research/primitives/fast-fourier-transforms",type:"mdx",filePath:"research/primitives/fast-fourier-transforms.mdx",content:"%23%20Fast%20Fourier%20Transforms%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0A%23%23%20References%0A%0A-%20%5BFast%20Fourier%20Transforms%5D(https%3A%2F%2Fvitalik.ca%2Fgeneral%2F2019%2F05%2F12%2Ffft.html)%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./fast-fourier-transforms-B3P4QG2j.js"),[]),path:"/research/primitives/fast-fourier-transforms.html",type:"mdx",filePath:"research/primitives/fast-fourier-transforms.mdx",content:"%23%20Fast%20Fourier%20Transforms%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0A%23%23%20References%0A%0A-%20%5BFast%20Fourier%20Transforms%5D(https%3A%2F%2Fvitalik.ca%2Fgeneral%2F2019%2F05%2F12%2Ffft.html)%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./fraud-proofs-BIe4TssQ.js"),[]),path:"/research/primitives/fraud-proofs",type:"mdx",filePath:"research/primitives/fraud-proofs.mdx",content:"%23%20Fraud%20Proofs%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AFollowing%20is%20an%20excerpt%20from%20Fraud%20and%20Data%20Availability%20Proofs%3ADetecting%20Invalid%20Blocks%20in%20Light%20Clients%20%5B%5E1%5D.%0A%0A%3E%20Light%20clients%2C%20also%20known%20as%20Simple%20Payment%20Verification%20(SPV)%20clients%2C%20are%20nodes%20which%20only%20download%20a%20small%20portion%20of%20the%20data%20in%20a%20blockchain%2C%20and%20use%20indirect%20means%20to%20verify%20that%20a%20given%20chain%20is%20valid.%20Instead%20of%20validating%20blocks%2C%20they%20assume%20that%20the%20chain%20favoured%20by%20the%20blockchain%E2%80%99s%20consensus%20algorithm%20only%20contains%20valid%20blocks%2C%20and%20that%20the%20majority%20of%20block%20producers%20are%20honest.%20By%20allowing%20such%20clients%20to%20receive%20fraud%20proofs%20generated%20by%20fully%20validating%20nodes%20that%20show%20that%20a%20block%20violates%20the%20protocol%20rules%2C%20and%20combining%20this%20with%20probabilistic%20sampling%20techniques%20to%20verify%20that%20all%20of%20the%20data%20in%20a%20block%20actually%20is%20available%20to%20be%20downloaded%20so%20that%20fraud%20can%20be%20detected%2C%20we%20can%20eliminate%20the%20honest-majority%20assumption%20for%20block%20validity%2C%20and%20instead%20make%20much%20weaker%20assumptions%20about%20a%20minimum%20number%20of%20honest%20nodes%20that%20rebroadcast%20data.%20Fraud%20and%20data%20availability%20proofs%20are%20key%20to%20enabling%20on-chain%20scaling%20of%20blockchains%20while%20maintaining%20a%20strong%20assurance%20that%20on-chain%20data%20is%20available%20and%20valid.%20We%20present%2C%20implement%2C%20and%20evaluate%20a%20fraud%20and%20data%20availability%20proof%20system.%0A%0AHere%20is%20an%20overview%20of%20how%20NEAR%20bridge%20uses%20this%20in%20an%20optimistic%20approach%0A%0AThe%20leading%20NEAR%20Ethereum%20Bridge%20today%20Near%20Rainbow%20Bridge%20uses%20an%20optimistic%20approach.%20Following%20is%20an%20excerpt%20from%20NearOnEthClient%20%5B%5Enear-1%5D.%0A%0A%3E%20we%20adopt%20the%20optimistic%20%5B%5Enear-2%5D%20approach%20where%20NearOnEthClient%20verifies%20everything%20in%20the%20NEAR%20header%20except%20the%20signatures.%20Then%20anyone%20can%20challenge%20a%20signature%20in%20a%20submitted%20header%20within%20a%204-hour%20challenge%20window.%20The%20challenge%20requires%20verification%20of%20a%20single%20Ed25519%20signature%20which%20would%20cost%20about%20500k%20Ethereum%20gas%20(expensive%2C%20but%20possible).%0A%0A%23%23%20Footnotes%0A%0A%5B%5E1%5D%3A%20%5BFraud%20and%20Data%20Availability%20Proofs%3ADetecting%20Invalid%20Blocks%20in%20Light%20Clients%5D(http%3A%2F%2Fwww0.cs.ucl.ac.uk%2Fstaff%2FM.AlBassam%2Fpublications%2Ffraudproofs.pdf)%3A%20Fraud%20and%20data%20availability%20proofs%20are%20key%20to%20enabling%20on-chain%20scaling%20of%20blockchains%20while%20maintaining%20a%20strong%20assurance%20that%20on-chain%20data%20is%20available%20and%20valid.%0A%5B%5Enear-1%5D%3A%20%5BNEAR%3A%20ETH-NEAR%20Rainbow%20Bridge%5D(https%3A%2F%2Fnear.org%2Fblog%2Feth-near-rainbow-bridge%2F)%3A%20a%20bridge%2C%20called%20Rainbow%20Bridge%2C%20to%20connect%20the%20Ethereum%20and%20NEAR%20blockchains.%0A%5B%5Enear-2%5D%3A%20%5BOptimistic%20Contracts%5D(https%3A%2F%2Fmedium.com%2F%40deaneigenmann%2Foptimistic-contracts-fb75efa7ca84)%3A%20contracts%20that%20accept%20all%20information%20as%20fact%20until%20proven%20to%20be%20non-factual.%20This%20allows%20for%20a%20reduction%20in%20the%20cost%20of%20verifying%20data%2C%20as%20on-chain%20verification%20would%20only%20be%20necessary%20when%20one%20is%20sure%20that%20the%20data%20is%20false.%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./fraud-proofs-BIe4TssQ.js"),[]),path:"/research/primitives/fraud-proofs.html",type:"mdx",filePath:"research/primitives/fraud-proofs.mdx",content:"%23%20Fraud%20Proofs%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AFollowing%20is%20an%20excerpt%20from%20Fraud%20and%20Data%20Availability%20Proofs%3ADetecting%20Invalid%20Blocks%20in%20Light%20Clients%20%5B%5E1%5D.%0A%0A%3E%20Light%20clients%2C%20also%20known%20as%20Simple%20Payment%20Verification%20(SPV)%20clients%2C%20are%20nodes%20which%20only%20download%20a%20small%20portion%20of%20the%20data%20in%20a%20blockchain%2C%20and%20use%20indirect%20means%20to%20verify%20that%20a%20given%20chain%20is%20valid.%20Instead%20of%20validating%20blocks%2C%20they%20assume%20that%20the%20chain%20favoured%20by%20the%20blockchain%E2%80%99s%20consensus%20algorithm%20only%20contains%20valid%20blocks%2C%20and%20that%20the%20majority%20of%20block%20producers%20are%20honest.%20By%20allowing%20such%20clients%20to%20receive%20fraud%20proofs%20generated%20by%20fully%20validating%20nodes%20that%20show%20that%20a%20block%20violates%20the%20protocol%20rules%2C%20and%20combining%20this%20with%20probabilistic%20sampling%20techniques%20to%20verify%20that%20all%20of%20the%20data%20in%20a%20block%20actually%20is%20available%20to%20be%20downloaded%20so%20that%20fraud%20can%20be%20detected%2C%20we%20can%20eliminate%20the%20honest-majority%20assumption%20for%20block%20validity%2C%20and%20instead%20make%20much%20weaker%20assumptions%20about%20a%20minimum%20number%20of%20honest%20nodes%20that%20rebroadcast%20data.%20Fraud%20and%20data%20availability%20proofs%20are%20key%20to%20enabling%20on-chain%20scaling%20of%20blockchains%20while%20maintaining%20a%20strong%20assurance%20that%20on-chain%20data%20is%20available%20and%20valid.%20We%20present%2C%20implement%2C%20and%20evaluate%20a%20fraud%20and%20data%20availability%20proof%20system.%0A%0AHere%20is%20an%20overview%20of%20how%20NEAR%20bridge%20uses%20this%20in%20an%20optimistic%20approach%0A%0AThe%20leading%20NEAR%20Ethereum%20Bridge%20today%20Near%20Rainbow%20Bridge%20uses%20an%20optimistic%20approach.%20Following%20is%20an%20excerpt%20from%20NearOnEthClient%20%5B%5Enear-1%5D.%0A%0A%3E%20we%20adopt%20the%20optimistic%20%5B%5Enear-2%5D%20approach%20where%20NearOnEthClient%20verifies%20everything%20in%20the%20NEAR%20header%20except%20the%20signatures.%20Then%20anyone%20can%20challenge%20a%20signature%20in%20a%20submitted%20header%20within%20a%204-hour%20challenge%20window.%20The%20challenge%20requires%20verification%20of%20a%20single%20Ed25519%20signature%20which%20would%20cost%20about%20500k%20Ethereum%20gas%20(expensive%2C%20but%20possible).%0A%0A%23%23%20Footnotes%0A%0A%5B%5E1%5D%3A%20%5BFraud%20and%20Data%20Availability%20Proofs%3ADetecting%20Invalid%20Blocks%20in%20Light%20Clients%5D(http%3A%2F%2Fwww0.cs.ucl.ac.uk%2Fstaff%2FM.AlBassam%2Fpublications%2Ffraudproofs.pdf)%3A%20Fraud%20and%20data%20availability%20proofs%20are%20key%20to%20enabling%20on-chain%20scaling%20of%20blockchains%20while%20maintaining%20a%20strong%20assurance%20that%20on-chain%20data%20is%20available%20and%20valid.%0A%5B%5Enear-1%5D%3A%20%5BNEAR%3A%20ETH-NEAR%20Rainbow%20Bridge%5D(https%3A%2F%2Fnear.org%2Fblog%2Feth-near-rainbow-bridge%2F)%3A%20a%20bridge%2C%20called%20Rainbow%20Bridge%2C%20to%20connect%20the%20Ethereum%20and%20NEAR%20blockchains.%0A%5B%5Enear-2%5D%3A%20%5BOptimistic%20Contracts%5D(https%3A%2F%2Fmedium.com%2F%40deaneigenmann%2Foptimistic-contracts-fb75efa7ca84)%3A%20contracts%20that%20accept%20all%20information%20as%20fact%20until%20proven%20to%20be%20non-factual.%20This%20allows%20for%20a%20reduction%20in%20the%20cost%20of%20verifying%20data%2C%20as%20on-chain%20verification%20would%20only%20be%20necessary%20when%20one%20is%20sure%20that%20the%20data%20is%20false.%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./intro-DUdqdn64.js"),[]),path:"/research/primitives/intro",type:"mdx",filePath:"research/primitives/intro.mdx",content:"%23%20Cryptographic%20and%20Mathematic%20Primitives%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AHere%20we%20review%20cryptographic%20and%20mathematic%20primitives%0A%0AFor%20each%20primitive%20we%20review%0A%0A-%20Cryptographic%20Primitive%0A-%20Applications%0A-%20Implementations%20(codebases)%0A-%20Zero%20Knowledge%20relationships%2Fimprovements%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./intro-DUdqdn64.js"),[]),path:"/research/primitives/intro.html",type:"mdx",filePath:"research/primitives/intro.mdx",content:"%23%20Cryptographic%20and%20Mathematic%20Primitives%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AHere%20we%20review%20cryptographic%20and%20mathematic%20primitives%0A%0AFor%20each%20primitive%20we%20review%0A%0A-%20Cryptographic%20Primitive%0A-%20Applications%0A-%20Implementations%20(codebases)%0A-%20Zero%20Knowledge%20relationships%2Fimprovements%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./light-clients-wNszsrUr.js"),[]),path:"/research/primitives/light-clients",type:"mdx",filePath:"research/primitives/light-clients.mdx",content:"%23%20Light%20Clients%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0A%23%23%20References%0A%0A-%20%5BBuilding%20Helios%3A%20Fully%20trustless%20access%20to%20Ethereum%5D(https%3A%2F%2Fa16zcrypto.com%2Fbuilding-helios-ethereum-light-client%2F)%3A%20a%20Rust-based%20Ethereum%20light%20client%20we%20developed%20that%20provides%20fully%20trustless%20access%20to%20Ethereum.%0A-%20%5BAnnotated%20Ethereum%20Roadmap%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40domothy%2Froadmap%23Annotated-Ethereum-Roadmap)%0A-%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./light-clients-wNszsrUr.js"),[]),path:"/research/primitives/light-clients.html",type:"mdx",filePath:"research/primitives/light-clients.mdx",content:"%23%20Light%20Clients%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0A%23%23%20References%0A%0A-%20%5BBuilding%20Helios%3A%20Fully%20trustless%20access%20to%20Ethereum%5D(https%3A%2F%2Fa16zcrypto.com%2Fbuilding-helios-ethereum-light-client%2F)%3A%20a%20Rust-based%20Ethereum%20light%20client%20we%20developed%20that%20provides%20fully%20trustless%20access%20to%20Ethereum.%0A-%20%5BAnnotated%20Ethereum%20Roadmap%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40domothy%2Froadmap%23Annotated-Ethereum-Roadmap)%0A-%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./primitives-BdJCEKYx.js"),[]),path:"/research/primitives/primitives",type:"mdx",filePath:"research/primitives/primitives.mdx",content:"%23%20Cryptographic%20Primitives%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0ACryptographic%20and%20Mathematic%20Primitives%0A%0A%23%23%20Reference%20Implementations%0A%0A**general%20primitives**%0A%0A-%20%5Bbloom%20filter%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBloom_filter)%0A%20%20-%20%5Bgeth%20bloombits%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcore%2Fbloombits)%20(go)%3A%20Package%20bloombits%20implements%20bloom%20filtering%20on%20batches%20of%20data.%0A%0A-%20%5Bint_to_bytes%5D(https%3A%2F%2Fethereum.github.io%2Fexecution-specs%2Fautoapi%2Fethereum%2Fbase_types%2Findex.html)%0A%20%20-%20%5Blighthouse%20int_to_bytes%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fint_to_bytes)%20(rust)%3A%20The%20Eth%202.0%20specification%20uses%20%60int.to_bytes(2%2C%20'little')%60%2C%20which%20throws%20an%20error%20if%20%60int%60%20doesn't%20fit%20within%203%20bytes.%20The%20specification%20relies%20upon%20implicit%20asserts%20for%20some%20validity%20conditions%2C%20so%20we%20ensure%20the%20calling%20function%20is%20aware%20of%20the%20error%20condition%20as%20opposed%20to%20hiding%20it%20with%20a%20modulo.%0A-%20%5Bleaky%20bucket%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FLeaky_bucket%23As_a_meter)%0A%20%20-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fcontainer%2Fleaky-bucket%2Fleakybucket.go)%3A%20leaky%20bucket%20as%20a%20meter%0A-%20linked%20list%0A%20%20-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fcontainer%2Fdoubly-linked-list)%20(go)%3A%20doubly%20linked%20list%0A-%20%5Bmerkle%20patrica%20tries%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fpatricia-merkle-trie%2F)%0A%20%20-%20%5Bgeth%20trie%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Ftrie%2Ftrie.go%23L17)%20(go)%3A%20Package%20trie%20implements%20Merkle%20Patricia%20Tries.%0A%20%20-%20%5Bgeth%20database%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fcore%2Fstate%2Fdatabase.go%23L63)%20(go)%3A%20Trie%20is%20a%20Ethereum%20Merkle%20Patricia%20trie.%0A-%20%5Bmerkle%20trees%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FMerkle_tree)%0A%20%20-%20%5Bprysm%20sparse_merkle%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fcontainer%2Ftrie%2Fsparse_merkle.go)%20(go)%3A%20defines%20utilities%20for%20sparse%20merkle%20tries%20for%20Ethereum%20consensus.%0A%20%20-%20%5Blighthouse%20cached_tree_hash%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fcached_tree_hash)%20(rust)%3A%20Sparse%20Merkle%20tree%20suitable%20for%20tree%20hashing%20vectors%20and%20lists.%0A%20%20-%20%5Blighthouse%20tree_hash%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Ftree_hash)%20(rust)%3A%20Convenience%20method%20for%20%60MerkleHasher%60%20which%20also%20provides%20some%20fast-paths%20for%20small%20trees.%60minimum_leaf_count%60%20will%20only%20be%20used%20if%20it%20is%20greater%20than%20or%20equal%20to%20the%20minimum%20number%20of%20leaves%20that%20can%20be%20created%20from%20%60bytes%60.%0A%20%20-%20%5Blighthouse%20tree_hash_derive%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Ftree_hash_derive)%20(rust)%3A%0A%20%20-%20%5Btendermint%20go%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fmerkle)%20(go)%3A%20Merkle%20Tree%20For%20smaller%20static%20data%20structures%20that%20don't%20require%20immutable%20snapshots%20or%20mutability%3B%20for%20instance%20the%20transactions%20and%20validation%20signatures%20of%20a%20block%20can%20be%20hashed%20using%20this%20simple%20merkle%20tree%20logic.%0A%20%20-%20%5Bparitytech%20binary-merkle-trie%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Futils%2Fbinary-merkle-tree)%20(rust)%3A%20implements%20a%20simple%20binary%20Merkle%20Tree%20utilities%20required%20for%20inter-op%20with%20Ethereum%20bridge%20%26%20Solidity%20contract.%0A%20%20-%20%5Bsnowbridge%20merkle.go%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Fcrypto%2Fmerkle%2Fmerkle.go)%0A%20%20-%20%5Bsnowbridge%20merkleization.rs%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fparachain%2Fpallets%2Fethereum-beacon-client%2Fsrc%2Fmerkleization.rs)%0A-%20%5Bmerkle_proof%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fssz%2Fmerkle-proofs.mdx)%20%5Bexplainer%5D(https%3A%2F%2Fsoliditydeveloper.com%2Fmerkle-tree)%0A%20%20-%20%5Blighthouse%20merkle_proof%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fmerkle_proof)%20(rust)%3A%20efficiently%20represents%20a%20Merkle%20tree%20of%20fixed%20depth%20where%20only%20the%20first%20N%20indices%20are%20populated%20by%20non-zero%20leaves%20(perfect%20for%20the%20deposit%20contract%20tree).%0A%20%20-%20%5Bsnowbridge%20simplified_mmr_proof.go%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Fcrypto%2Fmerkle%2Fsimplified_mmr_proof.go)%0A%20%20-%20%5Bsnowbridge%20merkle-proof%20rust%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Fparachain%2Fpallets%2Fbasic-channel%2Fmerkle-proof)%0A%20%20-%20%5Bsnowbridge%20MerkleProof.sol%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fcore%2Fpackages%2Fcontracts%2Fcontracts%2Futils%2FMerkleProof.sol)%0A%20%20-%20%5Bnpm%20package%20eth-proof%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Feth-proof)%0A-%20%5BMerkle%20Mountain%20Range%5D(https%3A%2F%2Fdocs.grin.mw%2Fwiki%2Fchain-state%2Fmerkle-mountain-range%2F)%0A%20%20-%20%5Bparitytech%20merkle-mountain-range%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fmerkle-mountain-range)%20(rust)%0A%20%20-%20%5Bharmony%20mmr%20(go)%5D(https%3A%2F%2Fgithub.com%2Fpeekpi%2Fharmony%2Ftree%2FmmrHardfork%2Finternal%2Fmmr)%3A%20Adds%20a%20merkle%20mountain%20range%20to%20harmony's%20core%20protocol%20to%20support%20light%20clients%20(WIP)%20%5BPR4198%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198%2Ffiles)%0A-%20queues%0A%20%20-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fcontainer%2Fqueue)%20(go)%3A%20priority%20queue%0A%20%20-%20%5Bsnowbridge%20MMRProof.sol%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fcore%2Fpackages%2Fcontracts%2Fcontracts%2Futils%2FMMRProof.sol)%0A%20%20-%20%5Bsnowfork%20merkle-mountain-range%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fmerkle-mountain-range)%0A-%20safe-arithmetic%0A%20%20-%20%5Blighthouse%20safe_arith%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fsafe_arith)%20(rust)%3A%20Library%20for%20safe%20arithmetic%20on%20integers%2C%20avoiding%20overflow%20and%20division%20by%20zero.%0A-%20slice%0A%20%20-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fcontainer%2Fslice)%20(go)%0A-%20%5Btries%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fpatricia-merkle-trie%2F)%0A%20%20-%20%5Bparitytech%20trie%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Ftrie)%3A%20Utility%20functions%20to%20interact%20with%20Substrate's%20Base-16%20Modified%20Merkle%20Patricia%20tree%20(%22trie%22).%0A-%20%5BVerifiable%20Delay%20Function%5D(https%3A%2F%2Feprint.iacr.org%2F2018%2F623.pdf)%0A%20%20-%20%5Bharmony%20vdf%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fcrypto%2Fvdf)%20(go)%3A%20Package%20vdf%20is%20a%20proof-of-concept%20implementation%20of%20a%20delay%20function%20and%20the%20security%20properties%20are%20not%20guaranteed.%0A-%20%5BVerfiable%20Random%20Function%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FVerifiable_random_function)%0A%20%20-%20%5Bharmony%20vrf%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fcrypto%2Fvrf)%20(go)%3A%20A%20VRF%20is%20a%20pseudorandom%20function%20f_k%20from%20a%20secret%20key%20k%2C%20such%20that%20that%20knowledge%20of%20k%20not%20only%20enables%20one%20to%20evaluate%20f_k%20at%20for%20any%20message%20m%2C%20but%20also%20to%20provide%20an%20NP-proof%20that%20the%20value%20f_k(m)%20is%20indeed%20correct%20without%20compromising%20the%20unpredictability%20of%20f_k%20for%20any%20m'%20!%3D%20m.%20%5Bhttps%3A%2F%2Fieeexplore.ieee.org%2Fdocument%2F814584%5D(https%3A%2F%2Fieeexplore.ieee.org%2Fdocument%2F814584)%0A%20%20-%20%5Bparitytech%20vrf%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Fvrf)%3A%20Primitives%20for%20VRF-based%20consensus%20engines.%20Schnorrkel-based%20VRF.%0A-%20tree%0A%20%20-%20%5Bparitytech%20fork-tree%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Futils%2Ffork-tree)%20(rust)%3A%20Utility%20library%20for%20managing%20tree-like%20ordered%20data%20with%20logic%20for%20pruning%20the%20tree%20while%20finalizing%20nodes.%0A%0A**Hash%20functions**%0A%0A%5BSHA-2%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSHA-2)%0A%0A%5Bdifference%20between%20sha256%20and%20kecakk256%5D(https%3A%2F%2Fwww.geeksforgeeks.org%2Fdifference-between-sha-256-and-keccak-256%2F)%0A%0A-%20%5BArgon%202%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FArgon2)%0A%20%20-%20%5BArgon2%5D(https%3A%2F%2Fgithub.com%2FP-H-C%2Fphc-winner-argon2)%3A%20eference%20C%20implementation%20of%20Argon2.%0A%20%20-%20%5Bx%2Fcrypto%20Argon2%5D(https%3A%2F%2Fcs.opensource.google%2Fgo%2Fx%2Fcrypto%2F%2B%2Fmaster%3Aargon2%2Fargon2.go)%20(go)%3A%20Package%20argon2%20implements%20the%20key%20derivation%20function%20Argon2.%0A%20%20-%20%5Brust-argon2%5D(https%3A%2F%2Fgithub.com%2Fsru-systems%2Frust-argon2)%20(rust)%3A%20Rust%20library%20for%20hashing%20passwords%20using%20Argon2.%0A%20%20-%20%5Bnode-argon2%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fargon2)%20(typescript)%3A%20Bindings%20to%20the%20reference%20Argon2%20implementation.%0A-%20%5Bblake%5D(%3Chttps%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBLAKE_(hash_function)%3E)%0A%20%20-%20%5Bblake2%5D(https%3A%2F%2Fwww.blake2.net%2F)%20hash%20function%0A%20%20%20%20-%20%5Bethereum-go-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fblake2b)%20(go)%3A%20Package%20blake2b%20implements%20the%20BLAKE2b%20hash%20algorithm%20defined%20by%20RFC%207693%20and%20the%20extendable%20output%20function%20(XOF)%20BLAKE2Xb.%0A%20%20%20%20-%20%5Bbsc%20blake2b%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcrypto%2Fblake2b)%20(go)%3A%20Package%20blake2b%20implements%20the%20BLAKE2b%20hash%20algorithm%20defined%20by%20RFC%207693%20and%20the%20extendable%20output%20function%20(XOF)%20BLAKE2Xb.%0A%20%20-%20%5Bblake3%5D(https%3A%2F%2Fgithub.com%2FBLAKE3-team%2FBLAKE3)%0A%20%20%20%20-%20%5Bblake3%20rust%20crate%5D(https%3A%2F%2Fcrates.io%2Fcrates%2Fblake3)%20(rust)%3A%20BLAKE3%20is%20based%20on%20an%20optimized%20instance%20of%20the%20established%20hash%20function%20BLAKE2%20and%20on%20the%20original%20Bao%20tree%20mode.%0A%20%20%20%20-%20%5Bzeebo%20blake3%5D(https%3A%2F%2Fgithub.com%2Fzeebo%2Fblake3)%20(go)%20%3A%20Pure%20Go%20implementation%20of%20BLAKE3%20with%20AVX2%20and%20SSE4.1%20acceleration.%0A-%20%5Bkeccak256%5D(https%3A%2F%2Fkeccak.team%2Fkeccak.html)%20hash%20function%0A%20%20-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fcrypto%2Fhash%2Fhash.go)%20(go)%0A%20%20-%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Feth2_hashing%2Fsrc%2Flib.rs)%20(rust)%3A%20wrapper%20over%20two%20SHA256%20crates%3A%20%60sha2%60%20and%20%60ring%60%0A%20%20-%20%5Bbsc%20crypto%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fcrypto%2Fcrypto.go%23L91)%20(go)%0A%20%20-%20%5Bharmony%20hash%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fcrypto%2Fhash%2Fhash.go)%20(go)%0A%20%20-%20%5Bsnowbridge%20keccak%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Fcrypto%2Fkeccak%2Fkeccak.go)%0A-%20%5Bsha256%5D(https%3A%2F%2Fpkg.go.dev%2Fcrypto%2Fsha256)%0A%20%20-%20%5Btendermint%20tmhash%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Ftmhash)%0A%0A**encryption**%0A%0A-%20%5BECIES%5D(https%3A%2F%2Fcryptobook.nakov.com%2Fasymmetric-key-ciphers%2Fecies-public-key-encryption)%20(go)%3A%20a%20hybrid%20encryption%20scheme%0A%20%20-%20%5Bethereum-go-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fecies)%20(go)%0A%20%20-%20%5Bbsc%20ecies%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcrypto%2Fecies)%20(go)%0A-%20%5Bascii%20armored%20encryption%20uses%20ed25519%5D(https%3A%2F%2Fwww.rfc-editor.org%2Frfc%2Fpdfrfc%2Frfc4880.txt.pdf)%0A%20%20-%20%5Bethereum-go-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fsignify)%20(go)%0A%20%20-%20%5Bbsc%20signify%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcrypto%2Fsignify)%20(go)%0A%20%20-%20%5Btenderming%20armor%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fcrypto%2Farmor%2Farmor.go)%20(go)%0A-%20%5BChaCha20-Poly1305%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FChaCha20-Poly1305)%3A%20an%20authenticated%20encryption%20with%20additional%20data%20(AEAD)%20algorithm%0A%20%20-%20%5Btendermint%20xchacha20poly1305%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fxchacha20poly1305)%20(go)%0A-%20%5BXSalsa20%5D(https%3A%2F%2Flibsodium.gitbook.io%2Fdoc%2Fadvanced%2Fstream_ciphers%2Fxsalsa20)%20(go)%3A%20XSalsa20%20is%20a%20stream%20cipher%20based%20upon%20Salsa20%20but%20with%20a%20much%20longer%20nonce%3A%20192%20bits%20instead%20of%2064%20bits.%0A%20%20-%20%5Btendermint%20xsalsa20symmetric%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fxsalsa20symmetric)%20(go)%3A%20secret%20must%20be%2032%20bytes%20long.%20Use%20something%20like%20Sha256(Bcrypt(passphrase)).%20The%20ciphertext%20is%20(secretbox.Overhead%20%2B%2024)%20bytes%20longer%20than%20the%20plaintext.%0A%0A**Random%20number%20generators**%0A%0A-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fcrypto%2Frand%2Frand.go)%20(go)%0A%0A**Serialization%2FDeSerialization**%0A%0A-%20%5BRECURSIVE-LENGTH%20PREFIX%20(RLP)%20SERIALIZATION%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Frlp%2F)%0A%20%20-%20%5Bethereum%20rlp%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Frlp)%0A%20%20-%20%5Bharmony%20rlp%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fcrypto%2Fhash%2Frlp.go)%0A-%20%5BSimple%20Serialize%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fssz%2F)%0A%20%20-%20%5Bsnowbridge%20ssz.rs%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fparachain%2Fpallets%2Fethereum-beacon-client%2Fsrc%2Fssz.rs)%0A%0A-%20%5BMerkle%20Patricia%20Trie%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fpatricia-merkle-trie%2F)%0A%0A**Threading**%0A%0A-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fcontainer%2Fthread-safe%2Fmap.go)%3A%20contains%20generic%20containers%20that%20are%20protected%20either%20by%20Mutexes%20or%20atomics%20underneath%20the%20hood.%0A%0A**zero%20knowledge**%0A%0A-%20hash%20functions%0A%20%20-%20%5BPoseidon%5D(https%3A%2F%2Fwww.usenix.org%2Fsystem%2Ffiles%2Fsec21-grassi.pdf)%3A%20A%20New%20Hash%20Function%20for%0A%20%20%20%20Zero-Knowledge%20Proof%20Systems%20(%5Bvideo%5D(https%3A%2F%2Fyoutu.be%2FhUx3WpDV_l0))%0A%0A%23%23%20References%0A%0A-%20%5BBloom%20Filter%20Wikipedia%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBloom_filter)%3A%20A%20Bloom%20filter%20is%20a%20space-efficient%20probabilistic%20data%20structure%2C%20conceived%20by%20Burton%20Howard%20Bloom%20in%201970%2C%20that%20is%20used%20to%20test%20whether%20an%20element%20is%20a%20member%20of%20a%20set.%0A-%20%5BBloom%20Filters%20Explainer%5D(https%3A%2F%2Fwww.jasondavies.com%2Fbloomfilter%2F)%3A%20The%20bloom%20filter%20essentially%20consists%20of%20a%20bit%20vector%20of%20length%20m%2C%20represented%20by%20the%20central%20column.%0A-%20%5BBloomfilter%20Lesson%2011%20-%20Blockchain%20Academy%5D(https%3A%2F%2Fblockchain-academy.hs-mittweida.de%2Fcoursesblockchain-introduction-technical-beginner-to-intermediate%2Flessons%2Flesson-11-bloomfilter%2F)%3A%20Blockchain%20Introduction%20Technical%20%E2%80%93%20Beginner%20to%20Intermediate%20Lesson%2011%20%E2%80%93%20Bloomfilter.%0A-%20%5BCuckoo%20Hashing%5D(https%3A%2F%2Fciteseerx.ist.psu.edu%2Fviewdoc%2Fdownload%3Fdoi%3D10.1.1.25.4189%26rep%3Drep1%26type%3Dpdf)%3A%20a%20simple%20dictionary%20with%20worst%20case%20constant%20lookup%20time%2C%20equaling%20the%20theoretical%20performance%20of%20the%20classic%20dynamic%20perfect%20hashing%20scheme%0A%20%20of%20Dietzfelbinger%20et%20al.%0A-%20%5BCukoo%20Hashing%20Visualization%5D(http%3A%2F%2Fwww.lkozma.net%2Fcuckoo_hashing_visualization%2F)%3A%20Visualization%20of%20Cukoo%20Hashing%20an%20elegant%20method%20for%20resolving%20collisions%20in%20hash%20tables.%0A-%20%5BFast%20Fourier%20Transforms%5D(https%3A%2F%2Fvitalik.ca%2Fgeneral%2F2019%2F05%2F12%2Ffft.html)%3A%20Vitaliks%20explaniner%20on%20Fast%20Fourier%20Transforms.%20Trigger%20warning%3A%20specialized%20mathematical%20topic%2C%20with%0A%20%20special%20thanks%20to%20Karl%20Floersch%20for%20feedback.%0A-%20%5BMerkle%20Trees%2FMerkle%20Proofs%20Lesson%2010%20-%20Blockchain%20Academy%5D(https%3A%2F%2Fblockchain-academy.hs-mittweida.de%2Fcourses%2Fblockchain-introduction-technical-beginner-to-intermediate%2Flessons%2Flesson-10-merkle-trees-merkle-proofs%2F)%3A%20Blockchain%20Introduction%20Technical%20%E2%80%93%20Beginner%20to%20Intermediate%20Lesson%2010%20%E2%80%93%20Merkle%20Trees%2FMerkle%20Proofs.%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./primitives-BdJCEKYx.js"),[]),path:"/research/primitives/primitives.html",type:"mdx",filePath:"research/primitives/primitives.mdx",content:"%23%20Cryptographic%20Primitives%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0ACryptographic%20and%20Mathematic%20Primitives%0A%0A%23%23%20Reference%20Implementations%0A%0A**general%20primitives**%0A%0A-%20%5Bbloom%20filter%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBloom_filter)%0A%20%20-%20%5Bgeth%20bloombits%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcore%2Fbloombits)%20(go)%3A%20Package%20bloombits%20implements%20bloom%20filtering%20on%20batches%20of%20data.%0A%0A-%20%5Bint_to_bytes%5D(https%3A%2F%2Fethereum.github.io%2Fexecution-specs%2Fautoapi%2Fethereum%2Fbase_types%2Findex.html)%0A%20%20-%20%5Blighthouse%20int_to_bytes%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fint_to_bytes)%20(rust)%3A%20The%20Eth%202.0%20specification%20uses%20%60int.to_bytes(2%2C%20'little')%60%2C%20which%20throws%20an%20error%20if%20%60int%60%20doesn't%20fit%20within%203%20bytes.%20The%20specification%20relies%20upon%20implicit%20asserts%20for%20some%20validity%20conditions%2C%20so%20we%20ensure%20the%20calling%20function%20is%20aware%20of%20the%20error%20condition%20as%20opposed%20to%20hiding%20it%20with%20a%20modulo.%0A-%20%5Bleaky%20bucket%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FLeaky_bucket%23As_a_meter)%0A%20%20-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fcontainer%2Fleaky-bucket%2Fleakybucket.go)%3A%20leaky%20bucket%20as%20a%20meter%0A-%20linked%20list%0A%20%20-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fcontainer%2Fdoubly-linked-list)%20(go)%3A%20doubly%20linked%20list%0A-%20%5Bmerkle%20patrica%20tries%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fpatricia-merkle-trie%2F)%0A%20%20-%20%5Bgeth%20trie%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Ftrie%2Ftrie.go%23L17)%20(go)%3A%20Package%20trie%20implements%20Merkle%20Patricia%20Tries.%0A%20%20-%20%5Bgeth%20database%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fmaster%2Fcore%2Fstate%2Fdatabase.go%23L63)%20(go)%3A%20Trie%20is%20a%20Ethereum%20Merkle%20Patricia%20trie.%0A-%20%5Bmerkle%20trees%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FMerkle_tree)%0A%20%20-%20%5Bprysm%20sparse_merkle%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fcontainer%2Ftrie%2Fsparse_merkle.go)%20(go)%3A%20defines%20utilities%20for%20sparse%20merkle%20tries%20for%20Ethereum%20consensus.%0A%20%20-%20%5Blighthouse%20cached_tree_hash%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fcached_tree_hash)%20(rust)%3A%20Sparse%20Merkle%20tree%20suitable%20for%20tree%20hashing%20vectors%20and%20lists.%0A%20%20-%20%5Blighthouse%20tree_hash%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Ftree_hash)%20(rust)%3A%20Convenience%20method%20for%20%60MerkleHasher%60%20which%20also%20provides%20some%20fast-paths%20for%20small%20trees.%60minimum_leaf_count%60%20will%20only%20be%20used%20if%20it%20is%20greater%20than%20or%20equal%20to%20the%20minimum%20number%20of%20leaves%20that%20can%20be%20created%20from%20%60bytes%60.%0A%20%20-%20%5Blighthouse%20tree_hash_derive%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Ftree_hash_derive)%20(rust)%3A%0A%20%20-%20%5Btendermint%20go%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fmerkle)%20(go)%3A%20Merkle%20Tree%20For%20smaller%20static%20data%20structures%20that%20don't%20require%20immutable%20snapshots%20or%20mutability%3B%20for%20instance%20the%20transactions%20and%20validation%20signatures%20of%20a%20block%20can%20be%20hashed%20using%20this%20simple%20merkle%20tree%20logic.%0A%20%20-%20%5Bparitytech%20binary-merkle-trie%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Futils%2Fbinary-merkle-tree)%20(rust)%3A%20implements%20a%20simple%20binary%20Merkle%20Tree%20utilities%20required%20for%20inter-op%20with%20Ethereum%20bridge%20%26%20Solidity%20contract.%0A%20%20-%20%5Bsnowbridge%20merkle.go%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Fcrypto%2Fmerkle%2Fmerkle.go)%0A%20%20-%20%5Bsnowbridge%20merkleization.rs%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fparachain%2Fpallets%2Fethereum-beacon-client%2Fsrc%2Fmerkleization.rs)%0A-%20%5Bmerkle_proof%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fdev%2Fssz%2Fmerkle-proofs.mdx)%20%5Bexplainer%5D(https%3A%2F%2Fsoliditydeveloper.com%2Fmerkle-tree)%0A%20%20-%20%5Blighthouse%20merkle_proof%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fmerkle_proof)%20(rust)%3A%20efficiently%20represents%20a%20Merkle%20tree%20of%20fixed%20depth%20where%20only%20the%20first%20N%20indices%20are%20populated%20by%20non-zero%20leaves%20(perfect%20for%20the%20deposit%20contract%20tree).%0A%20%20-%20%5Bsnowbridge%20simplified_mmr_proof.go%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Fcrypto%2Fmerkle%2Fsimplified_mmr_proof.go)%0A%20%20-%20%5Bsnowbridge%20merkle-proof%20rust%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Fparachain%2Fpallets%2Fbasic-channel%2Fmerkle-proof)%0A%20%20-%20%5Bsnowbridge%20MerkleProof.sol%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fcore%2Fpackages%2Fcontracts%2Fcontracts%2Futils%2FMerkleProof.sol)%0A%20%20-%20%5Bnpm%20package%20eth-proof%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Feth-proof)%0A-%20%5BMerkle%20Mountain%20Range%5D(https%3A%2F%2Fdocs.grin.mw%2Fwiki%2Fchain-state%2Fmerkle-mountain-range%2F)%0A%20%20-%20%5Bparitytech%20merkle-mountain-range%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fmerkle-mountain-range)%20(rust)%0A%20%20-%20%5Bharmony%20mmr%20(go)%5D(https%3A%2F%2Fgithub.com%2Fpeekpi%2Fharmony%2Ftree%2FmmrHardfork%2Finternal%2Fmmr)%3A%20Adds%20a%20merkle%20mountain%20range%20to%20harmony's%20core%20protocol%20to%20support%20light%20clients%20(WIP)%20%5BPR4198%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fpull%2F4198%2Ffiles)%0A-%20queues%0A%20%20-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fcontainer%2Fqueue)%20(go)%3A%20priority%20queue%0A%20%20-%20%5Bsnowbridge%20MMRProof.sol%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fcore%2Fpackages%2Fcontracts%2Fcontracts%2Futils%2FMMRProof.sol)%0A%20%20-%20%5Bsnowfork%20merkle-mountain-range%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fmerkle-mountain-range)%0A-%20safe-arithmetic%0A%20%20-%20%5Blighthouse%20safe_arith%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fconsensus%2Fsafe_arith)%20(rust)%3A%20Library%20for%20safe%20arithmetic%20on%20integers%2C%20avoiding%20overflow%20and%20division%20by%20zero.%0A-%20slice%0A%20%20-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fcontainer%2Fslice)%20(go)%0A-%20%5Btries%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fpatricia-merkle-trie%2F)%0A%20%20-%20%5Bparitytech%20trie%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Ftrie)%3A%20Utility%20functions%20to%20interact%20with%20Substrate's%20Base-16%20Modified%20Merkle%20Patricia%20tree%20(%22trie%22).%0A-%20%5BVerifiable%20Delay%20Function%5D(https%3A%2F%2Feprint.iacr.org%2F2018%2F623.pdf)%0A%20%20-%20%5Bharmony%20vdf%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fcrypto%2Fvdf)%20(go)%3A%20Package%20vdf%20is%20a%20proof-of-concept%20implementation%20of%20a%20delay%20function%20and%20the%20security%20properties%20are%20not%20guaranteed.%0A-%20%5BVerfiable%20Random%20Function%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FVerifiable_random_function)%0A%20%20-%20%5Bharmony%20vrf%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fcrypto%2Fvrf)%20(go)%3A%20A%20VRF%20is%20a%20pseudorandom%20function%20f_k%20from%20a%20secret%20key%20k%2C%20such%20that%20that%20knowledge%20of%20k%20not%20only%20enables%20one%20to%20evaluate%20f_k%20at%20for%20any%20message%20m%2C%20but%20also%20to%20provide%20an%20NP-proof%20that%20the%20value%20f_k(m)%20is%20indeed%20correct%20without%20compromising%20the%20unpredictability%20of%20f_k%20for%20any%20m'%20!%3D%20m.%20%5Bhttps%3A%2F%2Fieeexplore.ieee.org%2Fdocument%2F814584%5D(https%3A%2F%2Fieeexplore.ieee.org%2Fdocument%2F814584)%0A%20%20-%20%5Bparitytech%20vrf%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Fprimitives%2Fconsensus%2Fvrf)%3A%20Primitives%20for%20VRF-based%20consensus%20engines.%20Schnorrkel-based%20VRF.%0A-%20tree%0A%20%20-%20%5Bparitytech%20fork-tree%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Ftree%2Fmaster%2Futils%2Ffork-tree)%20(rust)%3A%20Utility%20library%20for%20managing%20tree-like%20ordered%20data%20with%20logic%20for%20pruning%20the%20tree%20while%20finalizing%20nodes.%0A%0A**Hash%20functions**%0A%0A%5BSHA-2%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSHA-2)%0A%0A%5Bdifference%20between%20sha256%20and%20kecakk256%5D(https%3A%2F%2Fwww.geeksforgeeks.org%2Fdifference-between-sha-256-and-keccak-256%2F)%0A%0A-%20%5BArgon%202%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FArgon2)%0A%20%20-%20%5BArgon2%5D(https%3A%2F%2Fgithub.com%2FP-H-C%2Fphc-winner-argon2)%3A%20eference%20C%20implementation%20of%20Argon2.%0A%20%20-%20%5Bx%2Fcrypto%20Argon2%5D(https%3A%2F%2Fcs.opensource.google%2Fgo%2Fx%2Fcrypto%2F%2B%2Fmaster%3Aargon2%2Fargon2.go)%20(go)%3A%20Package%20argon2%20implements%20the%20key%20derivation%20function%20Argon2.%0A%20%20-%20%5Brust-argon2%5D(https%3A%2F%2Fgithub.com%2Fsru-systems%2Frust-argon2)%20(rust)%3A%20Rust%20library%20for%20hashing%20passwords%20using%20Argon2.%0A%20%20-%20%5Bnode-argon2%5D(https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fargon2)%20(typescript)%3A%20Bindings%20to%20the%20reference%20Argon2%20implementation.%0A-%20%5Bblake%5D(%3Chttps%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBLAKE_(hash_function)%3E)%0A%20%20-%20%5Bblake2%5D(https%3A%2F%2Fwww.blake2.net%2F)%20hash%20function%0A%20%20%20%20-%20%5Bethereum-go-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fblake2b)%20(go)%3A%20Package%20blake2b%20implements%20the%20BLAKE2b%20hash%20algorithm%20defined%20by%20RFC%207693%20and%20the%20extendable%20output%20function%20(XOF)%20BLAKE2Xb.%0A%20%20%20%20-%20%5Bbsc%20blake2b%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcrypto%2Fblake2b)%20(go)%3A%20Package%20blake2b%20implements%20the%20BLAKE2b%20hash%20algorithm%20defined%20by%20RFC%207693%20and%20the%20extendable%20output%20function%20(XOF)%20BLAKE2Xb.%0A%20%20-%20%5Bblake3%5D(https%3A%2F%2Fgithub.com%2FBLAKE3-team%2FBLAKE3)%0A%20%20%20%20-%20%5Bblake3%20rust%20crate%5D(https%3A%2F%2Fcrates.io%2Fcrates%2Fblake3)%20(rust)%3A%20BLAKE3%20is%20based%20on%20an%20optimized%20instance%20of%20the%20established%20hash%20function%20BLAKE2%20and%20on%20the%20original%20Bao%20tree%20mode.%0A%20%20%20%20-%20%5Bzeebo%20blake3%5D(https%3A%2F%2Fgithub.com%2Fzeebo%2Fblake3)%20(go)%20%3A%20Pure%20Go%20implementation%20of%20BLAKE3%20with%20AVX2%20and%20SSE4.1%20acceleration.%0A-%20%5Bkeccak256%5D(https%3A%2F%2Fkeccak.team%2Fkeccak.html)%20hash%20function%0A%20%20-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fcrypto%2Fhash%2Fhash.go)%20(go)%0A%20%20-%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Feth2_hashing%2Fsrc%2Flib.rs)%20(rust)%3A%20wrapper%20over%20two%20SHA256%20crates%3A%20%60sha2%60%20and%20%60ring%60%0A%20%20-%20%5Bbsc%20crypto%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fcrypto%2Fcrypto.go%23L91)%20(go)%0A%20%20-%20%5Bharmony%20hash%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fcrypto%2Fhash%2Fhash.go)%20(go)%0A%20%20-%20%5Bsnowbridge%20keccak%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Frelayer%2Fcrypto%2Fkeccak%2Fkeccak.go)%0A-%20%5Bsha256%5D(https%3A%2F%2Fpkg.go.dev%2Fcrypto%2Fsha256)%0A%20%20-%20%5Btendermint%20tmhash%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Ftmhash)%0A%0A**encryption**%0A%0A-%20%5BECIES%5D(https%3A%2F%2Fcryptobook.nakov.com%2Fasymmetric-key-ciphers%2Fecies-public-key-encryption)%20(go)%3A%20a%20hybrid%20encryption%20scheme%0A%20%20-%20%5Bethereum-go-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fecies)%20(go)%0A%20%20-%20%5Bbsc%20ecies%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcrypto%2Fecies)%20(go)%0A-%20%5Bascii%20armored%20encryption%20uses%20ed25519%5D(https%3A%2F%2Fwww.rfc-editor.org%2Frfc%2Fpdfrfc%2Frfc4880.txt.pdf)%0A%20%20-%20%5Bethereum-go-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fsignify)%20(go)%0A%20%20-%20%5Bbsc%20signify%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcrypto%2Fsignify)%20(go)%0A%20%20-%20%5Btenderming%20armor%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fcrypto%2Farmor%2Farmor.go)%20(go)%0A-%20%5BChaCha20-Poly1305%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FChaCha20-Poly1305)%3A%20an%20authenticated%20encryption%20with%20additional%20data%20(AEAD)%20algorithm%0A%20%20-%20%5Btendermint%20xchacha20poly1305%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fxchacha20poly1305)%20(go)%0A-%20%5BXSalsa20%5D(https%3A%2F%2Flibsodium.gitbook.io%2Fdoc%2Fadvanced%2Fstream_ciphers%2Fxsalsa20)%20(go)%3A%20XSalsa20%20is%20a%20stream%20cipher%20based%20upon%20Salsa20%20but%20with%20a%20much%20longer%20nonce%3A%20192%20bits%20instead%20of%2064%20bits.%0A%20%20-%20%5Btendermint%20xsalsa20symmetric%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fxsalsa20symmetric)%20(go)%3A%20secret%20must%20be%2032%20bytes%20long.%20Use%20something%20like%20Sha256(Bcrypt(passphrase)).%20The%20ciphertext%20is%20(secretbox.Overhead%20%2B%2024)%20bytes%20longer%20than%20the%20plaintext.%0A%0A**Random%20number%20generators**%0A%0A-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fcrypto%2Frand%2Frand.go)%20(go)%0A%0A**Serialization%2FDeSerialization**%0A%0A-%20%5BRECURSIVE-LENGTH%20PREFIX%20(RLP)%20SERIALIZATION%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Frlp%2F)%0A%20%20-%20%5Bethereum%20rlp%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Frlp)%0A%20%20-%20%5Bharmony%20rlp%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fcrypto%2Fhash%2Frlp.go)%0A-%20%5BSimple%20Serialize%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fssz%2F)%0A%20%20-%20%5Bsnowbridge%20ssz.rs%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Fblob%2Fmain%2Fparachain%2Fpallets%2Fethereum-beacon-client%2Fsrc%2Fssz.rs)%0A%0A-%20%5BMerkle%20Patricia%20Trie%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fdata-structures-and-encoding%2Fpatricia-merkle-trie%2F)%0A%0A**Threading**%0A%0A-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fcontainer%2Fthread-safe%2Fmap.go)%3A%20contains%20generic%20containers%20that%20are%20protected%20either%20by%20Mutexes%20or%20atomics%20underneath%20the%20hood.%0A%0A**zero%20knowledge**%0A%0A-%20hash%20functions%0A%20%20-%20%5BPoseidon%5D(https%3A%2F%2Fwww.usenix.org%2Fsystem%2Ffiles%2Fsec21-grassi.pdf)%3A%20A%20New%20Hash%20Function%20for%0A%20%20%20%20Zero-Knowledge%20Proof%20Systems%20(%5Bvideo%5D(https%3A%2F%2Fyoutu.be%2FhUx3WpDV_l0))%0A%0A%23%23%20References%0A%0A-%20%5BBloom%20Filter%20Wikipedia%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBloom_filter)%3A%20A%20Bloom%20filter%20is%20a%20space-efficient%20probabilistic%20data%20structure%2C%20conceived%20by%20Burton%20Howard%20Bloom%20in%201970%2C%20that%20is%20used%20to%20test%20whether%20an%20element%20is%20a%20member%20of%20a%20set.%0A-%20%5BBloom%20Filters%20Explainer%5D(https%3A%2F%2Fwww.jasondavies.com%2Fbloomfilter%2F)%3A%20The%20bloom%20filter%20essentially%20consists%20of%20a%20bit%20vector%20of%20length%20m%2C%20represented%20by%20the%20central%20column.%0A-%20%5BBloomfilter%20Lesson%2011%20-%20Blockchain%20Academy%5D(https%3A%2F%2Fblockchain-academy.hs-mittweida.de%2Fcoursesblockchain-introduction-technical-beginner-to-intermediate%2Flessons%2Flesson-11-bloomfilter%2F)%3A%20Blockchain%20Introduction%20Technical%20%E2%80%93%20Beginner%20to%20Intermediate%20Lesson%2011%20%E2%80%93%20Bloomfilter.%0A-%20%5BCuckoo%20Hashing%5D(https%3A%2F%2Fciteseerx.ist.psu.edu%2Fviewdoc%2Fdownload%3Fdoi%3D10.1.1.25.4189%26rep%3Drep1%26type%3Dpdf)%3A%20a%20simple%20dictionary%20with%20worst%20case%20constant%20lookup%20time%2C%20equaling%20the%20theoretical%20performance%20of%20the%20classic%20dynamic%20perfect%20hashing%20scheme%0A%20%20of%20Dietzfelbinger%20et%20al.%0A-%20%5BCukoo%20Hashing%20Visualization%5D(http%3A%2F%2Fwww.lkozma.net%2Fcuckoo_hashing_visualization%2F)%3A%20Visualization%20of%20Cukoo%20Hashing%20an%20elegant%20method%20for%20resolving%20collisions%20in%20hash%20tables.%0A-%20%5BFast%20Fourier%20Transforms%5D(https%3A%2F%2Fvitalik.ca%2Fgeneral%2F2019%2F05%2F12%2Ffft.html)%3A%20Vitaliks%20explaniner%20on%20Fast%20Fourier%20Transforms.%20Trigger%20warning%3A%20specialized%20mathematical%20topic%2C%20with%0A%20%20special%20thanks%20to%20Karl%20Floersch%20for%20feedback.%0A-%20%5BMerkle%20Trees%2FMerkle%20Proofs%20Lesson%2010%20-%20Blockchain%20Academy%5D(https%3A%2F%2Fblockchain-academy.hs-mittweida.de%2Fcourses%2Fblockchain-introduction-technical-beginner-to-intermediate%2Flessons%2Flesson-10-merkle-trees-merkle-proofs%2F)%3A%20Blockchain%20Introduction%20Technical%20%E2%80%93%20Beginner%20to%20Intermediate%20Lesson%2010%20%E2%80%93%20Merkle%20Trees%2FMerkle%20Proofs.%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./signatures-DIx2xvSD.js"),[]),path:"/research/primitives/signatures",type:"mdx",filePath:"research/primitives/signatures.mdx",content:"%23%20Signature%20Schemes%20in%20Consensus%20Protocols%0A%0A-%20date%3A%202023-02-05%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0ABoth%20sides%20of%20the%20bridge%20need%20to%20verify%20what%20happened%20on%20the%20other%20side.%20To%20do%20that%2C%20the%20verification%20logic%20is%20often%20encapsulated%20inside%20a%20light%20client%2C%20manifested%20as%20a%20smart%20contract%20on%20the%20chain%20which%20the%20verification%20needs%20to%20be%20executed.%20The%20light%20client%20needs%20to%20follow%20consensus%20and%20signature%20verification%20mechanisms%20based%20on%20the%20signing%20algorithm%20and%20the%20elliptical%20curve%20used%20on%20the%20other%20side.%20For%20example%2C%20if%20chain%20A%20has%2021%20validators%20signing%20each%20block%20using%20ECDSA%20algorithm%20on%20secp256k1%20curves%2C%20then%20chain%20A's%20light%20client%2C%20executed%20on%20chain%20B%2C%20must%20extract%20the%20signatures%20from%20the%20block%20headers%20presented%20to%20the%20light%20client%2C%20and%20follow%20the%20ECDSA%20signature%20verification%20algorithm%20to%20verify%20the%20content%20of%20the%20block%20header%20indeeds%20produces%20the%2021%20signatures%20contained%20in%20the%20block%20header%2C%20given%20the%20public%20keys%20of%20the%2021%20validators.%0A%0AHere%2C%20we%20present%20a%20reference%20table%20for%20these%20signature%20schemes%20and%20how%20they%20are%20used%20in%20the%20consensus%20protocols%20of%20different%20blockchains.%20We%20limit%20our%20initial%20scope%20to%20Ethereum%2C%20Polygon%2C%20Avalanche%2C%20BSC%2C%20Harmony%2C%20Cosmos%2C%20and%20Polkadot%20only%20(and%20their%20undelying%20technologies).%20Note%20that%20we%20are%20only%20looking%20at%20how%20signatures%20are%20used%20in%20consensus%2C%20not%20elsewhere%20in%20the%20blockchain%20stack%2C%20as%20all%20these%20protocols%20use%20ECDSA%20on%20secp256k1%20for%20accounts%20in%20EVM%20interactions.%0A%0A%7C%20Algorithm%20%7C%20Curve%20%20%20%20%20%20%7C%20Protocol%20%20%7C%20Codeotesecp256k1%20%20%7C%20Polygon%20%20%20%7C%20%5Blib%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Ftree%2Fpeppermint%2Fcrypto%2Fsecp256kodified%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fpeppermint)%20Tendermint%20validator%20signature%20scheme%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%7C%20BSC%20%20%20%20%20%20%20%7C%20%5Blib%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcrypto%2Fsecp256k1)%20%5Busage%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fcb9e50bdf62c6b46a71724066d39f9851181a5af%2Fconsensus%2Fparlia%2Fparlia.go%23L546)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Derived%20from%20%5BClique%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-225)%2C%20then%20%5Bimproved%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2FBEPs%2Fpull%2F131)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20BLS%20%20%20%20%20%20%20%7C%20BN254%20%20%20%20%20%20%7C%20Ethereum%20%20%7C%20%5BEVM%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fb946b7a13b749c99979e312c83dce34cac8dd7b1%2Fcore%2Fvm%2Fcontracts.go%23L420)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Added%20by%20%5BEIP-196%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-196)%2C%5B197%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-197)%3B%20Mainly%20for%20use%20in%20smart%20contracts%2C%20such%20as%20zk-snark%20verification.%20See%20%5Bexplainer%5D(https%3A%2F%2Fhackmd.io%2F%40liangcc%2Fbls-solidity%23BLS-Signatures-in-Solidity)%20%7C%0A%7C%20%20%20%20%20%20%20%20%20%20%20%7C%20BLS12-381%20%20%7C%20Ethereum%20%20%7C%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fcrypto%2Fbls)%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20See%20%5BPoS%20design%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fconsensus-mechanisms%2Fpos%2Fkeys%2F)%20and%20%5Bexplainer%5D(https%3A%2F%2Fhackmd.io%2F%40benjaminion%2Fbls12-381)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Harmony%20%20%20%7C%20%5Blib%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fbls%2Ftree%2Fmaster%2Fffi%2Fgo%2Fbls)%20%5Busage%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fcrypto%2Fbls)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20See%20%5Bdesign%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fdevelopers%2Fharmony-specifics%2Fharmony-stack%23signatures-and-cryptography)%20and%20%5Bprotocol%20review%5D(https%3A%2F%2Fmedium.com%2Fharmony-one%2F2022-harmony-technical-review-88462efba368)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20RSA%20%20%20%20%20%20%20%7C%20N%2FA%20%20%20%20%20%20%20%20%7C%20Avalanche%20%7C%20%5Bverification%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2F51c5edd85ccc7927443b945b427e64d91ff99f67%2Fvms%2Fproposervm%2Fblock%2Fblock.go%23L119)%20%5Bgeneration%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2F51c5edd85ccc7927443b945b427e64d91ff99f67%2Fstaking%2Ftls.go%23L121)%20%7C%20Uses%20X.509%20certificate%20which%20potentially%20allows%20many%20algorithms%3B%20Moving%20towards%20BLS12-381%20and%20added%20implementations%20recently%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20EdDSA%20%20%20%20%20%7C%20Curve25519%20%7C%20IBC%20%20%20%20%20%20%20%7C%20%5Blib%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fed25519)%20%5Busage%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fspec%2Fcore%2Fencoding.md%23public-key-cryptography)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Used%20by%20all%20chains%20in%20Cosmos%20network%2C%20including%20%5BCosmos%20Hub%5D(https%3A%2F%2Fhub.cosmos.network%2Fmain%2Fvalidators%2Foverview.html)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Schnorr%20%20%20%7C%20Curve25519%20%7C%20Substrate%20%7C%20%5Blib%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fprimitives%2Fapplication-crypto%2Fsrc%2Fsr25519.rs)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20See%20also%20brief%20%5Bintro%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-cryptography%23what-is-sr25519-and-where-did-it-come-from)%20from%20Polkadot%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%0A%23%23%20Resources%0A%0A%23%23%23%20Algorithms%0A%0A%23%23%23%23%20ECDSA%0A%0A-%20%5BWikipedia%5D(https%3A%2F%2Fwww.wikiwand.com%2Fen%2FElliptic_Curve_Digital_Signature_Algorithm)%0A-%20Standard%3A%20%5BSEC%202%3A%20Recommended%20Elliptic%20Curve%20Domain%20Parameters%5D(https%3A%2F%2Fwww.secg.org%2Fsec2-v2.pdf)%0A%0A%23%23%23%23%20BLS%0A%0A-%20%5BWikipedia%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBLS_digital_signature)%0A-%20Paper%3A%20%5BShort%20Signatures%20from%20the%20Weil%20Pairing%5D(https%3A%2F%2Fwww.iacr.org%2Farchive%2Fasiacrypt2001%2F22480516.pdf)%0A-%20Tutorial%3A%20%5BBLS%20signatures%3A%20better%20than%20Schnorr%5D(https%3A%2F%2Fmedium.com%2Fcryptoadvance%2Fbls-signatures-better-than-schnorr-5a7fe30ea716)%0A-%20Analysis%3A%20%5BSecret%20Sharing%20and%20Threshold%20Signatures%20with%20BLS%5D(https%3A%2F%2Fwww.dash.org%2Fblog%2Fsecret-sharing-and-threshold-signatures-with-bls%2F)%0A-%20Deep%20dive%3A%20%5BBLS%20Signatures%20in%20Solidity%5D(https%3A%2F%2Fhackmd.io%2F%40liangcc%2Fbls-solidity)%0A%0A%23%23%23%23%20EdDSA%0A%0A-%20%5BWikipedia%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FEdDSA)%0A-%20%5BGoLang%5D(https%3A%2F%2Fpkg.go.dev%2Fgolang.org%2Fx%2Fcrypto%2Fed25519)%0A%0A%23%23%23%20Curves%0A%0A-%20%5BCurve%20database%5D(https%3A%2F%2Fneuromancer.sk%2Fstd%2F)%0A%0A%23%23%23%23%20secp256k1%0A%0A-%20%5BBitcoin%20Wiki%5D(https%3A%2F%2Fen.bitcoin.it%2Fwiki%2FSecp256k1)%0A-%20Tutorial%3A%20%5BA%20Bluffer%E2%80%99s%20Guide%20to%20secp256k1%5D(https%3A%2F%2Fmedium.com%2Fasecuritysite-when-bob-met-alice%2Fa-bluffers-guide-to-secp256k1-404e423e612)%0A%0A%23%23%23%23%20BLS12-381%0A%0A-%20Deep%20dive%3A%20%5BBLS12-381%20For%20The%20Rest%20Of%20Us%5D(https%3A%2F%2Fhackmd.io%2F%40benjaminion%2Fbls12-381)%0A-%20Intro%3A%20%5BBLS12-381%3A%20New%20zk-SNARK%20Elliptic%20Curve%20Construction%5D(https%3A%2F%2Felectriccoin.co%2Fblog%2Fnew-snark-curve%2F)%0A-%20Paper%3A%20%5BFast%20and%20simple%20constant-time%20hashing%20to%20the%20BLS12-381%20elliptic%20curve%5D(https%3A%2F%2Ftches.iacr.org%2Findex.php%2FTCHES%2Farticle%2Fview%2F8348%2F7697)%0A-%20Benchmark%3A%20%5BBLS%3A%20Is%20it%20really%20that%20slow%5D(https%3A%2F%2Fwww.dash.org%2Fblog%2Fbls-is-it-really-that-slow%2F)%0A-%20EIP%3A%20%5BEIP-2537%3A%20Precompile%20for%20BLS12-381%20curve%20operations%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-2537)%0A-%20EVM%20launch%3A%20%5BTargeting%20Shanghai%20upgrade%20May%202023%5D(https%3A%2F%2Fethereum-magicians.org%2Ft%2Feip-2537-bls12-precompile-discussion-thread%2F4187%2F16)%0A%0A%23%23%23%23%20BN254%0A%0A-%20%5BDefinition%5D(https%3A%2F%2Fneuromancer.sk%2Fstd%2Fbn%2Fbn254)%0A-%20Paper%3A%20%5BPairing-Friendly%20Elliptic%20Curves%20of%20Prime%20Order%5D(https%3A%2F%2Feprint.iacr.org%2F2005%2F133.pdf)%0A-%20Deep%20Dive%3A%20%5BBLS%20Signatures%20in%20Solidity%5D(https%3A%2F%2Fhackmd.io%2F%40liangcc%2Fbls-solidity)%0A-%20Speed%20Optimization%3A%20%5BNew%20software%20speed%20records%20for%20cryptographic%20pairings%5D(https%3A%2F%2Fcryptojedi.org%2Fpapers%2Fdclxvi-20100714.pdf)%0A%0A%23%23%23%20Usage%20in%20ZKP%0A%0A-%20%5BA%20survey%20of%20elliptic%20curves%20for%20proof%20systems%5D(https%3A%2F%2Feprint.iacr.org%2F2022%2F586.pdf)%0A%0A%23%23%23%20Signing%20Implementations%0A%0AThe%20%5BStandard%20Curve%20Database%5D(https%3A%2F%2Fneuromancer.sk%2Fstd%2F)%20is%20a%20good%20starting%20point%20for%20existing%20signing%20algorithms.%20Base%20implementations%20such%20as%20%5Bgolang%20crypto%5D(https%3A%2F%2Fpkg.go.dev%2Fgolang.org%2Fx%2Fcrypto)%20and%20%5Brust%20crypto%5D(https%3A%2F%2Fdocs.rs%2Frust-crypto%2Flatest%2Fcrypto%2F)%20provide%20good%20reference%20codebases.%0A%0A-%20%5Bbcrypt%5D(https%3A%2F%2Fwww.usenix.org%2Flegacy%2Fevent%2Fusenix99%2Fprovos%2Fprovos.pdf)%0A%20%20-%20%5Bcosmos-sdk%20bcrypt%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Fbcrypt)%0A-%20%5Bbip-0039%5D(https%3A%2F%2Fgithub.com%2Fbitcoin%2Fbips%2Fblob%2Fmaster%2Fbip-0039.mediawiki)%0A%20%20-%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Feth2_wallet)%20(rust)%0A-%20%5Bbls%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBLS_digital_signature)%0A%20%20-%20%5Bethereum-prysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fcrypto%2Fbls)%0A-%20%5Bbls-12-381%5D(https%3A%2F%2Fhackmd.io%2F%40benjaminion%2Fbls12-381)%0A%20%20-%20%5Bethereum%20EIP-2537%3A%20Precompile%20for%20BLS12-381%20curve%20operations%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-2537)%0A%20%20-%20%5Bethereum-go-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fbls12381)%20(go)%0A%20%20-%20%5Bharmony%20bls%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fcrypto%2Fbls%2Fbls.go)%20(go)%3A%20uses%20%5Bharmony%20bls%20repository%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fbls%2Fblob%2Fmaster%2Freadme.mdx)%0A%20%20%20%20-%20%5Bbls%20Harmony%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fbls)%20forked%20from%20%5Bherumi%2Fbls%5C_%5D(https%3A%2F%2Fgithub.com%2Fherumi%2Fbls_)%3A%20written%20in%20C%2B%2B%2C%20supports%20Go%2C%20Rust%2C%20WebAssembly%20(Node.js)%0A%20%20-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fcrypto%2Fbls)%20(go)%0A%20%20-%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls)%20(rust)%3A%20provides%20a%20wrapper%20around%20several%20BLS%20implementations%20to%20provide%20Lighthouse-specific%20functionality.%0A%20%20-%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Feth2_key_derivation)%20(rust)%3A%20Provides%20path-based%20hierarchical%20BLS%20key%20derivation%2C%20as%20specified%20by%20%5BEIP-2333%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-2333).%0A%20%20%20%20-%20%5BAurora%20Rainbow%20Bridge%20Implementation%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls)%3A%20Implementations%0A%20%20%20%20%20%20-%20%5Bblst%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Fblst.rs)%0A%20%20%20%20%20%20-%20%5Bfake_crypto%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Ffake_crypto.rs)%0A%20%20%20%20%20%20-%20%5Bmilagro%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Fmilagro.rs)%3A%20support%20for%20%5BApache%20Milagro%5D(https%3A%2F%2Fmilagro.apache.org%2Fdocs%2Fmilagro-intro%2F)%0A%20%20-%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Feth2_keystore)%20(rust)%3A%20Provides%20a%20JSON%20keystore%20for%20a%20BLS%20keypair%2C%20as%20specified%20by%20%5BEIP-2335%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-2335).%0A%20%20-%20%5Bbsc%20bls12381%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcrypto%2Fbls12381)%20(go)%0A%20%20-%20%5Bblst%5D(https%3A%2F%2Fgithub.com%2Fsupranational%2Fblst)%3A%20blst%20(pronounced%20'blast')%20is%20a%20BLS12-381%20signature%20library%20focused%20on%20performance%20and%20security.%20It%20is%20written%20in%20C%20and%20assembly.%0A-%20%5Bbn256%5D(https%3A%2F%2Fcryptojedi.org%2Fpapers%2Fdclxvi-20100714.pdf)%0A%20%20-%20%5Bethereum-go-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fbn256)%20(go)%0A%20%20-%20%5Bbsc%20bn256%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcrypto%2Fbn256)%20(go)%0A-%20%5Becdsa%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FElliptic_Curve_Digital_Signature_Algorithm)%0A%20%20-%20%5Bbsc%20crypto%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fcrypto%2Fcrypto.go%23L169)%20(go)%3A%20toECDSA%20creates%20a%20private%20key%20with%20the%20given%20D%20value.%20The%20strict%20parameter%20controls%20whether%20the%20key's%20length%20should%20be%20enforced%20at%20the%20curve%20size%20or%20it%20can%20also%20accept%20legacy%20encodings%20(0%20prefixes).%0A%20%20-%20%5Bparitytech%20ecdsa%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fprimitives%2Fapplication-crypto%2Fsrc%2Fecdsa.rs)%20(rust)%0A%20%20-%20%5Bcosmos-sdk%20ecdsa%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Finternal%2Fecdsa)%0A-%20%5Bed25519%5D(https%3A%2F%2Fed25519.cr.yp.to%2Fed25519-20110926.pdf)%20%5Bgolang%5D(https%3A%2F%2Fpkg.go.dev%2Fgolang.org%2Fx%2Fcrypto%2Fed25519)%0A%20%20-%20%5Btendermint%20ed25519%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fed25519)%20(go)%3A%20GenPrivKey%20generates%20a%20new%20ed25519%20private%20key.%20It%20uses%20OS%20randomness%20in%20conjunction%20with%20the%20current%20global%20random%20seed%20in%20tendermint%2Flibs%2Fcommon%20to%20generate%20the%20private%20key.%0A%20%20-%20%5Bparitytech%20ed25519%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fprimitives%2Fapplication-crypto%2Fsrc%2Fed25519.rs)%20(rust)%0A%20%20-%20%5BEd25519%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FEdDSA)%3A%20%5BEd25519.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FEd25519.sol)%0A%20%20-%20%5Bcosmos-sdk%20ed25519%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Fed25519)%0A-%20%5Bsecp256k1%5D(https%3A%2F%2Fwww.secg.org%2Fsec2-v2.pdf)%0A%20%20-%20%5Bethereum-go-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fsecp256k1)%20(go)%0A%20%20-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fcrypto%2Fecdsa)%20(go)%0A%20%20-%20%5Bbsc%20secp256k1%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcrypto%2Fsecp256k1)%0A%20%20-%20%5Btendermint%20secp256k1%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fsecp256k1)%20(go)%3A%20GenPrivKeySecp256k1%20hashes%20the%20secret%20with%20SHA2%2C%20and%20uses%20that%2032%20byte%20output%20to%20create%20the%20private%20key.%0A%20%20-%20%5Bcosmos-sdk%20secp256k1%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Fsecp256k1)%0A%20%20-%20%5Bsnowbridge%20secp256k1%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Fcrypto%2Fsecp256k1)%0A-%20%5Bsecp256r1%5D(https%3A%2F%2Fwww.secg.org%2Fsec2-v2.pdf)%0A%20%20-%20%5Bcosmos-sdk%20secp256r1%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Fsecp256r1)%0A-%20%5Bsr25519%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-cryptography%23what-is-sr25519-and-where-did-it-come-from)%3A%20schnorr%20over%20ristretto25519%0A%20%20-%20%5Bchainsafe%20go-schnorrkel%5D(https%3A%2F%2Fgithub.com%2FChainSafe%2Fgo-schnorrkel)%20(go)%3A%20This%20repo%20contains%20the%20Go%20implementation%20of%20the%20sr25519%20signature%20algorithm%20(schnorr%20over%20ristretto25519).%20The%20existing%20Rust%20implementation%20is%20here.%0A%20%20-%20%5Bparitytech%20substrate-bip39%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate-bip39)%20(rust)%3A%20his%20is%20a%20crate%20for%20deriving%20secret%20keys%20for%20Ristretto%20compressed%20Ed25519%20(should%20be%20compatible%20with%20Ed25519%20at%20this%20time)%20from%20BIP39%20phrases.%0A%20%20-%20%5Bparitytech%20sr25519%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fprimitives%2Fapplication-crypto%2Fsrc%2Fsr25519.rs)%20rust%0A%20%20-%20%5Btendermint%20sr25519%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fsr25519)%20(go)%3A%20GenPrivKeyFromSecret%20hashes%20the%20secret%20with%20SHA2%2C%20and%20uses%20that%2032%20byte%20output%20to%20create%20the%20private%20key.%0A%20%20-%20%5Bsnowbridge%20sr25519%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Fcrypto%2Fsecp256k1)%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./signatures-DIx2xvSD.js"),[]),path:"/research/primitives/signatures.html",type:"mdx",filePath:"research/primitives/signatures.mdx",content:"%23%20Signature%20Schemes%20in%20Consensus%20Protocols%0A%0A-%20date%3A%202023-02-05%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0ABoth%20sides%20of%20the%20bridge%20need%20to%20verify%20what%20happened%20on%20the%20other%20side.%20To%20do%20that%2C%20the%20verification%20logic%20is%20often%20encapsulated%20inside%20a%20light%20client%2C%20manifested%20as%20a%20smart%20contract%20on%20the%20chain%20which%20the%20verification%20needs%20to%20be%20executed.%20The%20light%20client%20needs%20to%20follow%20consensus%20and%20signature%20verification%20mechanisms%20based%20on%20the%20signing%20algorithm%20and%20the%20elliptical%20curve%20used%20on%20the%20other%20side.%20For%20example%2C%20if%20chain%20A%20has%2021%20validators%20signing%20each%20block%20using%20ECDSA%20algorithm%20on%20secp256k1%20curves%2C%20then%20chain%20A's%20light%20client%2C%20executed%20on%20chain%20B%2C%20must%20extract%20the%20signatures%20from%20the%20block%20headers%20presented%20to%20the%20light%20client%2C%20and%20follow%20the%20ECDSA%20signature%20verification%20algorithm%20to%20verify%20the%20content%20of%20the%20block%20header%20indeeds%20produces%20the%2021%20signatures%20contained%20in%20the%20block%20header%2C%20given%20the%20public%20keys%20of%20the%2021%20validators.%0A%0AHere%2C%20we%20present%20a%20reference%20table%20for%20these%20signature%20schemes%20and%20how%20they%20are%20used%20in%20the%20consensus%20protocols%20of%20different%20blockchains.%20We%20limit%20our%20initial%20scope%20to%20Ethereum%2C%20Polygon%2C%20Avalanche%2C%20BSC%2C%20Harmony%2C%20Cosmos%2C%20and%20Polkadot%20only%20(and%20their%20undelying%20technologies).%20Note%20that%20we%20are%20only%20looking%20at%20how%20signatures%20are%20used%20in%20consensus%2C%20not%20elsewhere%20in%20the%20blockchain%20stack%2C%20as%20all%20these%20protocols%20use%20ECDSA%20on%20secp256k1%20for%20accounts%20in%20EVM%20interactions.%0A%0A%7C%20Algorithm%20%7C%20Curve%20%20%20%20%20%20%7C%20Protocol%20%20%7C%20Codeotesecp256k1%20%20%7C%20Polygon%20%20%20%7C%20%5Blib%5D(https%3A%2F%2Fgithub.com%2Fmaticnetwork%2Ftendermint%2Ftree%2Fpeppermint%2Fcrypto%2Fsecp256kodified%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2Fpos%2Fpeppermint)%20Tendermint%20validator%20signature%20schemelib%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcrypto%2Fsecp256k1)%20%5Busage%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fcb9e50bdf62c6b46a71724066d39f9851181a5af%2Fconsensus%2Fparlia%2Fparlia.go%23L546)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Derived%20from%20%5BClique%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-225)%2C%20then%20%5Bimproved%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2FBEPs%2Fpull%2F131)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20BLS%20%20%20%20%20%20%20%7C%20BN254%20%20%20%20%20%20%7C%20Ethereum%20%20%7C%20%5BEVM%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Fblob%2Fb946b7a13b749c99979e312c83dce34cac8dd7b1%2Fcore%2Fvm%2Fcontracts.go%23L420)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Added%20by%20%5BEIP-196%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-196)%2C%5B197%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-197)%3B%20Mainly%20for%20use%20in%20smart%20contracts%2C%20such%20as%20zk-snark%20verification.%20See%20%5Bexplainer%5D(https%3A%2F%2Fhackmd.io%2F%40liangcc%2Fbls-solidity%23BLS-Signatures-in-Solidity)%20%7C%0A%7C%20%20%20%20%20%20%20%20%20%20%20%7C%20BLS12-381%20%20%7C%20Ethereum%20%20%7C%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fcrypto%2Fbls)%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20See%20%5BPoS%20design%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fconsensus-mechanisms%2Fpos%2Fkeys%2F)%20and%20%5Bexplainer%5D(https%3A%2F%2Fhackmd.io%2F%40benjaminion%2Fbls12-381)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Harmony%20%20%20%7C%20%5Blib%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fbls%2Ftree%2Fmaster%2Fffi%2Fgo%2Fbls)%20%5Busage%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Ftree%2Fmain%2Fcrypto%2Fbls)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20See%20%5Bdesign%5D(https%3A%2F%2Fdocs.harmony.one%2Fhome%2Fdevelopers%2Fharmony-specifics%2Fharmony-stack%23signatures-and-cryptography)%20and%20%5Bprotocol%20review%5D(https%3A%2F%2Fmedium.com%2Fharmony-one%2F2022-harmony-technical-review-88462efba368)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20RSA%20%20%20%20%20%20%20%7C%20N%2FA%20%20%20%20%20%20%20%20%7C%20Avalanche%20%7C%20%5Bverification%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2F51c5edd85ccc7927443b945b427e64d91ff99f67%2Fvms%2Fproposervm%2Fblock%2Fblock.go%23L119)%20%5Bgeneration%5D(https%3A%2F%2Fgithub.com%2Fava-labs%2Favalanchego%2Fblob%2F51c5edd85ccc7927443b945b427e64d91ff99f67%2Fstaking%2Ftls.go%23L121)%20%7C%20Uses%20X.509%20certificate%20which%20potentially%20allows%20many%20algorithms%3B%20Moving%20towards%20BLS12-381%20and%20added%20implementations%20recently%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20EdDSA%20%20%20%20%20%7C%20Curve25519%20%7C%20IBC%20%20%20%20%20%20%20%7C%20%5Blib%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fed25519)%20%5Busage%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Fblob%2Fmain%2Fspec%2Fcore%2Fencoding.md%23public-key-cryptography)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Used%20by%20all%20chains%20in%20Cosmos%20network%2C%20including%20%5BCosmos%20Hub%5D(https%3A%2F%2Fhub.cosmos.network%2Fmain%2Fvalidators%2Foverview.html)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20Schnorr%20%20%20%7C%20Curve25519%20%7C%20Substrate%20%7C%20%5Blib%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fprimitives%2Fapplication-crypto%2Fsrc%2Fsr25519.rs)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20See%20also%20brief%20%5Bintro%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-cryptography%23what-is-sr25519-and-where-did-it-come-from)%20from%20Polkadot%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%0A%23%23%20Resources%0A%0A%23%23%23%20Algorithms%0A%0A%23%23%23%23%20ECDSA%0A%0A-%20%5BWikipedia%5D(https%3A%2F%2Fwww.wikiwand.com%2Fen%2FElliptic_Curve_Digital_Signature_Algorithm)%0A-%20Standard%3A%20%5BSEC%202%3A%20Recommended%20Elliptic%20Curve%20Domain%20Parameters%5D(https%3A%2F%2Fwww.secg.org%2Fsec2-v2.pdf)%0A%0A%23%23%23%23%20BLS%0A%0A-%20%5BWikipedia%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBLS_digital_signature)%0A-%20Paper%3A%20%5BShort%20Signatures%20from%20the%20Weil%20Pairing%5D(https%3A%2F%2Fwww.iacr.org%2Farchive%2Fasiacrypt2001%2F22480516.pdf)%0A-%20Tutorial%3A%20%5BBLS%20signatures%3A%20better%20than%20Schnorr%5D(https%3A%2F%2Fmedium.com%2Fcryptoadvance%2Fbls-signatures-better-than-schnorr-5a7fe30ea716)%0A-%20Analysis%3A%20%5BSecret%20Sharing%20and%20Threshold%20Signatures%20with%20BLS%5D(https%3A%2F%2Fwww.dash.org%2Fblog%2Fsecret-sharing-and-threshold-signatures-with-bls%2F)%0A-%20Deep%20dive%3A%20%5BBLS%20Signatures%20in%20Solidity%5D(https%3A%2F%2Fhackmd.io%2F%40liangcc%2Fbls-solidity)%0A%0A%23%23%23%23%20EdDSA%0A%0A-%20%5BWikipedia%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FEdDSA)%0A-%20%5BGoLang%5D(https%3A%2F%2Fpkg.go.dev%2Fgolang.org%2Fx%2Fcrypto%2Fed25519)%0A%0A%23%23%23%20Curves%0A%0A-%20%5BCurve%20database%5D(https%3A%2F%2Fneuromancer.sk%2Fstd%2F)%0A%0A%23%23%23%23%20secp256k1%0A%0A-%20%5BBitcoin%20Wiki%5D(https%3A%2F%2Fen.bitcoin.it%2Fwiki%2FSecp256k1)%0A-%20Tutorial%3A%20%5BA%20Bluffer%E2%80%99s%20Guide%20to%20secp256k1%5D(https%3A%2F%2Fmedium.com%2Fasecuritysite-when-bob-met-alice%2Fa-bluffers-guide-to-secp256k1-404e423e612)%0A%0A%23%23%23%23%20BLS12-381%0A%0A-%20Deep%20dive%3A%20%5BBLS12-381%20For%20The%20Rest%20Of%20Us%5D(https%3A%2F%2Fhackmd.io%2F%40benjaminion%2Fbls12-381)%0A-%20Intro%3A%20%5BBLS12-381%3A%20New%20zk-SNARK%20Elliptic%20Curve%20Construction%5D(https%3A%2F%2Felectriccoin.co%2Fblog%2Fnew-snark-curve%2F)%0A-%20Paper%3A%20%5BFast%20and%20simple%20constant-time%20hashing%20to%20the%20BLS12-381%20elliptic%20curve%5D(https%3A%2F%2Ftches.iacr.org%2Findex.php%2FTCHES%2Farticle%2Fview%2F8348%2F7697)%0A-%20Benchmark%3A%20%5BBLS%3A%20Is%20it%20really%20that%20slow%5D(https%3A%2F%2Fwww.dash.org%2Fblog%2Fbls-is-it-really-that-slow%2F)%0A-%20EIP%3A%20%5BEIP-2537%3A%20Precompile%20for%20BLS12-381%20curve%20operations%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-2537)%0A-%20EVM%20launch%3A%20%5BTargeting%20Shanghai%20upgrade%20May%202023%5D(https%3A%2F%2Fethereum-magicians.org%2Ft%2Feip-2537-bls12-precompile-discussion-thread%2F4187%2F16)%0A%0A%23%23%23%23%20BN254%0A%0A-%20%5BDefinition%5D(https%3A%2F%2Fneuromancer.sk%2Fstd%2Fbn%2Fbn254)%0A-%20Paper%3A%20%5BPairing-Friendly%20Elliptic%20Curves%20of%20Prime%20Order%5D(https%3A%2F%2Feprint.iacr.org%2F2005%2F133.pdf)%0A-%20Deep%20Dive%3A%20%5BBLS%20Signatures%20in%20Solidity%5D(https%3A%2F%2Fhackmd.io%2F%40liangcc%2Fbls-solidity)%0A-%20Speed%20Optimization%3A%20%5BNew%20software%20speed%20records%20for%20cryptographic%20pairings%5D(https%3A%2F%2Fcryptojedi.org%2Fpapers%2Fdclxvi-20100714.pdf)%0A%0A%23%23%23%20Usage%20in%20ZKP%0A%0A-%20%5BA%20survey%20of%20elliptic%20curves%20for%20proof%20systems%5D(https%3A%2F%2Feprint.iacr.org%2F2022%2F586.pdf)%0A%0A%23%23%23%20Signing%20Implementations%0A%0AThe%20%5BStandard%20Curve%20Database%5D(https%3A%2F%2Fneuromancer.sk%2Fstd%2F)%20is%20a%20good%20starting%20point%20for%20existing%20signing%20algorithms.%20Base%20implementations%20such%20as%20%5Bgolang%20crypto%5D(https%3A%2F%2Fpkg.go.dev%2Fgolang.org%2Fx%2Fcrypto)%20and%20%5Brust%20crypto%5D(https%3A%2F%2Fdocs.rs%2Frust-crypto%2Flatest%2Fcrypto%2F)%20provide%20good%20reference%20codebases.%0A%0A-%20%5Bbcrypt%5D(https%3A%2F%2Fwww.usenix.org%2Flegacy%2Fevent%2Fusenix99%2Fprovos%2Fprovos.pdf)%0A%20%20-%20%5Bcosmos-sdk%20bcrypt%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Fbcrypt)%0A-%20%5Bbip-0039%5D(https%3A%2F%2Fgithub.com%2Fbitcoin%2Fbips%2Fblob%2Fmaster%2Fbip-0039.mediawiki)%0A%20%20-%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Feth2_wallet)%20(rust)%0A-%20%5Bbls%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBLS_digital_signature)%0A%20%20-%20%5Bethereum-prysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fcrypto%2Fbls)%0A-%20%5Bbls-12-381%5D(https%3A%2F%2Fhackmd.io%2F%40benjaminion%2Fbls12-381)%0A%20%20-%20%5Bethereum%20EIP-2537%3A%20Precompile%20for%20BLS12-381%20curve%20operations%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-2537)%0A%20%20-%20%5Bethereum-go-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fbls12381)%20(go)%0A%20%20-%20%5Bharmony%20bls%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fharmony%2Fblob%2Fmain%2Fcrypto%2Fbls%2Fbls.go)%20(go)%3A%20uses%20%5Bharmony%20bls%20repository%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fbls%2Fblob%2Fmaster%2Freadme.mdx)%0A%20%20%20%20-%20%5Bbls%20Harmony%5D(https%3A%2F%2Fgithub.com%2Fharmony-one%2Fbls)%20forked%20from%20%5Bherumi%2Fbls%5C_%5D(https%3A%2F%2Fgithub.com%2Fherumi%2Fbls_)%3A%20written%20in%20C%2B%2B%2C%20supports%20Go%2C%20Rust%2C%20WebAssembly%20(Node.js)%0A%20%20-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fcrypto%2Fbls)%20(go)%0A%20%20-%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls)%20(rust)%3A%20provides%20a%20wrapper%20around%20several%20BLS%20implementations%20to%20provide%20Lighthouse-specific%20functionality.%0A%20%20-%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Feth2_key_derivation)%20(rust)%3A%20Provides%20path-based%20hierarchical%20BLS%20key%20derivation%2C%20as%20specified%20by%20%5BEIP-2333%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-2333).%0A%20%20%20%20-%20%5BAurora%20Rainbow%20Bridge%20Implementation%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls)%3A%20Implementations%0A%20%20%20%20%20%20-%20%5Bblst%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Fblst.rs)%0A%20%20%20%20%20%20-%20%5Bfake_crypto%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Ffake_crypto.rs)%0A%20%20%20%20%20%20-%20%5Bmilagro%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Flighthouse%2Fblob%2Fstable%2Fcrypto%2Fbls%2Fsrc%2Fimpls%2Fmilagro.rs)%3A%20support%20for%20%5BApache%20Milagro%5D(https%3A%2F%2Fmilagro.apache.org%2Fdocs%2Fmilagro-intro%2F)%0A%20%20-%20%5Blighthouse%5D(https%3A%2F%2Fgithub.com%2Fsigp%2Flighthouse%2Ftree%2Fstable%2Fcrypto%2Feth2_keystore)%20(rust)%3A%20Provides%20a%20JSON%20keystore%20for%20a%20BLS%20keypair%2C%20as%20specified%20by%20%5BEIP-2335%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-2335).%0A%20%20-%20%5Bbsc%20bls12381%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcrypto%2Fbls12381)%20(go)%0A%20%20-%20%5Bblst%5D(https%3A%2F%2Fgithub.com%2Fsupranational%2Fblst)%3A%20blst%20(pronounced%20'blast')%20is%20a%20BLS12-381%20signature%20library%20focused%20on%20performance%20and%20security.%20It%20is%20written%20in%20C%20and%20assembly.%0A-%20%5Bbn256%5D(https%3A%2F%2Fcryptojedi.org%2Fpapers%2Fdclxvi-20100714.pdf)%0A%20%20-%20%5Bethereum-go-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fbn256)%20(go)%0A%20%20-%20%5Bbsc%20bn256%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcrypto%2Fbn256)%20(go)%0A-%20%5Becdsa%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FElliptic_Curve_Digital_Signature_Algorithm)%0A%20%20-%20%5Bbsc%20crypto%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Fblob%2Fmaster%2Fcrypto%2Fcrypto.go%23L169)%20(go)%3A%20toECDSA%20creates%20a%20private%20key%20with%20the%20given%20D%20value.%20The%20strict%20parameter%20controls%20whether%20the%20key's%20length%20should%20be%20enforced%20at%20the%20curve%20size%20or%20it%20can%20also%20accept%20legacy%20encodings%20(0%20prefixes).%0A%20%20-%20%5Bparitytech%20ecdsa%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fprimitives%2Fapplication-crypto%2Fsrc%2Fecdsa.rs)%20(rust)%0A%20%20-%20%5Bcosmos-sdk%20ecdsa%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Finternal%2Fecdsa)%0A-%20%5Bed25519%5D(https%3A%2F%2Fed25519.cr.yp.to%2Fed25519-20110926.pdf)%20%5Bgolang%5D(https%3A%2F%2Fpkg.go.dev%2Fgolang.org%2Fx%2Fcrypto%2Fed25519)%0A%20%20-%20%5Btendermint%20ed25519%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fed25519)%20(go)%3A%20GenPrivKey%20generates%20a%20new%20ed25519%20private%20key.%20It%20uses%20OS%20randomness%20in%20conjunction%20with%20the%20current%20global%20random%20seed%20in%20tendermint%2Flibs%2Fcommon%20to%20generate%20the%20private%20key.%0A%20%20-%20%5Bparitytech%20ed25519%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fprimitives%2Fapplication-crypto%2Fsrc%2Fed25519.rs)%20(rust)%0A%20%20-%20%5BEd25519%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FEdDSA)%3A%20%5BEd25519.sol%5D(https%3A%2F%2Fgithub.com%2Faurora-is-near%2Frainbow-bridge%2Fblob%2Fmaster%2Fcontracts%2Feth%2Fnearbridge%2Fcontracts%2FEd25519.sol)%0A%20%20-%20%5Bcosmos-sdk%20ed25519%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Fed25519)%0A-%20%5Bsecp256k1%5D(https%3A%2F%2Fwww.secg.org%2Fsec2-v2.pdf)%0A%20%20-%20%5Bethereum-go-ethereum%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fgo-ethereum%2Ftree%2Fmaster%2Fcrypto%2Fsecp256k1)%20(go)%0A%20%20-%20%5Bprysm%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Ftree%2Fdevelop%2Fcrypto%2Fecdsa)%20(go)%0A%20%20-%20%5Bbsc%20secp256k1%5D(https%3A%2F%2Fgithub.com%2Fbnb-chain%2Fbsc%2Ftree%2Fmaster%2Fcrypto%2Fsecp256k1)%0A%20%20-%20%5Btendermint%20secp256k1%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fsecp256k1)%20(go)%3A%20GenPrivKeySecp256k1%20hashes%20the%20secret%20with%20SHA2%2C%20and%20uses%20that%2032%20byte%20output%20to%20create%20the%20private%20key.%0A%20%20-%20%5Bcosmos-sdk%20secp256k1%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Fsecp256k1)%0A%20%20-%20%5Bsnowbridge%20secp256k1%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Fcrypto%2Fsecp256k1)%0A-%20%5Bsecp256r1%5D(https%3A%2F%2Fwww.secg.org%2Fsec2-v2.pdf)%0A%20%20-%20%5Bcosmos-sdk%20secp256r1%5D(https%3A%2F%2Fgithub.com%2Fcosmos%2Fcosmos-sdk%2Ftree%2Fmain%2Fcrypto%2Fkeys%2Fsecp256r1)%0A-%20%5Bsr25519%5D(https%3A%2F%2Fwiki.polkadot.network%2Fdocs%2Flearn-cryptography%23what-is-sr25519-and-where-did-it-come-from)%3A%20schnorr%20over%20ristretto25519%0A%20%20-%20%5Bchainsafe%20go-schnorrkel%5D(https%3A%2F%2Fgithub.com%2FChainSafe%2Fgo-schnorrkel)%20(go)%3A%20This%20repo%20contains%20the%20Go%20implementation%20of%20the%20sr25519%20signature%20algorithm%20(schnorr%20over%20ristretto25519).%20The%20existing%20Rust%20implementation%20is%20here.%0A%20%20-%20%5Bparitytech%20substrate-bip39%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate-bip39)%20(rust)%3A%20his%20is%20a%20crate%20for%20deriving%20secret%20keys%20for%20Ristretto%20compressed%20Ed25519%20(should%20be%20compatible%20with%20Ed25519%20at%20this%20time)%20from%20BIP39%20phrases.%0A%20%20-%20%5Bparitytech%20sr25519%5D(https%3A%2F%2Fgithub.com%2Fparitytech%2Fsubstrate%2Fblob%2Fmaster%2Fprimitives%2Fapplication-crypto%2Fsrc%2Fsr25519.rs)%20rust%0A%20%20-%20%5Btendermint%20sr25519%5D(https%3A%2F%2Fgithub.com%2Ftendermint%2Ftendermint%2Ftree%2Fmain%2Fcrypto%2Fsr25519)%20(go)%3A%20GenPrivKeyFromSecret%20hashes%20the%20secret%20with%20SHA2%2C%20and%20uses%20that%2032%20byte%20output%20to%20create%20the%20private%20key.%0A%20%20-%20%5Bsnowbridge%20sr25519%5D(https%3A%2F%2Fgithub.com%2FSnowfork%2Fsnowbridge%2Ftree%2Fmain%2Frelayer%2Fcrypto%2Fsecp256k1)%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./weak-subjectivity-olN3Pm3D.js"),[]),path:"/research/primitives/weak-subjectivity",type:"mdx",filePath:"research/primitives/weak-subjectivity.mdx",content:"%23%20Weak%20Subjectivity%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AFollowing%20is%20an%20excerpt%20from%20_Analysis%20on%20Weak%20Subjectivity%20in%20Ethereum%202.0_%20%5B%5E1%5D%20.%0A%0A%3E%20Weak%20subjectivity%20%5B%5E2%5D%20is%20a%20social-consensus-driven%20approach%20for%20solving%20the%20fun-%20damental%20%E2%80%9Cnothing-at-stake%E2%80%9D%20problem%20of%20proof-of-stake%20protocols.%20In%20particular%2C%20it%20addresses%20the%20problem%20in%20the%20presence%20of%20long-range%20forks%2C%20while%20the%20slash-%20ing%20mechanism%20handles%20the%20case%20of%20short-range%20forks.%20Specifically%2C%20the%20current%20weak%20subjectivity%20mechanism%20deals%20with%20the%20following%20two%20types%20of%20long-range%20attacks%20%5B%5E3%5D%0A%3E%0A%3E%20%E2%80%93%20_Exploiting%20retired%20validators%3A_%20Adversaries%20can%20create%20and%20reveal%20a%20new%20chain%20branching%20from%20a%20certain%20block%20on%20the%20canonical%20chain%2C%20after%202%2F3%20of%20validators%20who%20were%20active%20for%20the%20block%20have%20exited.%20Note%20that%20such%20validators%20can%20still%20justify%20and%20finalize%20conflicting%20blocks%20at%20earlier%20slots%20without%20being%20slashed%20after%20they%20have%20exited.%0A%3E%0A%3E%20%E2%80%93%20_Exploiting%20diverging%20validator%20sets%3A_%20Adversaries%20can%20build%20a%20new%20chain%20until%20the%20validator%20set%20for%20the%20new%20chain%20is%20sufficiently%20different%20from%20that%20of%20the%20canonical%20chain.%20The%20larger%20the%20difference%20between%20the%20two%20validator%20sets%2C%20the%20lower%20the%20accountable%20safety%20tolerance.%20For%20example%2C%20if%20the%20intersection%20of%20the%20two%20sets%20is%20smaller%20than%202%2F3%20of%20each%20set%2C%20then%20it%20is%20possible%20to%20have%20conflicting%20blocks%20to%20be%20finalized%20without%20any%20validators%20violating%20the%20slashing%20conditions.%0A%3E%0A%3E%20_It%20is%20unknown%20whether%20this%20mechanism%20can%20deal%20with%20other%20types%20of%20long-range%20attacks%2C%20if%20any%2C%20in%20general._%0A%3E%0A%3E%20The%20current%20weak%20subjectivity%20mechanism%20employs%20a%20social%20consensus%20layer%20in%20parallel%20to%20maintain%20sufficiently%20many%20checkpoints%20(called%20weak%20subjectivity%20check-%20points)%20so%20that%20there%20exist%20no%20conflicting%20finalized%20blocks%20that%20are%20descendants%20of%20the%20latest%20weak%20subjectivity%20checkpoint.%20In%20other%20words%2C%20the%20purpose%20of%20the%20latest%20weak%20subjectivity%20checkpoints%20is%20to%20deterministically%20identify%20the%20unique%20canonical%20chain%20even%20in%20the%20presence%20of%20conflicting%20finalized%20blocks%20caused%20by%20the%20long-range%20attacks.%0A%0A%23%23%20References%0A%0AArticles%20and%20guides%0A%0A-%20%5BWeak%20Subjectivity%20in%20Eth2.0%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40adiasg%2Fweak-subjectvity-eth2)%3A%20This%20document%20is%20aimed%20for%20Eth2.0%20client%20teams%20to%20understand%20weak%20subjectivity%20periods%20and%20their%20implication.%0A%0A-%20%5BPhase%200%20--%20Weak%20Subjectivity%20Guide%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fmaster%2Fspecs%2Fphase0%2Fweak-subjectivity.mdx)%3A%20This%20document%20is%20a%20guide%20for%20implementing%20the%20Weak%20Subjectivity%20protections%20in%20Phase%200.%0A%0ADocumentation%0A%0A-%20%5BEthereum%20Docs%3A%20WEAK%20SUBJECTIVITY%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fconsensus-mechanisms%2Fpos%2Fweak-subjectivity%2F)%3A%20This%20refers%20to%20a%20chain%20that%20can%20progress%20objectively%20after%20some%20initial%20seed%20of%20information%20is%20retrieved%20socially.%0A%0A-%20%5BTeku%20Docs%3A%20Weak%20Subjectivity%5D(https%3A%2F%2Fdocs.teku.consensys.net%2FConcepts%2FWeak-Subjectivity%2F)%3A%20The%20weak%20subjectivity%20period%20refers%20to%20how%20far%20behind%20the%20chain%20head%20a%20node%20can%20be%20before%201%2F3%20of%20validators%20may%20have%20exited%20since%20the%20node%20was%20last%20in%20sync.%0A%0AImplementations%0A%0A-%20%5BPrysm%3A%20weak_subjectivity_checks.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fblockchain%2Fweak_subjectivity_checks.go)%0A%20%20-%20%5BNewWeakSubjectivityVerifier%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fblockchain%2Fweak_subjectivity_checks.go%23L31)%20validates%20a%20checkpoint%2C%20and%20if%20valid%2C%20uses%20it%20to%20initialize%20a%20weak%20subjectivity%20verifier.%0A%20%20-%20%5BVerifyWeakSubjectivity%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fblockchain%2Fweak_subjectivity_checks.go%23L52)%20verifies%20the%20weak%20subjectivity%20root%20in%20the%20service%20struct.%0A%0AFootnotes%0A%5B%5E1%5D%3A%20%5BAnalysis%20on%20Weak%20Subjectivity%20in%20Ethereum%202.0%5D(https%3A%2F%2Fgithub.com%2Fruntimeverification%2Fbeacon-chain-verification%2Fblob%2Fmaster%2Fweak-subjectivity%2Fweak-subjectivity-analysis.pdf)%3A%0A%0A%5B%5E2%5D%3A%20%5BProof%20of%20Stake%3A%20How%20I%20Learned%20to%20Love%20Weak%20Subjectivity%5D(https%3A%2F%2Fblog.ethereum.org%2F2014%2F11%2F25%2Fproof-stake-learned-love-weak-subjectivity)%3A%0A%0A%5B%5E3%5D%3A%20It%20is%20unknown%20whether%20this%20mechanism%20can%20deal%20with%20other%20types%20of%20long-range%20attacks%2C%20if%20any%2C%20in%20general%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./weak-subjectivity-olN3Pm3D.js"),[]),path:"/research/primitives/weak-subjectivity.html",type:"mdx",filePath:"research/primitives/weak-subjectivity.mdx",content:"%23%20Weak%20Subjectivity%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AFollowing%20is%20an%20excerpt%20from%20_Analysis%20on%20Weak%20Subjectivity%20in%20Ethereum%202.0_%20%5B%5E1%5D%20.%0A%0A%3E%20Weak%20subjectivity%20%5B%5E2%5D%20is%20a%20social-consensus-driven%20approach%20for%20solving%20the%20fun-%20damental%20%E2%80%9Cnothing-at-stake%E2%80%9D%20problem%20of%20proof-of-stake%20protocols.%20In%20particular%2C%20it%20addresses%20the%20problem%20in%20the%20presence%20of%20long-range%20forks%2C%20while%20the%20slash-%20ing%20mechanism%20handles%20the%20case%20of%20short-range%20forks.%20Specifically%2C%20the%20current%20weak%20subjectivity%20mechanism%20deals%20with%20the%20following%20two%20types%20of%20long-range%20attacks%20%5B%5E3%5D%0A%3E%0A%3E%20%E2%80%93%20_Exploiting%20retired%20validators%3A_%20Adversaries%20can%20create%20and%20reveal%20a%20new%20chain%20branching%20from%20a%20certain%20block%20on%20the%20canonical%20chain%2C%20after%202%2F3%20of%20validators%20who%20were%20active%20for%20the%20block%20have%20exited.%20Note%20that%20such%20validators%20can%20still%20justify%20and%20finalize%20conflicting%20blocks%20at%20earlier%20slots%20without%20being%20slashed%20after%20they%20have%20exited.%0A%3E%0A%3E%20%E2%80%93%20_Exploiting%20diverging%20validator%20sets%3A_%20Adversaries%20can%20build%20a%20new%20chain%20until%20the%20validator%20set%20for%20the%20new%20chain%20is%20sufficiently%20different%20from%20that%20of%20the%20canonical%20chain.%20The%20larger%20the%20difference%20between%20the%20two%20validator%20sets%2C%20the%20lower%20the%20accountable%20safety%20tolerance.%20For%20example%2C%20if%20the%20intersection%20of%20the%20two%20sets%20is%20smaller%20than%202%2F3%20of%20each%20set%2C%20then%20it%20is%20possible%20to%20have%20conflicting%20blocks%20to%20be%20finalized%20without%20any%20validators%20violating%20the%20slashing%20conditions.%0A%3E%0A%3E%20_It%20is%20unknown%20whether%20this%20mechanism%20can%20deal%20with%20other%20types%20of%20long-range%20attacks%2C%20if%20any%2C%20in%20general._%0A%3E%0A%3E%20The%20current%20weak%20subjectivity%20mechanism%20employs%20a%20social%20consensus%20layer%20in%20parallel%20to%20maintain%20sufficiently%20many%20checkpoints%20(called%20weak%20subjectivity%20check-%20points)%20so%20that%20there%20exist%20no%20conflicting%20finalized%20blocks%20that%20are%20descendants%20of%20the%20latest%20weak%20subjectivity%20checkpoint.%20In%20other%20words%2C%20the%20purpose%20of%20the%20latest%20weak%20subjectivity%20checkpoints%20is%20to%20deterministically%20identify%20the%20unique%20canonical%20chain%20even%20in%20the%20presence%20of%20conflicting%20finalized%20blocks%20caused%20by%20the%20long-range%20attacks.%0A%0A%23%23%20References%0A%0AArticles%20and%20guides%0A%0A-%20%5BWeak%20Subjectivity%20in%20Eth2.0%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40adiasg%2Fweak-subjectvity-eth2)%3A%20This%20document%20is%20aimed%20for%20Eth2.0%20client%20teams%20to%20understand%20weak%20subjectivity%20periods%20and%20their%20implication.%0A%0A-%20%5BPhase%200%20--%20Weak%20Subjectivity%20Guide%5D(https%3A%2F%2Fgithub.com%2Fethereum%2Fconsensus-specs%2Fblob%2Fmaster%2Fspecs%2Fphase0%2Fweak-subjectivity.mdx)%3A%20This%20document%20is%20a%20guide%20for%20implementing%20the%20Weak%20Subjectivity%20protections%20in%20Phase%200.%0A%0ADocumentation%0A%0A-%20%5BEthereum%20Docs%3A%20WEAK%20SUBJECTIVITY%5D(https%3A%2F%2Fethereum.org%2Fen%2Fdevelopers%2Fdocs%2Fconsensus-mechanisms%2Fpos%2Fweak-subjectivity%2F)%3A%20This%20refers%20to%20a%20chain%20that%20can%20progress%20objectively%20after%20some%20initial%20seed%20of%20information%20is%20retrieved%20socially.%0A%0A-%20%5BTeku%20Docs%3A%20Weak%20Subjectivity%5D(https%3A%2F%2Fdocs.teku.consensys.net%2FConcepts%2FWeak-Subjectivity%2F)%3A%20The%20weak%20subjectivity%20period%20refers%20to%20how%20far%20behind%20the%20chain%20head%20a%20node%20can%20be%20before%201%2F3%20of%20validators%20may%20have%20exited%20since%20the%20node%20was%20last%20in%20sync.%0A%0AImplementations%0A%0A-%20%5BPrysm%3A%20weak_subjectivity_checks.go%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fblockchain%2Fweak_subjectivity_checks.go)%0A%20%20-%20%5BNewWeakSubjectivityVerifier%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fblockchain%2Fweak_subjectivity_checks.go%23L31)%20validates%20a%20checkpoint%2C%20and%20if%20valid%2C%20uses%20it%20to%20initialize%20a%20weak%20subjectivity%20verifier.%0A%20%20-%20%5BVerifyWeakSubjectivity%5D(https%3A%2F%2Fgithub.com%2Fprysmaticlabs%2Fprysm%2Fblob%2Fdevelop%2Fbeacon-chain%2Fblockchain%2Fweak_subjectivity_checks.go%23L52)%20verifies%20the%20weak%20subjectivity%20root%20in%20the%20service%20struct.%0A%0AFootnotes%0A%5B%5E1%5D%3A%20%5BAnalysis%20on%20Weak%20Subjectivity%20in%20Ethereum%202.0%5D(https%3A%2F%2Fgithub.com%2Fruntimeverification%2Fbeacon-chain-verification%2Fblob%2Fmaster%2Fweak-subjectivity%2Fweak-subjectivity-analysis.pdf)%3A%0A%0A%5B%5E2%5D%3A%20%5BProof%20of%20Stake%3A%20How%20I%20Learned%20to%20Love%20Weak%20Subjectivity%5D(https%3A%2F%2Fblog.ethereum.org%2F2014%2F11%2F25%2Fproof-stake-learned-love-weak-subjectivity)%3A%0A%0A%5B%5E3%5D%3A%20It%20is%20unknown%20whether%20this%20mechanism%20can%20deal%20with%20other%20types%20of%20long-range%20attacks%2C%20if%20any%2C%20in%20general%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./intent-management-hook-C41JMHqf.js"),[]),path:"/research/solving/intent-management-hook",type:"mdx",filePath:"research/solving/intent-management-hook.mdx",content:"%23%20Uniswap%20V4%20Intent%20Hook%0A%0A%23%23%20Overview%0A%0AThis%20project%20was%20an%20exploration%20into%20the%20use%20of%20hooks%20for%20intent%20based%20solving.%0AThe%20goal%20was%20to%20implement%20an%20intent%20based%20hook%2C%20that%20would%20allow%20a%20pool%20to%20receive%20swaps%2C%20publish%20them%20to%20a%20solver%20network%20to%20find%20the%20best%20price%20for%20the%20swap.%20If%20a%20solver%20returned%20a%20more%20profitable%20swap%20(for%20the%20swapper)%20the%20intent%20would%20be%20executed%2C%20the%20swapper%20would%20receive%20a%20better%20return%20than%20the%20pool%20could%20offer%20and%20the%20solver%20would%20claim%20the%20funds.%20If%20after%20the%20deadline%20(usually%201%20to%202%20blocks)%20no%20solution%20with%20a%20better%20return%20has%20been%20provided.%20Then%20the%20swap%20would%20be%20executed%20as%20normal%20upon%20the%20pool.%0A%0AResult%20of%20the%20Project%20was%20that%20due%20to%20the%20way%20PoolManager%20enforced%20netting%20of%20token%20balances%2C%20it%20was%20difficult%20to%20hold%20the%20funds%20for%20a%20multi-cycle%20swap.%0A%0A%23%23%20Presentation%0A%0ABelow%20is%20the%20presentation%20submitted%20for%20Atrium%20Academy%20UHI5.%0A%0A%3Ciframe%0A%20%20src%3D%22https%3A%2F%2Fdocs.google.com%2Fpresentation%2Fd%2Fe%2F2PACX-1vRI3svpe1qNrtamn2aDuSlp4_eawgY237ae49o_4P50X8vBA2dVZguio3eA5nauS3ubdOWvwwxl-7tl%2Fembed%3Fstart%3Dfalse%26loop%3Dfalse%26delayms%3D3000%22%0A%20%20frameBorder%3D%220%22%0A%20%20allowFullScreen%0A%20%20allow%3D%22autoplay%3B%20encrypted-media%22%0A%20%20style%3D%7B%7B%0A%20%20%20%20width%3A%20%22100%25%22%2C%0A%20%20%20%20height%3A%20%22500px%22%2C%0A%20%20%20%20borderRadius%3A%20%2212px%22%2C%0A%20%20%7D%7D%0A%2F%3E%0A%0A%23%23%20UHI5%20Submission%0A%0AEmail%3A%20john%40johnwhitton.com%0A%0ADescription%3A%20Jincubator%20IntentSwapHook%20allows%20swaps%20to%20be%20created%20with%20a%20delay%20period%20before%20execution%2C%20enabling%20solvers%20to%20find%20a%20more%20efficient%20trade%20and%20provide%20higher-return%20tokens%20to%20the%20swapper.%0A%0ATags%3A%20CoW%2C%20Cross-Chain%2C%20Custom%20hooks%2C%20DEX%2C%20LP%20Liquidity%2C%20Unichain%0A%0AIntegrations%3A%20Across%2C%20Circle%2C%20EigenLayer%2C%20Flaunch%2C%20Ink%0A%0ASubmission%20Type%3A%20Hook%20Incubator%20(UHI)%0A%0ACohort%3A%20UHI5%0A%0ACreated%20by%3A%20John%20Whitton%0A%0A%23%23%23%20How%20did%20you%20integrate%20our%20partners%2C%20if%20any%3F%0A%0AFor%20the%20UHI5%20project.%20The%20focus%20was%20on%20the%20IntentSwapHook%3B%20partner%20integration%20is%20planned%20for%20subsequent%20phases%2C%20and%20I%20will%20reach%20out%20to%20each%20partner%20with%20detailed%20implementation%20plans.%20Please%20see%20%5Bhttps%3A%2F%2Fdeck.jincubator.com%5D(https%3A%2F%2Fdeck.jincubator.com)%20for%20high-level%20integration%20overviews%20with%20EigenLayer%2C%20Circle%2C%20Across%2C%20Ink%2C%20and%20Flaunch.%0A%0A%23%23%23%20What%20are%20the%20key%20links%20to%20share%3F%20(Ex.%20demo%20video%2C%20GitHub%2C%20deck)%0A%0AGithub%3A%20%5Bhttps%3A%2F%2Fgithub.com%2Fjincubator%2Fuhi5-protocol%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fuhi5-protocol)%0A%0ASlides%3A%20%5Bhttps%3A%2F%2Fuhi5-deck.jincubator.com%2F%5D(https%3A%2F%2Fuhi5-deck.jincubator.com%2F)%0A%0AProject%20Link%3A%20%5Bhttps%3A%2F%2Fjincubator.com%2F%5D(https%3A%2F%2Fjincubator.com%2F)%0A%0ADemo%20Video%3A%20%5Bhttps%3A%2F%2Fuhi5-demo.jincubator.com%2F%5D(https%3A%2F%2Fuhi5-demo.jincubator.com%2F)%0A%0A%23%23%23%20Problem%20%2F%20Background%3A%20What%20inspired%20the%20idea%3F%20What%20problems%20are%20you%20solving%3F%0A%0ALiquidity%20Fragmentation%20and%20Capital%20Efficiency%20are%20two%20of%20the%20largest%20problems%20as%20we%20roll%20out%20more%20protocols%20and%20blockchains.%20This%20is%20addressed%20by%20two%20approaches%20that%20work%20together%20in%20unison.%20Intent-based%20swaps%20using%20solvers%20and%20Chain%20Abstraction%20using%20Cross-chain%20Intents%20(ERC-7683)%2C%20enabling%20the%20seamless%20flow%20of%20funds%20between%20chains.%0A%0A%23%23%23%20Impact%3A%20What%20makes%20this%20project%20unique%3F%20What%20impact%20will%20this%20make%3F%0A%0AThis%20project%20lays%20the%20foundation%20for%20any%20pool%20to%20provide%20a%20better%20return%20for%20swappers%20and%20more%20capital%20efficiency%20for%20Liquidity%20Providers.%20It%20achieves%20this%20by%20creating%20a%20hook%20that%20allows%20swaps%20to%20be%20created%20with%20a%20delay%20period%20before%20execution%2C%20enabling%20solvers%20to%20find%20a%20more%20efficient%20trade%20and%20provide%20higher-return%20tokens%20to%20the%20swapper.%0A%0AThis%20is%20part%20of%20a%20broader%20technical%20landscape%20design%20to%20be%20built%20on%204%20key%20components%0A%0A1.%20IntentSwap%20Hook%20-%20A%20hook%20allowing%20swaps%20to%20be%20created%20with%20a%20delay%20period%20before%20execution%2C%20enabling%20solvers%20to%20find%20a%20more%20efficient%20trade%2C%20giving%20higher%20return%20tokens%20to%20the%20swapper.%0A2.%20Liquidity%20Indexing%20-%20Comprehensive%20liquidity%20indexing%20tooling%20allowing%20for%0A%20%20%20a.%20Indexing%20of%20all%20Protocols%0A%20%20%20b.%20Simulating%20swaps%20over%20all%20protocols%20in%20milliseconds%20to%20find%20the%20best%20trading%20route%0A%20%20%20c.%20Execution%20of%20swaps%20via%20a%20unified%20interface%0A3.%20Intent%20execution%20framework%20that%20enables%20the%20trade%20execution%20across%20multiple%20protocols.%0A4.%20Liquidity%20rebalancing%20and%20settlement%20tools%20enabling%20liquidity%20providers%20to%20rebalance%20their%20portfolios%20across%20both%20yield-earning%20protocols%2C%20assets%2C%20and%20chains.%0A%0ANote%3A%20Currently%20there%20is%20no%20front%20end%20but%20docs%20can%20be%20found%20at%20%5Bhttps%3A%2F%2Fjincubator.com%5D(https%3A%2F%2Fjincubator.com)%0A%0A%23%23%23%20Challenges%3A%20What%20was%20challenging%20about%20building%20this%20project%3F%0A%0AThe%20solutions%20space%20is%20quite%20large%2C%20making%20prioritizing%20which%20components%20to%20build%20for%20this%20project%20challenging.%20As%20such%2C%20sponsor%20integrations%20were%20deprioritized%20and%20have%20only%20a%20high-level%20specification%20rather%20than%20a%20working%20proof%20of%20concept.%0A%0ASecondly%2C%20this%20space%20is%20rapidly%20evolving%20with%20new%20tooling%20and%20solutions%20becoming%20available.%20Specifically%2C%20Intent%20execution%20frameworks%20like%20Uniswap's%20the-compact%20and%20Liquidity%20Indexing%20solutions%2C%20such%20as%20Tycho%E2%80%99s%20SDK%2C%20are%20still%20under%20development%20and%0A%0A%23%23%23%20Team%3A%20Who%20is%20on%20the%20team%3F%20What%20are%20their%20backgrounds%3F%0A%0ADevelopment%20is%20being%20lead%20by%20John%20Whitton%2C%20below%20are%20some%20handy%20links%20about%20him.%0A%0A-%20%5Bgithub%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton)%3A%20Johns%20github%20profile%0A-%20%5Bjohnwhitton.com%5D(https%3A%2F%2Fjohnwhitton.com%2F)%3A%20All%20about%20John%2C%20his%20work%2C%20writing%2C%20research%20etc.%0A-%20%5BMy%20Resume%5D(https%3A%2F%2Fresume.johnwhitton.com%2F)%3A%20One-page%20resume%20in%20pdf%20format.%0A-%20%5BOverview%5D(https%3A%2F%2Foverview.johnwhitton.com%2F)%3A%20A%20little%20infographic%20of%20John's%20history%0A-%20%5BWriting%5D(https%3A%2F%2Fjohnwhitton.com%2Fposts.html)%C2%A0and%C2%A0%5BResearch%5D(https%3A%2F%2Fjohnwhitton.com%2Fresearch.html)%3A%20Some%20writing%20and%20research%20John%20has%20done%20(a%20little%20outdated)%0A-%20%5BUniswap%20v4%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fuhi5-exercises)%3A%20Completed%20exercises%20and%20references%20for%20the%20Uniswap%20Hook%20Incubator%0A%0A%23%23%20Repository%0A%0AThe%20repository%20resides%20at%20%5Buhi5-protocol%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fuhi5-Protocol%2Fblob%2Fmain%2Fnotes%2FSCENARIOS.md)%0ABelow%20are%20some%20sample%20scenarios%0A%0A%23%23%23%20Scenarios%0A%0AGives%20an%20Overview%20of%20the%20Actors%2C%20Contracts%20and%20Scenarios%20for%20Jincubator.%0A%0A%23%23%23%23%20Actors%0A%0A-%20Liquidity%20Provider%3A%20Provides%20Liquidity%0A-%20Swapper%3A%20Performs%20Swaps%0A-%20Solver%3A%20Finds%20Most%20Efficient%20Swaps%0A-%20Jincubator%3A%20Deploys%20UniswapHook%20and%20Liquidity%20Pools%20-%20may%20have%20privileged%20owner%20functions%20for%20prototyping.%0A%0A%23%23%23%23%20Contracts%0A%0A-%20UniswapHook%0A-%20Pools%0A%20%20-%20ETH%2FUSD%20-%20Reference%20Pool%0A%20%20-%20ETH%2FUSD%20-%20Intent%20Pool%20using%20Uniswap%20Hook%0A%0A%23%23%23%23%20%5BThe-compact%5D(https%3A%2F%2Fdeepwiki.com%2Fjincubator%2Fthe-compact)%0A%0A-%20%5BSponsors(depositors)%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fthe-compact%3Ftab%3Dreadme-ov-file%23sponsors-depositors)%3A%20Sponsors%20own%20the%20underlying%20assets%20and%20create%20resource%20locks%20to%20make%20them%20available%20under%20specific%20conditions.%0A%20%20-%20Swapper%0A%20%20-%20Liquidity%20Provider%0A-%20%5BArbiters%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fthe-compact%3Ftab%3Dreadme-ov-file%23arbiters--claimants-eg-fillers)%3A%20Arbiters%20verify%20conditions%20and%20process%20claims.%0A-%20%5BClaimants(e.g.%20Fillers)%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fthe-compact%3Ftab%3Dreadme-ov-file%23arbiters--claimants-eg-fillers)%3A%20Claimants%20are%20the%20recipients.%0A-%20%5BRelayers%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fthe-compact%3Ftab%3Dreadme-ov-file%23relayers)%3A%20Relayers%20can%20perform%20certain%20interactions%20on%20behalf%20of%20sponsors%20and%2For%20claimants.%0A-%20%5BAllocators%20(Infrastructure)%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fthe-compact%3Ftab%3Dreadme-ov-file%23allocators-infrastructure)%3A%20Allocators%20are%20crucial%20infrastructure%20for%20ensuring%20resource%20lock%20integrity.%0A-%20%5BEmmisaries%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fthe-compact%3Ftab%3Dreadme-ov-file%23summary)%3A%20Sponsors%20can%20also%20optionally%20assign%20an%20emissary%20to%20act%20as%20a%20fallback%20signer%20for%20authorizing%20claims%20against%20their%20compacts.%20This%20is%20particularly%20helpful%20for%20smart%20contract%20accounts%20or%20other%20scenarios%20where%20signing%20keys%20might%20change.%0A%0A%23%23%23%20Protocol%20Deployment%0A%0A%23%23%23%20Liquidity%20Provisioning%0A%0A1.%20Pool%20(providing%20tokens%20to%20a%20pool)%0A2.%20Pool%20Manager%20(providing%20tokens%20to%20the%20pool%20manager%20to%20be%20used%20dynamically)%0A3.%20Compact%20(to%20be%20used%20by%20Solvers%20for%20Swaps%20using%20Pools)%0A4.%20Compact%20(to%20be%20used%20by%20Solvers%20for%20Direct%20Swaps%20based%20on%20Price%20Oracle%20and%20Profit)%0A%0A%23%23%23%23%20Pool%0A%0A%23%23%23%23%20Yield%20Earning%20Vaults%20(ERC-4626)%0A%0A%23%23%23%23%20Assets%20for%20Solving%20Intents%0A%0A%23%23%23%20Intent%20Swap%20-%20No%20LP%20Funds%0A%0A1.%20Swapper%20creates%20Swap%20which%20creates%20a%20compact%20for%20the%20output%20tokens%20required%20(locks%20funds)%0A%20%20%201.%20Pricing%20comes%20from%20....%0A2.%20Solver%20listens%20to%20the%20event%20calls%20simulate%20and%20finds%20the%20best%20price%20(a%20swap%20on%20a%20pool%20using%20Swappers%20Funds)%0A3.%20Solver%20gets%20exclusivity%0A4.%20Solver%20executes%20the%20swap%20using%20swappers%20funds%20and%20returning%20output%20tokens%20to%20swapper%0A%0A%23%23%23%20Intent%20Swap%20-%20LP%20funds%0A%0A1.%20LP%20Provides%20funds%20for%20Solving%20to%20the-compact%20and%20permissions%20solver%0A2.%20Swapper%20creates%20Swap%20which%20creates%20a%20compact%20for%20the%20output%20tokens%20required%20(locks%20funds)%0A%20%20%201.%20Pricing%20comes%20from%20....%0A3.%20Solver%20listens%20to%20the%20event%20calls%20simulate%20and%20finds%20the%20best%20price%0A%20%20%201.%20Option%201%20-%20a%20swap%20on%20a%20pool%20using%20Swappers%20Funds%0A%20%20%202.%20Option%202%20-%20a%20direct%20swap%20using%20LP's%20funds%0A4.%20Solver%20gets%20exclusivity%0A5.%20Solver%20executes%20the%20swap%0A%20%20%201.%20Option%201%20-%20Using%20Swappers%20funds%20and%20returning%20tokens%20to%20swapper%0A%20%20%202.%20Option%202%20-%20Using%20LP's%20funds%20and%20returning%20funds%20to%20the-compact%0A6.%20Settlement%0A%20%20%201.%20FastTrak%0A%20%20%202.%20Batch%0A7.%20Rebalancing%0A%20%20%201.%20Rebalancing%20Job%0A%0A%23%23%23%20Swap%20Vanilla%0A%0A%23%23%23%20Swap%20Booster%0A%0A%23%23%23%20Async%20Swap%20and%20then%20Solve%20(double%20spend)%0A%0A1.%20Swapper%20creates%20a%20swap%20on%20Uniswap%20v4%20Pool%20(Booster%20Pool%20or%20Vanilla%20Pool)%0A2.%20Input%20tokens%20are%20held%20based%20on%20Time%20Delay%20(say%2010%20blocks)%0A3.%20Intent%20is%20created%20by%20Solver%20locking%20LP%20funds%20for%20Input%20Token%20and%20Output%20Token%20Amount%20above%20-%20gas%20fees%20and%20profit%20%25%0A%20%20%204a.%20Intent%20is%20executed%20(note%20this%20is%20outside%20of%20Pool%2C%20other%20option%20is%20to%20pass%20solve%20calldata%20to%20Pool%20and%20execute%20solve%20in%20Pool)%0A%20%20%201.%20LP%20deposits%20liquidity%20in%20the%20form%20of%20Output%20Token%20with%20intentId%20(CompactId)%0A%20%20%202.%20Deposited%20Output%20Tokens%20are%20given%20to%20the%20original%20swapper%20and%20Locked%20Input%20Tokens%20are%20given%20to%20the%20Solver%0A%20%20%20%20%20%204b.%20Intent%20is%20not%20executed%20and%20swap%20is%20attempted%20at%20time%20of%20deadline.%0A%0A%23%23%23%20Swap%20then%20Solve%20(lock%20funds%20and%20then%20double%20spend)%0A%0A%23%23%23%20Async%20Swap%20then%20Solve%0A%0A%23%23%23%20Swap%20and%20Solve%20(Pass%20Payload%20Data%20In)%0A%0A%23%23%23%20Compact%20Introduction.%0A%0A%23%23%23%20Swap%20Intent%20Based%0A%0ASwap%201%20ETH%20for%20max%20USDC%20on%20Unichain%0A%0A1.%20Swap%20is%20created%0A%20%20%201.%20Locks%20ETH%20on%20PoolManager%0A%20%20%202.%20Create%20compact%20for%20Solver%20to%20use%201%20ETH%20if%20they%20can%20provide%20%242470%20USDC%20or%20more%0A%20%20%203.%20Emits%20event%20for%20Intent%20Creation%0A2.%20Solver%20provides%20Solution%0A%20%20%201.%20Accesses%20Funds%20(provide%20our%20own%20initially)%0A%20%20%202.%20Does%20Swap%0A%20%20%203.%20Proves%20have%20satisfied%20condition%0A%0A%23%23%23%20Cross%20Chain%20Swap%0A%0A%23%23%23%20ReHypothecation%0A%0A%23%23%23%20Liquidity%20Settlement%0A",lastUpdatedAt:1758829632e3},{lazy:()=>J(()=>import("./intent-management-hook-C41JMHqf.js"),[]),path:"/research/solving/intent-management-hook.html",type:"mdx",filePath:"research/solving/intent-management-hook.mdx",content:"%23%20Uniswap%20V4%20Intent%20Hook%0A%0A%23%23%20Overview%0A%0AThis%20project%20was%20an%20exploration%20into%20the%20use%20of%20hooks%20for%20intent%20based%20solving.%0AThe%20goal%20was%20to%20implement%20an%20intent%20based%20hook%2C%20that%20would%20allow%20a%20pool%20to%20receive%20swaps%2C%20publish%20them%20to%20a%20solver%20network%20to%20find%20the%20best%20price%20for%20the%20swap.%20If%20a%20solver%20returned%20a%20more%20profitable%20swap%20(for%20the%20swapper)%20the%20intent%20would%20be%20executed%2C%20the%20swapper%20would%20receive%20a%20better%20return%20than%20the%20pool%20could%20offer%20and%20the%20solver%20would%20claim%20the%20funds.%20If%20after%20the%20deadline%20(usually%201%20to%202%20blocks)%20no%20solution%20with%20a%20better%20return%20has%20been%20provided.%20Then%20the%20swap%20would%20be%20executed%20as%20normal%20upon%20the%20pool.%0A%0AResult%20of%20the%20Project%20was%20that%20due%20to%20the%20way%20PoolManager%20enforced%20netting%20of%20token%20balances%2C%20it%20was%20difficult%20to%20hold%20the%20funds%20for%20a%20multi-cycle%20swap.%0A%0A%23%23%20Presentation%0A%0ABelow%20is%20the%20presentation%20submitted%20for%20Atrium%20Academy%20UHI5.%0A%0A%3Ciframe%0A%20%20src%3D%22https%3A%2F%2Fdocs.google.com%2Fpresentation%2Fd%2Fe%2F2PACX-1vRI3svpe1qNrtamn2aDuSlp4_eawgY237ae49o_4P50X8vBA2dVZguio3eA5nauS3ubdOWvwwxl-7tl%2Fembed%3Fstart%3Dfalse%26loop%3Dfalse%26delayms%3D3000%22%0A%20%20frameBorder%3D%220%22%0A%20%20allowFullScreen%0A%20%20allow%3D%22autoplay%3B%20encrypted-media%22%0A%20%20style%3D%7B%7B%0A%20%20%20%20width%3A%20%22100%25%22%2C%0A%20%20%20%20height%3A%20%22500px%22%2C%0A%20%20%20%20borderRadius%3A%20%2212px%22%2C%0A%20%20%7D%7D%0A%2F%3E%0A%0A%23%23%20UHI5%20Submission%0A%0AEmail%3A%20john%40johnwhitton.com%0A%0ADescription%3A%20Jincubator%20IntentSwapHook%20allows%20swaps%20to%20be%20created%20with%20a%20delay%20period%20before%20execution%2C%20enabling%20solvers%20to%20find%20a%20more%20efficient%20trade%20and%20provide%20higher-return%20tokens%20to%20the%20swapper.%0A%0ATags%3A%20CoW%2C%20Cross-Chain%2C%20Custom%20hooks%2C%20DEX%2C%20LP%20Liquidity%2C%20Unichain%0A%0AIntegrations%3A%20Across%2C%20Circle%2C%20EigenLayer%2C%20Flaunch%2C%20Ink%0A%0ASubmission%20Type%3A%20Hook%20Incubator%20(UHI)%0A%0ACohort%3A%20UHI5%0A%0ACreated%20by%3A%20John%20Whitton%0A%0A%23%23%23%20How%20did%20you%20integrate%20our%20partners%2C%20if%20any%3F%0A%0AFor%20the%20UHI5%20project.%20The%20focus%20was%20on%20the%20IntentSwapHook%3B%20partner%20integration%20is%20planned%20for%20subsequent%20phases%2C%20and%20I%20will%20reach%20out%20to%20each%20partner%20with%20detailed%20implementation%20plans.%20Please%20see%20%5Bhttps%3A%2F%2Fdeck.jincubator.com%5D(https%3A%2F%2Fdeck.jincubator.com)%20for%20high-level%20integration%20overviews%20with%20EigenLayer%2C%20Circle%2C%20Across%2C%20Ink%2C%20and%20Flaunch.%0A%0A%23%23%23%20What%20are%20the%20key%20links%20to%20share%3F%20(Ex.%20demo%20video%2C%20GitHub%2C%20deck)%0A%0AGithub%3A%20%5Bhttps%3A%2F%2Fgithub.com%2Fjincubator%2Fuhi5-protocol%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fuhi5-protocol)%0A%0ASlides%3A%20%5Bhttps%3A%2F%2Fuhi5-deck.jincubator.com%2F%5D(https%3A%2F%2Fuhi5-deck.jincubator.com%2F)%0A%0AProject%20Link%3A%20%5Bhttps%3A%2F%2Fjincubator.com%2F%5D(https%3A%2F%2Fjincubator.com%2F)%0A%0ADemo%20Video%3A%20%5Bhttps%3A%2F%2Fuhi5-demo.jincubator.com%2F%5D(https%3A%2F%2Fuhi5-demo.jincubator.com%2F)%0A%0A%23%23%23%20Problem%20%2F%20Background%3A%20What%20inspired%20the%20idea%3F%20What%20problems%20are%20you%20solving%3F%0A%0ALiquidity%20Fragmentation%20and%20Capital%20Efficiency%20are%20two%20of%20the%20largest%20problems%20as%20we%20roll%20out%20more%20protocols%20and%20blockchains.%20This%20is%20addressed%20by%20two%20approaches%20that%20work%20together%20in%20unison.%20Intent-based%20swaps%20using%20solvers%20and%20Chain%20Abstraction%20using%20Cross-chain%20Intents%20(ERC-7683)%2C%20enabling%20the%20seamless%20flow%20of%20funds%20between%20chains.%0A%0A%23%23%23%20Impact%3A%20What%20makes%20this%20project%20unique%3F%20What%20impact%20will%20this%20make%3F%0A%0AThis%20project%20lays%20the%20foundation%20for%20any%20pool%20to%20provide%20a%20better%20return%20for%20swappers%20and%20more%20capital%20efficiency%20for%20Liquidity%20Providers.%20It%20achieves%20this%20by%20creating%20a%20hook%20that%20allows%20swaps%20to%20be%20created%20with%20a%20delay%20period%20before%20execution%2C%20enabling%20solvers%20to%20find%20a%20more%20efficient%20trade%20and%20provide%20higher-return%20tokens%20to%20the%20swapper.%0A%0AThis%20is%20part%20of%20a%20broader%20technical%20landscape%20design%20to%20be%20built%20on%204%20key%20components%0A%0A1.%20IntentSwap%20Hook%20-%20A%20hook%20allowing%20swaps%20to%20be%20created%20with%20a%20delay%20period%20before%20execution%2C%20enabling%20solvers%20to%20find%20a%20more%20efficient%20trade%2C%20giving%20higher%20return%20tokens%20to%20the%20swapper.%0A2.%20Liquidity%20Indexing%20-%20Comprehensive%20liquidity%20indexing%20tooling%20allowing%20for%0A%20%20%20a.%20Indexing%20of%20all%20Protocols%0A%20%20%20b.%20Simulating%20swaps%20over%20all%20protocols%20in%20milliseconds%20to%20find%20the%20best%20trading%20route%0A%20%20%20c.%20Execution%20of%20swaps%20via%20a%20unified%20interface%0A3.%20Intent%20execution%20framework%20that%20enables%20the%20trade%20execution%20across%20multiple%20protocols.%0A4.%20Liquidity%20rebalancing%20and%20settlement%20tools%20enabling%20liquidity%20providers%20to%20rebalance%20their%20portfolios%20across%20both%20yield-earning%20protocols%2C%20assets%2C%20and%20chains.%0A%0ANote%3A%20Currently%20there%20is%20no%20front%20end%20but%20docs%20can%20be%20found%20at%20%5Bhttps%3A%2F%2Fjincubator.com%5D(https%3A%2F%2Fjincubator.com)%0A%0A%23%23%23%20Challenges%3A%20What%20was%20challenging%20about%20building%20this%20project%3F%0A%0AThe%20solutions%20space%20is%20quite%20large%2C%20making%20prioritizing%20which%20components%20to%20build%20for%20this%20project%20challenging.%20As%20such%2C%20sponsor%20integrations%20were%20deprioritized%20and%20have%20only%20a%20high-level%20specification%20rather%20than%20a%20working%20proof%20of%20concept.%0A%0ASecondly%2C%20this%20space%20is%20rapidly%20evolving%20with%20new%20tooling%20and%20solutions%20becoming%20available.%20Specifically%2C%20Intent%20execution%20frameworks%20like%20Uniswap's%20the-compact%20and%20Liquidity%20Indexing%20solutions%2C%20such%20as%20Tycho%E2%80%99s%20SDK%2C%20are%20still%20under%20development%20and%0A%0A%23%23%23%20Team%3A%20Who%20is%20on%20the%20team%3F%20What%20are%20their%20backgrounds%3F%0A%0ADevelopment%20is%20being%20lead%20by%20John%20Whitton%2C%20below%20are%20some%20handy%20links%20about%20him.%0A%0A-%20%5Bgithub%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton)%3A%20Johns%20github%20profile%0A-%20%5Bjohnwhitton.com%5D(https%3A%2F%2Fjohnwhitton.com%2F)%3A%20All%20about%20John%2C%20his%20work%2C%20writing%2C%20research%20etc.%0A-%20%5BMy%20Resume%5D(https%3A%2F%2Fresume.johnwhitton.com%2F)%3A%20One-page%20resume%20in%20pdf%20format.%0A-%20%5BOverview%5D(https%3A%2F%2Foverview.johnwhitton.com%2F)%3A%20A%20little%20infographic%20of%20John's%20history%0A-%20%5BWriting%5D(https%3A%2F%2Fjohnwhitton.com%2Fposts.html)%C2%A0and%C2%A0%5BResearch%5D(https%3A%2F%2Fjohnwhitton.com%2Fresearch.html)%3A%20Some%20writing%20and%20research%20John%20has%20done%20(a%20little%20outdated)%0A-%20%5BUniswap%20v4%5D(https%3A%2F%2Fgithub.com%2Fjohnwhitton%2Fuhi5-exercises)%3A%20Completed%20exercises%20and%20references%20for%20the%20Uniswap%20Hook%20Incubator%0A%0A%23%23%20Repository%0A%0AThe%20repository%20resides%20at%20%5Buhi5-protocol%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fuhi5-Protocol%2Fblob%2Fmain%2Fnotes%2FSCENARIOS.md)%0ABelow%20are%20some%20sample%20scenarios%0A%0A%23%23%23%20Scenarios%0A%0AGives%20an%20Overview%20of%20the%20Actors%2C%20Contracts%20and%20Scenarios%20for%20Jincubator.%0A%0A%23%23%23%23%20Actors%0A%0A-%20Liquidity%20Provider%3A%20Provides%20Liquidity%0A-%20Swapper%3A%20Performs%20Swaps%0A-%20Solver%3A%20Finds%20Most%20Efficient%20Swaps%0A-%20Jincubator%3A%20Deploys%20UniswapHook%20and%20Liquidity%20Pools%20-%20may%20have%20privileged%20owner%20functions%20for%20prototyping.%0A%0A%23%23%23%23%20Contracts%0A%0A-%20UniswapHook%0A-%20Pools%0A%20%20-%20ETH%2FUSD%20-%20Reference%20Pool%0A%20%20-%20ETH%2FUSD%20-%20Intent%20Pool%20using%20Uniswap%20Hook%0A%0A%23%23%23%23%20%5BThe-compact%5D(https%3A%2F%2Fdeepwiki.com%2Fjincubator%2Fthe-compact)%0A%0A-%20%5BSponsors(depositors)%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fthe-compact%3Ftab%3Dreadme-ov-file%23sponsors-depositors)%3A%20Sponsors%20own%20the%20underlying%20assets%20and%20create%20resource%20locks%20to%20make%20them%20available%20under%20specific%20conditions.%0A%20%20-%20Swapper%0A%20%20-%20Liquidity%20Provider%0A-%20%5BArbiters%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fthe-compact%3Ftab%3Dreadme-ov-file%23arbiters--claimants-eg-fillers)%3A%20Arbiters%20verify%20conditions%20and%20process%20claims.%0A-%20%5BClaimants(e.g.%20Fillers)%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fthe-compact%3Ftab%3Dreadme-ov-file%23arbiters--claimants-eg-fillers)%3A%20Claimants%20are%20the%20recipients.%0A-%20%5BRelayers%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fthe-compact%3Ftab%3Dreadme-ov-file%23relayers)%3A%20Relayers%20can%20perform%20certain%20interactions%20on%20behalf%20of%20sponsors%20and%2For%20claimants.%0A-%20%5BAllocators%20(Infrastructure)%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fthe-compact%3Ftab%3Dreadme-ov-file%23allocators-infrastructure)%3A%20Allocators%20are%20crucial%20infrastructure%20for%20ensuring%20resource%20lock%20integrity.%0A-%20%5BEmmisaries%5D(https%3A%2F%2Fgithub.com%2Fjincubator%2Fthe-compact%3Ftab%3Dreadme-ov-file%23summary)%3A%20Sponsors%20can%20also%20optionally%20assign%20an%20emissary%20to%20act%20as%20a%20fallback%20signer%20for%20authorizing%20claims%20against%20their%20compacts.%20This%20is%20particularly%20helpful%20for%20smart%20contract%20accounts%20or%20other%20scenarios%20where%20signing%20keys%20might%20change.%0A%0A%23%23%23%20Protocol%20Deployment%0A%0A%23%23%23%20Liquidity%20Provisioning%0A%0A1.%20Pool%20(providing%20tokens%20to%20a%20pool)%0A2.%20Pool%20Manager%20(providing%20tokens%20to%20the%20pool%20manager%20to%20be%20used%20dynamically)%0A3.%20Compact%20(to%20be%20used%20by%20Solvers%20for%20Swaps%20using%20Pools)%0A4.%20Compact%20(to%20be%20used%20by%20Solvers%20for%20Direct%20Swaps%20based%20on%20Price%20Oracle%20and%20Profit)%0A%0A%23%23%23%23%20Pool%0A%0A%23%23%23%23%20Yield%20Earning%20Vaults%20(ERC-4626)%0A%0A%23%23%23%23%20Assets%20for%20Solving%20Intents%0A%0A%23%23%23%20Intent%20Swap%20-%20No%20LP%20Funds%0A%0A1.%20Swapper%20creates%20Swap%20which%20creates%20a%20compact%20for%20the%20output%20tokens%20required%20(locks%20funds)%0A%20%20%201.%20Pricing%20comes%20from%20....%0A2.%20Solver%20listens%20to%20the%20event%20calls%20simulate%20and%20finds%20the%20best%20price%20(a%20swap%20on%20a%20pool%20using%20Swappers%20Funds)%0A3.%20Solver%20gets%20exclusivity%0A4.%20Solver%20executes%20the%20swap%20using%20swappers%20funds%20and%20returning%20output%20tokens%20to%20swapper%0A%0A%23%23%23%20Intent%20Swap%20-%20LP%20funds%0A%0A1.%20LP%20Provides%20funds%20for%20Solving%20to%20the-compact%20and%20permissions%20solver%0A2.%20Swapper%20creates%20Swap%20which%20creates%20a%20compact%20for%20the%20output%20tokens%20required%20(locks%20funds)%0A%20%20%201.%20Pricing%20comes%20from%20....%0A3.%20Solver%20listens%20to%20the%20event%20calls%20simulate%20and%20finds%20the%20best%20price%0A%20%20%201.%20Option%201%20-%20a%20swap%20on%20a%20pool%20using%20Swappers%20Funds%0A%20%20%202.%20Option%202%20-%20a%20direct%20swap%20using%20LP's%20funds%0A4.%20Solver%20gets%20exclusivity%0A5.%20Solver%20executes%20the%20swap%0A%20%20%201.%20Option%201%20-%20Using%20Swappers%20funds%20and%20returning%20tokens%20to%20swapper%0A%20%20%202.%20Option%202%20-%20Using%20LP's%20funds%20and%20returning%20funds%20to%20the-compact%0A6.%20Settlement%0A%20%20%201.%20FastTrak%0A%20%20%202.%20Batch%0A7.%20Rebalancing%0A%20%20%201.%20Rebalancing%20Job%0A%0A%23%23%23%20Swap%20Vanilla%0A%0A%23%23%23%20Swap%20Booster%0A%0A%23%23%23%20Async%20Swap%20and%20then%20Solve%20(double%20spend)%0A%0A1.%20Swapper%20creates%20a%20swap%20on%20Uniswap%20v4%20Pool%20(Booster%20Pool%20or%20Vanilla%20Pool)%0A2.%20Input%20tokens%20are%20held%20based%20on%20Time%20Delay%20(say%2010%20blocks)%0A3.%20Intent%20is%20created%20by%20Solver%20locking%20LP%20funds%20for%20Input%20Token%20and%20Output%20Token%20Amount%20above%20-%20gas%20fees%20and%20profit%20%25%0A%20%20%204a.%20Intent%20is%20executed%20(note%20this%20is%20outside%20of%20Pool%2C%20other%20option%20is%20to%20pass%20solve%20calldata%20to%20Pool%20and%20execute%20solve%20in%20Pool)%0A%20%20%201.%20LP%20deposits%20liquidity%20in%20the%20form%20of%20Output%20Token%20with%20intentId%20(CompactId)%0A%20%20%202.%20Deposited%20Output%20Tokens%20are%20given%20to%20the%20original%20swapper%20and%20Locked%20Input%20Tokens%20are%20given%20to%20the%20Solver%0A%20%20%20%20%20%204b.%20Intent%20is%20not%20executed%20and%20swap%20is%20attempted%20at%20time%20of%20deadline.%0A%0A%23%23%23%20Swap%20then%20Solve%20(lock%20funds%20and%20then%20double%20spend)%0A%0A%23%23%23%20Async%20Swap%20then%20Solve%0A%0A%23%23%23%20Swap%20and%20Solve%20(Pass%20Payload%20Data%20In)%0A%0A%23%23%23%20Compact%20Introduction.%0A%0A%23%23%23%20Swap%20Intent%20Based%0A%0ASwap%201%20ETH%20for%20max%20USDC%20on%20Unichain%0A%0A1.%20Swap%20is%20created%0A%20%20%201.%20Locks%20ETH%20on%20PoolManager%0A%20%20%202.%20Create%20compact%20for%20Solver%20to%20use%201%20ETH%20if%20they%20can%20provide%20%242470%20USDC%20or%20more%0A%20%20%203.%20Emits%20event%20for%20Intent%20Creation%0A2.%20Solver%20provides%20Solution%0A%20%20%201.%20Accesses%20Funds%20(provide%20our%20own%20initially)%0A%20%20%202.%20Does%20Swap%0A%20%20%203.%20Proves%20have%20satisfied%20condition%0A%0A%23%23%23%20Cross%20Chain%20Swap%0A%0A%23%23%23%20ReHypothecation%0A%0A%23%23%23%20Liquidity%20Settlement%0A",lastUpdatedAt:1758829632e3},{lazy:()=>J(()=>import("./liqudity-management-B8OTeXb7.js"),[]),path:"/research/solving/liqudity-management",type:"mdx",filePath:"research/solving/liqudity-management.mdx",content:"",lastUpdatedAt:1758687736e3},{lazy:()=>J(()=>import("./liqudity-management-B8OTeXb7.js"),[]),path:"/research/solving/liqudity-management.html",type:"mdx",filePath:"research/solving/liqudity-management.mdx",content:"",lastUpdatedAt:1758687736e3},{lazy:()=>J(()=>import("./near-CAiGKFhd.js"),[]),path:"/research/solving/near",type:"mdx",filePath:"research/solving/near.mdx",content:"%23%20NEAR%20FUSION%2B%20Smart%20Contract%20Development%0A%0ANEAR%20Fusion%2B%20is%20a%20comprehensive%20DeFi%20protocol%20that%20migrates%201inch's%20proven%20Limit%20Order%20Protocol%20and%20Cross-Chain%20Swap%20functionality%20to%20the%20NEAR%20blockchain.%20The%20system%20provides%20two%20primary%20capabilities%3A%20advanced%20limit%20order%20trading%20with%20partial%20fills%20and%20extensible%20features%2C%20and%20atomic%20cross-chain%20swaps%20secured%20by%20time-locked%20escrow%20contracts.%0A%0A%23%23%20Implementation%20Limit%20Order%20Protocol%0A%0A%23%23%23%20Core%20Components%0A%0A-%20**Compact**%3A%20ERC-6909%20enabled%20Chainlink%20calculator%20for%20price%20discovery%0A-%20**ResourceManager**%3A%20Manages%20resource%20locks%20for%20ERC-6909%20integration%0A-%20**TychoSwapExecutor**%3A%20Executes%20complex%20swaps%20using%20Tycho%20Execution%0A-%20**CompactInteraction**%3A%20Post-interaction%20handler%20for%20resource%20allocation%0A-%20**RebalancerInteraction**%3A%20Treasury%20management%20and%20portfolio%20rebalancing%0A-%20**OracleCalculator**%3A%20Price%20oracle%20integration%20for%20advanced%20order%20strategies%0A%0A%23%23%23%20Key%20Features%0A%0A-%20**Resource%20Locking**%3A%20ERC-6909%20compliant%20resource%20management%0A-%20**Multi-DEX%20Execution**%3A%20Cross-platform%20swap%20execution%20via%20Tycho%0A-%20**Advanced%20Order%20Types**%3A%20Stop-loss%20and%20take-profit%20orders%0A-%20**Treasury%20Management**%3A%20Automated%20portfolio%20rebalancing%0A-%20**Oracle%20Integration**%3A%20Chainlink%20price%20feeds%20for%20accurate%20pricing%0A%0A%23%23%23%20Key%20Technology%20Enhancements%0A%0A-%20Solidity%20based%20tests%20including%20a%20migration%20from%20%60OrderUtils.js%60%20to%20solidity%20based%20%5BOrderUtils%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fprotocol%2Ftree%2Fmain%2Ftest%2Futils%2ForderUtils%2FREADME_OrderUtils.md)%0A-%20Solidity%20%60%5E0.8.30%60%20compatibility%20provided%20by%20creating%20an%20interface%20%5BILimitOrderProtocol.sol%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fprotocol%2Ftree%2Fmain%2Fsrc%2Finterfaces%2F1inch%2FILimitOrderProtocol.sol)%20and%20introducing%20%5BLimitOrderProtocolManager%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fprotocol%2Ftree%2Fmain%2Ftest%2Fhelpers%2FLimitOrderProtocolManager.sol)%20for%20testing.%0A%0A%23%23%23%20Architecture%0A%0A!%5BArchitecture%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FByIAaIhwel.png)%0A%0A%23%23%23%20Interactions%0A%0A!%5BInteractions%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FB1XQRU3wex.png)%0A",lastUpdatedAt:1758829632e3},{lazy:()=>J(()=>import("./near-CAiGKFhd.js"),[]),path:"/research/solving/near.html",type:"mdx",filePath:"research/solving/near.mdx",content:"%23%20NEAR%20FUSION%2B%20Smart%20Contract%20Development%0A%0ANEAR%20Fusion%2B%20is%20a%20comprehensive%20DeFi%20protocol%20that%20migrates%201inch's%20proven%20Limit%20Order%20Protocol%20and%20Cross-Chain%20Swap%20functionality%20to%20the%20NEAR%20blockchain.%20The%20system%20provides%20two%20primary%20capabilities%3A%20advanced%20limit%20order%20trading%20with%20partial%20fills%20and%20extensible%20features%2C%20and%20atomic%20cross-chain%20swaps%20secured%20by%20time-locked%20escrow%20contracts.%0A%0A%23%23%20Implementation%20Limit%20Order%20Protocol%0A%0A%23%23%23%20Core%20Components%0A%0A-%20**Compact**%3A%20ERC-6909%20enabled%20Chainlink%20calculator%20for%20price%20discovery%0A-%20**ResourceManager**%3A%20Manages%20resource%20locks%20for%20ERC-6909%20integration%0A-%20**TychoSwapExecutor**%3A%20Executes%20complex%20swaps%20using%20Tycho%20Execution%0A-%20**CompactInteraction**%3A%20Post-interaction%20handler%20for%20resource%20allocation%0A-%20**RebalancerInteraction**%3A%20Treasury%20management%20and%20portfolio%20rebalancing%0A-%20**OracleCalculator**%3A%20Price%20oracle%20integration%20for%20advanced%20order%20strategies%0A%0A%23%23%23%20Key%20Features%0A%0A-%20**Resource%20Locking**%3A%20ERC-6909%20compliant%20resource%20management%0A-%20**Multi-DEX%20Execution**%3A%20Cross-platform%20swap%20execution%20via%20Tycho%0A-%20**Advanced%20Order%20Types**%3A%20Stop-loss%20and%20take-profit%20orders%0A-%20**Treasury%20Management**%3A%20Automated%20portfolio%20rebalancing%0A-%20**Oracle%20Integration**%3A%20Chainlink%20price%20feeds%20for%20accurate%20pricing%0A%0A%23%23%23%20Key%20Technology%20Enhancements%0A%0A-%20Solidity%20based%20tests%20including%20a%20migration%20from%20%60OrderUtils.js%60%20to%20solidity%20based%20%5BOrderUtils%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fprotocol%2Ftree%2Fmain%2Ftest%2Futils%2ForderUtils%2FREADME_OrderUtils.md)%0A-%20Solidity%20%60%5E0.8.30%60%20compatibility%20provided%20by%20creating%20an%20interface%20%5BILimitOrderProtocol.sol%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fprotocol%2Ftree%2Fmain%2Fsrc%2Finterfaces%2F1inch%2FILimitOrderProtocol.sol)%20and%20introducing%20%5BLimitOrderProtocolManager%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fprotocol%2Ftree%2Fmain%2Ftest%2Fhelpers%2FLimitOrderProtocolManager.sol)%20for%20testing.%0A%0A%23%23%23%20Architecture%0A%0A!%5BArchitecture%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FByIAaIhwel.png)%0A%0A%23%23%23%20Interactions%0A%0A!%5BInteractions%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FB1XQRU3wex.png)%0A",lastUpdatedAt:1758829632e3},{lazy:()=>J(()=>import("./reference-implementation-kg5SsN8P.js"),[]),path:"/research/solving/reference-implementation",type:"mdx",filePath:"research/solving/reference-implementation.mdx",content:"",lastUpdatedAt:1758687736e3},{lazy:()=>J(()=>import("./reference-implementation-kg5SsN8P.js"),[]),path:"/research/solving/reference-implementation.html",type:"mdx",filePath:"research/solving/reference-implementation.mdx",content:"",lastUpdatedAt:1758687736e3},{lazy:()=>J(()=>import("./solving-BAI13JGJ.js"),[]),path:"/research/solving/solving",type:"mdx",filePath:"research/solving/solving.mdx",content:"%23%20Solving%2C%20Arbitrage%20%26%20Market%20Making%0A%0A%23%23%20Evaluating%20over%201000%20Routes%20Per%20Second%20and%20arbitraging%20them%20with%20no%20upfront%20capital.%0A%0AIn%20this%20article%20I%20discuss%20my%20personal%20Journey%20for%202025.%20Give%20an%20example%20of%20a%20cyclical%20arbitrage%20built%20on%20the%20latest%20high%20performant%20solving%20and%20market%20making%20infrastructure.%20Discuss%20how%20this%20infrastructure%20can%20be%20applied%20to%20Intent%20Based%20Solving%20Sytems%20(think%20UniswapX%2C%20CowSwap%2C%201inch)%20and%20give%20a%20full%20breakdown%20of%20the%20mathematics%20and%20technical%20implementation%20of%20a%20generic%20solving%20infrastructure%20service%20that%20I%20have%20been%20developing.%0A%0AIf%20you%20are%20an%20**investor**%2C%20**protocol**%2C%20or%20**market%20maker**%2C%20let%E2%80%99s%20connect%20to%3A%0A%0A-%20**Investors**%3A%20Please%20help%20with%20introductions%20to%20portfolio%20companies%20and%20liquidity%20providers%20in%20the%20space.%20Also%20reach%20out%20if%20this%20technology%20can%20be%20utilized%20in%20startups%20you%20are%20currently%20evaluating.%0A-%20**Protocols**%3A%20Please%20reach%20out%20if%20this%20technology%20(or%20I%20personally)%20can%20help%20you%20drive%20more%20order%20flow%20to%20your%20protocol.%0A-%20**Market%20Makers%20(and%20liquidity%20providers)**%20please%20reach%20out%20if%20you%20want%20to%20develop%20advanced%20trading%20strategies%20and%20liquicity%20management%20functionality%20using%20this%20infrastructure.%0A%0AThis%20reserach%20is%20also%20availabe%20on%20%5Bhackmd.io%5D(https%3A%2F%2Fhackmd.io%2F%40jincubator%2Farbitrage)%0A%0A%3E%20**Disclaimer%3A**%20This%20blog%20post%20covers%20an%20overview%20of%20a%20high%20performant%20solving%2C%20arbitrage%20and%20market%20making%20infrastructure.%20The%20example%20of%20a%20cyclical%20arbitrage%20is%20a%20simple%20one%20but%20useful%20for%20demonstration%20purposes.%20I%20really%20wanted%20to%20show%20the%20foundation%20for%20how%20to%20build%20and%20think%20about%20the%20foundational%20layers%20of%20collectors%2C%20strategies%20and%20execution.%20The%20codebase%20is%20private%20and%20at%20the%20time%20of%20writing%20has%20already%20been%20enhanced%2C%20but%20the%20concepts%20remain%20solid.%0A%0A---%0A%0A%23%23%202025%20%E2%80%93%20A%20Year%20of%20Research%20and%20Growth%0A%0A%23%23%23%20Personal%20Journey%0A%0AThis%20year%20I%20decided%20to%20spend%20my%20time%20coming%20up%20to%20speed%20on%20the%20latest%20innovations%20and%20technologies%20in%20crypto.%20My%20focus%20area%20is%20real-time%20market%20making%20and%20solving%20for%20intent-based%20protocols%20such%20as%20UniswapX%2C%201inch%2C%20and%20Cowswap.%20I%E2%80%99ve%20explored%20breakthroughs%20in%20real-time%20indexing%2C%20simulation%2C%20and%20execution%20pioneered%20by%20Tycho.%0A%0AThis%20journey%20included%3A%0A%0A-%20Attending%20the%20**%5BAtrium%20Uniswap%20V4%20Hook%20Academy%5D(https%3A%2F%2Fatrium.academy%2F)**%0A-%20Hacking%20on%20**1inch%20Limit%20Order%20Protocol**%20%5Barticle%20here%5D(https%3A%2F%2Fhackmd.io%2F%40jincubator%2F1nchTychoNoLiquiditySwap)%0A-%20Prototyping%20%5BUniswapX%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Funiswapx%2Foverviews)%20Fillers%20and%20%5BCowSwap%5D(https%3A%2F%2Fdocs.cow.fi%2Fcow-protocol%2Ftutorials%2Fsolvers)%20Solvers%0A-%20Researching%20cross-chain%20intents%20and%20advanced%20resource%20locking%20using%20the%20**%5Bthe-compact%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fthe-compact%2Foverview)**%20(an%20ERC6909%20vault%20with%20a%20robust%20ecosystem%20of%20sponsors%2C%20allocators%2C%20fillers%2C%20arbiters%2C%20and%20relayers)%0A%0AI%20continually%20refined%20my%20understanding%20of%20high-performance%20solving%20and%20market-making%20using%20**%5BAlloy%5D(https%3A%2F%2Falloy.rs%2F)**%2C%20**Rust**%2C%20and%20**%5BTycho%E2%80%99s%20architecture%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Foverview)**%2C%20which%20leverages%20**%5Bsubstreams%5D(https%3A%2F%2Fsubstreams.dev%2F)**%2C%20advanced%20**router**%2C%20**dispatcher**%2C%20and%20**executor%20technologies**.%20These%20abstractions%20allow%20seamless%20interaction%20with%20protocols%20such%20as%20Uniswap%2C%20Balancer%2C%20SushiSwap%2C%20and%20more.%0A%0AThere's%20no%20better%20way%20to%20come%20up%20to%20speed%20with%20the%20technology%20used%20in%20high%20performance%2C%20market%20making%2C%20solving%20and%20arbitrage%20then%20to%20build%20it.%20So%20this%20is%20what%20I%20set%20out%20to%20do%20and%20start%20with%20a%20simple%20goal.%0A%0A**Goal%3A**%20Build%20an%20arbitrage%20bot%20capable%20of%20generating%20profit%20with%20**no%20upfront%20capital**.%0A%0A%23%23%23%20Result%0A%0ABelow%20are%20the%20details%20of%20the%20first%20positive%20(albeit%20for%20dust)%20cyclical%20arbitrage%20execeuted%20on%20Base%20%5BView%20on%20BaseScan%5D(https%3A%2F%2Fbasescan.org%2Ftx%2F0xde470c186d89aa02e6be2c066b99e7f4e39faebbca9ded80be766f64e28eacfa).%0A%0A%60%60%60bash%0A%F0%9F%8C%90%20BASE%20%202025-09-13%2009%3A51%3A39%0A%F0%9F%92%B0%20Profitable%20route%20found%3A%200x452c93c6f3cc3a10e11571e96bc7c88de3a33ea91a3c28a0d703a04b3bcd309c%20with%20profit%3A%20959%20(0.1568333333333405%25)%0A%F0%9F%8F%86%20Route%3A%20Profit%200.000941%20USDC%20(0.156833%25)%20Input%20Amount%3A%200.6%20%5BUSDC%20-%3E%20WETH%20-%3E%20MOJO%20-%3E%20USDC%5D%0A%F0%9F%94%84%20Route%3A%20%5BUSDC%20-%3E%20WETH%20-%3E%20MOJO%20-%3E%20USDC%5D%20Route%20ID%3A%200x452c93c6f3cc3a10e11571e96bc7c88de3a33ea91a3c28a0d703a04b3bcd309c%0A%E2%9A%99%EF%B8%8F%20Protocols%3A%20%5Buniswap_v3%20-%3E%20uniswap_v2%20-%3E%20uniswap_v2%5D%0A%E2%9B%93%EF%B8%8F%20Tokens%3A%200x833589fcd6edb6e08f4c7c32d4f71b54bda02913%3A0x4200000000000000000000000000000000000006%3A0x6dba065721435cfca05caa508f3316b637861373%3A0x833589fcd6edb6e08f4c7c32d4f71b54bda02913%0A%F0%9F%AA%99%20Start%20token%3A%20USDC%200x833589fcd6edb6e08f4c7c32d4f71b54bda02913%20decimals%3A6%0A%F0%9F%92%8E%20Input%20amounts%3A%200.600000%20-%3E%200.000129%20-%3E%2030728417.014588%0A%E2%AD%90%20Eval%20Raw%20amounts%3A%20600000%20-%3E%20129458828870424%20-%3E%2030728417014587798013457008%20%3D%20600959%0A%F0%9F%94%81%20Pools%3A%200xd0b53d9277642d899df5c87a3966a349a798f224%20%3A%200x7ef7a6e5b577a1c630e42291c25bca791d402493%20%3A%200xfc49208c1222c8037d4be05890b841ad25ceec60%0A%F0%9F%94%81%20Flash%20pool%3A%20pool%3A0x021235b92a4f52c789f43a1b01453c237c265861%20token%3A%202c8c89c442436cc6c0a77943e09c8daf49da3161%20borrowToken0%3Afalse%20fee%3A0.01%25%0A%60%60%60%0A%0A%23%23%23%20Some%20Statistics%0A%0A%23%23%23%23%20Performance%20Statistics%0A%0ABelow%20show%20route%20evaluation%20(and%20execution)%20capabilities%20of%20over%201000%20routes%20per%20second%2C%20run%20on%20small%20relatively%20slow%20mini%20pc.%20This%20is%20a%20summary%20of%20several%20runs%20executed%20on%20mulitple%20chains%20over%20a%20total%20of%2051%20and%20a%20half%20minutes.%0A%0A%7C%20%F0%9F%93%8A%20Statistic%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Value%20%20%20%7C%0A%7C%20-----------------------------%20%7C%20-------%20%7C%0A%7C%20Total%20Routes%20Evaluated%20%20%20%20%20%20%20%20%7C%20182%2C746%20%7C%0A%7C%20Peak%20Routes%2Fsec%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%201%2C146%20%20%20%7C%0A%7C%20Current%20Routes%2Fsec%20(last%20run)%20%7C%201%2C069%20%20%20%7C%0A%7C%20Average%20Route%20Eval%20Time%20(%C2%B5s)%20%20%7C%20424%20%20%20%20%20%7C%0A%7C%20DB%20Throughput%20(ops%2Fsec)%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%7C%0A%7C%20Memory%20Usage%20(MB)%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20657%20%20%20%20%20%7C%0A%7C%20Batch%20Size%20(last%20run)%20%20%20%20%20%20%20%20%20%7C%201%20%20%20%20%20%20%20%7C%0A%7C%20Execution%20Success%20Rate%20(%25)%20%20%20%20%7C%20100%20%20%20%20%20%7C%0A%7C%20Metrics%20Capture%20Duration%20(s)%20%20%7C%203%2C090%20%20%20%7C%0A%0A%23%23%23%23%20Chain%20Stats%0A%0AFollowing%20are%20the%20chains%20we%20used%20for%20our%20evaluation%2C%20testing%20multiple%20chains%2C%20hop%20sizes%20and%20protocols%20to%20give%20a%20well%20balanced%20analysis.%0A%0A%7C%20%F0%9F%93%8A%20Statistic%20%20%20%20%20%20%20%20%20%7C%20Base%20%20%20%7C%20Ethereum%20%7C%20Unichain%20%7C%0A%7C%20--------------------%20%7C%20------%20%7C%20--------%20%7C%20--------%20%7C%0A%7C%20Routes%20Total%20%20%20%20%20%20%20%20%20%7C%2085%2C986%20%7C%2033%2C226%20%20%20%7C%2024%2C600%20%20%20%7C%0A%7C%20Graph%20Edges%20(Pools)%20%20%7C%205%2C338%20%20%7C%204%2C276%20%20%20%20%7C%20114%20%20%20%20%20%20%7C%0A%7C%20Graph%20Nodes%20(Tokens)%20%7C%202%2C477%20%20%7C%201%2C593%20%20%20%20%7C%2033%20%20%20%20%20%20%20%7C%0A%7C%20Total%20Tokens%20%20%20%20%20%20%20%20%20%7C%2026%2C061%20%7C%2011%2C824%20%20%20%7C%2015%2C300%20%20%20%7C%0A%7C%20TVL%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%201%20%20%20%20%20%20%7C%2050%20%20%20%20%20%20%20%7C%201%20%20%20%20%20%20%20%20%7C%0A%7C%20Hops%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%204%20%20%20%20%20%20%7C%203%20%20%20%20%20%20%20%20%7C%205%20%20%20%20%20%20%20%20%7C%0A%7C%20Protocols%20%20%20%20%20%20%20%20%20%20%20%20%7C%202%20%20%20%20%20%20%7C%207%20%20%20%20%20%20%20%20%7C%203%20%20%20%20%20%20%20%20%7C%0A%0A%3E%20Note%20run%20on%20Sep%2026th%202025%0A%3E%20**Routes**%3A%20Represent%20how%20many%20cyclical%20routes%20we%20created%20(e.g.%20A%20-%3E%20B%20-%3E%20C%20-%3E%20A)%0A%3E%20**Graph%20Edges%20(Pools)**%20the%20number%20of%20pools%20we%20are%20selecting%20based%20on%20TVL%20and%20protocol%20filtering%0A%3E%20**Graph%20Nodes%20(Tokens)**%20the%20number%20of%20tokens%20associated%20with%20the%20selected%20pools%0A%3E%20**TVL**%20is%20in%20ETH%20and%20indicates%20the%20minimum%20TVL%20for%20the%20pools%20we%20selected%0A%3E%20**Hops**%20how%20many%20hops%20in%20the%20route%20we%20create%2C%20currently%20we%20support%202%20to%205%20hop%20routes.%20For%20prototyping%20we%20used%20different%20hops%20for%20experimentation%20all%20chains%20support%20up%20to%205%20hops.%0A%3E%20**Protocols**%20the%20number%20of%20protocols%20we%20extracted%20see%20%5BTycho%20Supported%20Protocols%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Ffor-solvers%2Fsupported-protocols)%0A%0A%3E%20Note%20this%20was%20run%20on%20a%20Small%20Computer%20Linux%2C%20AMD%20Ryzen%207%205700u%20(8C%2F16T%2Cup%20to%204.3%20GHz)%2C%20Mini%20PC%20Gamer%2064GB%20DDR4%20RAM%202TB%20PCIe%20SSD%2C%20Mini%20Desktop%20Supports%204K%4060Hz%2FTriple%20Display%2FWiFi%2FBT5.0%2FHDMI%2BDP%2BType%20C%2FHome%2FOffice%0A%0A%23%23%20An%20Overview%20of%20Intent-Based%20Protocols%20and%20Solving%0A%0A%23%23%23%20Resource%20Management%20and%20Capital-Efficient%20Liquidity%0A%0AThe%20key%20to%20building%20a%20high-performance%20system%20lies%20in%20efficient%20resource%20allocation.%20Pools%20themselves%20can%20act%20as%20liquidity%20sources%2C%20and%20flash-loans%20allow%20trades%20to%20execute%20**capital-efficient%20arbitrage**%20without%20requiring%20upfront%20capital.%20With%20the%20advances%20in%20DeFi%20protocols%20such%20as%20%5BUniswap%204%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fv4%2Foverview)%20with%20%5Bhook%20capabilities%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fv4%2Fquickstart%2Fhooks%2Fsetup)%20this%20allowed%20me%20to%20build%20custom%20execution%20logic%20on%20top%20of%20large%20liquidity%20reserves%20giving%20endless%20opportunities.%0A%0AI%20started%20out%20with%20a%20goal%20of%20building%20an%20intent%20based%20hook%2C%20which%20would%20record%20the%20intent%20(e.g.%20swap%201%20ETH%20for%204500%20USDC)%20and%20create%20an%20intent%20which%20I%20could%20solve%2C%20if%20I%20could%20solve%20that%20intent%20giving%20the%20swapper%20a%20better%20return%2C%20than%20I%20could%20keep%20the%20profit.%20For%20example%20if%20the%20pool%20offered%20a%20swap%20of%201%20ETH%20for%204500%20USDC%2C%20but%20I%20had%20a%20better%20route%20that%20could%20swap%201%20ETH%20for%204600%20USDC%2C%20I%20could%20solve%20the%20intent%20giving%20the%20swapper%2C%20say%2C%204550%20USDC%20take%20the%20ETH%20and%20then%20perform%20the%20swap%20netting%2050%20USDC%20profit.%20Whilst%20this%20was%20an%20interesting%20idea%2C%20I%20soon%20came%20to%20realize%20that%20with%20V4's%20pool%20manager%20settlement%20functionality%2C%20it%20was%20better%20to%20build%20the%20intent%20outside%20the%20protocol%20(at%20the%20router%20level)%20rather%20than%20as%20a%20hook.%20Or%20better%20still%20build%20a%20hook%20which%20integrates%20with%20an%20Executor%20such%20Tycho%20with%20perhaps%20some%20Flash%20Loan%20functionality%2C%20more%20to%20come%20on%20this.%0A%0A%23%23%23%20Streaming%2C%20Simulation%2C%20and%20Execution%0A%0AThe%20architecture%20follows%20the%20principle%3A%20**Collectors%20%E2%86%92%20Strategies%20%E2%86%92%20Execution**%0A%0A%23%23%23%23%20Collectors%3A%20Continuously%20stream%20on-chain%20data%0A%0AThe%20bedrock%20of%20the%20collection%20architecture%20is%20the%20%5BTycho%20Indexer%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Ffor-solvers%2Findexer)%20built%20on%20%5Bsubstreams%5D(https%3A%2F%2Fdocs.substreams.dev%2F).%20It%20provides%20real%20time%20state%20updates%20for%20multiple%20protocols%20filtered%20by%20TVL%20values%20for%20those%20protocols.%0A%0AOn%20top%20of%20this%20we%20build%20a%20graph%20manager%20and%20a%20route%20manager%20using%20Depth%20First%20Search%20of%20the%20graph%20to%20create%20the%20routes%20with%20a%20little%20flash_loan_manager%20to%20determine%20the%20optimal%20flash%20loan%20available.%20This%20includes%20choosing%20the%20flash%20loan%20with%20the%20lowest%20fee%20which%20does%20not%20have%20any%20locking%20conflicts%20with%20the%20route.%0A%0AThe%20key%20point%20for%20collection%2C%20once%20again%20enabled%20by%20Tycho%20streaming%20technology%2C%20is%20that%20on%20a%20state%20change%20to%20any%20of%20the%20protocols%20which%20I%20am%20monitoring.%20I%20trigger%20route%20evaluations%20for%20all%20routes%20that%20contain%20that%20pool.%20Evaluating%20whether%20a%20positive%20arbitrage%20cycle%20exists%20or%20not.%20I%20must%20admit%20its%20tireless%20work%20for%20the%20route%20evaluate%20and%20its%20queue%20manager%2C%20evaluating%20hundreds%20or%20even%20thousands%20of%20routes%20per%20block%2C%20but%20occasionally%2C%20just%20occasionally%20an%20opportunity%20will%20be%20found%2C%20which%20makes%20it%20all%20worthwhile.%0A%0A%23%23%23%23%20Strategies%3A%20Analyze%20and%20simulate%20opportunities%0A%0AThe%20first%20(and%20only%20thus%20far)%20strategy%20implemented%20thus%20far%20is%20a%20cyclical%20arbitrage.%20Starting%20and%20ending%20with%20the%20same%20token%20traversing%20throough%20routes%20we%20simulate%20each%20input%20and%20output%20amount%20for%20the%20route%20and%20evaluate%20if%20a%20positve%20aribtrage%20exists.%20If%20so%20a%20Solution%20for%20the%20route%20with%20an%20input%20amount%20is%20Signalled.%20This%20will%20be%20received%20by%20the%20execution%20layer.%0A%0ABelow%20is%20the%20profitability%20calculation%0A%0A%23%23%23%23%20Execution%3A%20Executing%20the%20transactions%0A%0AThe%20exeuction%20layer%20receives%20a%20Solution%20including%20input%20amount%20and%20the%20route%20to%20execute.%20It%20performs%20additional%20aumentation%20and%20encoding.%0A%0AFor%20example%20in%20the%20reference%20cylical%20aribtrage%20the%20executor%20maps%20both%20the%20flash%20loan%20parameters%20and%20swap%20parameters.%20It%20encodes%20the%20solution%20and%20using%20alloy%20binding%20for%20flashExecutor%20creates%20the%20calldata%20for%20the%20transaction.%0A%0AThe%20executor%20itself%20has%20pre-flight%20validation%20which%20will%20capture%20any%20identified%20routes%20which%20may%20no%20longer%20be%20profitabile%20or%20error%20because%20of%20other%20upstream%20analysis%20issues.%20This%20saves%20wasting%20gas%20on%20transactions%20that%20will%20revert.%0A%0A%23%23%20Profitability%20Calculation%0A%0ALet%20%60A0%60%20be%20amount_in%20(start%20token)%2C%20%60Ak%60%20be%20amount_out%20(end%20token)%2C%20%60fee_hundredths_bip%60%20the%20flash%20fee%20in%201e-6%20units.%0A%0A-%20swap_profit_percentage%20%3D%20((Ak%20%E2%88%92%20A0)%20%2F%20A0)%20%C3%97%20100%0A-%20flash_fee_pct%20%3D%20fee_hundredths_bip%20%2F%2010_000%20(as%20percent)%0A-%20net_profit_percentage%20%3D%20swap_profit_percentage%20%E2%88%92%20flash_fee_pct%0A-%20net_profit_token%20%3D%20Ak%20%E2%88%92%20A0%20%E2%88%92%20floor(A0%20%C3%97%20fee_hundredths_bip%20%2F%201_000_000)%0A%0AThreshold%20gating%20uses%20%60net_profit_percentage%20%3E%3D%20profit_threshold%60%20(default%200.0%25).%0A%0AAt%20this%20time%20we%20then%20need%20to%20optimize%20the%20input%20amount%20for%20the%20route.%0AThis%20is%20done%20using%20a%20binary%20doubling%20and%20halving%20algorithm%20until%20the%20optimal%20amount%20is%20found.%0A%0A-%20**Execution**%3A%20Optimistically%20execute%20profitable%20paths%0A%0A---%0A%0A%23%23%20Building%20a%20Liquidity%20Mapping%20Layer%0A%0AConceptually%20this%20was%20farly%20straight%20forward%2C%20create%20a%20graph%20with%20Tokens%20as%20Nodes%2C%20Pools%20as%20edges%20and%20then%20create%20routes%20for%20that%20graph.%20With%20the%20protocol%20abstraction%20offered%20by%20tycho's%20component%20and%20state%20model.%20A%20pool%20is%20a%20pool%20is%20a%20pool%20regardles%20of%20what%20the%20underlying%20protocol%20is.%20This%20simplified%20the%20implementation%20considerably%0A%0A---%0A%0A%23%23%20My%20First%20Strategy%3A%20Cyclical%20Arbitrage%0A%0A%23%23%23%20(Hello%20Bellman-Ford)%0A%0A-%20Analytical%20optimization%20for%20multi-hop%20routes%0A-%20Supports%20**2%E2%80%935%20hop%20cycles**%0A-%20Prioritizes%20**profitability%20and%20performance**%20(~1000%20routes%2Fsec)%0A%0A%3E%20An%20open%20strategy%20framework%20is%20under%20development%20with%20the%20Cyclica%20Arbitrage%20(CARB)%20implemented%20and%20a%20TOKEN%20(token%20based%20arbitrage%20which%20groups%20all%20the%20routes%20for%20the%20input%20token%20and%20selects%20the%20route%20with%20the%20highest%20profitability)%20currently%20being%20tested%20in%20production.%0A%0A---%0A%0A%23%23%20The%20Execution%20Layer%20%E2%80%93%20Making%20It%20Happen%0A%0A%23%23%23%20Some%20Flash%20Loan%20Magic%0A%0A-%20Borrow%20liquidity%20directly%20from%20pools%20for%20capital-efficient%20trades%0A-%20Near-zero%20fees%2C%20instant%20execution%0A%0A%23%23%23%20The%20Beauty%20of%20Routes%3A%20Single%20and%20Sequential%20Swaps%0A%0A-%20**Atomic%20Execution**%3A%20Trades%20revert%20if%20not%20profitable%0A-%20**Optimistic%20Recursive%20Execution**%3A%20Capture%20secondary%20opportunities%20generated%20by%20large%20trades%0A%0A---%0A%0A%23%23%23%20Summary%20of%20Features%0A%0A-%20Multi-chain%2C%20multi-protocol%20route%20evaluation%0A-%20Multi-hop%20arbitrage%20support%0A-%20Flash-loan%20enabled%20trades%0A-%20Persistent%20storage%20for%20faster%20startup%0A-%20Modular%20queues%20for%20streaming%2C%20graph%2C%20route%20management%2C%20evaluation%2C%20and%20execution%0A%0A---%0A%0A%23%23%23%20Key%20Milestones%0A%0A-%20**First%20Working%20Transaction%3A**%20%5BView%20on%20BaseScan%5D(https%3A%2F%2Fbasescan.org%2Ftx%2F0xde470c186d89aa02e6be2c066b99e7f4e39faebbca9ded80be766f64e28eacfa)%0A-%20Support%20for%20**2%E2%80%935%20hop%20routes**%0A-%20**Standalone%20persistence**%20for%20tokens%2C%20graphs%2C%20and%20routes%0A-%20**Multi-protocol%20support**%3A%0A%20%20-%20Ethereum%3A%20Uniswap%20v2%2Fv3%2Fv4%2C%20Balancer%20v2%2C%20Curve%2C%20Sushiswap%20v2%2C%20Pancakeswap%20v2%2Fv3%2C%20Ekubo%20v2%0A%20%20-%20Base%3A%20Uniswap%20v2%2Fv3%0A%20%20-%20Unichain%20Uniswap%20v2%2Fv3%2Fv4%0A-%20SingleSwap%20Support%20takes%20advantage%20of%20complex%20routes%20using%20Uniswap%20V4%20advanced%20Execution%0A-%20**Performance**%3A%20~1000%20route%20evaluations%20per%20second%0A-%20Prototype%20**v4%20Flash%20Loans**%20(near-zero%20fees)%0A%0A---%0A%0A%23%23%23%20Still%20to%20Come%0A%0AAt%20time%20of%20writing%20these%20features%20are%20being%20evaluated%20and%2For%20implemented%0A%0A-%20Gas%20manager%0A-%20MEV%20bundling%0A-%20Token%20based%20evaluation%20(grouping%20of%20all%20routes%20for%20a%20token%20to%20ensure%20the%20most%20profitable%20arbitrage)%0A-%20Additional%20protocol%20integrations%0A-%20Further%20performance%20optimizations%0A-%20Uniswap%20V4%20Flash%20Hook%20(Access%20to%20V4%20Liquidity%20integrated%20with%20complex%20routing%20and%20exeuction%20strategies)%0A-%20Liquidity%20Management%20(ERC-6909%20based%20liquidity%20manageer%20build%20on%20%5Bthe-compact%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fthe-compact%2Foverview)%20from%20Uniswap)%0A%0A---%0A%0A%23%23%20What%E2%80%99s%20Next%20%E2%80%93%20Opportunities%20%26%20Integrations%0A%0A%23%23%23%20Filling%20Strategies%0A%0AMulti%20protocol%20solver%20integrations%20including%0A%0A-%20**UniswapX%20Solving**%0A-%20**1inch%20Limit%20Order%20Solver%20Integration**%0A-%20**Cowswap%20Solving**%0A%0A%23%23%23%20Flash%20Liquidity%0A%0A-%20**Uniswap%20%2F%20Tycho%20Limit%20Order%20Hook%20Integration**%0A%0A%23%23%23%20Protocol%20Order%20Flow%0A%0AAdding%20additional%20protocols%20to%20the%20simulation%20and%20execution%20framework%20to%20drive%20order%20flow.%0A%0A%23%23%23%20Liquidity%20Management%0A%0AIntroducing%20an%20advanced%20liquidity%20management%20infrastructure%20with%20real%20time%20settlement%2C%20JIT%20liqidity%20provioning%20and%20support%20for%20advanced%20trading%20strategies.%20(ERC-6909%20based%20liquidity%20manageer%20build%20on%20%5Bthe-compact%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fthe-compact%2Foverview)%20from%20Uniswap)%0A%0A%23%23%23%20Miscellaneous%0A%0A-%20Hosted%20services%20for%20Market%20Makers%20and%20Solvers%0A-%20Collaboration%20and%20Consulting%20for%20Protocols%20looking%20to%20attract%20more%20order%20flow.%0A-%20Strategy%20development%20for%20Solving%2C%20Market%20Making%20and%20Liquidation%20Engines.%0A%0A%23%20Appendices%0A%0A%23%23%20Appendix%20A%3A%20Mathematics%0A%0A%23%23%23%20Route%20Manager%0A%0AThe%20Route%20Manager%20enumerates%20all%20possible%20multi-hop%20routes%20through%20the%20liquidity%20graph.%20We%20use%20a%20modified%20Depth-First%20Search%20(DFS)%20traversal%20to%20explore%20potential%20sequences%20of%20swaps%2C%20iterating%20through%20multiple%20nodes%20while%20avoiding%20revisiting%20tokens%20in%20the%20same%20route.%0A%0AMathematically%2C%20for%20a%20graph%20%24%24G%20%3D%20(V%2C%20E)%24%24%20with%20vertices%20%24V%24%20representing%20tokens%20and%20edges%20%24E%24%20representing%20liquidity%20pools%2C%20DFS%20can%20be%20described%20recursively%20as%3A%0A%0ADFS(v)%20%3D%20visit%20all%20neighbors%20of%20v%20recursively%20without%20revisiting%20nodes%20in%20the%20current%20path%0A%0AOur%20implementation%20supports%20two%20main%20modes%3A%0A%0A1.%20**Full%20Graph%20Rebuild%3A**%20Clears%20all%20existing%20graph%20data%20and%20rebuilds%20from%20scratch%2C%20adding%20pools%20in%20bulk%20or%20individually%20depending%20on%20dataset%20size.%20V4%20eligibility%20of%20tokens%20is%20processed%20for%20all%20pools.%0A2.%20**Incremental%20Updates%3A**%20Adds%20new%20pools%20to%20the%20existing%20graph%20without%20clearing%20prior%20data.%20Optimized%20for%20%24O(n)%24%20complexity%20relative%20to%20the%20number%20of%20new%20pools.%0A%0AEdges%20are%20bidirectional%20between%20token%20pairs%3A%0A%0A%24%24%0AA%20%5Cleftrightarrow%20B%0A%24%24%0A%0AEach%20edge%20stores%20metadata%20including%20the%20pool%20identifier%2C%20output%20token%2C%20protocol%2C%20and%20fee%20basis%20points.%0A%0A%23%23%23%23%20Modified%20DFS%20Traversal%0A%0AInstead%20of%20a%20simple%20recursive%20DFS%2C%20the%20route%20manager%20iteratively%20explores%20each%20node%20while%20accounting%20for%3A%0A%0A-%20Pool%20and%20token%20blacklists%20to%20prevent%20invalid%20routes%0A-%20Multi-protocol%20support%20(Uniswap%20V2%2FV3%2FV4%2C%20Sushiswap%2C%20Pancakeswap%2C%20Ekubo%2C%20Balancer%2C%20Curve)%0A-%20Flash%20loan%20constraints%20to%20avoid%20locking%20conflicts%0A-%20Real-time%20V4%20eligibility%20of%20tokens%0A%0AThe%20traversal%20maintains%20a%20stack%20of%20paths%2C%20extending%20each%20path%20by%20iterating%20over%20neighbor%20tokens.%20If%20a%20neighbor%20has%20already%20been%20visited%20in%20the%20current%20path%2C%20it%20is%20skipped%20to%20prevent%20cycles%20that%20do%20not%20start%20and%20end%20at%20the%20same%20token.%0A%0A%23%23%23%23%20Graph%20Construction%20Overview%0A%0A-%20Assign%20unique%20identifiers%20for%20each%20pool%20and%20token%0A-%20Create%20bidirectional%20edges%20connecting%20the%20token%20pair%0A-%20Update%20adjacency%20structures%20for%20fast%20neighbor%20lookup%0A-%20Persist%20edges%20to%20storage%20in%20both%20compact%20and%20legacy%20formats%0A%0A%23%23%23%23%20DFS%20Context%0A%0ADepth-first%20search%20is%20an%20algorithm%20for%20traversing%20or%20searching%20tree%20or%20graph%20structures.%20Starting%20at%20a%20root%20node%20(or%20an%20arbitrary%20node%20in%20a%20general%20graph)%2C%20DFS%20explores%20as%20far%20as%20possible%20along%20each%20branch%20before%20backtracking.%20A%20stack%20(explicit%20or%20via%20recursion)%20tracks%20the%20nodes%20visited%20along%20the%20current%20branch.%0A%0AIn%20the%20arbitrage%20solver%2C%20DFS%20enumerates%20all%20candidate%20routes%20for%20evaluation%20by%20the%20Route%20Evaluator%2C%20ensuring%20that%20profitable%20multi-hop%20cycles%20are%20identified%20while%20respecting%20token%20and%20pool%20constraints.%0A%0A---%0A%0A%23%23%23%20Route%20Evaluator%0A%0AThe%20route%20evaluation%20process%20leverages%20the%20Bellman%E2%80%93Ford%20algorithm%20to%20detect%20negative-weight%20cycles%20that%20correspond%20to%20profitable%20arbitrage%20opportunities%3A%0A%0A%60d(v)%20%3D%20min_%7B(u%2Cv)%20in%20E%7D%20%5B%20d(u)%20%2B%20w(u%2Cv)%20%5D%60%0A%0ANegative-weight%20cycles%20represent%20opportunities%20where%20the%20sequence%20of%20swaps%20results%20in%20a%20net%20gain%20after%20accounting%20for%20fees.%0A%0A%3E%20Token%20Evaluation%20is%20in%20progress%20this%20groups%20all%20the%20routes%20for%20the%20input%20token%20and%20selects%20the%20route%20with%20the%20highest%20profitability%0A%0A---%0A%0A%23%23%23%20Optimal%20Amount%20Calculator%0A%0AThe%20function%20%60find_optimal_input_amount%60%20computes%20the%20**capital-efficient%20input%20amount**%20for%20a%20given%20arbitrage%20or%20swap%20route%20to%20maximize%20profit.%20%20%0AMathematically%2C%20it%20is%20an%20**iterative%20optimization%20problem**%20combining%20**exponential%20search**%20and%20**binary%20search**%20over%20discrete%20input%20amounts.%0A%0A---%0A%0A%23%23%23%23%20Step%200%3A%20Initialization%0A%0ALet%3A%0A%0A-%20%60A_min%60%20%3D%20initial%20minimum%20input%20(e.g.%2C%200.1%20token)%0A-%20%60A_max%60%20%3D%20upper%20bound%20(initialized%20as%20%60A_min%60)%0A-%20%60P_best%20%3D%200%60%20%3D%20best%20observed%20profit%0A-%20%60A_best%20%3D%20A_min%60%20%3D%20best%20input%20amount%0A-%20%60%CE%B5%60%20%3D%20minimum%20input%20resolution%20(based%20on%20token%20decimals%2C%20e.g.%2C%200.001%20token)%0A%0ADefine%3A%0A%0A-%20%60profit(amount)%60%20%3D%20evaluation%20function%20that%20returns%20absolute%20profit%20from%20using%20%60amount%60%20on%20the%20route.%0A%0A---%0A%0A%23%23%23%23%20Phase%201%3A%20Doubling%20Search%20(Exponential%20Growth)%0A%0A**Goal%3A**%20Quickly%20find%20an%20**upper%20bound**%20for%20profitable%20input.%0A%0A1.%20Set%20%60A%20%3D%20A_min%60%0A2.%20Repeat%20for%20a%20maximum%20number%20of%20iterations%3A%0A%20%20%201.%20Evaluate%20profit%3A%20%60P%20%3D%20profit(A)%60%0A%20%20%202.%20If%20%60P%20%3E%20P_best%60%2C%20update%3A%0A%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20P_best%20%3D%20P%0A%20%20%20%20%20%20A_best%20%3D%20A%0A%20%20%20%20%20%20%60%60%60%0A%20%20%203.%20If%20profit%20drops%20below%20threshold%20or%20declines%20significantly%2C%20stop%20doubling%0A%20%20%204.%20Else%2C%20double%20the%20input%3A%0A%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20A%20%3D%202%20*%20A%0A%20%20%20%20%20%20%60%60%60%0A%0A**Result%3A**%0A%0A-%20%60A_max%20%3D%20A%60%20(approximate%20upper%20bound)%0A-%20%60A_min%60%20%3D%20last%20profitable%20input%20from%20doubling%0A%0A%3E%20This%20phase%20is%20equivalent%20to%20an%20**exponential%20search**%20to%20find%20the%20range%20where%20the%20optimal%20input%20lies.%0A%0A---%0A%0A%23%23%23%23%20Phase%202%3A%20Binary%20Search%20(Refinement)%0A%0A**Goal%3A**%20Refine%20the%20optimal%20input%20within%20%60%5BA_min%2C%20A_max%5D%60.%0A%0A1.%20While%20%60A_max%20-%20A_min%20%3E%20%CE%B5%60%20and%20iterations%20%3C%20%60max_search_iterations%60%3A%0A%20%20%201.%20Compute%20midpoint%3A%0A%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20A_mid%20%3D%20(A_min%20%2B%20A_max)%20%2F%202%0A%20%20%20%20%20%20%60%60%60%0A%20%20%202.%20Evaluate%20profit%20at%20midpoint%3A%20%60P%20%3D%20profit(A_mid)%60%0A%20%20%203.%20Update%20best%3A%0A%20%20%20%20%20%20-%20If%20%60P%20%3E%20P_best%60%2C%20then%3A%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20A_best%20%3D%20A_mid%0A%20%20%20%20%20%20%20%20P_best%20%3D%20P%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%204.%20Update%20bounds%20for%20next%20iteration%3A%0A%20%20%20%20%20%20-%20If%20midpoint%20profit%20%3E%20previous%20profit%20%E2%86%92%20search%20higher%3A%20%60A_min%20%3D%20A_mid%60%0A%20%20%20%20%20%20-%20Else%20%E2%86%92%20search%20lower%3A%20%60A_max%20%3D%20A_mid%60%0A%0A**Result%3A**%0A%0A-%20%60A_best%60%20approximates%20the%20**input%20amount%20that%20maximizes%20profit**%20within%20desired%20precision.%0A%0A---%0A%0A%23%23%23%23%20Mathematical%20Summary%0A%0A-%20**Exponential%20search%3A**%20Quickly%20find%20search%20range%20%60%5BA_min%2C%20A_max%5D%60%0A-%20**Binary%20search%3A**%20Efficiently%20refine%20the%20optimum%20within%20that%20range%0A-%20**Profit%20metric%3A**%20Absolute%20profit%20(%60output%20-%20input%60)%20used%20to%20select%20best%20amount%0A-%20**Dynamic%20adjustments%3A**%20Optional%20function%20to%20tweak%20inputs%20if%20routes%20behave%20non-linearly%20or%20have%20state-dependent%20constraints.%0A%0A%60%60%60%0Amaximize%20P(A)%20%3D%20profit%20from%20route%20given%20input%20A%0A%0Asubject%20to%3A%0A%20%20%20%20A_min%20%3C%3D%20A%20%3C%3D%20A_max%0A%20%20%20%20P(A)%20%3E%3D%20profit_threshold%0A%0Awhere%3A%0A%20%20%20%20A_max%20is%20found%20via%20exponential%20doubling%0A%20%20%20%20A_best%20is%20refined%20via%20binary%20search%0A%60%60%60%0A%0A-%20**Exponential%20search%3A**%20Quickly%20find%20search%20range%20%60%5BA_min%2C%20A_max%5D%60%0A-%20**Binary%20search%3A**%20Efficiently%20refine%20the%20optimum%20within%20that%20range%0A-%20**Profit%20metric%3A**%20Absolute%20profit%20(%60output%20-%20input%60)%20used%20to%20select%20best%20amount%0A-%20**Dynamic%20adjustments%3A**%20Optional%20function%20to%20tweak%20inputs%20if%20routes%20behave%20non-linearly%20or%20have%20state-dependent%20constraints.%0A%0A---%0A%0A%23%23%23%20Arbitrage%20Profit%20Calculation%0A%0ANet%20profit%20percentage%20for%20a%20route%3A%0A%0A%60%60%60%0Aswap_profit_pct%20%3D%20(A_k%20-%20A_0)%20%2F%20A_0%20*%20100%0A%0Aflash_fee_pct%20%3D%20fee_hundredths_bip%20%2F%2010%2C000%0A%0Anet_profit_pct%20%3D%20swap_profit_pct%20-%20flash_fee_pct%0A%0Anet_profit_token%20%3D%20A_k%20-%20A_0%20-%20floor(%20A_0%20*%20fee_hundredths_bip%20%2F%201%2C000%2C000%20)%0A%60%60%60%0A%0A%23%23%20Appendix%20B%3A%20Performance%0A%0A%23%23%23%20Chain%20Breakdown%0A%0A%7C%20%F0%9F%93%8A%20Statistic%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Base%20%20%20%7C%20Ethereum%20%7C%20Unichain%20%7C%0A%7C%20---------------------------%20%7C%20------%20%7C%20--------%20%7C%20--------%20%7C%0A%7C%20Total%20Tokens%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%2026%2C061%20%7C%2011%2C824%20%20%20%7C%2015%2C300%20%20%20%7C%0A%7C%20Graph%20Nodes%20(Tokens)%20%20%20%20%20%20%20%20%7C%202%2C477%20%20%7C%201%2C593%20%20%20%20%7C%2033%20%20%20%20%20%20%20%7C%0A%7C%20Graph%20Nodes%20(V4%20Eligible)%20%20%20%7C%20838%20%20%20%20%7C%20826%20%20%20%20%20%20%7C%2033%20%20%20%20%20%20%20%7C%0A%7C%20Graph%20Nodes%20(V4%20Ineligible)%20%7C%201%2C639%20%20%7C%20767%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%7C%0A%7C%20Graph%20Edges%20(Pools)%20%20%20%20%20%20%20%20%20%7C%205%2C338%20%20%7C%204%2C276%20%20%20%20%7C%20114%20%20%20%20%20%20%7C%0A%7C%20Routes%20Total%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%2085%2C986%20%7C%2033%2C226%20%20%20%7C%2024%2C600%20%20%20%7C%0A%7C%20Routes%20Flash%20V4%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%2085%2C616%20%7C%2019%2C284%20%20%20%7C%2068%20%20%20%20%20%20%20%7C%0A%7C%20Routes%20Flash%20Other%20%20%20%20%20%20%20%20%20%20%7C%202%20%20%20%20%20%20%7C%2011%2C762%20%20%20%7C%2019%2C162%20%20%20%7C%0A%7C%20Routes%20Flash%20Error%20%20%20%20%20%20%20%20%20%20%7C%20368%20%20%20%20%7C%202%2C180%20%20%20%20%7C%205%2C370%20%20%20%20%7C%0A%7C%20**TVL**%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%201%20%20%20%20%20%20%7C%2050%20%20%20%20%20%20%20%7C%201%20%20%20%20%20%20%20%20%7C%0A%7C%20**HOPS**%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%204%20%20%20%20%20%20%7C%203%20%20%20%20%20%20%20%20%7C%205%20%20%20%20%20%20%20%20%7C%0A%0A%23%23%23%20Performance%20Summary%0A%0A%7C%20%F0%9F%93%8A%20Statistic%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Value%20%20%20%7C%0A%7C%20-----------------------------%20%7C%20-------%20%7C%0A%7C%20Total%20Routes%20Evaluated%20%20%20%20%20%20%20%20%7C%20182%2C746%20%7C%0A%7C%20Peak%20Routes%2Fsec%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%201%2C146%20%20%20%7C%0A%7C%20Current%20Routes%2Fsec%20(last%20run)%20%7C%201%2C069%20%20%20%7C%0A%7C%20Average%20Route%20Eval%20Time%20(%C2%B5s)%20%20%7C%20424%20%20%20%20%20%7C%0A%7C%20DB%20Throughput%20(ops%2Fsec)%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%7C%0A%7C%20Memory%20Usage%20(MB)%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20657%20%20%20%20%20%7C%0A%7C%20Batch%20Size%20(last%20run)%20%20%20%20%20%20%20%20%20%7C%201%20%20%20%20%20%20%20%7C%0A%7C%20Execution%20Success%20Rate%20(%25)%20%20%20%20%7C%20100%20%20%20%20%20%7C%0A%7C%20Metrics%20Capture%20Duration%20(s)%20%20%7C%203%2C090%20%20%20%7C%0A%0A%23%23%23%20Performance%20Detail%0A%0A%7C%20Timestamp%20%20%20%20%20%20%20%20%20%20%20%7C%20Total%20Routes%20%7C%20Avg%20Eval%20Time%20(%C2%B5s)%20%7C%20Peak%20Routes%2Fsec%20%7C%20Current%20Routes%2Fsec%20%7C%20DB%20Throughput%20(ops%2Fsec)%20%7C%20Memory%20(MB)%20%7C%20Batch%20Size%20%7C%20Success%20Rate%20(%25)%20%7C%20Metrics%20Capture%20Duration%20(s)%20%7C%0A%7C%20-------------------%20%7C%20------------%20%7C%20------------------%20%7C%20---------------%20%7C%20------------------%20%7C%20-----------------------%20%7C%20-----------%20%7C%20----------%20%7C%20----------------%20%7C%20----------------------------%20%7C%0A%7C%202025-09-26T18%3A02%3A16%20%7C%209%2C248%20%20%20%20%20%20%20%20%7C%2057%2C020%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20190%20%20%20%20%20%20%20%20%20%7C%203%2C122%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200.10%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%202025-09-27T01%3A27%3A13%20%7C%2033%2C042%20%20%20%20%20%20%20%7C%201%2C159%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20576%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20507%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20279%20%20%20%20%20%20%20%20%20%7C%201%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%2031.60%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%202025-09-27T01%3A28%3A31%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20142%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200.10%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%202025-09-27T01%3A29%3A52%20%7C%2013%2C896%20%20%20%20%20%20%20%7C%204%2C799%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20464%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%2010%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20247%20%20%20%20%20%20%20%20%20%7C%201%20%20%20%20%20%20%20%20%20%20%7C%20100%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%2036.82%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%202025-09-27T02%3A28%3A52%20%7C%208%2C508%20%20%20%20%20%20%20%20%7C%203%2C188%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20483%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20334%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20243%20%20%20%20%20%20%20%20%20%7C%201%20%20%20%20%20%20%20%20%20%20%7C%20100%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%2036.02%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%202025-09-27T05%3A26%3A44%20%7C%2024%2C262%20%20%20%20%20%20%20%7C%201%2C160%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20641%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%2090%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20248%20%20%20%20%20%20%20%20%20%7C%201%20%20%20%20%20%20%20%20%20%20%7C%2040%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%2038.74%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%202025-09-27T06%3A10%3A32%20%7C%2057%20%20%20%20%20%20%20%20%20%20%20%7C%201%2C456%2C807%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20207%20%20%20%20%20%20%20%20%20%7C%2057%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200.24%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%202025-09-27T06%3A25%3A54%20%7C%20928%20%20%20%20%20%20%20%20%20%20%7C%20185%2C317%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20302%20%20%20%20%20%20%20%20%20%7C%20928%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200.16%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%202025-09-27T06%3A39%3A39%20%7C%202%2C138%20%20%20%20%20%20%20%20%7C%20289%2C502%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20418%20%20%20%20%20%20%20%20%20%7C%202%2C138%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200.25%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%202025-09-27T07%3A51%3A53%20%7C%2038%2C810%20%20%20%20%20%20%20%7C%20605%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%201%2C023%20%20%20%20%20%20%20%20%20%20%20%7C%20674%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20412%20%20%20%20%20%20%20%20%20%7C%201%20%20%20%20%20%20%20%20%20%20%7C%20100%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20226.02%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%202025-09-27T10%3A36%3A00%20%7C%203%2C135%20%20%20%20%20%20%20%20%7C%202%2C514%2C005%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20450%20%20%20%20%20%20%20%20%20%7C%203%2C135%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%207%2C885.70%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%202025-09-27T16%3A51%3A53%20%7C%20182%2C746%20%20%20%20%20%20%7C%20354%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%201%2C146%20%20%20%20%20%20%20%20%20%20%20%7C%201%2C069%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20657%20%20%20%20%20%20%20%20%20%7C%201%20%20%20%20%20%20%20%20%20%20%7C%20100%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%203%2C090.32%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%202025-09-27T17%3A08%3A56%20%7C%2060%2C618%20%20%20%20%20%20%20%7C%20424%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%201%2C033%20%20%20%20%20%20%20%20%20%20%20%7C%20968%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20494%20%20%20%20%20%20%20%20%20%7C%201%20%20%20%20%20%20%20%20%20%20%7C%2087%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20416.48%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%0A%23%23%20Appendix%20C%3A%20Reference%20Implementation%0A%0A%23%23%23%20Architecture%20Overview%0A%0AThe%20Tycho%20solver%20system%20implements%20a%20sophisticated%20arbitrage%20bot%20capable%20of%20generating%20profit%20with%20**no%20upfront%20capital**%20through%20flash%20loan-based%20execution.%20The%20architecture%20follows%20a%20**streaming-first%20approach**%20that%20processes%20real-time%20blockchain%20data%20to%20identify%20and%20execute%20profitable%20arbitrage%20opportunities.%0A%0A%23%23%23%23%20Core%20Design%20Principles%0A%0A1.%20**Collectors%20%E2%86%92%20Strategies%20%E2%86%92%20Execution**%3A%20Modular%20architecture%20with%20clear%20separation%20of%20concerns%0A2.%20**Real-time%20Processing**%3A%20Live%20blockchain%20data%20streaming%20via%20Tycho%20protocol%20streams%0A3.%20**Capital%20Efficiency**%3A%20Flash%20loan%20integration%20eliminates%20upfront%20capital%20requirements%0A4.%20**Multi-protocol%20Support**%3A%20Uniswap%20V2%2C%20V3%2C%20V4%20with%20extensible%20protocol%20framework%0A5.%20**Performance%20Optimization**%3A%20Microsecond-level%20route%20evaluation%20and%20execution%0A%0A%23%23%23%23%20System%20Architecture%0A%0A%60%60%60mermaid%0Agraph%20TB%0A%20%20%20%20subgraph%20%22External%20Data%20Sources%22%0A%20%20%20%20%20%20%20%20TYCHO%5BTycho%20Protocol%20Streams%5D%0A%20%20%20%20%20%20%20%20RPC%5BBlockchain%20RPC%5D%0A%20%20%20%20%20%20%20%20API%5BTycho%20API%5D%0A%20%20%20%20end%0A%0A%20%20%20%20subgraph%20%22solver_core%20(Pure%20Logic)%22%0A%20%20%20%20%20%20%20%20TYPES%5BDomain%20Types%5D%0A%20%20%20%20%20%20%20%20TRAITS%5BInterfaces%2FTraits%5D%0A%20%20%20%20%20%20%20%20MATH%5BFixedPoint%20Math%5D%0A%20%20%20%20%20%20%20%20PROTOCOL%5BProtocol%20Models%5D%0A%20%20%20%20end%0A%0A%20%20%20%20subgraph%20%22solver_driver%20(Runtime)%22%0A%20%20%20%20%20%20%20%20subgraph%20%22Data%20Collection%22%0A%20%20%20%20%20%20%20%20%20%20%20%20STREAMING%5BStreaming%20Engine%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20COLLECTORS%5BData%20Collectors%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20STORE%5BPool%20Store%5D%0A%20%20%20%20%20%20%20%20end%0A%0A%20%20%20%20%20%20%20%20subgraph%20%22Processing%20Pipeline%22%0A%20%20%20%20%20%20%20%20%20%20%20%20GRAPH%5BGraph%20Manager%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20ROUTES%5BRoute%20Manager%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20ANALYZER%5BRoute%20Analyzer%5D%0A%20%20%20%20%20%20%20%20end%0A%0A%20%20%20%20%20%20%20%20subgraph%20%22Execution%20Pipeline%22%0A%20%20%20%20%20%20%20%20%20%20%20%20ENCODER%5BSolution%20Encoder%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20EXECUTOR%5BExecution%20Engine%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20SENDER%5BTransaction%20Sender%5D%0A%20%20%20%20%20%20%20%20end%0A%0A%20%20%20%20%20%20%20%20subgraph%20%22Persistence%22%0A%20%20%20%20%20%20%20%20%20%20%20%20DB%5BRocksDB%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20CACHE%5BMemory%20Cache%5D%0A%20%20%20%20%20%20%20%20end%0A%20%20%20%20end%0A%0A%20%20%20%20subgraph%20%22Smart%20Contracts%22%0A%20%20%20%20%20%20%20%20ROUTER%5BFlashV3Router%5D%0A%20%20%20%20%20%20%20%20POOLS%5BDEX%20Pools%5D%0A%20%20%20%20end%0A%0A%20%20%20%20subgraph%20%22CLI%20Tools%22%0A%20%20%20%20%20%20%20%20ARBITRAGER%5BArbitrager%5D%0A%20%20%20%20%20%20%20%20ROUTE_EXEC%5BRoute%20Executor%5D%0A%20%20%20%20%20%20%20%20TYCHO_CLI%5BTycho%20CLI%5D%0A%20%20%20%20end%0A%0A%20%20%20%20%25%25%20Data%20Flow%0A%20%20%20%20TYCHO%20--%3E%20STREAMING%0A%20%20%20%20RPC%20--%3E%20COLLECTORS%0A%20%20%20%20API%20--%3E%20COLLECTORS%0A%0A%20%20%20%20STREAMING%20--%3E%20STORE%0A%20%20%20%20STORE%20--%3E%20GRAPH%0A%20%20%20%20GRAPH%20--%3E%20ROUTES%0A%20%20%20%20ROUTES%20--%3E%20ANALYZER%0A%20%20%20%20ANALYZER%20--%3E%20ENCODER%0A%20%20%20%20ENCODER%20--%3E%20EXECUTOR%0A%20%20%20%20EXECUTOR%20--%3E%20SENDER%0A%0A%20%20%20%20STORE%20--%3E%20DB%0A%20%20%20%20ROUTES%20--%3E%20DB%0A%20%20%20%20GRAPH%20--%3E%20DB%0A%0A%20%20%20%20SENDER%20--%3E%20ROUTER%0A%20%20%20%20ROUTER%20--%3E%20POOLS%0A%0A%20%20%20%20ARBITRAGER%20--%3E%20STREAMING%0A%20%20%20%20ROUTE_EXEC%20--%3E%20ANALYZER%0A%20%20%20%20TYCHO_CLI%20--%3E%20DB%0A%0A%20%20%20%20%25%25%20Core%20Dependencies%0A%20%20%20%20TYPES%20--%3E%20STREAMING%0A%20%20%20%20TRAITS%20--%3E%20ANALYZER%0A%20%20%20%20MATH%20--%3E%20ANALYZER%0A%20%20%20%20PROTOCOL%20--%3E%20STORE%0A%60%60%60%0A%0A%23%23%23%20Liquidity%20Mapping%20Collector%0A%0AThe%20liquidity%20mapping%20collector%20system%20provides%20comprehensive%20chain%20indexing%20capabilities%20through%20integration%20with%20Tycho%20protocol%20streams%2C%20enabling%20real-time%20monitoring%20of%20blockchain%20state%20changes%20across%20multiple%20supported%20chains.%0A%0A%23%23%23%23%20Persistence%0A%0AThe%20system%20uses%20**RocksDB**%20as%20its%20primary%20database%20engine%20with%20a%20column%20family%20architecture%20optimized%20for%20high-performance%20operations%3A%0A%0A%7C%20Column%20Family%20%7C%20Purpose%20%20%20%20%20%20%20%20%20%20%20%7C%20Key%20Format%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Value%20Format%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20-------------%20%7C%20-----------------%20%7C%20-----------------------%20%7C%20-------------------------------%20%7C%0A%7C%20%60tokens%60%20%20%20%20%20%20%7C%20Token%20metadata%20%20%20%20%7C%20%60token%3A%3Caddress%3E%60%20%20%20%20%20%20%20%7C%20Serialized%20%60Token%60%20struct%20%20%20%20%20%20%20%7C%0A%7C%20%60graph%60%20%20%20%20%20%20%20%7C%20Graph%20edges%20%20%20%20%20%20%20%7C%20%60graph%3A%3Ctoken_address%3E%60%20%7C%20Serialized%20%60Vec%3CCompactEdge%3E%60%20%20%20%7C%0A%7C%20%60routes%60%20%20%20%20%20%20%7C%20Calculated%20routes%20%7C%20%60route%3A%3Croute_id%3E%60%20%20%20%20%20%20%7C%20Serialized%20%60Route%60%20struct%20%20%20%20%20%20%20%7C%0A%7C%20%60signals%60%20%20%20%20%20%7C%20Route%20signals%20%20%20%20%20%7C%20%60signal%3A%3Csignal_id%3E%60%20%20%20%20%7C%20Serialized%20%60RouteSignal%60%20struct%20%7C%0A%0A**Performance%20Optimizations**%3A%0A%0A-%20**Write%20Batching**%3A%20100%20operations%20per%20batch%20with%20100ms%20flush%20interval%0A-%20**Asynchronous%20Writes**%3A%20Non-blocking%20write%20operations%20via%20dedicated%20writer%20thread%0A-%20**Memory%20Caching**%3A%20In-memory%20route%20storage%20with%20O(1)%20pool%20index%20lookup%0A-%20**Incremental%20Updates**%3A%20Only%20recalculates%20affected%20routes%20on%20state%20changes%0A%0A%23%23%23%23%20Graph%20Manager%0A%0AThe%20Graph%20Manager%20constructs%20and%20maintains%20trading%20graphs%20using%20tokens%20as%20nodes%20and%20pools%20as%20edges%20in%20a%20multi-graph%20structure%3A%0A%0A%60%60%60rust%0Apub%20struct%20GraphManager%20%7B%0A%20%20%20%20token_to_id%3A%20HashMap%3CBytes%2C%20u32%3E%2C%0A%20%20%20%20id_to_token%3A%20HashMap%3Cu32%2C%20Bytes%3E%2C%0A%20%20%20%20pool_to_id%3A%20HashMap%3CString%2C%20u32%3E%2C%0A%20%20%20%20id_to_pool%3A%20HashMap%3Cu32%2C%20String%3E%2C%0A%20%20%20%20next_token_id%3A%20u32%2C%0A%20%20%20%20next_pool_id%3A%20u32%2C%0A%7D%0A%0A%23%5Bderive(Debug%2C%20Clone%2C%20Serialize%2C%20Deserialize)%5D%0Apub%20struct%20CompactEdge%20%7B%0A%20%20%20%20pub%20pool_id%3A%20u32%2C%0A%20%20%20%20pub%20token_out%3A%20u32%2C%0A%20%20%20%20pub%20protocol%3A%20u8%2C%20%2F%2F%200%3DUniV2%2C%201%3DUniV3%2C%202%3DUniV4%2C%20etc.%0A%20%20%20%20pub%20fee_bps%3A%20u32%2C%0A%7D%0A%60%60%60%0A%0A**Key%20Features**%3A%0A%0A-%20**Dynamic%20Graph%20Building**%3A%20Real-time%20graph%20construction%20with%20generic%20%60build_or_update_graph()%60%20function%0A-%20**Edge%20Management**%3A%20Pool%20rate%20edges%20with%20metadata%0A-%20**Node%20Management**%3A%20Token%20nodes%20with%20properties%0A-%20**Graph%20Traversal**%3A%20Efficient%20path%20finding%20algorithms%20using%20Depth-First%20Search%20(DFS)%0A-%20**Cycle%20Detection**%3A%20Arbitrage%20cycle%20identification%0A-%20**Incremental%20Updates**%3A%20Optimized%20for%20streaming%20performance%20with%20every-block%20updates%0A%0A**Graph%20Building%20Performance**%3A%0A%0A-%20**193%C2%B5s**%20for%2037%20pools%0A-%20**33%C2%B5s**%20for%202%20pools%0A-%20**O(deg)**%20updates%20for%20efficient%20streaming%0A%0A%23%23%23%23%20Flash%20Loan%20Manager%0A%0AThe%20Flash%20Loan%20Manager%20selects%20optimal%20flash%20loan%20pools%20based%20on%20fee%20structure%20and%20compatibility%20rules%3A%0A%0A%60%60%60rust%0A%23%5Bderive(Debug%2C%20Clone%2C%20PartialEq)%5D%0Apub%20enum%20FlashLoanProvider%20%7B%0A%20%20%20%20%2F%2F%2F%20Uniswap%20V3%20flash%20loans%20-%20always%20available%20for%20all%20routes%0A%20%20%20%20UniswapV3%2C%0A%20%20%20%20%2F%2F%2F%20Uniswap%20V4%20flash%20loans%20-%20conditionally%20available%0A%20%20%20%20%2F%2F%2F%0A%20%20%20%20%2F%2F%2F%20**IMPORTANT%20ELIGIBILITY%20RULE**%3A%0A%20%20%20%20%2F%2F%2F%20V4%20flash%20loans%20are%20only%20allowed%20when%20the%20route%20does%20NOT%20contain%20Uniswap%20V4%20pools.%0A%20%20%20%20%2F%2F%2F%20This%20prevents%20recursive%20dependencies%20and%20potential%20locking%20issues.%0A%20%20%20%20UniswapV4%2C%0A%7D%0A%0A%23%5Bderive(Debug%2C%20Clone)%5D%0Apub%20struct%20FlashLoanCriteria%20%7B%0A%20%20%20%20pub%20min_liquidity_eth%3A%20f64%2C%0A%20%20%20%20pub%20max_fee_bps%3A%20u32%2C%0A%20%20%20%20pub%20preferred_providers%3A%20Vec%3CFlashLoanProvider%3E%2C%0A%7D%0A%60%60%60%0A%0A**Flash%20Loan%20Selection%20Logic**%3A%0A%0A1.%20**V3%20Flash%20Loans**%3A%20Always%20compatible%20with%20any%20route%20(30%20bps%20fee)%0A2.%20**V4%20Flash%20Loans**%3A%20Only%20compatible%20with%20routes%20that%20do%20NOT%20contain%20V4%20pools%20(0%20bps%20fee)%0A3.%20**Priority%20Order**%3A%20V3%20(priority%201)%2C%20V4%20(priority%202)%0A4.%20**Liquidity%20Requirements**%3A%20Minimum%200.1%20ETH%20liquidity%20for%20testing%0A%0A**Compatibility%20Rules**%3A%0A%0A-%20%E2%9C%85%20Route%20%5BUSDC%20%E2%86%92%20WETH%20%E2%86%92%20WBTC%5D%20(V2%2FV3%20only)%20%E2%86%92%20V4%20flash%20loans%20allowed%0A-%20%E2%9D%8C%20Route%20%5BUSDC%20%E2%86%92%20WETH%20(V4)%20%E2%86%92%20DAI%5D%20%E2%86%92%20V4%20flash%20loans%20blocked%2C%20fallback%20to%20V3%0A%0A%23%23%23%23%20Route%20Manager%0A%0AThe%20Route%20Manager%20discovers%20and%20manages%20arbitrage%20routes%20using%20sophisticated%20algorithms%3A%0A%0A%60%60%60rust%0Apub%20struct%20EnhancedRouteManager%20%7B%0A%20%20%20%20cache%3A%20AHashMap%3CString%2C%20RouteCacheEntry%3E%2C%20%2F%2F%20route_id%20-%3E%20cache%20entry%0A%20%20%20%20token_routes%3A%20AHashMap%3CBytes%2C%20AHashSet%3CString%3E%3E%2C%20%2F%2F%20token%20-%3E%20route_ids%0A%20%20%20%20route_deps%3A%20AHashMap%3CString%2C%20AHashSet%3CString%3E%3E%2C%20%2F%2F%20pool_id%20-%3E%20route_ids%0A%20%20%20%20max_hops%3A%20usize%2C%0A%20%20%20%20config%3A%20RouteManagerConfig%2C%0A%7D%0A%60%60%60%0A%0A**Route%20Discovery%20Process**%3A%0A%0A1.%20**BFS-based%20Discovery**%3A%20Uses%20Breadth-First%20Search%20for%20efficient%20route%20generation%0A2.%20**Incremental%20Updates**%3A%20Only%20processes%20affected%20routes%20when%20pools%20change%0A3.%20**Pruning%20Heuristics**%3A%20Applies%20smart%20filtering%20to%20prevent%20route%20explosion%0A4.%20**Cycle%20Detection**%3A%20Identifies%20profitable%20arbitrage%20cycles%0A5.%20**Flash%20Loan%20Integration**%3A%20Automatically%20selects%20compatible%20flash%20loans%0A%0A**Route%20Performance**%3A%0A%0A-%20**2.42%C2%B5s**%20for%203-hop%20routes%0A-%20**833ns**%20for%204-hop%20routes%0A-%20**791ns**%20for%205-hop%20routes%0A-%20**1%2C983%2C160%20routes**%20(3-hop)%20generated%20in%20~222%20seconds%0A%0A**Pruning%20Heuristics**%3A%0A%0A-%20Avoid%20cycles%20(unless%20for%20cycle%20arbitrage)%0A-%20Check%20for%20duplicate%20pools%20in%20route%0A-%20Limit%20routes%20per%20token%20to%20prevent%20explosion%0A-%20Protocol-specific%20pruning%20(V4%20overflow%20protection)%0A%0A%23%23%23%20Streaming%20Engine%20Collector%0A%0AThe%20MinimalStreamingEngine%20serves%20as%20the%20central%20orchestrator%20for%20the%20entire%20arbitrage%20system%2C%20coordinating%20real-time%20data%20ingestion%2C%20route%20discovery%2C%20profitability%20evaluation%2C%20and%20transaction%20execution.%0A%0A%23%23%23%23%20Core%20Components%0A%0A%60%60%60rust%0Apub%20struct%20MinimalStreamingEngine%20%7B%0A%20%20%20%20streamed_pools%3A%20Arc%3CMutex%3CHashMap%3CString%2C%20ProtocolComponent%3E%3E%3E%2C%0A%20%20%20%20streamed_states%3A%20Arc%3Cdyn%20PoolStore%3E%2C%0A%20%20%20%20routes_in_memory%3A%20Arc%3CMutex%3CHashMap%3CString%2C%20MinimalRoute%3E%3E%3E%2C%0A%20%20%20%20route_pool_index%3A%20Arc%3CMutex%3CHashMap%3CString%2C%20HashSet%3CString%3E%3E%3E%3E%2C%0A%20%20%20%20evaluation_sender%3A%20Option%3CUnboundedSender%3CMinimalRoute%3E%3E%2C%0A%20%20%20%20execution_queue%3A%20Arc%3CMutex%3CVec%3C(MinimalRoute%2C%20RouteEvaluation)%3E%3E%3E%2C%0A%7D%0A%60%60%60%0A%0A**Key%20Features**%3A%0A%0A-%20**WebSocket%20Integration**%3A%20Direct%20connection%20to%20Tycho%20protocol%20streams%0A-%20**Real-time%20State%20Processing**%3A%20Live%20protocol%20state%20updates%20from%20blockchain%0A-%20**Incremental%20Graph%20Building**%3A%20Dynamic%20graph%20construction%20with%20new%20pools%0A-%20**Route%20Discovery**%3A%20Automatic%20route%20calculation%20for%20new%20trading%20pairs%0A-%20**Performance%20Optimization**%3A%20Microsecond-level%20processing%20with%20memory%20caching%0A%0A**Initialization%20Process**%3A%0A%0A1.%20Initialize%20token%20store%20from%20RPC%0A2.%20Start%20Tycho%20streaming%20connection%0A3.%20Build%20initial%20graph%20from%20pool%20data%0A4.%20Find%20routes%20with%20flash%20loans%0A5.%20Start%20route%20evaluation%20loop%0A%0A%23%23%23%20Stream%20and%20State%20Updates%0A%0AThe%20streaming%20system%20processes%20real-time%20blockchain%20data%20through%20a%20sophisticated%20pipeline%3A%0A%0A%23%23%23%23%20Stream%20Message%20Processing%0A%0A%60%60%60rust%0Aasync%20fn%20process_stream_message(%26mut%20self%2C%20message%3A%20StreamMessage)%20-%3E%20Result%3C()%3E%20%7B%0A%20%20%20%20%2F%2F%20Update%20pool%20states%0A%20%20%20%20self.update_pool_states(%26message).await%3F%3B%0A%0A%20%20%20%20%2F%2F%20Check%20for%20new%20trading%20pairs%0A%20%20%20%20if%20self.has_new_pairs(%26message)%20%7B%0A%20%20%20%20%20%20%20%20self.process_new_pools(%26message).await%3F%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20%2F%2F%20Re-evaluate%20existing%20routes%20if%20state%20changed%0A%20%20%20%20if%20self.has_state_updates(%26message)%20%7B%0A%20%20%20%20%20%20%20%20self.re_evaluate_routes().await%3F%3B%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A%23%23%23%23%20State%20Update%20Flow%0A%0A%60%60%60mermaid%0AsequenceDiagram%0A%20%20%20%20participant%20T%20as%20Tycho%20Stream%0A%20%20%20%20participant%20SE%20as%20Streaming%20Engine%0A%20%20%20%20participant%20PS%20as%20Pool%20Store%0A%20%20%20%20participant%20GM%20as%20Graph%20Manager%0A%20%20%20%20participant%20RM%20as%20Route%20Manager%0A%20%20%20%20participant%20RA%20as%20Route%20Analyzer%0A%20%20%20%20participant%20EE%20as%20Execution%20Engine%0A%0A%20%20%20%20T-%3E%3ESE%3A%20Protocol%20State%20Updates%0A%20%20%20%20SE-%3E%3EPS%3A%20Store%20Pool%20States%0A%20%20%20%20SE-%3E%3EGM%3A%20Update%20Graph%0A%20%20%20%20GM-%3E%3ERM%3A%20Calculate%20New%20Routes%0A%20%20%20%20RM-%3E%3ERA%3A%20Evaluate%20Routes%0A%20%20%20%20RA-%3E%3EEE%3A%20Execute%20Profitable%20Routes%0A%20%20%20%20EE-%3E%3ET%3A%20Transaction%20Results%0A%60%60%60%0A%0A**Processing%20Stages**%3A%0A%0A1.%20**State%20Updates**%3A%20Pool%20states%20updated%20in%20real-time%0A2.%20**Graph%20Updates**%3A%20Trading%20graph%20rebuilt%20incrementally%0A3.%20**Route%20Calculation**%3A%20New%20routes%20calculated%20for%20affected%20pools%0A4.%20**Route%20Evaluation**%3A%20Routes%20evaluated%20for%20profitability%0A5.%20**Execution**%3A%20Profitable%20routes%20executed%20automatically%0A%0A%23%23%23%20Route%20Evaluation%20Triggering%0A%0ARoute%20evaluation%20is%20triggered%20by%20state%20changes%20in%20the%20streaming%20system%3A%0A%0A%23%23%23%23%20Evaluation%20Conditions%0A%0ARoutes%20are%20evaluated%20when%3A%0A%0A1.%20**New%20Pools%20Detected**%3A%20New%20trading%20pairs%20added%20to%20the%20system%0A2.%20**Pool%20State%20Changes**%3A%20Liquidity%20or%20rate%20changes%20in%20existing%20pools%0A3.%20**Periodic%20Re-evaluation**%3A%20Scheduled%20evaluation%20of%20all%20routes%0A4.%20**Manual%20Triggers**%3A%20CLI-triggered%20evaluation%20for%20testing%0A%0A%23%23%23%23%20Evaluation%20Pipeline%0A%0A%60%60%60rust%0Aasync%20fn%20evaluate_routes_continuously(%26mut%20self)%20-%3E%20Result%3C()%3E%20%7B%0A%20%20%20%20loop%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Get%20routes%20from%20queue%0A%20%20%20%20%20%20%20%20if%20let%20Some(route)%20%3D%20self.route_evaluation_queue.pop().await%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Evaluate%20route%0A%20%20%20%20%20%20%20%20%20%20%20%20let%20evaluation%20%3D%20self.route_analyzer.evaluate_route(%26route).await%3F%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Check%20if%20profitable%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20evaluation.execution_viable%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Queue%20for%20execution%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20self.execution_queue.push((route%2C%20evaluation)).await%3F%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Process%20execution%20queue%0A%20%20%20%20%20%20%20%20self.process_execution_queue().await%3F%3B%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Small%20delay%20to%20prevent%20busy%20waiting%0A%20%20%20%20%20%20%20%20tokio%3A%3Atime%3A%3Asleep(Duration%3A%3Afrom_millis(10)).await%3B%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Cyclical%20Arbitrage%20Strategy%0A%0AThe%20cyclical%20arbitrage%20strategy%20implements%20sophisticated%20route%20evaluation%20algorithms%20that%20analyze%20potential%20arbitrage%20opportunities%20across%20multiple%20DEX%20protocols.%0A%0A%23%23%23%23%20Route%20Evaluation%20for%20Profitability%0A%0AThe%20RouteAnalyzer%20component%20uses%20real-time%20protocol%20states%20to%20calculate%20accurate%20swap%20amounts%20and%20profitability%20metrics%3A%0A%0A%60%60%60rust%0Aimpl%20RouteAnalyzer%20%7B%0A%20%20%20%20pub%20async%20fn%20evaluate_route(%0A%20%20%20%20%20%20%20%20%26self%2C%0A%20%20%20%20%20%20%20%20route%3A%20%26Route%2C%0A%20%20%20%20%20%20%20%20pool_store%3A%20%26dyn%20PoolStore%2C%0A%20%20%20%20)%20-%3E%20Result%3CRouteEvaluation%3E%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Get%20current%20pool%20states%0A%20%20%20%20%20%20%20%20let%20pool_states%20%3D%20pool_store.get_pool_states(%26route.pools).await%3F%3B%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Calculate%20optimal%20input%20amount%0A%20%20%20%20%20%20%20%20let%20optimal_amount%20%3D%20self.find_optimal_input_amount(route%2C%20%26pool_states).await%3F%3B%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Calculate%20swap%20amounts%20using%20ProtocolSim%0A%20%20%20%20%20%20%20%20let%20swap_result%20%3D%20self.protocol_sim.calculate_swap(%0A%20%20%20%20%20%20%20%20%20%20%20%20route%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20optimal_amount%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%26pool_states%2C%0A%20%20%20%20%20%20%20%20).await%3F%3B%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Apply%20V4%20overflow%20protection%0A%20%20%20%20%20%20%20%20let%20protected_amounts%20%3D%20self.apply_v4_overflow_protection(%0A%20%20%20%20%20%20%20%20%20%20%20%20route%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%26swap_result%2C%0A%20%20%20%20%20%20%20%20).await%3F%3B%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Calculate%20profitability%0A%20%20%20%20%20%20%20%20let%20profit%20%3D%20self.calculate_profitability(%0A%20%20%20%20%20%20%20%20%20%20%20%20route%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%26protected_amounts%2C%0A%20%20%20%20%20%20%20%20).await%3F%3B%0A%0A%20%20%20%20%20%20%20%20Ok(RouteEvaluation%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20route_id%3A%20route.id.clone()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20input_amount%3A%20optimal_amount%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20output_amount%3A%20protected_amounts.final_output%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20profit%3A%20profit.net_profit%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20roi_percentage%3A%20profit.roi_percentage%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20gas_cost%3A%20profit.estimated_gas_cost%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20flash_loan_fee%3A%20profit.flash_loan_fee%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20execution_viable%3A%20profit.net_profit%20%3E%200.0%2C%0A%20%20%20%20%20%20%20%20%7D)%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A%23%23%23%23%20Optimal%20Amount%20Calculation%0A%0AThe%20system%20uses%20a%20sophisticated%20**exponential%20search%20%2B%20binary%20search**%20algorithm%20to%20find%20the%20optimal%20input%20amount%3A%0A%0A%23%23%23%23%23%20Phase%201%3A%20Doubling%20Search%20(Exponential%20Growth)%0A%0A**Goal**%3A%20Quickly%20find%20an%20upper%20bound%20for%20profitable%20input.%0A%0A1.%20Set%20%60A%20%3D%20A_min%60%0A2.%20Repeat%20for%20maximum%20iterations%3A%0A%20%20%20-%20Evaluate%20profit%3A%20%60P%20%3D%20profit(A)%60%0A%20%20%20-%20If%20%60P%20%3E%20P_best%60%2C%20update%20best%20values%0A%20%20%20-%20If%20profit%20drops%20below%20threshold%2C%20stop%20doubling%0A%20%20%20-%20Else%2C%20double%20the%20input%3A%20%60A%20%3D%202%20*%20A%60%0A%0A%23%23%23%23%23%20Phase%202%3A%20Binary%20Search%20(Refinement)%0A%0A**Goal**%3A%20Refine%20the%20optimal%20input%20within%20%60%5BA_min%2C%20A_max%5D%60.%0A%0A1.%20While%20%60A_max%20-%20A_min%20%3E%20%CE%B5%60%20and%20iterations%20%3C%20max%3A%0A%20%20%20-%20Compute%20midpoint%3A%20%60A_mid%20%3D%20(A_min%20%2B%20A_max)%20%2F%202%60%0A%20%20%20-%20Evaluate%20profit%20at%20midpoint%0A%20%20%20-%20Update%20best%20if%20midpoint%20is%20better%0A%20%20%20-%20Update%20bounds%20based%20on%20profit%20comparison%0A%0A**Mathematical%20Summary**%3A%0A%0A%60%60%60%0Amaximize%20P(A)%20%3D%20profit%20from%20route%20given%20input%20A%0Asubject%20to%20A_min%20%E2%89%A4%20A%20%E2%89%A4%20A_max%2C%20P(A)%20%E2%89%A5%20profit_threshold%0Awhere%20A_max%20found%20via%20exponential%20doubling%20and%20A_best%20refined%20via%20binary%20search.%0A%60%60%60%0A%0A%23%23%23%23%20Solution%20Creation%0A%0ASolution%20encoding%20transforms%20route%20evaluations%20into%20executable%20smart%20contract%20calldata%3A%0A%0A%60%60%60rust%0Apub%20fn%20encode_solution(solution%3A%20Solution%2C%20chain%3A%20Chain)%20-%3E%20anyhow%3A%3AResult%3CEncodedSolution%3E%20%7B%0A%20%20%20%20let%20encoder%20%3D%20TychoRouterEncoderBuilder%3A%3Anew()%0A%20%20%20%20%20%20%20%20.chain(chain)%0A%20%20%20%20%20%20%20%20.user_transfer_type(UserTransferType%3A%3ATransferFrom)%0A%20%20%20%20%20%20%20%20.build()%3F%3B%0A%0A%20%20%20%20let%20encoded_vec%20%3D%20encoder.encode_solutions(vec!%5Bsolution%5D)%3F%3B%0A%20%20%20%20Ok(encoded_vec.into_iter().next().expect(%22Expected%20at%20least%20one%20encoded%20solution%22))%0A%7D%0A%60%60%60%0A%0A**Key%20Features**%3A%0A%0A-%20**TychoRouterEncoderBuilder**%3A%20Uses%20Tycho's%20encoder%20for%20ABI-compliant%20calldata%0A-%20**Flash%20Loan%20Integration**%3A%20Encodes%20flash%20loan%20parameters%20and%20sequential%20swaps%0A-%20**Gas%20Optimization**%3A%20Optimizes%20transaction%20parameters%20for%20execution%0A-%20**Multi-protocol%20Support**%3A%20Handles%20V2%2C%20V3%2C%20V4%20protocol%20differences%0A%0A%23%23%23%23%20Signal%20Generation%0A%0AThe%20system%20generates%20execution%20signals%20for%20profitable%20routes%3A%0A%0A%60%60%60rust%0A%23%5Bderive(Debug%2C%20Clone%2C%20Serialize%2C%20Deserialize)%5D%0Apub%20struct%20RouteSignal%20%7B%0A%20%20%20%20pub%20route_id%3A%20String%2C%0A%20%20%20%20pub%20route%3A%20MinimalRoute%2C%0A%20%20%20%20pub%20evaluation%3A%20RouteEvaluation%2C%0A%20%20%20%20pub%20timestamp%3A%20SystemTime%2C%0A%20%20%20%20pub%20execution_attempts%3A%20u32%2C%0A%20%20%20%20pub%20priority_score%3A%20f64%2C%0A%20%20%20%20pub%20status%3A%20SignalStatus%2C%0A%7D%0A%0A%23%5Bderive(Debug%2C%20Clone%2C%20Serialize%2C%20Deserialize)%5D%0Apub%20enum%20SignalStatus%20%7B%0A%20%20%20%20Pending%2C%0A%20%20%20%20Evaluating%2C%0A%20%20%20%20ReadyForExecution%2C%0A%20%20%20%20Executing%2C%0A%20%20%20%20Executed%2C%0A%20%20%20%20Failed%2C%0A%20%20%20%20Expired%2C%0A%7D%0A%60%60%60%0A%0A**Signal%20Flow**%3A%0A%0A1.%20**Route%20Discovery**%20%E2%86%92%20Create%20RouteSignal%0A2.%20**Evaluation%20Phase**%20%E2%86%92%20Check%20profitability%0A3.%20**Execution%20Phase**%20%E2%86%92%20Execute%20if%20profitable%0A4.%20**Result%20Processing**%20%E2%86%92%20Update%20signal%20status%0A%0A%23%23%23%20Execution%20Engine%0A%0AThe%20Execution%20Engine%20handles%20the%20actual%20transaction%20execution%20with%20comprehensive%20error%20handling%20and%20retry%20logic%3A%0A%0A%60%60%60rust%0Aimpl%20ExecutionEngine%20%7B%0A%20%20%20%20pub%20async%20fn%20execute_signal(%26mut%20self%2C%20signal%3A%20%26RouteSignal)%20-%3E%20Result%3CEvaluationResult%3E%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Pre-flight%20simulation%0A%20%20%20%20%20%20%20%20let%20simulation_result%20%3D%20self.preflight_simulation(signal).await%3F%3B%0A%20%20%20%20%20%20%20%20if%20!simulation_result.success%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20Err(anyhow%3A%3Aanyhow!(%22Pre-flight%20simulation%20failed%22))%3B%0A%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Check%20account%20balance%0A%20%20%20%20%20%20%20%20let%20balance_check%20%3D%20self.check_account_balance(signal).await%3F%3B%0A%20%20%20%20%20%20%20%20if%20!balance_check.sufficient%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20Err(anyhow%3A%3Aanyhow!(%22Insufficient%20balance%22))%3B%0A%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Encode%20solution%0A%20%20%20%20%20%20%20%20let%20encoded_solution%20%3D%20self.encode_solution(signal).await%3F%3B%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Send%20transaction%0A%20%20%20%20%20%20%20%20let%20tx_hash%20%3D%20self.send_flash_transaction(signal%2C%20%26encoded_solution).await%3F%3B%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Wait%20for%20confirmation%0A%20%20%20%20%20%20%20%20let%20receipt%20%3D%20self.wait_for_confirmation(tx_hash).await%3F%3B%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Parse%20execution%20result%0A%20%20%20%20%20%20%20%20let%20result%20%3D%20self.parse_execution_result(%26receipt%2C%20signal).await%3F%3B%0A%0A%20%20%20%20%20%20%20%20Ok(result)%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A**Key%20Features**%3A%0A%0A-%20**EIP-1559%20Support**%3A%20Modern%20transaction%20format%20with%20dynamic%20gas%20pricing%0A-%20**Balance%20Validation**%3A%20Pre-execution%20balance%20checks%0A-%20**Retry%20Logic**%3A%20Automatic%20retry%20with%20nonce%20synchronization%0A-%20**Gas%20Optimization**%3A%20Optimized%20gas%20parameters%20for%20cost%20efficiency%0A-%20**Transaction%20Monitoring**%3A%20Real-time%20transaction%20status%20tracking%0A%0A%23%23%23%20Flash%20Loan%20and%20Sequential%20Swap%20Mappings%0A%0AThe%20system%20implements%20sophisticated%20flash%20loan%20integration%20with%20sequential%20swap%20execution%3A%0A%0A%23%23%23%23%20Flash%20Loan%20Selection%0A%0A%60%60%60rust%0Aasync%20fn%20find_best_flash_loan_pool_with_v4_eligibility(%0A%20%20%20%20%26self%2C%0A%20%20%20%20token%3A%20%26Bytes%2C%0A%20%20%20%20_amount_needed%3A%20u128%2C%0A%20%20%20%20streamed_states%3A%20%26dyn%20PoolStore%2C%0A%20%20%20%20excluded_pool_ids%3A%20Option%3C%26%5BString%5D%3E%2C%0A%20%20%20%20route_info%3A%20Option%3C%26str%3E%2C%0A%20%20%20%20route_tokens%3A%20Option%3C%26%5BBytes%5D%3E%2C%0A%20%20%20%20route_has_v4_pools%3A%20bool%2C%0A%20%20%20%20input_token_is_v4_eligible%3A%20bool%2C%0A)%20-%3E%20Result%3COption%3CFlashLoanCandidate%3E%3E%20%7B%0A%20%20%20%20let%20mut%20flash_loan_candidates%20%3D%20Vec%3A%3Anew()%3B%0A%0A%20%20%20%20%2F%2F%20V4%20Addition%3A%20If%20input%20token%20is%20v4%20eligible%20and%20route%20has%20no%20V4%20pools%0A%20%20%20%20if%20input_token_is_v4_eligible%20%26%26%20!route_has_v4_pools%20%7B%0A%20%20%20%20%20%20%20%20let%20synthetic_pool%20%3D%20self.create_v4_pool_manager_synthetic_pool(token)%3B%0A%20%20%20%20%20%20%20%20let%20candidate%20%3D%20FlashLoanCandidate%3A%3Anew(%0A%20%20%20%20%20%20%20%20%20%20%20%20synthetic_pool%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20FlashLoanProvider%3A%3AUniswapV4%2C%0A%20%20%20%20%20%20%20%20%20%20%20%201000000.0%2C%20%2F%2F%20Assume%20very%20high%20liquidity%20for%20PoolManager%0A%20%20%20%20%20%20%20%20)%3B%0A%20%20%20%20%20%20%20%20flash_loan_candidates.push(candidate)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20%2F%2F%20V3%20Additions%3A%20Find%20all%20V3%20pools%20containing%20the%20token%0A%20%20%20%20%2F%2F%20...%20V3%20pool%20selection%20logic%0A%0A%20%20%20%20%2F%2F%20Return%20best%20candidate%20based%20on%20score%0A%20%20%20%20flash_loan_candidates.sort_by(%7Ca%2C%20b%7C%20b.score.partial_cmp(%26a.score).unwrap())%3B%0A%20%20%20%20Ok(flash_loan_candidates.first().cloned())%0A%7D%0A%60%60%60%0A%0A%23%23%23%23%20Sequential%20Swap%20Execution%0A%0AThe%20system%20executes%20multi-hop%20swaps%20atomically%20through%20flash%20loans%3A%0A%0A1.%20**Flash%20Loan%20Borrow**%3A%20Borrow%20required%20tokens%20from%20selected%20pool%0A2.%20**Sequential%20Swaps**%3A%20Execute%20swaps%20in%20sequence%20through%20route%0A3.%20**Flash%20Loan%20Repay**%3A%20Repay%20borrowed%20tokens%20with%20profit%0A4.%20**Profit%20Capture**%3A%20Keep%20remaining%20profit%20after%20repayment%0A%0A**Example%20Execution%20Flow**%3A%0A%0A%60%60%60%0ARoute%3A%20%5BUSDC%20%E2%86%92%20WETH%20%E2%86%92%20MOJO%20%E2%86%92%20USDC%5D%0A1.%20Borrow%201000%20USDC%20via%20flash%20loan%0A2.%20Swap%201000%20USDC%20%E2%86%92%200.4%20WETH%20(Uniswap%20V3)%0A3.%20Swap%200.4%20WETH%20%E2%86%92%201000%20MOJO%20(Uniswap%20V2)%0A4.%20Swap%201000%20MOJO%20%E2%86%92%201000.96%20USDC%20(Uniswap%20V2)%0A5.%20Repay%201000%20USDC%20%2B%200.9%20USDC%20fee%20%3D%201000.9%20USDC%0A6.%20Keep%200.06%20USDC%20profit%0A%60%60%60%0A%0A%23%23%23%20Encoding%0A%0AThe%20encoding%20system%20converts%20route%20evaluations%20into%20executable%20smart%20contract%20calldata%3A%0A%0A%23%23%23%23%20TychoRouterEncoderBuilder%20Integration%0A%0A%60%60%60rust%0Apub%20fn%20encode_solution(solution%3A%20Solution%2C%20chain%3A%20Chain)%20-%3E%20anyhow%3A%3AResult%3CEncodedSolution%3E%20%7B%0A%20%20%20%20let%20encoder%20%3D%20TychoRouterEncoderBuilder%3A%3Anew()%0A%20%20%20%20%20%20%20%20.chain(chain)%0A%20%20%20%20%20%20%20%20.user_transfer_type(UserTransferType%3A%3ATransferFrom)%0A%20%20%20%20%20%20%20%20.build()%3F%3B%0A%0A%20%20%20%20let%20encoded_vec%20%3D%20encoder.encode_solutions(vec!%5Bsolution%5D)%3F%3B%0A%20%20%20%20Ok(encoded_vec.into_iter().next().expect(%22Expected%20at%20least%20one%20encoded%20solution%22))%0A%7D%0A%60%60%60%0A%0A**Encoding%20Features**%3A%0A%0A-%20**ABI%20Compliance**%3A%20Standardized%20function%20call%20encoding%0A-%20**Multi-protocol%20Support**%3A%20Handles%20V2%2C%20V3%2C%20V4%20protocol%20differences%0A-%20**Gas%20Optimization**%3A%20Minimizes%20calldata%20size%0A-%20**Error%20Handling**%3A%20Comprehensive%20validation%20and%20error%20reporting%0A%0A%23%23%23%23%20Calldata%20Structure%0A%0AThe%20encoded%20calldata%20includes%3A%0A%0A1.%20**Flash%20Loan%20Parameters**%3A%20Pool%20address%2C%20token%2C%20amount%2C%20fee%0A2.%20**Swap%20Parameters**%3A%20Route%2C%20amounts%2C%20protocols%0A3.%20**Execution%20Metadata**%3A%20Gas%20limits%2C%20deadlines%2C%20slippage%0A4.%20**Callback%20Data**%3A%20Post-swap%20execution%20parameters%0A%0A%23%23%23%20Execution%0A%0AThe%20execution%20system%20manages%20transaction%20lifecycle%20from%20creation%20to%20confirmation%3A%0A%0A%23%23%23%23%20Transaction%20Building%0A%0A%60%60%60rust%0Aasync%20fn%20build_transaction(%26self%2C%20signal%3A%20%26RouteSignal)%20-%3E%20Result%3CTransactionRequest%3E%20%7B%0A%20%20%20%20let%20encoded_solution%20%3D%20self.encode_solution(signal).await%3F%3B%0A%0A%20%20%20%20Ok(TransactionRequest%20%7B%0A%20%20%20%20%20%20%20%20to%3A%20Some(self.config.router_address.into())%2C%0A%20%20%20%20%20%20%20%20data%3A%20Some(encoded_solution.calldata.into())%2C%0A%20%20%20%20%20%20%20%20gas%3A%20Some(U256%3A%3Afrom(self.estimate_gas(signal).await%3F))%2C%0A%20%20%20%20%20%20%20%20gas_price%3A%20Some(self.get_current_gas_price().await%3F)%2C%0A%20%20%20%20%20%20%20%20value%3A%20Some(U256%3A%3AZERO)%2C%0A%20%20%20%20%20%20%20%20from%3A%20Some(self.signer.address())%2C%0A%20%20%20%20%20%20%20%20..Default%3A%3Adefault()%0A%20%20%20%20%7D)%0A%7D%0A%60%60%60%0A%0A%23%23%23%23%20Execution%20Flow%0A%0A1.%20**Pre-flight%20Validation**%3A%20Simulate%20transaction%20before%20sending%0A2.%20**Gas%20Estimation**%3A%20Calculate%20optimal%20gas%20parameters%0A3.%20**Transaction%20Submission**%3A%20Send%20to%20network%0A4.%20**Confirmation%20Waiting**%3A%20Monitor%20transaction%20status%0A5.%20**Result%20Parsing**%3A%20Extract%20execution%20results%0A%0A%23%23%23%20PreFlight%20Evaluation%0A%0APre-flight%20evaluation%20simulates%20transactions%20before%20execution%20to%20validate%20profitability%3A%0A%0A%60%60%60rust%0Aasync%20fn%20preflight_simulation(%26self%2C%20signal%3A%20%26RouteSignal)%20-%3E%20Result%3CSimulationResult%3E%20%7B%0A%20%20%20%20let%20encoded_solution%20%3D%20self.encode_solution(signal).await%3F%3B%0A%0A%20%20%20%20%2F%2F%20Create%20simulation%20transaction%0A%20%20%20%20let%20simulation_tx%20%3D%20TransactionRequest%20%7B%0A%20%20%20%20%20%20%20%20to%3A%20Some(self.config.router_address.into())%2C%0A%20%20%20%20%20%20%20%20data%3A%20Some(encoded_solution.calldata.into())%2C%0A%20%20%20%20%20%20%20%20gas%3A%20Some(U256%3A%3Afrom(self.config.preflight_gas_limit))%2C%0A%20%20%20%20%20%20%20%20gas_price%3A%20Some(self.get_current_gas_price().await%3F)%2C%0A%20%20%20%20%20%20%20%20value%3A%20Some(U256%3A%3AZERO)%2C%0A%20%20%20%20%20%20%20%20from%3A%20Some(self.signer.address())%2C%0A%20%20%20%20%20%20%20%20..Default%3A%3Adefault()%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Execute%20simulation%0A%20%20%20%20match%20self.client.call(%26simulation_tx%2C%20None).await%20%7B%0A%20%20%20%20%20%20%20%20Ok(_)%20%3D%3E%20Ok(SimulationResult%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20success%3A%20true%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20error_message%3A%20String%3A%3Anew()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20gas_used%3A%200%2C%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20Err(e)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Log%20the%20failure%20but%20don't%20stop%20execution%0A%20%20%20%20%20%20%20%20%20%20%20%20tracing%3A%3Awarn!(%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22Pre-flight%20simulation%20failed%20for%20route%20%7B%7D%3A%20%7B%7D%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20signal.route_id%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20e%0A%20%20%20%20%20%20%20%20%20%20%20%20)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20Ok(SimulationResult%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20success%3A%20false%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20error_message%3A%20e.to_string()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20gas_used%3A%200%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D)%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A**Critical%20Issue**%3A%20There%20is%20a%20**critical%20issue**%20in%20the%20current%20preflight%20simulation%20implementation%20where%20%60eth_call%60%20failures%20are%20logged%20but%20**not%20used%20to%20stop%20execution**.%20This%20can%20lead%20to%20failed%20transactions%20being%20sent%20to%20the%20network.%0A%0A**Recommended%20Fix**%3A%0A%0A%60%60%60rust%0Aasync%20fn%20execute_signal(%26mut%20self%2C%20signal%3A%20%26RouteSignal)%20-%3E%20Result%3CEvaluationResult%3E%20%7B%0A%20%20%20%20%2F%2F%20Pre-flight%20simulation%0A%20%20%20%20let%20simulation_result%20%3D%20self.preflight_simulation(signal).await%3F%3B%0A%0A%20%20%20%20%2F%2F%20CRITICAL%20FIX%3A%20Actually%20check%20simulation%20result%0A%20%20%20%20if%20!simulation_result.success%20%7B%0A%20%20%20%20%20%20%20%20return%20Err(anyhow%3A%3Aanyhow!(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22Pre-flight%20simulation%20failed%3A%20%7B%7D%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20simulation_result.error_message%0A%20%20%20%20%20%20%20%20))%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20%2F%2F%20Continue%20with%20execution...%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Profitability%20Logging%0A%0AThe%20system%20provides%20comprehensive%20profitability%20logging%20and%20analysis%3A%0A%0A%23%23%23%23%20Profitability%20Calculation%0A%0AThe%20mathematical%20formulas%20for%20profitability%20calculation%3A%0A%0A%23%23%23%23%23%201.%20Swap%20Profit%20Percentage%0A%0A%60%60%60%0Aswap_profit_percentage%20%3D%20((amount_out%20-%20amount_in)%20%2F%20amount_in)%20*%20100%0A%60%60%60%0A%0A%23%23%23%23%23%202.%20Flash%20Fee%20Percentage%0A%0A%60%60%60%0Aflash_fee_pct%20%3D%20(flash_loan_fee%20%2F%20amount_in)%20*%20100%0A%60%60%60%0A%0A%23%23%23%23%23%203.%20Net%20Profit%20Percentage%0A%0A%60%60%60%0Anet_profit_percentage%20%3D%20swap_profit_percentage%20-%20flash_fee_pct%20-%20gas_cost_pct%0A%60%60%60%0A%0A%23%23%23%23%23%204.%20Net%20Profit%20in%20Token%20Units%0A%0A%60%60%60%0Anet_profit_token%20%3D%20amount_out%20-%20amount_in%20-%20flash_loan_fee%20-%20gas_cost_token%0A%60%60%60%0A%0A%23%23%23%20Persistence%20Mechanism%0A%0AThe%20persistence%20system%20uses%20RocksDB%20with%20optimized%20column%20families%20for%20different%20data%20types%3A%0A%0A**Database%20Configuration**%3A%0A%0A%60%60%60rust%0Alet%20cf_names%20%3D%20vec!%5B%22tokens%22%2C%20%22graph%22%2C%20%22routes%22%2C%20%22signals%22%5D%3B%0Alet%20db%20%3D%20Arc%3A%3Anew(DB%3A%3Aopen_cf(%26opts%2C%20db_path%2C%20%26cf_names)%3F)%3B%0A%60%60%60%0A%0A**Write%20Optimization**%3A%0A%0A-%20**Batch%20Writes**%3A%20100%20operations%20per%20batch%0A-%20**Async%20Flushing**%3A%20100ms%20flush%20interval%0A-%20**Memory%20Buffering**%3A%20In-memory%20caching%20before%20persistence%0A-%20**Incremental%20Updates**%3A%20Only%20persist%20changed%20data%0A%0A%23%23%23%20Queuing%20Configuration%0A%0AThe%20system%20uses%20multiple%20queues%20for%20different%20processing%20stages%3A%0A%0A**Queue%20Types**%3A%0A%0A1.%20**Streaming%20Queue**%3A%20Raw%20blockchain%20data%20processing%0A2.%20**Evaluation%20Queue**%3A%20Route%20profitability%20evaluation%0A3.%20**Execution%20Queue**%3A%20Transaction%20execution%0A4.%20**Signal%20Queue**%3A%20Arbitrage%20opportunity%20signals%0A%0A**Queue%20Management**%3A%0A%0A%60%60%60rust%0Apub%20struct%20ExecutionQueue%20%7B%0A%20%20%20%20queue%3A%20VecDeque%3C(MinimalRoute%2C%20RouteEvaluation)%3E%2C%0A%20%20%20%20max_queue_size%3A%20usize%2C%0A%20%20%20%20priority_scores%3A%20HashMap%3CString%2C%20f64%3E%2C%0A%7D%0A%60%60%60%0A%0A**Priority%20Calculation**%3A%0A%0A%60%60%60rust%0Afn%20calculate_priority(%26self%2C%20route%3A%20%26MinimalRoute%2C%20evaluation%3A%20%26RouteEvaluation)%20-%3E%20f64%20%7B%0A%20%20%20%20%2F%2F%20Higher%20profit%20%3D%20higher%20priority%0A%20%20%20%20let%20profit_score%20%3D%20evaluation.net_profit_percentage%3B%0A%0A%20%20%20%20%2F%2F%20Shorter%20routes%20%3D%20higher%20priority%20(less%20gas)%0A%20%20%20%20let%20gas_score%20%3D%201.0%20%2F%20(route.hops%20as%20f64%20%2B%201.0)%3B%0A%0A%20%20%20%20%2F%2F%20Combine%20scores%0A%20%20%20%20profit_score%20*%200.7%20%2B%20gas_score%20*%200.3%0A%7D%0A%60%60%60%0A%0A%23%23%20References%0A%0A-%20%5BBellman-Ford%20Alogorithm%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBellman%25E2%2580%2593Ford_algorithm)%0A-%20%5BDepth%20First%20Search%20Algorithm%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FDepth-first_search)%0A",lastUpdatedAt:void 0},{lazy:()=>J(()=>import("./solving-BAI13JGJ.js"),[]),path:"/research/solving/solving.html",type:"mdx",filePath:"research/solving/solving.mdx",content:"%23%20Solving%2C%20Arbitrage%20%26%20Market%20Making%0A%0A%23%23%20Evaluating%20over%201000%20Routes%20Per%20Second%20and%20arbitraging%20them%20with%20no%20upfront%20capital.%0A%0AIn%20this%20article%20I%20discuss%20my%20personal%20Journey%20for%202025.%20Give%20an%20example%20of%20a%20cyclical%20arbitrage%20built%20on%20the%20latest%20high%20performant%20solving%20and%20market%20making%20infrastructure.%20Discuss%20how%20this%20infrastructure%20can%20be%20applied%20to%20Intent%20Based%20Solving%20Sytems%20(think%20UniswapX%2C%20CowSwap%2C%201inch)%20and%20give%20a%20full%20breakdown%20of%20the%20mathematics%20and%20technical%20implementation%20of%20a%20generic%20solving%20infrastructure%20service%20that%20I%20have%20been%20developing.%0A%0AIf%20you%20are%20an%20**investor**%2C%20**protocol**%2C%20or%20**market%20maker**%2C%20let%E2%80%99s%20connect%20to%3A%0A%0A-%20**Investors**%3A%20Please%20help%20with%20introductions%20to%20portfolio%20companies%20and%20liquidity%20providers%20in%20the%20space.%20Also%20reach%20out%20if%20this%20technology%20can%20be%20utilized%20in%20startups%20you%20are%20currently%20evaluating.%0A-%20**Protocols**%3A%20Please%20reach%20out%20if%20this%20technology%20(or%20I%20personally)%20can%20help%20you%20drive%20more%20order%20flow%20to%20your%20protocol.%0A-%20**Market%20Makers%20(and%20liquidity%20providers)**%20please%20reach%20out%20if%20you%20want%20to%20develop%20advanced%20trading%20strategies%20and%20liquicity%20management%20functionality%20using%20this%20infrastructure.%0A%0AThis%20reserach%20is%20also%20availabe%20on%20%5Bhackmd.io%5D(https%3A%2F%2Fhackmd.io%2F%40jincubator%2Farbitrage)%0A%0A%3E%20**Disclaimer%3A**%20This%20blog%20post%20covers%20an%20overview%20of%20a%20high%20performant%20solving%2C%20arbitrage%20and%20market%20making%20infrastructure.%20The%20example%20of%20a%20cyclical%20arbitrage%20is%20a%20simple%20one%20but%20useful%20for%20demonstration%20purposes.%20I%20really%20wanted%20to%20show%20the%20foundation%20for%20how%20to%20build%20and%20think%20about%20the%20foundational%20layers%20of%20collectors%2C%20strategies%20and%20execution.%20The%20codebase%20is%20private%20and%20at%20the%20time%20of%20writing%20has%20already%20been%20enhanced%2C%20but%20the%20concepts%20remain%20solid.%0A%0A---%0A%0A%23%23%202025%20%E2%80%93%20A%20Year%20of%20Research%20and%20Growth%0A%0A%23%23%23%20Personal%20Journey%0A%0AThis%20year%20I%20decided%20to%20spend%20my%20time%20coming%20up%20to%20speed%20on%20the%20latest%20innovations%20and%20technologies%20in%20crypto.%20My%20focus%20area%20is%20real-time%20market%20making%20and%20solving%20for%20intent-based%20protocols%20such%20as%20UniswapX%2C%201inch%2C%20and%20Cowswap.%20I%E2%80%99ve%20explored%20breakthroughs%20in%20real-time%20indexing%2C%20simulation%2C%20and%20execution%20pioneered%20by%20Tycho.%0A%0AThis%20journey%20included%3A%0A%0A-%20Attending%20the%20**%5BAtrium%20Uniswap%20V4%20Hook%20Academy%5D(https%3A%2F%2Fatrium.academy%2F)**%0A-%20Hacking%20on%20**1inch%20Limit%20Order%20Protocol**%20%5Barticle%20here%5D(https%3A%2F%2Fhackmd.io%2F%40jincubator%2F1nchTychoNoLiquiditySwap)%0A-%20Prototyping%20%5BUniswapX%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Funiswapx%2Foverviews)%20Fillers%20and%20%5BCowSwap%5D(https%3A%2F%2Fdocs.cow.fi%2Fcow-protocol%2Ftutorials%2Fsolvers)%20Solvers%0A-%20Researching%20cross-chain%20intents%20and%20advanced%20resource%20locking%20using%20the%20**%5Bthe-compact%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fthe-compact%2Foverview)**%20(an%20ERC6909%20vault%20with%20a%20robust%20ecosystem%20of%20sponsors%2C%20allocators%2C%20fillers%2C%20arbiters%2C%20and%20relayers)%0A%0AI%20continually%20refined%20my%20understanding%20of%20high-performance%20solving%20and%20market-making%20using%20**%5BAlloy%5D(https%3A%2F%2Falloy.rs%2F)**%2C%20**Rust**%2C%20and%20**%5BTycho%E2%80%99s%20architecture%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Foverview)**%2C%20which%20leverages%20**%5Bsubstreams%5D(https%3A%2F%2Fsubstreams.dev%2F)**%2C%20advanced%20**router**%2C%20**dispatcher**%2C%20and%20**executor%20technologies**.%20These%20abstractions%20allow%20seamless%20interaction%20with%20protocols%20such%20as%20Uniswap%2C%20Balancer%2C%20SushiSwap%2C%20and%20more.%0A%0AThere's%20no%20better%20way%20to%20come%20up%20to%20speed%20with%20the%20technology%20used%20in%20high%20performance%2C%20market%20making%2C%20solving%20and%20arbitrage%20then%20to%20build%20it.%20So%20this%20is%20what%20I%20set%20out%20to%20do%20and%20start%20with%20a%20simple%20goal.%0A%0A**Goal%3A**%20Build%20an%20arbitrage%20bot%20capable%20of%20generating%20profit%20with%20**no%20upfront%20capital**.%0A%0A%23%23%23%20Result%0A%0ABelow%20are%20the%20details%20of%20the%20first%20positive%20(albeit%20for%20dust)%20cyclical%20arbitrage%20execeuted%20on%20Base%20%5BView%20on%20BaseScan%5D(https%3A%2F%2Fbasescan.org%2Ftx%2F0xde470c186d89aa02e6be2c066b99e7f4e39faebbca9ded80be766f64e28eacfa).%0A%0A%60%60%60bash%0A%F0%9F%8C%90%20BASE%20%202025-09-13%2009%3A51%3A39%0A%F0%9F%92%B0%20Profitable%20route%20found%3A%200x452c93c6f3cc3a10e11571e96bc7c88de3a33ea91a3c28a0d703a04b3bcd309c%20with%20profit%3A%20959%20(0.1568333333333405%25)%0A%F0%9F%8F%86%20Route%3A%20Profit%200.000941%20USDC%20(0.156833%25)%20Input%20Amount%3A%200.6%20%5BUSDC%20-%3E%20WETH%20-%3E%20MOJO%20-%3E%20USDC%5D%0A%F0%9F%94%84%20Route%3A%20%5BUSDC%20-%3E%20WETH%20-%3E%20MOJO%20-%3E%20USDC%5D%20Route%20ID%3A%200x452c93c6f3cc3a10e11571e96bc7c88de3a33ea91a3c28a0d703a04b3bcd309c%0A%E2%9A%99%EF%B8%8F%20Protocols%3A%20%5Buniswap_v3%20-%3E%20uniswap_v2%20-%3E%20uniswap_v2%5D%0A%E2%9B%93%EF%B8%8F%20Tokens%3A%200x833589fcd6edb6e08f4c7c32d4f71b54bda02913%3A0x4200000000000000000000000000000000000006%3A0x6dba065721435cfca05caa508f3316b637861373%3A0x833589fcd6edb6e08f4c7c32d4f71b54bda02913%0A%F0%9F%AA%99%20Start%20token%3A%20USDC%200x833589fcd6edb6e08f4c7c32d4f71b54bda02913%20decimals%3A6%0A%F0%9F%92%8E%20Input%20amounts%3A%200.600000%20-%3E%200.000129%20-%3E%2030728417.014588%0A%E2%AD%90%20Eval%20Raw%20amounts%3A%20600000%20-%3E%20129458828870424%20-%3E%2030728417014587798013457008%20%3D%20600959%0A%F0%9F%94%81%20Pools%3A%200xd0b53d9277642d899df5c87a3966a349a798f224%20%3A%200x7ef7a6e5b577a1c630e42291c25bca791d402493%20%3A%200xfc49208c1222c8037d4be05890b841ad25ceec60%0A%F0%9F%94%81%20Flash%20pool%3A%20pool%3A0x021235b92a4f52c789f43a1b01453c237c265861%20token%3A%202c8c89c442436cc6c0a77943e09c8daf49da3161%20borrowToken0%3Afalse%20fee%3A0.01%25%0A%60%60%60%0A%0A%23%23%23%20Some%20Statistics%0A%0A%23%23%23%23%20Performance%20Statistics%0A%0ABelow%20show%20route%20evaluation%20(and%20execution)%20capabilities%20of%20over%201000%20routes%20per%20second%2C%20run%20on%20small%20relatively%20slow%20mini%20pc.%20This%20is%20a%20summary%20of%20several%20runs%20executed%20on%20mulitple%20chains%20over%20a%20total%20of%2051%20and%20a%20half%20minutes.%0A%0A%7C%20%F0%9F%93%8A%20Statistic%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Value%20%20%20%7C%0A%7C%20-----------------------------%20%7C%20-------%20%7C%0A%7C%20Total%20Routes%20Evaluated%20%20%20%20%20%20%20%20%7C%20182%2C746%20%7C%0A%7C%20Peak%20Routes%2Fsec%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%201%2C146%20%20%20%7C%0A%7C%20Current%20Routes%2Fsec%20(last%20run)%20%7C%201%2C069%20%20%20%7C%0A%7C%20Average%20Route%20Eval%20Time%20(%C2%B5s)%20%20%7C%20424%20%20%20%20%20%7C%0A%7C%20DB%20Throughput%20(ops%2Fsec)%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%7C%0A%7C%20Memory%20Usage%20(MB)%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20657%20%20%20%20%20%7C%0A%7C%20Batch%20Size%20(last%20run)%20%20%20%20%20%20%20%20%20%7C%201%20%20%20%20%20%20%20%7C%0A%7C%20Execution%20Success%20Rate%20(%25)%20%20%20%20%7C%20100%20%20%20%20%20%7C%0A%7C%20Metrics%20Capture%20Duration%20(s)%20%20%7C%203%2C090%20%20%20%7C%0A%0A%23%23%23%23%20Chain%20Stats%0A%0AFollowing%20are%20the%20chains%20we%20used%20for%20our%20evaluation%2C%20testing%20multiple%20chains%2C%20hop%20sizes%20and%20protocols%20to%20give%20a%20well%20balanced%20analysis.%0A%0A%7C%20%F0%9F%93%8A%20Statistic%20%20%20%20%20%20%20%20%20%7C%20Base%20%20%20%7C%20Ethereum%20%7C%20Unichain%20%7C%0A%7C%20--------------------%20%7C%20------%20%7C%20--------%20%7C%20--------%20%7C%0A%7C%20Routes%20Total%20%20%20%20%20%20%20%20%20%7C%2085%2C986%20%7C%2033%2C226%20%20%20%7C%2024%2C600%20%20%20%7C%0A%7C%20Graph%20Edges%20(Pools)%20%20%7C%205%2C338%20%20%7C%204%2C276%20%20%20%20%7C%20114%20%20%20%20%20%20%7C%0A%7C%20Graph%20Nodes%20(Tokens)%20%7C%202%2C477%20%20%7C%201%2C593%20%20%20%20%7C%2033%20%20%20%20%20%20%20%7C%0A%7C%20Total%20Tokens%20%20%20%20%20%20%20%20%20%7C%2026%2C061%20%7C%2011%2C824%20%20%20%7C%2015%2C300%20%20%20%7C%0A%7C%20TVL%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%201%20%20%20%20%20%20%7C%2050%20%20%20%20%20%20%20%7C%201%20%20%20%20%20%20%20%20%7C%0A%7C%20Hops%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%204%20%20%20%20%20%20%7C%203%20%20%20%20%20%20%20%20%7C%205%20%20%20%20%20%20%20%20%7C%0A%7C%20Protocols%20%20%20%20%20%20%20%20%20%20%20%20%7C%202%20%20%20%20%20%20%7C%207%20%20%20%20%20%20%20%20%7C%203%20%20%20%20%20%20%20%20%7C%0A%0A%3E%20Note%20run%20on%20Sep%2026th%202025%0A%3E%20**Routes**%3A%20Represent%20how%20many%20cyclical%20routes%20we%20created%20(e.g.%20A%20-%3E%20B%20-%3E%20C%20-%3E%20A)%0A%3E%20**Graph%20Edges%20(Pools)**%20the%20number%20of%20pools%20we%20are%20selecting%20based%20on%20TVL%20and%20protocol%20filtering%0A%3E%20**Graph%20Nodes%20(Tokens)**%20the%20number%20of%20tokens%20associated%20with%20the%20selected%20pools%0A%3E%20**TVL**%20is%20in%20ETH%20and%20indicates%20the%20minimum%20TVL%20for%20the%20pools%20we%20selected%0A%3E%20**Hops**%20how%20many%20hops%20in%20the%20route%20we%20create%2C%20currently%20we%20support%202%20to%205%20hop%20routes.%20For%20prototyping%20we%20used%20different%20hops%20for%20experimentation%20all%20chains%20support%20up%20to%205%20hops.%0A%3E%20**Protocols**%20the%20number%20of%20protocols%20we%20extracted%20see%20%5BTycho%20Supported%20Protocols%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Ffor-solvers%2Fsupported-protocols)%0A%0A%3E%20Note%20this%20was%20run%20on%20a%20Small%20Computer%20Linux%2C%20AMD%20Ryzen%207%205700u%20(8C%2F16T%2Cup%20to%204.3%20GHz)%2C%20Mini%20PC%20Gamer%2064GB%20DDR4%20RAM%202TB%20PCIe%20SSD%2C%20Mini%20Desktop%20Supports%204K%4060Hz%2FTriple%20Display%2FWiFi%2FBT5.0%2FHDMI%2BDP%2BType%20C%2FHome%2FOffice%0A%0A%23%23%20An%20Overview%20of%20Intent-Based%20Protocols%20and%20Solving%0A%0A%23%23%23%20Resource%20Management%20and%20Capital-Efficient%20Liquidity%0A%0AThe%20key%20to%20building%20a%20high-performance%20system%20lies%20in%20efficient%20resource%20allocation.%20Pools%20themselves%20can%20act%20as%20liquidity%20sources%2C%20and%20flash-loans%20allow%20trades%20to%20execute%20**capital-efficient%20arbitrage**%20without%20requiring%20upfront%20capital.%20With%20the%20advances%20in%20DeFi%20protocols%20such%20as%20%5BUniswap%204%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fv4%2Foverview)%20with%20%5Bhook%20capabilities%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fv4%2Fquickstart%2Fhooks%2Fsetup)%20this%20allowed%20me%20to%20build%20custom%20execution%20logic%20on%20top%20of%20large%20liquidity%20reserves%20giving%20endless%20opportunities.%0A%0AI%20started%20out%20with%20a%20goal%20of%20building%20an%20intent%20based%20hook%2C%20which%20would%20record%20the%20intent%20(e.g.%20swap%201%20ETH%20for%204500%20USDC)%20and%20create%20an%20intent%20which%20I%20could%20solve%2C%20if%20I%20could%20solve%20that%20intent%20giving%20the%20swapper%20a%20better%20return%2C%20than%20I%20could%20keep%20the%20profit.%20For%20example%20if%20the%20pool%20offered%20a%20swap%20of%201%20ETH%20for%204500%20USDC%2C%20but%20I%20had%20a%20better%20route%20that%20could%20swap%201%20ETH%20for%204600%20USDC%2C%20I%20could%20solve%20the%20intent%20giving%20the%20swapper%2C%20say%2C%204550%20USDC%20take%20the%20ETH%20and%20then%20perform%20the%20swap%20netting%2050%20USDC%20profit.%20Whilst%20this%20was%20an%20interesting%20idea%2C%20I%20soon%20came%20to%20realize%20that%20with%20V4's%20pool%20manager%20settlement%20functionality%2C%20it%20was%20better%20to%20build%20the%20intent%20outside%20the%20protocol%20(at%20the%20router%20level)%20rather%20than%20as%20a%20hook.%20Or%20better%20still%20build%20a%20hook%20which%20integrates%20with%20an%20Executor%20such%20Tycho%20with%20perhaps%20some%20Flash%20Loan%20functionality%2C%20more%20to%20come%20on%20this.%0A%0A%23%23%23%20Streaming%2C%20Simulation%2C%20and%20Execution%0A%0AThe%20architecture%20follows%20the%20principle%3A%20**Collectors%20%E2%86%92%20Strategies%20%E2%86%92%20Execution**%0A%0A%23%23%23%23%20Collectors%3A%20Continuously%20stream%20on-chain%20data%0A%0AThe%20bedrock%20of%20the%20collection%20architecture%20is%20the%20%5BTycho%20Indexer%5D(https%3A%2F%2Fdocs.propellerheads.xyz%2Ftycho%2Ffor-solvers%2Findexer)%20built%20on%20%5Bsubstreams%5D(https%3A%2F%2Fdocs.substreams.dev%2F).%20It%20provides%20real%20time%20state%20updates%20for%20multiple%20protocols%20filtered%20by%20TVL%20values%20for%20those%20protocols.%0A%0AOn%20top%20of%20this%20we%20build%20a%20graph%20manager%20and%20a%20route%20manager%20using%20Depth%20First%20Search%20of%20the%20graph%20to%20create%20the%20routes%20with%20a%20little%20flash_loan_manager%20to%20determine%20the%20optimal%20flash%20loan%20available.%20This%20includes%20choosing%20the%20flash%20loan%20with%20the%20lowest%20fee%20which%20does%20not%20have%20any%20locking%20conflicts%20with%20the%20route.%0A%0AThe%20key%20point%20for%20collection%2C%20once%20again%20enabled%20by%20Tycho%20streaming%20technology%2C%20is%20that%20on%20a%20state%20change%20to%20any%20of%20the%20protocols%20which%20I%20am%20monitoring.%20I%20trigger%20route%20evaluations%20for%20all%20routes%20that%20contain%20that%20pool.%20Evaluating%20whether%20a%20positive%20arbitrage%20cycle%20exists%20or%20not.%20I%20must%20admit%20its%20tireless%20work%20for%20the%20route%20evaluate%20and%20its%20queue%20manager%2C%20evaluating%20hundreds%20or%20even%20thousands%20of%20routes%20per%20block%2C%20but%20occasionally%2C%20just%20occasionally%20an%20opportunity%20will%20be%20found%2C%20which%20makes%20it%20all%20worthwhile.%0A%0A%23%23%23%23%20Strategies%3A%20Analyze%20and%20simulate%20opportunities%0A%0AThe%20first%20(and%20only%20thus%20far)%20strategy%20implemented%20thus%20far%20is%20a%20cyclical%20arbitrage.%20Starting%20and%20ending%20with%20the%20same%20token%20traversing%20throough%20routes%20we%20simulate%20each%20input%20and%20output%20amount%20for%20the%20route%20and%20evaluate%20if%20a%20positve%20aribtrage%20exists.%20If%20so%20a%20Solution%20for%20the%20route%20with%20an%20input%20amount%20is%20Signalled.%20This%20will%20be%20received%20by%20the%20execution%20layer.%0A%0ABelow%20is%20the%20profitability%20calculation%0A%0A%23%23%23%23%20Execution%3A%20Executing%20the%20transactions%0A%0AThe%20exeuction%20layer%20receives%20a%20Solution%20including%20input%20amount%20and%20the%20route%20to%20execute.%20It%20performs%20additional%20aumentation%20and%20encoding.%0A%0AFor%20example%20in%20the%20reference%20cylical%20aribtrage%20the%20executor%20maps%20both%20the%20flash%20loan%20parameters%20and%20swap%20parameters.%20It%20encodes%20the%20solution%20and%20using%20alloy%20binding%20for%20flashExecutor%20creates%20the%20calldata%20for%20the%20transaction.%0A%0AThe%20executor%20itself%20has%20pre-flight%20validation%20which%20will%20capture%20any%20identified%20routes%20which%20may%20no%20longer%20be%20profitabile%20or%20error%20because%20of%20other%20upstream%20analysis%20issues.%20This%20saves%20wasting%20gas%20on%20transactions%20that%20will%20revert.%0A%0A%23%23%20Profitability%20Calculation%0A%0ALet%20%60A0%60%20be%20amount_in%20(start%20token)%2C%20%60Ak%60%20be%20amount_out%20(end%20token)%2C%20%60fee_hundredths_bip%60%20the%20flash%20fee%20in%201e-6%20units.%0A%0A-%20swap_profit_percentage%20%3D%20((Ak%20%E2%88%92%20A0)%20%2F%20A0)%20%C3%97%20100%0A-%20flash_fee_pct%20%3D%20fee_hundredths_bip%20%2F%2010_000%20(as%20percent)%0A-%20net_profit_percentage%20%3D%20swap_profit_percentage%20%E2%88%92%20flash_fee_pct%0A-%20net_profit_token%20%3D%20Ak%20%E2%88%92%20A0%20%E2%88%92%20floor(A0%20%C3%97%20fee_hundredths_bip%20%2F%201_000_000)%0A%0AThreshold%20gating%20uses%20%60net_profit_percentage%20%3E%3D%20profit_threshold%60%20(default%200.0%25).%0A%0AAt%20this%20time%20we%20then%20need%20to%20optimize%20the%20input%20amount%20for%20the%20route.%0AThis%20is%20done%20using%20a%20binary%20doubling%20and%20halving%20algorithm%20until%20the%20optimal%20amount%20is%20found.%0A%0A-%20**Execution**%3A%20Optimistically%20execute%20profitable%20paths%0A%0A---%0A%0A%23%23%20Building%20a%20Liquidity%20Mapping%20Layer%0A%0AConceptually%20this%20was%20farly%20straight%20forward%2C%20create%20a%20graph%20with%20Tokens%20as%20Nodes%2C%20Pools%20as%20edges%20and%20then%20create%20routes%20for%20that%20graph.%20With%20the%20protocol%20abstraction%20offered%20by%20tycho's%20component%20and%20state%20model.%20A%20pool%20is%20a%20pool%20is%20a%20pool%20regardles%20of%20what%20the%20underlying%20protocol%20is.%20This%20simplified%20the%20implementation%20considerably%0A%0A---%0A%0A%23%23%20My%20First%20Strategy%3A%20Cyclical%20Arbitrage%0A%0A%23%23%23%20(Hello%20Bellman-Ford)%0A%0A-%20Analytical%20optimization%20for%20multi-hop%20routes%0A-%20Supports%20**2%E2%80%935%20hop%20cycles**%0A-%20Prioritizes%20**profitability%20and%20performance**%20(~1000%20routes%2Fsec)%0A%0A%3E%20An%20open%20strategy%20framework%20is%20under%20development%20with%20the%20Cyclica%20Arbitrage%20(CARB)%20implemented%20and%20a%20TOKEN%20(token%20based%20arbitrage%20which%20groups%20all%20the%20routes%20for%20the%20input%20token%20and%20selects%20the%20route%20with%20the%20highest%20profitability)%20currently%20being%20tested%20in%20production.%0A%0A---%0A%0A%23%23%20The%20Execution%20Layer%20%E2%80%93%20Making%20It%20Happen%0A%0A%23%23%23%20Some%20Flash%20Loan%20Magic%0A%0A-%20Borrow%20liquidity%20directly%20from%20pools%20for%20capital-efficient%20trades%0A-%20Near-zero%20fees%2C%20instant%20execution%0A%0A%23%23%23%20The%20Beauty%20of%20Routes%3A%20Single%20and%20Sequential%20Swaps%0A%0A-%20**Atomic%20Execution**%3A%20Trades%20revert%20if%20not%20profitable%0A-%20**Optimistic%20Recursive%20Execution**%3A%20Capture%20secondary%20opportunities%20generated%20by%20large%20trades%0A%0A---%0A%0A%23%23%23%20Summary%20of%20Features%0A%0A-%20Multi-chain%2C%20multi-protocol%20route%20evaluation%0A-%20Multi-hop%20arbitrage%20support%0A-%20Flash-loan%20enabled%20trades%0A-%20Persistent%20storage%20for%20faster%20startup%0A-%20Modular%20queues%20for%20streaming%2C%20graph%2C%20route%20management%2C%20evaluation%2C%20and%20execution%0A%0A---%0A%0A%23%23%23%20Key%20Milestones%0A%0A-%20**First%20Working%20Transaction%3A**%20%5BView%20on%20BaseScan%5D(https%3A%2F%2Fbasescan.org%2Ftx%2F0xde470c186d89aa02e6be2c066b99e7f4e39faebbca9ded80be766f64e28eacfa)%0A-%20Support%20for%20**2%E2%80%935%20hop%20routes**%0A-%20**Standalone%20persistence**%20for%20tokens%2C%20graphs%2C%20and%20routes%0A-%20**Multi-protocol%20support**%3A%0A%20%20-%20Ethereum%3A%20Uniswap%20v2%2Fv3%2Fv4%2C%20Balancer%20v2%2C%20Curve%2C%20Sushiswap%20v2%2C%20Pancakeswap%20v2%2Fv3%2C%20Ekubo%20v2%0A%20%20-%20Base%3A%20Uniswap%20v2%2Fv3%0A%20%20-%20Unichain%20Uniswap%20v2%2Fv3%2Fv4%0A-%20SingleSwap%20Support%20takes%20advantage%20of%20complex%20routes%20using%20Uniswap%20V4%20advanced%20Execution%0A-%20**Performance**%3A%20~1000%20route%20evaluations%20per%20second%0A-%20Prototype%20**v4%20Flash%20Loans**%20(near-zero%20fees)%0A%0A---%0A%0A%23%23%23%20Still%20to%20Come%0A%0AAt%20time%20of%20writing%20these%20features%20are%20being%20evaluated%20and%2For%20implemented%0A%0A-%20Gas%20manager%0A-%20MEV%20bundling%0A-%20Token%20based%20evaluation%20(grouping%20of%20all%20routes%20for%20a%20token%20to%20ensure%20the%20most%20profitable%20arbitrage)%0A-%20Additional%20protocol%20integrations%0A-%20Further%20performance%20optimizations%0A-%20Uniswap%20V4%20Flash%20Hook%20(Access%20to%20V4%20Liquidity%20integrated%20with%20complex%20routing%20and%20exeuction%20strategies)%0A-%20Liquidity%20Management%20(ERC-6909%20based%20liquidity%20manageer%20build%20on%20%5Bthe-compact%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fthe-compact%2Foverview)%20from%20Uniswap)%0A%0A---%0A%0A%23%23%20What%E2%80%99s%20Next%20%E2%80%93%20Opportunities%20%26%20Integrations%0A%0A%23%23%23%20Filling%20Strategies%0A%0AMulti%20protocol%20solver%20integrations%20including%0A%0A-%20**UniswapX%20Solving**%0A-%20**1inch%20Limit%20Order%20Solver%20Integration**%0A-%20**Cowswap%20Solving**%0A%0A%23%23%23%20Flash%20Liquidity%0A%0A-%20**Uniswap%20%2F%20Tycho%20Limit%20Order%20Hook%20Integration**%0A%0A%23%23%23%20Protocol%20Order%20Flow%0A%0AAdding%20additional%20protocols%20to%20the%20simulation%20and%20execution%20framework%20to%20drive%20order%20flow.%0A%0A%23%23%23%20Liquidity%20Management%0A%0AIntroducing%20an%20advanced%20liquidity%20management%20infrastructure%20with%20real%20time%20settlement%2C%20JIT%20liqidity%20provioning%20and%20support%20for%20advanced%20trading%20strategies.%20(ERC-6909%20based%20liquidity%20manageer%20build%20on%20%5Bthe-compact%5D(https%3A%2F%2Fdocs.uniswap.org%2Fcontracts%2Fthe-compact%2Foverview)%20from%20Uniswap)%0A%0A%23%23%23%20Miscellaneous%0A%0A-%20Hosted%20services%20for%20Market%20Makers%20and%20Solvers%0A-%20Collaboration%20and%20Consulting%20for%20Protocols%20looking%20to%20attract%20more%20order%20flow.%0A-%20Strategy%20development%20for%20Solving%2C%20Market%20Making%20and%20Liquidation%20Engines.%0A%0A%23%20Appendices%0A%0A%23%23%20Appendix%20A%3A%20Mathematics%0A%0A%23%23%23%20Route%20Manager%0A%0AThe%20Route%20Manager%20enumerates%20all%20possible%20multi-hop%20routes%20through%20the%20liquidity%20graph.%20We%20use%20a%20modified%20Depth-First%20Search%20(DFS)%20traversal%20to%20explore%20potential%20sequences%20of%20swaps%2C%20iterating%20through%20multiple%20nodes%20while%20avoiding%20revisiting%20tokens%20in%20the%20same%20route.%0A%0AMathematically%2C%20for%20a%20graph%20%24%24G%20%3D%20(V%2C%20E)%24%24%20with%20vertices%20%24V%24%20representing%20tokens%20and%20edges%20%24E%24%20representing%20liquidity%20pools%2C%20DFS%20can%20be%20described%20recursively%20as%3A%0A%0ADFS(v)%20%3D%20visit%20all%20neighbors%20of%20v%20recursively%20without%20revisiting%20nodes%20in%20the%20current%20path%0A%0AOur%20implementation%20supports%20two%20main%20modes%3A%0A%0A1.%20**Full%20Graph%20Rebuild%3A**%20Clears%20all%20existing%20graph%20data%20and%20rebuilds%20from%20scratch%2C%20adding%20pools%20in%20bulk%20or%20individually%20depending%20on%20dataset%20size.%20V4%20eligibility%20of%20tokens%20is%20processed%20for%20all%20pools.%0A2.%20**Incremental%20Updates%3A**%20Adds%20new%20pools%20to%20the%20existing%20graph%20without%20clearing%20prior%20data.%20Optimized%20for%20%24O(n)%24%20complexity%20relative%20to%20the%20number%20of%20new%20pools.%0A%0AEdges%20are%20bidirectional%20between%20token%20pairs%3A%0A%0A%24%24%0AA%20%5Cleftrightarrow%20B%0A%24%24%0A%0AEach%20edge%20stores%20metadata%20including%20the%20pool%20identifier%2C%20output%20token%2C%20protocol%2C%20and%20fee%20basis%20points.%0A%0A%23%23%23%23%20Modified%20DFS%20Traversal%0A%0AInstead%20of%20a%20simple%20recursive%20DFS%2C%20the%20route%20manager%20iteratively%20explores%20each%20node%20while%20accounting%20for%3A%0A%0A-%20Pool%20and%20token%20blacklists%20to%20prevent%20invalid%20routes%0A-%20Multi-protocol%20support%20(Uniswap%20V2%2FV3%2FV4%2C%20Sushiswap%2C%20Pancakeswap%2C%20Ekubo%2C%20Balancer%2C%20Curve)%0A-%20Flash%20loan%20constraints%20to%20avoid%20locking%20conflicts%0A-%20Real-time%20V4%20eligibility%20of%20tokens%0A%0AThe%20traversal%20maintains%20a%20stack%20of%20paths%2C%20extending%20each%20path%20by%20iterating%20over%20neighbor%20tokens.%20If%20a%20neighbor%20has%20already%20been%20visited%20in%20the%20current%20path%2C%20it%20is%20skipped%20to%20prevent%20cycles%20that%20do%20not%20start%20and%20end%20at%20the%20same%20token.%0A%0A%23%23%23%23%20Graph%20Construction%20Overview%0A%0A-%20Assign%20unique%20identifiers%20for%20each%20pool%20and%20token%0A-%20Create%20bidirectional%20edges%20connecting%20the%20token%20pair%0A-%20Update%20adjacency%20structures%20for%20fast%20neighbor%20lookup%0A-%20Persist%20edges%20to%20storage%20in%20both%20compact%20and%20legacy%20formats%0A%0A%23%23%23%23%20DFS%20Context%0A%0ADepth-first%20search%20is%20an%20algorithm%20for%20traversing%20or%20searching%20tree%20or%20graph%20structures.%20Starting%20at%20a%20root%20node%20(or%20an%20arbitrary%20node%20in%20a%20general%20graph)%2C%20DFS%20explores%20as%20far%20as%20possible%20along%20each%20branch%20before%20backtracking.%20A%20stack%20(explicit%20or%20via%20recursion)%20tracks%20the%20nodes%20visited%20along%20the%20current%20branch.%0A%0AIn%20the%20arbitrage%20solver%2C%20DFS%20enumerates%20all%20candidate%20routes%20for%20evaluation%20by%20the%20Route%20Evaluator%2C%20ensuring%20that%20profitable%20multi-hop%20cycles%20are%20identified%20while%20respecting%20token%20and%20pool%20constraints.%0A%0A---%0A%0A%23%23%23%20Route%20Evaluator%0A%0AThe%20route%20evaluation%20process%20leverages%20the%20Bellman%E2%80%93Ford%20algorithm%20to%20detect%20negative-weight%20cycles%20that%20correspond%20to%20profitable%20arbitrage%20opportunities%3A%0A%0A%60d(v)%20%3D%20min_%7B(u%2Cv)%20in%20E%7D%20%5B%20d(u)%20%2B%20w(u%2Cv)%20%5D%60%0A%0ANegative-weight%20cycles%20represent%20opportunities%20where%20the%20sequence%20of%20swaps%20results%20in%20a%20net%20gain%20after%20accounting%20for%20fees.%0A%0A%3E%20Token%20Evaluation%20is%20in%20progress%20this%20groups%20all%20the%20routes%20for%20the%20input%20token%20and%20selects%20the%20route%20with%20the%20highest%20profitability%0A%0A---%0A%0A%23%23%23%20Optimal%20Amount%20Calculator%0A%0AThe%20function%20%60find_optimal_input_amount%60%20computes%20the%20**capital-efficient%20input%20amount**%20for%20a%20given%20arbitrage%20or%20swap%20route%20to%20maximize%20profit.%20%20%0AMathematically%2C%20it%20is%20an%20**iterative%20optimization%20problem**%20combining%20**exponential%20search**%20and%20**binary%20search**%20over%20discrete%20input%20amounts.%0A%0A---%0A%0A%23%23%23%23%20Step%200%3A%20Initialization%0A%0ALet%3A%0A%0A-%20%60A_min%60%20%3D%20initial%20minimum%20input%20(e.g.%2C%200.1%20token)%0A-%20%60A_max%60%20%3D%20upper%20bound%20(initialized%20as%20%60A_min%60)%0A-%20%60P_best%20%3D%200%60%20%3D%20best%20observed%20profit%0A-%20%60A_best%20%3D%20A_min%60%20%3D%20best%20input%20amount%0A-%20%60%CE%B5%60%20%3D%20minimum%20input%20resolution%20(based%20on%20token%20decimals%2C%20e.g.%2C%200.001%20token)%0A%0ADefine%3A%0A%0A-%20%60profit(amount)%60%20%3D%20evaluation%20function%20that%20returns%20absolute%20profit%20from%20using%20%60amount%60%20on%20the%20route.%0A%0A---%0A%0A%23%23%23%23%20Phase%201%3A%20Doubling%20Search%20(Exponential%20Growth)%0A%0A**Goal%3A**%20Quickly%20find%20an%20**upper%20bound**%20for%20profitable%20input.%0A%0A1.%20Set%20%60A%20%3D%20A_min%60%0A2.%20Repeat%20for%20a%20maximum%20number%20of%20iterations%3A%0A%20%20%201.%20Evaluate%20profit%3A%20%60P%20%3D%20profit(A)%60%0A%20%20%202.%20If%20%60P%20%3E%20P_best%60%2C%20update%3A%0A%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20P_best%20%3D%20P%0A%20%20%20%20%20%20A_best%20%3D%20A%0A%20%20%20%20%20%20%60%60%60%0A%20%20%203.%20If%20profit%20drops%20below%20threshold%20or%20declines%20significantly%2C%20stop%20doubling%0A%20%20%204.%20Else%2C%20double%20the%20input%3A%0A%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20A%20%3D%202%20*%20A%0A%20%20%20%20%20%20%60%60%60%0A%0A**Result%3A**%0A%0A-%20%60A_max%20%3D%20A%60%20(approximate%20upper%20bound)%0A-%20%60A_min%60%20%3D%20last%20profitable%20input%20from%20doubling%0A%0A%3E%20This%20phase%20is%20equivalent%20to%20an%20**exponential%20search**%20to%20find%20the%20range%20where%20the%20optimal%20input%20lies.%0A%0A---%0A%0A%23%23%23%23%20Phase%202%3A%20Binary%20Search%20(Refinement)%0A%0A**Goal%3A**%20Refine%20the%20optimal%20input%20within%20%60%5BA_min%2C%20A_max%5D%60.%0A%0A1.%20While%20%60A_max%20-%20A_min%20%3E%20%CE%B5%60%20and%20iterations%20%3C%20%60max_search_iterations%60%3A%0A%20%20%201.%20Compute%20midpoint%3A%0A%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20A_mid%20%3D%20(A_min%20%2B%20A_max)%20%2F%202%0A%20%20%20%20%20%20%60%60%60%0A%20%20%202.%20Evaluate%20profit%20at%20midpoint%3A%20%60P%20%3D%20profit(A_mid)%60%0A%20%20%203.%20Update%20best%3A%0A%20%20%20%20%20%20-%20If%20%60P%20%3E%20P_best%60%2C%20then%3A%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20A_best%20%3D%20A_mid%0A%20%20%20%20%20%20%20%20P_best%20%3D%20P%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%204.%20Update%20bounds%20for%20next%20iteration%3A%0A%20%20%20%20%20%20-%20If%20midpoint%20profit%20%3E%20previous%20profit%20%E2%86%92%20search%20higher%3A%20%60A_min%20%3D%20A_mid%60%0A%20%20%20%20%20%20-%20Else%20%E2%86%92%20search%20lower%3A%20%60A_max%20%3D%20A_mid%60%0A%0A**Result%3A**%0A%0A-%20%60A_best%60%20approximates%20the%20**input%20amount%20that%20maximizes%20profit**%20within%20desired%20precision.%0A%0A---%0A%0A%23%23%23%23%20Mathematical%20Summary%0A%0A-%20**Exponential%20search%3A**%20Quickly%20find%20search%20range%20%60%5BA_min%2C%20A_max%5D%60%0A-%20**Binary%20search%3A**%20Efficiently%20refine%20the%20optimum%20within%20that%20range%0A-%20**Profit%20metric%3A**%20Absolute%20profit%20(%60output%20-%20input%60)%20used%20to%20select%20best%20amount%0A-%20**Dynamic%20adjustments%3A**%20Optional%20function%20to%20tweak%20inputs%20if%20routes%20behave%20non-linearly%20or%20have%20state-dependent%20constraints.%0A%0A%60%60%60%0Amaximize%20P(A)%20%3D%20profit%20from%20route%20given%20input%20A%0A%0Asubject%20to%3A%0A%20%20%20%20A_min%20%3C%3D%20A%20%3C%3D%20A_max%0A%20%20%20%20P(A)%20%3E%3D%20profit_threshold%0A%0Awhere%3A%0A%20%20%20%20A_max%20is%20found%20via%20exponential%20doubling%0A%20%20%20%20A_best%20is%20refined%20via%20binary%20search%0A%60%60%60%0A%0A-%20**Exponential%20search%3A**%20Quickly%20find%20search%20range%20%60%5BA_min%2C%20A_max%5D%60%0A-%20**Binary%20search%3A**%20Efficiently%20refine%20the%20optimum%20within%20that%20range%0A-%20**Profit%20metric%3A**%20Absolute%20profit%20(%60output%20-%20input%60)%20used%20to%20select%20best%20amount%0A-%20**Dynamic%20adjustments%3A**%20Optional%20function%20to%20tweak%20inputs%20if%20routes%20behave%20non-linearly%20or%20have%20state-dependent%20constraints.%0A%0A---%0A%0A%23%23%23%20Arbitrage%20Profit%20Calculation%0A%0ANet%20profit%20percentage%20for%20a%20route%3A%0A%0A%60%60%60%0Aswap_profit_pct%20%3D%20(A_k%20-%20A_0)%20%2F%20A_0%20*%20100%0A%0Aflash_fee_pct%20%3D%20fee_hundredths_bip%20%2F%2010%2C000%0A%0Anet_profit_pct%20%3D%20swap_profit_pct%20-%20flash_fee_pct%0A%0Anet_profit_token%20%3D%20A_k%20-%20A_0%20-%20floor(%20A_0%20*%20fee_hundredths_bip%20%2F%201%2C000%2C000%20)%0A%60%60%60%0A%0A%23%23%20Appendix%20B%3A%20Performance%0A%0A%23%23%23%20Chain%20Breakdown%0A%0A%7C%20%F0%9F%93%8A%20Statistic%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Base%20%20%20%7C%20Ethereum%20%7C%20Unichain%20%7C%0A%7C%20---------------------------%20%7C%20------%20%7C%20--------%20%7C%20--------%20%7C%0A%7C%20Total%20Tokens%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%2026%2C061%20%7C%2011%2C824%20%20%20%7C%2015%2C300%20%20%20%7C%0A%7C%20Graph%20Nodes%20(Tokens)%20%20%20%20%20%20%20%20%7C%202%2C477%20%20%7C%201%2C593%20%20%20%20%7C%2033%20%20%20%20%20%20%20%7C%0A%7C%20Graph%20Nodes%20(V4%20Eligible)%20%20%20%7C%20838%20%20%20%20%7C%20826%20%20%20%20%20%20%7C%2033%20%20%20%20%20%20%20%7C%0A%7C%20Graph%20Nodes%20(V4%20Ineligible)%20%7C%201%2C639%20%20%7C%20767%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%7C%0A%7C%20Graph%20Edges%20(Pools)%20%20%20%20%20%20%20%20%20%7C%205%2C338%20%20%7C%204%2C276%20%20%20%20%7C%20114%20%20%20%20%20%20%7C%0A%7C%20Routes%20Total%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%2085%2C986%20%7C%2033%2C226%20%20%20%7C%2024%2C600%20%20%20%7C%0A%7C%20Routes%20Flash%20V4%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%2085%2C616%20%7C%2019%2C284%20%20%20%7C%2068%20%20%20%20%20%20%20%7C%0A%7C%20Routes%20Flash%20Other%20%20%20%20%20%20%20%20%20%20%7C%202%20%20%20%20%20%20%7C%2011%2C762%20%20%20%7C%2019%2C162%20%20%20%7C%0A%7C%20Routes%20Flash%20Error%20%20%20%20%20%20%20%20%20%20%7C%20368%20%20%20%20%7C%202%2C180%20%20%20%20%7C%205%2C370%20%20%20%20%7C%0A%7C%20**TVL**%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%201%20%20%20%20%20%20%7C%2050%20%20%20%20%20%20%20%7C%201%20%20%20%20%20%20%20%20%7C%0A%7C%20**HOPS**%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%204%20%20%20%20%20%20%7C%203%20%20%20%20%20%20%20%20%7C%205%20%20%20%20%20%20%20%20%7C%0A%0A%23%23%23%20Performance%20Summary%0A%0A%7C%20%F0%9F%93%8A%20Statistic%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Value%20%20%20%7C%0A%7C%20-----------------------------%20%7C%20-------%20%7C%0A%7C%20Total%20Routes%20Evaluated%20%20%20%20%20%20%20%20%7C%20182%2C746%20%7C%0A%7C%20Peak%20Routes%2Fsec%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%201%2C146%20%20%20%7C%0A%7C%20Current%20Routes%2Fsec%20(last%20run)%20%7C%201%2C069%20%20%20%7C%0A%7C%20Average%20Route%20Eval%20Time%20(%C2%B5s)%20%20%7C%20424%20%20%20%20%20%7C%0A%7C%20DB%20Throughput%20(ops%2Fsec)%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%7C%0A%7C%20Memory%20Usage%20(MB)%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20657%20%20%20%20%20%7C%0A%7C%20Batch%20Size%20(last%20run)%20%20%20%20%20%20%20%20%20%7C%201%20%20%20%20%20%20%20%7C%0A%7C%20Execution%20Success%20Rate%20(%25)%20%20%20%20%7C%20100%20%20%20%20%20%7C%0A%7C%20Metrics%20Capture%20Duration%20(s)%20%20%7C%203%2C090%20%20%20%7C%0A%0A%23%23%23%20Performance%20Detail%0A%0A%7C%20Timestamp%20%20%20%20%20%20%20%20%20%20%20%7C%20Total%20Routes%20%7C%20Avg%20Eval%20Time%20(%C2%B5s)%20%7C%20Peak%20Routes%2Fsec%20%7C%20Current%20Routes%2Fsec%20%7C%20DB%20Throughput%20(ops%2Fsec)%20%7C%20Memory%20(MB)%20%7C%20Batch%20Size%20%7C%20Success%20Rate%20(%25)%20%7C%20Metrics%20Capture%20Duration%20(s)%20%7C%0A%7C%20-------------------%20%7C%20------------%20%7C%20------------------%20%7C%20---------------%20%7C%20------------------%20%7C%20-----------------------%20%7C%20-----------%20%7C%20----------%20%7C%20----------------%20%7C%20----------------------------%20%7C%0A%7C%202025-09-26T18%3A02%3A16%20%7C%209%2C248%20%20%20%20%20%20%20%20%7C%2057%2C020%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20190%20%20%20%20%20%20%20%20%20%7C%203%2C122%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200.10%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%202025-09-27T01%3A27%3A13%20%7C%2033%2C042%20%20%20%20%20%20%20%7C%201%2C159%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20576%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20507%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20279%20%20%20%20%20%20%20%20%20%7C%201%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%2031.60%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%202025-09-27T01%3A28%3A31%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20142%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200.10%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%202025-09-27T01%3A29%3A52%20%7C%2013%2C896%20%20%20%20%20%20%20%7C%204%2C799%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20464%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%2010%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20247%20%20%20%20%20%20%20%20%20%7C%201%20%20%20%20%20%20%20%20%20%20%7C%20100%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%2036.82%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%202025-09-27T02%3A28%3A52%20%7C%208%2C508%20%20%20%20%20%20%20%20%7C%203%2C188%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20483%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20334%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20243%20%20%20%20%20%20%20%20%20%7C%201%20%20%20%20%20%20%20%20%20%20%7C%20100%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%2036.02%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%202025-09-27T05%3A26%3A44%20%7C%2024%2C262%20%20%20%20%20%20%20%7C%201%2C160%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20641%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%2090%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20248%20%20%20%20%20%20%20%20%20%7C%201%20%20%20%20%20%20%20%20%20%20%7C%2040%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%2038.74%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%202025-09-27T06%3A10%3A32%20%7C%2057%20%20%20%20%20%20%20%20%20%20%20%7C%201%2C456%2C807%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20207%20%20%20%20%20%20%20%20%20%7C%2057%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200.24%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%202025-09-27T06%3A25%3A54%20%7C%20928%20%20%20%20%20%20%20%20%20%20%7C%20185%2C317%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20302%20%20%20%20%20%20%20%20%20%7C%20928%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200.16%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%202025-09-27T06%3A39%3A39%20%7C%202%2C138%20%20%20%20%20%20%20%20%7C%20289%2C502%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20418%20%20%20%20%20%20%20%20%20%7C%202%2C138%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200.25%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%202025-09-27T07%3A51%3A53%20%7C%2038%2C810%20%20%20%20%20%20%20%7C%20605%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%201%2C023%20%20%20%20%20%20%20%20%20%20%20%7C%20674%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20412%20%20%20%20%20%20%20%20%20%7C%201%20%20%20%20%20%20%20%20%20%20%7C%20100%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20226.02%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%202025-09-27T10%3A36%3A00%20%7C%203%2C135%20%20%20%20%20%20%20%20%7C%202%2C514%2C005%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20450%20%20%20%20%20%20%20%20%20%7C%203%2C135%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%207%2C885.70%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%202025-09-27T16%3A51%3A53%20%7C%20182%2C746%20%20%20%20%20%20%7C%20354%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%201%2C146%20%20%20%20%20%20%20%20%20%20%20%7C%201%2C069%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20657%20%20%20%20%20%20%20%20%20%7C%201%20%20%20%20%20%20%20%20%20%20%7C%20100%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%203%2C090.32%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%202025-09-27T17%3A08%3A56%20%7C%2060%2C618%20%20%20%20%20%20%20%7C%20424%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%201%2C033%20%20%20%20%20%20%20%20%20%20%20%7C%20968%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%200%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20494%20%20%20%20%20%20%20%20%20%7C%201%20%20%20%20%20%20%20%20%20%20%7C%2087%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20416.48%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%0A%23%23%20Appendix%20C%3A%20Reference%20Implementation%0A%0A%23%23%23%20Architecture%20Overview%0A%0AThe%20Tycho%20solver%20system%20implements%20a%20sophisticated%20arbitrage%20bot%20capable%20of%20generating%20profit%20with%20**no%20upfront%20capital**%20through%20flash%20loan-based%20execution.%20The%20architecture%20follows%20a%20**streaming-first%20approach**%20that%20processes%20real-time%20blockchain%20data%20to%20identify%20and%20execute%20profitable%20arbitrage%20opportunities.%0A%0A%23%23%23%23%20Core%20Design%20Principles%0A%0A1.%20**Collectors%20%E2%86%92%20Strategies%20%E2%86%92%20Execution**%3A%20Modular%20architecture%20with%20clear%20separation%20of%20concerns%0A2.%20**Real-time%20Processing**%3A%20Live%20blockchain%20data%20streaming%20via%20Tycho%20protocol%20streams%0A3.%20**Capital%20Efficiency**%3A%20Flash%20loan%20integration%20eliminates%20upfront%20capital%20requirements%0A4.%20**Multi-protocol%20Support**%3A%20Uniswap%20V2%2C%20V3%2C%20V4%20with%20extensible%20protocol%20framework%0A5.%20**Performance%20Optimization**%3A%20Microsecond-level%20route%20evaluation%20and%20execution%0A%0A%23%23%23%23%20System%20Architecture%0A%0A%60%60%60mermaid%0Agraph%20TB%0A%20%20%20%20subgraph%20%22External%20Data%20Sources%22%0A%20%20%20%20%20%20%20%20TYCHO%5BTycho%20Protocol%20Streams%5D%0A%20%20%20%20%20%20%20%20RPC%5BBlockchain%20RPC%5D%0A%20%20%20%20%20%20%20%20API%5BTycho%20API%5D%0A%20%20%20%20end%0A%0A%20%20%20%20subgraph%20%22solver_core%20(Pure%20Logic)%22%0A%20%20%20%20%20%20%20%20TYPES%5BDomain%20Types%5D%0A%20%20%20%20%20%20%20%20TRAITS%5BInterfaces%2FTraits%5D%0A%20%20%20%20%20%20%20%20MATH%5BFixedPoint%20Math%5D%0A%20%20%20%20%20%20%20%20PROTOCOL%5BProtocol%20Models%5D%0A%20%20%20%20end%0A%0A%20%20%20%20subgraph%20%22solver_driver%20(Runtime)%22%0A%20%20%20%20%20%20%20%20subgraph%20%22Data%20Collection%22%0A%20%20%20%20%20%20%20%20%20%20%20%20STREAMING%5BStreaming%20Engine%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20COLLECTORS%5BData%20Collectors%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20STORE%5BPool%20Store%5D%0A%20%20%20%20%20%20%20%20end%0A%0A%20%20%20%20%20%20%20%20subgraph%20%22Processing%20Pipeline%22%0A%20%20%20%20%20%20%20%20%20%20%20%20GRAPH%5BGraph%20Manager%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20ROUTES%5BRoute%20Manager%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20ANALYZER%5BRoute%20Analyzer%5D%0A%20%20%20%20%20%20%20%20end%0A%0A%20%20%20%20%20%20%20%20subgraph%20%22Execution%20Pipeline%22%0A%20%20%20%20%20%20%20%20%20%20%20%20ENCODER%5BSolution%20Encoder%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20EXECUTOR%5BExecution%20Engine%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20SENDER%5BTransaction%20Sender%5D%0A%20%20%20%20%20%20%20%20end%0A%0A%20%20%20%20%20%20%20%20subgraph%20%22Persistence%22%0A%20%20%20%20%20%20%20%20%20%20%20%20DB%5BRocksDB%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20CACHE%5BMemory%20Cache%5D%0A%20%20%20%20%20%20%20%20end%0A%20%20%20%20end%0A%0A%20%20%20%20subgraph%20%22Smart%20Contracts%22%0A%20%20%20%20%20%20%20%20ROUTER%5BFlashV3Router%5D%0A%20%20%20%20%20%20%20%20POOLS%5BDEX%20Pools%5D%0A%20%20%20%20end%0A%0A%20%20%20%20subgraph%20%22CLI%20Tools%22%0A%20%20%20%20%20%20%20%20ARBITRAGER%5BArbitrager%5D%0A%20%20%20%20%20%20%20%20ROUTE_EXEC%5BRoute%20Executor%5D%0A%20%20%20%20%20%20%20%20TYCHO_CLI%5BTycho%20CLI%5D%0A%20%20%20%20end%0A%0A%20%20%20%20%25%25%20Data%20Flow%0A%20%20%20%20TYCHO%20--%3E%20STREAMING%0A%20%20%20%20RPC%20--%3E%20COLLECTORS%0A%20%20%20%20API%20--%3E%20COLLECTORS%0A%0A%20%20%20%20STREAMING%20--%3E%20STORE%0A%20%20%20%20STORE%20--%3E%20GRAPH%0A%20%20%20%20GRAPH%20--%3E%20ROUTES%0A%20%20%20%20ROUTES%20--%3E%20ANALYZER%0A%20%20%20%20ANALYZER%20--%3E%20ENCODER%0A%20%20%20%20ENCODER%20--%3E%20EXECUTOR%0A%20%20%20%20EXECUTOR%20--%3E%20SENDER%0A%0A%20%20%20%20STORE%20--%3E%20DB%0A%20%20%20%20ROUTES%20--%3E%20DB%0A%20%20%20%20GRAPH%20--%3E%20DB%0A%0A%20%20%20%20SENDER%20--%3E%20ROUTER%0A%20%20%20%20ROUTER%20--%3E%20POOLS%0A%0A%20%20%20%20ARBITRAGER%20--%3E%20STREAMING%0A%20%20%20%20ROUTE_EXEC%20--%3E%20ANALYZER%0A%20%20%20%20TYCHO_CLI%20--%3E%20DB%0A%0A%20%20%20%20%25%25%20Core%20Dependencies%0A%20%20%20%20TYPES%20--%3E%20STREAMING%0A%20%20%20%20TRAITS%20--%3E%20ANALYZER%0A%20%20%20%20MATH%20--%3E%20ANALYZER%0A%20%20%20%20PROTOCOL%20--%3E%20STORE%0A%60%60%60%0A%0A%23%23%23%20Liquidity%20Mapping%20Collector%0A%0AThe%20liquidity%20mapping%20collector%20system%20provides%20comprehensive%20chain%20indexing%20capabilities%20through%20integration%20with%20Tycho%20protocol%20streams%2C%20enabling%20real-time%20monitoring%20of%20blockchain%20state%20changes%20across%20multiple%20supported%20chains.%0A%0A%23%23%23%23%20Persistence%0A%0AThe%20system%20uses%20**RocksDB**%20as%20its%20primary%20database%20engine%20with%20a%20column%20family%20architecture%20optimized%20for%20high-performance%20operations%3A%0A%0A%7C%20Column%20Family%20%7C%20Purpose%20%20%20%20%20%20%20%20%20%20%20%7C%20Key%20Format%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Value%20Format%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20-------------%20%7C%20-----------------%20%7C%20-----------------------%20%7C%20-------------------------------%20%7C%0A%7C%20%60tokens%60%20%20%20%20%20%20%7C%20Token%20metadata%20%20%20%20%7C%20%60token%3A%3Caddress%3E%60%20%20%20%20%20%20%20%7C%20Serialized%20%60Token%60%20struct%20%20%20%20%20%20%20%7C%0A%7C%20%60graph%60%20%20%20%20%20%20%20%7C%20Graph%20edges%20%20%20%20%20%20%20%7C%20%60graph%3A%3Ctoken_address%3E%60%20%7C%20Serialized%20%60Vec%3CCompactEdge%3E%60%20%20%20%7C%0A%7C%20%60routes%60%20%20%20%20%20%20%7C%20Calculated%20routes%20%7C%20%60route%3A%3Croute_id%3E%60%20%20%20%20%20%20%7C%20Serialized%20%60Route%60%20struct%20%20%20%20%20%20%20%7C%0A%7C%20%60signals%60%20%20%20%20%20%7C%20Route%20signals%20%20%20%20%20%7C%20%60signal%3A%3Csignal_id%3E%60%20%20%20%20%7C%20Serialized%20%60RouteSignal%60%20struct%20%7C%0A%0A**Performance%20Optimizations**%3A%0A%0A-%20**Write%20Batching**%3A%20100%20operations%20per%20batch%20with%20100ms%20flush%20interval%0A-%20**Asynchronous%20Writes**%3A%20Non-blocking%20write%20operations%20via%20dedicated%20writer%20thread%0A-%20**Memory%20Caching**%3A%20In-memory%20route%20storage%20with%20O(1)%20pool%20index%20lookup%0A-%20**Incremental%20Updates**%3A%20Only%20recalculates%20affected%20routes%20on%20state%20changes%0A%0A%23%23%23%23%20Graph%20Manager%0A%0AThe%20Graph%20Manager%20constructs%20and%20maintains%20trading%20graphs%20using%20tokens%20as%20nodes%20and%20pools%20as%20edges%20in%20a%20multi-graph%20structure%3A%0A%0A%60%60%60rust%0Apub%20struct%20GraphManager%20%7B%0A%20%20%20%20token_to_id%3A%20HashMap%3CBytes%2C%20u32%3E%2C%0A%20%20%20%20id_to_token%3A%20HashMap%3Cu32%2C%20Bytes%3E%2C%0A%20%20%20%20pool_to_id%3A%20HashMap%3CString%2C%20u32%3E%2C%0A%20%20%20%20id_to_pool%3A%20HashMap%3Cu32%2C%20String%3E%2C%0A%20%20%20%20next_token_id%3A%20u32%2C%0A%20%20%20%20next_pool_id%3A%20u32%2C%0A%7D%0A%0A%23%5Bderive(Debug%2C%20Clone%2C%20Serialize%2C%20Deserialize)%5D%0Apub%20struct%20CompactEdge%20%7B%0A%20%20%20%20pub%20pool_id%3A%20u32%2C%0A%20%20%20%20pub%20token_out%3A%20u32%2C%0A%20%20%20%20pub%20protocol%3A%20u8%2C%20%2F%2F%200%3DUniV2%2C%201%3DUniV3%2C%202%3DUniV4%2C%20etc.%0A%20%20%20%20pub%20fee_bps%3A%20u32%2C%0A%7D%0A%60%60%60%0A%0A**Key%20Features**%3A%0A%0A-%20**Dynamic%20Graph%20Building**%3A%20Real-time%20graph%20construction%20with%20generic%20%60build_or_update_graph()%60%20function%0A-%20**Edge%20Management**%3A%20Pool%20rate%20edges%20with%20metadata%0A-%20**Node%20Management**%3A%20Token%20nodes%20with%20properties%0A-%20**Graph%20Traversal**%3A%20Efficient%20path%20finding%20algorithms%20using%20Depth-First%20Search%20(DFS)%0A-%20**Cycle%20Detection**%3A%20Arbitrage%20cycle%20identification%0A-%20**Incremental%20Updates**%3A%20Optimized%20for%20streaming%20performance%20with%20every-block%20updates%0A%0A**Graph%20Building%20Performance**%3A%0A%0A-%20**193%C2%B5s**%20for%2037%20pools%0A-%20**33%C2%B5s**%20for%202%20pools%0A-%20**O(deg)**%20updates%20for%20efficient%20streaming%0A%0A%23%23%23%23%20Flash%20Loan%20Manager%0A%0AThe%20Flash%20Loan%20Manager%20selects%20optimal%20flash%20loan%20pools%20based%20on%20fee%20structure%20and%20compatibility%20rules%3A%0A%0A%60%60%60rust%0A%23%5Bderive(Debug%2C%20Clone%2C%20PartialEq)%5D%0Apub%20enum%20FlashLoanProvider%20%7B%0A%20%20%20%20%2F%2F%2F%20Uniswap%20V3%20flash%20loans%20-%20always%20available%20for%20all%20routes%0A%20%20%20%20UniswapV3%2C%0A%20%20%20%20%2F%2F%2F%20Uniswap%20V4%20flash%20loans%20-%20conditionally%20available%0A%20%20%20%20%2F%2F%2F%0A%20%20%20%20%2F%2F%2F%20**IMPORTANT%20ELIGIBILITY%20RULE**%3A%0A%20%20%20%20%2F%2F%2F%20V4%20flash%20loans%20are%20only%20allowed%20when%20the%20route%20does%20NOT%20contain%20Uniswap%20V4%20pools.%0A%20%20%20%20%2F%2F%2F%20This%20prevents%20recursive%20dependencies%20and%20potential%20locking%20issues.%0A%20%20%20%20UniswapV4%2C%0A%7D%0A%0A%23%5Bderive(Debug%2C%20Clone)%5D%0Apub%20struct%20FlashLoanCriteria%20%7B%0A%20%20%20%20pub%20min_liquidity_eth%3A%20f64%2C%0A%20%20%20%20pub%20max_fee_bps%3A%20u32%2C%0A%20%20%20%20pub%20preferred_providers%3A%20Vec%3CFlashLoanProvider%3E%2C%0A%7D%0A%60%60%60%0A%0A**Flash%20Loan%20Selection%20Logic**%3A%0A%0A1.%20**V3%20Flash%20Loans**%3A%20Always%20compatible%20with%20any%20route%20(30%20bps%20fee)%0A2.%20**V4%20Flash%20Loans**%3A%20Only%20compatible%20with%20routes%20that%20do%20NOT%20contain%20V4%20pools%20(0%20bps%20fee)%0A3.%20**Priority%20Order**%3A%20V3%20(priority%201)%2C%20V4%20(priority%202)%0A4.%20**Liquidity%20Requirements**%3A%20Minimum%200.1%20ETH%20liquidity%20for%20testing%0A%0A**Compatibility%20Rules**%3A%0A%0A-%20%E2%9C%85%20Route%20%5BUSDC%20%E2%86%92%20WETH%20%E2%86%92%20WBTC%5D%20(V2%2FV3%20only)%20%E2%86%92%20V4%20flash%20loans%20allowed%0A-%20%E2%9D%8C%20Route%20%5BUSDC%20%E2%86%92%20WETH%20(V4)%20%E2%86%92%20DAI%5D%20%E2%86%92%20V4%20flash%20loans%20blocked%2C%20fallback%20to%20V3%0A%0A%23%23%23%23%20Route%20Manager%0A%0AThe%20Route%20Manager%20discovers%20and%20manages%20arbitrage%20routes%20using%20sophisticated%20algorithms%3A%0A%0A%60%60%60rust%0Apub%20struct%20EnhancedRouteManager%20%7B%0A%20%20%20%20cache%3A%20AHashMap%3CString%2C%20RouteCacheEntry%3E%2C%20%2F%2F%20route_id%20-%3E%20cache%20entry%0A%20%20%20%20token_routes%3A%20AHashMap%3CBytes%2C%20AHashSet%3CString%3E%3E%2C%20%2F%2F%20token%20-%3E%20route_ids%0A%20%20%20%20route_deps%3A%20AHashMap%3CString%2C%20AHashSet%3CString%3E%3E%2C%20%2F%2F%20pool_id%20-%3E%20route_ids%0A%20%20%20%20max_hops%3A%20usize%2C%0A%20%20%20%20config%3A%20RouteManagerConfig%2C%0A%7D%0A%60%60%60%0A%0A**Route%20Discovery%20Process**%3A%0A%0A1.%20**BFS-based%20Discovery**%3A%20Uses%20Breadth-First%20Search%20for%20efficient%20route%20generation%0A2.%20**Incremental%20Updates**%3A%20Only%20processes%20affected%20routes%20when%20pools%20change%0A3.%20**Pruning%20Heuristics**%3A%20Applies%20smart%20filtering%20to%20prevent%20route%20explosion%0A4.%20**Cycle%20Detection**%3A%20Identifies%20profitable%20arbitrage%20cycles%0A5.%20**Flash%20Loan%20Integration**%3A%20Automatically%20selects%20compatible%20flash%20loans%0A%0A**Route%20Performance**%3A%0A%0A-%20**2.42%C2%B5s**%20for%203-hop%20routes%0A-%20**833ns**%20for%204-hop%20routes%0A-%20**791ns**%20for%205-hop%20routes%0A-%20**1%2C983%2C160%20routes**%20(3-hop)%20generated%20in%20~222%20seconds%0A%0A**Pruning%20Heuristics**%3A%0A%0A-%20Avoid%20cycles%20(unless%20for%20cycle%20arbitrage)%0A-%20Check%20for%20duplicate%20pools%20in%20route%0A-%20Limit%20routes%20per%20token%20to%20prevent%20explosion%0A-%20Protocol-specific%20pruning%20(V4%20overflow%20protection)%0A%0A%23%23%23%20Streaming%20Engine%20Collector%0A%0AThe%20MinimalStreamingEngine%20serves%20as%20the%20central%20orchestrator%20for%20the%20entire%20arbitrage%20system%2C%20coordinating%20real-time%20data%20ingestion%2C%20route%20discovery%2C%20profitability%20evaluation%2C%20and%20transaction%20execution.%0A%0A%23%23%23%23%20Core%20Components%0A%0A%60%60%60rust%0Apub%20struct%20MinimalStreamingEngine%20%7B%0A%20%20%20%20streamed_pools%3A%20Arc%3CMutex%3CHashMap%3CString%2C%20ProtocolComponent%3E%3E%3E%2C%0A%20%20%20%20streamed_states%3A%20Arc%3Cdyn%20PoolStore%3E%2C%0A%20%20%20%20routes_in_memory%3A%20Arc%3CMutex%3CHashMap%3CString%2C%20MinimalRoute%3E%3E%3E%2C%0A%20%20%20%20route_pool_index%3A%20Arc%3CMutex%3CHashMap%3CString%2C%20HashSet%3CString%3E%3E%3E%3E%2C%0A%20%20%20%20evaluation_sender%3A%20Option%3CUnboundedSender%3CMinimalRoute%3E%3E%2C%0A%20%20%20%20execution_queue%3A%20Arc%3CMutex%3CVec%3C(MinimalRoute%2C%20RouteEvaluation)%3E%3E%3E%2C%0A%7D%0A%60%60%60%0A%0A**Key%20Features**%3A%0A%0A-%20**WebSocket%20Integration**%3A%20Direct%20connection%20to%20Tycho%20protocol%20streams%0A-%20**Real-time%20State%20Processing**%3A%20Live%20protocol%20state%20updates%20from%20blockchain%0A-%20**Incremental%20Graph%20Building**%3A%20Dynamic%20graph%20construction%20with%20new%20pools%0A-%20**Route%20Discovery**%3A%20Automatic%20route%20calculation%20for%20new%20trading%20pairs%0A-%20**Performance%20Optimization**%3A%20Microsecond-level%20processing%20with%20memory%20caching%0A%0A**Initialization%20Process**%3A%0A%0A1.%20Initialize%20token%20store%20from%20RPC%0A2.%20Start%20Tycho%20streaming%20connection%0A3.%20Build%20initial%20graph%20from%20pool%20data%0A4.%20Find%20routes%20with%20flash%20loans%0A5.%20Start%20route%20evaluation%20loop%0A%0A%23%23%23%20Stream%20and%20State%20Updates%0A%0AThe%20streaming%20system%20processes%20real-time%20blockchain%20data%20through%20a%20sophisticated%20pipeline%3A%0A%0A%23%23%23%23%20Stream%20Message%20Processing%0A%0A%60%60%60rust%0Aasync%20fn%20process_stream_message(%26mut%20self%2C%20message%3A%20StreamMessage)%20-%3E%20Result%3C()%3E%20%7B%0A%20%20%20%20%2F%2F%20Update%20pool%20states%0A%20%20%20%20self.update_pool_states(%26message).await%3F%3B%0A%0A%20%20%20%20%2F%2F%20Check%20for%20new%20trading%20pairs%0A%20%20%20%20if%20self.has_new_pairs(%26message)%20%7B%0A%20%20%20%20%20%20%20%20self.process_new_pools(%26message).await%3F%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20%2F%2F%20Re-evaluate%20existing%20routes%20if%20state%20changed%0A%20%20%20%20if%20self.has_state_updates(%26message)%20%7B%0A%20%20%20%20%20%20%20%20self.re_evaluate_routes().await%3F%3B%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A%23%23%23%23%20State%20Update%20Flow%0A%0A%60%60%60mermaid%0AsequenceDiagram%0A%20%20%20%20participant%20T%20as%20Tycho%20Stream%0A%20%20%20%20participant%20SE%20as%20Streaming%20Engine%0A%20%20%20%20participant%20PS%20as%20Pool%20Store%0A%20%20%20%20participant%20GM%20as%20Graph%20Manager%0A%20%20%20%20participant%20RM%20as%20Route%20Manager%0A%20%20%20%20participant%20RA%20as%20Route%20Analyzer%0A%20%20%20%20participant%20EE%20as%20Execution%20Engine%0A%0A%20%20%20%20T-%3E%3ESE%3A%20Protocol%20State%20Updates%0A%20%20%20%20SE-%3E%3EPS%3A%20Store%20Pool%20States%0A%20%20%20%20SE-%3E%3EGM%3A%20Update%20Graph%0A%20%20%20%20GM-%3E%3ERM%3A%20Calculate%20New%20Routes%0A%20%20%20%20RM-%3E%3ERA%3A%20Evaluate%20Routes%0A%20%20%20%20RA-%3E%3EEE%3A%20Execute%20Profitable%20Routes%0A%20%20%20%20EE-%3E%3ET%3A%20Transaction%20Results%0A%60%60%60%0A%0A**Processing%20Stages**%3A%0A%0A1.%20**State%20Updates**%3A%20Pool%20states%20updated%20in%20real-time%0A2.%20**Graph%20Updates**%3A%20Trading%20graph%20rebuilt%20incrementally%0A3.%20**Route%20Calculation**%3A%20New%20routes%20calculated%20for%20affected%20pools%0A4.%20**Route%20Evaluation**%3A%20Routes%20evaluated%20for%20profitability%0A5.%20**Execution**%3A%20Profitable%20routes%20executed%20automatically%0A%0A%23%23%23%20Route%20Evaluation%20Triggering%0A%0ARoute%20evaluation%20is%20triggered%20by%20state%20changes%20in%20the%20streaming%20system%3A%0A%0A%23%23%23%23%20Evaluation%20Conditions%0A%0ARoutes%20are%20evaluated%20when%3A%0A%0A1.%20**New%20Pools%20Detected**%3A%20New%20trading%20pairs%20added%20to%20the%20system%0A2.%20**Pool%20State%20Changes**%3A%20Liquidity%20or%20rate%20changes%20in%20existing%20pools%0A3.%20**Periodic%20Re-evaluation**%3A%20Scheduled%20evaluation%20of%20all%20routes%0A4.%20**Manual%20Triggers**%3A%20CLI-triggered%20evaluation%20for%20testing%0A%0A%23%23%23%23%20Evaluation%20Pipeline%0A%0A%60%60%60rust%0Aasync%20fn%20evaluate_routes_continuously(%26mut%20self)%20-%3E%20Result%3C()%3E%20%7B%0A%20%20%20%20loop%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Get%20routes%20from%20queue%0A%20%20%20%20%20%20%20%20if%20let%20Some(route)%20%3D%20self.route_evaluation_queue.pop().await%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Evaluate%20route%0A%20%20%20%20%20%20%20%20%20%20%20%20let%20evaluation%20%3D%20self.route_analyzer.evaluate_route(%26route).await%3F%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Check%20if%20profitable%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20evaluation.execution_viable%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Queue%20for%20execution%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20self.execution_queue.push((route%2C%20evaluation)).await%3F%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Process%20execution%20queue%0A%20%20%20%20%20%20%20%20self.process_execution_queue().await%3F%3B%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Small%20delay%20to%20prevent%20busy%20waiting%0A%20%20%20%20%20%20%20%20tokio%3A%3Atime%3A%3Asleep(Duration%3A%3Afrom_millis(10)).await%3B%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Cyclical%20Arbitrage%20Strategy%0A%0AThe%20cyclical%20arbitrage%20strategy%20implements%20sophisticated%20route%20evaluation%20algorithms%20that%20analyze%20potential%20arbitrage%20opportunities%20across%20multiple%20DEX%20protocols.%0A%0A%23%23%23%23%20Route%20Evaluation%20for%20Profitability%0A%0AThe%20RouteAnalyzer%20component%20uses%20real-time%20protocol%20states%20to%20calculate%20accurate%20swap%20amounts%20and%20profitability%20metrics%3A%0A%0A%60%60%60rust%0Aimpl%20RouteAnalyzer%20%7B%0A%20%20%20%20pub%20async%20fn%20evaluate_route(%0A%20%20%20%20%20%20%20%20%26self%2C%0A%20%20%20%20%20%20%20%20route%3A%20%26Route%2C%0A%20%20%20%20%20%20%20%20pool_store%3A%20%26dyn%20PoolStore%2C%0A%20%20%20%20)%20-%3E%20Result%3CRouteEvaluation%3E%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Get%20current%20pool%20states%0A%20%20%20%20%20%20%20%20let%20pool_states%20%3D%20pool_store.get_pool_states(%26route.pools).await%3F%3B%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Calculate%20optimal%20input%20amount%0A%20%20%20%20%20%20%20%20let%20optimal_amount%20%3D%20self.find_optimal_input_amount(route%2C%20%26pool_states).await%3F%3B%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Calculate%20swap%20amounts%20using%20ProtocolSim%0A%20%20%20%20%20%20%20%20let%20swap_result%20%3D%20self.protocol_sim.calculate_swap(%0A%20%20%20%20%20%20%20%20%20%20%20%20route%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20optimal_amount%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%26pool_states%2C%0A%20%20%20%20%20%20%20%20).await%3F%3B%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Apply%20V4%20overflow%20protection%0A%20%20%20%20%20%20%20%20let%20protected_amounts%20%3D%20self.apply_v4_overflow_protection(%0A%20%20%20%20%20%20%20%20%20%20%20%20route%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%26swap_result%2C%0A%20%20%20%20%20%20%20%20).await%3F%3B%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Calculate%20profitability%0A%20%20%20%20%20%20%20%20let%20profit%20%3D%20self.calculate_profitability(%0A%20%20%20%20%20%20%20%20%20%20%20%20route%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%26protected_amounts%2C%0A%20%20%20%20%20%20%20%20).await%3F%3B%0A%0A%20%20%20%20%20%20%20%20Ok(RouteEvaluation%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20route_id%3A%20route.id.clone()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20input_amount%3A%20optimal_amount%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20output_amount%3A%20protected_amounts.final_output%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20profit%3A%20profit.net_profit%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20roi_percentage%3A%20profit.roi_percentage%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20gas_cost%3A%20profit.estimated_gas_cost%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20flash_loan_fee%3A%20profit.flash_loan_fee%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20execution_viable%3A%20profit.net_profit%20%3E%200.0%2C%0A%20%20%20%20%20%20%20%20%7D)%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A%23%23%23%23%20Optimal%20Amount%20Calculation%0A%0AThe%20system%20uses%20a%20sophisticated%20**exponential%20search%20%2B%20binary%20search**%20algorithm%20to%20find%20the%20optimal%20input%20amount%3A%0A%0A%23%23%23%23%23%20Phase%201%3A%20Doubling%20Search%20(Exponential%20Growth)%0A%0A**Goal**%3A%20Quickly%20find%20an%20upper%20bound%20for%20profitable%20input.%0A%0A1.%20Set%20%60A%20%3D%20A_min%60%0A2.%20Repeat%20for%20maximum%20iterations%3A%0A%20%20%20-%20Evaluate%20profit%3A%20%60P%20%3D%20profit(A)%60%0A%20%20%20-%20If%20%60P%20%3E%20P_best%60%2C%20update%20best%20values%0A%20%20%20-%20If%20profit%20drops%20below%20threshold%2C%20stop%20doubling%0A%20%20%20-%20Else%2C%20double%20the%20input%3A%20%60A%20%3D%202%20*%20A%60%0A%0A%23%23%23%23%23%20Phase%202%3A%20Binary%20Search%20(Refinement)%0A%0A**Goal**%3A%20Refine%20the%20optimal%20input%20within%20%60%5BA_min%2C%20A_max%5D%60.%0A%0A1.%20While%20%60A_max%20-%20A_min%20%3E%20%CE%B5%60%20and%20iterations%20%3C%20max%3A%0A%20%20%20-%20Compute%20midpoint%3A%20%60A_mid%20%3D%20(A_min%20%2B%20A_max)%20%2F%202%60%0A%20%20%20-%20Evaluate%20profit%20at%20midpoint%0A%20%20%20-%20Update%20best%20if%20midpoint%20is%20better%0A%20%20%20-%20Update%20bounds%20based%20on%20profit%20comparison%0A%0A**Mathematical%20Summary**%3A%0A%0A%60%60%60%0Amaximize%20P(A)%20%3D%20profit%20from%20route%20given%20input%20A%0Asubject%20to%20A_min%20%E2%89%A4%20A%20%E2%89%A4%20A_max%2C%20P(A)%20%E2%89%A5%20profit_threshold%0Awhere%20A_max%20found%20via%20exponential%20doubling%20and%20A_best%20refined%20via%20binary%20search.%0A%60%60%60%0A%0A%23%23%23%23%20Solution%20Creation%0A%0ASolution%20encoding%20transforms%20route%20evaluations%20into%20executable%20smart%20contract%20calldata%3A%0A%0A%60%60%60rust%0Apub%20fn%20encode_solution(solution%3A%20Solution%2C%20chain%3A%20Chain)%20-%3E%20anyhow%3A%3AResult%3CEncodedSolution%3E%20%7B%0A%20%20%20%20let%20encoder%20%3D%20TychoRouterEncoderBuilder%3A%3Anew()%0A%20%20%20%20%20%20%20%20.chain(chain)%0A%20%20%20%20%20%20%20%20.user_transfer_type(UserTransferType%3A%3ATransferFrom)%0A%20%20%20%20%20%20%20%20.build()%3F%3B%0A%0A%20%20%20%20let%20encoded_vec%20%3D%20encoder.encode_solutions(vec!%5Bsolution%5D)%3F%3B%0A%20%20%20%20Ok(encoded_vec.into_iter().next().expect(%22Expected%20at%20least%20one%20encoded%20solution%22))%0A%7D%0A%60%60%60%0A%0A**Key%20Features**%3A%0A%0A-%20**TychoRouterEncoderBuilder**%3A%20Uses%20Tycho's%20encoder%20for%20ABI-compliant%20calldata%0A-%20**Flash%20Loan%20Integration**%3A%20Encodes%20flash%20loan%20parameters%20and%20sequential%20swaps%0A-%20**Gas%20Optimization**%3A%20Optimizes%20transaction%20parameters%20for%20execution%0A-%20**Multi-protocol%20Support**%3A%20Handles%20V2%2C%20V3%2C%20V4%20protocol%20differences%0A%0A%23%23%23%23%20Signal%20Generation%0A%0AThe%20system%20generates%20execution%20signals%20for%20profitable%20routes%3A%0A%0A%60%60%60rust%0A%23%5Bderive(Debug%2C%20Clone%2C%20Serialize%2C%20Deserialize)%5D%0Apub%20struct%20RouteSignal%20%7B%0A%20%20%20%20pub%20route_id%3A%20String%2C%0A%20%20%20%20pub%20route%3A%20MinimalRoute%2C%0A%20%20%20%20pub%20evaluation%3A%20RouteEvaluation%2C%0A%20%20%20%20pub%20timestamp%3A%20SystemTime%2C%0A%20%20%20%20pub%20execution_attempts%3A%20u32%2C%0A%20%20%20%20pub%20priority_score%3A%20f64%2C%0A%20%20%20%20pub%20status%3A%20SignalStatus%2C%0A%7D%0A%0A%23%5Bderive(Debug%2C%20Clone%2C%20Serialize%2C%20Deserialize)%5D%0Apub%20enum%20SignalStatus%20%7B%0A%20%20%20%20Pending%2C%0A%20%20%20%20Evaluating%2C%0A%20%20%20%20ReadyForExecution%2C%0A%20%20%20%20Executing%2C%0A%20%20%20%20Executed%2C%0A%20%20%20%20Failed%2C%0A%20%20%20%20Expired%2C%0A%7D%0A%60%60%60%0A%0A**Signal%20Flow**%3A%0A%0A1.%20**Route%20Discovery**%20%E2%86%92%20Create%20RouteSignal%0A2.%20**Evaluation%20Phase**%20%E2%86%92%20Check%20profitability%0A3.%20**Execution%20Phase**%20%E2%86%92%20Execute%20if%20profitable%0A4.%20**Result%20Processing**%20%E2%86%92%20Update%20signal%20status%0A%0A%23%23%23%20Execution%20Engine%0A%0AThe%20Execution%20Engine%20handles%20the%20actual%20transaction%20execution%20with%20comprehensive%20error%20handling%20and%20retry%20logic%3A%0A%0A%60%60%60rust%0Aimpl%20ExecutionEngine%20%7B%0A%20%20%20%20pub%20async%20fn%20execute_signal(%26mut%20self%2C%20signal%3A%20%26RouteSignal)%20-%3E%20Result%3CEvaluationResult%3E%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Pre-flight%20simulation%0A%20%20%20%20%20%20%20%20let%20simulation_result%20%3D%20self.preflight_simulation(signal).await%3F%3B%0A%20%20%20%20%20%20%20%20if%20!simulation_result.success%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20Err(anyhow%3A%3Aanyhow!(%22Pre-flight%20simulation%20failed%22))%3B%0A%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Check%20account%20balance%0A%20%20%20%20%20%20%20%20let%20balance_check%20%3D%20self.check_account_balance(signal).await%3F%3B%0A%20%20%20%20%20%20%20%20if%20!balance_check.sufficient%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20Err(anyhow%3A%3Aanyhow!(%22Insufficient%20balance%22))%3B%0A%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Encode%20solution%0A%20%20%20%20%20%20%20%20let%20encoded_solution%20%3D%20self.encode_solution(signal).await%3F%3B%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Send%20transaction%0A%20%20%20%20%20%20%20%20let%20tx_hash%20%3D%20self.send_flash_transaction(signal%2C%20%26encoded_solution).await%3F%3B%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Wait%20for%20confirmation%0A%20%20%20%20%20%20%20%20let%20receipt%20%3D%20self.wait_for_confirmation(tx_hash).await%3F%3B%0A%0A%20%20%20%20%20%20%20%20%2F%2F%20Parse%20execution%20result%0A%20%20%20%20%20%20%20%20let%20result%20%3D%20self.parse_execution_result(%26receipt%2C%20signal).await%3F%3B%0A%0A%20%20%20%20%20%20%20%20Ok(result)%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A**Key%20Features**%3A%0A%0A-%20**EIP-1559%20Support**%3A%20Modern%20transaction%20format%20with%20dynamic%20gas%20pricing%0A-%20**Balance%20Validation**%3A%20Pre-execution%20balance%20checks%0A-%20**Retry%20Logic**%3A%20Automatic%20retry%20with%20nonce%20synchronization%0A-%20**Gas%20Optimization**%3A%20Optimized%20gas%20parameters%20for%20cost%20efficiency%0A-%20**Transaction%20Monitoring**%3A%20Real-time%20transaction%20status%20tracking%0A%0A%23%23%23%20Flash%20Loan%20and%20Sequential%20Swap%20Mappings%0A%0AThe%20system%20implements%20sophisticated%20flash%20loan%20integration%20with%20sequential%20swap%20execution%3A%0A%0A%23%23%23%23%20Flash%20Loan%20Selection%0A%0A%60%60%60rust%0Aasync%20fn%20find_best_flash_loan_pool_with_v4_eligibility(%0A%20%20%20%20%26self%2C%0A%20%20%20%20token%3A%20%26Bytes%2C%0A%20%20%20%20_amount_needed%3A%20u128%2C%0A%20%20%20%20streamed_states%3A%20%26dyn%20PoolStore%2C%0A%20%20%20%20excluded_pool_ids%3A%20Option%3C%26%5BString%5D%3E%2C%0A%20%20%20%20route_info%3A%20Option%3C%26str%3E%2C%0A%20%20%20%20route_tokens%3A%20Option%3C%26%5BBytes%5D%3E%2C%0A%20%20%20%20route_has_v4_pools%3A%20bool%2C%0A%20%20%20%20input_token_is_v4_eligible%3A%20bool%2C%0A)%20-%3E%20Result%3COption%3CFlashLoanCandidate%3E%3E%20%7B%0A%20%20%20%20let%20mut%20flash_loan_candidates%20%3D%20Vec%3A%3Anew()%3B%0A%0A%20%20%20%20%2F%2F%20V4%20Addition%3A%20If%20input%20token%20is%20v4%20eligible%20and%20route%20has%20no%20V4%20pools%0A%20%20%20%20if%20input_token_is_v4_eligible%20%26%26%20!route_has_v4_pools%20%7B%0A%20%20%20%20%20%20%20%20let%20synthetic_pool%20%3D%20self.create_v4_pool_manager_synthetic_pool(token)%3B%0A%20%20%20%20%20%20%20%20let%20candidate%20%3D%20FlashLoanCandidate%3A%3Anew(%0A%20%20%20%20%20%20%20%20%20%20%20%20synthetic_pool%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20FlashLoanProvider%3A%3AUniswapV4%2C%0A%20%20%20%20%20%20%20%20%20%20%20%201000000.0%2C%20%2F%2F%20Assume%20very%20high%20liquidity%20for%20PoolManager%0A%20%20%20%20%20%20%20%20)%3B%0A%20%20%20%20%20%20%20%20flash_loan_candidates.push(candidate)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20%2F%2F%20V3%20Additions%3A%20Find%20all%20V3%20pools%20containing%20the%20token%0A%20%20%20%20%2F%2F%20...%20V3%20pool%20selection%20logic%0A%0A%20%20%20%20%2F%2F%20Return%20best%20candidate%20based%20on%20score%0A%20%20%20%20flash_loan_candidates.sort_by(%7Ca%2C%20b%7C%20b.score.partial_cmp(%26a.score).unwrap())%3B%0A%20%20%20%20Ok(flash_loan_candidates.first().cloned())%0A%7D%0A%60%60%60%0A%0A%23%23%23%23%20Sequential%20Swap%20Execution%0A%0AThe%20system%20executes%20multi-hop%20swaps%20atomically%20through%20flash%20loans%3A%0A%0A1.%20**Flash%20Loan%20Borrow**%3A%20Borrow%20required%20tokens%20from%20selected%20pool%0A2.%20**Sequential%20Swaps**%3A%20Execute%20swaps%20in%20sequence%20through%20route%0A3.%20**Flash%20Loan%20Repay**%3A%20Repay%20borrowed%20tokens%20with%20profit%0A4.%20**Profit%20Capture**%3A%20Keep%20remaining%20profit%20after%20repayment%0A%0A**Example%20Execution%20Flow**%3A%0A%0A%60%60%60%0ARoute%3A%20%5BUSDC%20%E2%86%92%20WETH%20%E2%86%92%20MOJO%20%E2%86%92%20USDC%5D%0A1.%20Borrow%201000%20USDC%20via%20flash%20loan%0A2.%20Swap%201000%20USDC%20%E2%86%92%200.4%20WETH%20(Uniswap%20V3)%0A3.%20Swap%200.4%20WETH%20%E2%86%92%201000%20MOJO%20(Uniswap%20V2)%0A4.%20Swap%201000%20MOJO%20%E2%86%92%201000.96%20USDC%20(Uniswap%20V2)%0A5.%20Repay%201000%20USDC%20%2B%200.9%20USDC%20fee%20%3D%201000.9%20USDC%0A6.%20Keep%200.06%20USDC%20profit%0A%60%60%60%0A%0A%23%23%23%20Encoding%0A%0AThe%20encoding%20system%20converts%20route%20evaluations%20into%20executable%20smart%20contract%20calldata%3A%0A%0A%23%23%23%23%20TychoRouterEncoderBuilder%20Integration%0A%0A%60%60%60rust%0Apub%20fn%20encode_solution(solution%3A%20Solution%2C%20chain%3A%20Chain)%20-%3E%20anyhow%3A%3AResult%3CEncodedSolution%3E%20%7B%0A%20%20%20%20let%20encoder%20%3D%20TychoRouterEncoderBuilder%3A%3Anew()%0A%20%20%20%20%20%20%20%20.chain(chain)%0A%20%20%20%20%20%20%20%20.user_transfer_type(UserTransferType%3A%3ATransferFrom)%0A%20%20%20%20%20%20%20%20.build()%3F%3B%0A%0A%20%20%20%20let%20encoded_vec%20%3D%20encoder.encode_solutions(vec!%5Bsolution%5D)%3F%3B%0A%20%20%20%20Ok(encoded_vec.into_iter().next().expect(%22Expected%20at%20least%20one%20encoded%20solution%22))%0A%7D%0A%60%60%60%0A%0A**Encoding%20Features**%3A%0A%0A-%20**ABI%20Compliance**%3A%20Standardized%20function%20call%20encoding%0A-%20**Multi-protocol%20Support**%3A%20Handles%20V2%2C%20V3%2C%20V4%20protocol%20differences%0A-%20**Gas%20Optimization**%3A%20Minimizes%20calldata%20size%0A-%20**Error%20Handling**%3A%20Comprehensive%20validation%20and%20error%20reporting%0A%0A%23%23%23%23%20Calldata%20Structure%0A%0AThe%20encoded%20calldata%20includes%3A%0A%0A1.%20**Flash%20Loan%20Parameters**%3A%20Pool%20address%2C%20token%2C%20amount%2C%20fee%0A2.%20**Swap%20Parameters**%3A%20Route%2C%20amounts%2C%20protocols%0A3.%20**Execution%20Metadata**%3A%20Gas%20limits%2C%20deadlines%2C%20slippage%0A4.%20**Callback%20Data**%3A%20Post-swap%20execution%20parameters%0A%0A%23%23%23%20Execution%0A%0AThe%20execution%20system%20manages%20transaction%20lifecycle%20from%20creation%20to%20confirmation%3A%0A%0A%23%23%23%23%20Transaction%20Building%0A%0A%60%60%60rust%0Aasync%20fn%20build_transaction(%26self%2C%20signal%3A%20%26RouteSignal)%20-%3E%20Result%3CTransactionRequest%3E%20%7B%0A%20%20%20%20let%20encoded_solution%20%3D%20self.encode_solution(signal).await%3F%3B%0A%0A%20%20%20%20Ok(TransactionRequest%20%7B%0A%20%20%20%20%20%20%20%20to%3A%20Some(self.config.router_address.into())%2C%0A%20%20%20%20%20%20%20%20data%3A%20Some(encoded_solution.calldata.into())%2C%0A%20%20%20%20%20%20%20%20gas%3A%20Some(U256%3A%3Afrom(self.estimate_gas(signal).await%3F))%2C%0A%20%20%20%20%20%20%20%20gas_price%3A%20Some(self.get_current_gas_price().await%3F)%2C%0A%20%20%20%20%20%20%20%20value%3A%20Some(U256%3A%3AZERO)%2C%0A%20%20%20%20%20%20%20%20from%3A%20Some(self.signer.address())%2C%0A%20%20%20%20%20%20%20%20..Default%3A%3Adefault()%0A%20%20%20%20%7D)%0A%7D%0A%60%60%60%0A%0A%23%23%23%23%20Execution%20Flow%0A%0A1.%20**Pre-flight%20Validation**%3A%20Simulate%20transaction%20before%20sending%0A2.%20**Gas%20Estimation**%3A%20Calculate%20optimal%20gas%20parameters%0A3.%20**Transaction%20Submission**%3A%20Send%20to%20network%0A4.%20**Confirmation%20Waiting**%3A%20Monitor%20transaction%20status%0A5.%20**Result%20Parsing**%3A%20Extract%20execution%20results%0A%0A%23%23%23%20PreFlight%20Evaluation%0A%0APre-flight%20evaluation%20simulates%20transactions%20before%20execution%20to%20validate%20profitability%3A%0A%0A%60%60%60rust%0Aasync%20fn%20preflight_simulation(%26self%2C%20signal%3A%20%26RouteSignal)%20-%3E%20Result%3CSimulationResult%3E%20%7B%0A%20%20%20%20let%20encoded_solution%20%3D%20self.encode_solution(signal).await%3F%3B%0A%0A%20%20%20%20%2F%2F%20Create%20simulation%20transaction%0A%20%20%20%20let%20simulation_tx%20%3D%20TransactionRequest%20%7B%0A%20%20%20%20%20%20%20%20to%3A%20Some(self.config.router_address.into())%2C%0A%20%20%20%20%20%20%20%20data%3A%20Some(encoded_solution.calldata.into())%2C%0A%20%20%20%20%20%20%20%20gas%3A%20Some(U256%3A%3Afrom(self.config.preflight_gas_limit))%2C%0A%20%20%20%20%20%20%20%20gas_price%3A%20Some(self.get_current_gas_price().await%3F)%2C%0A%20%20%20%20%20%20%20%20value%3A%20Some(U256%3A%3AZERO)%2C%0A%20%20%20%20%20%20%20%20from%3A%20Some(self.signer.address())%2C%0A%20%20%20%20%20%20%20%20..Default%3A%3Adefault()%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20%2F%2F%20Execute%20simulation%0A%20%20%20%20match%20self.client.call(%26simulation_tx%2C%20None).await%20%7B%0A%20%20%20%20%20%20%20%20Ok(_)%20%3D%3E%20Ok(SimulationResult%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20success%3A%20true%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20error_message%3A%20String%3A%3Anew()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20gas_used%3A%200%2C%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20Err(e)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Log%20the%20failure%20but%20don't%20stop%20execution%0A%20%20%20%20%20%20%20%20%20%20%20%20tracing%3A%3Awarn!(%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22Pre-flight%20simulation%20failed%20for%20route%20%7B%7D%3A%20%7B%7D%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20signal.route_id%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20e%0A%20%20%20%20%20%20%20%20%20%20%20%20)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20Ok(SimulationResult%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20success%3A%20false%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20error_message%3A%20e.to_string()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20gas_used%3A%200%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D)%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A**Critical%20Issue**%3A%20There%20is%20a%20**critical%20issue**%20in%20the%20current%20preflight%20simulation%20implementation%20where%20%60eth_call%60%20failures%20are%20logged%20but%20**not%20used%20to%20stop%20execution**.%20This%20can%20lead%20to%20failed%20transactions%20being%20sent%20to%20the%20network.%0A%0A**Recommended%20Fix**%3A%0A%0A%60%60%60rust%0Aasync%20fn%20execute_signal(%26mut%20self%2C%20signal%3A%20%26RouteSignal)%20-%3E%20Result%3CEvaluationResult%3E%20%7B%0A%20%20%20%20%2F%2F%20Pre-flight%20simulation%0A%20%20%20%20let%20simulation_result%20%3D%20self.preflight_simulation(signal).await%3F%3B%0A%0A%20%20%20%20%2F%2F%20CRITICAL%20FIX%3A%20Actually%20check%20simulation%20result%0A%20%20%20%20if%20!simulation_result.success%20%7B%0A%20%20%20%20%20%20%20%20return%20Err(anyhow%3A%3Aanyhow!(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22Pre-flight%20simulation%20failed%3A%20%7B%7D%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20simulation_result.error_message%0A%20%20%20%20%20%20%20%20))%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20%2F%2F%20Continue%20with%20execution...%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Profitability%20Logging%0A%0AThe%20system%20provides%20comprehensive%20profitability%20logging%20and%20analysis%3A%0A%0A%23%23%23%23%20Profitability%20Calculation%0A%0AThe%20mathematical%20formulas%20for%20profitability%20calculation%3A%0A%0A%23%23%23%23%23%201.%20Swap%20Profit%20Percentage%0A%0A%60%60%60%0Aswap_profit_percentage%20%3D%20((amount_out%20-%20amount_in)%20%2F%20amount_in)%20*%20100%0A%60%60%60%0A%0A%23%23%23%23%23%202.%20Flash%20Fee%20Percentage%0A%0A%60%60%60%0Aflash_fee_pct%20%3D%20(flash_loan_fee%20%2F%20amount_in)%20*%20100%0A%60%60%60%0A%0A%23%23%23%23%23%203.%20Net%20Profit%20Percentage%0A%0A%60%60%60%0Anet_profit_percentage%20%3D%20swap_profit_percentage%20-%20flash_fee_pct%20-%20gas_cost_pct%0A%60%60%60%0A%0A%23%23%23%23%23%204.%20Net%20Profit%20in%20Token%20Units%0A%0A%60%60%60%0Anet_profit_token%20%3D%20amount_out%20-%20amount_in%20-%20flash_loan_fee%20-%20gas_cost_token%0A%60%60%60%0A%0A%23%23%23%20Persistence%20Mechanism%0A%0AThe%20persistence%20system%20uses%20RocksDB%20with%20optimized%20column%20families%20for%20different%20data%20types%3A%0A%0A**Database%20Configuration**%3A%0A%0A%60%60%60rust%0Alet%20cf_names%20%3D%20vec!%5B%22tokens%22%2C%20%22graph%22%2C%20%22routes%22%2C%20%22signals%22%5D%3B%0Alet%20db%20%3D%20Arc%3A%3Anew(DB%3A%3Aopen_cf(%26opts%2C%20db_path%2C%20%26cf_names)%3F)%3B%0A%60%60%60%0A%0A**Write%20Optimization**%3A%0A%0A-%20**Batch%20Writes**%3A%20100%20operations%20per%20batch%0A-%20**Async%20Flushing**%3A%20100ms%20flush%20interval%0A-%20**Memory%20Buffering**%3A%20In-memory%20caching%20before%20persistence%0A-%20**Incremental%20Updates**%3A%20Only%20persist%20changed%20data%0A%0A%23%23%23%20Queuing%20Configuration%0A%0AThe%20system%20uses%20multiple%20queues%20for%20different%20processing%20stages%3A%0A%0A**Queue%20Types**%3A%0A%0A1.%20**Streaming%20Queue**%3A%20Raw%20blockchain%20data%20processing%0A2.%20**Evaluation%20Queue**%3A%20Route%20profitability%20evaluation%0A3.%20**Execution%20Queue**%3A%20Transaction%20execution%0A4.%20**Signal%20Queue**%3A%20Arbitrage%20opportunity%20signals%0A%0A**Queue%20Management**%3A%0A%0A%60%60%60rust%0Apub%20struct%20ExecutionQueue%20%7B%0A%20%20%20%20queue%3A%20VecDeque%3C(MinimalRoute%2C%20RouteEvaluation)%3E%2C%0A%20%20%20%20max_queue_size%3A%20usize%2C%0A%20%20%20%20priority_scores%3A%20HashMap%3CString%2C%20f64%3E%2C%0A%7D%0A%60%60%60%0A%0A**Priority%20Calculation**%3A%0A%0A%60%60%60rust%0Afn%20calculate_priority(%26self%2C%20route%3A%20%26MinimalRoute%2C%20evaluation%3A%20%26RouteEvaluation)%20-%3E%20f64%20%7B%0A%20%20%20%20%2F%2F%20Higher%20profit%20%3D%20higher%20priority%0A%20%20%20%20let%20profit_score%20%3D%20evaluation.net_profit_percentage%3B%0A%0A%20%20%20%20%2F%2F%20Shorter%20routes%20%3D%20higher%20priority%20(less%20gas)%0A%20%20%20%20let%20gas_score%20%3D%201.0%20%2F%20(route.hops%20as%20f64%20%2B%201.0)%3B%0A%0A%20%20%20%20%2F%2F%20Combine%20scores%0A%20%20%20%20profit_score%20*%200.7%20%2B%20gas_score%20*%200.3%0A%7D%0A%60%60%60%0A%0A%23%23%20References%0A%0A-%20%5BBellman-Ford%20Alogorithm%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBellman%25E2%2580%2593Ford_algorithm)%0A-%20%5BDepth%20First%20Search%20Algorithm%5D(https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FDepth-first_search)%0A",lastUpdatedAt:void 0},{lazy:()=>J(()=>import("./tycho1inchNOL-B1s-Hza1.js"),[]),path:"/research/solving/tycho1inchNOL",type:"mdx",filePath:"research/solving/tycho1inchNOL.mdx",content:"%23%20No%20Liquidity%20Solving%20(Tycho%201inch)%0A%0A%23%23%20No%20Liquidity%20Solving%20Walkthrough%0A%0AThis%20research%20was%20conducted%20as%20part%20of%20%5BUnite%20DeFi%5D(https%3A%2F%2Fethglobal.com%2Fshowcase%2Fdefiunite-jincubator-g1h0p)%0A%0A%3Ciframe%0A%20%20src%3D%22https%3A%2F%2Fwww.loom.com%2Fembed%2Fc59e1a9eb2064d4a855cabab3941a514%22%0A%20%20frameborder%3D%220%22%0A%20%20allowfullscreen%0A%20%20allow%3D%22autoplay%3B%20encrypted-media%22%0A%20%20style%3D%7B%7B%0A%20%20%20%20width%3A%20%22100%25%22%2C%0A%20%20%20%20height%3A%20%22500px%22%2C%0A%20%20%20%20borderRadius%3A%20%2212px%22%2C%0A%20%20%7D%7D%0A%2F%3E%0A%0AThe%20following%20Actions%20are%20Taken%0A%0A1.%20Mary%20has%20one%20ETH%0A2.%20Chainlink%20Oracle%20has%201ETH%20%3D%202000DAI%0A3.%20Mary%20creates%20a%20an%20order%201ETH%20for%202000DAI%0A4.%20Tabatha%20using%20Tycho%20finds%20Uniswap%20V2%20will%20swap%201ETH%20for%202018DAI%0A5.%20Tabatha%20Takes%20the%20Order%0A6.%20Order%20Settles%0A%0A**Additional%20Notes**%0A%0A-%20%5C*This%20uses%20a%20modified%20version%20of%201inch%20Limit%20Order%20Protocol%20which%20allows%20TychoSwapExecutor%20to%20settle%20the%20Makers%20Funds%0A-%20%5C*%5C*Mary%20approves%201ETH%20to%20be%20used%20by%20Limit-Order-Protocol%20(and%20Tycho%20Swap%20Router)%0A-%20%5C*%5C*Mary%E2%80%99s%201ETH%20is%20used%20for%20the%20swap%20-%20No%20Liquidity%20is%20provided%20by%20Tabatha%20-%20Transaction%20reverts%20if%20%3C%202000%20DAI%20is%20returned%0A-%20%5C*%5C*%5C*Taking%20and%20Settling%20the%20order%20is%20an%20atomic%20transaction%20integrating%20TychoSwapExecutor.sol%20as%20a%20TakerInteraction%20in%20LimitOrderProtocol.sol%0A%0A%7C%20Action%20%7C%20Mary%20Maker%20%7C%20Limit%20Order%20Protocol%20%7C%20Tabatha%20Tycho%20Taker%20%7C%20Jincubator%20Protocol%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Tycho%20SimulationrderCalculator.sol%20integrates%20price%20oracles%20for%20creating%20spread%20ordersycho%20Indexing%20and%20Simulation%20(Off%20Chain%20Price%20Discovery)%20%20%20%20%20%7C%0A%7C%205%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%7C%202018DAI%5C*%5C*%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20TychoExecutor.sol%20executes%20the%20trade%20on%20UniswapV3%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20TychoRouter%20is%20called%20by%20TychoSwapRouter%20to%20execute%20the%20trade%20%7C%0A%7C%206%20%20%20%20%20%20%7C%20200DAI%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%2018DAI%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20LimitOrderProtocol.sol%20sends%20Mary%202000%20DAI%20from%20Tabatha%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20%20%20%20%20%20%20%20%7C%0A%0A%23%23%20Jincubator%20Limit%20Order%20Protocol%0A%0AThis%20protocol%20implements%20four%20key%20enhancements%20to%20the%20%5B1inch%20Limit%20Order%20Protocol%5D(https%3A%2F%2Fgithub.com%2F1inch%2Flimit-order-protocol)%3A%0A%0A1.%20**Enhanced%20Swap%20Execution**%3A%20%5BTychoSwapExecutor.sol%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fprotocol%2Ftree%2Fmain%2Fsrc%2FTychoSwapExecutor.sol)%20integrates%20%5BTycho%20Execution%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-execution)%20to%20enable%20complex%20swaps%20across%20multiple%20DEXs%20without%20upfront%20liquidity%0A2.%20**Stop%20Loss%20and%20Profit%20Taking%20Orders**%3A%20%5BOracleIntegration.sol%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fprotocol%2Ftree%2Fmain%2Fsrc%2FOracleCalculator.sol)%20Oracle-based%20(starting%20with%20chainlink)%20pricing%20calculator%20for%20advanced%20order%20strategies%0A3.%20**Treasury%20Management**%3A%20%5BRebalancerInteraction.sol%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fprotocol%2Ftree%2Fmain%2Fsrc%2FRebalancerInteraction.sol)%20enables%20makers%20and%20takers%20to%20immediately%20balance%20their%20funds%20to%20a%20treasury%20(and%20moving%20forward%20more%20advanced%20asset%20management%20strategies).%0A4.%20**Resource%20Management**%3A%20%5BCompactInteraction.sol%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fprotocol%2Ftree%2Fmain%2Fsrc%2FCompactInteraction.sol)%20integrates%20the%20%5B1inch%20Limit%20Order%20Protocol%5D(https%3A%2F%2Fgithub.com%2F1inch%2Flimit-order-protocol)%20with%20%5BThe%20Compact%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fthe-compact)%20for%20%5BERC-6909%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-6909)%20support%20and%20moving%20forward%20integration%20with%20additional%20cross%20chain%20intent%20standards%20such%20as%20%5BERC-7683%5D(https%3A%2F%2Fwww.erc7683.org%2F)%20leveraging%20%5BMandates%20and%20Solver%20Payloads%5D(https%3A%2F%2Fwww.jincubator.com%2Fresearch%2Fsolving%2Fprotocol)%20and%20%5BAdvanced%20Resource%20Locking%5D(https%3A%2F%2Fwww.jincubator.com%2Fresearch%2Fsolving%2Fresources).%0A%0A%23%23%23%20Enhanced%20Swap%20Execution%0A%0AWe%20integrate%20with%20Tycho's%20indexing%2C%20simulation%20and%20execution%20via%20a%20TcyhoSwapExecutor%20which%20allows%20Solvers%20to%20provide%20a%20payload%20with%20complex%20routing%20solutions%20across%20multiple%20liquidity%20protocols.%20The%20design%20for%20United%20Defi%20allows%20the%20taker%20to%20submit%20a%20Payload%20with%20Call%20Data%20which%20will%20be%20executed%20as%20part%20of%20the%20TakerInteraction%20flow.%20This%20allows%2C%20if%20permitted%20by%20the%20maker%2C%20the%20solver%20to%20use%20the%20takers%20tokens%20and%20execute%20the%20trade%20without%20providing%20any%20upfront%20capital.%0A%0A%23%23%23%20Stop%20Loss%20and%20Profit%20Taking%20Orders%0A%0AThe%20OracleCalculator%20extension%20is%20a%20powerful%20addition%20to%20the%201inch%20Limit%20Order%20Protocol%20that%20enables%20dynamic%20pricing%20based%20on%20Chainlink%20oracle%20data.%20This%20extension%20allows%20orders%20to%20be%20filled%20at%20prices%20that%20are%20calculated%20on-chain%20using%20real-time%20oracle%20feeds%2C%20making%20it%20possible%20to%20create%20orders%20that%20automatically%20adjust%20to%20market%20conditions.%0A%0A%23%23%23%20Treasury%20Management%0A%0AImplemented%20as%20an%20IPostInteraction%20the%20RebalancerInteraction%20contract%20allows%20both%20makers%20and%20takers%20to%20instantly%20move%20their%20funds%20to%20their%20Treasury%20of%20choice.%0A%0A%23%23%23%20Resource%20Management%0A%0AWe%20Implemented%20integration%20with%20an%20ERC-6909%20compliant%20locking%20mechanism%20enabling%20advanced%20resource%20management%20capabilities%20and%20laying%20the%20foundation%20to%20extend%20the%201inch%20Limit%20Order%20Protocol%20to%20open%20standards%20such%20as%20ERC-7683.%0A%0A%23%23%20NEAR%20FUSION%2B%20Smart%20Contract%20Development%0A%0ANEAR%20Fusion%2B%20is%20a%20comprehensive%20DeFi%20protocol%20that%20migrates%201inch's%20proven%20Limit%20Order%20Protocol%20and%20Cross-Chain%20Swap%20functionality%20to%20the%20NEAR%20blockchain.%20The%20system%20provides%20two%20primary%20capabilities%3A%20advanced%20limit%20order%20trading%20with%20partial%20fills%20and%20extensible%20features%2C%20and%20atomic%20cross-chain%20swaps%20secured%20by%20time-locked%20escrow%20contracts.%0A%0A%23%23%20Implementation%20Limit%20Order%20Protocol%0A%0A%23%23%23%20Core%20Components%0A%0A-%20**Compact**%3A%20ERC-6909%20enabled%20Chainlink%20calculator%20for%20price%20discovery%0A-%20**ResourceManager**%3A%20Manages%20resource%20locks%20for%20ERC-6909%20integration%0A-%20**TychoSwapExecutor**%3A%20Executes%20complex%20swaps%20using%20Tycho%20Execution%0A-%20**CompactInteraction**%3A%20Post-interaction%20handler%20for%20resource%20allocation%0A-%20**RebalancerInteraction**%3A%20Treasury%20management%20and%20portfolio%20rebalancing%0A-%20**OracleCalculator**%3A%20Price%20oracle%20integration%20for%20advanced%20order%20strategies%0A%0A%23%23%23%20Key%20Features%0A%0A-%20**Resource%20Locking**%3A%20ERC-6909%20compliant%20resource%20management%0A-%20**Multi-DEX%20Execution**%3A%20Cross-platform%20swap%20execution%20via%20Tycho%0A-%20**Advanced%20Order%20Types**%3A%20Stop-loss%20and%20take-profit%20orders%0A-%20**Treasury%20Management**%3A%20Automated%20portfolio%20rebalancing%0A-%20**Oracle%20Integration**%3A%20Chainlink%20price%20feeds%20for%20accurate%20pricing%0A%0A%23%23%23%20Key%20Technology%20Enhancements%0A%0A-%20Solidity%20based%20tests%20including%20a%20migration%20from%20%60OrderUtils.js%60%20to%20solidity%20based%20%5BOrderUtils%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fprotocol%2Ftree%2Fmain%2Ftest%2Futils%2ForderUtils%2FREADME_OrderUtils.md)%0A-%20Solidity%20%60%5E0.8.30%60%20compatibility%20provided%20by%20creating%20an%20interface%20%5BILimitOrderProtocol.sol%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fprotocol%2Ftree%2Fmain%2Fsrc%2Finterfaces%2F1inch%2FILimitOrderProtocol.sol)%20and%20introducing%20%5BLimitOrderProtocolManager%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fprotocol%2Ftree%2Fmain%2Ftest%2Fhelpers%2FLimitOrderProtocolManager.sol)%20for%20testing.%0A%0A%23%23%23%20Architecture%0A%0A!%5BArchitecture%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FByIAaIhwel.png)%0A%0A%23%23%23%20Interactions%0A%0A!%5BInteractions%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FB1XQRU3wex.png)%0A%0A%23%23%20Enhanced%20Swap%20Execution%0A%0A%23%23%23%20Tycho%20Execution%20Flow%0A%0A!%5BTychoFlow%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FHyRf1vnwgl.png)%0A%0A%23%23%23%20Tycho%20Components%0A%0A!%5BTychoComponents%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FHkytJP3Plg.png)%0A%0A%23%23%23%20Actors%0A%0A1.%20Maker%0A%20%20%201.%20Creates%20orders%20specifying%20the%20spread%20price%20they%20are%20looking%20for%20(currently%20using%20chainlink%20Oracle)%0A2.%20Solver%20Service%0A%20%20%201.%20Monitors%201inch%20Intents%20created%0A%20%20%202.%20Monitors%20Liquidity%20Positions%20on%20Chain%20using%20Tycho-indexer%0A%20%20%203.%20Simulates%20Solves%20for%20Orders%20(to%20see%20if%20profitable)%0A%20%20%204.%20Calls%20Resolver%20Contract%20to%20execute%20the%20Swap%0A%20%20%20%20%20%201.%20Solver%20Payload%20-%20encoded%20to%20call%20TychoResolver%20a%20modified%20version%20of%20Tycho%20Execution%0A%20%20%205.%20Calls%20Order%20Fill%20passing%0A%20%20%20%20%20%201.%20target%3A%20TychoResolver%20address%0A%20%20%20%20%20%202.%20interaction%3A%20SolverPayload%0A3.%20Resolver%20Contract%20(modified%20version%20combining%20ResolverCrossChain%20and%20Tycho%20Dispatcher)%0A%20%20%201.%20Called%20by%20LimitOrderProtocol%20as%20part%20of%20Order.fill%0A%20%20%202.%20Executes%20swap%20using%20Makers%20Tokens%0A%20%20%203.%20Provides%20TakerToken%20to%20Relayer%20to%20pass%20back%20to%20Taker%0A%20%20%204.%20Transfers%20excess%20maker%20(or%20taker)%20tokens%20to%20Treasury%0A%0A%23%23%23%20Implementation%20Approach%0A%0A%20%20%20%201.%20TychoFillPredicate.sol%20(Predicate)%3A%20copied%20from%20OracleCalculator.sol%0A%20%20%20%202.%20TychoFillInteraction.sol%20%3A%20copied%20from%20RebalancerInteraction.sol%0A%20%20%20%203.%20TychoResolver.sol%3A%20Copied%20from%20ResolverCrossChain.sol%20and%20Dispatcher.sol%0A%20%20%20%204.%20Tests%20copied%20from%20RebalancerInteraction.t.sol%20and%20enhanced%20with%0A%20%20%20%20%20%20%201.%20Creation%20of%20Swap%20(MakerTokens%20to%20TakerTokens)%20similar%20to%0A%20%20%20%20%20%20%202.%20Call%20of%20Fill%20Contract%20passing%0A%20%20%20%20%20%20%20%20%20%201.%20target%3A%20TychoResolver%20address%0A%20%20%20%20%20%20%20%20%20%202.%20interaction%3A%20SolverPayload%0A%20%20%20%20%20%20%203.%20Checking%20of%20Treasurer%20Balances%20after%20swap%20is%20executed%0A%0A%23%23%23%20Flow%0A%0A%23%23%23%23%20Interactions%0A%0AInteractions%20are%20callbacks%20that%20enable%20the%20execution%20of%20arbitrary%20code%2C%20which%20is%20provided%20by%20the%20maker%E2%80%99s%20order%20or%20taker%E2%80%99s%20fill%20execution.%0A%0AThe%20order%20execution%20logic%20includes%20several%20steps%20that%20also%20involve%20interaction%20calls%3A%0A%0A1.%20Validate%20the%20order%0A2.%20**Call%20the%20maker's%20pre-interaction**%0A3.%20Transfer%20the%20maker's%20asset%20to%20the%20taker%0A4.%20**Call%20the%20taker's%20interaction**%0A5.%20Transfer%20the%20taker's%20asset%20to%20the%20maker%0A6.%20**Call%20the%20maker's%20post-interaction**%0A7.%20Emit%20the%20OrderFilled%20event%0A%0ACalls%20are%20executed%20in%20the%20context%20of%20the%20limit%20order%20protocol.%20The%20target%20contract%20should%20implement%20the%20%60IPreInteraction%60%20or%20%60IPostInteraction%60%20interfaces%20for%20the%20maker's%20pre-%20and%20post-interactions%20and%20the%20%60ITakerInteraction%60%20interface%20for%20the%20taker's%20interaction.%20These%20interfaces%20declare%20the%20single%20callback%20function%20for%20maker%20and%20taker%20interactions%2C%20respectively.%0A%0AHere%20is%20how%20the%20maker%E2%80%99s%20pre-%20%26%20post-%20interactions%20and%20the%20taker%E2%80%99s%20interaction%20are%20defined%20in%20the%20interfaces%3A%0A%0A%60%60%60solidity%0A%2F%2FMaker's%20pre-interaction%0Afunction%20preInteraction(%0A%20%20%20%20%20%20%20%20IOrderMixin.Order%20calldata%20order%2C%0A%20%20%20%20%20%20%20%20bytes32%20orderHash%2C%0A%20%20%20%20%20%20%20%20address%20taker%2C%0A%20%20%20%20%20%20%20%20uint256%20makingAmount%2C%0A%20%20%20%20%20%20%20%20uint256%20takingAmount%2C%0A%20%20%20%20%20%20%20%20uint256%20remainingMakingAmount%2C%0A%20%20%20%20%20%20%20%20bytes%20calldata%20extraData%0A%20%20%20%20)%20external%3B%0A%0A%2F%2FMaker's%20post-interaction%0Afunction%20postInteraction(%0A%20%20%20%20%20%20%20%20IOrderMixin.Order%20calldata%20order%2C%0A%20%20%20%20%20%20%20%20bytes32%20orderHash%2C%0A%20%20%20%20%20%20%20%20address%20taker%2C%0A%20%20%20%20%20%20%20%20uint256%20makingAmount%2C%0A%20%20%20%20%20%20%20%20uint256%20takingAmount%2C%0A%20%20%20%20%20%20%20%20uint256%20remainingMakingAmount%2C%0A%20%20%20%20%20%20%20%20bytes%20calldata%20extraData%0A%20%20%20%20)%20external%3B%0A%0A%2F%2FTaker's%20interaction%0Afunction%20takerInteraction(%0A%20%20%20%20%20%20%20%20IOrderMixin.Order%20calldata%20order%2C%0A%20%20%20%20%20%20%20%20bytes32%20orderHash%2C%0A%20%20%20%20%20%20%20%20address%20taker%2C%0A%20%20%20%20%20%20%20%20uint256%20makingAmount%2C%0A%20%20%20%20%20%20%20%20uint256%20takingAmount%2C%0A%20%20%20%20%20%20%20%20uint256%20remainingMakingAmount%2C%0A%20%20%20%20%20%20%20%20bytes%20calldata%20extraData%0A%20%20%20%20)%20external%20returns(uint256%20offeredTakingAmount)%3B%0A%60%60%60%0A%0A-%20Resolver%20Contract%20executes%20calls%20to%20Tycho%20Dispatcher%20or%20Router%0A-%20Three%20functions%0A%20%20-%20preInteraction%3A%20used%20in%20OracleCalculator%20(to%20ensure%20price%20before%20swap)%0A%20%20-%20takerInteraction%20used%20in%20SwapExecutor%20to%20Execute%20Swap%20by%20Taker%0A%20%20-%20postInteraction%20used%20in%20Rebalancer%20to%20Send%20Funds%20to%20Treasury%0A%0A%23%23%23%20Design%20Questions%0A%0A1.%20**Interface%20Compatibility**%3A%0A%20%20%20-%20How%20will%20the%20TychoResolver%20interface%20be%20defined%20to%20ensure%20compatibility%20with%20the%20LimitOrderProtocol%20bytecode%20deployment%20approach%3F%0A%20%20%20-%20Should%20we%20create%20a%20custom%20interface%20for%20TychoResolver%20or%20use%20the%20concrete%20type%20like%20the%20working%20project%3F%0A%0A2.%20**Predicate%20Logic**%3A%0A%20%20%20-%20What%20predicate%20logic%20will%20TychoFill.sol%20use%3F%20Will%20it%20be%20similar%20to%20OracleCalculator.sol%20with%20price%20comparisons%3F%0A%20%20%20-%20How%20will%20the%20predicate%20determine%20when%20a%20solve%20is%20profitable%20vs.%20when%20it%20should%20execute%3F%0A%0A3.%20**Solver%20Payload%20Structure**%3A%0A%20%20%20-%20What%20data%20structure%20will%20the%20SolverPayload%20contain%3F%20Will%20it%20include%20target%20addresses%2C%20amounts%2C%20and%20execution%20parameters%3F%0A%20%20%20-%20How%20will%20the%20payload%20be%20encoded%2Fdecoded%20between%20the%20Solver%20Service%20and%20TychoResolver%3F%0A%0A4.%20**Treasury%20Integration**%3A%0A%20%20%20-%20How%20will%20excess%20tokens%20be%20calculated%20and%20transferred%20to%20Treasury%3F%0A%20%20%20-%20What%20mechanism%20will%20prevent%20MEV%20attacks%20on%20the%20treasury%20transfers%3F%0A%0A5.%20**Error%20Handling**%3A%0A%20%20%20-%20How%20will%20failed%20solves%20be%20handled%3F%20Will%20orders%20be%20cancelled%20or%20retried%3F%0A%20%20%20-%20What%20happens%20if%20the%20TychoResolver%20execution%20fails%20during%20the%20order%20fill%3F%0A%0A6.%20**Gas%20Optimization**%3A%0A%20%20%20-%20How%20will%20the%20solver%20service%20optimize%20gas%20costs%20across%20multiple%20orders%3F%0A%20%20%20-%20Will%20batch%20processing%20be%20implemented%20for%20multiple%20orders%3F%0A%0A7.%20**Oracle%20Integration**%3A%0A%20%20%20-%20Will%20TychoFill%20use%20the%20same%20Chainlink%20oracle%20approach%20as%20OracleCalculator%20%3F%0A%20%20%20-%20How%20will%20price%20feeds%20be%20validated%20and%20updated%3F%0A%0A8.%20**Cross-Chain%20Considerations**%3A%0A%20%20%20-%20How%20will%20the%20ResolverCrossChain%20functionality%20be%20integrated%20with%20Tycho%20Dispatcher%3F%0A%20%20%20-%20What%20bridge%20mechanisms%20will%20be%20used%20for%20cross-chain%20swaps%3F%0A%0A%23%23%23%20Implementation%20Plan%0A%0A1.%20**Phase%201%3A%20Core%20Contract%20Development**%0A%20%20%20-%20Create%20%60TychoFill.sol%60%20based%20on%20%60OracleCalculator.sol%60%0A%20%20%20%20%20-%20Implement%20predicate%20logic%20for%20profitable%20solve%20detection%0A%20%20%20%20%20-%20Add%20Tycho-specific%20price%20calculation%20methods%0A%20%20%20%20%20-%20Ensure%20interface%20compatibility%20with%20LimitOrderProtocol%0A%0A%20%20%20-%20Create%20%60TychoFillInteraction.sol%60%20based%20on%20%60RebalancerInteraction.sol%60%0A%20%20%20%20%20-%20Implement%20post-interaction%20logic%20for%20treasury%20transfers%0A%20%20%20%20%20-%20Add%20balance%20validation%20and%20excess%20token%20calculation%0A%20%20%20%20%20-%20Integrate%20with%20TychoResolver%20for%20swap%20execution%0A%0A2.%20**Phase%202%3A%20Resolver%20Contract%20Development**%0A%20%20%20-%20Create%20%60TychoResolver.sol%60%20combining%20ResolverCrossChain%20and%20Dispatcher%20functionality%0A%20%20%20%20%20-%20Implement%20swap%20execution%20using%20maker%20tokens%0A%20%20%20%20%20-%20Add%20taker%20token%20provision%20for%20relayer%0A%20%20%20%20%20-%20Integrate%20treasury%20transfer%20logic%0A%20%20%20%20%20-%20Ensure%20proper%20error%20handling%20and%20revert%20conditions%0A%0A3.%20**Phase%203%3A%20Testing%20Framework**%0A%20%20%20-%20Create%20comprehensive%20test%20suite%20based%20on%20%60RebalancerInteraction.t.sol%60%0A%20%20%20%20%20-%20Test%20order%20creation%20with%20Tycho-specific%20predicates%0A%20%20%20%20%20-%20Test%20solver%20payload%20encoding%2Fdecoding%0A%20%20%20%20%20-%20Test%20treasury%20balance%20validation%0A%20%20%20%20%20-%20Test%20cross-chain%20swap%20scenarios%0A%20%20%20%20%20-%20Test%20error%20conditions%20and%20edge%20cases%0A%0A4.%20**Phase%204%3A%20Integration%20Testing**%0A%20%20%20-%20Test%20end-to-end%20flow%20from%20order%20creation%20to%20execution%0A%20%20%20-%20Validate%20predicate%20execution%20with%20bytecode%20deployment%0A%20%20%20-%20Test%20solver%20service%20integration%20with%20Tycho-indexer%0A%20%20%20-%20Verify%20treasury%20transfers%20and%20balance%20calculations%0A%0A5.%20**Phase%205%3A%20Optimization%20and%20Security**%0A%20%20%20-%20Implement%20gas%20optimization%20strategies%0A%20%20%20-%20Add%20comprehensive%20error%20handling%0A%20%20%20-%20Implement%20MEV%20protection%20mechanisms%0A%20%20%20-%20Add%20monitoring%20and%20logging%20capabilities%0A%0A6.%20**Phase%206%3A%20Deployment%20and%20Monitoring**%0A%20%20%20-%20Deploy%20contracts%20with%20proper%20bytecode%20generation%0A%20%20%20-%20Set%20up%20monitoring%20for%20solver%20service%0A%20%20%20-%20Implement%20alerting%20for%20failed%20solves%0A%20%20%20-%20Add%20analytics%20for%20treasury%20performance%0A%0A%23%23%20Stop%20Loss%20and%20Profit%20Taking%20Orders%0A%0A%23%23%23%20Oracle%20Example%20Order%0A%0A!%5BOracleExampleOrder%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FByKclv3Del.png)%0A%0A%23%23%23%20Oracle%20Order%20Integration%0A%0A!%5BOracleIntegration%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2Fry6slPnvxg.png)%0A%0A%23%23%23%20Overview%0A%0AThe%20OracleCalculator%20extension%20is%20a%20powerful%20addition%20to%20the%201inch%20Limit%20Order%20Protocol%20that%20enables%20dynamic%20pricing%20based%20on%20Chainlink%20oracle%20data.%20This%20extension%20allows%20orders%20to%20be%20filled%20at%20prices%20that%20are%20calculated%20on-chain%20using%20real-time%20oracle%20feeds%2C%20making%20it%20possible%20to%20create%20orders%20that%20automatically%20adjust%20to%20market%20conditions.%0A%0A%23%23%23%201.%20What%20the%20OracleCalculator%20Extension%20Does%0A%0AThe%20OracleCalculator%20extension%20serves%20as%20an%20%60IAmountGetter%60%20implementation%20that%3A%0A%0A-%20**Calculates%20dynamic%20exchange%20rates**%20using%20Chainlink%20oracle%20data%0A-%20**Supports%20both%20single%20and%20double%20oracle%20pricing**%20for%20different%20token%20pairs%0A-%20**Applies%20configurable%20spreads**%20to%20provide%20maker%2Ftaker%20incentives%0A-%20**Handles%20inverse%20pricing**%20for%20tokens%20quoted%20in%20different%20base%20currencies%0A-%20**Validates%20oracle%20freshness**%20to%20ensure%20price%20data%20is%20current%20(within%204%20hours)%0A-%20**Integrates%20with%20predicates**%20for%20conditional%20order%20execution%0A%0A%23%23%23%23%20Key%20Features%3A%0A%0A1.%20**Single%20Oracle%20Pricing**%3A%20Uses%20one%20oracle%20to%20price%20a%20token%20relative%20to%20ETH%20or%20USD%0A2.%20**Double%20Oracle%20Pricing**%3A%20Uses%20two%20oracles%20to%20price%20custom%20token%20pairs%20(e.g.%2C%20INCH%2FDAI)%0A3.%20**Spread%20Application**%3A%20Applies%20maker%20and%20taker%20spreads%20to%20create%20profitable%20order%20books%0A4.%20**Inverse%20Flag%20Support**%3A%20Handles%20cases%20where%20oracle%20prices%20need%20to%20be%20inverted%0A5.%20**Oracle%20Freshness%20Check**%3A%20Ensures%20oracle%20data%20is%20not%20stale%20(within%204%20hours%20TTL)%0A%0A%23%23%23%202.%20Types%20of%20Orders%20That%20Can%20Be%20Created%0A%0A%23%23%23%23%20A.%20Single%20Oracle%20Orders%0A%0AOrders%20that%20use%20one%20Chainlink%20oracle%20to%20price%20a%20token%20relative%20to%20ETH%20or%20USD%3A%0A%0A-%20**ETH%20%E2%86%92%20DAI**%3A%20Using%20DAI%2FETH%20oracle%0A-%20**DAI%20%E2%86%92%20ETH**%3A%20Using%20DAI%2FETH%20oracle%20with%20inverse%20flag%0A-%20**WETH%20%E2%86%92%20USDC**%3A%20Using%20USDC%2FETH%20oracle%0A-%20**USDC%20%E2%86%92%20WETH**%3A%20Using%20USDC%2FETH%20oracle%20with%20inverse%20flag%0A%0A%23%23%23%23%20B.%20Double%20Oracle%20Orders%0A%0AOrders%20that%20use%20two%20oracles%20to%20price%20custom%20token%20pairs%3A%0A%0A-%20**INCH%20%E2%86%92%20DAI**%3A%20Using%20INCH%2FETH%20and%20DAI%2FETH%20oracles%0A-%20**DAI%20%E2%86%92%20INCH**%3A%20Using%20DAI%2FETH%20and%20INCH%2FETH%20oracles%0A-%20**Custom%20Token%20Pairs**%3A%20Any%20combination%20of%20tokens%20with%20available%20oracles%0A%0A%23%23%23%23%20C.%20Conditional%20Orders%20(Predicates)%0A%0AOrders%20that%20only%20execute%20under%20specific%20oracle%20conditions%3A%0A%0A-%20**Stop-Loss%20Orders**%3A%20Execute%20only%20when%20price%20falls%20below%20threshold%0A-%20**Take-Profit%20Orders**%3A%20Execute%20only%20when%20price%20rises%20above%20threshold%0A-%20**Range%20Orders**%3A%20Execute%20only%20within%20specific%20price%20ranges%0A%0A%23%23%23%203.%20Fields%20Passed%20to%20the%20Extension%20and%20How%20They%20Are%20Populated%0A%0A%23%23%23%23%20Extension%20Data%20Structure%0A%0AThe%20extension%20data%20is%20passed%20as%20%60bytes%20calldata%20extraData%60%20to%20the%20%60getMakingAmount%60%20and%20%60getTakingAmount%60%20functions%3A%0A%0A%60%60%60solidity%0Afunction%20getMakingAmount(%0A%20%20%20%20IOrderMixin.Order%20calldata%20order%2C%0A%20%20%20%20bytes%20calldata%20extension%2C%0A%20%20%20%20bytes32%20orderHash%2C%0A%20%20%20%20address%20taker%2C%0A%20%20%20%20uint256%20takingAmount%2C%0A%20%20%20%20uint256%20remainingMakingAmount%2C%0A%20%20%20%20bytes%20calldata%20extraData%20%20%2F%2F%20%E2%86%90%20Extension%20data%20here%0A)%20external%20view%20returns%20(uint256)%0A%60%60%60%0A%0A%23%23%23%23%20Single%20Oracle%20Data%20Format%0A%0AFor%20single%20oracle%20pricing%2C%20the%20%60extraData%60%20contains%3A%0A%0A%60%60%60%0A%5B1%20byte%20flags%5D%5B20%20bytes%20oracle%20address%5D%5B32%20bytes%20spread%5D%0A%60%60%60%0A%0A**Flags%20Byte%3A**%0A%0A-%20Bit%207%20(0x80)%3A%20Inverse%20flag%20-%20if%20set%2C%20invert%20the%20oracle%20price%0A-%20Bit%206%20(0x40)%3A%20Double%20price%20flag%20-%20if%20set%2C%20use%20double%20oracle%20mode%0A-%20Bits%200-5%3A%20Reserved%0A%0A**Example%3A**%0A%0A%60%60%60solidity%0A%2F%2F%20DAI%2FETH%20oracle%20at%200x1234...%20with%200.99%20spread%2C%20no%20inverse%0Abytes%20memory%20data%20%3D%20abi.encodePacked(%0A%20%20%20%20bytes1(0x00)%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20flags%3A%20no%20inverse%2C%20no%20double%20price%0A%20%20%20%20address(daiOracle)%2C%20%20%20%20%20%20%2F%2F%20oracle%20address%0A%20%20%20%20uint256(990000000)%20%20%20%20%20%20%20%2F%2F%20spread%3A%200.99%20(990000000%20%2F%201e9)%0A)%3B%0A%60%60%60%0A%0A%23%23%23%23%20Double%20Oracle%20Data%20Format%0A%0AFor%20double%20oracle%20pricing%2C%20the%20%60extraData%60%20contains%3A%0A%0A%60%60%60%0A%5B1%20byte%20flags%5D%5B20%20bytes%20oracle1%5D%5B20%20bytes%20oracle2%5D%5B32%20bytes%20decimalsScale%5D%5B32%20bytes%20spread%5D%0A%60%60%60%0A%0A**Example%3A**%0A%0A%60%60%60solidity%0A%2F%2F%20INCH%2FDAI%20pricing%20using%20INCH%2FETH%20and%20DAI%2FETH%20oracles%0Abytes%20memory%20data%20%3D%20abi.encodePacked(%0A%20%20%20%20bytes1(0x40)%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20flags%3A%20double%20price%20mode%0A%20%20%20%20address(inchOracle)%2C%20%20%20%20%20%2F%2F%20oracle1%3A%20INCH%2FETH%0A%20%20%20%20address(daiOracle)%2C%20%20%20%20%20%20%2F%2F%20oracle2%3A%20DAI%2FETH%0A%20%20%20%20int256(0)%2C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20decimalsScale%3A%20no%20adjustment%0A%20%20%20%20uint256(1010000000)%20%20%20%20%20%2F%2F%20spread%3A%201.01%20(1010000000%20%2F%201e9)%0A)%3B%0A%60%60%60%0A%0A%23%23%23%23%20How%20Fields%20Are%20Populated%0A%0A1.%20**Oracle%20Addresses**%3A%20Retrieved%20from%20Chainlink's%20oracle%20registry%20or%20deployment%0A2.%20**Spreads**%3A%20Calculated%20based%20on%20desired%20maker%2Ftaker%20incentives%20(typically%200.99%20for%20maker%2C%201.01%20for%20taker)%0A3.%20**Flags**%3A%20Set%20based%20on%20pricing%20requirements%20(inverse%20needed%2C%20double%20oracle%20needed)%0A4.%20**Decimals%20Scale**%3A%20Used%20to%20adjust%20for%20different%20oracle%20decimal%20precisions%0A%0A%23%23%23%204.%20Test%20Case%20Walkthrough%0A%0A%23%23%23%23%20Test%20Case%201%3A%20ETH%20%E2%86%92%20DAI%20Chainlink%20Order%0A%0A**Scenario**%3A%20Maker%20wants%20to%20sell%201%20ETH%20for%20DAI%20at%20oracle%20price%20with%20spreads%0A%0A**Order%20Details%3A**%0A%0A-%20Maker%3A%20makerAddr%0A-%20Taker%3A%20takerAddr%0A-%20Maker%20Asset%3A%20WETH%20(1%20ether)%0A-%20Taker%20Asset%3A%20DAI%20(4000%20ether)%0A-%20Oracle%3A%20DAI%2FETH%20at%200.00025%20ETH%20per%20DAI%20(1%20ETH%20%3D%204000%20DAI)%0A%0A**Extension%20Data%3A**%0A%0A%60%60%60solidity%0A%2F%2F%20Making%20amount%20data%20(maker%20spread%3A%200.99)%0Abytes%20memory%20makingAmountData%20%3D%20abi.encodePacked(%0A%20%20%20%20chainlinkCalcAddress%2C%20%20%20%20%2F%2F%20Calculator%20address%0A%20%20%20%20bytes1(0x00)%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20No%20inverse%20flag%0A%20%20%20%20oracleAddress%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20DAI%20oracle%0A%20%20%20%20uint256(990000000)%20%20%20%20%20%20%20%2F%2F%200.99%20spread%0A)%3B%0A%0A%2F%2F%20Taking%20amount%20data%20(taker%20spread%3A%201.01)%0Abytes%20memory%20takingAmountData%20%3D%20abi.encodePacked(%0A%20%20%20%20chainlinkCalcAddress%2C%20%20%20%20%2F%2F%20Calculator%20address%0A%20%20%20%20bytes1(0x80)%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Inverse%20flag%20set%0A%20%20%20%20oracleAddress%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20DAI%20oracle%0A%20%20%20%20uint256(1010000000)%20%20%20%20%20%2F%2F%201.01%20spread%0A)%3B%0A%60%60%60%0A%0A**Execution%20Flow%3A**%0A%0A1.%20Taker%20calls%20%60fillOrderArgs%60%20with%204000%20DAI%0A2.%20Protocol%20calls%20%60getTakingAmount%60%20with%204000%20DAI%0A3.%20Calculator%20applies%201.01%20spread%3A%204000%20%5C*%201.01%20%3D%204040%20DAI%0A4.%20Protocol%20calls%20%60getMakingAmount%60%20with%204040%20DAI%0A5.%20Calculator%20applies%200.99%20spread%3A%204040%20%5C*%200.99%20%2F%204000%20%3D%200.99%20ETH%0A6.%20Order%20executes%3A%20taker%20receives%200.99%20ETH%2C%20maker%20receives%204000%20DAI%0A%0A**Result**%3A%20Taker%20pays%204000%20DAI%2C%20receives%200.99%20ETH%20(effective%20rate%3A%201%20ETH%20%3D%204040.4%20DAI)%0A%0A%23%23%23%23%20Test%20Case%202%3A%20DAI%20%E2%86%92%20ETH%20Chainlink%20Order%0A%0A**Scenario**%3A%20Maker%20wants%20to%20sell%204000%20DAI%20for%20ETH%20at%20oracle%20price%0A%0A**Order%20Details%3A**%0A%0A-%20Maker%3A%20makerAddr%0A-%20Taker%3A%20takerAddr%0A-%20Maker%20Asset%3A%20DAI%20(4000%20ether)%0A-%20Taker%20Asset%3A%20WETH%20(1%20ether)%0A-%20Oracle%3A%20DAI%2FETH%20at%200.00025%20ETH%20per%20DAI%0A%0A**Extension%20Data%3A**%0A%0A%60%60%60solidity%0A%2F%2F%20Making%20amount%20data%20(inverse%20%2B%20maker%20spread)%0Abytes%20memory%20makingAmountData%20%3D%20abi.encodePacked(%0A%20%20%20%20chainlinkCalcAddress%2C%0A%20%20%20%20bytes1(0x80)%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Inverse%20flag%0A%20%20%20%20oracleAddress%2C%0A%20%20%20%20uint256(990000000)%20%20%20%20%20%20%20%2F%2F%200.99%20spread%0A)%3B%0A%0A%2F%2F%20Taking%20amount%20data%20(no%20inverse%20%2B%20taker%20spread)%0Abytes%20memory%20takingAmountData%20%3D%20abi.encodePacked(%0A%20%20%20%20chainlinkCalcAddress%2C%0A%20%20%20%20bytes1(0x00)%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20No%20inverse%20flag%0A%20%20%20%20oracleAddress%2C%0A%20%20%20%20uint256(1010000000)%20%20%20%20%20%2F%2F%201.01%20spread%0A)%3B%0A%60%60%60%0A%0A**Execution%20Flow%3A**%0A%0A1.%20Taker%20calls%20with%20%60makingAmount%60%20flag%20set%20to%20true%0A2.%20Protocol%20calls%20%60getMakingAmount%60%20with%204000%20DAI%0A3.%20Calculator%20applies%20inverse%20%2B%200.99%20spread%3A%204000%20%5C*%200.99%20%2F%204000%20%3D%200.99%20ETH%0A4.%20Protocol%20calls%20%60getTakingAmount%60%20with%200.99%20ETH%0A5.%20Calculator%20applies%201.01%20spread%3A%200.99%20%5C*%201.01%20%3D%201.01%20ETH%0A6.%20Order%20executes%3A%20taker%20receives%204000%20DAI%2C%20maker%20receives%201.01%20ETH%0A%0A**Result**%3A%20Taker%20pays%201.01%20ETH%2C%20receives%204000%20DAI%20(effective%20rate%3A%201%20ETH%20%3D%203960.4%20DAI)%0A%0A%23%23%23%23%20Test%20Case%203%3A%20INCH%20%E2%86%92%20DAI%20Double%20Oracle%20Order%0A%0A**Scenario**%3A%20Maker%20wants%20to%20sell%20100%20INCH%20for%20DAI%20using%20double%20oracle%20pricing%0A%0A**Order%20Details%3A**%0A%0A-%20Maker%3A%20makerAddr%0A-%20Taker%3A%20takerAddr%0A-%20Maker%20Asset%3A%20INCH%20(100%20ether)%0A-%20Taker%20Asset%3A%20DAI%20(632%20ether)%0A-%20Oracles%3A%20INCH%2FETH%20(0.0001577615249227853%20ETH)%20and%20DAI%2FETH%20(0.00025%20ETH)%0A%0A**Extension%20Data%3A**%0A%0A%60%60%60solidity%0A%2F%2F%20Making%20amount%20data%20(double%20oracle%20%2B%20maker%20spread)%0Abytes%20memory%20makingAmountData%20%3D%20abi.encodePacked(%0A%20%20%20%20chainlinkCalcAddress%2C%0A%20%20%20%20bytes1(0x40)%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Double%20price%20flag%0A%20%20%20%20address(daiOracle)%2C%20%20%20%20%20%20%2F%2F%20Oracle1%3A%20DAI%2FETH%0A%20%20%20%20address(inchOracle)%2C%20%20%20%20%20%2F%2F%20Oracle2%3A%20INCH%2FETH%0A%20%20%20%20int256(0)%2C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20No%20decimals%20adjustment%0A%20%20%20%20uint256(990000000)%20%20%20%20%20%20%20%2F%2F%200.99%20spread%0A)%3B%0A%0A%2F%2F%20Taking%20amount%20data%20(double%20oracle%20%2B%20taker%20spread)%0Abytes%20memory%20takingAmountData%20%3D%20abi.encodePacked(%0A%20%20%20%20chainlinkCalcAddress%2C%0A%20%20%20%20bytes1(0x40)%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Double%20price%20flag%0A%20%20%20%20address(inchOracle)%2C%20%20%20%20%20%2F%2F%20Oracle1%3A%20INCH%2FETH%0A%20%20%20%20address(daiOracle)%2C%20%20%20%20%20%20%2F%2F%20Oracle2%3A%20DAI%2FETH%0A%20%20%20%20int256(0)%2C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20No%20decimals%20adjustment%0A%20%20%20%20uint256(1010000000)%20%20%20%20%20%2F%2F%201.01%20spread%0A)%3B%0A%60%60%60%0A%0A**Execution%20Flow%3A**%0A%0A1.%20Taker%20calls%20with%20%60makingAmount%60%20flag%20set%20to%20true%0A2.%20Protocol%20calls%20%60getMakingAmount%60%20with%20100%20INCH%0A3.%20Calculator%20applies%20double%20oracle%20calculation%3A%0A%20%20%20-%20INCH%20price%20in%20ETH%3A%200.0001577615249227853%0A%20%20%20-%20DAI%20price%20in%20ETH%3A%200.00025%0A%20%20%20-%20INCH%2FDAI%20rate%3A%200.0001577615249227853%20%2F%200.00025%20%3D%200.631046%0A%20%20%20-%20With%200.99%20spread%3A%20100%20_%200.631046%20_%200.99%20%3D%2062.47%20DAI%0A4.%20Protocol%20calls%20%60getTakingAmount%60%20with%2062.47%20DAI%0A5.%20Calculator%20applies%20inverse%20calculation%20with%201.01%20spread%0A6.%20Order%20executes%20with%20calculated%20amounts%0A%0A**Result**%3A%20Complex%20pricing%20based%20on%20two%20oracle%20feeds%20with%20spread%20adjustments%0A%0A%23%23%23%23%20Test%20Case%204%3A%20Stop-Loss%20Order%20with%20Predicate%0A%0A**Scenario**%3A%20Maker%20wants%20to%20sell%20INCH%20for%20DAI%20only%20if%20INCH%2FDAI%20price%20falls%20below%206.32%0A%0A**Order%20Details%3A**%0A%0A-%20Maker%3A%20makerAddr%0A-%20Taker%3A%20takerAddr%0A-%20Maker%20Asset%3A%20INCH%20(100%20ether)%0A-%20Taker%20Asset%3A%20DAI%20(631%20ether)%0A-%20Predicate%3A%20INCH%2FDAI%20price%20%3C%206.32%0A%0A**Predicate%20Construction%3A**%0A%0A%60%60%60solidity%0A%2F%2F%20Build%20price%20call%20for%20predicate%0Abytes%20memory%20priceCall%20%3D%20abi.encodeWithSelector(%0A%20%20%20%20OracleCalculator%20.doublePrice.selector%2C%0A%20%20%20%20inchOracle%2C%20%20%20%20%2F%2F%20INCH%2FETH%20oracle%0A%20%20%20%20daiOracle%2C%20%20%20%20%20%2F%2F%20DAI%2FETH%20oracle%0A%20%20%20%20int256(0)%2C%20%20%20%20%20%2F%2F%20No%20decimals%20adjustment%0A%20%20%20%201%20ether%20%20%20%20%20%20%20%20%2F%2F%20Base%20amount%0A)%3B%0A%0A%2F%2F%20Build%20predicate%20call%0Abytes%20memory%20predicate%20%3D%20abi.encodeWithSelector(%0A%20%20%20%20swap.lt.selector%2C%20%20%20%20%20%20%20%20%2F%2F%20Less%20than%20comparison%0A%20%20%20%206.32%20ether%2C%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Threshold%3A%206.32%0A%20%20%20%20abi.encodeWithSelector(%0A%20%20%20%20%20%20%20%20swap.arbitraryStaticCall.selector%2C%0A%20%20%20%20%20%20%20%20address(oracleCalculator%20)%2C%0A%20%20%20%20%20%20%20%20priceCall%0A%20%20%20%20)%0A)%3B%0A%60%60%60%0A%0A**Execution%20Flow%3A**%0A%0A1.%20Order%20fill%20is%20attempted%0A2.%20Protocol%20evaluates%20predicate%20before%20execution%0A3.%20Predicate%20calls%20%60OracleCalculator%20.doublePrice()%60%20with%20oracle%20data%0A4.%20Calculated%20INCH%2FDAI%20price%20is%20compared%20to%206.32%20threshold%0A5.%20If%20price%20%3C%206.32%3A%20order%20executes%20normally%0A6.%20If%20price%20%E2%89%A5%206.32%3A%20order%20reverts%20with%20predicate%20failure%0A%0A**Result**%3A%20Order%20only%20executes%20when%20INCH%2FDAI%20price%20is%20below%20the%20specified%20threshold%0A%0A%23%23%23%23%20Test%20Case%205%3A%20Simple%20Order%20Without%20Extension%0A%0A**Scenario**%3A%20Basic%20order%20without%20any%20Chainlink%20integration%0A%0A**Order%20Details%3A**%0A%0A-%20Maker%3A%20makerAddr%0A-%20Taker%3A%20takerAddr%0A-%20Maker%20Asset%3A%20WETH%20(1%20ether)%0A-%20Taker%20Asset%3A%20DAI%20(4000%20ether)%0A-%20No%20extensions%20or%20predicates%0A%0A**Execution%20Flow%3A**%0A%0A1.%20Taker%20calls%20%60fillOrderArgs%60%20with%204000%20DAI%0A2.%20No%20extension%20data%20provided%0A3.%20Protocol%20uses%20default%20proportional%20calculation%0A4.%20Order%20executes%20at%20fixed%201%3A4000%20ratio%0A%0A**Result**%3A%20Simple%20fixed-rate%20order%20execution%20without%20dynamic%20pricing%0A%0A%23%23%23%20Key%20Implementation%20Details%0A%0A%23%23%23%23%20Oracle%20Freshness%20Check%0A%0A%60%60%60solidity%0Aif%20(updatedAt%20%2B%20_ORACLE_TTL%20%3C%20block.timestamp)%20revert%20StaleOraclePrice()%3B%0A%60%60%60%0A%0A-%20Ensures%20oracle%20data%20is%20not%20older%20than%204%20hours%0A-%20Prevents%20execution%20with%20stale%20price%20data%0A%0A%23%23%23%23%20Spread%20Application%0A%0A%60%60%60solidity%0Areturn%20spread%20*%20amount%20*%20latestAnswer.toUint256()%20%2F%20(10%20**%20oracle.decimals())%20%2F%20_SPREAD_DENOMINATOR%3B%0A%60%60%60%0A%0A-%20Spreads%20are%20applied%20as%20multipliers%20(e.g.%2C%20990000000%20%3D%200.99)%0A-%20%60_SPREAD_DENOMINATOR%20%3D%201e9%60%20for%209-decimal%20precision%0A%0A%23%23%23%23%20Double%20Oracle%20Calculation%0A%0A%60%60%60solidity%0Aresult%20%3D%20amount%20*%20latestAnswer1.toUint256()%3B%0Aif%20(decimalsScale%20%3E%200)%20%7B%0A%20%20%20%20result%20*%3D%2010%20**%20decimalsScale.toUint256()%3B%0A%7D%20else%20if%20(decimalsScale%20%3C%200)%20%7B%0A%20%20%20%20result%20%2F%3D%2010%20**%20(-decimalsScale).toUint256()%3B%0A%7D%0Aresult%20%2F%3D%20latestAnswer2.toUint256()%3B%0A%60%60%60%0A%0A-%20Calculates%20cross-oracle%20pricing%20for%20custom%20token%20pairs%0A-%20Handles%20decimal%20precision%20adjustments%20between%20oracles%0A%0AThis%20extension%20enables%20sophisticated%20DeFi%20applications%20that%20can%20automatically%20adjust%20to%20market%20conditions%20while%20providing%20liquidity%20providers%20with%20profitable%20spreads.%0A%0A%23%23%20Treasury%20Management%0A%0A%23%23%23%20Treasury%20Management%20Flow%0A%0A!%5BTreasuryInteraction%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FBkDBWwhDee.png)%0A%0A%23%23%23%20Rebalancer%20Requirements%0A%0A1.%20Create%20an%20Interaction%20Contract%20called%20RebalancerInteraction.sol%20(in%20the%20src%20directory)%0A2.%20Create%20a%20test%20contract%20called%20RebalancerInteraction.t.sol%20(in%20the%20test%20directory)%0A3.%20In%20RebalancerInteraction.t.sol%0A%20%20%201.%20Create%20test%20scenarios%20the%20same%20as%20in%20OracleCalculator%20.t.sol%0A%20%20%202.%20Add%20to%20that%20an%20Interaction%20using%20RebalancerInteraction.sol%20which%0A%20%20%20%20%20%201.%20Takes%20the%20output%20tokens%20the%20taker%20receives%0A%20%20%20%20%20%202.%20Transfers%20them%20to%20a%20third%20wallet%20(addr3)%20which%20is%20a%20treasurer%0A%20%20%20%20%20%203.%20If%20the%20transfer%20fails%20reject%20the%20order.%0A%0A%23%23%23%20Rebalancer%20Implementation%0A%0AThe%20Rebalancer%20implementation%20has%20been%20successfully%20completed%20with%20the%20following%20components%3A%0A%0A%23%23%23%201.%20RebalancerInteraction.sol%20(src%20directory)%0A%0A**Purpose**%3A%20Post-interaction%20contract%20that%20transfers%20output%20tokens%20to%20a%20treasurer%20wallet%20after%20successful%20order%20execution.%0A%0A**Key%20Features**%3A%0A%0A-%20Implements%20%60IPostInteraction%60%20interface%20for%20Limit%20Order%20Protocol%20integration%0A-%20Transfers%20the%20taker's%20received%20tokens%20(maker%20asset)%20to%20a%20designated%20treasurer%20address%0A-%20Uses%20%60SafeERC20%60%20for%20secure%20token%20transfers%20with%20proper%20error%20handling%0A-%20Reverts%20the%20entire%20order%20if%20transfer%20fails%2C%20ensuring%20atomic%20execution%0A-%20Emits%20%60TokensTransferredToTreasurer%60%20events%20for%20successful%20transfers%0A-%20Validates%20treasurer%20address%20in%20constructor%20to%20prevent%20zero%20address%20usage%0A%0A**Core%20Functionality**%3A%0A%0A%60%60%60solidity%0Afunction%20postInteraction(%0A%20%20%20%20IOrderMixin.Order%20calldata%20order%2C%0A%20%20%20%20bytes32%20orderHash%2C%0A%20%20%20%20address%20taker%2C%0A%20%20%20%20uint256%20makingAmount%2C%0A%20%20%20%20uint256%20takingAmount%2C%0A%20%20%20%20uint256%20remainingMakingAmount%2C%0A%20%20%20%20bytes%20calldata%20extraData%0A)%20external%20override%20%7B%0A%20%20%20%20address%20outputToken%20%3D%20order.makerAsset%3B%0A%20%20%20%20uint256%20outputAmount%20%3D%20makingAmount%3B%0A%0A%20%20%20%20try%20IERC20(outputToken).safeTransferFrom(taker%2C%20treasurer%2C%20outputAmount)%20%7B%0A%20%20%20%20%20%20%20%20emit%20TokensTransferredToTreasurer(outputToken%2C%20taker%2C%20treasurer%2C%20outputAmount)%3B%0A%20%20%20%20%7D%20catch%20%7B%0A%20%20%20%20%20%20%20%20revert%20TransferFailed()%3B%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A%23%23%23%202.%20RebalancerInteraction.t.sol%20(test%20directory)%0A%0A**Purpose**%3A%20Comprehensive%20test%20suite%20that%20replicates%20all%20OracleCalculator%20scenarios%20with%20added%20treasurer%20functionality.%0A%0A**Test%20Coverage**%3A%0A%0A-%20**Single%20Oracle%20Orders**%3A%20ETH%E2%86%92DAI%2C%20DAI%E2%86%92ETH%20with%20treasurer%20receiving%20output%20tokens%0A-%20**Double%20Oracle%20Orders**%3A%20INCH%E2%86%92DAI%20with%20complex%20pricing%20and%20treasurer%20transfer%0A-%20**Conditional%20Orders**%3A%20Stop-loss%20orders%20with%20predicate%20validation%20and%20treasurer%20transfer%0A-%20**Simple%20Orders**%3A%20Basic%20orders%20without%20Chainlink%20but%20with%20treasurer%20transfer%0A-%20**Failure%20Scenarios**%3A%20Tests%20unauthorized%20transfers%20that%20should%20revert%0A%0A**Test%20Scenarios%20Implemented**%3A%0A%0A1.%20%60test_eth_to_dai_chainlink_order_with_rebalancer()%60%20-%20Single%20oracle%20ETH%E2%86%92DAI%0A2.%20%60test_dai_to_eth_chainlink_order_with_rebalancer()%60%20-%20Single%20oracle%20DAI%E2%86%92ETH%20with%20inverse%0A3.%20%60test_dai_to_1inch_chainlink_order_takingAmountData_with_rebalancer()%60%20-%20Double%20oracle%20INCH%E2%86%92DAI%0A4.%20%60test_dai_to_1inch_chainlink_order_makingAmountData_with_rebalancer()%60%20-%20Double%20oracle%20with%20making%20amount%0A5.%20%60test_dai_to_1inch_stop_loss_order_with_rebalancer()%60%20-%20Conditional%20order%20with%20predicate%0A6.%20%60test_dai_to_1inch_stop_loss_order_predicate_invalid_with_rebalancer()%60%20-%20Invalid%20predicate%20test%0A7.%20%60test_eth_to_dai_stop_loss_order_with_rebalancer()%60%20-%20ETH%E2%86%92DAI%20with%20stop-loss%0A8.%20%60test_simple_order_without_extension_with_rebalancer()%60%20-%20Basic%20order%20with%20treasurer%0A9.%20%60test_simple_order_with_different_amounts_with_rebalancer()%60%20-%20Partial%20amounts%0A10.%20%60test_rebalancer_transfer_failure()%60%20-%20Failure%20scenario%20testing%0A%0A%23%23%23%203.%20Key%20Implementation%20Details%0A%0A%23%23%23%23%20**Post-Interaction%20Integration**%0A%0A-%20Each%20test%20includes%20%60buildPostInteractionCalldata(address(rebalancerInteraction))%60%0A-%20Post-interaction%20data%20is%20added%20to%20order%20extensions%20via%20%60PostInteractionData%60%0A-%20Treasurer%20(addr3)%20receives%20the%20output%20tokens%20after%20successful%20order%20execution%0A%0A%23%23%23%23%20**Transfer%20Logic**%0A%0A-%20**Takes%20output%20tokens**%3A%20The%20tokens%20the%20taker%20receives%20(maker%20asset%20from%20the%20order)%0A-%20**Transfers%20to%20treasurer**%3A%20Moves%20tokens%20to%20addr3%20(treasurer%20wallet)%20using%20%60safeTransferFrom%60%0A-%20**Rejects%20order%20on%20failure**%3A%20If%20transfer%20fails%2C%20entire%20order%20reverts%20with%20%60TransferFailed%60%20error%0A%0A%23%23%23%23%20**Test%20Verification**%0A%0AEach%20test%20verifies%3A%0A%0A1.%20**Order%20executes%20successfully**%20with%20Chainlink%20pricing%20(where%20applicable)%0A2.%20**Treasurer%20receives%20tokens**%3A%20%60assertEq(token.balanceOf(addr3)%2C%20expectedAmount)%60%0A3.%20**All%20balances%20are%20correct**%20for%20maker%2C%20taker%2C%20and%20treasurer%0A4.%20**Failure%20scenarios%20revert**%20when%20transfers%20are%20unauthorized%0A%0A%23%23%23%23%20**Error%20Handling**%0A%0A-%20**TransferFailed**%3A%20Reverts%20entire%20order%20if%20%60safeTransferFrom%60%20fails%0A-%20**InvalidTreasurer**%3A%20Prevents%20deployment%20with%20zero%20address%20treasurer%0A-%20**Predicate%20failures**%3A%20Orders%20with%20invalid%20predicates%20revert%20before%20interaction%0A%0A%23%23%23%204.%20Integration%20with%20Limit%20Order%20Protocol%0A%0AThe%20implementation%20seamlessly%20integrates%20with%20the%20existing%20Limit%20Order%20Protocol%3A%0A%0A-%20**Extension%20System**%3A%20Uses%20%60PostInteractionData%60%20extension%20for%20post-execution%20callbacks%0A-%20**Order%20Flow**%3A%20Maintains%20existing%20order%20execution%20flow%20while%20adding%20treasurer%20transfer%0A-%20**Atomic%20Execution**%3A%20Ensures%20either%20complete%20success%20(order%20%2B%20transfer)%20or%20complete%20failure%0A-%20**Event%20Emission**%3A%20Provides%20transparency%20through%20%60TokensTransferredToTreasurer%60%20events%0A%0A%23%23%23%205.%20Security%20Considerations%0A%0A-%20**SafeERC20**%3A%20Uses%20OpenZeppelin's%20SafeERC20%20for%20secure%20token%20transfers%0A-%20**Try-Catch**%3A%20Graceful%20error%20handling%20prevents%20partial%20state%20changes%0A-%20**Address%20Validation**%3A%20Constructor%20validates%20treasurer%20address%0A-%20**Atomic%20Operations**%3A%20Order%20reverts%20entirely%20if%20transfer%20fails%0A-%20**Authorization**%3A%20Relies%20on%20existing%20token%20approval%20mechanisms%0A%0A%23%23%23%206.%20Use%20Cases%0A%0AThis%20implementation%20enables%3A%0A%0A-%20**Automated%20Treasury%20Management**%3A%20Automatic%20transfer%20of%20trading%20profits%20to%20treasury%0A-%20**Risk%20Management**%3A%20Centralized%20control%20of%20trading%20outputs%0A-%20**Compliance**%3A%20Regulatory%20requirements%20for%20fund%20segregation%0A-%20**Portfolio%20Rebalancing**%3A%20Systematic%20reallocation%20of%20trading%20proceeds%0A%0AThe%20Rebalancer%20implementation%20successfully%20meets%20all%20requirements%20from%20the%20specification%20and%20provides%20a%20robust%2C%20secure%2C%20and%20comprehensive%20solution%20for%20automated%20treasury%20management%20in%20limit%20order%20trading.%0A%0A%23%23%23%20Test%20Results%0A%0A**10%20out%20of%2010%20tests%20passing%20(100%25%20success%20rate)**%0A%0A%23%23%23%23%20%E2%9C%85%20**All%20Tests%20Passing%3A**%0A%0A1.%20%60test_eth_to_dai_chainlink_order_with_rebalancer()%60%20-%20Single%20oracle%20ETH%E2%86%92DAI%0A2.%20%60test_dai_to_eth_chainlink_order_with_rebalancer()%60%20-%20Single%20oracle%20DAI%E2%86%92ETH%20with%20inverse%0A3.%20%60test_eth_to_dai_stop_loss_order_with_rebalancer()%60%20-%20Stop-loss%20with%20predicate%0A4.%20%60test_simple_order_without_extension_with_rebalancer()%60%20-%20Basic%20order%20without%20extensions%0A5.%20%60test_simple_order_with_different_amounts_with_rebalancer()%60%20-%20Different%20order%20amounts%0A6.%20%60test_rebalancer_transfer_failure()%60%20-%20Transfer%20failure%20handling%0A7.%20%60test_dai_to_1inch_stop_loss_order_predicate_invalid_with_rebalancer()%60%20-%20Invalid%20predicate%0A8.%20%60test_dai_to_1inch_chainlink_order_makingAmountData_with_rebalancer()%60%20-%20Double%20oracle%20with%20making%20amount%0A9.%20%60test_dai_to_1inch_chainlink_order_takingAmountData_with_rebalancer()%60%20-%20Double%20oracle%20with%20taking%20amount%0A10.%20%60test_dai_to_1inch_stop_loss_order_with_rebalancer()%60%20-%20Complex%20double%20oracle%20with%20stop-loss%20predicate%0A%0A%23%23%23%23%20%F0%9F%8E%AF%20**Core%20Functionality%20Verified%3A**%0A%0A-%20%E2%9C%85%20Post-interaction%20transfers%20tokens%20to%20treasurer%0A-%20%E2%9C%85%20Proper%20token%20approvals%20and%20transfers%0A-%20%E2%9C%85%20Balance%20verification%20accounting%20for%20treasurer%20transfers%0A-%20%E2%9C%85%20Error%20handling%20with%20transfer%20failures%0A-%20%E2%9C%85%20Atomic%20execution%20(orders%20either%20complete%20fully%20or%20revert%20entirely)%0A-%20%E2%9C%85%20Support%20for%20multiple%20token%20types%20(WETH%2C%20DAI%2C%20INCH)%0A-%20%E2%9C%85%20Complex%20oracle-based%20pricing%20scenarios%0A%0A%23%23%20Resource%20Management%0A%0A%23%23%23%20Resource%20Management%20Architecture%0A%0A!%5BResourceArchitecture%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FS12jGDhPge.png)%0A%0A%23%23%23%20Resource%20Management%20Components%0A%0A!%5BResourceComponents%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FHJ-pzD3Peg.png)%0A%0A%23%23%23%20Requirements%0A%0A1.%20Read%20lib%5Cthe-compact%5CREADME.md%20(open%20in%20editor)%20to%20understand%20how%20the%20compact%20works%0A2.%20We%20are%20looking%20to%20create%20an%20end%20to%20end%20flow%20where%0A%20%20%201.%20We%20register%20a%20new%20contract%20ResourceManager.sol%20as%20a%20ResourceManager%0A%20%20%202.%20We%20Register%20ChainLinkCompactInteraction.sol%20as%20the%20Arbiter%0A%20%20%203.%20The%20Maker%20(the%20Swapper%20in%20compact%20terms%20signs%20permission%20for%20their%20tokens%20(or%20ETH)%20to%20be%20stored%20in%20the-compact%20as%20ERC-6909)%0A%20%20%204.%20ChainLinkCompact.sol%20checks%20that%20the%20we%20have%20a%20ResourceLock%20for%20the%20amount%20required.%0A%20%20%205.%20ChainLinkCompact%20then%20executes%20the%20trade%20using%20the%20same%20logic%20that%20was%20in%20ChainLinkCalculator%20and%20creates%20a%20resource%20lock%20for%20their%20(tokens%2FETH)%0A%20%20%206.%20ChainLinkCompactInteraction%20is%20copied%20from%20RebalancerInteraction%20it%20takes%20the%20output%20tokens%20provided%20by%20the%20Taker%20and%0A%20%20%207.%20If%20they%20are%20%3E%3D%20TakerAmount%20then%20it%20calls%20the%20ResourceManager%20to%20lock%20the%20funds%0A%20%20%208.%20It%20then%20does%20the%20token%20transfer%20to%20the%20treasurer%20the%20same%20as%20it%20was%20done%20in%20the%20original%20RebalancerInteraction%0A%0A%23%23%23%20Design%20Questions%0A%0A1.%20**Resource%20Manager%20Registration**%3A%20How%20should%20we%20register%20the%20LimitOrderProtocol%20as%20a%20ResourceManager%20in%20The%20Compact%3F%20Should%20it%20be%20a%20separate%20contract%20or%20integrated%20directly%3F%0A%20%20%201.%20Answer%3A%20We%20are%20registering%20it%20as%20a%20separate%20contract%20let's%20call%20it%20ResourceManager.sol%20and%20this%20contract%20will%20be%20called%20by%20ChainLinkCompact%20to%20lock%20the%20resources%20before%20calling%20the%20swap%20on%20LimitOrderProtocl%0A%0A2.%20**Arbiter%20Implementation**%3A%20Should%20ChainLinkCompactInteraction.sol%20be%20a%20standalone%20arbiter%20or%20integrated%20with%20existing%20ChainLinkCalculator%20logic%3F%0A%20%20%201.%20Answer%3A%20It%20should%20be%20Standalone%20ChainLinkCalculator%20and%20RebalancerInteraction%20remain%20unchanged%0A%0A3.%20**Token%20Locking%20Strategy**%3A%20Should%20makers%20lock%20their%20entire%20balance%20upfront%20or%20lock%20tokens%20dynamically%20when%20orders%20are%20matched%3F%0A%20%20%201.%20Answer%3A%20Initially%20Lock%20their%20whole%20balance%0A%0A4.%20**Resource%20Lock%20Scope**%3A%20Should%20resource%20locks%20be%20chain-specific%20or%20multichain%20for%20cross-chain%20order%20execution%3F%0A%20%20%201.%20Answer%3A%20Chain-specific%0A%0A5.%20**Allocator%20Selection**%3A%20Which%20allocator%20should%20we%20use%20for%20the%20resource%20locks%3F%20Should%20we%20create%20a%20custom%20allocator%20or%20use%20existing%20ones%20like%20Smallocator%2FAutocator%3F%0A%20%20%201.%20Answer%3A%20Create%20a%20custom%20Allocator%20based%20on%20Autocator(which%20is%20used%20for%20End%20User%20signing%20which%20is%20the%20Maker%20in%20our%20case)%0A%20%20%202.%20The%20logic%20for%20calling%20this%20should%20be%20in%20ChainLinkCompact.t.sol%0A%20%20%203.%20Moving%20forward%20we%20will%20also%20create%20a%20custom%20Smallocator%20used%20when%20smart%20contract%20call%20this%0A%0A6.%20**EIP-712%20Signature%20Structure**%3A%20How%20should%20we%20structure%20the%20EIP-712%20signatures%20for%20the%20compact%20agreements%3F%20Should%20we%20include%20mandate%20data%20for%20additional%20conditions%3F%0A%20%20%201.%20Answer%3A%20For%20Phase%201%20we%20do%20not%20need%20to%20add%20mandate%20data%20or%20Solver%20Payloads%20we%20will%20incorporate%20those%20in%20a%20later%20phase%0A%0A7.%20**Fallback%20Mechanisms**%3A%20What%20should%20happen%20if%20the%20arbiter%20fails%20to%20process%20a%20claim%3F%20Should%20we%20implement%20emissary%20fallbacks%3F%0A%20%20%201.%20If%20an%20arbiter%20fails%20to%20process%20the%20claim%20the%20swap%20should%20revert%0A%0A8.%20**Gas%20Optimization**%3A%20How%20can%20we%20optimize%20gas%20usage%20for%20the%20ERC-6909%20integration%2C%20especially%20for%20batch%20operations%3F%0A%20%20%201.%20We%20will%20optimize%20gas%20in%20phase%202%0A%0A9.%20**Error%20Handling**%3A%20How%20should%20we%20handle%20cases%20where%20resource%20locks%20are%20insufficient%20or%20expired%3F%0A%20%20%201.%20We%20revert%20the%20transaction%20with%20custom%20errors%20stating%20the%20reason%20for%20the%20failure%0A%0A10.%20**Integration%20Points**%3A%20Should%20the%20ERC-6909%20functionality%20be%20optional%20(opt-in)%20or%20mandatory%20for%20all%20orders%3F%0A%20%20%20%201.%20Optional%20set%20by%20a%20boolean%20ERC-6909%20flag%20for%20now%0A%20%20%20%202.%20Later%20this%20may%20move%20to%20an%20enum%20with%20additional%20swap%20types%0A%0A%23%23%23%20Implementation%0A%0A%23%23%23%23%20Phase%201%3A%20Core%20Contract%20Development%0A%0A1.%20**Create%20ResourceManager.sol**%20-%20New%20contract%0A%20%20%20-%20Register%20as%20ResourceManager%20in%20The%20Compact%0A%20%20%20-%20Handle%20resource%20lock%20creation%20and%20management%20for%20makers%0A%20%20%20-%20Implement%20allocator%20integration%20for%20order%20validation%0A%20%20%20-%20Called%20by%20ChainLinkCompact%20to%20lock%20resources%20before%20swap%20execution%0A%0A2.%20**Create%20ChainLinkCompact.sol**%20-%20Copy%20from%20ChainLinkCalculator.sol%0A%20%20%20-%20Add%20ERC-6909%20flag%20for%20optional%20functionality%0A%20%20%20-%20Integrate%20with%20The%20Compact%20for%20resource%20lock%20verification%0A%20%20%20-%20Add%20ERC-6909%20token%20validation%20before%20order%20execution%0A%20%20%20-%20Call%20ResourceManager.sol%20to%20lock%20resources%20before%20LimitOrderProtocol%20execution%0A%20%20%20-%20Implement%20custom%20error%20handling%20for%20insufficient%2Fexpired%20locks%0A%0A3.%20**Create%20ChainLinkCompactInteraction.sol**%20-%20Copy%20from%20RebalancerInteraction.sol%0A%20%20%20-%20Implement%20IArbiter%20interface%20for%20The%20Compact%0A%20%20%20-%20Add%20resource%20lock%20creation%20for%20taker's%20output%20tokens%0A%20%20%20-%20Maintain%20treasurer%20transfer%20functionality%0A%20%20%20-%20Add%20EIP-712%20signature%20verification%20for%20compact%20agreements%0A%20%20%20-%20Revert%20entire%20transaction%20if%20arbiter%20fails%20to%20process%20claim%0A%0A4.%20**Create%20Custom%20Allocator**%20-%20Based%20on%20Autocator%0A%20%20%20-%20Implement%20IAllocator%20interface%0A%20%20%20-%20Handle%20end-user%20(Maker)%20signing%20authorization%0A%20%20%20-%20Add%20nonce%20management%20for%20compact%20claims%0A%20%20%20-%20Implement%20claim%20authorization%20logic%0A%20%20%20-%20Logic%20for%20calling%20this%20should%20be%20in%20ChainLinkCompact.t.sol%0A%0A%23%23%23%23%20Phase%202%3A%20Integration%20%26%20Testing%0A%0A5.%20**Compact%20Registration%20System**%0A%20%20%20-%20Implement%20EIP-712%20signature%20generation%20for%20makers%20(no%20mandate%20data%20for%20Phase%201)%0A%20%20%20-%20Create%20compact%20registration%20functions%0A%20%20%20-%20Add%20chain-specific%20resource%20lock%20scope%0A%20%20%20-%20Implement%20upfront%20token%20locking%20strategy%0A%0A6.%20**Testing%20Suite**%0A%20%20%20-%20Unit%20tests%20for%20each%20contract%0A%20%20%20-%20Integration%20tests%20for%20end-to-end%20flow%0A%20%20%20-%20Test%20ERC-6909%20flag%20functionality%0A%20%20%20-%20Test%20custom%20error%20handling%20scenarios%0A%0A%23%23%23%23%20Phase%203%3A%20Advanced%20Features%0A%0A7.%20**Gas%20Optimization**%0A%20%20%20-%20Optimize%20gas%20usage%20for%20ERC-6909%20integration%0A%20%20%20-%20Implement%20batch%20operations%20optimization%0A%20%20%20-%20Profile%20and%20optimize%20critical%20paths%0A%0A8.%20**Enhanced%20Features**%0A%20%20%20-%20Add%20mandate%20data%20structure%20for%20order%20conditions%0A%20%20%20-%20Implement%20multichain%20support%0A%20%20%20-%20Create%20custom%20Smallocator%20for%20smart%20contract%20calls%0A%20%20%20-%20Add%20emissary%20fallback%20mechanisms%0A%20%20%20-%20Implement%20enum%20for%20additional%20swap%20types%20beyond%20boolean%20flag%0A%0A%23%23%23%20Technical%20Architecture%0A%0A**Core%20Flow%3A**%0A%0A1.%20Maker%20deposits%20tokens%20into%20The%20Compact%20(creates%20ERC-6909%20resource%20lock)%0A2.%20Maker%20signs%20EIP-712%20compact%20agreement%20with%20arbiter%20(ChainLinkCompactInteraction)%0A3.%20Order%20is%20posted%20to%20LimitOrderProtocol%20with%20ERC-6909%20extension%0A4.%20Taker%20fills%20order%20through%20ChainLinkCompact.sol%0A5.%20ChainLinkCompactInteraction%20processes%20claim%3A%0A%20%20%20-%20Verifies%20resource%20lock%20availability%0A%20%20%20-%20Executes%20trade%20using%20ChainLinkCalculator%20logic%0A%20%20%20-%20Creates%20new%20resource%20lock%20for%20taker's%20output%20tokens%0A%20%20%20-%20Transfers%20tokens%20to%20treasurer%0A%20%20%20-%20Calls%20ResourceManager%20to%20lock%20funds%0A%0A**Key%20Interfaces%3A**%0A%0A-%20%60ITheCompact%60%20-%20For%20resource%20lock%20management%0A-%20%60IAllocator%60%20-%20For%20claim%20authorization%0A-%20%60IArbiter%60%20-%20For%20claim%20processing%0A-%20%60IEmissary%60%20-%20For%20fallback%20verification%0A%0A**Data%20Structures%3A**%0A%0A-%20%60Compact%60%20-%20EIP-712%20payload%20for%20single%20resource%20lock%0A-%20%60BatchCompact%60%20-%20EIP-712%20payload%20for%20multiple%20resource%20locks%0A-%20%60Mandate%60%20-%20Witness%20data%20for%20order%20conditions%0A-%20%60Claim%60%20-%20Claim%20payload%20for%20processing%0A%0A%23%23%23%20Future%20Test%20Enhancements%0A%0AFor%20ERC-6909%20integration%2C%20additional%20test%20categories%20will%20be%20needed%3A%0A%0A1.%20**ERC-6909%20Resource%20Lock%20Tests**%0A%20%20%20-%20Resource%20lock%20creation%20and%20validation%0A%20%20%20-%20Insufficient%20lock%20handling%0A%20%20%20-%20Lock%20expiration%20scenarios%0A%0A2.%20**Compact%20Integration%20Tests**%0A%20%20%20-%20EIP-712%20signature%20verification%0A%20%20%20-%20Compact%20agreement%20validation%0A%20%20%20-%20Arbiter%20claim%20processing%0A%0A3.%20**Resource%20Manager%20Tests**%0A%20%20%20-%20Lock%20management%20functionality%0A%20%20%20-%20Allocator%20integration%0A%20%20%20-%20Error%20handling%20for%20resource%20conflicts%0A%0A4.%20**End-to-End%20Flow%20Tests**%0A%20%20%20-%20Complete%20maker-to-taker%20flow%0A%20%20%20-%20Treasurer%20integration%0A%20%20%20-%20Cross-contract%20interaction%20validation%0A%0A%23%23%20NEAR%20FUSION%2B%20Smart%20Contract%20Development%0A%0A%23%23%23%20NEAR%20Smart%20Contract%20Architecture%0A%0A!%5BNEARArchitecture%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FHydB7D3Pxe.png)%0A%0A%23%23%23%20NEAR%20Limit%20Order%20Protocol%20Contracts%0A%0A!%5BNEARLimitOrder%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FHkg8QPnvee.png)%0A%0A%23%23%23%20NEAR%20Escrow%20Smart%20Contracts%0A%0A!%5BNEAR%20Escrow%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FS1tqDDhvgg.png)%0A%0A%23%23%23%20Overview%0A%0ANEAR%20Fusion%2B%20is%20a%20comprehensive%20DeFi%20protocol%20that%20migrates%201inch's%20Limit%20Order%20Protocol%20and%20Cross-Chain%20Swap%20functionality%20to%20the%20NEAR%20blockchain.%20This%20project%20implements%20advanced%20trading%20features%20including%20limit%20orders%2C%20cross-chain%20atomic%20swaps%2C%20and%20sophisticated%20escrow%20mechanisms.%0A%0A%23%23%23%20Architecture%0A%0AThe%20protocol%20consists%20of%20several%20interconnected%20smart%20contracts%20that%20work%20together%20to%20provide%20a%20complete%20DeFi%20trading%20experience%3A%0A%0A%23%23%23%23%20Core%20Components%0A%0A1.%20**Limit%20Order%20Protocol**%20-%20Handles%20limit%20order%20creation%2C%20execution%2C%20and%20management%0A2.%20**Cross-Chain%20Swap**%20-%20Enables%20atomic%20swaps%20across%20different%20blockchains%0A3.%20**Escrow%20System**%20-%20Manages%20secure%20fund%20escrow%20for%20cross-chain%20operations%0A4.%20**Fee%20Management**%20-%20Handles%20fee%20collection%20and%20distribution%0A5.%20**Merkle%20Validation**%20-%20Provides%20proof%20validation%20for%20complex%20order%20structures%0A%0A%23%23%23%23%20Contract%20Structure%0A%0A%60%60%60%0Asrc%2F%0A%E2%94%9C%E2%94%80%E2%94%80%20limit-order-protocol%2F%20%20%20%20%20%23%20Main%20limit%20order%20functionality%0A%E2%94%9C%E2%94%80%E2%94%80%20cross-chain-swap%2F%20%20%20%20%20%20%20%20%20%23%20Cross-chain%20atomic%20swap%20implementation%0A%E2%94%9C%E2%94%80%E2%94%80%20base-escrow-factory%2F%20%20%20%20%20%20%23%20Advanced%20escrow%20factory%20with%20Merkle%20validation%0A%E2%94%9C%E2%94%80%E2%94%80%20escrow-factory%2F%20%20%20%20%20%20%20%20%20%20%20%23%20Standard%20escrow%20factory%0A%E2%94%9C%E2%94%80%E2%94%80%20escrow-src%2F%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20Source%20chain%20escrow%20contract%0A%E2%94%9C%E2%94%80%E2%94%80%20escrow-dst%2F%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20Destination%20chain%20escrow%20contract%0A%E2%94%9C%E2%94%80%E2%94%80%20fee-taker%2F%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20Fee%20collection%20and%20management%0A%E2%94%94%E2%94%80%E2%94%80%20merkle-storage-invalidator%2F%20%23%20Merkle%20proof%20validation%0A%60%60%60%0A%0A%23%23%23%20Key%20Features%0A%0A-%20**Limit%20Orders**%3A%20Advanced%20limit%20order%20protocol%20with%20partial%20fills%20and%20multiple%20execution%20strategies%0A-%20**Cross-Chain%20Swaps**%3A%20Atomic%20swaps%20between%20different%20blockchains%20with%20time-locked%20escrows%0A-%20**Merkle%20Proofs**%3A%20Efficient%20validation%20for%20complex%20order%20structures%0A-%20**Fee%20Management**%3A%20Flexible%20fee%20collection%20and%20distribution%20mechanisms%0A-%20**Security**%3A%20Comprehensive%20validation%20and%20timelock%20mechanisms%0A%0A%23%23%23%20Documentation%20Sections%0A%0A-%20%5BArchitecture%20Overview%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.architecture.md)%0A-%20%5BContract%20Documentation%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.contracts%2F)%0A%20%20-%20%5BLimit%20Order%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.contracts%2Flimit-order-protocol.md)%0A%20%20-%20%5BCross-Chain%20Swap%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.contracts%2Fcross-chain-swap.md)%0A%20%20-%20%5BEscrow%20System%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.contracts%2Fescrow-system.md)%0A%20%20-%20%5BFee%20Taker%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.contracts%2Ffee-taker.md)%0A%20%20-%20%5BMerkle%20Storage%20Invalidator%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.contracts%2Fmerkle-storage-invalidator.md)%0A-%20%5BIntegration%20Guide%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.integration.md)%0A-%20%5BSecurity%20Considerations%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.security.md)%0A-%20%5BAPI%20Reference%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.api-reference.md)%0A-%20%5BDeployment%20Guide%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.deployment.md)%0A%0A%23%23%23%20Quick%20Start%0A%0A1.%20**Build%20Contracts**%3A%20%60cargo%20near%20build%60%0A2.%20**Run%20Tests**%3A%20%60cargo%20test%60%0A3.%20**Deploy**%3A%20Use%20the%20deployment%20scripts%20in%20%60deployment-scripts%2F%60%0A%0A%23%23%23%20Development%0A%0A-%20**Rust%20Version**%3A%20See%20%60rust-toolchain.toml%60%0A-%20**NEAR%20SDK**%3A%20v5.15.1%0A-%20**Testing**%3A%20Integration%20tests%20in%20%60integration-tests%2F%60%0A%0A%23%23%23%20Contributing%0A%0APlease%20refer%20to%20the%20main%20%5BREADME.md%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fblob%2Fmain%2FREADME.md)%20for%20development%20setup%20and%20contribution%20guidelines.%0A",lastUpdatedAt:1754438779e3},{lazy:()=>J(()=>import("./tycho1inchNOL-B1s-Hza1.js"),[]),path:"/research/solving/tycho1inchNOL.html",type:"mdx",filePath:"research/solving/tycho1inchNOL.mdx",content:"%23%20No%20Liquidity%20Solving%20(Tycho%201inch)%0A%0A%23%23%20No%20Liquidity%20Solving%20Walkthrough%0A%0AThis%20research%20was%20conducted%20as%20part%20of%20%5BUnite%20DeFi%5D(https%3A%2F%2Fethglobal.com%2Fshowcase%2Fdefiunite-jincubator-g1h0p)%0A%0A%3Ciframe%0A%20%20src%3D%22https%3A%2F%2Fwww.loom.com%2Fembed%2Fc59e1a9eb2064d4a855cabab3941a514%22%0A%20%20frameborder%3D%220%22%0A%20%20allowfullscreen%0A%20%20allow%3D%22autoplay%3B%20encrypted-media%22%0A%20%20style%3D%7B%7B%0A%20%20%20%20width%3A%20%22100%25%22%2C%0A%20%20%20%20height%3A%20%22500px%22%2C%0A%20%20%20%20borderRadius%3A%20%2212px%22%2C%0A%20%20%7D%7D%0A%2F%3E%0A%0AThe%20following%20Actions%20are%20Taken%0A%0A1.%20Mary%20has%20one%20ETH%0A2.%20Chainlink%20Oracle%20has%201ETH%20%3D%202000DAI%0A3.%20Mary%20creates%20a%20an%20order%201ETH%20for%202000DAI%0A4.%20Tabatha%20using%20Tycho%20finds%20Uniswap%20V2%20will%20swap%201ETH%20for%202018DAI%0A5.%20Tabatha%20Takes%20the%20Order%0A6.%20Order%20Settles%0A%0A**Additional%20Notes**%0A%0A-%20%5C*This%20uses%20a%20modified%20version%20of%201inch%20Limit%20Order%20Protocol%20which%20allows%20TychoSwapExecutor%20to%20settle%20the%20Makers%20Funds%0A-%20%5C*%5C*Mary%20approves%201ETH%20to%20be%20used%20by%20Limit-Order-Protocol%20(and%20Tycho%20Swap%20Router)%0A-%20%5C*%5C*Mary%E2%80%99s%201ETH%20is%20used%20for%20the%20swap%20-%20No%20Liquidity%20is%20provided%20by%20Tabatha%20-%20Transaction%20reverts%20if%20%3C%202000%20DAI%20is%20returned%0A-%20%5C*%5C*%5C*Taking%20and%20Settling%20the%20order%20is%20an%20atomic%20transaction%20integrating%20TychoSwapExecutor.sol%20as%20a%20TakerInteraction%20in%20LimitOrderProtocol.sol%0A%0A%7C%20Action%20%7C%20Mary%20Maker%20%7C%20Limit%20Order%20Protocol%20%7C%20Tabatha%20Tycho%20Taker%20%7C%20Jincubator%20Protocol%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Tycho%20Simulation%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20------%20%7C%20----------%20%7C%20--------------------%20%7C%20-------------------%20%7C%20-----------------------------------------------------------------------%20%7C%20-------------------------------------------------------------%20%7C%0A%7C%201%20%20%20%20%20%20%7C%201%20ETH%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%202%20%20%20%20%20%20%7C%201%20ETH%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%203%20%20%20%20%20%20%7C%201ETH%20%20%20%20%20%20%20%7C%20_1ETH%5C*_%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20OrderCalculator.sol%20integrates%20price%20oracles%20for%20creating%20spread%20ordersycho%20Indexing%20and%20Simulation%20(Off%20Chain%20Price%20Discovery)%20%20%20%20%20%7C%0A%7C%205%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%7C%202018DAI%5C*%5C*%20%20%20%20%20%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20TychoExecutor.sol%20executes%20the%20trade%20on%20UniswapV3%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20TychoRouter%20is%20called%20by%20TychoSwapRouter%20to%20execute%20the%20trade%20%7C%0A%7C%206%20%20%20%20%20%20%7C%20200DAI%20%20%20%20%20%7C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%2018DAI%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20LimitOrderProtocol.sol%20sends%20Mary%202000%20DAI%20from%20Tabatha%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%0A%7C%20%20%20%20%20%20%20%20%7C%0A%0A%23%23%20Jincubator%20Limit%20Order%20Protocol%0A%0AThis%20protocol%20implements%20four%20key%20enhancements%20to%20the%20%5B1inch%20Limit%20Order%20Protocol%5D(https%3A%2F%2Fgithub.com%2F1inch%2Flimit-order-protocol)%3A%0A%0A1.%20**Enhanced%20Swap%20Execution**%3A%20%5BTychoSwapExecutor.sol%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fprotocol%2Ftree%2Fmain%2Fsrc%2FTychoSwapExecutor.sol)%20integrates%20%5BTycho%20Execution%5D(https%3A%2F%2Fgithub.com%2Fpropeller-heads%2Ftycho-execution)%20to%20enable%20complex%20swaps%20across%20multiple%20DEXs%20without%20upfront%20liquidity%0A2.%20**Stop%20Loss%20and%20Profit%20Taking%20Orders**%3A%20%5BOracleIntegration.sol%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fprotocol%2Ftree%2Fmain%2Fsrc%2FOracleCalculator.sol)%20Oracle-based%20(starting%20with%20chainlink)%20pricing%20calculator%20for%20advanced%20order%20strategies%0A3.%20**Treasury%20Management**%3A%20%5BRebalancerInteraction.sol%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fprotocol%2Ftree%2Fmain%2Fsrc%2FRebalancerInteraction.sol)%20enables%20makers%20and%20takers%20to%20immediately%20balance%20their%20funds%20to%20a%20treasury%20(and%20moving%20forward%20more%20advanced%20asset%20management%20strategies).%0A4.%20**Resource%20Management**%3A%20%5BCompactInteraction.sol%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fprotocol%2Ftree%2Fmain%2Fsrc%2FCompactInteraction.sol)%20integrates%20the%20%5B1inch%20Limit%20Order%20Protocol%5D(https%3A%2F%2Fgithub.com%2F1inch%2Flimit-order-protocol)%20with%20%5BThe%20Compact%5D(https%3A%2F%2Fgithub.com%2Funiswap%2Fthe-compact)%20for%20%5BERC-6909%5D(https%3A%2F%2Feips.ethereum.org%2FEIPS%2Feip-6909)%20support%20and%20moving%20forward%20integration%20with%20additional%20cross%20chain%20intent%20standards%20such%20as%20%5BERC-7683%5D(https%3A%2F%2Fwww.erc7683.org%2F)%20leveraging%20%5BMandates%20and%20Solver%20Payloads%5D(https%3A%2F%2Fwww.jincubator.com%2Fresearch%2Fsolving%2Fprotocol)%20and%20%5BAdvanced%20Resource%20Locking%5D(https%3A%2F%2Fwww.jincubator.com%2Fresearch%2Fsolving%2Fresources).%0A%0A%23%23%23%20Enhanced%20Swap%20Execution%0A%0AWe%20integrate%20with%20Tycho's%20indexing%2C%20simulation%20and%20execution%20via%20a%20TcyhoSwapExecutor%20which%20allows%20Solvers%20to%20provide%20a%20payload%20with%20complex%20routing%20solutions%20across%20multiple%20liquidity%20protocols.%20The%20design%20for%20United%20Defi%20allows%20the%20taker%20to%20submit%20a%20Payload%20with%20Call%20Data%20which%20will%20be%20executed%20as%20part%20of%20the%20TakerInteraction%20flow.%20This%20allows%2C%20if%20permitted%20by%20the%20maker%2C%20the%20solver%20to%20use%20the%20takers%20tokens%20and%20execute%20the%20trade%20without%20providing%20any%20upfront%20capital.%0A%0A%23%23%23%20Stop%20Loss%20and%20Profit%20Taking%20Orders%0A%0AThe%20OracleCalculator%20extension%20is%20a%20powerful%20addition%20to%20the%201inch%20Limit%20Order%20Protocol%20that%20enables%20dynamic%20pricing%20based%20on%20Chainlink%20oracle%20data.%20This%20extension%20allows%20orders%20to%20be%20filled%20at%20prices%20that%20are%20calculated%20on-chain%20using%20real-time%20oracle%20feeds%2C%20making%20it%20possible%20to%20create%20orders%20that%20automatically%20adjust%20to%20market%20conditions.%0A%0A%23%23%23%20Treasury%20Management%0A%0AImplemented%20as%20an%20IPostInteraction%20the%20RebalancerInteraction%20contract%20allows%20both%20makers%20and%20takers%20to%20instantly%20move%20their%20funds%20to%20their%20Treasury%20of%20choice.%0A%0A%23%23%23%20Resource%20Management%0A%0AWe%20Implemented%20integration%20with%20an%20ERC-6909%20compliant%20locking%20mechanism%20enabling%20advanced%20resource%20management%20capabilities%20and%20laying%20the%20foundation%20to%20extend%20the%201inch%20Limit%20Order%20Protocol%20to%20open%20standards%20such%20as%20ERC-7683.%0A%0A%23%23%20NEAR%20FUSION%2B%20Smart%20Contract%20Development%0A%0ANEAR%20Fusion%2B%20is%20a%20comprehensive%20DeFi%20protocol%20that%20migrates%201inch's%20proven%20Limit%20Order%20Protocol%20and%20Cross-Chain%20Swap%20functionality%20to%20the%20NEAR%20blockchain.%20The%20system%20provides%20two%20primary%20capabilities%3A%20advanced%20limit%20order%20trading%20with%20partial%20fills%20and%20extensible%20features%2C%20and%20atomic%20cross-chain%20swaps%20secured%20by%20time-locked%20escrow%20contracts.%0A%0A%23%23%20Implementation%20Limit%20Order%20Protocol%0A%0A%23%23%23%20Core%20Components%0A%0A-%20**Compact**%3A%20ERC-6909%20enabled%20Chainlink%20calculator%20for%20price%20discovery%0A-%20**ResourceManager**%3A%20Manages%20resource%20locks%20for%20ERC-6909%20integration%0A-%20**TychoSwapExecutor**%3A%20Executes%20complex%20swaps%20using%20Tycho%20Execution%0A-%20**CompactInteraction**%3A%20Post-interaction%20handler%20for%20resource%20allocation%0A-%20**RebalancerInteraction**%3A%20Treasury%20management%20and%20portfolio%20rebalancing%0A-%20**OracleCalculator**%3A%20Price%20oracle%20integration%20for%20advanced%20order%20strategies%0A%0A%23%23%23%20Key%20Features%0A%0A-%20**Resource%20Locking**%3A%20ERC-6909%20compliant%20resource%20management%0A-%20**Multi-DEX%20Execution**%3A%20Cross-platform%20swap%20execution%20via%20Tycho%0A-%20**Advanced%20Order%20Types**%3A%20Stop-loss%20and%20take-profit%20orders%0A-%20**Treasury%20Management**%3A%20Automated%20portfolio%20rebalancing%0A-%20**Oracle%20Integration**%3A%20Chainlink%20price%20feeds%20for%20accurate%20pricing%0A%0A%23%23%23%20Key%20Technology%20Enhancements%0A%0A-%20Solidity%20based%20tests%20including%20a%20migration%20from%20%60OrderUtils.js%60%20to%20solidity%20based%20%5BOrderUtils%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fprotocol%2Ftree%2Fmain%2Ftest%2Futils%2ForderUtils%2FREADME_OrderUtils.md)%0A-%20Solidity%20%60%5E0.8.30%60%20compatibility%20provided%20by%20creating%20an%20interface%20%5BILimitOrderProtocol.sol%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fprotocol%2Ftree%2Fmain%2Fsrc%2Finterfaces%2F1inch%2FILimitOrderProtocol.sol)%20and%20introducing%20%5BLimitOrderProtocolManager%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fprotocol%2Ftree%2Fmain%2Ftest%2Fhelpers%2FLimitOrderProtocolManager.sol)%20for%20testing.%0A%0A%23%23%23%20Architecture%0A%0A!%5BArchitecture%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FByIAaIhwel.png)%0A%0A%23%23%23%20Interactions%0A%0A!%5BInteractions%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FB1XQRU3wex.png)%0A%0A%23%23%20Enhanced%20Swap%20Execution%0A%0A%23%23%23%20Tycho%20Execution%20Flow%0A%0A!%5BTychoFlow%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FHyRf1vnwgl.png)%0A%0A%23%23%23%20Tycho%20Components%0A%0A!%5BTychoComponents%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FHkytJP3Plg.png)%0A%0A%23%23%23%20Actors%0A%0A1.%20Maker%0A%20%20%201.%20Creates%20orders%20specifying%20the%20spread%20price%20they%20are%20looking%20for%20(currently%20using%20chainlink%20Oracle)%0A2.%20Solver%20Service%0A%20%20%201.%20Monitors%201inch%20Intents%20created%0A%20%20%202.%20Monitors%20Liquidity%20Positions%20on%20Chain%20using%20Tycho-indexer%0A%20%20%203.%20Simulates%20Solves%20for%20Orders%20(to%20see%20if%20profitable)%0A%20%20%204.%20Calls%20Resolver%20Contract%20to%20execute%20the%20Swap%0A%20%20%20%20%20%201.%20Solver%20Payload%20-%20encoded%20to%20call%20TychoResolver%20a%20modified%20version%20of%20Tycho%20Execution%0A%20%20%205.%20Calls%20Order%20Fill%20passing%0A%20%20%20%20%20%201.%20target%3A%20TychoResolver%20address%0A%20%20%20%20%20%202.%20interaction%3A%20SolverPayload%0A3.%20Resolver%20Contract%20(modified%20version%20combining%20ResolverCrossChain%20and%20Tycho%20Dispatcher)%0A%20%20%201.%20Called%20by%20LimitOrderProtocol%20as%20part%20of%20Order.fill%0A%20%20%202.%20Executes%20swap%20using%20Makers%20Tokens%0A%20%20%203.%20Provides%20TakerToken%20to%20Relayer%20to%20pass%20back%20to%20Taker%0A%20%20%204.%20Transfers%20excess%20maker%20(or%20taker)%20tokens%20to%20Treasury%0A%0A%23%23%23%20Implementation%20Approach%0A%0A%20%20%20%201.%20TychoFillPredicate.sol%20(Predicate)%3A%20copied%20from%20OracleCalculator.sol%0A%20%20%20%202.%20TychoFillInteraction.sol%20%3A%20copied%20from%20RebalancerInteraction.sol%0A%20%20%20%203.%20TychoResolver.sol%3A%20Copied%20from%20ResolverCrossChain.sol%20and%20Dispatcher.sol%0A%20%20%20%204.%20Tests%20copied%20from%20RebalancerInteraction.t.sol%20and%20enhanced%20with%0A%20%20%20%20%20%20%201.%20Creation%20of%20Swap%20(MakerTokens%20to%20TakerTokens)%20similar%20to%0A%20%20%20%20%20%20%202.%20Call%20of%20Fill%20Contract%20passing%0A%20%20%20%20%20%20%20%20%20%201.%20target%3A%20TychoResolver%20address%0A%20%20%20%20%20%20%20%20%20%202.%20interaction%3A%20SolverPayload%0A%20%20%20%20%20%20%203.%20Checking%20of%20Treasurer%20Balances%20after%20swap%20is%20executed%0A%0A%23%23%23%20Flow%0A%0A%23%23%23%23%20Interactions%0A%0AInteractions%20are%20callbacks%20that%20enable%20the%20execution%20of%20arbitrary%20code%2C%20which%20is%20provided%20by%20the%20maker%E2%80%99s%20order%20or%20taker%E2%80%99s%20fill%20execution.%0A%0AThe%20order%20execution%20logic%20includes%20several%20steps%20that%20also%20involve%20interaction%20calls%3A%0A%0A1.%20Validate%20the%20order%0A2.%20**Call%20the%20maker's%20pre-interaction**%0A3.%20Transfer%20the%20maker's%20asset%20to%20the%20taker%0A4.%20**Call%20the%20taker's%20interaction**%0A5.%20Transfer%20the%20taker's%20asset%20to%20the%20maker%0A6.%20**Call%20the%20maker's%20post-interaction**%0A7.%20Emit%20the%20OrderFilled%20event%0A%0ACalls%20are%20executed%20in%20the%20context%20of%20the%20limit%20order%20protocol.%20The%20target%20contract%20should%20implement%20the%20%60IPreInteraction%60%20or%20%60IPostInteraction%60%20interfaces%20for%20the%20maker's%20pre-%20and%20post-interactions%20and%20the%20%60ITakerInteraction%60%20interface%20for%20the%20taker's%20interaction.%20These%20interfaces%20declare%20the%20single%20callback%20function%20for%20maker%20and%20taker%20interactions%2C%20respectively.%0A%0AHere%20is%20how%20the%20maker%E2%80%99s%20pre-%20%26%20post-%20interactions%20and%20the%20taker%E2%80%99s%20interaction%20are%20defined%20in%20the%20interfaces%3A%0A%0A%60%60%60solidity%0A%2F%2FMaker's%20pre-interaction%0Afunction%20preInteraction(%0A%20%20%20%20%20%20%20%20IOrderMixin.Order%20calldata%20order%2C%0A%20%20%20%20%20%20%20%20bytes32%20orderHash%2C%0A%20%20%20%20%20%20%20%20address%20taker%2C%0A%20%20%20%20%20%20%20%20uint256%20makingAmount%2C%0A%20%20%20%20%20%20%20%20uint256%20takingAmount%2C%0A%20%20%20%20%20%20%20%20uint256%20remainingMakingAmount%2C%0A%20%20%20%20%20%20%20%20bytes%20calldata%20extraData%0A%20%20%20%20)%20external%3B%0A%0A%2F%2FMaker's%20post-interaction%0Afunction%20postInteraction(%0A%20%20%20%20%20%20%20%20IOrderMixin.Order%20calldata%20order%2C%0A%20%20%20%20%20%20%20%20bytes32%20orderHash%2C%0A%20%20%20%20%20%20%20%20address%20taker%2C%0A%20%20%20%20%20%20%20%20uint256%20makingAmount%2C%0A%20%20%20%20%20%20%20%20uint256%20takingAmount%2C%0A%20%20%20%20%20%20%20%20uint256%20remainingMakingAmount%2C%0A%20%20%20%20%20%20%20%20bytes%20calldata%20extraData%0A%20%20%20%20)%20external%3B%0A%0A%2F%2FTaker's%20interaction%0Afunction%20takerInteraction(%0A%20%20%20%20%20%20%20%20IOrderMixin.Order%20calldata%20order%2C%0A%20%20%20%20%20%20%20%20bytes32%20orderHash%2C%0A%20%20%20%20%20%20%20%20address%20taker%2C%0A%20%20%20%20%20%20%20%20uint256%20makingAmount%2C%0A%20%20%20%20%20%20%20%20uint256%20takingAmount%2C%0A%20%20%20%20%20%20%20%20uint256%20remainingMakingAmount%2C%0A%20%20%20%20%20%20%20%20bytes%20calldata%20extraData%0A%20%20%20%20)%20external%20returns(uint256%20offeredTakingAmount)%3B%0A%60%60%60%0A%0A-%20Resolver%20Contract%20executes%20calls%20to%20Tycho%20Dispatcher%20or%20Router%0A-%20Three%20functions%0A%20%20-%20preInteraction%3A%20used%20in%20OracleCalculator%20(to%20ensure%20price%20before%20swap)%0A%20%20-%20takerInteraction%20used%20in%20SwapExecutor%20to%20Execute%20Swap%20by%20Taker%0A%20%20-%20postInteraction%20used%20in%20Rebalancer%20to%20Send%20Funds%20to%20Treasury%0A%0A%23%23%23%20Design%20Questions%0A%0A1.%20**Interface%20Compatibility**%3A%0A%20%20%20-%20How%20will%20the%20TychoResolver%20interface%20be%20defined%20to%20ensure%20compatibility%20with%20the%20LimitOrderProtocol%20bytecode%20deployment%20approach%3F%0A%20%20%20-%20Should%20we%20create%20a%20custom%20interface%20for%20TychoResolver%20or%20use%20the%20concrete%20type%20like%20the%20working%20project%3F%0A%0A2.%20**Predicate%20Logic**%3A%0A%20%20%20-%20What%20predicate%20logic%20will%20TychoFill.sol%20use%3F%20Will%20it%20be%20similar%20to%20OracleCalculator.sol%20with%20price%20comparisons%3F%0A%20%20%20-%20How%20will%20the%20predicate%20determine%20when%20a%20solve%20is%20profitable%20vs.%20when%20it%20should%20execute%3F%0A%0A3.%20**Solver%20Payload%20Structure**%3A%0A%20%20%20-%20What%20data%20structure%20will%20the%20SolverPayload%20contain%3F%20Will%20it%20include%20target%20addresses%2C%20amounts%2C%20and%20execution%20parameters%3F%0A%20%20%20-%20How%20will%20the%20payload%20be%20encoded%2Fdecoded%20between%20the%20Solver%20Service%20and%20TychoResolver%3F%0A%0A4.%20**Treasury%20Integration**%3A%0A%20%20%20-%20How%20will%20excess%20tokens%20be%20calculated%20and%20transferred%20to%20Treasury%3F%0A%20%20%20-%20What%20mechanism%20will%20prevent%20MEV%20attacks%20on%20the%20treasury%20transfers%3F%0A%0A5.%20**Error%20Handling**%3A%0A%20%20%20-%20How%20will%20failed%20solves%20be%20handled%3F%20Will%20orders%20be%20cancelled%20or%20retried%3F%0A%20%20%20-%20What%20happens%20if%20the%20TychoResolver%20execution%20fails%20during%20the%20order%20fill%3F%0A%0A6.%20**Gas%20Optimization**%3A%0A%20%20%20-%20How%20will%20the%20solver%20service%20optimize%20gas%20costs%20across%20multiple%20orders%3F%0A%20%20%20-%20Will%20batch%20processing%20be%20implemented%20for%20multiple%20orders%3F%0A%0A7.%20**Oracle%20Integration**%3A%0A%20%20%20-%20Will%20TychoFill%20use%20the%20same%20Chainlink%20oracle%20approach%20as%20OracleCalculator%20%3F%0A%20%20%20-%20How%20will%20price%20feeds%20be%20validated%20and%20updated%3F%0A%0A8.%20**Cross-Chain%20Considerations**%3A%0A%20%20%20-%20How%20will%20the%20ResolverCrossChain%20functionality%20be%20integrated%20with%20Tycho%20Dispatcher%3F%0A%20%20%20-%20What%20bridge%20mechanisms%20will%20be%20used%20for%20cross-chain%20swaps%3F%0A%0A%23%23%23%20Implementation%20Plan%0A%0A1.%20**Phase%201%3A%20Core%20Contract%20Development**%0A%20%20%20-%20Create%20%60TychoFill.sol%60%20based%20on%20%60OracleCalculator.sol%60%0A%20%20%20%20%20-%20Implement%20predicate%20logic%20for%20profitable%20solve%20detection%0A%20%20%20%20%20-%20Add%20Tycho-specific%20price%20calculation%20methods%0A%20%20%20%20%20-%20Ensure%20interface%20compatibility%20with%20LimitOrderProtocol%0A%0A%20%20%20-%20Create%20%60TychoFillInteraction.sol%60%20based%20on%20%60RebalancerInteraction.sol%60%0A%20%20%20%20%20-%20Implement%20post-interaction%20logic%20for%20treasury%20transfers%0A%20%20%20%20%20-%20Add%20balance%20validation%20and%20excess%20token%20calculation%0A%20%20%20%20%20-%20Integrate%20with%20TychoResolver%20for%20swap%20execution%0A%0A2.%20**Phase%202%3A%20Resolver%20Contract%20Development**%0A%20%20%20-%20Create%20%60TychoResolver.sol%60%20combining%20ResolverCrossChain%20and%20Dispatcher%20functionality%0A%20%20%20%20%20-%20Implement%20swap%20execution%20using%20maker%20tokens%0A%20%20%20%20%20-%20Add%20taker%20token%20provision%20for%20relayer%0A%20%20%20%20%20-%20Integrate%20treasury%20transfer%20logic%0A%20%20%20%20%20-%20Ensure%20proper%20error%20handling%20and%20revert%20conditions%0A%0A3.%20**Phase%203%3A%20Testing%20Framework**%0A%20%20%20-%20Create%20comprehensive%20test%20suite%20based%20on%20%60RebalancerInteraction.t.sol%60%0A%20%20%20%20%20-%20Test%20order%20creation%20with%20Tycho-specific%20predicates%0A%20%20%20%20%20-%20Test%20solver%20payload%20encoding%2Fdecoding%0A%20%20%20%20%20-%20Test%20treasury%20balance%20validation%0A%20%20%20%20%20-%20Test%20cross-chain%20swap%20scenarios%0A%20%20%20%20%20-%20Test%20error%20conditions%20and%20edge%20cases%0A%0A4.%20**Phase%204%3A%20Integration%20Testing**%0A%20%20%20-%20Test%20end-to-end%20flow%20from%20order%20creation%20to%20execution%0A%20%20%20-%20Validate%20predicate%20execution%20with%20bytecode%20deployment%0A%20%20%20-%20Test%20solver%20service%20integration%20with%20Tycho-indexer%0A%20%20%20-%20Verify%20treasury%20transfers%20and%20balance%20calculations%0A%0A5.%20**Phase%205%3A%20Optimization%20and%20Security**%0A%20%20%20-%20Implement%20gas%20optimization%20strategies%0A%20%20%20-%20Add%20comprehensive%20error%20handling%0A%20%20%20-%20Implement%20MEV%20protection%20mechanisms%0A%20%20%20-%20Add%20monitoring%20and%20logging%20capabilities%0A%0A6.%20**Phase%206%3A%20Deployment%20and%20Monitoring**%0A%20%20%20-%20Deploy%20contracts%20with%20proper%20bytecode%20generation%0A%20%20%20-%20Set%20up%20monitoring%20for%20solver%20service%0A%20%20%20-%20Implement%20alerting%20for%20failed%20solves%0A%20%20%20-%20Add%20analytics%20for%20treasury%20performance%0A%0A%23%23%20Stop%20Loss%20and%20Profit%20Taking%20Orders%0A%0A%23%23%23%20Oracle%20Example%20Order%0A%0A!%5BOracleExampleOrder%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FByKclv3Del.png)%0A%0A%23%23%23%20Oracle%20Order%20Integration%0A%0A!%5BOracleIntegration%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2Fry6slPnvxg.png)%0A%0A%23%23%23%20Overview%0A%0AThe%20OracleCalculator%20extension%20is%20a%20powerful%20addition%20to%20the%201inch%20Limit%20Order%20Protocol%20that%20enables%20dynamic%20pricing%20based%20on%20Chainlink%20oracle%20data.%20This%20extension%20allows%20orders%20to%20be%20filled%20at%20prices%20that%20are%20calculated%20on-chain%20using%20real-time%20oracle%20feeds%2C%20making%20it%20possible%20to%20create%20orders%20that%20automatically%20adjust%20to%20market%20conditions.%0A%0A%23%23%23%201.%20What%20the%20OracleCalculator%20Extension%20Does%0A%0AThe%20OracleCalculator%20extension%20serves%20as%20an%20%60IAmountGetter%60%20implementation%20that%3A%0A%0A-%20**Calculates%20dynamic%20exchange%20rates**%20using%20Chainlink%20oracle%20data%0A-%20**Supports%20both%20single%20and%20double%20oracle%20pricing**%20for%20different%20token%20pairs%0A-%20**Applies%20configurable%20spreads**%20to%20provide%20maker%2Ftaker%20incentives%0A-%20**Handles%20inverse%20pricing**%20for%20tokens%20quoted%20in%20different%20base%20currencies%0A-%20**Validates%20oracle%20freshness**%20to%20ensure%20price%20data%20is%20current%20(within%204%20hours)%0A-%20**Integrates%20with%20predicates**%20for%20conditional%20order%20execution%0A%0A%23%23%23%23%20Key%20Features%3A%0A%0A1.%20**Single%20Oracle%20Pricing**%3A%20Uses%20one%20oracle%20to%20price%20a%20token%20relative%20to%20ETH%20or%20USD%0A2.%20**Double%20Oracle%20Pricing**%3A%20Uses%20two%20oracles%20to%20price%20custom%20token%20pairs%20(e.g.%2C%20INCH%2FDAI)%0A3.%20**Spread%20Application**%3A%20Applies%20maker%20and%20taker%20spreads%20to%20create%20profitable%20order%20books%0A4.%20**Inverse%20Flag%20Support**%3A%20Handles%20cases%20where%20oracle%20prices%20need%20to%20be%20inverted%0A5.%20**Oracle%20Freshness%20Check**%3A%20Ensures%20oracle%20data%20is%20not%20stale%20(within%204%20hours%20TTL)%0A%0A%23%23%23%202.%20Types%20of%20Orders%20That%20Can%20Be%20Created%0A%0A%23%23%23%23%20A.%20Single%20Oracle%20Orders%0A%0AOrders%20that%20use%20one%20Chainlink%20oracle%20to%20price%20a%20token%20relative%20to%20ETH%20or%20USD%3A%0A%0A-%20**ETH%20%E2%86%92%20DAI**%3A%20Using%20DAI%2FETH%20oracle%0A-%20**DAI%20%E2%86%92%20ETH**%3A%20Using%20DAI%2FETH%20oracle%20with%20inverse%20flag%0A-%20**WETH%20%E2%86%92%20USDC**%3A%20Using%20USDC%2FETH%20oracle%0A-%20**USDC%20%E2%86%92%20WETH**%3A%20Using%20USDC%2FETH%20oracle%20with%20inverse%20flag%0A%0A%23%23%23%23%20B.%20Double%20Oracle%20Orders%0A%0AOrders%20that%20use%20two%20oracles%20to%20price%20custom%20token%20pairs%3A%0A%0A-%20**INCH%20%E2%86%92%20DAI**%3A%20Using%20INCH%2FETH%20and%20DAI%2FETH%20oracles%0A-%20**DAI%20%E2%86%92%20INCH**%3A%20Using%20DAI%2FETH%20and%20INCH%2FETH%20oracles%0A-%20**Custom%20Token%20Pairs**%3A%20Any%20combination%20of%20tokens%20with%20available%20oracles%0A%0A%23%23%23%23%20C.%20Conditional%20Orders%20(Predicates)%0A%0AOrders%20that%20only%20execute%20under%20specific%20oracle%20conditions%3A%0A%0A-%20**Stop-Loss%20Orders**%3A%20Execute%20only%20when%20price%20falls%20below%20threshold%0A-%20**Take-Profit%20Orders**%3A%20Execute%20only%20when%20price%20rises%20above%20threshold%0A-%20**Range%20Orders**%3A%20Execute%20only%20within%20specific%20price%20ranges%0A%0A%23%23%23%203.%20Fields%20Passed%20to%20the%20Extension%20and%20How%20They%20Are%20Populated%0A%0A%23%23%23%23%20Extension%20Data%20Structure%0A%0AThe%20extension%20data%20is%20passed%20as%20%60bytes%20calldata%20extraData%60%20to%20the%20%60getMakingAmount%60%20and%20%60getTakingAmount%60%20functions%3A%0A%0A%60%60%60solidity%0Afunction%20getMakingAmount(%0A%20%20%20%20IOrderMixin.Order%20calldata%20order%2C%0A%20%20%20%20bytes%20calldata%20extension%2C%0A%20%20%20%20bytes32%20orderHash%2C%0A%20%20%20%20address%20taker%2C%0A%20%20%20%20uint256%20takingAmount%2C%0A%20%20%20%20uint256%20remainingMakingAmount%2C%0A%20%20%20%20bytes%20calldata%20extraData%20%20%2F%2F%20%E2%86%90%20Extension%20data%20here%0A)%20external%20view%20returns%20(uint256)%0A%60%60%60%0A%0A%23%23%23%23%20Single%20Oracle%20Data%20Format%0A%0AFor%20single%20oracle%20pricing%2C%20the%20%60extraData%60%20contains%3A%0A%0A%60%60%60%0A%5B1%20byte%20flags%5D%5B20%20bytes%20oracle%20address%5D%5B32%20bytes%20spread%5D%0A%60%60%60%0A%0A**Flags%20Byte%3A**%0A%0A-%20Bit%207%20(0x80)%3A%20Inverse%20flag%20-%20if%20set%2C%20invert%20the%20oracle%20price%0A-%20Bit%206%20(0x40)%3A%20Double%20price%20flag%20-%20if%20set%2C%20use%20double%20oracle%20mode%0A-%20Bits%200-5%3A%20Reserved%0A%0A**Example%3A**%0A%0A%60%60%60solidity%0A%2F%2F%20DAI%2FETH%20oracle%20at%200x1234...%20with%200.99%20spread%2C%20no%20inverse%0Abytes%20memory%20data%20%3D%20abi.encodePacked(%0A%20%20%20%20bytes1(0x00)%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20flags%3A%20no%20inverse%2C%20no%20double%20price%0A%20%20%20%20address(daiOracle)%2C%20%20%20%20%20%20%2F%2F%20oracle%20address%0A%20%20%20%20uint256(990000000)%20%20%20%20%20%20%20%2F%2F%20spread%3A%200.99%20(990000000%20%2F%201e9)%0A)%3B%0A%60%60%60%0A%0A%23%23%23%23%20Double%20Oracle%20Data%20Format%0A%0AFor%20double%20oracle%20pricing%2C%20the%20%60extraData%60%20contains%3A%0A%0A%60%60%60%0A%5B1%20byte%20flags%5D%5B20%20bytes%20oracle1%5D%5B20%20bytes%20oracle2%5D%5B32%20bytes%20decimalsScale%5D%5B32%20bytes%20spread%5D%0A%60%60%60%0A%0A**Example%3A**%0A%0A%60%60%60solidity%0A%2F%2F%20INCH%2FDAI%20pricing%20using%20INCH%2FETH%20and%20DAI%2FETH%20oracles%0Abytes%20memory%20data%20%3D%20abi.encodePacked(%0A%20%20%20%20bytes1(0x40)%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20flags%3A%20double%20price%20mode%0A%20%20%20%20address(inchOracle)%2C%20%20%20%20%20%2F%2F%20oracle1%3A%20INCH%2FETH%0A%20%20%20%20address(daiOracle)%2C%20%20%20%20%20%20%2F%2F%20oracle2%3A%20DAI%2FETH%0A%20%20%20%20int256(0)%2C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20decimalsScale%3A%20no%20adjustment%0A%20%20%20%20uint256(1010000000)%20%20%20%20%20%2F%2F%20spread%3A%201.01%20(1010000000%20%2F%201e9)%0A)%3B%0A%60%60%60%0A%0A%23%23%23%23%20How%20Fields%20Are%20Populated%0A%0A1.%20**Oracle%20Addresses**%3A%20Retrieved%20from%20Chainlink's%20oracle%20registry%20or%20deployment%0A2.%20**Spreads**%3A%20Calculated%20based%20on%20desired%20maker%2Ftaker%20incentives%20(typically%200.99%20for%20maker%2C%201.01%20for%20taker)%0A3.%20**Flags**%3A%20Set%20based%20on%20pricing%20requirements%20(inverse%20needed%2C%20double%20oracle%20needed)%0A4.%20**Decimals%20Scale**%3A%20Used%20to%20adjust%20for%20different%20oracle%20decimal%20precisions%0A%0A%23%23%23%204.%20Test%20Case%20Walkthrough%0A%0A%23%23%23%23%20Test%20Case%201%3A%20ETH%20%E2%86%92%20DAI%20Chainlink%20Order%0A%0A**Scenario**%3A%20Maker%20wants%20to%20sell%201%20ETH%20for%20DAI%20at%20oracle%20price%20with%20spreads%0A%0A**Order%20Details%3A**%0A%0A-%20Maker%3A%20makerAddr%0A-%20Taker%3A%20takerAddr%0A-%20Maker%20Asset%3A%20WETH%20(1%20ether)%0A-%20Taker%20Asset%3A%20DAI%20(4000%20ether)%0A-%20Oracle%3A%20DAI%2FETH%20at%200.00025%20ETH%20per%20DAI%20(1%20ETH%20%3D%204000%20DAI)%0A%0A**Extension%20Data%3A**%0A%0A%60%60%60solidity%0A%2F%2F%20Making%20amount%20data%20(maker%20spread%3A%200.99)%0Abytes%20memory%20makingAmountData%20%3D%20abi.encodePacked(%0A%20%20%20%20chainlinkCalcAddress%2C%20%20%20%20%2F%2F%20Calculator%20address%0A%20%20%20%20bytes1(0x00)%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20No%20inverse%20flag%0A%20%20%20%20oracleAddress%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20DAI%20oracle%0A%20%20%20%20uint256(990000000)%20%20%20%20%20%20%20%2F%2F%200.99%20spread%0A)%3B%0A%0A%2F%2F%20Taking%20amount%20data%20(taker%20spread%3A%201.01)%0Abytes%20memory%20takingAmountData%20%3D%20abi.encodePacked(%0A%20%20%20%20chainlinkCalcAddress%2C%20%20%20%20%2F%2F%20Calculator%20address%0A%20%20%20%20bytes1(0x80)%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Inverse%20flag%20set%0A%20%20%20%20oracleAddress%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20DAI%20oracle%0A%20%20%20%20uint256(1010000000)%20%20%20%20%20%2F%2F%201.01%20spread%0A)%3B%0A%60%60%60%0A%0A**Execution%20Flow%3A**%0A%0A1.%20Taker%20calls%20%60fillOrderArgs%60%20with%204000%20DAI%0A2.%20Protocol%20calls%20%60getTakingAmount%60%20with%204000%20DAI%0A3.%20Calculator%20applies%201.01%20spread%3A%204000%20%5C*%201.01%20%3D%204040%20DAI%0A4.%20Protocol%20calls%20%60getMakingAmount%60%20with%204040%20DAI%0A5.%20Calculator%20applies%200.99%20spread%3A%204040%20%5C*%200.99%20%2F%204000%20%3D%200.99%20ETH%0A6.%20Order%20executes%3A%20taker%20receives%200.99%20ETH%2C%20maker%20receives%204000%20DAI%0A%0A**Result**%3A%20Taker%20pays%204000%20DAI%2C%20receives%200.99%20ETH%20(effective%20rate%3A%201%20ETH%20%3D%204040.4%20DAI)%0A%0A%23%23%23%23%20Test%20Case%202%3A%20DAI%20%E2%86%92%20ETH%20Chainlink%20Order%0A%0A**Scenario**%3A%20Maker%20wants%20to%20sell%204000%20DAI%20for%20ETH%20at%20oracle%20price%0A%0A**Order%20Details%3A**%0A%0A-%20Maker%3A%20makerAddr%0A-%20Taker%3A%20takerAddr%0A-%20Maker%20Asset%3A%20DAI%20(4000%20ether)%0A-%20Taker%20Asset%3A%20WETH%20(1%20ether)%0A-%20Oracle%3A%20DAI%2FETH%20at%200.00025%20ETH%20per%20DAI%0A%0A**Extension%20Data%3A**%0A%0A%60%60%60solidity%0A%2F%2F%20Making%20amount%20data%20(inverse%20%2B%20maker%20spread)%0Abytes%20memory%20makingAmountData%20%3D%20abi.encodePacked(%0A%20%20%20%20chainlinkCalcAddress%2C%0A%20%20%20%20bytes1(0x80)%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Inverse%20flag%0A%20%20%20%20oracleAddress%2C%0A%20%20%20%20uint256(990000000)%20%20%20%20%20%20%20%2F%2F%200.99%20spread%0A)%3B%0A%0A%2F%2F%20Taking%20amount%20data%20(no%20inverse%20%2B%20taker%20spread)%0Abytes%20memory%20takingAmountData%20%3D%20abi.encodePacked(%0A%20%20%20%20chainlinkCalcAddress%2C%0A%20%20%20%20bytes1(0x00)%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20No%20inverse%20flag%0A%20%20%20%20oracleAddress%2C%0A%20%20%20%20uint256(1010000000)%20%20%20%20%20%2F%2F%201.01%20spread%0A)%3B%0A%60%60%60%0A%0A**Execution%20Flow%3A**%0A%0A1.%20Taker%20calls%20with%20%60makingAmount%60%20flag%20set%20to%20true%0A2.%20Protocol%20calls%20%60getMakingAmount%60%20with%204000%20DAI%0A3.%20Calculator%20applies%20inverse%20%2B%200.99%20spread%3A%204000%20%5C*%200.99%20%2F%204000%20%3D%200.99%20ETH%0A4.%20Protocol%20calls%20%60getTakingAmount%60%20with%200.99%20ETH%0A5.%20Calculator%20applies%201.01%20spread%3A%200.99%20%5C*%201.01%20%3D%201.01%20ETH%0A6.%20Order%20executes%3A%20taker%20receives%204000%20DAI%2C%20maker%20receives%201.01%20ETH%0A%0A**Result**%3A%20Taker%20pays%201.01%20ETH%2C%20receives%204000%20DAI%20(effective%20rate%3A%201%20ETH%20%3D%203960.4%20DAI)%0A%0A%23%23%23%23%20Test%20Case%203%3A%20INCH%20%E2%86%92%20DAI%20Double%20Oracle%20Order%0A%0A**Scenario**%3A%20Maker%20wants%20to%20sell%20100%20INCH%20for%20DAI%20using%20double%20oracle%20pricing%0A%0A**Order%20Details%3A**%0A%0A-%20Maker%3A%20makerAddr%0A-%20Taker%3A%20takerAddr%0A-%20Maker%20Asset%3A%20INCH%20(100%20ether)%0A-%20Taker%20Asset%3A%20DAI%20(632%20ether)%0A-%20Oracles%3A%20INCH%2FETH%20(0.0001577615249227853%20ETH)%20and%20DAI%2FETH%20(0.00025%20ETH)%0A%0A**Extension%20Data%3A**%0A%0A%60%60%60solidity%0A%2F%2F%20Making%20amount%20data%20(double%20oracle%20%2B%20maker%20spread)%0Abytes%20memory%20makingAmountData%20%3D%20abi.encodePacked(%0A%20%20%20%20chainlinkCalcAddress%2C%0A%20%20%20%20bytes1(0x40)%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Double%20price%20flag%0A%20%20%20%20address(daiOracle)%2C%20%20%20%20%20%20%2F%2F%20Oracle1%3A%20DAI%2FETH%0A%20%20%20%20address(inchOracle)%2C%20%20%20%20%20%2F%2F%20Oracle2%3A%20INCH%2FETH%0A%20%20%20%20int256(0)%2C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20No%20decimals%20adjustment%0A%20%20%20%20uint256(990000000)%20%20%20%20%20%20%20%2F%2F%200.99%20spread%0A)%3B%0A%0A%2F%2F%20Taking%20amount%20data%20(double%20oracle%20%2B%20taker%20spread)%0Abytes%20memory%20takingAmountData%20%3D%20abi.encodePacked(%0A%20%20%20%20chainlinkCalcAddress%2C%0A%20%20%20%20bytes1(0x40)%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Double%20price%20flag%0A%20%20%20%20address(inchOracle)%2C%20%20%20%20%20%2F%2F%20Oracle1%3A%20INCH%2FETH%0A%20%20%20%20address(daiOracle)%2C%20%20%20%20%20%20%2F%2F%20Oracle2%3A%20DAI%2FETH%0A%20%20%20%20int256(0)%2C%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20No%20decimals%20adjustment%0A%20%20%20%20uint256(1010000000)%20%20%20%20%20%2F%2F%201.01%20spread%0A)%3B%0A%60%60%60%0A%0A**Execution%20Flow%3A**%0A%0A1.%20Taker%20calls%20with%20%60makingAmount%60%20flag%20set%20to%20true%0A2.%20Protocol%20calls%20%60getMakingAmount%60%20with%20100%20INCH%0A3.%20Calculator%20applies%20double%20oracle%20calculation%3A%0A%20%20%20-%20INCH%20price%20in%20ETH%3A%200.0001577615249227853%0A%20%20%20-%20DAI%20price%20in%20ETH%3A%200.00025%0A%20%20%20-%20INCH%2FDAI%20rate%3A%200.0001577615249227853%20%2F%200.00025%20%3D%200.631046%0A%20%20%20-%20With%200.99%20spread%3A%20100%20_%200.631046%20_%200.99%20%3D%2062.47%20DAI%0A4.%20Protocol%20calls%20%60getTakingAmount%60%20with%2062.47%20DAI%0A5.%20Calculator%20applies%20inverse%20calculation%20with%201.01%20spread%0A6.%20Order%20executes%20with%20calculated%20amounts%0A%0A**Result**%3A%20Complex%20pricing%20based%20on%20two%20oracle%20feeds%20with%20spread%20adjustments%0A%0A%23%23%23%23%20Test%20Case%204%3A%20Stop-Loss%20Order%20with%20Predicate%0A%0A**Scenario**%3A%20Maker%20wants%20to%20sell%20INCH%20for%20DAI%20only%20if%20INCH%2FDAI%20price%20falls%20below%206.32%0A%0A**Order%20Details%3A**%0A%0A-%20Maker%3A%20makerAddr%0A-%20Taker%3A%20takerAddr%0A-%20Maker%20Asset%3A%20INCH%20(100%20ether)%0A-%20Taker%20Asset%3A%20DAI%20(631%20ether)%0A-%20Predicate%3A%20INCH%2FDAI%20price%20%3C%206.32%0A%0A**Predicate%20Construction%3A**%0A%0A%60%60%60solidity%0A%2F%2F%20Build%20price%20call%20for%20predicate%0Abytes%20memory%20priceCall%20%3D%20abi.encodeWithSelector(%0A%20%20%20%20OracleCalculator%20.doublePrice.selector%2C%0A%20%20%20%20inchOracle%2C%20%20%20%20%2F%2F%20INCH%2FETH%20oracle%0A%20%20%20%20daiOracle%2C%20%20%20%20%20%2F%2F%20DAI%2FETH%20oracle%0A%20%20%20%20int256(0)%2C%20%20%20%20%20%2F%2F%20No%20decimals%20adjustment%0A%20%20%20%201%20ether%20%20%20%20%20%20%20%20%2F%2F%20Base%20amount%0A)%3B%0A%0A%2F%2F%20Build%20predicate%20call%0Abytes%20memory%20predicate%20%3D%20abi.encodeWithSelector(%0A%20%20%20%20swap.lt.selector%2C%20%20%20%20%20%20%20%20%2F%2F%20Less%20than%20comparison%0A%20%20%20%206.32%20ether%2C%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Threshold%3A%206.32%0A%20%20%20%20abi.encodeWithSelector(%0A%20%20%20%20%20%20%20%20swap.arbitraryStaticCall.selector%2C%0A%20%20%20%20%20%20%20%20address(oracleCalculator%20)%2C%0A%20%20%20%20%20%20%20%20priceCall%0A%20%20%20%20)%0A)%3B%0A%60%60%60%0A%0A**Execution%20Flow%3A**%0A%0A1.%20Order%20fill%20is%20attempted%0A2.%20Protocol%20evaluates%20predicate%20before%20execution%0A3.%20Predicate%20calls%20%60OracleCalculator%20.doublePrice()%60%20with%20oracle%20data%0A4.%20Calculated%20INCH%2FDAI%20price%20is%20compared%20to%206.32%20threshold%0A5.%20If%20price%20%3C%206.32%3A%20order%20executes%20normally%0A6.%20If%20price%20%E2%89%A5%206.32%3A%20order%20reverts%20with%20predicate%20failure%0A%0A**Result**%3A%20Order%20only%20executes%20when%20INCH%2FDAI%20price%20is%20below%20the%20specified%20threshold%0A%0A%23%23%23%23%20Test%20Case%205%3A%20Simple%20Order%20Without%20Extension%0A%0A**Scenario**%3A%20Basic%20order%20without%20any%20Chainlink%20integration%0A%0A**Order%20Details%3A**%0A%0A-%20Maker%3A%20makerAddr%0A-%20Taker%3A%20takerAddr%0A-%20Maker%20Asset%3A%20WETH%20(1%20ether)%0A-%20Taker%20Asset%3A%20DAI%20(4000%20ether)%0A-%20No%20extensions%20or%20predicates%0A%0A**Execution%20Flow%3A**%0A%0A1.%20Taker%20calls%20%60fillOrderArgs%60%20with%204000%20DAI%0A2.%20No%20extension%20data%20provided%0A3.%20Protocol%20uses%20default%20proportional%20calculation%0A4.%20Order%20executes%20at%20fixed%201%3A4000%20ratio%0A%0A**Result**%3A%20Simple%20fixed-rate%20order%20execution%20without%20dynamic%20pricing%0A%0A%23%23%23%20Key%20Implementation%20Details%0A%0A%23%23%23%23%20Oracle%20Freshness%20Check%0A%0A%60%60%60solidity%0Aif%20(updatedAt%20%2B%20_ORACLE_TTL%20%3C%20block.timestamp)%20revert%20StaleOraclePrice()%3B%0A%60%60%60%0A%0A-%20Ensures%20oracle%20data%20is%20not%20older%20than%204%20hours%0A-%20Prevents%20execution%20with%20stale%20price%20data%0A%0A%23%23%23%23%20Spread%20Application%0A%0A%60%60%60solidity%0Areturn%20spread%20*%20amount%20*%20latestAnswer.toUint256()%20%2F%20(10%20**%20oracle.decimals())%20%2F%20_SPREAD_DENOMINATOR%3B%0A%60%60%60%0A%0A-%20Spreads%20are%20applied%20as%20multipliers%20(e.g.%2C%20990000000%20%3D%200.99)%0A-%20%60_SPREAD_DENOMINATOR%20%3D%201e9%60%20for%209-decimal%20precision%0A%0A%23%23%23%23%20Double%20Oracle%20Calculation%0A%0A%60%60%60solidity%0Aresult%20%3D%20amount%20*%20latestAnswer1.toUint256()%3B%0Aif%20(decimalsScale%20%3E%200)%20%7B%0A%20%20%20%20result%20*%3D%2010%20**%20decimalsScale.toUint256()%3B%0A%7D%20else%20if%20(decimalsScale%20%3C%200)%20%7B%0A%20%20%20%20result%20%2F%3D%2010%20**%20(-decimalsScale).toUint256()%3B%0A%7D%0Aresult%20%2F%3D%20latestAnswer2.toUint256()%3B%0A%60%60%60%0A%0A-%20Calculates%20cross-oracle%20pricing%20for%20custom%20token%20pairs%0A-%20Handles%20decimal%20precision%20adjustments%20between%20oracles%0A%0AThis%20extension%20enables%20sophisticated%20DeFi%20applications%20that%20can%20automatically%20adjust%20to%20market%20conditions%20while%20providing%20liquidity%20providers%20with%20profitable%20spreads.%0A%0A%23%23%20Treasury%20Management%0A%0A%23%23%23%20Treasury%20Management%20Flow%0A%0A!%5BTreasuryInteraction%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FBkDBWwhDee.png)%0A%0A%23%23%23%20Rebalancer%20Requirements%0A%0A1.%20Create%20an%20Interaction%20Contract%20called%20RebalancerInteraction.sol%20(in%20the%20src%20directory)%0A2.%20Create%20a%20test%20contract%20called%20RebalancerInteraction.t.sol%20(in%20the%20test%20directory)%0A3.%20In%20RebalancerInteraction.t.sol%0A%20%20%201.%20Create%20test%20scenarios%20the%20same%20as%20in%20OracleCalculator%20.t.sol%0A%20%20%202.%20Add%20to%20that%20an%20Interaction%20using%20RebalancerInteraction.sol%20which%0A%20%20%20%20%20%201.%20Takes%20the%20output%20tokens%20the%20taker%20receives%0A%20%20%20%20%20%202.%20Transfers%20them%20to%20a%20third%20wallet%20(addr3)%20which%20is%20a%20treasurer%0A%20%20%20%20%20%203.%20If%20the%20transfer%20fails%20reject%20the%20order.%0A%0A%23%23%23%20Rebalancer%20Implementation%0A%0AThe%20Rebalancer%20implementation%20has%20been%20successfully%20completed%20with%20the%20following%20components%3A%0A%0A%23%23%23%201.%20RebalancerInteraction.sol%20(src%20directory)%0A%0A**Purpose**%3A%20Post-interaction%20contract%20that%20transfers%20output%20tokens%20to%20a%20treasurer%20wallet%20after%20successful%20order%20execution.%0A%0A**Key%20Features**%3A%0A%0A-%20Implements%20%60IPostInteraction%60%20interface%20for%20Limit%20Order%20Protocol%20integration%0A-%20Transfers%20the%20taker's%20received%20tokens%20(maker%20asset)%20to%20a%20designated%20treasurer%20address%0A-%20Uses%20%60SafeERC20%60%20for%20secure%20token%20transfers%20with%20proper%20error%20handling%0A-%20Reverts%20the%20entire%20order%20if%20transfer%20fails%2C%20ensuring%20atomic%20execution%0A-%20Emits%20%60TokensTransferredToTreasurer%60%20events%20for%20successful%20transfers%0A-%20Validates%20treasurer%20address%20in%20constructor%20to%20prevent%20zero%20address%20usage%0A%0A**Core%20Functionality**%3A%0A%0A%60%60%60solidity%0Afunction%20postInteraction(%0A%20%20%20%20IOrderMixin.Order%20calldata%20order%2C%0A%20%20%20%20bytes32%20orderHash%2C%0A%20%20%20%20address%20taker%2C%0A%20%20%20%20uint256%20makingAmount%2C%0A%20%20%20%20uint256%20takingAmount%2C%0A%20%20%20%20uint256%20remainingMakingAmount%2C%0A%20%20%20%20bytes%20calldata%20extraData%0A)%20external%20override%20%7B%0A%20%20%20%20address%20outputToken%20%3D%20order.makerAsset%3B%0A%20%20%20%20uint256%20outputAmount%20%3D%20makingAmount%3B%0A%0A%20%20%20%20try%20IERC20(outputToken).safeTransferFrom(taker%2C%20treasurer%2C%20outputAmount)%20%7B%0A%20%20%20%20%20%20%20%20emit%20TokensTransferredToTreasurer(outputToken%2C%20taker%2C%20treasurer%2C%20outputAmount)%3B%0A%20%20%20%20%7D%20catch%20%7B%0A%20%20%20%20%20%20%20%20revert%20TransferFailed()%3B%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A%23%23%23%202.%20RebalancerInteraction.t.sol%20(test%20directory)%0A%0A**Purpose**%3A%20Comprehensive%20test%20suite%20that%20replicates%20all%20OracleCalculator%20scenarios%20with%20added%20treasurer%20functionality.%0A%0A**Test%20Coverage**%3A%0A%0A-%20**Single%20Oracle%20Orders**%3A%20ETH%E2%86%92DAI%2C%20DAI%E2%86%92ETH%20with%20treasurer%20receiving%20output%20tokens%0A-%20**Double%20Oracle%20Orders**%3A%20INCH%E2%86%92DAI%20with%20complex%20pricing%20and%20treasurer%20transfer%0A-%20**Conditional%20Orders**%3A%20Stop-loss%20orders%20with%20predicate%20validation%20and%20treasurer%20transfer%0A-%20**Simple%20Orders**%3A%20Basic%20orders%20without%20Chainlink%20but%20with%20treasurer%20transfer%0A-%20**Failure%20Scenarios**%3A%20Tests%20unauthorized%20transfers%20that%20should%20revert%0A%0A**Test%20Scenarios%20Implemented**%3A%0A%0A1.%20%60test_eth_to_dai_chainlink_order_with_rebalancer()%60%20-%20Single%20oracle%20ETH%E2%86%92DAI%0A2.%20%60test_dai_to_eth_chainlink_order_with_rebalancer()%60%20-%20Single%20oracle%20DAI%E2%86%92ETH%20with%20inverse%0A3.%20%60test_dai_to_1inch_chainlink_order_takingAmountData_with_rebalancer()%60%20-%20Double%20oracle%20INCH%E2%86%92DAI%0A4.%20%60test_dai_to_1inch_chainlink_order_makingAmountData_with_rebalancer()%60%20-%20Double%20oracle%20with%20making%20amount%0A5.%20%60test_dai_to_1inch_stop_loss_order_with_rebalancer()%60%20-%20Conditional%20order%20with%20predicate%0A6.%20%60test_dai_to_1inch_stop_loss_order_predicate_invalid_with_rebalancer()%60%20-%20Invalid%20predicate%20test%0A7.%20%60test_eth_to_dai_stop_loss_order_with_rebalancer()%60%20-%20ETH%E2%86%92DAI%20with%20stop-loss%0A8.%20%60test_simple_order_without_extension_with_rebalancer()%60%20-%20Basic%20order%20with%20treasurer%0A9.%20%60test_simple_order_with_different_amounts_with_rebalancer()%60%20-%20Partial%20amounts%0A10.%20%60test_rebalancer_transfer_failure()%60%20-%20Failure%20scenario%20testing%0A%0A%23%23%23%203.%20Key%20Implementation%20Details%0A%0A%23%23%23%23%20**Post-Interaction%20Integration**%0A%0A-%20Each%20test%20includes%20%60buildPostInteractionCalldata(address(rebalancerInteraction))%60%0A-%20Post-interaction%20data%20is%20added%20to%20order%20extensions%20via%20%60PostInteractionData%60%0A-%20Treasurer%20(addr3)%20receives%20the%20output%20tokens%20after%20successful%20order%20execution%0A%0A%23%23%23%23%20**Transfer%20Logic**%0A%0A-%20**Takes%20output%20tokens**%3A%20The%20tokens%20the%20taker%20receives%20(maker%20asset%20from%20the%20order)%0A-%20**Transfers%20to%20treasurer**%3A%20Moves%20tokens%20to%20addr3%20(treasurer%20wallet)%20using%20%60safeTransferFrom%60%0A-%20**Rejects%20order%20on%20failure**%3A%20If%20transfer%20fails%2C%20entire%20order%20reverts%20with%20%60TransferFailed%60%20error%0A%0A%23%23%23%23%20**Test%20Verification**%0A%0AEach%20test%20verifies%3A%0A%0A1.%20**Order%20executes%20successfully**%20with%20Chainlink%20pricing%20(where%20applicable)%0A2.%20**Treasurer%20receives%20tokens**%3A%20%60assertEq(token.balanceOf(addr3)%2C%20expectedAmount)%60%0A3.%20**All%20balances%20are%20correct**%20for%20maker%2C%20taker%2C%20and%20treasurer%0A4.%20**Failure%20scenarios%20revert**%20when%20transfers%20are%20unauthorized%0A%0A%23%23%23%23%20**Error%20Handling**%0A%0A-%20**TransferFailed**%3A%20Reverts%20entire%20order%20if%20%60safeTransferFrom%60%20fails%0A-%20**InvalidTreasurer**%3A%20Prevents%20deployment%20with%20zero%20address%20treasurer%0A-%20**Predicate%20failures**%3A%20Orders%20with%20invalid%20predicates%20revert%20before%20interaction%0A%0A%23%23%23%204.%20Integration%20with%20Limit%20Order%20Protocol%0A%0AThe%20implementation%20seamlessly%20integrates%20with%20the%20existing%20Limit%20Order%20Protocol%3A%0A%0A-%20**Extension%20System**%3A%20Uses%20%60PostInteractionData%60%20extension%20for%20post-execution%20callbacks%0A-%20**Order%20Flow**%3A%20Maintains%20existing%20order%20execution%20flow%20while%20adding%20treasurer%20transfer%0A-%20**Atomic%20Execution**%3A%20Ensures%20either%20complete%20success%20(order%20%2B%20transfer)%20or%20complete%20failure%0A-%20**Event%20Emission**%3A%20Provides%20transparency%20through%20%60TokensTransferredToTreasurer%60%20events%0A%0A%23%23%23%205.%20Security%20Considerations%0A%0A-%20**SafeERC20**%3A%20Uses%20OpenZeppelin's%20SafeERC20%20for%20secure%20token%20transfers%0A-%20**Try-Catch**%3A%20Graceful%20error%20handling%20prevents%20partial%20state%20changes%0A-%20**Address%20Validation**%3A%20Constructor%20validates%20treasurer%20address%0A-%20**Atomic%20Operations**%3A%20Order%20reverts%20entirely%20if%20transfer%20fails%0A-%20**Authorization**%3A%20Relies%20on%20existing%20token%20approval%20mechanisms%0A%0A%23%23%23%206.%20Use%20Cases%0A%0AThis%20implementation%20enables%3A%0A%0A-%20**Automated%20Treasury%20Management**%3A%20Automatic%20transfer%20of%20trading%20profits%20to%20treasury%0A-%20**Risk%20Management**%3A%20Centralized%20control%20of%20trading%20outputs%0A-%20**Compliance**%3A%20Regulatory%20requirements%20for%20fund%20segregation%0A-%20**Portfolio%20Rebalancing**%3A%20Systematic%20reallocation%20of%20trading%20proceeds%0A%0AThe%20Rebalancer%20implementation%20successfully%20meets%20all%20requirements%20from%20the%20specification%20and%20provides%20a%20robust%2C%20secure%2C%20and%20comprehensive%20solution%20for%20automated%20treasury%20management%20in%20limit%20order%20trading.%0A%0A%23%23%23%20Test%20Results%0A%0A**10%20out%20of%2010%20tests%20passing%20(100%25%20success%20rate)**%0A%0A%23%23%23%23%20%E2%9C%85%20**All%20Tests%20Passing%3A**%0A%0A1.%20%60test_eth_to_dai_chainlink_order_with_rebalancer()%60%20-%20Single%20oracle%20ETH%E2%86%92DAI%0A2.%20%60test_dai_to_eth_chainlink_order_with_rebalancer()%60%20-%20Single%20oracle%20DAI%E2%86%92ETH%20with%20inverse%0A3.%20%60test_eth_to_dai_stop_loss_order_with_rebalancer()%60%20-%20Stop-loss%20with%20predicate%0A4.%20%60test_simple_order_without_extension_with_rebalancer()%60%20-%20Basic%20order%20without%20extensions%0A5.%20%60test_simple_order_with_different_amounts_with_rebalancer()%60%20-%20Different%20order%20amounts%0A6.%20%60test_rebalancer_transfer_failure()%60%20-%20Transfer%20failure%20handling%0A7.%20%60test_dai_to_1inch_stop_loss_order_predicate_invalid_with_rebalancer()%60%20-%20Invalid%20predicate%0A8.%20%60test_dai_to_1inch_chainlink_order_makingAmountData_with_rebalancer()%60%20-%20Double%20oracle%20with%20making%20amount%0A9.%20%60test_dai_to_1inch_chainlink_order_takingAmountData_with_rebalancer()%60%20-%20Double%20oracle%20with%20taking%20amount%0A10.%20%60test_dai_to_1inch_stop_loss_order_with_rebalancer()%60%20-%20Complex%20double%20oracle%20with%20stop-loss%20predicate%0A%0A%23%23%23%23%20%F0%9F%8E%AF%20**Core%20Functionality%20Verified%3A**%0A%0A-%20%E2%9C%85%20Post-interaction%20transfers%20tokens%20to%20treasurer%0A-%20%E2%9C%85%20Proper%20token%20approvals%20and%20transfers%0A-%20%E2%9C%85%20Balance%20verification%20accounting%20for%20treasurer%20transfers%0A-%20%E2%9C%85%20Error%20handling%20with%20transfer%20failures%0A-%20%E2%9C%85%20Atomic%20execution%20(orders%20either%20complete%20fully%20or%20revert%20entirely)%0A-%20%E2%9C%85%20Support%20for%20multiple%20token%20types%20(WETH%2C%20DAI%2C%20INCH)%0A-%20%E2%9C%85%20Complex%20oracle-based%20pricing%20scenarios%0A%0A%23%23%20Resource%20Management%0A%0A%23%23%23%20Resource%20Management%20Architecture%0A%0A!%5BResourceArchitecture%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FS12jGDhPge.png)%0A%0A%23%23%23%20Resource%20Management%20Components%0A%0A!%5BResourceComponents%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FHJ-pzD3Peg.png)%0A%0A%23%23%23%20Requirements%0A%0A1.%20Read%20lib%5Cthe-compact%5CREADME.md%20(open%20in%20editor)%20to%20understand%20how%20the%20compact%20works%0A2.%20We%20are%20looking%20to%20create%20an%20end%20to%20end%20flow%20where%0A%20%20%201.%20We%20register%20a%20new%20contract%20ResourceManager.sol%20as%20a%20ResourceManager%0A%20%20%202.%20We%20Register%20ChainLinkCompactInteraction.sol%20as%20the%20Arbiter%0A%20%20%203.%20The%20Maker%20(the%20Swapper%20in%20compact%20terms%20signs%20permission%20for%20their%20tokens%20(or%20ETH)%20to%20be%20stored%20in%20the-compact%20as%20ERC-6909)%0A%20%20%204.%20ChainLinkCompact.sol%20checks%20that%20the%20we%20have%20a%20ResourceLock%20for%20the%20amount%20required.%0A%20%20%205.%20ChainLinkCompact%20then%20executes%20the%20trade%20using%20the%20same%20logic%20that%20was%20in%20ChainLinkCalculator%20and%20creates%20a%20resource%20lock%20for%20their%20(tokens%2FETH)%0A%20%20%206.%20ChainLinkCompactInteraction%20is%20copied%20from%20RebalancerInteraction%20it%20takes%20the%20output%20tokens%20provided%20by%20the%20Taker%20and%0A%20%20%207.%20If%20they%20are%20%3E%3D%20TakerAmount%20then%20it%20calls%20the%20ResourceManager%20to%20lock%20the%20funds%0A%20%20%208.%20It%20then%20does%20the%20token%20transfer%20to%20the%20treasurer%20the%20same%20as%20it%20was%20done%20in%20the%20original%20RebalancerInteraction%0A%0A%23%23%23%20Design%20Questions%0A%0A1.%20**Resource%20Manager%20Registration**%3A%20How%20should%20we%20register%20the%20LimitOrderProtocol%20as%20a%20ResourceManager%20in%20The%20Compact%3F%20Should%20it%20be%20a%20separate%20contract%20or%20integrated%20directly%3F%0A%20%20%201.%20Answer%3A%20We%20are%20registering%20it%20as%20a%20separate%20contract%20let's%20call%20it%20ResourceManager.sol%20and%20this%20contract%20will%20be%20called%20by%20ChainLinkCompact%20to%20lock%20the%20resources%20before%20calling%20the%20swap%20on%20LimitOrderProtocl%0A%0A2.%20**Arbiter%20Implementation**%3A%20Should%20ChainLinkCompactInteraction.sol%20be%20a%20standalone%20arbiter%20or%20integrated%20with%20existing%20ChainLinkCalculator%20logic%3F%0A%20%20%201.%20Answer%3A%20It%20should%20be%20Standalone%20ChainLinkCalculator%20and%20RebalancerInteraction%20remain%20unchanged%0A%0A3.%20**Token%20Locking%20Strategy**%3A%20Should%20makers%20lock%20their%20entire%20balance%20upfront%20or%20lock%20tokens%20dynamically%20when%20orders%20are%20matched%3F%0A%20%20%201.%20Answer%3A%20Initially%20Lock%20their%20whole%20balance%0A%0A4.%20**Resource%20Lock%20Scope**%3A%20Should%20resource%20locks%20be%20chain-specific%20or%20multichain%20for%20cross-chain%20order%20execution%3F%0A%20%20%201.%20Answer%3A%20Chain-specific%0A%0A5.%20**Allocator%20Selection**%3A%20Which%20allocator%20should%20we%20use%20for%20the%20resource%20locks%3F%20Should%20we%20create%20a%20custom%20allocator%20or%20use%20existing%20ones%20like%20Smallocator%2FAutocator%3F%0A%20%20%201.%20Answer%3A%20Create%20a%20custom%20Allocator%20based%20on%20Autocator(which%20is%20used%20for%20End%20User%20signing%20which%20is%20the%20Maker%20in%20our%20case)%0A%20%20%202.%20The%20logic%20for%20calling%20this%20should%20be%20in%20ChainLinkCompact.t.sol%0A%20%20%203.%20Moving%20forward%20we%20will%20also%20create%20a%20custom%20Smallocator%20used%20when%20smart%20contract%20call%20this%0A%0A6.%20**EIP-712%20Signature%20Structure**%3A%20How%20should%20we%20structure%20the%20EIP-712%20signatures%20for%20the%20compact%20agreements%3F%20Should%20we%20include%20mandate%20data%20for%20additional%20conditions%3F%0A%20%20%201.%20Answer%3A%20For%20Phase%201%20we%20do%20not%20need%20to%20add%20mandate%20data%20or%20Solver%20Payloads%20we%20will%20incorporate%20those%20in%20a%20later%20phase%0A%0A7.%20**Fallback%20Mechanisms**%3A%20What%20should%20happen%20if%20the%20arbiter%20fails%20to%20process%20a%20claim%3F%20Should%20we%20implement%20emissary%20fallbacks%3F%0A%20%20%201.%20If%20an%20arbiter%20fails%20to%20process%20the%20claim%20the%20swap%20should%20revert%0A%0A8.%20**Gas%20Optimization**%3A%20How%20can%20we%20optimize%20gas%20usage%20for%20the%20ERC-6909%20integration%2C%20especially%20for%20batch%20operations%3F%0A%20%20%201.%20We%20will%20optimize%20gas%20in%20phase%202%0A%0A9.%20**Error%20Handling**%3A%20How%20should%20we%20handle%20cases%20where%20resource%20locks%20are%20insufficient%20or%20expired%3F%0A%20%20%201.%20We%20revert%20the%20transaction%20with%20custom%20errors%20stating%20the%20reason%20for%20the%20failure%0A%0A10.%20**Integration%20Points**%3A%20Should%20the%20ERC-6909%20functionality%20be%20optional%20(opt-in)%20or%20mandatory%20for%20all%20orders%3F%0A%20%20%20%201.%20Optional%20set%20by%20a%20boolean%20ERC-6909%20flag%20for%20now%0A%20%20%20%202.%20Later%20this%20may%20move%20to%20an%20enum%20with%20additional%20swap%20types%0A%0A%23%23%23%20Implementation%0A%0A%23%23%23%23%20Phase%201%3A%20Core%20Contract%20Development%0A%0A1.%20**Create%20ResourceManager.sol**%20-%20New%20contract%0A%20%20%20-%20Register%20as%20ResourceManager%20in%20The%20Compact%0A%20%20%20-%20Handle%20resource%20lock%20creation%20and%20management%20for%20makers%0A%20%20%20-%20Implement%20allocator%20integration%20for%20order%20validation%0A%20%20%20-%20Called%20by%20ChainLinkCompact%20to%20lock%20resources%20before%20swap%20execution%0A%0A2.%20**Create%20ChainLinkCompact.sol**%20-%20Copy%20from%20ChainLinkCalculator.sol%0A%20%20%20-%20Add%20ERC-6909%20flag%20for%20optional%20functionality%0A%20%20%20-%20Integrate%20with%20The%20Compact%20for%20resource%20lock%20verification%0A%20%20%20-%20Add%20ERC-6909%20token%20validation%20before%20order%20execution%0A%20%20%20-%20Call%20ResourceManager.sol%20to%20lock%20resources%20before%20LimitOrderProtocol%20execution%0A%20%20%20-%20Implement%20custom%20error%20handling%20for%20insufficient%2Fexpired%20locks%0A%0A3.%20**Create%20ChainLinkCompactInteraction.sol**%20-%20Copy%20from%20RebalancerInteraction.sol%0A%20%20%20-%20Implement%20IArbiter%20interface%20for%20The%20Compact%0A%20%20%20-%20Add%20resource%20lock%20creation%20for%20taker's%20output%20tokens%0A%20%20%20-%20Maintain%20treasurer%20transfer%20functionality%0A%20%20%20-%20Add%20EIP-712%20signature%20verification%20for%20compact%20agreements%0A%20%20%20-%20Revert%20entire%20transaction%20if%20arbiter%20fails%20to%20process%20claim%0A%0A4.%20**Create%20Custom%20Allocator**%20-%20Based%20on%20Autocator%0A%20%20%20-%20Implement%20IAllocator%20interface%0A%20%20%20-%20Handle%20end-user%20(Maker)%20signing%20authorization%0A%20%20%20-%20Add%20nonce%20management%20for%20compact%20claims%0A%20%20%20-%20Implement%20claim%20authorization%20logic%0A%20%20%20-%20Logic%20for%20calling%20this%20should%20be%20in%20ChainLinkCompact.t.sol%0A%0A%23%23%23%23%20Phase%202%3A%20Integration%20%26%20Testing%0A%0A5.%20**Compact%20Registration%20System**%0A%20%20%20-%20Implement%20EIP-712%20signature%20generation%20for%20makers%20(no%20mandate%20data%20for%20Phase%201)%0A%20%20%20-%20Create%20compact%20registration%20functions%0A%20%20%20-%20Add%20chain-specific%20resource%20lock%20scope%0A%20%20%20-%20Implement%20upfront%20token%20locking%20strategy%0A%0A6.%20**Testing%20Suite**%0A%20%20%20-%20Unit%20tests%20for%20each%20contract%0A%20%20%20-%20Integration%20tests%20for%20end-to-end%20flow%0A%20%20%20-%20Test%20ERC-6909%20flag%20functionality%0A%20%20%20-%20Test%20custom%20error%20handling%20scenarios%0A%0A%23%23%23%23%20Phase%203%3A%20Advanced%20Features%0A%0A7.%20**Gas%20Optimization**%0A%20%20%20-%20Optimize%20gas%20usage%20for%20ERC-6909%20integration%0A%20%20%20-%20Implement%20batch%20operations%20optimization%0A%20%20%20-%20Profile%20and%20optimize%20critical%20paths%0A%0A8.%20**Enhanced%20Features**%0A%20%20%20-%20Add%20mandate%20data%20structure%20for%20order%20conditions%0A%20%20%20-%20Implement%20multichain%20support%0A%20%20%20-%20Create%20custom%20Smallocator%20for%20smart%20contract%20calls%0A%20%20%20-%20Add%20emissary%20fallback%20mechanisms%0A%20%20%20-%20Implement%20enum%20for%20additional%20swap%20types%20beyond%20boolean%20flag%0A%0A%23%23%23%20Technical%20Architecture%0A%0A**Core%20Flow%3A**%0A%0A1.%20Maker%20deposits%20tokens%20into%20The%20Compact%20(creates%20ERC-6909%20resource%20lock)%0A2.%20Maker%20signs%20EIP-712%20compact%20agreement%20with%20arbiter%20(ChainLinkCompactInteraction)%0A3.%20Order%20is%20posted%20to%20LimitOrderProtocol%20with%20ERC-6909%20extension%0A4.%20Taker%20fills%20order%20through%20ChainLinkCompact.sol%0A5.%20ChainLinkCompactInteraction%20processes%20claim%3A%0A%20%20%20-%20Verifies%20resource%20lock%20availability%0A%20%20%20-%20Executes%20trade%20using%20ChainLinkCalculator%20logic%0A%20%20%20-%20Creates%20new%20resource%20lock%20for%20taker's%20output%20tokens%0A%20%20%20-%20Transfers%20tokens%20to%20treasurer%0A%20%20%20-%20Calls%20ResourceManager%20to%20lock%20funds%0A%0A**Key%20Interfaces%3A**%0A%0A-%20%60ITheCompact%60%20-%20For%20resource%20lock%20management%0A-%20%60IAllocator%60%20-%20For%20claim%20authorization%0A-%20%60IArbiter%60%20-%20For%20claim%20processing%0A-%20%60IEmissary%60%20-%20For%20fallback%20verification%0A%0A**Data%20Structures%3A**%0A%0A-%20%60Compact%60%20-%20EIP-712%20payload%20for%20single%20resource%20lock%0A-%20%60BatchCompact%60%20-%20EIP-712%20payload%20for%20multiple%20resource%20locks%0A-%20%60Mandate%60%20-%20Witness%20data%20for%20order%20conditions%0A-%20%60Claim%60%20-%20Claim%20payload%20for%20processing%0A%0A%23%23%23%20Future%20Test%20Enhancements%0A%0AFor%20ERC-6909%20integration%2C%20additional%20test%20categories%20will%20be%20needed%3A%0A%0A1.%20**ERC-6909%20Resource%20Lock%20Tests**%0A%20%20%20-%20Resource%20lock%20creation%20and%20validation%0A%20%20%20-%20Insufficient%20lock%20handling%0A%20%20%20-%20Lock%20expiration%20scenarios%0A%0A2.%20**Compact%20Integration%20Tests**%0A%20%20%20-%20EIP-712%20signature%20verification%0A%20%20%20-%20Compact%20agreement%20validation%0A%20%20%20-%20Arbiter%20claim%20processing%0A%0A3.%20**Resource%20Manager%20Tests**%0A%20%20%20-%20Lock%20management%20functionality%0A%20%20%20-%20Allocator%20integration%0A%20%20%20-%20Error%20handling%20for%20resource%20conflicts%0A%0A4.%20**End-to-End%20Flow%20Tests**%0A%20%20%20-%20Complete%20maker-to-taker%20flow%0A%20%20%20-%20Treasurer%20integration%0A%20%20%20-%20Cross-contract%20interaction%20validation%0A%0A%23%23%20NEAR%20FUSION%2B%20Smart%20Contract%20Development%0A%0A%23%23%23%20NEAR%20Smart%20Contract%20Architecture%0A%0A!%5BNEARArchitecture%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FHydB7D3Pxe.png)%0A%0A%23%23%23%20NEAR%20Limit%20Order%20Protocol%20Contracts%0A%0A!%5BNEARLimitOrder%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FHkg8QPnvee.png)%0A%0A%23%23%23%20NEAR%20Escrow%20Smart%20Contracts%0A%0A!%5BNEAR%20Escrow%5D(https%3A%2F%2Fhackmd.io%2F_uploads%2FS1tqDDhvgg.png)%0A%0A%23%23%23%20Overview%0A%0ANEAR%20Fusion%2B%20is%20a%20comprehensive%20DeFi%20protocol%20that%20migrates%201inch's%20Limit%20Order%20Protocol%20and%20Cross-Chain%20Swap%20functionality%20to%20the%20NEAR%20blockchain.%20This%20project%20implements%20advanced%20trading%20features%20including%20limit%20orders%2C%20cross-chain%20atomic%20swaps%2C%20and%20sophisticated%20escrow%20mechanisms.%0A%0A%23%23%23%20Architecture%0A%0AThe%20protocol%20consists%20of%20several%20interconnected%20smart%20contracts%20that%20work%20together%20to%20provide%20a%20complete%20DeFi%20trading%20experience%3A%0A%0A%23%23%23%23%20Core%20Components%0A%0A1.%20**Limit%20Order%20Protocol**%20-%20Handles%20limit%20order%20creation%2C%20execution%2C%20and%20management%0A2.%20**Cross-Chain%20Swap**%20-%20Enables%20atomic%20swaps%20across%20different%20blockchains%0A3.%20**Escrow%20System**%20-%20Manages%20secure%20fund%20escrow%20for%20cross-chain%20operations%0A4.%20**Fee%20Management**%20-%20Handles%20fee%20collection%20and%20distribution%0A5.%20**Merkle%20Validation**%20-%20Provides%20proof%20validation%20for%20complex%20order%20structures%0A%0A%23%23%23%23%20Contract%20Structure%0A%0A%60%60%60%0Asrc%2F%0A%E2%94%9C%E2%94%80%E2%94%80%20limit-order-protocol%2F%20%20%20%20%20%23%20Main%20limit%20order%20functionality%0A%E2%94%9C%E2%94%80%E2%94%80%20cross-chain-swap%2F%20%20%20%20%20%20%20%20%20%23%20Cross-chain%20atomic%20swap%20implementation%0A%E2%94%9C%E2%94%80%E2%94%80%20base-escrow-factory%2F%20%20%20%20%20%20%23%20Advanced%20escrow%20factory%20with%20Merkle%20validation%0A%E2%94%9C%E2%94%80%E2%94%80%20escrow-factory%2F%20%20%20%20%20%20%20%20%20%20%20%23%20Standard%20escrow%20factory%0A%E2%94%9C%E2%94%80%E2%94%80%20escrow-src%2F%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20Source%20chain%20escrow%20contract%0A%E2%94%9C%E2%94%80%E2%94%80%20escrow-dst%2F%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20Destination%20chain%20escrow%20contract%0A%E2%94%9C%E2%94%80%E2%94%80%20fee-taker%2F%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20Fee%20collection%20and%20management%0A%E2%94%94%E2%94%80%E2%94%80%20merkle-storage-invalidator%2F%20%23%20Merkle%20proof%20validation%0A%60%60%60%0A%0A%23%23%23%20Key%20Features%0A%0A-%20**Limit%20Orders**%3A%20Advanced%20limit%20order%20protocol%20with%20partial%20fills%20and%20multiple%20execution%20strategies%0A-%20**Cross-Chain%20Swaps**%3A%20Atomic%20swaps%20between%20different%20blockchains%20with%20time-locked%20escrows%0A-%20**Merkle%20Proofs**%3A%20Efficient%20validation%20for%20complex%20order%20structures%0A-%20**Fee%20Management**%3A%20Flexible%20fee%20collection%20and%20distribution%20mechanisms%0A-%20**Security**%3A%20Comprehensive%20validation%20and%20timelock%20mechanisms%0A%0A%23%23%23%20Documentation%20Sections%0A%0A-%20%5BArchitecture%20Overview%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.architecture.md)%0A-%20%5BContract%20Documentation%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.contracts%2F)%0A%20%20-%20%5BLimit%20Order%20Protocol%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.contracts%2Flimit-order-protocol.md)%0A%20%20-%20%5BCross-Chain%20Swap%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.contracts%2Fcross-chain-swap.md)%0A%20%20-%20%5BEscrow%20System%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.contracts%2Fescrow-system.md)%0A%20%20-%20%5BFee%20Taker%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.contracts%2Ffee-taker.md)%0A%20%20-%20%5BMerkle%20Storage%20Invalidator%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.contracts%2Fmerkle-storage-invalidator.md)%0A-%20%5BIntegration%20Guide%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.integration.md)%0A-%20%5BSecurity%20Considerations%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.security.md)%0A-%20%5BAPI%20Reference%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.api-reference.md)%0A-%20%5BDeployment%20Guide%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fprotocol%2Ftree%2Fmain%2Fdocs.deployment.md)%0A%0A%23%23%23%20Quick%20Start%0A%0A1.%20**Build%20Contracts**%3A%20%60cargo%20near%20build%60%0A2.%20**Run%20Tests**%3A%20%60cargo%20test%60%0A3.%20**Deploy**%3A%20Use%20the%20deployment%20scripts%20in%20%60deployment-scripts%2F%60%0A%0A%23%23%23%20Development%0A%0A-%20**Rust%20Version**%3A%20See%20%60rust-toolchain.toml%60%0A-%20**NEAR%20SDK**%3A%20v5.15.1%0A-%20**Testing**%3A%20Integration%20tests%20in%20%60integration-tests%2F%60%0A%0A%23%23%23%20Contributing%0A%0APlease%20refer%20to%20the%20main%20%5BREADME.md%5D(https%3A%2F%2Fgithub.com%2Fjincubator-united-defi-2025%2Fnear-fusion-plus%2Fblob%2Fmain%2FREADME.md)%20for%20development%20setup%20and%20contribution%20guidelines.%0A",lastUpdatedAt:1754438779e3},{lazy:()=>J(()=>import("./axiom-T3UaNp7A.js"),[]),path:"/research/zk/axiom",type:"mdx",filePath:"research/zk/axiom.mdx",content:"%23%20Axiom%0A%0A-%20date%3A%202023-06-28%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AAxiom%5B%5Eov-1%5D%20is%20a%20ZK%20coprocessor%20for%20Ethereum%20which%20provides%20smart%20contracts%20trustless%20access%20to%20all%20on-chain%20data%20and%20arbitrary%20expressive%20compute%20over%20it.%0A%0A%23%23%20References%0A%0A-%20%5BWebsite%5D(https%3A%2F%2Fwww.axiom.xyz%2F)%0A-%20%5BDocumentation%5D(https%3A%2F%2Fdocs.axiom.xyz%2F)%0A-%20%5BCompany%20Profile%20LinkedIn%5D(https%3A%2F%2Fwww.linkedin.com%2Fcompany%2Faxiom-xyz%2Fabout%2F)%0A-%20%5BUniswap%20Grant%5D(https%3A%2F%2Fhackmd.io%2F%40yisun%2FH1e6U42Ps)%20%5Btweet%5D(https%3A%2F%2Ftwitter.com%2FUniswapFND%2Fstatus%2F1617895640415207424%3Flang%3Den)%0A-%20%5BIntrinsic%20technologies%20builder%5D(https%3A%2F%2Fgen.xyz%2Fblog%2Faxiomxyz)%0A-%20%5BGithub%20Repos%5D(https%3A%2F%2Fgithub.com%2Faxiom-crypto)%0A%20%20-%20https%3A%2F%2Fgithub.com%2Faxiom-crypto%2Faxiom-v1-contracts%20(uses%20%5Bfoundry%5D(https%3A%2F%2Fbook.getfoundry.sh%2F)%2C%20solidity%20and%20%5Byul%5D(https%3A%2F%2Fmedium.com%2F%40jtriley15%2Fyul-vs-solidity-contract-comparison-2b6d9e9dc833))%0A%20%20-%20https%3A%2F%2Fgithub.com%2Faxiom-crypto%2Faxiom-eth%20(written%20in%20rust)%0A%20%20-%20https%3A%2F%2Fgithub.com%2Faxiom-crypto%2Faxiom-apps%20(uniswap)%0A%20%20-%20https%3A%2F%2Fgithub.com%2Faxiom-crypto%2Fhalo2-lib%20(rust%20zk)%0A-%20%5B%40axiomhq%20npm%20packages%5D(https%3A%2F%2Fwww.npmjs.com%2Fsearch%3Fq%3D%2540axiomhq)%0A-%20Yi%20is%20part%20of%20the%20Delendum%20Telegram%20Group%20%40yisun%20and%20Presented%20at%20%5BEth%20Denver%5D(https%3A%2F%2Ftwitter.com%2Faxiom_xyz%2Fstatus%2F1630960864479027200)%0A-%20%5BYi%20Sun%2C%20Reflection%20and%20Introspection%20in%20Blockchains%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D05uv3hsH6oA)%0A-%20%5BDelendum%20Research%20Workshop%20Slides%5D(https%3A%2F%2Fdrive.google.com%2Fdrive%2Ffolders%2F15Ih1B4Pjr-oorAa33qlAgVH5klCHwSG3)%0A%0A%23%23%20Footnotes%0A%0AOverview%0A%5B%5Eov-1%5D%3A%20%5BAxiom%5D(https%3A%2F%2Fwww.axiom.xyz%2F)%3A%20The%20ZK%20Coprocessor%20for%20Ethereum%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./axiom-T3UaNp7A.js"),[]),path:"/research/zk/axiom.html",type:"mdx",filePath:"research/zk/axiom.mdx",content:"%23%20Axiom%0A%0A-%20date%3A%202023-06-28%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AAxiom%5B%5Eov-1%5D%20is%20a%20ZK%20coprocessor%20for%20Ethereum%20which%20provides%20smart%20contracts%20trustless%20access%20to%20all%20on-chain%20data%20and%20arbitrary%20expressive%20compute%20over%20it.%0A%0A%23%23%20References%0A%0A-%20%5BWebsite%5D(https%3A%2F%2Fwww.axiom.xyz%2F)%0A-%20%5BDocumentation%5D(https%3A%2F%2Fdocs.axiom.xyz%2F)%0A-%20%5BCompany%20Profile%20LinkedIn%5D(https%3A%2F%2Fwww.linkedin.com%2Fcompany%2Faxiom-xyz%2Fabout%2F)%0A-%20%5BUniswap%20Grant%5D(https%3A%2F%2Fhackmd.io%2F%40yisun%2FH1e6U42Ps)%20%5Btweet%5D(https%3A%2F%2Ftwitter.com%2FUniswapFND%2Fstatus%2F1617895640415207424%3Flang%3Den)%0A-%20%5BIntrinsic%20technologies%20builder%5D(https%3A%2F%2Fgen.xyz%2Fblog%2Faxiomxyz)%0A-%20%5BGithub%20Repos%5D(https%3A%2F%2Fgithub.com%2Faxiom-crypto)%0A%20%20-%20https%3A%2F%2Fgithub.com%2Faxiom-crypto%2Faxiom-v1-contracts%20(uses%20%5Bfoundry%5D(https%3A%2F%2Fbook.getfoundry.sh%2F)%2C%20solidity%20and%20%5Byul%5D(https%3A%2F%2Fmedium.com%2F%40jtriley15%2Fyul-vs-solidity-contract-comparison-2b6d9e9dc833))%0A%20%20-%20https%3A%2F%2Fgithub.com%2Faxiom-crypto%2Faxiom-eth%20(written%20in%20rust)%0A%20%20-%20https%3A%2F%2Fgithub.com%2Faxiom-crypto%2Faxiom-apps%20(uniswap)%0A%20%20-%20https%3A%2F%2Fgithub.com%2Faxiom-crypto%2Fhalo2-lib%20(rust%20zk)%0A-%20%5B%40axiomhq%20npm%20packages%5D(https%3A%2F%2Fwww.npmjs.com%2Fsearch%3Fq%3D%2540axiomhq)%0A-%20Yi%20is%20part%20of%20the%20Delendum%20Telegram%20Group%20%40yisun%20and%20Presented%20at%20%5BEth%20Denver%5D(https%3A%2F%2Ftwitter.com%2Faxiom_xyz%2Fstatus%2F1630960864479027200)%0A-%20%5BYi%20Sun%2C%20Reflection%20and%20Introspection%20in%20Blockchains%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D05uv3hsH6oA)%0A-%20%5BDelendum%20Research%20Workshop%20Slides%5D(https%3A%2F%2Fdrive.google.com%2Fdrive%2Ffolders%2F15Ih1B4Pjr-oorAa33qlAgVH5klCHwSG3)%0A%0A%23%23%20Footnotes%0A%0AOverview%0A%5B%5Eov-1%5D%3A%20%5BAxiom%5D(https%3A%2F%2Fwww.axiom.xyz%2F)%3A%20The%20ZK%20Coprocessor%20for%20Ethereum%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./intro-x0kf3Alh.js"),[]),path:"/research/zk/intro",type:"mdx",filePath:"research/zk/intro.mdx",content:"%23%20Zero%20Knowledge%20Research%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AHere%20we%20do%20a%20deep%20dive%20on%20Zero%20Knowledge%0A%0A-%20Approach%0A-%20Emerging%20Use%20Cases%0A-%20Proof%20Systems%0A-%20Efficient%20Signatures%0A-%20Proof%20Aggregation%0A-%20Tokenomics%0A%0A%23%23%20Learning%20Material%0A%0A%23%23%23%20Foundational%0A%0A-%20%5BAn%20Introduction%20to%20Mathematical%20Cryptography%5D(https%3A%2F%2Fwww.amazon.com%2FIntroduction-Mathematical-Cryptography-Undergraduate-Mathematics%2Fdp%2F1493917102)%0A-%20%5BIntroduction%20to%20Applied%20Linear%20Algebra%5D(https%3A%2F%2Fwww.amazon.com%2FIntroduction-Applied-Linear-Algebra-Matrices%2Fdp%2F1316518965)%0A-%20%5BCalculus%20I%20-%20Differentiation%20and%20Integration%5D(https%3A%2F%2Fwww.amazon.com%2FCalculus-Differentiation-Integration-Hamilton-Education-ebook%2Fdp%2FB07BPHW4VL)%0A-%20%5BAn%20Introduction%20to%20Mathematical%20Cryptography%5D(https%3A%2F%2Fwww.amazon.com%2FIntroduction-Mathematical-Cryptography-Undergraduate-Mathematics-ebook%2Fdp%2FB00PULZOCI%2F)%3A%20the%20mathematics%20behind%20the%20theory%20of%20public%20key%20cryptosystems%20and%20digital%20signature%20schemes.%0A-%20%5BCryptography%20Algorithms%5D(https%3A%2F%2Fwww.amazon.com%2FNext-generation-Cryptography-Algorithms-Explained-implementation%2Fdp%2F1789617138)%0A-%20%5BNumber%20Theory%5D(https%3A%2F%2Fcrypto.stanford.edu%2Fpbc%2Fnotes%2Fnumbertheory%2F)%0A-%20%5BzkSNARKs%20in%20a%20nutshell%5D(https%3A%2F%2Fblog.ethereum.org%2F2016%2F12%2F05%2Fzksnarks-in-a-nutshell)%0A-%20%5BQuadratic%20Arithmetic%20Programs%3A%20from%20Zero%20to%20Hero%5D(https%3A%2F%2Fmedium.com%2F%40VitalikButerin%2Fquadratic-arithmetic-programs-from-zero-to-hero-f6d558cea649)%0A-%20%5BExploring%20Elliptic%20Curve%20Pairings%5D(https%3A%2F%2Fmedium.com%2F%40VitalikButerin%2Fexploring-elliptic-curve-pairings-c73c1864e627)%0A-%20%5BZk-SNARKs%3A%20Under%20the%20Hood%5D(https%3A%2F%2Fmedium.com%2F%40VitalikButerin%2Fzk-snarks-under-the-hood-b33151a013f6)%0A-%20%5BThe%20MoonMath%20Manual%20to%20zk-SNARKs%5D(https%3A%2F%2Fleastauthority.com%2Fstatic%2Fpublications%2FMoonMath080822.pdf)%0A-%20%5BElliptic%20Curve%20Cryptography%3A%20a%20gentle%20introduction%5D(https%3A%2F%2Fandrea.corbellini.name%2F2015%2F05%2F17%2Felliptic-curve-cryptography-a-gentle-introduction%2F)%0A-%20%5BExploring%20Elliptic%20Curve%20Pairings%5D(https%3A%2F%2Fvitalik.ca%2Fgeneral%2F2017%2F01%2F14%2Fexploring_ecp.html)%0A-%20%5BKZG%20polynomial%20commitments%5D(https%3A%2F%2Fdankradfeist.de%2Fethereum%2F2020%2F06%2F16%2Fkate-polynomial-commitments.html)%0A-%20%5Bplookup%5D(https%3A%2F%2Feprint.iacr.org%2F2020%2F315.pdf)%3A%20A%20simplified%20polynomial%20protocol%20for%0A%20%20lookup%20tables.%0A-%20%5BCasting%20out%20Primes%5D(https%3A%2F%2Fblog.polygon.technology%2Fwp-content%2Fuploads%2F2022%2F10%2Fcasting-3.pdf)%3A%20a%20nondeterministic%20method%20for%20bignum%20arithmetic.%20It%20is%20inspired%20by%20the%20%E2%80%9Ccasting%20out%20nines%E2%80%9D%20technique%2C%20where%20some%20identity%20is%20checked%20modulo%209%2C%20providing%20a%20probabilistic%20result.%0A%0A%23%23%23%20Zero%20Knowledge%0A%0AResearch%20Articles%0A%0A-%20%5BFraud%20and%20Data%20Availability%20Proofs%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F1809.09044.pdf)%3A%20Maximising%20Light%20Client%20Security%20and%20Scaling%20Blockchains%20with%20Dishonest%20Majorities.%20_Light%20clients%2C%20also%20known%20as%20Simple%20Payment%20Verification%20(SPV)%20clients%2C%20are%20nodes%20which%20only%20download%20a%20small%20portion%20of%20the%20data%20in%20a%20blockchain%2C%20and%20use%20indirect%20means%20to%20verify%20that%20a%20given%20chain%20is%20valid._%20%5C*%20Research%20Papers%20(Zero%20Knowledge%20Related)%0A-%20%5BzkBridge%3A%20Trustless%20Cross-chain%20Bridges%20Made%20Practical%5D(https%3A%2F%2Frdi.berkeley.edu%2Fzkp%2FzkBridge%2Fuploads%2Fpaper.pdf)%0A-%20%5BCaulk%3A%20Lookup%20Arguments%20in%20Sublinear%20Time%5D(https%3A%2F%2Feprint.iacr.org%2F2022%2F621.pdf)%3A%20position-hiding%20linkability%20for%20vector%20commitment%20schemes%3A%20one%20can%20prove%20in%20zero%20knowledge%20that%20one%20or%20m%20values%20that%20comprise%20commitment%20cm%20all%20belong%20to%20the%20vector%20of%20size%20N%20committed%20to%20in%20C.%0A-%20%5BHyperPlonk%3A%20Plonk%20with%20Linear-Time%20Prover%20and%20High-Degree%20Custom%20Gates%5D(https%3A%2F%2Feprint.iacr.org%2F2022%2F1355.pdf)%0A-%20%5BSLONK%E2%80%94a%20simple%20universal%20SNARK%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fslonk-a-simple-universal-snark%2F6420)%3A%20a%20simplification%20to%20PLONK%20called%20SLONK.%20We%20replace%20the%20permutation%20argument%20(the%20%E2%80%9CP%E2%80%9D%20in%20PLONK)%20in%20favour%20of%20a%20shift%20argument%20(the%20%E2%80%9CS%E2%80%9D%20in%20SLONK).%20We%20get%20a%20universal%20SNARK%20with%20the%20smallest%20known%20proof%20size%20and%20verification%20time.%0A-%20%5BKate%20commitments%20from%20the%20Lagrange%20basis%20without%20FFTs%5D(https%3A%2F%2Fnotes.ethereum.org%2FT0ZVaaywQAqP4jegqO3asg%3Fview)%3A%20how%20to%20commit%2C%20evaluate%20and%20open%20polynomials%20in%20the%20Lagrange%20basis%20without%20FFTs.%20This%20is%20the%20first%20part%20in%20a%20series%20(see%20part%201%2C%20part%202%2C%20part%203)%20showing%20how%20to%20do%20PLONK-style%20universal%20SNARKs%20without%20FFTs%0A-%20%5BHadamard%20checks%20from%20the%20Lagrange%20basis%20without%20FFTs%5D(https%3A%2F%2Fnotes.ethereum.org%2FIl4z42lmQtaUYFigsjsk2Q%3Fview)%3A%20how%20to%20prove%20Hadamard%20relations%20between%20polynomials%20in%20the%20Lagrange%20basis%20without%20FFTs.%20This%20is%20the%20second%20part%20(see%20part%201%2C%20part%202%2C%20part%203)%20in%20a%20series%20showing%20how%20to%20do%20PLONK-style%20universal%20SNARKs%20without%20FFTs.%0A-%20%5BPLONK-style%20SNARKs%20without%20FFTs%5D(https%3A%2F%2Fnotes.ethereum.org%2FDLRqK9V7RIOsTZkab8Hm_Q%3Fview)%3A%20how%20to%20do%20PLONK-style%20universal%20SNARKs%20without%20FFTs.%20This%20is%20part%203%20in%20a%20series%20(part%201%2C%20part%202%2C%20part%203).%0A-%20%5BAn%20efficient%20verifiable%20state%20for%20zk-EVM%20and%20beyondfrom%20the%20Anemoi%20hash%20function%5D(https%3A%2F%2Feprint.iacr.org%2F2022%2F1487.pdf)%0A-%20%5BPlonky2%3A%20Fast%20Recursive%20Arguments%20with%20PLONK%20and%20FRI%5D(https%3A%2F%2Fgithub.com%2Fmir-protocol%2Fplonky2%2Fblob%2Fmain%2Fplonky2%2Fplonky2.pdf)%0A%0Aarticles%20and%20learning%20resources%0A%0A-%20%5BBridging%20the%20Multichain%20Universe%20with%20Zero%20Knowledge%20Proofs%5D(https%3A%2F%2Fmedium.com%2F%40ingonyama%2Fbridging-the-multichain-universe-with-zero-knowledge-proofs-6157464fbc86)%0A-%20%5Bawesome-zkml%5D(https%3A%2F%2Fgithub.com%2Fworldcoin%2Fawesome-zkml)%0A-%20%5Bhttps%3A%2F%2Flearn.0xparc.org%2F%5D(https%3A%2F%2Flearn.0xparc.org%2F)%3A%20ZK%20Learning%20Resources%0A-%20%5BDelendum%20ZKP%20Knowledge%20base%5D(https%3A%2F%2Fkb.delendum.xyz%2F)%0A-%20%5Bhttps%3A%2F%2Fappliedzkp.org%5D(https%3A%2F%2Fappliedzkp.org%2F)%3A%20Privacy%20and%20Scaling%20Exploration%0A-%20%5Bhttps%3A%2F%2Fzkp.science%2F%5D(https%3A%2F%2Fzkp.science%2F)%3A%20Zero-Knowledge%20Proofs%0A-%20%5Bhttps%3A%2F%2Fstarkware.co%2Fstark-101%2F%5D(https%3A%2F%2Fstarkware.co%2Fstark-101%2F)%3A%20Stark%20101%3A%20write%20a%20STARK%20prover%20from%20scratch%0A-%20%5Bhttps%3A%2F%2Fdocs.starkware.co%2Fstarkex%2Findex.html%5D(https%3A%2F%2Fdocs.starkware.co%2Fstarkex%2Findex.html)%3A%20-%20Starkware%20StarkeEx%0A-%20%5BNoir%5D(https%3A%2F%2Fdocs.aztec.network%2Fdevelopers%2Fnoir)%20Noir%20is%20a%20Domain%20Specific%20Language%20for%20developing%20ZK-provable%20programs.%20(Rust%20based)%0A%20%20-%20%5Barticle%5D(https%3A%2F%2Fmedium.com%2Faztec-protocol%2Fintroducing-noir-the-universal-language-of-zero-knowledge-ff43f38d86d9)%0A%20%20-%20%5Btweet%5D(https%3A%2F%2Ftwitter.com%2Faztecnetwork%2Fstatus%2F1578082456212643840)%0A%20%20-%20%5BGrants%5D(https%3A%2F%2Faztec.network%2Fgrants%2F)%0A-%20%5BArkworks%5D(https%3A%2F%2Fgithub.com%2Farkworks-rs)%0A-%20%5Bzkrepl.dev%5D(https%3A%2F%2Fzkrepl.dev%2F)%0A-%20%5Bsuccinct%5D(https%3A%2F%2Fblog.succinct.xyz%2F)%0A-%20%5BZK%20BATCH%20ECDSA%5D(https%3A%2F%2Fblog.succinct.xyz%2Fpost%2F2022%2F10%2F03%2Fbatch-ecdsa%2F)%0A-%20%5BBatch%20ECDSA%20Verification%5D(https%3A%2F%2Fgithub.com%2Fpuma314%2Fbatch-ecdsa)%0A-%20%5BBringing%20IBC%20to%20Ethereum%20using%20ZK-Snarks%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fbringing-ibc-to-ethereum-using-zk-snarks%2F13634)%0A-%20%5BMINA%20docs%5D(https%3A%2F%2Fdocs.minaprotocol.com%2F)%0A%0Aimplementation%20articles%0A%0A-%20%5BzkPoS%3A%20End-to-End%20Trustless%5D(https%3A%2F%2Fhyperoracle.medium.com%2Fzkpos-end-to-end-trustless-65edccd87c5a)%3A%20HyperOracle%20article%20on%20how%20zkPoS%20provides%20the%20ability%20of%20proving%20the%20consensus%20with%20ZK.%0A-%20%5BSuccinct%20Towards%20the%20endgame%20of%20blockchain%20interoperability%20with%20proof%20of%20consensus%5D(https%3A%2F%2Fblog.succinct.xyz%2Fpost%2F2022%2F09%2F20%2Fproof-of-consensus)%0A%0A%23%23%23%20Codebases%0A%0A-%20%5BCircom%5D(https%3A%2F%2Fgithub.com%2Fiden3%2Fcircom)%20a%20novel%20domain-specific%20language%20for%20defining%20arithmetic%20circuits%20that%20can%20be%20used%20to%20generate%20zero-knowledge%20proofs%0A-%20%5BDarkForest%5D(https%3A%2F%2Fgithub.com%2Fdarkforest-eth)%20zkSNARK%20space%20warfare%0A%20%20-%20%5BAwesome%20List%5D(https%3A%2F%2Fgithub.com%2Fsnowtigersoft%2Fawesome-darkforest)%0A%20%20-%20%5BOur%20front%20end%20code%20(the%20game%20is%20open%20source!)%5D(https%3A%2F%2Fgithub.com%2Fdarkforest-eth%2Fclient%2Ftree%2Fmaster%2Fsrc%2FFrontend)%0A%20%20-%20%5BTwitter%5D(https%3A%2F%2Ftwitter.com%2Fdarkforest_eth)%0A-%20%5BDiscord%5D(https%3A%2F%2Fdiscord.gg%2F2u2TN6v8r6)%0A%20%20-%20%5BTeam%20Blog%5D(http%3A%2F%2Fblog.zkga.me%2F)%0A%20%20%20%20-%20%5BDark%20Forest%20v0.6%5D(https%3A%2F%2Fblog.zkga.me%2Fannouncing-v6)%0A%20%20%20%20-%20%5BExploiting%20DF%20v0.5%20Artifact%20Minting%5D(https%3A%2F%2Fblog.zkga.me%2Fartifact-minting-exploit)%0A%20%20%20%20-%20%5Bv0.5%20Plugins%20Contest%20Winners%5D(https%3A%2F%2Fblog.zkga.me%2Fv5-plugins-contest-winners)%0A%20%20%20%20-%20%5BZero-Knowledge%20Proofs%20for%20Engineers%5D(https%3A%2F%2Fblog.zkga.me%2Fintro-to-zksnarks)%0A%20%20%20%20-%20%5BAnnouncing%20Dark%20Forest%5D(https%3A%2F%2Fblog.zkga.me%2Fannouncing-darkforest)%0A%20%20%20%20-%20%5BThe%20Strongest%20Crypto%20Gaming%20Thesis%3A%20Why%20we're%20building%20Dark%20Forest%5D(https%3A%2F%2Fgubsheep.mirror.xyz%2FnsteOfjATPSKH0J8lRD0j2iynmvv_C8i8eb483UzcTM)%0A%20%20-%20%5BCommunity%20plugins%5D(http%3A%2F%2Fplugins.zkga.me%2F)%0A%20%20-%20%5BCommunity-run%20wiki%5D(http%3A%2F%2Fdfwiki.net%2F)%0A%20%20-%20Player-made%20content%0A%20%20%20%20-%20%5BDark%20Forest%20GPU%20universe%20explorer%5D(https%3A%2F%2Fwww.longrocklabs.com%2Farticles%2Fthe-exploration-era-begins%2F)%0A%20%20%20%20-%20%5BGetting%20started%20with%20Dark%20Forest%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DkeY4a9cKmgg)%0A%20%20%20%20-%20%5BSetting%20up%20a%20remote%20miner%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DKus4fWNg3zo)%0A%20%20%20%20-%20%5BDark%20Forest%20battle%20timelapse%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Do9A-cfDanTY)%0A%0A-%20%5Bhalo2ecc-s%5D(https%3A%2F%2Fgithub.com%2FDelphinusLab%2Fhalo2ecc-s)%3A%20Re-implement%20an%20ecc%20circuits%20with%20halo2%0A%0A-%20%5Bplonky2%5D(https%3A%2F%2Fgithub.com%2Fmir-protocol%2Fplonky2)%3A%20a%20SNARK%20implementation%20based%20on%20techniques%20from%20PLONK%20and%20FRI.%20It%20has%20since%20expanded%20to%20include%20tools%20such%20as%20Starky%2C%20a%20highly%20performant%20STARK%20implementation.%0A%20%20-%20%5Bplonky2-solidity-verifier%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-solidity-verifier)%0A%20%20-%20%5Bplonky2-circom%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-circom)%3A%20Plonky2%20verifier%20in%20Circom%0A%20%20-%20%5Bplonky2-ed25519%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-ed25519)%3A%20SNARK%20verification%20circuits%20of%20a%20digital%20signature%20scheme%20Ed25519%20implemented%20with%20Plonky2.%0A%20%20-%20%5Bplonky2-sha256%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-sha256)%3A%20SNARK%20circuits%20of%20a%20cryptographic%20hash%20function%20SHA-256%20implemented%20with%20Plonky2.%0A%20%20-%20%5Bplonky2-sha512%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-sha512)%3A%20SNARK%20circuits%20of%20a%20cryptographic%20hash%20function%20SHA-512%20implemented%20with%20Plonky2.%0A%20%20-%20%5Bplonky2-pairing%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-pairing)%0A%0A%23%23%23%20Presentations%0A%0A-%20%5BDevcon%20VI%5D(https%3A%2F%2Farchive.devcon.org%2Farchive%2Fplaylists%2Fdevcon-6%2F)%0A-%20%5BLight%20Client%20After%20the%20Merge%5D(https%3A%2F%2Farchive.devcon.org%2Farchive%2Fwatch%2F6%2Flight-clients-after-the-merge%2F%3Fplaylist%3DDevcon%25206%26tab%3DYouTube)%20%5Bvideo%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DZHNrAXf3RDE)%0A-%20%5BWhat%20to%20Know%20about%20Zero%20Knowledge%5D(https%3A%2F%2Farchive.devcon.org%2Farchive%2Fwatch%2F6%2Fwhat-to-know-about-zero-knowledge%2F%3Fplaylist%3DDevcon%25206%26tab%3DYouTube)%0A-%20%5BZK%20Application%20ShowCase%5D(https%3A%2F%2Farchive.devcon.org%2Farchive%2Fwatch%2F6%2Fzk-application-showcase%2F%3Fplaylist%3DDevcon%25206%26tab%3DYouTube)%0A-%20%5BZK%20Badges%3A%20How%20to%20prove%20that%20you%20donated%20to%20Gitcoin%20grants%5D(https%3A%2F%2Farchive.devcon.org%2Farchive%2Fwatch%2F6%2Fzk-badges%2F%3Fplaylist%3DDevcon%25206%26tab%3DYouTube)%0A-%20%5BZK%20Security%20Self%20Led%20Session%5D(https%3A%2F%2Farchive.devcon.org%2Farchive%2Fwatch%2F6%2Fzk-security-self-led-session%2F%3Fplaylist%3DDevcon%25206%26tab%3DYouTube)%0A-%20%5BzkEVM%20Vs%20EVM%3A%20Full%20Equivalence%3F%5D(https%3A%2F%2Farchive.devcon.org%2Farchive%2Fwatch%2F6%2Fzkevm-vs-evm-full-equivalence%2F%3Fplaylist%3DDevcon%25206%26tab%3DYouTube)%0A-%20%5BZK%20Application%20Design%20Patterns%5D(https%3A%2F%2Farchive.devcon.org%2Farchive%2Fwatch%2F6%2Fzk-application-design-patterns%2F%3Fplaylist%3DDevcon%25206%26tab%3DYouTube)%20%5Bvideo%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D-PUKinjbLR8)%0A-%20%5BApplied%20ZK%20SLS%20presentations%5D(https%3A%2F%2Fwww.notion.so%2F360fcd3f2a824759b1373ddeef5bf564)%0A%0A%23%23%23%20Additional%20Information%0A%0A-%20Review%20%5BENS%20Bridging%20Strategy%5D(https%3A%2F%2Fmedium.com%2Fthe-ethereum-name-service%2Fmvp-of-ens-on-l2-with-optimism-demo-video-how-to-try-it-yourself-b44c390cbd67)%20and%20%5Brepo%5D(https%3A%2F%2Fgithub.com%2Fensdomains%2Fl2gateway-demo%2F)%0A-%20%5BSuccinct%5D(https%3A%2F%2Fblog.succinct.xyz%2Fpost%2F2022%2F09%2F20%2Fproof-of-consensus)%20%5B%24600K%5D(https%3A%2F%2Fforum.gnosis.io%2Ft%2Fgip-57-should-gnosis-dao-support-research-of-a-zksnark-enabled-light-client-and-bridge%2F5421)%20%5Btweet%5D(https%3A%2F%2Ftwitter.com%2Fsuccinctlabs%2Fstatus%2F1572299292177481729)%20%5BDemo%5D(https%3A%2F%2Fwww.zkbridge.wtf%2F)%20%5Bgithub%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs)%20%5Bvideo%5D(https%3A%2F%2Fyoutu.be%2FCt6H5GcnA0A%3Ft%3D15554)%20built%20using%20%5Bcircom%5D(https%3A%2F%2Fdocs.circom.io%2F)%0A-%20%5Bcircom%5D(https%3A%2F%2Fdocs.circom.io%2F)%0A-%20%5BArkworks%5D(https%3A%2F%2Fgithub.com%2Farkworks-rs%2F)%2C%20%5Btutorial%5D(https%3A%2F%2Fgithub.com%2Farkworks-rs%2Fr1cs-tutorial%2F)%2C%20%5Btwitter%5D(https%3A%2F%2Ftwitter.com%2Farkworks_rs)%2C%20%5Bvideo%5D(https%3A%2F%2Fyoutu.be%2FCt6H5GcnA0A%3Ft%3D7429)%0A-%20%5BAztec.network%5D(http%3A%2F%2FAztec.network)%20%5BNoir%5D(https%3A%2F%2Faztec.network%2Fnoir)%20%5Bintro%5D(https%3A%2F%2Fmedium.com%2Faztec-protocol%2Fintroducing-noir-the-universal-language-of-zero-knowledge-ff43f38d86d9)%2C%20%5Bgithub%5D(https%3A%2F%2Fgithub.com%2Fnoir-lang%2Fnoir)%2C%20%5Btwitter%5D(https%3A%2F%2Ftwitter.com%2Faztecnetwork)%2C%20%5Bdocs%5D(https%3A%2F%2Fnoir-lang.github.io%2Fbook%2Findex.html)%0A-%20%5BGNark%5D(https%3A%2F%2Fgithub.com%2FConsenSys%2Fgnark)%0A-%20%5BElectronLabs%5D(https%3A%2F%2Felectronlabs.org%2F)%0A-%20%5BZKU%5D(https%3A%2F%2Fzku.one%2F)%20%5BLearning%5D(https%3A%2F%2Fwww.notion.so%2FLearning-50b5a6ecc45b46248323f0e552b6885f)%0A-%20Review%20%5Bmatter-labs%20knowledge%20base%5D(https%3A%2F%2Fgithub.com%2Fmatter-labs%2Fawesome-zero-knowledge-proofs%23learn)%0A%0A-%20%5BzkSNARKS%20explained%20like%20you're%20someone%20who%20knows%20some%20math%20and%20some%20coding%5D(https%3A%2F%2Fwww.reddit.com%2Fr%2FzkTech%2Fcomments%2Ftfjvrj%2Fzksnarks_explained_like_youre_someone_who_knows%2F)%0A-%20%5BThe%20Halo2%20Book%5D(https%3A%2F%2Fzcash.github.io%2Fhalo2%2Fconcepts%2Fproofs.html)%0A-%20%5BA%20survey%20of%20elliptic%20curves%20for%20proof%20systems%5D(https%3A%2F%2Feprint.iacr.org%2F2022%2F586.pdf)%0A-%20zkEVM%0A%20%20-%20%5BzkSync%20Era%5D(https%3A%2F%2Fera.zksync.io%2Fdocs%2Fdev%2F)%0A%20%20-%20%5BPolygon%20zkEVM%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2FzkEVM%2Fdevelop%2F)%0A%20%20-%20%5BzkSync%20zkEVM%5D(https%3A%2F%2Fdocs.zksync.io%2Fzkevm%2F)%0A%20%20-%20%5BConsenSys%20zkEVM%5D(https%3A%2F%2Fdocs.zkevm.consensys.net%2Foverview)%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./intro-x0kf3Alh.js"),[]),path:"/research/zk/intro.html",type:"mdx",filePath:"research/zk/intro.mdx",content:"%23%20Zero%20Knowledge%20Research%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AHere%20we%20do%20a%20deep%20dive%20on%20Zero%20Knowledge%0A%0A-%20Approach%0A-%20Emerging%20Use%20Cases%0A-%20Proof%20Systems%0A-%20Efficient%20Signatures%0A-%20Proof%20Aggregation%0A-%20Tokenomics%0A%0A%23%23%20Learning%20Material%0A%0A%23%23%23%20Foundational%0A%0A-%20%5BAn%20Introduction%20to%20Mathematical%20Cryptography%5D(https%3A%2F%2Fwww.amazon.com%2FIntroduction-Mathematical-Cryptography-Undergraduate-Mathematics%2Fdp%2F1493917102)%0A-%20%5BIntroduction%20to%20Applied%20Linear%20Algebra%5D(https%3A%2F%2Fwww.amazon.com%2FIntroduction-Applied-Linear-Algebra-Matrices%2Fdp%2F1316518965)%0A-%20%5BCalculus%20I%20-%20Differentiation%20and%20Integration%5D(https%3A%2F%2Fwww.amazon.com%2FCalculus-Differentiation-Integration-Hamilton-Education-ebook%2Fdp%2FB07BPHW4VL)%0A-%20%5BAn%20Introduction%20to%20Mathematical%20Cryptography%5D(https%3A%2F%2Fwww.amazon.com%2FIntroduction-Mathematical-Cryptography-Undergraduate-Mathematics-ebook%2Fdp%2FB00PULZOCI%2F)%3A%20the%20mathematics%20behind%20the%20theory%20of%20public%20key%20cryptosystems%20and%20digital%20signature%20schemes.%0A-%20%5BCryptography%20Algorithms%5D(https%3A%2F%2Fwww.amazon.com%2FNext-generation-Cryptography-Algorithms-Explained-implementation%2Fdp%2F1789617138)%0A-%20%5BNumber%20Theory%5D(https%3A%2F%2Fcrypto.stanford.edu%2Fpbc%2Fnotes%2Fnumbertheory%2F)%0A-%20%5BzkSNARKs%20in%20a%20nutshell%5D(https%3A%2F%2Fblog.ethereum.org%2F2016%2F12%2F05%2Fzksnarks-in-a-nutshell)%0A-%20%5BQuadratic%20Arithmetic%20Programs%3A%20from%20Zero%20to%20Hero%5D(https%3A%2F%2Fmedium.com%2F%40VitalikButerin%2Fquadratic-arithmetic-programs-from-zero-to-hero-f6d558cea649)%0A-%20%5BExploring%20Elliptic%20Curve%20Pairings%5D(https%3A%2F%2Fmedium.com%2F%40VitalikButerin%2Fexploring-elliptic-curve-pairings-c73c1864e627)%0A-%20%5BZk-SNARKs%3A%20Under%20the%20Hood%5D(https%3A%2F%2Fmedium.com%2F%40VitalikButerin%2Fzk-snarks-under-the-hood-b33151a013f6)%0A-%20%5BThe%20MoonMath%20Manual%20to%20zk-SNARKs%5D(https%3A%2F%2Fleastauthority.com%2Fstatic%2Fpublications%2FMoonMath080822.pdf)%0A-%20%5BElliptic%20Curve%20Cryptography%3A%20a%20gentle%20introduction%5D(https%3A%2F%2Fandrea.corbellini.name%2F2015%2F05%2F17%2Felliptic-curve-cryptography-a-gentle-introduction%2F)%0A-%20%5BExploring%20Elliptic%20Curve%20Pairings%5D(https%3A%2F%2Fvitalik.ca%2Fgeneral%2F2017%2F01%2F14%2Fexploring_ecp.html)%0A-%20%5BKZG%20polynomial%20commitments%5D(https%3A%2F%2Fdankradfeist.de%2Fethereum%2F2020%2F06%2F16%2Fkate-polynomial-commitments.html)%0A-%20%5Bplookup%5D(https%3A%2F%2Feprint.iacr.org%2F2020%2F315.pdf)%3A%20A%20simplified%20polynomial%20protocol%20for%0A%20%20lookup%20tables.%0A-%20%5BCasting%20out%20Primes%5D(https%3A%2F%2Fblog.polygon.technology%2Fwp-content%2Fuploads%2F2022%2F10%2Fcasting-3.pdf)%3A%20a%20nondeterministic%20method%20for%20bignum%20arithmetic.%20It%20is%20inspired%20by%20the%20%E2%80%9Ccasting%20out%20nines%E2%80%9D%20technique%2C%20where%20some%20identity%20is%20checked%20modulo%209%2C%20providing%20a%20probabilistic%20result.%0A%0A%23%23%23%20Zero%20Knowledge%0A%0AResearch%20Articles%0A%0A-%20%5BFraud%20and%20Data%20Availability%20Proofs%5D(https%3A%2F%2Farxiv.org%2Fpdf%2F1809.09044.pdf)%3A%20Maximising%20Light%20Client%20Security%20and%20Scaling%20Blockchains%20with%20Dishonest%20Majorities.%20_Light%20clients%2C%20also%20known%20as%20Simple%20Payment%20Verification%20(SPV)%20clients%2C%20are%20nodes%20which%20only%20download%20a%20small%20portion%20of%20the%20data%20in%20a%20blockchain%2C%20and%20use%20indirect%20means%20to%20verify%20that%20a%20given%20chain%20is%20valid._%20%5C*%20Research%20Papers%20(Zero%20Knowledge%20Related)%0A-%20%5BzkBridge%3A%20Trustless%20Cross-chain%20Bridges%20Made%20Practical%5D(https%3A%2F%2Frdi.berkeley.edu%2Fzkp%2FzkBridge%2Fuploads%2Fpaper.pdf)%0A-%20%5BCaulk%3A%20Lookup%20Arguments%20in%20Sublinear%20Time%5D(https%3A%2F%2Feprint.iacr.org%2F2022%2F621.pdf)%3A%20position-hiding%20linkability%20for%20vector%20commitment%20schemes%3A%20one%20can%20prove%20in%20zero%20knowledge%20that%20one%20or%20m%20values%20that%20comprise%20commitment%20cm%20all%20belong%20to%20the%20vector%20of%20size%20N%20committed%20to%20in%20C.%0A-%20%5BHyperPlonk%3A%20Plonk%20with%20Linear-Time%20Prover%20and%20High-Degree%20Custom%20Gates%5D(https%3A%2F%2Feprint.iacr.org%2F2022%2F1355.pdf)%0A-%20%5BSLONK%E2%80%94a%20simple%20universal%20SNARK%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fslonk-a-simple-universal-snark%2F6420)%3A%20a%20simplification%20to%20PLONK%20called%20SLONK.%20We%20replace%20the%20permutation%20argument%20(the%20%E2%80%9CP%E2%80%9D%20in%20PLONK)%20in%20favour%20of%20a%20shift%20argument%20(the%20%E2%80%9CS%E2%80%9D%20in%20SLONK).%20We%20get%20a%20universal%20SNARK%20with%20the%20smallest%20known%20proof%20size%20and%20verification%20time.%0A-%20%5BKate%20commitments%20from%20the%20Lagrange%20basis%20without%20FFTs%5D(https%3A%2F%2Fnotes.ethereum.org%2FT0ZVaaywQAqP4jegqO3asg%3Fview)%3A%20how%20to%20commit%2C%20evaluate%20and%20open%20polynomials%20in%20the%20Lagrange%20basis%20without%20FFTs.%20This%20is%20the%20first%20part%20in%20a%20series%20(see%20part%201%2C%20part%202%2C%20part%203)%20showing%20how%20to%20do%20PLONK-style%20universal%20SNARKs%20without%20FFTs%0A-%20%5BHadamard%20checks%20from%20the%20Lagrange%20basis%20without%20FFTs%5D(https%3A%2F%2Fnotes.ethereum.org%2FIl4z42lmQtaUYFigsjsk2Q%3Fview)%3A%20how%20to%20prove%20Hadamard%20relations%20between%20polynomials%20in%20the%20Lagrange%20basis%20without%20FFTs.%20This%20is%20the%20second%20part%20(see%20part%201%2C%20part%202%2C%20part%203)%20in%20a%20series%20showing%20how%20to%20do%20PLONK-style%20universal%20SNARKs%20without%20FFTs.%0A-%20%5BPLONK-style%20SNARKs%20without%20FFTs%5D(https%3A%2F%2Fnotes.ethereum.org%2FDLRqK9V7RIOsTZkab8Hm_Q%3Fview)%3A%20how%20to%20do%20PLONK-style%20universal%20SNARKs%20without%20FFTs.%20This%20is%20part%203%20in%20a%20series%20(part%201%2C%20part%202%2C%20part%203).%0A-%20%5BAn%20efficient%20verifiable%20state%20for%20zk-EVM%20and%20beyondfrom%20the%20Anemoi%20hash%20function%5D(https%3A%2F%2Feprint.iacr.org%2F2022%2F1487.pdf)%0A-%20%5BPlonky2%3A%20Fast%20Recursive%20Arguments%20with%20PLONK%20and%20FRI%5D(https%3A%2F%2Fgithub.com%2Fmir-protocol%2Fplonky2%2Fblob%2Fmain%2Fplonky2%2Fplonky2.pdf)%0A%0Aarticles%20and%20learning%20resources%0A%0A-%20%5BBridging%20the%20Multichain%20Universe%20with%20Zero%20Knowledge%20Proofs%5D(https%3A%2F%2Fmedium.com%2F%40ingonyama%2Fbridging-the-multichain-universe-with-zero-knowledge-proofs-6157464fbc86)%0A-%20%5Bawesome-zkml%5D(https%3A%2F%2Fgithub.com%2Fworldcoin%2Fawesome-zkml)%0A-%20%5Bhttps%3A%2F%2Flearn.0xparc.org%2F%5D(https%3A%2F%2Flearn.0xparc.org%2F)%3A%20ZK%20Learning%20Resources%0A-%20%5BDelendum%20ZKP%20Knowledge%20base%5D(https%3A%2F%2Fkb.delendum.xyz%2F)%0A-%20%5Bhttps%3A%2F%2Fappliedzkp.org%5D(https%3A%2F%2Fappliedzkp.org%2F)%3A%20Privacy%20and%20Scaling%20Exploration%0A-%20%5Bhttps%3A%2F%2Fzkp.science%2F%5D(https%3A%2F%2Fzkp.science%2F)%3A%20Zero-Knowledge%20Proofs%0A-%20%5Bhttps%3A%2F%2Fstarkware.co%2Fstark-101%2F%5D(https%3A%2F%2Fstarkware.co%2Fstark-101%2F)%3A%20Stark%20101%3A%20write%20a%20STARK%20prover%20from%20scratch%0A-%20%5Bhttps%3A%2F%2Fdocs.starkware.co%2Fstarkex%2Findex.html%5D(https%3A%2F%2Fdocs.starkware.co%2Fstarkex%2Findex.html)%3A%20-%20Starkware%20StarkeEx%0A-%20%5BNoir%5D(https%3A%2F%2Fdocs.aztec.network%2Fdevelopers%2Fnoir)%20Noir%20is%20a%20Domain%20Specific%20Language%20for%20developing%20ZK-provable%20programs.%20(Rust%20based)%0A%20%20-%20%5Barticle%5D(https%3A%2F%2Fmedium.com%2Faztec-protocol%2Fintroducing-noir-the-universal-language-of-zero-knowledge-ff43f38d86d9)%0A%20%20-%20%5Btweet%5D(https%3A%2F%2Ftwitter.com%2Faztecnetwork%2Fstatus%2F1578082456212643840)%0A%20%20-%20%5BGrants%5D(https%3A%2F%2Faztec.network%2Fgrants%2F)%0A-%20%5BArkworks%5D(https%3A%2F%2Fgithub.com%2Farkworks-rs)%0A-%20%5Bzkrepl.dev%5D(https%3A%2F%2Fzkrepl.dev%2F)%0A-%20%5Bsuccinct%5D(https%3A%2F%2Fblog.succinct.xyz%2F)%0A-%20%5BZK%20BATCH%20ECDSA%5D(https%3A%2F%2Fblog.succinct.xyz%2Fpost%2F2022%2F10%2F03%2Fbatch-ecdsa%2F)%0A-%20%5BBatch%20ECDSA%20Verification%5D(https%3A%2F%2Fgithub.com%2Fpuma314%2Fbatch-ecdsa)%0A-%20%5BBringing%20IBC%20to%20Ethereum%20using%20ZK-Snarks%5D(https%3A%2F%2Fethresear.ch%2Ft%2Fbringing-ibc-to-ethereum-using-zk-snarks%2F13634)%0A-%20%5BMINA%20docs%5D(https%3A%2F%2Fdocs.minaprotocol.com%2F)%0A%0Aimplementation%20articles%0A%0A-%20%5BzkPoS%3A%20End-to-End%20Trustless%5D(https%3A%2F%2Fhyperoracle.medium.com%2Fzkpos-end-to-end-trustless-65edccd87c5a)%3A%20HyperOracle%20article%20on%20how%20zkPoS%20provides%20the%20ability%20of%20proving%20the%20consensus%20with%20ZK.%0A-%20%5BSuccinct%20Towards%20the%20endgame%20of%20blockchain%20interoperability%20with%20proof%20of%20consensus%5D(https%3A%2F%2Fblog.succinct.xyz%2Fpost%2F2022%2F09%2F20%2Fproof-of-consensus)%0A%0A%23%23%23%20Codebases%0A%0A-%20%5BCircom%5D(https%3A%2F%2Fgithub.com%2Fiden3%2Fcircom)%20a%20novel%20domain-specific%20language%20for%20defining%20arithmetic%20circuits%20that%20can%20be%20used%20to%20generate%20zero-knowledge%20proofs%0A-%20%5BDarkForest%5D(https%3A%2F%2Fgithub.com%2Fdarkforest-eth)%20zkSNARK%20space%20warfare%0A%20%20-%20%5BAwesome%20List%5D(https%3A%2F%2Fgithub.com%2Fsnowtigersoft%2Fawesome-darkforest)%0A%20%20-%20%5BOur%20front%20end%20code%20(the%20game%20is%20open%20source!)%5D(https%3A%2F%2Fgithub.com%2Fdarkforest-eth%2Fclient%2Ftree%2Fmaster%2Fsrc%2FFrontend)%0A%20%20-%20%5BTwitter%5D(https%3A%2F%2Ftwitter.com%2Fdarkforest_eth)%0A-%20%5BDiscord%5D(https%3A%2F%2Fdiscord.gg%2F2u2TN6v8r6)%0A%20%20-%20%5BTeam%20Blog%5D(http%3A%2F%2Fblog.zkga.me%2F)%0A%20%20%20%20-%20%5BDark%20Forest%20v0.6%5D(https%3A%2F%2Fblog.zkga.me%2Fannouncing-v6)%0A%20%20%20%20-%20%5BExploiting%20DF%20v0.5%20Artifact%20Minting%5D(https%3A%2F%2Fblog.zkga.me%2Fartifact-minting-exploit)%0A%20%20%20%20-%20%5Bv0.5%20Plugins%20Contest%20Winners%5D(https%3A%2F%2Fblog.zkga.me%2Fv5-plugins-contest-winners)%0A%20%20%20%20-%20%5BZero-Knowledge%20Proofs%20for%20Engineers%5D(https%3A%2F%2Fblog.zkga.me%2Fintro-to-zksnarks)%0A%20%20%20%20-%20%5BAnnouncing%20Dark%20Forest%5D(https%3A%2F%2Fblog.zkga.me%2Fannouncing-darkforest)%0A%20%20%20%20-%20%5BThe%20Strongest%20Crypto%20Gaming%20Thesis%3A%20Why%20we're%20building%20Dark%20Forest%5D(https%3A%2F%2Fgubsheep.mirror.xyz%2FnsteOfjATPSKH0J8lRD0j2iynmvv_C8i8eb483UzcTM)%0A%20%20-%20%5BCommunity%20plugins%5D(http%3A%2F%2Fplugins.zkga.me%2F)%0A%20%20-%20%5BCommunity-run%20wiki%5D(http%3A%2F%2Fdfwiki.net%2F)%0A%20%20-%20Player-made%20content%0A%20%20%20%20-%20%5BDark%20Forest%20GPU%20universe%20explorer%5D(https%3A%2F%2Fwww.longrocklabs.com%2Farticles%2Fthe-exploration-era-begins%2F)%0A%20%20%20%20-%20%5BGetting%20started%20with%20Dark%20Forest%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DkeY4a9cKmgg)%0A%20%20%20%20-%20%5BSetting%20up%20a%20remote%20miner%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DKus4fWNg3zo)%0A%20%20%20%20-%20%5BDark%20Forest%20battle%20timelapse%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Do9A-cfDanTY)%0A%0A-%20%5Bhalo2ecc-s%5D(https%3A%2F%2Fgithub.com%2FDelphinusLab%2Fhalo2ecc-s)%3A%20Re-implement%20an%20ecc%20circuits%20with%20halo2%0A%0A-%20%5Bplonky2%5D(https%3A%2F%2Fgithub.com%2Fmir-protocol%2Fplonky2)%3A%20a%20SNARK%20implementation%20based%20on%20techniques%20from%20PLONK%20and%20FRI.%20It%20has%20since%20expanded%20to%20include%20tools%20such%20as%20Starky%2C%20a%20highly%20performant%20STARK%20implementation.%0A%20%20-%20%5Bplonky2-solidity-verifier%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-solidity-verifier)%0A%20%20-%20%5Bplonky2-circom%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-circom)%3A%20Plonky2%20verifier%20in%20Circom%0A%20%20-%20%5Bplonky2-ed25519%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-ed25519)%3A%20SNARK%20verification%20circuits%20of%20a%20digital%20signature%20scheme%20Ed25519%20implemented%20with%20Plonky2.%0A%20%20-%20%5Bplonky2-sha256%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-sha256)%3A%20SNARK%20circuits%20of%20a%20cryptographic%20hash%20function%20SHA-256%20implemented%20with%20Plonky2.%0A%20%20-%20%5Bplonky2-sha512%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-sha512)%3A%20SNARK%20circuits%20of%20a%20cryptographic%20hash%20function%20SHA-512%20implemented%20with%20Plonky2.%0A%20%20-%20%5Bplonky2-pairing%5D(https%3A%2F%2Fgithub.com%2Fpolymerdao%2Fplonky2-pairing)%0A%0A%23%23%23%20Presentations%0A%0A-%20%5BDevcon%20VI%5D(https%3A%2F%2Farchive.devcon.org%2Farchive%2Fplaylists%2Fdevcon-6%2F)%0A-%20%5BLight%20Client%20After%20the%20Merge%5D(https%3A%2F%2Farchive.devcon.org%2Farchive%2Fwatch%2F6%2Flight-clients-after-the-merge%2F%3Fplaylist%3DDevcon%25206%26tab%3DYouTube)%20%5Bvideo%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DZHNrAXf3RDE)%0A-%20%5BWhat%20to%20Know%20about%20Zero%20Knowledge%5D(https%3A%2F%2Farchive.devcon.org%2Farchive%2Fwatch%2F6%2Fwhat-to-know-about-zero-knowledge%2F%3Fplaylist%3DDevcon%25206%26tab%3DYouTube)%0A-%20%5BZK%20Application%20ShowCase%5D(https%3A%2F%2Farchive.devcon.org%2Farchive%2Fwatch%2F6%2Fzk-application-showcase%2F%3Fplaylist%3DDevcon%25206%26tab%3DYouTube)%0A-%20%5BZK%20Badges%3A%20How%20to%20prove%20that%20you%20donated%20to%20Gitcoin%20grants%5D(https%3A%2F%2Farchive.devcon.org%2Farchive%2Fwatch%2F6%2Fzk-badges%2F%3Fplaylist%3DDevcon%25206%26tab%3DYouTube)%0A-%20%5BZK%20Security%20Self%20Led%20Session%5D(https%3A%2F%2Farchive.devcon.org%2Farchive%2Fwatch%2F6%2Fzk-security-self-led-session%2F%3Fplaylist%3DDevcon%25206%26tab%3DYouTube)%0A-%20%5BzkEVM%20Vs%20EVM%3A%20Full%20Equivalence%3F%5D(https%3A%2F%2Farchive.devcon.org%2Farchive%2Fwatch%2F6%2Fzkevm-vs-evm-full-equivalence%2F%3Fplaylist%3DDevcon%25206%26tab%3DYouTube)%0A-%20%5BZK%20Application%20Design%20Patterns%5D(https%3A%2F%2Farchive.devcon.org%2Farchive%2Fwatch%2F6%2Fzk-application-design-patterns%2F%3Fplaylist%3DDevcon%25206%26tab%3DYouTube)%20%5Bvideo%5D(https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D-PUKinjbLR8)%0A-%20%5BApplied%20ZK%20SLS%20presentations%5D(https%3A%2F%2Fwww.notion.so%2F360fcd3f2a824759b1373ddeef5bf564)%0A%0A%23%23%23%20Additional%20Information%0A%0A-%20Review%20%5BENS%20Bridging%20Strategy%5D(https%3A%2F%2Fmedium.com%2Fthe-ethereum-name-service%2Fmvp-of-ens-on-l2-with-optimism-demo-video-how-to-try-it-yourself-b44c390cbd67)%20and%20%5Brepo%5D(https%3A%2F%2Fgithub.com%2Fensdomains%2Fl2gateway-demo%2F)%0A-%20%5BSuccinct%5D(https%3A%2F%2Fblog.succinct.xyz%2Fpost%2F2022%2F09%2F20%2Fproof-of-consensus)%20%5B%24600K%5D(https%3A%2F%2Fforum.gnosis.io%2Ft%2Fgip-57-should-gnosis-dao-support-research-of-a-zksnark-enabled-light-client-and-bridge%2F5421)%20%5Btweet%5D(https%3A%2F%2Ftwitter.com%2Fsuccinctlabs%2Fstatus%2F1572299292177481729)%20%5BDemo%5D(https%3A%2F%2Fwww.zkbridge.wtf%2F)%20%5Bgithub%5D(https%3A%2F%2Fgithub.com%2Fsuccinctlabs)%20%5Bvideo%5D(https%3A%2F%2Fyoutu.be%2FCt6H5GcnA0A%3Ft%3D15554)%20built%20using%20%5Bcircom%5D(https%3A%2F%2Fdocs.circom.io%2F)%0A-%20%5Bcircom%5D(https%3A%2F%2Fdocs.circom.io%2F)%0A-%20%5BArkworks%5D(https%3A%2F%2Fgithub.com%2Farkworks-rs%2F)%2C%20%5Btutorial%5D(https%3A%2F%2Fgithub.com%2Farkworks-rs%2Fr1cs-tutorial%2F)%2C%20%5Btwitter%5D(https%3A%2F%2Ftwitter.com%2Farkworks_rs)%2C%20%5Bvideo%5D(https%3A%2F%2Fyoutu.be%2FCt6H5GcnA0A%3Ft%3D7429)%0A-%20%5BAztec.network%5D(http%3A%2F%2FAztec.network)%20%5BNoir%5D(https%3A%2F%2Faztec.network%2Fnoir)%20%5Bintro%5D(https%3A%2F%2Fmedium.com%2Faztec-protocol%2Fintroducing-noir-the-universal-language-of-zero-knowledge-ff43f38d86d9)%2C%20%5Bgithub%5D(https%3A%2F%2Fgithub.com%2Fnoir-lang%2Fnoir)%2C%20%5Btwitter%5D(https%3A%2F%2Ftwitter.com%2Faztecnetwork)%2C%20%5Bdocs%5D(https%3A%2F%2Fnoir-lang.github.io%2Fbook%2Findex.html)%0A-%20%5BGNark%5D(https%3A%2F%2Fgithub.com%2FConsenSys%2Fgnark)%0A-%20%5BElectronLabs%5D(https%3A%2F%2Felectronlabs.org%2F)%0A-%20%5BZKU%5D(https%3A%2F%2Fzku.one%2F)%20%5BLearning%5D(https%3A%2F%2Fwww.notion.so%2FLearning-50b5a6ecc45b46248323f0e552b6885f)%0A-%20Review%20%5Bmatter-labs%20knowledge%20base%5D(https%3A%2F%2Fgithub.com%2Fmatter-labs%2Fawesome-zero-knowledge-proofs%23learn)%0A%0A-%20%5BzkSNARKS%20explained%20like%20you're%20someone%20who%20knows%20some%20math%20and%20some%20coding%5D(https%3A%2F%2Fwww.reddit.com%2Fr%2FzkTech%2Fcomments%2Ftfjvrj%2Fzksnarks_explained_like_youre_someone_who_knows%2F)%0A-%20%5BThe%20Halo2%20Book%5D(https%3A%2F%2Fzcash.github.io%2Fhalo2%2Fconcepts%2Fproofs.html)%0A-%20%5BA%20survey%20of%20elliptic%20curves%20for%20proof%20systems%5D(https%3A%2F%2Feprint.iacr.org%2F2022%2F586.pdf)%0A-%20zkEVM%0A%20%20-%20%5BzkSync%20Era%5D(https%3A%2F%2Fera.zksync.io%2Fdocs%2Fdev%2F)%0A%20%20-%20%5BPolygon%20zkEVM%5D(https%3A%2F%2Fwiki.polygon.technology%2Fdocs%2FzkEVM%2Fdevelop%2F)%0A%20%20-%20%5BzkSync%20zkEVM%5D(https%3A%2F%2Fdocs.zksync.io%2Fzkevm%2F)%0A%20%20-%20%5BConsenSys%20zkEVM%5D(https%3A%2F%2Fdocs.zkevm.consensys.net%2Foverview)%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./zkpos-BOvMI3_R.js"),[]),path:"/research/zk/zkpos",type:"mdx",filePath:"research/zk/zkpos.mdx",content:"%23%20ZK%20Proof%20of%20Stake%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AHere%20we%20review%20how%20zero%20knowledge%20primitives%20can%20be%20applied%20to%20confirm%20Proof%20of%20Stake%20Consensus.%0A%0A%23%23%20References%0A%0A-%20%5BPaths%20toward%20single-slot%20finality%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fsingle_slot_finality)%3A%20A%20look%20at%20how%20to%20improve%20Ethereum%E2%80%99s%20LMD%20GHOST%20%2B%20Casper%20FFG%20consensus.%0A-%20%5BzkPoS%3A%20End-to-End%20Trustless%5D(https%3A%2F%2Fhyperoracle.medium.com%2Fzkpos-end-to-end-trustless-65edccd87c5a)%3A%20HyperOracle%20article%20on%20how%20zkPoS%20provides%20the%20ability%20of%20proving%20the%20consensus%20with%20ZK.%0A-%20%5Bhalo2ecc-s%5D(https%3A%2F%2Fgithub.com%2FDelphinusLab%2Fhalo2ecc-s%2Ftree%2Fpairing)%3A%20Re-implement%20an%20ecc%20circuits%20with%20halo2%0A-%20%5BAn%20efficient%20verifiable%20state%20for%20zk-EVM%20and%20beyondfrom%20the%20Anemoi%20hash%20function%5D(https%3A%2F%2Feprint.iacr.org%2F2022%2F1487.pdf)%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./zkpos-BOvMI3_R.js"),[]),path:"/research/zk/zkpos.html",type:"mdx",filePath:"research/zk/zkpos.mdx",content:"%23%20ZK%20Proof%20of%20Stake%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AHere%20we%20review%20how%20zero%20knowledge%20primitives%20can%20be%20applied%20to%20confirm%20Proof%20of%20Stake%20Consensus.%0A%0A%23%23%20References%0A%0A-%20%5BPaths%20toward%20single-slot%20finality%5D(https%3A%2F%2Fnotes.ethereum.org%2F%40vbuterin%2Fsingle_slot_finality)%3A%20A%20look%20at%20how%20to%20improve%20Ethereum%E2%80%99s%20LMD%20GHOST%20%2B%20Casper%20FFG%20consensus.%0A-%20%5BzkPoS%3A%20End-to-End%20Trustless%5D(https%3A%2F%2Fhyperoracle.medium.com%2Fzkpos-end-to-end-trustless-65edccd87c5a)%3A%20HyperOracle%20article%20on%20how%20zkPoS%20provides%20the%20ability%20of%20proving%20the%20consensus%20with%20ZK.%0A-%20%5Bhalo2ecc-s%5D(https%3A%2F%2Fgithub.com%2FDelphinusLab%2Fhalo2ecc-s%2Ftree%2Fpairing)%3A%20Re-implement%20an%20ecc%20circuits%20with%20halo2%0A-%20%5BAn%20efficient%20verifiable%20state%20for%20zk-EVM%20and%20beyondfrom%20the%20Anemoi%20hash%20function%5D(https%3A%2F%2Feprint.iacr.org%2F2022%2F1487.pdf)%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./zksnarks-Dqw1_Ifa.js"),[]),path:"/research/zk/zksnarks",type:"mdx",filePath:"research/zk/zksnarks.mdx",content:"%23%20zk-SNARKs%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AZero-Knowledge%20Succinct%20Non-Interactive%20Argument%20of%20Knowledge%0A%0AA%20proof%20construction%20where%20one%20can%20prove%20possession%20of%20certain%20information%2C%20e.g.%20a%20secret%20key%2C%20without%20revealing%20that%20information%2C%20and%20without%20any%20interaction%20between%20the%20prover%20and%20verifier.%0A%0A%23%23%20References%0A%0A-%20%5BZk-SNARKs%3A%20Under%20the%20Hood%5D(https%3A%2F%2Fmedium.com%2F%40VitalikButerin%2Fzk-snarks-under-the-hood-b33151a013f6)%0A-%20%5BWhat%20are%20zk-SNARKs%5D(https%3A%2F%2Fz.cash%2Ftechnology%2Fzksnarks%2F)%0A-%20%5BIntroduction%20to%20zk-SNARKs%5D(https%3A%2F%2Fconsensys.net%2Fblog%2Fdevelopers%2Fintroduction-to-zk-snarks%2F)%0A-%20%5Bzk-STARKs%20vs.%20zk-SNARKs%20explained%5D(https%3A%2F%2Fcointelegraph.com%2Fexplained%2Fzk-starks-vs-zk-snarks-explained)%0A",lastUpdatedAt:1753850345e3},{lazy:()=>J(()=>import("./zksnarks-Dqw1_Ifa.js"),[]),path:"/research/zk/zksnarks.html",type:"mdx",filePath:"research/zk/zksnarks.mdx",content:"%23%20zk-SNARKs%0A%0A-%20date%3A%202023-02-04%0A-%20last%20updated%3A%202023-02-04%0A%0A%23%23%20Overview%0A%0AZero-Knowledge%20Succinct%20Non-Interactive%20Argument%20of%20Knowledge%0A%0AA%20proof%20construction%20where%20one%20can%20prove%20possession%20of%20certain%20information%2C%20e.g.%20a%20secret%20key%2C%20without%20revealing%20that%20information%2C%20and%20without%20any%20interaction%20between%20the%20prover%20and%20verifier.%0A%0A%23%23%20References%0A%0A-%20%5BZk-SNARKs%3A%20Under%20the%20Hood%5D(https%3A%2F%2Fmedium.com%2F%40VitalikButerin%2Fzk-snarks-under-the-hood-b33151a013f6)%0A-%20%5BWhat%20are%20zk-SNARKs%5D(https%3A%2F%2Fz.cash%2Ftechnology%2Fzksnarks%2F)%0A-%20%5BIntroduction%20to%20zk-SNARKs%5D(https%3A%2F%2Fconsensys.net%2Fblog%2Fdevelopers%2Fintroduction-to-zk-snarks%2F)%0A-%20%5Bzk-STARKs%20vs.%20zk-SNARKs%20explained%5D(https%3A%2F%2Fcointelegraph.com%2Fexplained%2Fzk-starks-vs-zk-snarks-explained)%0A",lastUpdatedAt:1753850345e3}];var Hh={background5:"var(--vocs-color_background5)",border:"var(--vocs-color_border)",border2:"var(--vocs-color_border2)"},km={default:"system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif",mono:'ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace'},Dm={default:"var(--vocs-fontFamily_default)",mono:"var(--vocs-fontFamily_mono)"},Qn={4:"var(--vocs-space_4)",8:"var(--vocs-space_8)",24:"var(--vocs-space_24)"},nh={horizontalPadding:"var(--vocs-content_horizontalPadding)",verticalPadding:"var(--vocs-content_verticalPadding)",width:"var(--vocs-content_width)"};function Fg(t){var a,i,r="";if(typeof t=="string"||typeof t=="number")r+=t;else if(typeof t=="object")if(Array.isArray(t)){var c=t.length;for(a=0;a<c;a++)t[a]&&(i=Fg(t[a]))&&(r&&(r+=" "),r+=i)}else for(i in t)t[i]&&(r&&(r+=" "),r+=i);return r}function l2(){for(var t,a,i=0,r="",c=arguments.length;i<c;i++)(t=arguments[i])&&(a=Fg(t))&&(r&&(r+=" "),r+=a);return r}function _w(t){var a=t.match(/^var\((.*)\)$/);return a?a[1]:t}function Me(t,a){var i={};{var r=t;for(var c in r){var l=r[c];l!=null&&(i[_w(c)]=l)}}return Object.defineProperty(i,"toString",{value:function(){return Object.keys(this).map(d=>"".concat(d,":").concat(this[d])).join(";")},writable:!1}),i}var Sw="var(--vocs_ExternalLink_iconUrl)",xw="vocs_ExternalLink";const Tw=b.forwardRef(({className:t,children:a,hideExternalIcon:i,href:r,...c},l)=>{const{basePath:u}=m0(),d=u;return g.jsx("a",{ref:l,className:l2(t,i||typeof a!="string"?void 0:xw),href:r,target:"_blank",rel:"noopener noreferrer",style:Me({[Sw]:`url(${d}/.vocs/icons/arrow-diagonal.svg)`}),...c,children:a})});var Bm="vocs_Link",Em="vocs_Link_accent",_m="vocs_Link_styleless",zh=new Map,Lr=new WeakMap,Sm=0,Rw=void 0;function Pw(t){return t?(Lr.has(t)||(Sm+=1,Lr.set(t,Sm.toString())),Lr.get(t)):"0"}function Iw(t){return Object.keys(t).sort().filter(a=>t[a]!==void 0).map(a=>`${a}_${a==="root"?Pw(t.root):t[a]}`).toString()}function Mw(t){const a=Iw(t);let i=zh.get(a);if(!i){const r=new Map;let c;const l=new IntersectionObserver(u=>{u.forEach(d=>{var F;const p=d.isIntersecting&&c.some(f=>d.intersectionRatio>=f);t.trackVisibility&&typeof d.isVisible>"u"&&(d.isVisible=p),(F=r.get(d.target))==null||F.forEach(f=>{f(p,d)})})},t);c=l.thresholds||(Array.isArray(t.threshold)?t.threshold:[t.threshold||0]),i={id:a,observer:l,elements:r},zh.set(a,i)}return i}function Lw(t,a,i={},r=Rw){if(typeof window.IntersectionObserver>"u"&&r!==void 0){const F=t.getBoundingClientRect();return a(r,{isIntersecting:r,target:t,intersectionRatio:typeof i.threshold=="number"?i.threshold:0,time:0,boundingClientRect:F,intersectionRect:F,rootBounds:F}),()=>{}}const{id:c,observer:l,elements:u}=Mw(i),d=u.get(t)||[];return u.has(t)||u.set(t,d),d.push(a),l.observe(t),function(){d.splice(d.indexOf(a),1),d.length===0&&(u.delete(t),l.unobserve(t)),u.size===0&&(l.disconnect(),zh.delete(c))}}function mg({threshold:t,delay:a,trackVisibility:i,rootMargin:r,root:c,triggerOnce:l,skip:u,initialInView:d,fallbackInView:F,onChange:p}={}){var f;const[m,C]=b.useState(null),y=b.useRef(p),[w,v]=b.useState({inView:!!d,entry:void 0});y.current=p,b.useEffect(()=>{if(u||!m)return;let E;return E=Lw(m,(T,P)=>{v({inView:T,entry:P}),y.current&&y.current(T,P),P.isIntersecting&&l&&E&&(E(),E=void 0)},{root:c,rootMargin:r,threshold:t,trackVisibility:i,delay:a},F),()=>{E&&E()}},[Array.isArray(t)?t.toString():t,m,c,r,l,u,i,F,a]);const D=(f=w.entry)==null?void 0:f.target,B=b.useRef(void 0);!m&&D&&!l&&!u&&B.current!==D&&(B.current=D,v({inView:!!d,entry:void 0}));const S=[C,w.inView,w.entry];return S.ref=S[0],S.inView=S[1],S.entry=S[2],S}function Ow(...t){return a=>{Nw(a,...t)}}function Nw(t,...a){a.forEach(i=>{typeof i=="function"?i(t):i!=null&&(i.current=t)})}const Ra=b.forwardRef((t,a)=>{const i=()=>{var l;return(l=ku.find(u=>u.path===t.to))==null?void 0:l.lazy()},{ref:r,inView:c}=mg();return b.useEffect(()=>{c&&i()},[c]),g.jsx(Ha,{ref:Ow(a,r),...t})}),ke=b.forwardRef((t,a)=>{const{hideExternalIcon:i,href:r,variant:c="accent"}=t,{pathname:l}=i0();if(r!=null&&r.match(/^(www|https?)/))return g.jsx(Tw,{...t,ref:a,className:l2(t.className,Bm,c==="accent"&&Em,c==="styleless"&&_m),hideExternalIcon:i});const[u,d]=(r||"").split("#"),F=`${u||l}${d?`#${d}`:""}`;return g.jsx(Ra,{...t,ref:a,className:l2(t.className,Bm,c==="accent"&&Em,c==="styleless"&&_m),to:F})});var Hw="vocs_NotFound",zw="vocs_NotFound_divider",jw="vocs_H1",gg="vocs_Heading",fg="vocs_Heading_slugTarget";function za({level:t,...a}){const i=`h${t}`;return g.jsxs(i,{...a,id:void 0,className:l2(a.className,gg),children:[g.jsx("div",{id:a.id,className:fg}),a.children]})}function bg(t){return g.jsx(za,{...t,className:l2(t.className,jw),level:1})}var Vw="vocs_Paragraph";function Cg(t){return g.jsx("p",{...t,className:l2(t.className,Vw)})}function Uw(){return g.jsxs("div",{className:Hw,children:[g.jsx(bg,{children:"Page Not Found"}),g.jsx("div",{style:{height:Qn[24]}}),g.jsx("hr",{className:zw}),g.jsx("div",{style:{height:Qn[24]}}),g.jsx(Cg,{children:"The page you were looking for could not be found."}),g.jsx("div",{style:{height:Qn[8]}}),g.jsx(ke,{href:"/",children:"Go to Home Page"})]})}var qw="var(--vocs_Banner_bannerBackgroundColor)",Ww="var(--vocs_Banner_bannerHeight)",Gw="var(--vocs_Banner_bannerTextColor)",Kw="vocs_Banner",Zw="vocs_Banner_content",Xw="vocs_Banner_inner",Yw="vocs_Banner_closeButton";const Jw=Object.getPrototypeOf(Qw).constructor;async function Qw(t,a){return new Jw(String(t))(a)}function $w(t,a){return new Function(String(t))(a)}function Lo(t,a){if(t==null)return{};var i={},r=Object.keys(t),c,l;for(l=0;l<r.length;l++)c=r[l],!(a.indexOf(c)>=0)&&(i[c]=t[c]);return i}var ek=["color"],tk=b.forwardRef(function(t,a){var i=t.color,r=i===void 0?"currentColor":i,c=Lo(t,ek);return b.createElement("svg",Object.assign({width:"15",height:"15",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg"},c,{ref:a}),b.createElement("path",{d:"M6.85355 3.14645C7.04882 3.34171 7.04882 3.65829 6.85355 3.85355L3.70711 7H12.5C12.7761 7 13 7.22386 13 7.5C13 7.77614 12.7761 8 12.5 8H3.70711L6.85355 11.1464C7.04882 11.3417 7.04882 11.6583 6.85355 11.8536C6.65829 12.0488 6.34171 12.0488 6.14645 11.8536L2.14645 7.85355C1.95118 7.65829 1.95118 7.34171 2.14645 7.14645L6.14645 3.14645C6.34171 2.95118 6.65829 2.95118 6.85355 3.14645Z",fill:r,fillRule:"evenodd",clipRule:"evenodd"}))}),ok=["color"],ak=b.forwardRef(function(t,a){var i=t.color,r=i===void 0?"currentColor":i,c=Lo(t,ok);return b.createElement("svg",Object.assign({width:"15",height:"15",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg"},c,{ref:a}),b.createElement("path",{d:"M6.1584 3.13508C6.35985 2.94621 6.67627 2.95642 6.86514 3.15788L10.6151 7.15788C10.7954 7.3502 10.7954 7.64949 10.6151 7.84182L6.86514 11.8418C6.67627 12.0433 6.35985 12.0535 6.1584 11.8646C5.95694 11.6757 5.94673 11.3593 6.1356 11.1579L9.565 7.49985L6.1356 3.84182C5.94673 3.64036 5.95694 3.32394 6.1584 3.13508Z",fill:r,fillRule:"evenodd",clipRule:"evenodd"}))}),nk=["color"],ik=b.forwardRef(function(t,a){var i=t.color,r=i===void 0?"currentColor":i,c=Lo(t,nk);return b.createElement("svg",Object.assign({width:"15",height:"15",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg"},c,{ref:a}),b.createElement("path",{d:"M12.8536 2.85355C13.0488 2.65829 13.0488 2.34171 12.8536 2.14645C12.6583 1.95118 12.3417 1.95118 12.1464 2.14645L7.5 6.79289L2.85355 2.14645C2.65829 1.95118 2.34171 1.95118 2.14645 2.14645C1.95118 2.34171 1.95118 2.65829 2.14645 2.85355L6.79289 7.5L2.14645 12.1464C1.95118 12.3417 1.95118 12.6583 2.14645 12.8536C2.34171 13.0488 2.65829 13.0488 2.85355 12.8536L7.5 8.20711L12.1464 12.8536C12.3417 13.0488 12.6583 13.0488 12.8536 12.8536C13.0488 12.6583 13.0488 12.3417 12.8536 12.1464L8.20711 7.5L12.8536 2.85355Z",fill:r,fillRule:"evenodd",clipRule:"evenodd"}))}),rk=["color"],sk=b.forwardRef(function(t,a){var i=t.color,r=i===void 0?"currentColor":i,c=Lo(t,rk);return b.createElement("svg",Object.assign({width:"15",height:"15",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg"},c,{ref:a}),b.createElement("path",{d:"M3.5 2C3.22386 2 3 2.22386 3 2.5V12.5C3 12.7761 3.22386 13 3.5 13H11.5C11.7761 13 12 12.7761 12 12.5V6H8.5C8.22386 6 8 5.77614 8 5.5V2H3.5ZM9 2.70711L11.2929 5H9V2.70711ZM2 2.5C2 1.67157 2.67157 1 3.5 1H8.5C8.63261 1 8.75979 1.05268 8.85355 1.14645L12.8536 5.14645C12.9473 5.24021 13 5.36739 13 5.5V12.5C13 13.3284 12.3284 14 11.5 14H3.5C2.67157 14 2 13.3284 2 12.5V2.5Z",fill:r,fillRule:"evenodd",clipRule:"evenodd"}))}),ck=["color"],lk=b.forwardRef(function(t,a){var i=t.color,r=i===void 0?"currentColor":i,c=Lo(t,ck);return b.createElement("svg",Object.assign({width:"15",height:"15",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg"},c,{ref:a}),b.createElement("path",{d:"M1.5 5.25C1.91421 5.25 2.25 4.91421 2.25 4.5C2.25 4.08579 1.91421 3.75 1.5 3.75C1.08579 3.75 0.75 4.08579 0.75 4.5C0.75 4.91421 1.08579 5.25 1.5 5.25ZM4 4.5C4 4.22386 4.22386 4 4.5 4H13.5C13.7761 4 14 4.22386 14 4.5C14 4.77614 13.7761 5 13.5 5H4.5C4.22386 5 4 4.77614 4 4.5ZM4.5 7C4.22386 7 4 7.22386 4 7.5C4 7.77614 4.22386 8 4.5 8H13.5C13.7761 8 14 7.77614 14 7.5C14 7.22386 13.7761 7 13.5 7H4.5ZM4.5 10C4.22386 10 4 10.2239 4 10.5C4 10.7761 4.22386 11 4.5 11H13.5C13.7761 11 14 10.7761 14 10.5C14 10.2239 13.7761 10 13.5 10H4.5ZM2.25 7.5C2.25 7.91421 1.91421 8.25 1.5 8.25C1.08579 8.25 0.75 7.91421 0.75 7.5C0.75 7.08579 1.08579 6.75 1.5 6.75C1.91421 6.75 2.25 7.08579 2.25 7.5ZM1.5 11.25C1.91421 11.25 2.25 10.9142 2.25 10.5C2.25 10.0858 1.91421 9.75 1.5 9.75C1.08579 9.75 0.75 10.0858 0.75 10.5C0.75 10.9142 1.08579 11.25 1.5 11.25Z",fill:r,fillRule:"evenodd",clipRule:"evenodd"}))}),hk=["color"],Du=b.forwardRef(function(t,a){var i=t.color,r=i===void 0?"currentColor":i,c=Lo(t,hk);return b.createElement("svg",Object.assign({width:"15",height:"15",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg"},c,{ref:a}),b.createElement("path",{d:"M10 6.5C10 8.433 8.433 10 6.5 10C4.567 10 3 8.433 3 6.5C3 4.567 4.567 3 6.5 3C8.433 3 10 4.567 10 6.5ZM9.30884 10.0159C8.53901 10.6318 7.56251 11 6.5 11C4.01472 11 2 8.98528 2 6.5C2 4.01472 4.01472 2 6.5 2C8.98528 2 11 4.01472 11 6.5C11 7.56251 10.6318 8.53901 10.0159 9.30884L12.8536 12.1464C13.0488 12.3417 13.0488 12.6583 12.8536 12.8536C12.6583 13.0488 12.3417 13.0488 12.1464 12.8536L9.30884 10.0159Z",fill:r,fillRule:"evenodd",clipRule:"evenodd"}))}),uk=["color"],dk=b.forwardRef(function(t,a){var i=t.color,r=i===void 0?"currentColor":i,c=Lo(t,uk);return b.createElement("svg",Object.assign({width:"15",height:"15",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg"},c,{ref:a}),b.createElement("path",{d:"M12.1464 1.14645C12.3417 0.951184 12.6583 0.951184 12.8535 1.14645L14.8535 3.14645C15.0488 3.34171 15.0488 3.65829 14.8535 3.85355L10.9109 7.79618C10.8349 7.87218 10.7471 7.93543 10.651 7.9835L6.72359 9.94721C6.53109 10.0435 6.29861 10.0057 6.14643 9.85355C5.99425 9.70137 5.95652 9.46889 6.05277 9.27639L8.01648 5.34897C8.06455 5.25283 8.1278 5.16507 8.2038 5.08907L12.1464 1.14645ZM12.5 2.20711L8.91091 5.79618L7.87266 7.87267L8.12731 8.12732L10.2038 7.08907L13.7929 3.5L12.5 2.20711ZM9.99998 2L8.99998 3H4.9C4.47171 3 4.18056 3.00039 3.95552 3.01877C3.73631 3.03668 3.62421 3.06915 3.54601 3.10899C3.35785 3.20487 3.20487 3.35785 3.10899 3.54601C3.06915 3.62421 3.03669 3.73631 3.01878 3.95552C3.00039 4.18056 3 4.47171 3 4.9V11.1C3 11.5283 3.00039 11.8194 3.01878 12.0445C3.03669 12.2637 3.06915 12.3758 3.10899 12.454C3.20487 12.6422 3.35785 12.7951 3.54601 12.891C3.62421 12.9309 3.73631 12.9633 3.95552 12.9812C4.18056 12.9996 4.47171 13 4.9 13H11.1C11.5283 13 11.8194 12.9996 12.0445 12.9812C12.2637 12.9633 12.3758 12.9309 12.454 12.891C12.6422 12.7951 12.7951 12.6422 12.891 12.454C12.9309 12.3758 12.9633 12.2637 12.9812 12.0445C12.9996 11.8194 13 11.5283 13 11.1V6.99998L14 5.99998V11.1V11.1207C14 11.5231 14 11.8553 13.9779 12.1259C13.9549 12.407 13.9057 12.6653 13.782 12.908C13.5903 13.2843 13.2843 13.5903 12.908 13.782C12.6653 13.9057 12.407 13.9549 12.1259 13.9779C11.8553 14 11.5231 14 11.1207 14H11.1H4.9H4.87934C4.47686 14 4.14468 14 3.87409 13.9779C3.59304 13.9549 3.33469 13.9057 3.09202 13.782C2.7157 13.5903 2.40973 13.2843 2.21799 12.908C2.09434 12.6653 2.04506 12.407 2.0221 12.1259C1.99999 11.8553 1.99999 11.5231 2 11.1207V11.1206V11.1V4.9V4.87935V4.87932V4.87931C1.99999 4.47685 1.99999 4.14468 2.0221 3.87409C2.04506 3.59304 2.09434 3.33469 2.21799 3.09202C2.40973 2.71569 2.7157 2.40973 3.09202 2.21799C3.33469 2.09434 3.59304 2.04506 3.87409 2.0221C4.14468 1.99999 4.47685 1.99999 4.87932 2H4.87935H4.9H9.99998Z",fill:r,fillRule:"evenodd",clipRule:"evenodd"}))});function To(t,a){if(typeof t!="object"||t===null)return t;if(Array.isArray(t))return t.map((r,c)=>To(r,c));const i=t.props.children?{...t.props,children:To(t.props.children)}:t.props;return a0.createElement(t.type,{...i,key:a})}function Ak({hide:t}){const{banner:a}=m0(),i=b.useMemo(()=>{const r=(a==null?void 0:a.content)??"";if(!r)return null;if(typeof r!="string")return()=>To(r);const{default:c}=$w(r,{...dy,Fragment:b.Fragment});return c},[a]);return i?g.jsx("div",{className:l2(Kw),style:Me({[qw]:a==null?void 0:a.backgroundColor,[Gw]:a==null?void 0:a.textColor}),children:g.jsxs("div",{className:l2(Xw),children:[g.jsx("div",{className:l2(Zw),children:g.jsx(i,{})}),(a==null?void 0:a.dismissable)!=="false"&&g.jsx("button",{className:l2(Yw),onClick:t,type:"button",children:g.jsx(ik,{width:14,height:14})})]})}):null}var pk="vocs_Content";function yg({children:t,className:a}){return g.jsx("article",{className:l2(a,pk),children:t})}const Fk=({children:t})=>t,mk=({children:t})=>t,Bu=({children:t})=>t;function vg({items:t,pathname:a}){const i=a.replace(/\.html$/,""),r=[];for(const c of t)(c.link&&i.startsWith(c.match||c.link)||c.items&&vg({items:c.items,pathname:a}).length>0)&&r.push(c.id);return r}function si({items:t,pathname:a}){return b.useMemo(()=>vg({items:t,pathname:a}),[t,a])}function to(){const t=b.useContext(wg);if(!t)throw new Error("`usePageData` must be used within `PageDataContext.Provider`.");return t}const wg=b.createContext(void 0);function ws(){const{pathname:t}=i0(),a=m0(),{sidebar:i}=a;if(!i)return{items:[]};if(Array.isArray(i))return{items:i};const r=b.useMemo(()=>{const c=Object.keys(i).filter(l=>t.startsWith(l));return c[c.length-1]},[i,t]);return r?Array.isArray(i[r])?{key:r,items:i[r]}:{...i[r],key:r}:{items:[]}}function oo(){const{aiCta:t}=m0(),a=ws(),{frontmatter:i}=to(),{layout:r,showLogo:c,showAiCta:l,showOutline:u,showSidebar:d,showTopNav:F}=i||{},p=r??"docs";return{layout:p,get showLogo(){return typeof c<"u"?c:!0},get showAiCta(){return typeof l<"u"?l:t===!1?!1:p==="docs"},get showOutline(){return typeof u<"u"?u:p==="docs"},get showSidebar(){return a.items.length===0?!1:typeof d<"u"?d:!(p==="minimal"||p==="landing")},get showTopNav(){return typeof F<"u"?F:!0}}}function F2(t,a,{checkForDefaultPrevented:i=!0}={}){return function(c){if(t==null||t(c),i===!1||!c.defaultPrevented)return a==null?void 0:a(c)}}function xm(t,a){if(typeof t=="function")return t(a);t!=null&&(t.current=a)}function ci(...t){return a=>{let i=!1;const r=t.map(c=>{const l=xm(c,a);return!i&&typeof l=="function"&&(i=!0),l});if(i)return()=>{for(let c=0;c<r.length;c++){const l=r[c];typeof l=="function"?l():xm(t[c],null)}}}}function n0(...t){return b.useCallback(ci(...t),t)}function gk(t,a){const i=b.createContext(a),r=l=>{const{children:u,...d}=l,F=b.useMemo(()=>d,Object.values(d));return g.jsx(i.Provider,{value:F,children:u})};r.displayName=t+"Provider";function c(l){const u=b.useContext(i);if(u)return u;if(a!==void 0)return a;throw new Error(`\`${l}\` must be used within \`${t}\``)}return[r,c]}function Le(t,a=[]){let i=[];function r(l,u){const d=b.createContext(u),F=i.length;i=[...i,u];const p=m=>{var B;const{scope:C,children:y,...w}=m,v=((B=C==null?void 0:C[t])==null?void 0:B[F])||d,D=b.useMemo(()=>w,Object.values(w));return g.jsx(v.Provider,{value:D,children:y})};p.displayName=l+"Provider";function f(m,C){var v;const y=((v=C==null?void 0:C[t])==null?void 0:v[F])||d,w=b.useContext(y);if(w)return w;if(u!==void 0)return u;throw new Error(`\`${m}\` must be used within \`${l}\``)}return[p,f]}const c=()=>{const l=i.map(u=>b.createContext(u));return function(d){const F=(d==null?void 0:d[t])||l;return b.useMemo(()=>({[`__scope${t}`]:{...d,[t]:F}}),[d,F])}};return c.scopeName=t,[r,fk(c,...a)]}function fk(...t){const a=t[0];if(t.length===1)return a;const i=()=>{const r=t.map(c=>({useScope:c(),scopeName:c.scopeName}));return function(l){const u=r.reduce((d,{useScope:F,scopeName:p})=>{const m=F(l)[`__scope${p}`];return{...d,...m}},{});return b.useMemo(()=>({[`__scope${a.scopeName}`]:u}),[u])}};return i.scopeName=a.scopeName,i}var De=globalThis!=null&&globalThis.document?b.useLayoutEffect:()=>{},bk=bs[" useId ".trim().toString()]||(()=>{}),Ck=0;function ve(t){const[a,i]=b.useState(bk());return De(()=>{i(r=>r??String(Ck++))},[t]),t||(a?`radix-${a}`:"")}var yk=bs[" useInsertionEffect ".trim().toString()]||De;function Qe({prop:t,defaultProp:a,onChange:i=()=>{},caller:r}){const[c,l,u]=vk({defaultProp:a,onChange:i}),d=t!==void 0,F=d?t:c;{const f=b.useRef(t!==void 0);b.useEffect(()=>{const m=f.current;m!==d&&console.warn(`${r} is changing from ${m?"controlled":"uncontrolled"} to ${d?"controlled":"uncontrolled"}. Components should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled value for the lifetime of the component.`),f.current=d},[d,r])}const p=b.useCallback(f=>{var m;if(d){const C=wk(f)?f(t):f;C!==t&&((m=u.current)==null||m.call(u,C))}else l(f)},[d,t,l,u]);return[F,p]}function vk({defaultProp:t,onChange:a}){const[i,r]=b.useState(t),c=b.useRef(i),l=b.useRef(a);return yk(()=>{l.current=a},[a]),b.useEffect(()=>{var u;c.current!==i&&((u=l.current)==null||u.call(l,i),c.current=i)},[i,c]),[i,r,l]}function wk(t){return typeof t=="function"}function Pa(t){const a=kk(t),i=b.forwardRef((r,c)=>{const{children:l,...u}=r,d=b.Children.toArray(l),F=d.find(Bk);if(F){const p=F.props.children,f=d.map(m=>m===F?b.Children.count(p)>1?b.Children.only(null):b.isValidElement(p)?p.props.children:null:m);return g.jsx(a,{...u,ref:c,children:b.isValidElement(p)?b.cloneElement(p,void 0,f):null})}return g.jsx(a,{...u,ref:c,children:l})});return i.displayName=`${t}.Slot`,i}function kk(t){const a=b.forwardRef((i,r)=>{const{children:c,...l}=i;if(b.isValidElement(c)){const u=_k(c),d=Ek(l,c.props);return c.type!==b.Fragment&&(d.ref=r?ci(r,u):u),b.cloneElement(c,d)}return b.Children.count(c)>1?b.Children.only(null):null});return a.displayName=`${t}.SlotClone`,a}var Dk=Symbol("radix.slottable");function Bk(t){return b.isValidElement(t)&&typeof t.type=="function"&&"__radixId"in t.type&&t.type.__radixId===Dk}function Ek(t,a){const i={...a};for(const r in a){const c=t[r],l=a[r];/^on[A-Z]/.test(r)?c&&l?i[r]=(...d)=>{const F=l(...d);return c(...d),F}:c&&(i[r]=c):r==="style"?i[r]={...c,...l}:r==="className"&&(i[r]=[c,l].filter(Boolean).join(" "))}return{...t,...i}}function _k(t){var r,c;let a=(r=Object.getOwnPropertyDescriptor(t.props,"ref"))==null?void 0:r.get,i=a&&"isReactWarning"in a&&a.isReactWarning;return i?t.ref:(a=(c=Object.getOwnPropertyDescriptor(t,"ref"))==null?void 0:c.get,i=a&&"isReactWarning"in a&&a.isReactWarning,i?t.props.ref:t.props.ref||t.ref)}var Sk=["a","button","div","form","h2","h3","img","input","label","li","nav","ol","p","select","span","svg","ul"],T2=Sk.reduce((t,a)=>{const i=Pa(`Primitive.${a}`),r=b.forwardRef((c,l)=>{const{asChild:u,...d}=c,F=u?i:a;return typeof window<"u"&&(window[Symbol.for("radix-ui")]=!0),g.jsx(F,{...d,ref:l})});return r.displayName=`Primitive.${a}`,{...t,[a]:r}},{});function rs(t,a){t&&wu.flushSync(()=>t.dispatchEvent(a))}function O0(t){const a=b.useRef(t);return b.useEffect(()=>{a.current=t}),b.useMemo(()=>(...i)=>{var r;return(r=a.current)==null?void 0:r.call(a,...i)},[])}function xk(t,a=globalThis==null?void 0:globalThis.document){const i=O0(t);b.useEffect(()=>{const r=c=>{c.key==="Escape"&&i(c)};return a.addEventListener("keydown",r,{capture:!0}),()=>a.removeEventListener("keydown",r,{capture:!0})},[i,a])}var Tk="DismissableLayer",jh="dismissableLayer.update",Rk="dismissableLayer.pointerDownOutside",Pk="dismissableLayer.focusOutside",Tm,kg=b.createContext({layers:new Set,layersWithOutsidePointerEventsDisabled:new Set,branches:new Set}),li=b.forwardRef((t,a)=>{const{disableOutsidePointerEvents:i=!1,onEscapeKeyDown:r,onPointerDownOutside:c,onFocusOutside:l,onInteractOutside:u,onDismiss:d,...F}=t,p=b.useContext(kg),[f,m]=b.useState(null),C=(f==null?void 0:f.ownerDocument)??(globalThis==null?void 0:globalThis.document),[,y]=b.useState({}),w=n0(a,L=>m(L)),v=Array.from(p.layers),[D]=[...p.layersWithOutsidePointerEventsDisabled].slice(-1),B=v.indexOf(D),S=f?v.indexOf(f):-1,E=p.layersWithOutsidePointerEventsDisabled.size>0,T=S>=B,P=Lk(L=>{const z=L.target,U=[...p.branches].some(n2=>n2.contains(z));!T||U||(c==null||c(L),u==null||u(L),L.defaultPrevented||d==null||d())},C),x=Ok(L=>{const z=L.target;[...p.branches].some(n2=>n2.contains(z))||(l==null||l(L),u==null||u(L),L.defaultPrevented||d==null||d())},C);return xk(L=>{S===p.layers.size-1&&(r==null||r(L),!L.defaultPrevented&&d&&(L.preventDefault(),d()))},C),b.useEffect(()=>{if(f)return i&&(p.layersWithOutsidePointerEventsDisabled.size===0&&(Tm=C.body.style.pointerEvents,C.body.style.pointerEvents="none"),p.layersWithOutsidePointerEventsDisabled.add(f)),p.layers.add(f),Rm(),()=>{i&&p.layersWithOutsidePointerEventsDisabled.size===1&&(C.body.style.pointerEvents=Tm)}},[f,C,i,p]),b.useEffect(()=>()=>{f&&(p.layers.delete(f),p.layersWithOutsidePointerEventsDisabled.delete(f),Rm())},[f,p]),b.useEffect(()=>{const L=()=>y({});return document.addEventListener(jh,L),()=>document.removeEventListener(jh,L)},[]),g.jsx(T2.div,{...F,ref:w,style:{pointerEvents:E?T?"auto":"none":void 0,...t.style},onFocusCapture:F2(t.onFocusCapture,x.onFocusCapture),onBlurCapture:F2(t.onBlurCapture,x.onBlurCapture),onPointerDownCapture:F2(t.onPointerDownCapture,P.onPointerDownCapture)})});li.displayName=Tk;var Ik="DismissableLayerBranch",Mk=b.forwardRef((t,a)=>{const i=b.useContext(kg),r=b.useRef(null),c=n0(a,r);return b.useEffect(()=>{const l=r.current;if(l)return i.branches.add(l),()=>{i.branches.delete(l)}},[i.branches]),g.jsx(T2.div,{...t,ref:c})});Mk.displayName=Ik;function Lk(t,a=globalThis==null?void 0:globalThis.document){const i=O0(t),r=b.useRef(!1),c=b.useRef(()=>{});return b.useEffect(()=>{const l=d=>{if(d.target&&!r.current){let F=function(){Dg(Rk,i,p,{discrete:!0})};const p={originalEvent:d};d.pointerType==="touch"?(a.removeEventListener("click",c.current),c.current=F,a.addEventListener("click",c.current,{once:!0})):F()}else a.removeEventListener("click",c.current);r.current=!1},u=window.setTimeout(()=>{a.addEventListener("pointerdown",l)},0);return()=>{window.clearTimeout(u),a.removeEventListener("pointerdown",l),a.removeEventListener("click",c.current)}},[a,i]),{onPointerDownCapture:()=>r.current=!0}}function Ok(t,a=globalThis==null?void 0:globalThis.document){const i=O0(t),r=b.useRef(!1);return b.useEffect(()=>{const c=l=>{l.target&&!r.current&&Dg(Pk,i,{originalEvent:l},{discrete:!1})};return a.addEventListener("focusin",c),()=>a.removeEventListener("focusin",c)},[a,i]),{onFocusCapture:()=>r.current=!0,onBlurCapture:()=>r.current=!1}}function Rm(){const t=new CustomEvent(jh);document.dispatchEvent(t)}function Dg(t,a,i,{discrete:r}){const c=i.originalEvent.target,l=new CustomEvent(t,{bubbles:!1,cancelable:!0,detail:i});a&&c.addEventListener(t,a,{once:!0}),r?rs(c,l):c.dispatchEvent(l)}var ih="focusScope.autoFocusOnMount",rh="focusScope.autoFocusOnUnmount",Pm={bubbles:!1,cancelable:!0},Nk="FocusScope",ks=b.forwardRef((t,a)=>{const{loop:i=!1,trapped:r=!1,onMountAutoFocus:c,onUnmountAutoFocus:l,...u}=t,[d,F]=b.useState(null),p=O0(c),f=O0(l),m=b.useRef(null),C=n0(a,v=>F(v)),y=b.useRef({paused:!1,pause(){this.paused=!0},resume(){this.paused=!1}}).current;b.useEffect(()=>{if(r){let v=function(E){if(y.paused||!d)return;const T=E.target;d.contains(T)?m.current=T:Yt(m.current,{select:!0})},D=function(E){if(y.paused||!d)return;const T=E.relatedTarget;T!==null&&(d.contains(T)||Yt(m.current,{select:!0}))},B=function(E){if(document.activeElement===document.body)for(const P of E)P.removedNodes.length>0&&Yt(d)};document.addEventListener("focusin",v),document.addEventListener("focusout",D);const S=new MutationObserver(B);return d&&S.observe(d,{childList:!0,subtree:!0}),()=>{document.removeEventListener("focusin",v),document.removeEventListener("focusout",D),S.disconnect()}}},[r,d,y.paused]),b.useEffect(()=>{if(d){Mm.add(y);const v=document.activeElement;if(!d.contains(v)){const B=new CustomEvent(ih,Pm);d.addEventListener(ih,p),d.dispatchEvent(B),B.defaultPrevented||(Hk(qk(Bg(d)),{select:!0}),document.activeElement===v&&Yt(d))}return()=>{d.removeEventListener(ih,p),setTimeout(()=>{const B=new CustomEvent(rh,Pm);d.addEventListener(rh,f),d.dispatchEvent(B),B.defaultPrevented||Yt(v??document.body,{select:!0}),d.removeEventListener(rh,f),Mm.remove(y)},0)}}},[d,p,f,y]);const w=b.useCallback(v=>{if(!i&&!r||y.paused)return;const D=v.key==="Tab"&&!v.altKey&&!v.ctrlKey&&!v.metaKey,B=document.activeElement;if(D&&B){const S=v.currentTarget,[E,T]=zk(S);E&&T?!v.shiftKey&&B===T?(v.preventDefault(),i&&Yt(E,{select:!0})):v.shiftKey&&B===E&&(v.preventDefault(),i&&Yt(T,{select:!0})):B===S&&v.preventDefault()}},[i,r,y.paused]);return g.jsx(T2.div,{tabIndex:-1,...u,ref:C,onKeyDown:w})});ks.displayName=Nk;function Hk(t,{select:a=!1}={}){const i=document.activeElement;for(const r of t)if(Yt(r,{select:a}),document.activeElement!==i)return}function zk(t){const a=Bg(t),i=Im(a,t),r=Im(a.reverse(),t);return[i,r]}function Bg(t){const a=[],i=document.createTreeWalker(t,NodeFilter.SHOW_ELEMENT,{acceptNode:r=>{const c=r.tagName==="INPUT"&&r.type==="hidden";return r.disabled||r.hidden||c?NodeFilter.FILTER_SKIP:r.tabIndex>=0?NodeFilter.FILTER_ACCEPT:NodeFilter.FILTER_SKIP}});for(;i.nextNode();)a.push(i.currentNode);return a}function Im(t,a){for(const i of t)if(!jk(i,{upTo:a}))return i}function jk(t,{upTo:a}){if(getComputedStyle(t).visibility==="hidden")return!0;for(;t;){if(a!==void 0&&t===a)return!1;if(getComputedStyle(t).display==="none")return!0;t=t.parentElement}return!1}function Vk(t){return t instanceof HTMLInputElement&&"select"in t}function Yt(t,{select:a=!1}={}){if(t&&t.focus){const i=document.activeElement;t.focus({preventScroll:!0}),t!==i&&Vk(t)&&a&&t.select()}}var Mm=Uk();function Uk(){let t=[];return{add(a){const i=t[0];a!==i&&(i==null||i.pause()),t=Lm(t,a),t.unshift(a)},remove(a){var i;t=Lm(t,a),(i=t[0])==null||i.resume()}}}function Lm(t,a){const i=[...t],r=i.indexOf(a);return r!==-1&&i.splice(r,1),i}function qk(t){return t.filter(a=>a.tagName!=="A")}var Wk="Portal",Ds=b.forwardRef((t,a)=>{var d;const{container:i,...r}=t,[c,l]=b.useState(!1);De(()=>l(!0),[]);const u=i||c&&((d=globalThis==null?void 0:globalThis.document)==null?void 0:d.body);return u?ug.createPortal(g.jsx(T2.div,{...r,ref:a}),u):null});Ds.displayName=Wk;function Gk(t,a){return b.useReducer((i,r)=>a[i][r]??i,t)}var N0=t=>{const{present:a,children:i}=t,r=Kk(a),c=typeof i=="function"?i({present:r.isPresent}):b.Children.only(i),l=n0(r.ref,Zk(c));return typeof i=="function"||r.isPresent?b.cloneElement(c,{ref:l}):null};N0.displayName="Presence";function Kk(t){const[a,i]=b.useState(),r=b.useRef(null),c=b.useRef(t),l=b.useRef("none"),u=t?"mounted":"unmounted",[d,F]=Gk(u,{mounted:{UNMOUNT:"unmounted",ANIMATION_OUT:"unmountSuspended"},unmountSuspended:{MOUNT:"mounted",ANIMATION_END:"unmounted"},unmounted:{MOUNT:"mounted"}});return b.useEffect(()=>{const p=Or(r.current);l.current=d==="mounted"?p:"none"},[d]),De(()=>{const p=r.current,f=c.current;if(f!==t){const C=l.current,y=Or(p);t?F("MOUNT"):y==="none"||(p==null?void 0:p.display)==="none"?F("UNMOUNT"):F(f&&C!==y?"ANIMATION_OUT":"UNMOUNT"),c.current=t}},[t,F]),De(()=>{if(a){let p;const f=a.ownerDocument.defaultView??window,m=y=>{const v=Or(r.current).includes(y.animationName);if(y.target===a&&v&&(F("ANIMATION_END"),!c.current)){const D=a.style.animationFillMode;a.style.animationFillMode="forwards",p=f.setTimeout(()=>{a.style.animationFillMode==="forwards"&&(a.style.animationFillMode=D)})}},C=y=>{y.target===a&&(l.current=Or(r.current))};return a.addEventListener("animationstart",C),a.addEventListener("animationcancel",m),a.addEventListener("animationend",m),()=>{f.clearTimeout(p),a.removeEventListener("animationstart",C),a.removeEventListener("animationcancel",m),a.removeEventListener("animationend",m)}}else F("ANIMATION_END")},[a,F]),{isPresent:["mounted","unmountSuspended"].includes(d),ref:b.useCallback(p=>{r.current=p?getComputedStyle(p):null,i(p)},[])}}function Or(t){return(t==null?void 0:t.animationName)||"none"}function Zk(t){var r,c;let a=(r=Object.getOwnPropertyDescriptor(t.props,"ref"))==null?void 0:r.get,i=a&&"isReactWarning"in a&&a.isReactWarning;return i?t.ref:(a=(c=Object.getOwnPropertyDescriptor(t,"ref"))==null?void 0:c.get,i=a&&"isReactWarning"in a&&a.isReactWarning,i?t.props.ref:t.props.ref||t.ref)}var sh=0;function Eu(){b.useEffect(()=>{const t=document.querySelectorAll("[data-radix-focus-guard]");return document.body.insertAdjacentElement("afterbegin",t[0]??Om()),document.body.insertAdjacentElement("beforeend",t[1]??Om()),sh++,()=>{sh===1&&document.querySelectorAll("[data-radix-focus-guard]").forEach(a=>a.remove()),sh--}},[])}function Om(){const t=document.createElement("span");return t.setAttribute("data-radix-focus-guard",""),t.tabIndex=0,t.style.outline="none",t.style.opacity="0",t.style.position="fixed",t.style.pointerEvents="none",t}var Ke=function(){return Ke=Object.assign||function(a){for(var i,r=1,c=arguments.length;r<c;r++){i=arguments[r];for(var l in i)Object.prototype.hasOwnProperty.call(i,l)&&(a[l]=i[l])}return a},Ke.apply(this,arguments)};function Eg(t,a){var i={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&a.indexOf(r)<0&&(i[r]=t[r]);if(t!=null&&typeof Object.getOwnPropertySymbols=="function")for(var c=0,r=Object.getOwnPropertySymbols(t);c<r.length;c++)a.indexOf(r[c])<0&&Object.prototype.propertyIsEnumerable.call(t,r[c])&&(i[r[c]]=t[r[c]]);return i}function Xk(t,a,i){if(i||arguments.length===2)for(var r=0,c=a.length,l;r<c;r++)(l||!(r in a))&&(l||(l=Array.prototype.slice.call(a,0,r)),l[r]=a[r]);return t.concat(l||Array.prototype.slice.call(a))}var $r="right-scroll-bar-position",es="width-before-scroll-bar",Yk="with-scroll-bars-hidden",Jk="--removed-body-scroll-bar-size";function ch(t,a){return typeof t=="function"?t(a):t&&(t.current=a),t}function Qk(t,a){var i=b.useState(function(){return{value:t,callback:a,facade:{get current(){return i.value},set current(r){var c=i.value;c!==r&&(i.value=r,i.callback(r,c))}}}})[0];return i.callback=a,i.facade}var $k=typeof window<"u"?b.useLayoutEffect:b.useEffect,Nm=new WeakMap;function eD(t,a){var i=Qk(null,function(r){return t.forEach(function(c){return ch(c,r)})});return $k(function(){var r=Nm.get(i);if(r){var c=new Set(r),l=new Set(t),u=i.current;c.forEach(function(d){l.has(d)||ch(d,null)}),l.forEach(function(d){c.has(d)||ch(d,u)})}Nm.set(i,t)},[t]),i}function tD(t){return t}function oD(t,a){a===void 0&&(a=tD);var i=[],r=!1,c={read:function(){if(r)throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");return i.length?i[i.length-1]:t},useMedium:function(l){var u=a(l,r);return i.push(u),function(){i=i.filter(function(d){return d!==u})}},assignSyncMedium:function(l){for(r=!0;i.length;){var u=i;i=[],u.forEach(l)}i={push:function(d){return l(d)},filter:function(){return i}}},assignMedium:function(l){r=!0;var u=[];if(i.length){var d=i;i=[],d.forEach(l),u=i}var F=function(){var f=u;u=[],f.forEach(l)},p=function(){return Promise.resolve().then(F)};p(),i={push:function(f){u.push(f),p()},filter:function(f){return u=u.filter(f),i}}}};return c}function aD(t){t===void 0&&(t={});var a=oD(null);return a.options=Ke({async:!0,ssr:!1},t),a}var _g=function(t){var a=t.sideCar,i=Eg(t,["sideCar"]);if(!a)throw new Error("Sidecar: please provide `sideCar` property to import the right car");var r=a.read();if(!r)throw new Error("Sidecar medium not found");return b.createElement(r,Ke({},i))};_g.isSideCarExport=!0;function nD(t,a){return t.useMedium(a),_g}var Sg=aD(),lh=function(){},Bs=b.forwardRef(function(t,a){var i=b.useRef(null),r=b.useState({onScrollCapture:lh,onWheelCapture:lh,onTouchMoveCapture:lh}),c=r[0],l=r[1],u=t.forwardProps,d=t.children,F=t.className,p=t.removeScrollBar,f=t.enabled,m=t.shards,C=t.sideCar,y=t.noRelative,w=t.noIsolation,v=t.inert,D=t.allowPinchZoom,B=t.as,S=B===void 0?"div":B,E=t.gapMode,T=Eg(t,["forwardProps","children","className","removeScrollBar","enabled","shards","sideCar","noRelative","noIsolation","inert","allowPinchZoom","as","gapMode"]),P=C,x=eD([i,a]),L=Ke(Ke({},T),c);return b.createElement(b.Fragment,null,f&&b.createElement(P,{sideCar:Sg,removeScrollBar:p,shards:m,noRelative:y,noIsolation:w,inert:v,setCallbacks:l,allowPinchZoom:!!D,lockRef:i,gapMode:E}),u?b.cloneElement(b.Children.only(d),Ke(Ke({},L),{ref:x})):b.createElement(S,Ke({},L,{className:F,ref:x}),d))});Bs.defaultProps={enabled:!0,removeScrollBar:!0,inert:!1};Bs.classNames={fullWidth:es,zeroRight:$r};var iD=function(){if(typeof __webpack_nonce__<"u")return __webpack_nonce__};function rD(){if(!document)return null;var t=document.createElement("style");t.type="text/css";var a=iD();return a&&t.setAttribute("nonce",a),t}function sD(t,a){t.styleSheet?t.styleSheet.cssText=a:t.appendChild(document.createTextNode(a))}function cD(t){var a=document.head||document.getElementsByTagName("head")[0];a.appendChild(t)}var lD=function(){var t=0,a=null;return{add:function(i){t==0&&(a=rD())&&(sD(a,i),cD(a)),t++},remove:function(){t--,!t&&a&&(a.parentNode&&a.parentNode.removeChild(a),a=null)}}},hD=function(){var t=lD();return function(a,i){b.useEffect(function(){return t.add(a),function(){t.remove()}},[a&&i])}},xg=function(){var t=hD(),a=function(i){var r=i.styles,c=i.dynamic;return t(r,c),null};return a},uD={left:0,top:0,right:0,gap:0},hh=function(t){return parseInt(t||"",10)||0},dD=function(t){var a=window.getComputedStyle(document.body),i=a[t==="padding"?"paddingLeft":"marginLeft"],r=a[t==="padding"?"paddingTop":"marginTop"],c=a[t==="padding"?"paddingRight":"marginRight"];return[hh(i),hh(r),hh(c)]},AD=function(t){if(t===void 0&&(t="margin"),typeof window>"u")return uD;var a=dD(t),i=document.documentElement.clientWidth,r=window.innerWidth;return{left:a[0],top:a[1],right:a[2],gap:Math.max(0,r-i+a[2]-a[0])}},pD=xg(),xa="data-scroll-locked",FD=function(t,a,i,r){var c=t.left,l=t.top,u=t.right,d=t.gap;return i===void 0&&(i="margin"),`
  .`.concat(Yk,` {
   overflow: hidden `).concat(r,`;
   padding-right: `).concat(d,"px ").concat(r,`;
  }
  body[`).concat(xa,`] {
    overflow: hidden `).concat(r,`;
    overscroll-behavior: contain;
    `).concat([a&&"position: relative ".concat(r,";"),i==="margin"&&`
    padding-left: `.concat(c,`px;
    padding-top: `).concat(l,`px;
    padding-right: `).concat(u,`px;
    margin-left:0;
    margin-top:0;
    margin-right: `).concat(d,"px ").concat(r,`;
    `),i==="padding"&&"padding-right: ".concat(d,"px ").concat(r,";")].filter(Boolean).join(""),`
  }
  
  .`).concat($r,` {
    right: `).concat(d,"px ").concat(r,`;
  }
  
  .`).concat(es,` {
    margin-right: `).concat(d,"px ").concat(r,`;
  }
  
  .`).concat($r," .").concat($r,` {
    right: 0 `).concat(r,`;
  }
  
  .`).concat(es," .").concat(es,` {
    margin-right: 0 `).concat(r,`;
  }
  
  body[`).concat(xa,`] {
    `).concat(Jk,": ").concat(d,`px;
  }
`)},Hm=function(){var t=parseInt(document.body.getAttribute(xa)||"0",10);return isFinite(t)?t:0},mD=function(){b.useEffect(function(){return document.body.setAttribute(xa,(Hm()+1).toString()),function(){var t=Hm()-1;t<=0?document.body.removeAttribute(xa):document.body.setAttribute(xa,t.toString())}},[])},gD=function(t){var a=t.noRelative,i=t.noImportant,r=t.gapMode,c=r===void 0?"margin":r;mD();var l=b.useMemo(function(){return AD(c)},[c]);return b.createElement(pD,{styles:FD(l,!a,c,i?"":"!important")})},Vh=!1;if(typeof window<"u")try{var Nr=Object.defineProperty({},"passive",{get:function(){return Vh=!0,!0}});window.addEventListener("test",Nr,Nr),window.removeEventListener("test",Nr,Nr)}catch{Vh=!1}var wa=Vh?{passive:!1}:!1,fD=function(t){return t.tagName==="TEXTAREA"},Tg=function(t,a){if(!(t instanceof Element))return!1;var i=window.getComputedStyle(t);return i[a]!=="hidden"&&!(i.overflowY===i.overflowX&&!fD(t)&&i[a]==="visible")},bD=function(t){return Tg(t,"overflowY")},CD=function(t){return Tg(t,"overflowX")},zm=function(t,a){var i=a.ownerDocument,r=a;do{typeof ShadowRoot<"u"&&r instanceof ShadowRoot&&(r=r.host);var c=Rg(t,r);if(c){var l=Pg(t,r),u=l[1],d=l[2];if(u>d)return!0}r=r.parentNode}while(r&&r!==i.body);return!1},yD=function(t){var a=t.scrollTop,i=t.scrollHeight,r=t.clientHeight;return[a,i,r]},vD=function(t){var a=t.scrollLeft,i=t.scrollWidth,r=t.clientWidth;return[a,i,r]},Rg=function(t,a){return t==="v"?bD(a):CD(a)},Pg=function(t,a){return t==="v"?yD(a):vD(a)},wD=function(t,a){return t==="h"&&a==="rtl"?-1:1},kD=function(t,a,i,r,c){var l=wD(t,window.getComputedStyle(a).direction),u=l*r,d=i.target,F=a.contains(d),p=!1,f=u>0,m=0,C=0;do{if(!d)break;var y=Pg(t,d),w=y[0],v=y[1],D=y[2],B=v-D-l*w;(w||B)&&Rg(t,d)&&(m+=B,C+=w);var S=d.parentNode;d=S&&S.nodeType===Node.DOCUMENT_FRAGMENT_NODE?S.host:S}while(!F&&d!==document.body||F&&(a.contains(d)||a===d));return(f&&Math.abs(m)<1||!f&&Math.abs(C)<1)&&(p=!0),p},Hr=function(t){return"changedTouches"in t?[t.changedTouches[0].clientX,t.changedTouches[0].clientY]:[0,0]},jm=function(t){return[t.deltaX,t.deltaY]},Vm=function(t){return t&&"current"in t?t.current:t},DD=function(t,a){return t[0]===a[0]&&t[1]===a[1]},BD=function(t){return`
  .block-interactivity-`.concat(t,` {pointer-events: none;}
  .allow-interactivity-`).concat(t,` {pointer-events: all;}
`)},ED=0,ka=[];function _D(t){var a=b.useRef([]),i=b.useRef([0,0]),r=b.useRef(),c=b.useState(ED++)[0],l=b.useState(xg)[0],u=b.useRef(t);b.useEffect(function(){u.current=t},[t]),b.useEffect(function(){if(t.inert){document.body.classList.add("block-interactivity-".concat(c));var v=Xk([t.lockRef.current],(t.shards||[]).map(Vm),!0).filter(Boolean);return v.forEach(function(D){return D.classList.add("allow-interactivity-".concat(c))}),function(){document.body.classList.remove("block-interactivity-".concat(c)),v.forEach(function(D){return D.classList.remove("allow-interactivity-".concat(c))})}}},[t.inert,t.lockRef.current,t.shards]);var d=b.useCallback(function(v,D){if("touches"in v&&v.touches.length===2||v.type==="wheel"&&v.ctrlKey)return!u.current.allowPinchZoom;var B=Hr(v),S=i.current,E="deltaX"in v?v.deltaX:S[0]-B[0],T="deltaY"in v?v.deltaY:S[1]-B[1],P,x=v.target,L=Math.abs(E)>Math.abs(T)?"h":"v";if("touches"in v&&L==="h"&&x.type==="range")return!1;var z=zm(L,x);if(!z)return!0;if(z?P=L:(P=L==="v"?"h":"v",z=zm(L,x)),!z)return!1;if(!r.current&&"changedTouches"in v&&(E||T)&&(r.current=P),!P)return!0;var U=r.current||P;return kD(U,D,v,U==="h"?E:T)},[]),F=b.useCallback(function(v){var D=v;if(!(!ka.length||ka[ka.length-1]!==l)){var B="deltaY"in D?jm(D):Hr(D),S=a.current.filter(function(P){return P.name===D.type&&(P.target===D.target||D.target===P.shadowParent)&&DD(P.delta,B)})[0];if(S&&S.should){D.cancelable&&D.preventDefault();return}if(!S){var E=(u.current.shards||[]).map(Vm).filter(Boolean).filter(function(P){return P.contains(D.target)}),T=E.length>0?d(D,E[0]):!u.current.noIsolation;T&&D.cancelable&&D.preventDefault()}}},[]),p=b.useCallback(function(v,D,B,S){var E={name:v,delta:D,target:B,should:S,shadowParent:SD(B)};a.current.push(E),setTimeout(function(){a.current=a.current.filter(function(T){return T!==E})},1)},[]),f=b.useCallback(function(v){i.current=Hr(v),r.current=void 0},[]),m=b.useCallback(function(v){p(v.type,jm(v),v.target,d(v,t.lockRef.current))},[]),C=b.useCallback(function(v){p(v.type,Hr(v),v.target,d(v,t.lockRef.current))},[]);b.useEffect(function(){return ka.push(l),t.setCallbacks({onScrollCapture:m,onWheelCapture:m,onTouchMoveCapture:C}),document.addEventListener("wheel",F,wa),document.addEventListener("touchmove",F,wa),document.addEventListener("touchstart",f,wa),function(){ka=ka.filter(function(v){return v!==l}),document.removeEventListener("wheel",F,wa),document.removeEventListener("touchmove",F,wa),document.removeEventListener("touchstart",f,wa)}},[]);var y=t.removeScrollBar,w=t.inert;return b.createElement(b.Fragment,null,w?b.createElement(l,{styles:BD(c)}):null,y?b.createElement(gD,{noRelative:t.noRelative,gapMode:t.gapMode}):null)}function SD(t){for(var a=null;t!==null;)t instanceof ShadowRoot&&(a=t.host,t=t.host),t=t.parentNode;return a}const xD=nD(Sg,_D);var Es=b.forwardRef(function(t,a){return b.createElement(Bs,Ke({},t,{ref:a,sideCar:xD}))});Es.classNames=Bs.classNames;var TD=function(t){if(typeof document>"u")return null;var a=Array.isArray(t)?t[0]:t;return a.ownerDocument.body},Da=new WeakMap,zr=new WeakMap,jr={},uh=0,Ig=function(t){return t&&(t.host||Ig(t.parentNode))},RD=function(t,a){return a.map(function(i){if(t.contains(i))return i;var r=Ig(i);return r&&t.contains(r)?r:(console.error("aria-hidden",i,"in not contained inside",t,". Doing nothing"),null)}).filter(function(i){return!!i})},PD=function(t,a,i,r){var c=RD(a,Array.isArray(t)?t:[t]);jr[i]||(jr[i]=new WeakMap);var l=jr[i],u=[],d=new Set,F=new Set(c),p=function(m){!m||d.has(m)||(d.add(m),p(m.parentNode))};c.forEach(p);var f=function(m){!m||F.has(m)||Array.prototype.forEach.call(m.children,function(C){if(d.has(C))f(C);else try{var y=C.getAttribute(r),w=y!==null&&y!=="false",v=(Da.get(C)||0)+1,D=(l.get(C)||0)+1;Da.set(C,v),l.set(C,D),u.push(C),v===1&&w&&zr.set(C,!0),D===1&&C.setAttribute(i,"true"),w||C.setAttribute(r,"true")}catch(B){console.error("aria-hidden: cannot operate on ",C,B)}})};return f(a),d.clear(),uh++,function(){u.forEach(function(m){var C=Da.get(m)-1,y=l.get(m)-1;Da.set(m,C),l.set(m,y),C||(zr.has(m)||m.removeAttribute(r),zr.delete(m)),y||m.removeAttribute(i)}),uh--,uh||(Da=new WeakMap,Da=new WeakMap,zr=new WeakMap,jr={})}},_u=function(t,a,i){i===void 0&&(i="data-aria-hidden");var r=Array.from(Array.isArray(t)?t:[t]),c=TD(t);return c?(r.push.apply(r,Array.from(c.querySelectorAll("[aria-live], script"))),PD(r,c,i,"aria-hidden")):function(){return null}},_s="Dialog",[Mg,VT]=Le(_s),[ID,Oe]=Mg(_s),Lg=t=>{const{__scopeDialog:a,children:i,open:r,defaultOpen:c,onOpenChange:l,modal:u=!0}=t,d=b.useRef(null),F=b.useRef(null),[p,f]=Qe({prop:r,defaultProp:c??!1,onChange:l,caller:_s});return g.jsx(ID,{scope:a,triggerRef:d,contentRef:F,contentId:ve(),titleId:ve(),descriptionId:ve(),open:p,onOpenChange:f,onOpenToggle:b.useCallback(()=>f(m=>!m),[f]),modal:u,children:i})};Lg.displayName=_s;var Og="DialogTrigger",Ng=b.forwardRef((t,a)=>{const{__scopeDialog:i,...r}=t,c=Oe(Og,i),l=n0(a,c.triggerRef);return g.jsx(T2.button,{type:"button","aria-haspopup":"dialog","aria-expanded":c.open,"aria-controls":c.contentId,"data-state":Tu(c.open),...r,ref:l,onClick:F2(t.onClick,c.onOpenToggle)})});Ng.displayName=Og;var Su="DialogPortal",[MD,Hg]=Mg(Su,{forceMount:void 0}),zg=t=>{const{__scopeDialog:a,forceMount:i,children:r,container:c}=t,l=Oe(Su,a);return g.jsx(MD,{scope:a,forceMount:i,children:b.Children.map(r,u=>g.jsx(N0,{present:i||l.open,children:g.jsx(Ds,{asChild:!0,container:c,children:u})}))})};zg.displayName=Su;var ss="DialogOverlay",jg=b.forwardRef((t,a)=>{const i=Hg(ss,t.__scopeDialog),{forceMount:r=i.forceMount,...c}=t,l=Oe(ss,t.__scopeDialog);return l.modal?g.jsx(N0,{present:r||l.open,children:g.jsx(OD,{...c,ref:a})}):null});jg.displayName=ss;var LD=Pa("DialogOverlay.RemoveScroll"),OD=b.forwardRef((t,a)=>{const{__scopeDialog:i,...r}=t,c=Oe(ss,i);return g.jsx(Es,{as:LD,allowPinchZoom:!0,shards:[c.contentRef],children:g.jsx(T2.div,{"data-state":Tu(c.open),...r,ref:a,style:{pointerEvents:"auto",...r.style}})})}),Ro="DialogContent",Vg=b.forwardRef((t,a)=>{const i=Hg(Ro,t.__scopeDialog),{forceMount:r=i.forceMount,...c}=t,l=Oe(Ro,t.__scopeDialog);return g.jsx(N0,{present:r||l.open,children:l.modal?g.jsx(ND,{...c,ref:a}):g.jsx(HD,{...c,ref:a})})});Vg.displayName=Ro;var ND=b.forwardRef((t,a)=>{const i=Oe(Ro,t.__scopeDialog),r=b.useRef(null),c=n0(a,i.contentRef,r);return b.useEffect(()=>{const l=r.current;if(l)return _u(l)},[]),g.jsx(Ug,{...t,ref:c,trapFocus:i.open,disableOutsidePointerEvents:!0,onCloseAutoFocus:F2(t.onCloseAutoFocus,l=>{var u;l.preventDefault(),(u=i.triggerRef.current)==null||u.focus()}),onPointerDownOutside:F2(t.onPointerDownOutside,l=>{const u=l.detail.originalEvent,d=u.button===0&&u.ctrlKey===!0;(u.button===2||d)&&l.preventDefault()}),onFocusOutside:F2(t.onFocusOutside,l=>l.preventDefault())})}),HD=b.forwardRef((t,a)=>{const i=Oe(Ro,t.__scopeDialog),r=b.useRef(!1),c=b.useRef(!1);return g.jsx(Ug,{...t,ref:a,trapFocus:!1,disableOutsidePointerEvents:!1,onCloseAutoFocus:l=>{var u,d;(u=t.onCloseAutoFocus)==null||u.call(t,l),l.defaultPrevented||(r.current||(d=i.triggerRef.current)==null||d.focus(),l.preventDefault()),r.current=!1,c.current=!1},onInteractOutside:l=>{var F,p;(F=t.onInteractOutside)==null||F.call(t,l),l.defaultPrevented||(r.current=!0,l.detail.originalEvent.type==="pointerdown"&&(c.current=!0));const u=l.target;((p=i.triggerRef.current)==null?void 0:p.contains(u))&&l.preventDefault(),l.detail.originalEvent.type==="focusin"&&c.current&&l.preventDefault()}})}),Ug=b.forwardRef((t,a)=>{const{__scopeDialog:i,trapFocus:r,onOpenAutoFocus:c,onCloseAutoFocus:l,...u}=t,d=Oe(Ro,i),F=b.useRef(null),p=n0(a,F);return Eu(),g.jsxs(g.Fragment,{children:[g.jsx(ks,{asChild:!0,loop:!0,trapped:r,onMountAutoFocus:c,onUnmountAutoFocus:l,children:g.jsx(li,{role:"dialog",id:d.contentId,"aria-describedby":d.descriptionId,"aria-labelledby":d.titleId,"data-state":Tu(d.open),...u,ref:p,onDismiss:()=>d.onOpenChange(!1)})}),g.jsxs(g.Fragment,{children:[g.jsx(VD,{titleId:d.titleId}),g.jsx(qD,{contentRef:F,descriptionId:d.descriptionId})]})]})}),xu="DialogTitle",qg=b.forwardRef((t,a)=>{const{__scopeDialog:i,...r}=t,c=Oe(xu,i);return g.jsx(T2.h2,{id:c.titleId,...r,ref:a})});qg.displayName=xu;var Wg="DialogDescription",zD=b.forwardRef((t,a)=>{const{__scopeDialog:i,...r}=t,c=Oe(Wg,i);return g.jsx(T2.p,{id:c.descriptionId,...r,ref:a})});zD.displayName=Wg;var Gg="DialogClose",jD=b.forwardRef((t,a)=>{const{__scopeDialog:i,...r}=t,c=Oe(Gg,i);return g.jsx(T2.button,{type:"button",...r,ref:a,onClick:F2(t.onClick,()=>c.onOpenChange(!1))})});jD.displayName=Gg;function Tu(t){return t?"open":"closed"}var Kg="DialogTitleWarning",[UT,Zg]=gk(Kg,{contentName:Ro,titleName:xu,docsSlug:"dialog"}),VD=({titleId:t})=>{const a=Zg(Kg),i=`\`${a.contentName}\` requires a \`${a.titleName}\` for the component to be accessible for screen reader users.

If you want to hide the \`${a.titleName}\`, you can wrap it with our VisuallyHidden component.

For more information, see https://radix-ui.com/primitives/docs/components/${a.docsSlug}`;return b.useEffect(()=>{t&&(document.getElementById(t)||console.error(i))},[i,t]),null},UD="DialogDescriptionWarning",qD=({contentRef:t,descriptionId:a})=>{const r=`Warning: Missing \`Description\` or \`aria-describedby={undefined}\` for {${Zg(UD).contentName}}.`;return b.useEffect(()=>{var l;const c=(l=t.current)==null?void 0:l.getAttribute("aria-describedby");a&&c&&(document.getElementById(a)||console.warn(r))},[r,t,a]),null},Xg=Lg,Yg=Ng,WD=zg,GD=jg,KD=Vg,ZD=qg;const XD=async()=>JSON.stringify(await(await fetch("/.vocs/search-index-b8c39fce.json")).json());var o0=function(){return o0=Object.assign||function(a){for(var i,r=1,c=arguments.length;r<c;r++){i=arguments[r];for(var l in i)Object.prototype.hasOwnProperty.call(i,l)&&(a[l]=i[l])}return a},o0.apply(this,arguments)};function YD(t,a,i,r){function c(l){return l instanceof i?l:new i(function(u){u(l)})}return new(i||(i=Promise))(function(l,u){function d(f){try{p(r.next(f))}catch(m){u(m)}}function F(f){try{p(r.throw(f))}catch(m){u(m)}}function p(f){f.done?l(f.value):c(f.value).then(d,F)}p((r=r.apply(t,[])).next())})}function JD(t,a){var i={label:0,sent:function(){if(l[0]&1)throw l[1];return l[1]},trys:[],ops:[]},r,c,l,u;return u={next:d(0),throw:d(1),return:d(2)},typeof Symbol=="function"&&(u[Symbol.iterator]=function(){return this}),u;function d(p){return function(f){return F([p,f])}}function F(p){if(r)throw new TypeError("Generator is already executing.");for(;u&&(u=0,p[0]&&(i=0)),i;)try{if(r=1,c&&(l=p[0]&2?c.return:p[0]?c.throw||((l=c.return)&&l.call(c),0):c.next)&&!(l=l.call(c,p[1])).done)return l;switch(c=0,l&&(p=[p[0]&2,l.value]),p[0]){case 0:case 1:l=p;break;case 4:return i.label++,{value:p[1],done:!1};case 5:i.label++,c=p[1],p=[0];continue;case 7:p=i.ops.pop(),i.trys.pop();continue;default:if(l=i.trys,!(l=l.length>0&&l[l.length-1])&&(p[0]===6||p[0]===2)){i=0;continue}if(p[0]===3&&(!l||p[1]>l[0]&&p[1]<l[3])){i.label=p[1];break}if(p[0]===6&&i.label<l[1]){i.label=l[1],l=p;break}if(l&&i.label<l[2]){i.label=l[2],i.ops.push(p);break}l[2]&&i.ops.pop(),i.trys.pop();continue}p=a.call(t,i)}catch(f){p=[6,f],c=0}finally{r=l=0}if(p[0]&5)throw p[1];return{value:p[0]?p[1]:void 0,done:!0}}}function L2(t){var a=typeof Symbol=="function"&&Symbol.iterator,i=a&&t[a],r=0;if(i)return i.call(t);if(t&&typeof t.length=="number")return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(a?"Object is not iterable.":"Symbol.iterator is not defined.")}function b0(t,a){var i=typeof Symbol=="function"&&t[Symbol.iterator];if(!i)return t;var r=i.call(t),c,l=[],u;try{for(;(a===void 0||a-- >0)&&!(c=r.next()).done;)l.push(c.value)}catch(d){u={error:d}}finally{try{c&&!c.done&&(i=r.return)&&i.call(r)}finally{if(u)throw u.error}}return l}var QD="ENTRIES",Jg="KEYS",Qg="VALUES",P0="",dh=function(){function t(a,i){var r=a._tree,c=Array.from(r.keys());this.set=a,this._type=i,this._path=c.length>0?[{node:r,keys:c}]:[]}return t.prototype.next=function(){var a=this.dive();return this.backtrack(),a},t.prototype.dive=function(){if(this._path.length===0)return{done:!0,value:void 0};var a=Ba(this._path),i=a.node,r=a.keys;if(Ba(r)===P0)return{done:!1,value:this.result()};var c=i.get(Ba(r));return this._path.push({node:c,keys:Array.from(c.keys())}),this.dive()},t.prototype.backtrack=function(){if(this._path.length!==0){var a=Ba(this._path).keys;a.pop(),!(a.length>0)&&(this._path.pop(),this.backtrack())}},t.prototype.key=function(){return this.set._prefix+this._path.map(function(a){var i=a.keys;return Ba(i)}).filter(function(a){return a!==P0}).join("")},t.prototype.value=function(){return Ba(this._path).node.get(P0)},t.prototype.result=function(){switch(this._type){case Qg:return this.value();case Jg:return this.key();default:return[this.key(),this.value()]}},t.prototype[Symbol.iterator]=function(){return this},t}(),Ba=function(t){return t[t.length-1]},$D=function(t,a,i){var r=new Map;if(a===void 0)return r;for(var c=a.length+1,l=c+i,u=new Uint8Array(l*c).fill(i+1),d=0;d<c;++d)u[d]=d;for(var F=1;F<l;++F)u[F*c]=F;return $g(t,a,i,r,u,1,c,""),r},$g=function(t,a,i,r,c,l,u,d){var F,p,f=l*u;try{e:for(var m=L2(t.keys()),C=m.next();!C.done;C=m.next()){var y=C.value;if(y===P0){var w=c[f-1];w<=i&&r.set(d,[t.get(y),w])}else{for(var v=l,D=0;D<y.length;++D,++v){for(var B=y[D],S=u*v,E=S-u,T=c[S],P=Math.max(0,v-i-1),x=Math.min(u-1,v+i),L=P;L<x;++L){var z=B!==a[L],U=c[E+L]+ +z,n2=c[E+L+1]+1,u2=c[S+L]+1,s2=c[S+L+1]=Math.min(U,n2,u2);s2<T&&(T=s2)}if(T>i)continue e}$g(t.get(y),a,i,r,c,v,u,d+y)}}}catch(c2){F={error:c2}}finally{try{C&&!C.done&&(p=m.return)&&p.call(m)}finally{if(F)throw F.error}}},Ah=function(){function t(a,i){a===void 0&&(a=new Map),i===void 0&&(i=""),this._size=void 0,this._tree=a,this._prefix=i}return t.prototype.atPrefix=function(a){var i,r;if(!a.startsWith(this._prefix))throw new Error("Mismatched prefix");var c=b0(cs(this._tree,a.slice(this._prefix.length)),2),l=c[0],u=c[1];if(l===void 0){var d=b0(Ru(u),2),F=d[0],p=d[1];try{for(var f=L2(F.keys()),m=f.next();!m.done;m=f.next()){var C=m.value;if(C!==P0&&C.startsWith(p)){var y=new Map;return y.set(C.slice(p.length),F.get(C)),new t(y,a)}}}catch(w){i={error:w}}finally{try{m&&!m.done&&(r=f.return)&&r.call(f)}finally{if(i)throw i.error}}}return new t(l,a)},t.prototype.clear=function(){this._size=void 0,this._tree.clear()},t.prototype.delete=function(a){return this._size=void 0,e1(this._tree,a)},t.prototype.entries=function(){return new dh(this,QD)},t.prototype.forEach=function(a){var i,r;try{for(var c=L2(this),l=c.next();!l.done;l=c.next()){var u=b0(l.value,2),d=u[0],F=u[1];a(d,F,this)}}catch(p){i={error:p}}finally{try{l&&!l.done&&(r=c.return)&&r.call(c)}finally{if(i)throw i.error}}},t.prototype.fuzzyGet=function(a,i){return $D(this._tree,a,i)},t.prototype.get=function(a){var i=Uh(this._tree,a);return i!==void 0?i.get(P0):void 0},t.prototype.has=function(a){var i=Uh(this._tree,a);return i!==void 0&&i.has(P0)},t.prototype.keys=function(){return new dh(this,Jg)},t.prototype.set=function(a,i){if(typeof a!="string")throw new Error("key must be a string");this._size=void 0;var r=ph(this._tree,a);return r.set(P0,i),this},Object.defineProperty(t.prototype,"size",{get:function(){if(this._size)return this._size;this._size=0;for(var a=this.entries();!a.next().done;)this._size+=1;return this._size},enumerable:!1,configurable:!0}),t.prototype.update=function(a,i){if(typeof a!="string")throw new Error("key must be a string");this._size=void 0;var r=ph(this._tree,a);return r.set(P0,i(r.get(P0))),this},t.prototype.fetch=function(a,i){if(typeof a!="string")throw new Error("key must be a string");this._size=void 0;var r=ph(this._tree,a),c=r.get(P0);return c===void 0&&r.set(P0,c=i()),c},t.prototype.values=function(){return new dh(this,Qg)},t.prototype[Symbol.iterator]=function(){return this.entries()},t.from=function(a){var i,r,c=new t;try{for(var l=L2(a),u=l.next();!u.done;u=l.next()){var d=b0(u.value,2),F=d[0],p=d[1];c.set(F,p)}}catch(f){i={error:f}}finally{try{u&&!u.done&&(r=l.return)&&r.call(l)}finally{if(i)throw i.error}}return c},t.fromObject=function(a){return t.from(Object.entries(a))},t}(),cs=function(t,a,i){var r,c;if(i===void 0&&(i=[]),a.length===0||t==null)return[t,i];try{for(var l=L2(t.keys()),u=l.next();!u.done;u=l.next()){var d=u.value;if(d!==P0&&a.startsWith(d))return i.push([t,d]),cs(t.get(d),a.slice(d.length),i)}}catch(F){r={error:F}}finally{try{u&&!u.done&&(c=l.return)&&c.call(l)}finally{if(r)throw r.error}}return i.push([t,a]),cs(void 0,"",i)},Uh=function(t,a){var i,r;if(a.length===0||t==null)return t;try{for(var c=L2(t.keys()),l=c.next();!l.done;l=c.next()){var u=l.value;if(u!==P0&&a.startsWith(u))return Uh(t.get(u),a.slice(u.length))}}catch(d){i={error:d}}finally{try{l&&!l.done&&(r=c.return)&&r.call(c)}finally{if(i)throw i.error}}},ph=function(t,a){var i,r,c=a.length;e:for(var l=0;t&&l<c;){try{for(var u=(i=void 0,L2(t.keys())),d=u.next();!d.done;d=u.next()){var F=d.value;if(F!==P0&&a[l]===F[0]){for(var p=Math.min(c-l,F.length),f=1;f<p&&a[l+f]===F[f];)++f;var m=t.get(F);if(f===F.length)t=m;else{var C=new Map;C.set(F.slice(f),m),t.set(a.slice(l,l+f),C),t.delete(F),t=C}l+=f;continue e}}}catch(w){i={error:w}}finally{try{d&&!d.done&&(r=u.return)&&r.call(u)}finally{if(i)throw i.error}}var y=new Map;return t.set(a.slice(l),y),y}return t},e1=function(t,a){var i=b0(cs(t,a),2),r=i[0],c=i[1];if(r!==void 0){if(r.delete(P0),r.size===0)ef(c);else if(r.size===1){var l=b0(r.entries().next().value,2),u=l[0],d=l[1];tf(c,u,d)}}},ef=function(t){if(t.length!==0){var a=b0(Ru(t),2),i=a[0],r=a[1];if(i.delete(r),i.size===0)ef(t.slice(0,-1));else if(i.size===1){var c=b0(i.entries().next().value,2),l=c[0],u=c[1];l!==P0&&tf(t.slice(0,-1),l,u)}}},tf=function(t,a,i){if(t.length!==0){var r=b0(Ru(t),2),c=r[0],l=r[1];c.set(l+a,i),c.delete(l)}},Ru=function(t){return t[t.length-1]},Kn,Pu="or",of="and",t1="and_not",o1=function(){function t(a){if((a==null?void 0:a.fields)==null)throw new Error('MiniSearch: option "fields" must be provided');var i=a.autoVacuum==null||a.autoVacuum===!0?gh:a.autoVacuum;this._options=o0(o0(o0({},mh),a),{autoVacuum:i,searchOptions:o0(o0({},Um),a.searchOptions||{}),autoSuggestOptions:o0(o0({},s1),a.autoSuggestOptions||{})}),this._index=new Ah,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=Wh,this.addFields(this._options.fields)}return t.prototype.add=function(a){var i,r,c,l,u,d,F=this._options,p=F.extractField,f=F.tokenize,m=F.processTerm,C=F.fields,y=F.idField,w=p(a,y);if(w==null)throw new Error('MiniSearch: document does not have ID field "'.concat(y,'"'));if(this._idToShortId.has(w))throw new Error("MiniSearch: duplicate ID ".concat(w));var v=this.addDocumentId(w);this.saveStoredFields(v,a);try{for(var D=L2(C),B=D.next();!B.done;B=D.next()){var S=B.value,E=p(a,S);if(E!=null){var T=f(E.toString(),S),P=this._fieldIds[S],x=new Set(T).size;this.addFieldLength(v,P,this._documentCount-1,x);try{for(var L=(c=void 0,L2(T)),z=L.next();!z.done;z=L.next()){var U=z.value,n2=m(U,S);if(Array.isArray(n2))try{for(var u2=(u=void 0,L2(n2)),s2=u2.next();!s2.done;s2=u2.next()){var c2=s2.value;this.addTerm(P,v,c2)}}catch(G){u={error:G}}finally{try{s2&&!s2.done&&(d=u2.return)&&d.call(u2)}finally{if(u)throw u.error}}else n2&&this.addTerm(P,v,n2)}}catch(G){c={error:G}}finally{try{z&&!z.done&&(l=L.return)&&l.call(L)}finally{if(c)throw c.error}}}}}catch(G){i={error:G}}finally{try{B&&!B.done&&(r=D.return)&&r.call(D)}finally{if(i)throw i.error}}},t.prototype.addAll=function(a){var i,r;try{for(var c=L2(a),l=c.next();!l.done;l=c.next()){var u=l.value;this.add(u)}}catch(d){i={error:d}}finally{try{l&&!l.done&&(r=c.return)&&r.call(c)}finally{if(i)throw i.error}}},t.prototype.addAllAsync=function(a,i){var r=this;i===void 0&&(i={});var c=i.chunkSize,l=c===void 0?10:c,u={chunk:[],promise:Promise.resolve()},d=a.reduce(function(f,m,C){var y=f.chunk,w=f.promise;return y.push(m),(C+1)%l===0?{chunk:[],promise:w.then(function(){return new Promise(function(v){return setTimeout(v,0)})}).then(function(){return r.addAll(y)})}:{chunk:y,promise:w}},u),F=d.chunk,p=d.promise;return p.then(function(){return r.addAll(F)})},t.prototype.remove=function(a){var i,r,c,l,u,d,F=this._options,p=F.tokenize,f=F.processTerm,m=F.extractField,C=F.fields,y=F.idField,w=m(a,y);if(w==null)throw new Error('MiniSearch: document does not have ID field "'.concat(y,'"'));var v=this._idToShortId.get(w);if(v==null)throw new Error("MiniSearch: cannot remove document with ID ".concat(w,": it is not in the index"));try{for(var D=L2(C),B=D.next();!B.done;B=D.next()){var S=B.value,E=m(a,S);if(E!=null){var T=p(E.toString(),S),P=this._fieldIds[S],x=new Set(T).size;this.removeFieldLength(v,P,this._documentCount,x);try{for(var L=(c=void 0,L2(T)),z=L.next();!z.done;z=L.next()){var U=z.value,n2=f(U,S);if(Array.isArray(n2))try{for(var u2=(u=void 0,L2(n2)),s2=u2.next();!s2.done;s2=u2.next()){var c2=s2.value;this.removeTerm(P,v,c2)}}catch(G){u={error:G}}finally{try{s2&&!s2.done&&(d=u2.return)&&d.call(u2)}finally{if(u)throw u.error}}else n2&&this.removeTerm(P,v,n2)}}catch(G){c={error:G}}finally{try{z&&!z.done&&(l=L.return)&&l.call(L)}finally{if(c)throw c.error}}}}}catch(G){i={error:G}}finally{try{B&&!B.done&&(r=D.return)&&r.call(D)}finally{if(i)throw i.error}}this._storedFields.delete(v),this._documentIds.delete(v),this._idToShortId.delete(w),this._fieldLength.delete(v),this._documentCount-=1},t.prototype.removeAll=function(a){var i,r;if(a)try{for(var c=L2(a),l=c.next();!l.done;l=c.next()){var u=l.value;this.remove(u)}}catch(d){i={error:d}}finally{try{l&&!l.done&&(r=c.return)&&r.call(c)}finally{if(i)throw i.error}}else{if(arguments.length>0)throw new Error("Expected documents to be present. Omit the argument to remove all documents.");this._index=new Ah,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldLength=new Map,this._avgFieldLength=[],this._storedFields=new Map,this._nextId=0}},t.prototype.discard=function(a){var i=this,r=this._idToShortId.get(a);if(r==null)throw new Error("MiniSearch: cannot discard document with ID ".concat(a,": it is not in the index"));this._idToShortId.delete(a),this._documentIds.delete(r),this._storedFields.delete(r),(this._fieldLength.get(r)||[]).forEach(function(c,l){i.removeFieldLength(r,l,i._documentCount,c)}),this._fieldLength.delete(r),this._documentCount-=1,this._dirtCount+=1,this.maybeAutoVacuum()},t.prototype.maybeAutoVacuum=function(){if(this._options.autoVacuum!==!1){var a=this._options.autoVacuum,i=a.minDirtFactor,r=a.minDirtCount,c=a.batchSize,l=a.batchWait;this.conditionalVacuum({batchSize:c,batchWait:l},{minDirtCount:r,minDirtFactor:i})}},t.prototype.discardAll=function(a){var i,r,c=this._options.autoVacuum;try{this._options.autoVacuum=!1;try{for(var l=L2(a),u=l.next();!u.done;u=l.next()){var d=u.value;this.discard(d)}}catch(F){i={error:F}}finally{try{u&&!u.done&&(r=l.return)&&r.call(l)}finally{if(i)throw i.error}}}finally{this._options.autoVacuum=c}this.maybeAutoVacuum()},t.prototype.replace=function(a){var i=this._options,r=i.idField,c=i.extractField,l=c(a,r);this.discard(l),this.add(a)},t.prototype.vacuum=function(a){return a===void 0&&(a={}),this.conditionalVacuum(a)},t.prototype.conditionalVacuum=function(a,i){var r=this;return this._currentVacuum?(this._enqueuedVacuumConditions=this._enqueuedVacuumConditions&&i,this._enqueuedVacuum!=null?this._enqueuedVacuum:(this._enqueuedVacuum=this._currentVacuum.then(function(){var c=r._enqueuedVacuumConditions;return r._enqueuedVacuumConditions=Wh,r.performVacuuming(a,c)}),this._enqueuedVacuum)):this.vacuumConditionsMet(i)===!1?Promise.resolve():(this._currentVacuum=this.performVacuuming(a),this._currentVacuum)},t.prototype.performVacuuming=function(a,i){return YD(this,void 0,void 0,function(){var r,c,l,u,d,F,p,f,m,C,y,w,v,D,B,S,E,T,P,x,L,z,U,n2,u2;return JD(this,function(s2){switch(s2.label){case 0:if(r=this._dirtCount,!this.vacuumConditionsMet(i))return[3,10];c=a.batchSize||qh.batchSize,l=a.batchWait||qh.batchWait,u=1,s2.label=1;case 1:s2.trys.push([1,7,8,9]),d=L2(this._index),F=d.next(),s2.label=2;case 2:if(F.done)return[3,6];p=b0(F.value,2),f=p[0],m=p[1];try{for(C=(z=void 0,L2(m)),y=C.next();!y.done;y=C.next()){w=b0(y.value,2),v=w[0],D=w[1];try{for(B=(n2=void 0,L2(D)),S=B.next();!S.done;S=B.next())E=b0(S.value,1),T=E[0],!this._documentIds.has(T)&&(D.size<=1?m.delete(v):D.delete(T))}catch(c2){n2={error:c2}}finally{try{S&&!S.done&&(u2=B.return)&&u2.call(B)}finally{if(n2)throw n2.error}}}}catch(c2){z={error:c2}}finally{try{y&&!y.done&&(U=C.return)&&U.call(C)}finally{if(z)throw z.error}}return this._index.get(f).size===0&&this._index.delete(f),u%c!==0?[3,4]:[4,new Promise(function(c2){return setTimeout(c2,l)})];case 3:s2.sent(),s2.label=4;case 4:u+=1,s2.label=5;case 5:return F=d.next(),[3,2];case 6:return[3,9];case 7:return P=s2.sent(),x={error:P},[3,9];case 8:try{F&&!F.done&&(L=d.return)&&L.call(d)}finally{if(x)throw x.error}return[7];case 9:this._dirtCount-=r,s2.label=10;case 10:return[4,null];case 11:return s2.sent(),this._currentVacuum=this._enqueuedVacuum,this._enqueuedVacuum=null,[2]}})})},t.prototype.vacuumConditionsMet=function(a){if(a==null)return!0;var i=a.minDirtCount,r=a.minDirtFactor;return i=i||gh.minDirtCount,r=r||gh.minDirtFactor,this.dirtCount>=i&&this.dirtFactor>=r},Object.defineProperty(t.prototype,"isVacuuming",{get:function(){return this._currentVacuum!=null},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"dirtCount",{get:function(){return this._dirtCount},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"dirtFactor",{get:function(){return this._dirtCount/(1+this._documentCount+this._dirtCount)},enumerable:!1,configurable:!0}),t.prototype.has=function(a){return this._idToShortId.has(a)},t.prototype.getStoredFields=function(a){var i=this._idToShortId.get(a);if(i!=null)return this._storedFields.get(i)},t.prototype.search=function(a,i){var r,c;i===void 0&&(i={});var l=this.executeQuery(a,i),u=[];try{for(var d=L2(l),F=d.next();!F.done;F=d.next()){var p=b0(F.value,2),f=p[0],m=p[1],C=m.score,y=m.terms,w=m.match,v=y.length||1,D={id:this._documentIds.get(f),score:C*v,terms:Object.keys(w),queryTerms:y,match:w};Object.assign(D,this._storedFields.get(f)),(i.filter==null||i.filter(D))&&u.push(D)}}catch(B){r={error:B}}finally{try{F&&!F.done&&(c=d.return)&&c.call(d)}finally{if(r)throw r.error}}return a===t.wildcard&&i.boostDocument==null&&this._options.searchOptions.boostDocument==null||u.sort(Wm),u},t.prototype.autoSuggest=function(a,i){var r,c,l,u;i===void 0&&(i={}),i=o0(o0({},this._options.autoSuggestOptions),i);var d=new Map;try{for(var F=L2(this.search(a,i)),p=F.next();!p.done;p=F.next()){var f=p.value,m=f.score,C=f.terms,y=C.join(" "),w=d.get(y);w!=null?(w.score+=m,w.count+=1):d.set(y,{score:m,terms:C,count:1})}}catch(P){r={error:P}}finally{try{p&&!p.done&&(c=F.return)&&c.call(F)}finally{if(r)throw r.error}}var v=[];try{for(var D=L2(d),B=D.next();!B.done;B=D.next()){var S=b0(B.value,2),w=S[0],E=S[1],m=E.score,C=E.terms,T=E.count;v.push({suggestion:w,terms:C,score:m/T})}}catch(P){l={error:P}}finally{try{B&&!B.done&&(u=D.return)&&u.call(D)}finally{if(l)throw l.error}}return v.sort(Wm),v},Object.defineProperty(t.prototype,"documentCount",{get:function(){return this._documentCount},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"termCount",{get:function(){return this._index.size},enumerable:!1,configurable:!0}),t.loadJSON=function(a,i){if(i==null)throw new Error("MiniSearch: loadJSON should be given the same options used when serializing the index");return this.loadJS(JSON.parse(a),i)},t.getDefault=function(a){if(mh.hasOwnProperty(a))return Fh(mh,a);throw new Error('MiniSearch: unknown option "'.concat(a,'"'))},t.loadJS=function(a,i){var r,c,l,u,d,F,p=a.index,f=a.documentCount,m=a.nextId,C=a.documentIds,y=a.fieldIds,w=a.fieldLength,v=a.averageFieldLength,D=a.storedFields,B=a.dirtCount,S=a.serializationVersion;if(S!==1&&S!==2)throw new Error("MiniSearch: cannot deserialize an index created with an incompatible version");var E=new t(i);E._documentCount=f,E._nextId=m,E._documentIds=Vr(C),E._idToShortId=new Map,E._fieldIds=y,E._fieldLength=Vr(w),E._avgFieldLength=v,E._storedFields=Vr(D),E._dirtCount=B||0,E._index=new Ah;try{for(var T=L2(E._documentIds),P=T.next();!P.done;P=T.next()){var x=b0(P.value,2),L=x[0],z=x[1];E._idToShortId.set(z,L)}}catch(X){r={error:X}}finally{try{P&&!P.done&&(c=T.return)&&c.call(T)}finally{if(r)throw r.error}}try{for(var U=L2(p),n2=U.next();!n2.done;n2=U.next()){var u2=b0(n2.value,2),s2=u2[0],c2=u2[1],G=new Map;try{for(var d2=(d=void 0,L2(Object.keys(c2))),O=d2.next();!O.done;O=d2.next()){var W=O.value,Q=c2[W];S===1&&(Q=Q.ds),G.set(parseInt(W,10),Vr(Q))}}catch(X){d={error:X}}finally{try{O&&!O.done&&(F=d2.return)&&F.call(d2)}finally{if(d)throw d.error}}E._index.set(s2,G)}}catch(X){l={error:X}}finally{try{n2&&!n2.done&&(u=U.return)&&u.call(U)}finally{if(l)throw l.error}}return E},t.prototype.executeQuery=function(a,i){var r=this;if(i===void 0&&(i={}),a===t.wildcard)return this.executeWildcardQuery(i);if(typeof a!="string"){var c=o0(o0(o0({},i),a),{queries:void 0}),l=a.queries.map(function(D){return r.executeQuery(D,c)});return this.combineResults(l,c.combineWith)}var u=this._options,d=u.tokenize,F=u.processTerm,p=u.searchOptions,f=o0(o0({tokenize:d,processTerm:F},p),i),m=f.tokenize,C=f.processTerm,y=m(a).flatMap(function(D){return C(D)}).filter(function(D){return!!D}),w=y.map(r1(f)),v=w.map(function(D){return r.executeQuerySpec(D,f)});return this.combineResults(v,f.combineWith)},t.prototype.executeQuerySpec=function(a,i){var r,c,l,u,d=o0(o0({},this._options.searchOptions),i),F=(d.fields||this._options.fields).reduce(function(W,Q){var X;return o0(o0({},W),(X={},X[Q]=Fh(d.boost,Q)||1,X))},{}),p=d.boostDocument,f=d.weights,m=d.maxFuzzy,C=d.bm25,y=o0(o0({},Um.weights),f),w=y.fuzzy,v=y.prefix,D=this._index.get(a.term),B=this.termResults(a.term,a.term,1,D,F,p,C),S,E;if(a.prefix&&(S=this._index.atPrefix(a.term)),a.fuzzy){var T=a.fuzzy===!0?.2:a.fuzzy,P=T<1?Math.min(m,Math.round(a.term.length*T)):T;P&&(E=this._index.fuzzyGet(a.term,P))}if(S)try{for(var x=L2(S),L=x.next();!L.done;L=x.next()){var z=b0(L.value,2),U=z[0],n2=z[1],u2=U.length-a.term.length;if(u2){E==null||E.delete(U);var s2=v*U.length/(U.length+.3*u2);this.termResults(a.term,U,s2,n2,F,p,C,B)}}}catch(W){r={error:W}}finally{try{L&&!L.done&&(c=x.return)&&c.call(x)}finally{if(r)throw r.error}}if(E)try{for(var c2=L2(E.keys()),G=c2.next();!G.done;G=c2.next()){var U=G.value,d2=b0(E.get(U),2),O=d2[0],u2=d2[1];if(u2){var s2=w*U.length/(U.length+u2);this.termResults(a.term,U,s2,O,F,p,C,B)}}}catch(W){l={error:W}}finally{try{G&&!G.done&&(u=c2.return)&&u.call(c2)}finally{if(l)throw l.error}}return B},t.prototype.executeWildcardQuery=function(a){var i,r,c=new Map,l=o0(o0({},this._options.searchOptions),a);try{for(var u=L2(this._documentIds),d=u.next();!d.done;d=u.next()){var F=b0(d.value,2),p=F[0],f=F[1],m=l.boostDocument?l.boostDocument(f,"",this._storedFields.get(p)):1;c.set(p,{score:m,terms:[],match:{}})}}catch(C){i={error:C}}finally{try{d&&!d.done&&(r=u.return)&&r.call(u)}finally{if(i)throw i.error}}return c},t.prototype.combineResults=function(a,i){if(i===void 0&&(i=Pu),a.length===0)return new Map;var r=i.toLowerCase();return a.reduce(a1[r])||new Map},t.prototype.toJSON=function(){var a,i,r,c,l=[];try{for(var u=L2(this._index),d=u.next();!d.done;d=u.next()){var F=b0(d.value,2),p=F[0],f=F[1],m={};try{for(var C=(r=void 0,L2(f)),y=C.next();!y.done;y=C.next()){var w=b0(y.value,2),v=w[0],D=w[1];m[v]=Object.fromEntries(D)}}catch(B){r={error:B}}finally{try{y&&!y.done&&(c=C.return)&&c.call(C)}finally{if(r)throw r.error}}l.push([p,m])}}catch(B){a={error:B}}finally{try{d&&!d.done&&(i=u.return)&&i.call(u)}finally{if(a)throw a.error}}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:l,serializationVersion:2}},t.prototype.termResults=function(a,i,r,c,l,u,d,F){var p,f,m,C,y;if(F===void 0&&(F=new Map),c==null)return F;try{for(var w=L2(Object.keys(l)),v=w.next();!v.done;v=w.next()){var D=v.value,B=l[D],S=this._fieldIds[D],E=c.get(S);if(E!=null){var T=E.size,P=this._avgFieldLength[S];try{for(var x=(m=void 0,L2(E.keys())),L=x.next();!L.done;L=x.next()){var z=L.value;if(!this._documentIds.has(z)){this.removeTerm(S,z,i),T-=1;continue}var U=u?u(this._documentIds.get(z),i,this._storedFields.get(z)):1;if(U){var n2=E.get(z),u2=this._fieldLength.get(z)[S],s2=i1(n2,T,this._documentCount,u2,P,d),c2=r*B*U*s2,G=F.get(z);if(G){G.score+=c2,c1(G.terms,a);var d2=Fh(G.match,i);d2?d2.push(D):G.match[i]=[D]}else F.set(z,{score:c2,terms:[a],match:(y={},y[i]=[D],y)})}}}catch(O){m={error:O}}finally{try{L&&!L.done&&(C=x.return)&&C.call(x)}finally{if(m)throw m.error}}}}}catch(O){p={error:O}}finally{try{v&&!v.done&&(f=w.return)&&f.call(w)}finally{if(p)throw p.error}}return F},t.prototype.addTerm=function(a,i,r){var c=this._index.fetch(r,Gm),l=c.get(a);if(l==null)l=new Map,l.set(i,1),c.set(a,l);else{var u=l.get(i);l.set(i,(u||0)+1)}},t.prototype.removeTerm=function(a,i,r){if(!this._index.has(r)){this.warnDocumentChanged(i,a,r);return}var c=this._index.fetch(r,Gm),l=c.get(a);l==null||l.get(i)==null?this.warnDocumentChanged(i,a,r):l.get(i)<=1?l.size<=1?c.delete(a):l.delete(i):l.set(i,l.get(i)-1),this._index.get(r).size===0&&this._index.delete(r)},t.prototype.warnDocumentChanged=function(a,i,r){var c,l;try{for(var u=L2(Object.keys(this._fieldIds)),d=u.next();!d.done;d=u.next()){var F=d.value;if(this._fieldIds[F]===i){this._options.logger("warn","MiniSearch: document with ID ".concat(this._documentIds.get(a),' has changed before removal: term "').concat(r,'" was not present in field "').concat(F,'". Removing a document after it has changed can corrupt the index!'),"version_conflict");return}}}catch(p){c={error:p}}finally{try{d&&!d.done&&(l=u.return)&&l.call(u)}finally{if(c)throw c.error}}},t.prototype.addDocumentId=function(a){var i=this._nextId;return this._idToShortId.set(a,i),this._documentIds.set(i,a),this._documentCount+=1,this._nextId+=1,i},t.prototype.addFields=function(a){for(var i=0;i<a.length;i++)this._fieldIds[a[i]]=i},t.prototype.addFieldLength=function(a,i,r,c){var l=this._fieldLength.get(a);l==null&&this._fieldLength.set(a,l=[]),l[i]=c;var u=this._avgFieldLength[i]||0,d=u*r+c;this._avgFieldLength[i]=d/(r+1)},t.prototype.removeFieldLength=function(a,i,r,c){if(r===1){this._avgFieldLength[i]=0;return}var l=this._avgFieldLength[i]*r-c;this._avgFieldLength[i]=l/(r-1)},t.prototype.saveStoredFields=function(a,i){var r,c,l=this._options,u=l.storeFields,d=l.extractField;if(!(u==null||u.length===0)){var F=this._storedFields.get(a);F==null&&this._storedFields.set(a,F={});try{for(var p=L2(u),f=p.next();!f.done;f=p.next()){var m=f.value,C=d(i,m);C!==void 0&&(F[m]=C)}}catch(y){r={error:y}}finally{try{f&&!f.done&&(c=p.return)&&c.call(p)}finally{if(r)throw r.error}}}},t.wildcard=Symbol("*"),t}(),Fh=function(t,a){return Object.prototype.hasOwnProperty.call(t,a)?t[a]:void 0},a1=(Kn={},Kn[Pu]=function(t,a){var i,r;try{for(var c=L2(a.keys()),l=c.next();!l.done;l=c.next()){var u=l.value,d=t.get(u);if(d==null)t.set(u,a.get(u));else{var F=a.get(u),p=F.score,f=F.terms,m=F.match;d.score=d.score+p,d.match=Object.assign(d.match,m),qm(d.terms,f)}}}catch(C){i={error:C}}finally{try{l&&!l.done&&(r=c.return)&&r.call(c)}finally{if(i)throw i.error}}return t},Kn[of]=function(t,a){var i,r,c=new Map;try{for(var l=L2(a.keys()),u=l.next();!u.done;u=l.next()){var d=u.value,F=t.get(d);if(F!=null){var p=a.get(d),f=p.score,m=p.terms,C=p.match;qm(F.terms,m),c.set(d,{score:F.score+f,terms:F.terms,match:Object.assign(F.match,C)})}}}catch(y){i={error:y}}finally{try{u&&!u.done&&(r=l.return)&&r.call(l)}finally{if(i)throw i.error}}return c},Kn[t1]=function(t,a){var i,r;try{for(var c=L2(a.keys()),l=c.next();!l.done;l=c.next()){var u=l.value;t.delete(u)}}catch(d){i={error:d}}finally{try{l&&!l.done&&(r=c.return)&&r.call(c)}finally{if(i)throw i.error}}return t},Kn),n1={k:1.2,b:.7,d:.5},i1=function(t,a,i,r,c,l){var u=l.k,d=l.b,F=l.d,p=Math.log(1+(i-a+.5)/(a+.5));return p*(F+t*(u+1)/(t+u*(1-d+d*r/c)))},r1=function(t){return function(a,i,r){var c=typeof t.fuzzy=="function"?t.fuzzy(a,i,r):t.fuzzy||!1,l=typeof t.prefix=="function"?t.prefix(a,i,r):t.prefix===!0;return{term:a,fuzzy:c,prefix:l}}},mh={idField:"id",extractField:function(t,a){return t[a]},tokenize:function(t){return t.split(l1)},processTerm:function(t){return t.toLowerCase()},fields:void 0,searchOptions:void 0,storeFields:[],logger:function(t,a){typeof(console==null?void 0:console[t])=="function"&&console[t](a)},autoVacuum:!0},Um={combineWith:Pu,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:n1},s1={combineWith:of,prefix:function(t,a,i){return a===i.length-1}},qh={batchSize:1e3,batchWait:10},Wh={minDirtFactor:.1,minDirtCount:20},gh=o0(o0({},qh),Wh),c1=function(t,a){t.includes(a)||t.push(a)},qm=function(t,a){var i,r;try{for(var c=L2(a),l=c.next();!l.done;l=c.next()){var u=l.value;t.includes(u)||t.push(u)}}catch(d){i={error:d}}finally{try{l&&!l.done&&(r=c.return)&&r.call(c)}finally{if(i)throw i.error}}},Wm=function(t,a){var i=t.score,r=a.score;return r-i},Gm=function(){return new Map},Vr=function(t){var a,i,r=new Map;try{for(var c=L2(Object.keys(t)),l=c.next();!l.done;l=c.next()){var u=l.value;r.set(parseInt(u,10),t[u])}}catch(d){a={error:d}}finally{try{l&&!l.done&&(i=c.return)&&i.call(c)}finally{if(a)throw a.error}}return r},l1=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u;let fh;function af(){const[t,a]=b.useState();return b.useEffect(()=>{(async()=>{fh||(fh=XD());const i=await fh,r=o1.loadJSON(i,{fields:["title","titles","text"],searchOptions:{boost:{title:4,text:2,titles:1},fuzzy:.2,prefix:!0},storeFields:["href","html","isPage","text","title","titles"]});a(r)})()},[]),b.useEffect(()=>{},[]),t}var h1="vocs_DesktopSearch_search",u1="vocs_DesktopSearch_searchCommand",d1="Label",nf=b.forwardRef((t,a)=>g.jsx(T2.label,{...t,ref:a,onMouseDown:i=>{var c;i.target.closest("button, input, select, textarea")||((c=t.onMouseDown)==null||c.call(t,i),!i.defaultPrevented&&i.detail>1&&i.preventDefault())}}));nf.displayName=d1;var A1=nf,ts={exports:{}};/*!***************************************************
* mark.js v8.11.1
* https://markjs.io/
* Copyright (c) 2014–2018, Julian Kühnel
* Released under the MIT license https://git.io/vwTVl
*****************************************************/var p1=ts.exports,Km;function F1(){return Km||(Km=1,function(t,a){(function(i,r){t.exports=r()})(p1,function(){var i=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(p){return typeof p}:function(p){return p&&typeof Symbol=="function"&&p.constructor===Symbol&&p!==Symbol.prototype?"symbol":typeof p},r=function(p,f){if(!(p instanceof f))throw new TypeError("Cannot call a class as a function")},c=function(){function p(f,m){for(var C=0;C<m.length;C++){var y=m[C];y.enumerable=y.enumerable||!1,y.configurable=!0,"value"in y&&(y.writable=!0),Object.defineProperty(f,y.key,y)}}return function(f,m,C){return m&&p(f.prototype,m),C&&p(f,C),f}}(),l=Object.assign||function(p){for(var f=1;f<arguments.length;f++){var m=arguments[f];for(var C in m)Object.prototype.hasOwnProperty.call(m,C)&&(p[C]=m[C])}return p},u=function(){function p(f){var m=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0,C=arguments.length>2&&arguments[2]!==void 0?arguments[2]:[],y=arguments.length>3&&arguments[3]!==void 0?arguments[3]:5e3;r(this,p),this.ctx=f,this.iframes=m,this.exclude=C,this.iframesTimeout=y}return c(p,[{key:"getContexts",value:function(){var m=void 0,C=[];return typeof this.ctx>"u"||!this.ctx?m=[]:NodeList.prototype.isPrototypeOf(this.ctx)?m=Array.prototype.slice.call(this.ctx):Array.isArray(this.ctx)?m=this.ctx:typeof this.ctx=="string"?m=Array.prototype.slice.call(document.querySelectorAll(this.ctx)):m=[this.ctx],m.forEach(function(y){var w=C.filter(function(v){return v.contains(y)}).length>0;C.indexOf(y)===-1&&!w&&C.push(y)}),C}},{key:"getIframeContents",value:function(m,C){var y=arguments.length>2&&arguments[2]!==void 0?arguments[2]:function(){},w=void 0;try{var v=m.contentWindow;if(w=v.document,!v||!w)throw new Error("iframe inaccessible")}catch{y()}w&&C(w)}},{key:"isIframeBlank",value:function(m){var C="about:blank",y=m.getAttribute("src").trim(),w=m.contentWindow.location.href;return w===C&&y!==C&&y}},{key:"observeIframeLoad",value:function(m,C,y){var w=this,v=!1,D=null,B=function S(){if(!v){v=!0,clearTimeout(D);try{w.isIframeBlank(m)||(m.removeEventListener("load",S),w.getIframeContents(m,C,y))}catch{y()}}};m.addEventListener("load",B),D=setTimeout(B,this.iframesTimeout)}},{key:"onIframeReady",value:function(m,C,y){try{m.contentWindow.document.readyState==="complete"?this.isIframeBlank(m)?this.observeIframeLoad(m,C,y):this.getIframeContents(m,C,y):this.observeIframeLoad(m,C,y)}catch{y()}}},{key:"waitForIframes",value:function(m,C){var y=this,w=0;this.forEachIframe(m,function(){return!0},function(v){w++,y.waitForIframes(v.querySelector("html"),function(){--w||C()})},function(v){v||C()})}},{key:"forEachIframe",value:function(m,C,y){var w=this,v=arguments.length>3&&arguments[3]!==void 0?arguments[3]:function(){},D=m.querySelectorAll("iframe"),B=D.length,S=0;D=Array.prototype.slice.call(D);var E=function(){--B<=0&&v(S)};B||E(),D.forEach(function(T){p.matches(T,w.exclude)?E():w.onIframeReady(T,function(P){C(T)&&(S++,y(P)),E()},E)})}},{key:"createIterator",value:function(m,C,y){return document.createNodeIterator(m,C,y,!1)}},{key:"createInstanceOnIframe",value:function(m){return new p(m.querySelector("html"),this.iframes)}},{key:"compareNodeIframe",value:function(m,C,y){var w=m.compareDocumentPosition(y),v=Node.DOCUMENT_POSITION_PRECEDING;if(w&v)if(C!==null){var D=C.compareDocumentPosition(y),B=Node.DOCUMENT_POSITION_FOLLOWING;if(D&B)return!0}else return!0;return!1}},{key:"getIteratorNode",value:function(m){var C=m.previousNode(),y=void 0;return C===null?y=m.nextNode():y=m.nextNode()&&m.nextNode(),{prevNode:C,node:y}}},{key:"checkIframeFilter",value:function(m,C,y,w){var v=!1,D=!1;return w.forEach(function(B,S){B.val===y&&(v=S,D=B.handled)}),this.compareNodeIframe(m,C,y)?(v===!1&&!D?w.push({val:y,handled:!0}):v!==!1&&!D&&(w[v].handled=!0),!0):(v===!1&&w.push({val:y,handled:!1}),!1)}},{key:"handleOpenIframes",value:function(m,C,y,w){var v=this;m.forEach(function(D){D.handled||v.getIframeContents(D.val,function(B){v.createInstanceOnIframe(B).forEachNode(C,y,w)})})}},{key:"iterateThroughNodes",value:function(m,C,y,w,v){for(var D=this,B=this.createIterator(C,m,w),S=[],E=[],T=void 0,P=void 0,x=function(){var z=D.getIteratorNode(B);return P=z.prevNode,T=z.node,T};x();)this.iframes&&this.forEachIframe(C,function(L){return D.checkIframeFilter(T,P,L,S)},function(L){D.createInstanceOnIframe(L).forEachNode(m,function(z){return E.push(z)},w)}),E.push(T);E.forEach(function(L){y(L)}),this.iframes&&this.handleOpenIframes(S,m,y,w),v()}},{key:"forEachNode",value:function(m,C,y){var w=this,v=arguments.length>3&&arguments[3]!==void 0?arguments[3]:function(){},D=this.getContexts(),B=D.length;B||v(),D.forEach(function(S){var E=function(){w.iterateThroughNodes(m,S,C,y,function(){--B<=0&&v()})};w.iframes?w.waitForIframes(S,E):E()})}}],[{key:"matches",value:function(m,C){var y=typeof C=="string"?[C]:C,w=m.matches||m.matchesSelector||m.msMatchesSelector||m.mozMatchesSelector||m.oMatchesSelector||m.webkitMatchesSelector;if(w){var v=!1;return y.every(function(D){return w.call(m,D)?(v=!0,!1):!0}),v}else return!1}}]),p}(),d=function(){function p(f){r(this,p),this.ctx=f,this.ie=!1;var m=window.navigator.userAgent;(m.indexOf("MSIE")>-1||m.indexOf("Trident")>-1)&&(this.ie=!0)}return c(p,[{key:"log",value:function(m){var C=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"debug",y=this.opt.log;this.opt.debug&&(typeof y>"u"?"undefined":i(y))==="object"&&typeof y[C]=="function"&&y[C]("mark.js: "+m)}},{key:"escapeStr",value:function(m){return m.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&")}},{key:"createRegExp",value:function(m){return this.opt.wildcards!=="disabled"&&(m=this.setupWildcardsRegExp(m)),m=this.escapeStr(m),Object.keys(this.opt.synonyms).length&&(m=this.createSynonymsRegExp(m)),(this.opt.ignoreJoiners||this.opt.ignorePunctuation.length)&&(m=this.setupIgnoreJoinersRegExp(m)),this.opt.diacritics&&(m=this.createDiacriticsRegExp(m)),m=this.createMergedBlanksRegExp(m),(this.opt.ignoreJoiners||this.opt.ignorePunctuation.length)&&(m=this.createJoinersRegExp(m)),this.opt.wildcards!=="disabled"&&(m=this.createWildcardsRegExp(m)),m=this.createAccuracyRegExp(m),m}},{key:"createSynonymsRegExp",value:function(m){var C=this.opt.synonyms,y=this.opt.caseSensitive?"":"i",w=this.opt.ignoreJoiners||this.opt.ignorePunctuation.length?"\0":"";for(var v in C)if(C.hasOwnProperty(v)){var D=C[v],B=this.opt.wildcards!=="disabled"?this.setupWildcardsRegExp(v):this.escapeStr(v),S=this.opt.wildcards!=="disabled"?this.setupWildcardsRegExp(D):this.escapeStr(D);B!==""&&S!==""&&(m=m.replace(new RegExp("("+this.escapeStr(B)+"|"+this.escapeStr(S)+")","gm"+y),w+("("+this.processSynomyms(B)+"|")+(this.processSynomyms(S)+")")+w))}return m}},{key:"processSynomyms",value:function(m){return(this.opt.ignoreJoiners||this.opt.ignorePunctuation.length)&&(m=this.setupIgnoreJoinersRegExp(m)),m}},{key:"setupWildcardsRegExp",value:function(m){return m=m.replace(/(?:\\)*\?/g,function(C){return C.charAt(0)==="\\"?"?":""}),m.replace(/(?:\\)*\*/g,function(C){return C.charAt(0)==="\\"?"*":""})}},{key:"createWildcardsRegExp",value:function(m){var C=this.opt.wildcards==="withSpaces";return m.replace(/\u0001/g,C?"[\\S\\s]?":"\\S?").replace(/\u0002/g,C?"[\\S\\s]*?":"\\S*")}},{key:"setupIgnoreJoinersRegExp",value:function(m){return m.replace(/[^(|)\\]/g,function(C,y,w){var v=w.charAt(y+1);return/[(|)\\]/.test(v)||v===""?C:C+"\0"})}},{key:"createJoinersRegExp",value:function(m){var C=[],y=this.opt.ignorePunctuation;return Array.isArray(y)&&y.length&&C.push(this.escapeStr(y.join(""))),this.opt.ignoreJoiners&&C.push("\\u00ad\\u200b\\u200c\\u200d"),C.length?m.split(/\u0000+/).join("["+C.join("")+"]*"):m}},{key:"createDiacriticsRegExp",value:function(m){var C=this.opt.caseSensitive?"":"i",y=this.opt.caseSensitive?["aàáảãạăằắẳẵặâầấẩẫậäåāą","AÀÁẢÃẠĂẰẮẲẴẶÂẦẤẨẪẬÄÅĀĄ","cçćč","CÇĆČ","dđď","DĐĎ","eèéẻẽẹêềếểễệëěēę","EÈÉẺẼẸÊỀẾỂỄỆËĚĒĘ","iìíỉĩịîïī","IÌÍỈĨỊÎÏĪ","lł","LŁ","nñňń","NÑŇŃ","oòóỏõọôồốổỗộơởỡớờợöøō","OÒÓỎÕỌÔỒỐỔỖỘƠỞỠỚỜỢÖØŌ","rř","RŘ","sšśșş","SŠŚȘŞ","tťțţ","TŤȚŢ","uùúủũụưừứửữựûüůū","UÙÚỦŨỤƯỪỨỬỮỰÛÜŮŪ","yýỳỷỹỵÿ","YÝỲỶỸỴŸ","zžżź","ZŽŻŹ"]:["aàáảãạăằắẳẵặâầấẩẫậäåāąAÀÁẢÃẠĂẰẮẲẴẶÂẦẤẨẪẬÄÅĀĄ","cçćčCÇĆČ","dđďDĐĎ","eèéẻẽẹêềếểễệëěēęEÈÉẺẼẸÊỀẾỂỄỆËĚĒĘ","iìíỉĩịîïīIÌÍỈĨỊÎÏĪ","lłLŁ","nñňńNÑŇŃ","oòóỏõọôồốổỗộơởỡớờợöøōOÒÓỎÕỌÔỒỐỔỖỘƠỞỠỚỜỢÖØŌ","rřRŘ","sšśșşSŠŚȘŞ","tťțţTŤȚŢ","uùúủũụưừứửữựûüůūUÙÚỦŨỤƯỪỨỬỮỰÛÜŮŪ","yýỳỷỹỵÿYÝỲỶỸỴŸ","zžżźZŽŻŹ"],w=[];return m.split("").forEach(function(v){y.every(function(D){if(D.indexOf(v)!==-1){if(w.indexOf(D)>-1)return!1;m=m.replace(new RegExp("["+D+"]","gm"+C),"["+D+"]"),w.push(D)}return!0})}),m}},{key:"createMergedBlanksRegExp",value:function(m){return m.replace(/[\s]+/gmi,"[\\s]+")}},{key:"createAccuracyRegExp",value:function(m){var C=this,y="!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~¡¿",w=this.opt.accuracy,v=typeof w=="string"?w:w.value,D=typeof w=="string"?[]:w.limiters,B="";switch(D.forEach(function(S){B+="|"+C.escapeStr(S)}),v){case"partially":default:return"()("+m+")";case"complementary":return B="\\s"+(B||this.escapeStr(y)),"()([^"+B+"]*"+m+"[^"+B+"]*)";case"exactly":return"(^|\\s"+B+")("+m+")(?=$|\\s"+B+")"}}},{key:"getSeparatedKeywords",value:function(m){var C=this,y=[];return m.forEach(function(w){C.opt.separateWordSearch?w.split(" ").forEach(function(v){v.trim()&&y.indexOf(v)===-1&&y.push(v)}):w.trim()&&y.indexOf(w)===-1&&y.push(w)}),{keywords:y.sort(function(w,v){return v.length-w.length}),length:y.length}}},{key:"isNumeric",value:function(m){return Number(parseFloat(m))==m}},{key:"checkRanges",value:function(m){var C=this;if(!Array.isArray(m)||Object.prototype.toString.call(m[0])!=="[object Object]")return this.log("markRanges() will only accept an array of objects"),this.opt.noMatch(m),[];var y=[],w=0;return m.sort(function(v,D){return v.start-D.start}).forEach(function(v){var D=C.callNoMatchOnInvalidRanges(v,w),B=D.start,S=D.end,E=D.valid;E&&(v.start=B,v.length=S-B,y.push(v),w=S)}),y}},{key:"callNoMatchOnInvalidRanges",value:function(m,C){var y=void 0,w=void 0,v=!1;return m&&typeof m.start<"u"?(y=parseInt(m.start,10),w=y+parseInt(m.length,10),this.isNumeric(m.start)&&this.isNumeric(m.length)&&w-C>0&&w-y>0?v=!0:(this.log("Ignoring invalid or overlapping range: "+(""+JSON.stringify(m))),this.opt.noMatch(m))):(this.log("Ignoring invalid range: "+JSON.stringify(m)),this.opt.noMatch(m)),{start:y,end:w,valid:v}}},{key:"checkWhitespaceRanges",value:function(m,C,y){var w=void 0,v=!0,D=y.length,B=C-D,S=parseInt(m.start,10)-B;return S=S>D?D:S,w=S+parseInt(m.length,10),w>D&&(w=D,this.log("End range automatically set to the max value of "+D)),S<0||w-S<0||S>D||w>D?(v=!1,this.log("Invalid range: "+JSON.stringify(m)),this.opt.noMatch(m)):y.substring(S,w).replace(/\s+/g,"")===""&&(v=!1,this.log("Skipping whitespace only range: "+JSON.stringify(m)),this.opt.noMatch(m)),{start:S,end:w,valid:v}}},{key:"getTextNodes",value:function(m){var C=this,y="",w=[];this.iterator.forEachNode(NodeFilter.SHOW_TEXT,function(v){w.push({start:y.length,end:(y+=v.textContent).length,node:v})},function(v){return C.matchesExclude(v.parentNode)?NodeFilter.FILTER_REJECT:NodeFilter.FILTER_ACCEPT},function(){m({value:y,nodes:w})})}},{key:"matchesExclude",value:function(m){return u.matches(m,this.opt.exclude.concat(["script","style","title","head","html"]))}},{key:"wrapRangeInTextNode",value:function(m,C,y){var w=this.opt.element?this.opt.element:"mark",v=m.splitText(C),D=v.splitText(y-C),B=document.createElement(w);return B.setAttribute("data-markjs","true"),this.opt.className&&B.setAttribute("class",this.opt.className),B.textContent=v.textContent,v.parentNode.replaceChild(B,v),D}},{key:"wrapRangeInMappedTextNode",value:function(m,C,y,w,v){var D=this;m.nodes.every(function(B,S){var E=m.nodes[S+1];if(typeof E>"u"||E.start>C){if(!w(B.node))return!1;var T=C-B.start,P=(y>B.end?B.end:y)-B.start,x=m.value.substr(0,B.start),L=m.value.substr(P+B.start);if(B.node=D.wrapRangeInTextNode(B.node,T,P),m.value=x+L,m.nodes.forEach(function(z,U){U>=S&&(m.nodes[U].start>0&&U!==S&&(m.nodes[U].start-=P),m.nodes[U].end-=P)}),y-=P,v(B.node.previousSibling,B.start),y>B.end)C=B.end;else return!1}return!0})}},{key:"wrapMatches",value:function(m,C,y,w,v){var D=this,B=C===0?0:C+1;this.getTextNodes(function(S){S.nodes.forEach(function(E){E=E.node;for(var T=void 0;(T=m.exec(E.textContent))!==null&&T[B]!=="";)if(y(T[B],E)){var P=T.index;if(B!==0)for(var x=1;x<B;x++)P+=T[x].length;E=D.wrapRangeInTextNode(E,P,P+T[B].length),w(E.previousSibling),m.lastIndex=0}}),v()})}},{key:"wrapMatchesAcrossElements",value:function(m,C,y,w,v){var D=this,B=C===0?0:C+1;this.getTextNodes(function(S){for(var E=void 0;(E=m.exec(S.value))!==null&&E[B]!=="";){var T=E.index;if(B!==0)for(var P=1;P<B;P++)T+=E[P].length;var x=T+E[B].length;D.wrapRangeInMappedTextNode(S,T,x,function(L){return y(E[B],L)},function(L,z){m.lastIndex=z,w(L)})}v()})}},{key:"wrapRangeFromIndex",value:function(m,C,y,w){var v=this;this.getTextNodes(function(D){var B=D.value.length;m.forEach(function(S,E){var T=v.checkWhitespaceRanges(S,B,D.value),P=T.start,x=T.end,L=T.valid;L&&v.wrapRangeInMappedTextNode(D,P,x,function(z){return C(z,S,D.value.substring(P,x),E)},function(z){y(z,S)})}),w()})}},{key:"unwrapMatches",value:function(m){for(var C=m.parentNode,y=document.createDocumentFragment();m.firstChild;)y.appendChild(m.removeChild(m.firstChild));C.replaceChild(y,m),this.ie?this.normalizeTextNode(C):C.normalize()}},{key:"normalizeTextNode",value:function(m){if(m){if(m.nodeType===3)for(;m.nextSibling&&m.nextSibling.nodeType===3;)m.nodeValue+=m.nextSibling.nodeValue,m.parentNode.removeChild(m.nextSibling);else this.normalizeTextNode(m.firstChild);this.normalizeTextNode(m.nextSibling)}}},{key:"markRegExp",value:function(m,C){var y=this;this.opt=C,this.log('Searching with expression "'+m+'"');var w=0,v="wrapMatches",D=function(S){w++,y.opt.each(S)};this.opt.acrossElements&&(v="wrapMatchesAcrossElements"),this[v](m,this.opt.ignoreGroups,function(B,S){return y.opt.filter(S,B,w)},D,function(){w===0&&y.opt.noMatch(m),y.opt.done(w)})}},{key:"mark",value:function(m,C){var y=this;this.opt=C;var w=0,v="wrapMatches",D=this.getSeparatedKeywords(typeof m=="string"?[m]:m),B=D.keywords,S=D.length,E=this.opt.caseSensitive?"":"i",T=function P(x){var L=new RegExp(y.createRegExp(x),"gm"+E),z=0;y.log('Searching with expression "'+L+'"'),y[v](L,1,function(U,n2){return y.opt.filter(n2,x,w,z)},function(U){z++,w++,y.opt.each(U)},function(){z===0&&y.opt.noMatch(x),B[S-1]===x?y.opt.done(w):P(B[B.indexOf(x)+1])})};this.opt.acrossElements&&(v="wrapMatchesAcrossElements"),S===0?this.opt.done(w):T(B[0])}},{key:"markRanges",value:function(m,C){var y=this;this.opt=C;var w=0,v=this.checkRanges(m);v&&v.length?(this.log("Starting to mark with the following ranges: "+JSON.stringify(v)),this.wrapRangeFromIndex(v,function(D,B,S,E){return y.opt.filter(D,B,S,E)},function(D,B){w++,y.opt.each(D,B)},function(){y.opt.done(w)})):this.opt.done(w)}},{key:"unmark",value:function(m){var C=this;this.opt=m;var y=this.opt.element?this.opt.element:"*";y+="[data-markjs]",this.opt.className&&(y+="."+this.opt.className),this.log('Removal selector "'+y+'"'),this.iterator.forEachNode(NodeFilter.SHOW_ELEMENT,function(w){C.unwrapMatches(w)},function(w){var v=u.matches(w,y),D=C.matchesExclude(w);return!v||D?NodeFilter.FILTER_REJECT:NodeFilter.FILTER_ACCEPT},this.opt.done)}},{key:"opt",set:function(m){this._opt=l({},{element:"",className:"",exclude:[],iframes:!1,iframesTimeout:5e3,separateWordSearch:!0,diacritics:!0,synonyms:{},accuracy:"partially",acrossElements:!1,caseSensitive:!1,ignoreJoiners:!1,ignoreGroups:0,ignorePunctuation:[],wildcards:"disabled",each:function(){},noMatch:function(){},filter:function(){return!0},done:function(){},debug:!1,log:window.console},m)},get:function(){return this._opt}},{key:"iterator",get:function(){return new u(this.ctx,this.opt.iframes,this.opt.exclude,this.opt.iframesTimeout)}}]),p}();function F(p){var f=this,m=new d(p);return this.mark=function(C,y){return m.mark(C,y),f},this.markRegExp=function(C,y){return m.markRegExp(C,y),f},this.markRanges=function(C,y){return m.markRanges(C,y),f},this.unmark=function(C){return m.unmark(C),f},this}return F})}(ts)),ts.exports}var m1=F1();const g1=fs(m1);function f1(t,a){const[i,r]=b.useState(t);return b.useEffect(()=>{const c=setTimeout(()=>r(t),a);return()=>{clearTimeout(c)}},[t,a]),i}function rf(t,a){const[i,r]=b.useState();b.useEffect(()=>{const l=b1(t);r(typeof l>"u"||l===null?a:l)},[a,t]);const c=b.useCallback(l=>{r(u=>{let d;typeof l=="function"?d=l(u):d=l;try{localStorage.setItem(t,JSON.stringify(d))}catch{}return d})},[t]);return[i,c]}function b1(t){try{const a=localStorage.getItem(t);return typeof a=="string"?JSON.parse(a):void 0}catch{return}}function C1(t,a){const[i,r]=b.useState();b.useEffect(()=>{const l=y1(t);r(typeof l>"u"||l===null?a:l)},[a,t]);const c=b.useCallback(l=>{r(u=>{let d;typeof l=="function"?d=l(u):d=l;try{sessionStorage.setItem(t,JSON.stringify(d))}catch{}return d})},[t]);return[i,c]}function y1(t){try{const a=sessionStorage.getItem(t);return typeof a=="string"?JSON.parse(a):void 0}catch{return}}var sf="vocs_utils_visuallyHidden",v1="vocs_Kbd";function cf(t){return g.jsx("kbd",{...t,className:l2(t.className,v1)})}var w1="vocs_KeyboardShortcut",k1="vocs_KeyboardShortcut_kbdGroup";function _a(t){const{description:a,keys:i}=t;return g.jsxs("span",{className:w1,children:[a,g.jsx("span",{className:k1,children:i.map(r=>g.jsx(cf,{children:r},r))})]})}var D1="vocs_SearchDialog",B1="vocs_SearchDialog_overlay",E1="vocs_SearchDialog_searchBox",_1="vocs_SearchDialog_searchInput",Ur="vocs_SearchDialog_searchInputIcon",S1="vocs_SearchDialog_searchInputIconDesktop",x1="vocs_SearchDialog_searchInputIconMobile",T1="vocs_SearchDialog_results",R1="vocs_SearchDialog_result",P1="vocs_SearchDialog_resultSelected",Zm="vocs_SearchDialog_resultIcon",I1="vocs_SearchDialog_titles",Xm="vocs_SearchDialog_title",M1="vocs_SearchDialog_titleIcon",L1="vocs_SearchDialog_content",Ym="vocs_SearchDialog_excerpt",O1="vocs_SearchDialog_searchShortcuts";function lf(t){const{search:a}=m0(),i=gu(),r=b.useRef(null),c=b.useRef(null),[l,u]=C1("filterText",""),d=f1(l,200),F=af(),[p,f]=b.useState(-1),[m,C]=b.useState(!1),[y,w]=rf("showDetailView",!0),v=b.useMemo(()=>F?d?(f(0),F.search(d,a).slice(0,16)):(f(-1),[]):[],[F,a,d]),D=v.length,B=v[p],S=b.useCallback(()=>{var x,L,z;if(!c.current)return;const E=new Set;for(const U of v)for(const n2 in U.match)E.add(n2);const T=new g1(c.current);T.unmark({done(){T==null||T.markRegExp(N1(E))}});const P=c.current.querySelectorAll(`.${Ym}`);for(const U of P)(x=U.querySelector('mark[data-markjs="true"]'))==null||x.scrollIntoView({block:"center"});(z=(L=c.current)==null?void 0:L.firstElementChild)==null||z.scrollIntoView({block:"start"})},[v]);return b.useEffect(()=>{if(!t.open)return;function E(T){var P;switch(T.key){case"ArrowDown":{T.preventDefault(),f(x=>{var U;let L=x+1;L>=D&&(L=0);const z=(U=c.current)==null?void 0:U.children[L];return z==null||z.scrollIntoView({block:"nearest"}),L}),C(!0);break}case"ArrowUp":{T.preventDefault(),f(x=>{var U;let L=x-1;L<0&&(L=D-1);const z=(U=c.current)==null?void 0:U.children[L];return z==null||z.scrollIntoView({block:"nearest"}),L}),C(!0);break}case"Backspace":{if(!T.metaKey)return;T.preventDefault(),u(""),(P=r.current)==null||P.focus();break}case"Enter":{if(T.target instanceof HTMLButtonElement&&T.target.type!=="submit"||!B)return;T.preventDefault(),i(B.href),t.onClose();break}}}return window.addEventListener("keydown",E),()=>{window.removeEventListener("keydown",E)}},[i,D,u,B,t.open,t.onClose]),b.useEffect(()=>{d!==""&&c.current&&S()},[S,d]),g.jsxs(WD,{children:[g.jsx(GD,{className:B1}),g.jsxs(KD,{onOpenAutoFocus:E=>{r.current&&(E.preventDefault(),r.current.focus()),S()},onCloseAutoFocus:()=>{f(0)},className:D1,"aria-describedby":void 0,children:[g.jsx(ZD,{className:sf,children:"Search"}),g.jsxs("form",{className:E1,children:[g.jsx("button",{"aria-label":"Close search dialog",type:"button",onClick:()=>t.onClose(),className:x1,children:g.jsx(tk,{className:Ur,height:20,width:20})}),g.jsx(A1,{htmlFor:"search-input",children:g.jsx(Du,{"aria-label":"Search",className:l2(Ur,S1),height:20,width:20})}),g.jsx("input",{ref:r,tabIndex:0,className:_1,id:"search-input",onChange:E=>u(E.target.value),placeholder:"Search",type:"search",value:l}),g.jsx("button",{"aria-label":"Toggle detail view",type:"button",onClick:()=>w(E=>!E),children:g.jsx(lk,{className:Ur,height:20,width:20})}),g.jsx("button",{"aria-label":"Reset search",type:"button",className:Ur,onClick:()=>{var E;u(""),(E=r.current)==null||E.focus()},children:"⌫"})]}),g.jsxs("ul",{className:T1,role:v.length?"listbox":void 0,onMouseMove:()=>C(!1),ref:c,children:[d&&v.length===0&&g.jsxs("li",{children:['No results for "',g.jsx("span",{children:d}),'"']}),v.map((E,T)=>{var P;return g.jsx("li",{role:"option",className:l2(R1,T===p&&P1),"aria-selected":T===p,"aria-label":[...E.titles.filter(x=>!!x),E.title].join(" > "),children:g.jsxs(Ha,{to:E.href,onClick:x=>{x.metaKey||t.onClose()},onMouseEnter:()=>!m&&f(T),onFocus:()=>f(T),children:[g.jsxs("div",{className:I1,children:[E.isPage?g.jsx(sk,{className:Zm}):g.jsx("span",{className:Zm,children:"#"}),E.titles.filter(x=>!!x).map(x=>g.jsxs("span",{className:Xm,children:[g.jsx("span",{dangerouslySetInnerHTML:{__html:x}}),g.jsx(ak,{className:M1})]},x)),g.jsx("span",{className:Xm,children:g.jsx("span",{dangerouslySetInnerHTML:{__html:E.title}})})]}),y&&((P=E.text)==null?void 0:P.trim())&&g.jsx("div",{className:Ym,children:g.jsx(yg,{className:L1,children:g.jsx("div",{dangerouslySetInnerHTML:{__html:E.html}})})})]})},E.id)})]}),g.jsxs("div",{className:O1,children:[g.jsx(_a,{description:"Navigate",keys:["↑","↓"]}),g.jsx(_a,{description:"Select",keys:["enter"]}),g.jsx(_a,{description:"Close",keys:["esc"]}),g.jsx(_a,{description:"Reset",keys:["⌘","⌫"]})]})]})]})}function N1(t){return new RegExp([...t].sort((a,i)=>i.length-a.length).map(a=>`(${a.replace(/[|\\{}()[\]^$+*?.]/g,"\\$&").replace(/-/g,"\\x2d")})`).join("|"),"gi")}function H1(){af();const[t,a]=b.useState(!1);return b.useEffect(()=>{function i(r){const c=document.activeElement instanceof HTMLElement&&(["input","select","textarea"].includes(document.activeElement.tagName.toLowerCase())||document.activeElement.isContentEditable);r.key==="/"&&!t&&!c?(r.preventDefault(),a(!0)):r.metaKey===!0&&r.key==="k"&&(r.preventDefault(),a(l=>!l))}return window.addEventListener("keydown",i),()=>{window.removeEventListener("keydown",i)}},[t]),g.jsxs(Xg,{open:t,onOpenChange:a,children:[g.jsx(Yg,{asChild:!0,children:g.jsxs("button",{className:h1,type:"button",children:[g.jsx(Du,{style:{marginTop:2}}),"Search...",g.jsx("div",{className:u1,children:g.jsx("div",{style:{background:"currentColor",transform:"rotate(45deg)",width:1.5,borderRadius:2,height:"100%"}})})]})}),g.jsx(lf,{open:t,onClose:()=>a(!1)})]})}var z1="vocs_DesktopTopNav",j1="vocs_DesktopTopNav_withLogo",V1="vocs_DesktopTopNav_content",U1="vocs_DesktopTopNav_curtain",q1="vocs_DesktopTopNav_group",Jm="vocs_DesktopTopNav_item",W1="vocs_DesktopTopNav_logo",G1="vocs_DesktopTopNav_logoWrapper",Qm="vocs_DesktopTopNav_section",bh="vocs_Logo",K1="vocs_Logo_logoDark",Z1="vocs_Logo_logoLight";function X1({className:t}){const{logoUrl:a}=m0();return a?g.jsx(g.Fragment,{children:typeof a=="string"?g.jsx("img",{alt:"Logo",className:l2(t,bh),src:a}):g.jsxs(g.Fragment,{children:[g.jsx("img",{alt:"Logo",className:l2(t,bh,K1),src:a.dark}),g.jsx("img",{alt:"Logo",className:l2(t,bh,Z1),src:a.light})]})}):null}var Y1="vocs_NavLogo_logoImage",J1="vocs_NavLogo_title";function Iu(){const t=m0();return t.logoUrl?g.jsx(X1,{className:Y1}):g.jsx("div",{className:J1,children:t.title})}var Q1=b.createContext(void 0);function hi(t){const a=b.useContext(Q1);return t||a||"ltr"}function ui(t){const a=t+"CollectionProvider",[i,r]=Le(a),[c,l]=i(a,{collectionRef:{current:null},itemMap:new Map}),u=v=>{const{scope:D,children:B}=v,S=a0.useRef(null),E=a0.useRef(new Map).current;return g.jsx(c,{scope:D,itemMap:E,collectionRef:S,children:B})};u.displayName=a;const d=t+"CollectionSlot",F=Pa(d),p=a0.forwardRef((v,D)=>{const{scope:B,children:S}=v,E=l(d,B),T=n0(D,E.collectionRef);return g.jsx(F,{ref:T,children:S})});p.displayName=d;const f=t+"CollectionItemSlot",m="data-radix-collection-item",C=Pa(f),y=a0.forwardRef((v,D)=>{const{scope:B,children:S,...E}=v,T=a0.useRef(null),P=n0(D,T),x=l(f,B);return a0.useEffect(()=>(x.itemMap.set(T,{ref:T,...E}),()=>void x.itemMap.delete(T))),g.jsx(C,{[m]:"",ref:P,children:S})});y.displayName=f;function w(v){const D=l(t+"CollectionConsumer",v);return a0.useCallback(()=>{const S=D.collectionRef.current;if(!S)return[];const E=Array.from(S.querySelectorAll(`[${m}]`));return Array.from(D.itemMap.values()).sort((x,L)=>E.indexOf(x.ref.current)-E.indexOf(L.ref.current))},[D.collectionRef,D.itemMap])}return[{Provider:u,Slot:p,ItemSlot:y},w,r]}function $1(t){const a=b.useRef({value:t,previous:t});return b.useMemo(()=>(a.current.value!==t&&(a.current.previous=a.current.value,a.current.value=t),a.current.previous),[t])}var eB=Object.freeze({position:"absolute",border:0,width:1,height:1,padding:0,margin:-1,overflow:"hidden",clip:"rect(0, 0, 0, 0)",whiteSpace:"nowrap",wordWrap:"normal"}),tB="VisuallyHidden",hf=b.forwardRef((t,a)=>g.jsx(T2.span,{...t,ref:a,style:{...eB,...t.style}}));hf.displayName=tB;var oB=hf,Oo="NavigationMenu",[Mu,uf,aB]=ui(Oo),[Gh,nB,iB]=ui(Oo),[Lu,qT]=Le(Oo,[aB,iB]),[rB,_e]=Lu(Oo),[sB,cB]=Lu(Oo),df=b.forwardRef((t,a)=>{const{__scopeNavigationMenu:i,value:r,onValueChange:c,defaultValue:l,delayDuration:u=200,skipDelayDuration:d=300,orientation:F="horizontal",dir:p,...f}=t,[m,C]=b.useState(null),y=n0(a,U=>C(U)),w=hi(p),v=b.useRef(0),D=b.useRef(0),B=b.useRef(0),[S,E]=b.useState(!0),[T,P]=Qe({prop:r,onChange:U=>{const n2=U!=="",u2=d>0;n2?(window.clearTimeout(B.current),u2&&E(!1)):(window.clearTimeout(B.current),B.current=window.setTimeout(()=>E(!0),d)),c==null||c(U)},defaultProp:l??"",caller:Oo}),x=b.useCallback(()=>{window.clearTimeout(D.current),D.current=window.setTimeout(()=>P(""),150)},[P]),L=b.useCallback(U=>{window.clearTimeout(D.current),P(U)},[P]),z=b.useCallback(U=>{T===U?window.clearTimeout(D.current):v.current=window.setTimeout(()=>{window.clearTimeout(D.current),P(U)},u)},[T,P,u]);return b.useEffect(()=>()=>{window.clearTimeout(v.current),window.clearTimeout(D.current),window.clearTimeout(B.current)},[]),g.jsx(Af,{scope:i,isRootMenu:!0,value:T,dir:w,orientation:F,rootNavigationMenu:m,onTriggerEnter:U=>{window.clearTimeout(v.current),S?z(U):L(U)},onTriggerLeave:()=>{window.clearTimeout(v.current),x()},onContentEnter:()=>window.clearTimeout(D.current),onContentLeave:x,onItemSelect:U=>{P(n2=>n2===U?"":U)},onItemDismiss:()=>P(""),children:g.jsx(T2.nav,{"aria-label":"Main","data-orientation":F,dir:w,...f,ref:y})})});df.displayName=Oo;var Kh="NavigationMenuSub",lB=b.forwardRef((t,a)=>{const{__scopeNavigationMenu:i,value:r,onValueChange:c,defaultValue:l,orientation:u="horizontal",...d}=t,F=_e(Kh,i),[p,f]=Qe({prop:r,onChange:c,defaultProp:l??"",caller:Kh});return g.jsx(Af,{scope:i,isRootMenu:!1,value:p,dir:F.dir,orientation:u,rootNavigationMenu:F.rootNavigationMenu,onTriggerEnter:m=>f(m),onItemSelect:m=>f(m),onItemDismiss:()=>f(""),children:g.jsx(T2.div,{"data-orientation":u,...d,ref:a})})});lB.displayName=Kh;var Af=t=>{const{scope:a,isRootMenu:i,rootNavigationMenu:r,dir:c,orientation:l,children:u,value:d,onItemSelect:F,onItemDismiss:p,onTriggerEnter:f,onTriggerLeave:m,onContentEnter:C,onContentLeave:y}=t,[w,v]=b.useState(null),[D,B]=b.useState(new Map),[S,E]=b.useState(null);return g.jsx(rB,{scope:a,isRootMenu:i,rootNavigationMenu:r,value:d,previousValue:$1(d),baseId:ve(),dir:c,orientation:l,viewport:w,onViewportChange:v,indicatorTrack:S,onIndicatorTrackChange:E,onTriggerEnter:O0(f),onTriggerLeave:O0(m),onContentEnter:O0(C),onContentLeave:O0(y),onItemSelect:O0(F),onItemDismiss:O0(p),onViewportContentChange:b.useCallback((T,P)=>{B(x=>(x.set(T,P),new Map(x)))},[]),onViewportContentRemove:b.useCallback(T=>{B(P=>P.has(T)?(P.delete(T),new Map(P)):P)},[]),children:g.jsx(Mu.Provider,{scope:a,children:g.jsx(sB,{scope:a,items:D,children:u})})})},pf="NavigationMenuList",Ff=b.forwardRef((t,a)=>{const{__scopeNavigationMenu:i,...r}=t,c=_e(pf,i),l=g.jsx(T2.ul,{"data-orientation":c.orientation,...r,ref:a});return g.jsx(T2.div,{style:{position:"relative"},ref:c.onIndicatorTrackChange,children:g.jsx(Mu.Slot,{scope:i,children:c.isRootMenu?g.jsx(wf,{asChild:!0,children:l}):l})})});Ff.displayName=pf;var mf="NavigationMenuItem",[hB,gf]=Lu(mf),ff=b.forwardRef((t,a)=>{const{__scopeNavigationMenu:i,value:r,...c}=t,l=ve(),u=r||l||"LEGACY_REACT_AUTO_VALUE",d=b.useRef(null),F=b.useRef(null),p=b.useRef(null),f=b.useRef(()=>{}),m=b.useRef(!1),C=b.useCallback((w="start")=>{if(d.current){f.current();const v=Xh(d.current);v.length&&Hu(w==="start"?v:v.reverse())}},[]),y=b.useCallback(()=>{if(d.current){const w=Xh(d.current);w.length&&(f.current=bB(w))}},[]);return g.jsx(hB,{scope:i,value:u,triggerRef:F,contentRef:d,focusProxyRef:p,wasEscapeCloseRef:m,onEntryKeyDown:C,onFocusProxyEnter:C,onRootContentClose:y,onContentFocusOutside:y,children:g.jsx(T2.li,{...c,ref:a})})});ff.displayName=mf;var Zh="NavigationMenuTrigger",bf=b.forwardRef((t,a)=>{const{__scopeNavigationMenu:i,disabled:r,...c}=t,l=_e(Zh,t.__scopeNavigationMenu),u=gf(Zh,t.__scopeNavigationMenu),d=b.useRef(null),F=n0(d,u.triggerRef,a),p=Df(l.baseId,u.value),f=Bf(l.baseId,u.value),m=b.useRef(!1),C=b.useRef(!1),y=u.value===l.value;return g.jsxs(g.Fragment,{children:[g.jsx(Mu.ItemSlot,{scope:i,value:u.value,children:g.jsx(kf,{asChild:!0,children:g.jsx(T2.button,{id:p,disabled:r,"data-disabled":r?"":void 0,"data-state":zu(y),"aria-expanded":y,"aria-controls":f,...c,ref:F,onPointerEnter:F2(t.onPointerEnter,()=>{C.current=!1,u.wasEscapeCloseRef.current=!1}),onPointerMove:F2(t.onPointerMove,ls(()=>{r||C.current||u.wasEscapeCloseRef.current||m.current||(l.onTriggerEnter(u.value),m.current=!0)})),onPointerLeave:F2(t.onPointerLeave,ls(()=>{r||(l.onTriggerLeave(),m.current=!1)})),onClick:F2(t.onClick,()=>{l.onItemSelect(u.value),C.current=y}),onKeyDown:F2(t.onKeyDown,w=>{const D={horizontal:"ArrowDown",vertical:l.dir==="rtl"?"ArrowLeft":"ArrowRight"}[l.orientation];y&&w.key===D&&(u.onEntryKeyDown(),w.preventDefault())})})})}),y&&g.jsxs(g.Fragment,{children:[g.jsx(oB,{"aria-hidden":!0,tabIndex:0,ref:u.focusProxyRef,onFocus:w=>{const v=u.contentRef.current,D=w.relatedTarget,B=D===d.current,S=v==null?void 0:v.contains(D);(B||!S)&&u.onFocusProxyEnter(B?"start":"end")}}),l.viewport&&g.jsx("span",{"aria-owns":f})]})]})});bf.displayName=Zh;var uB="NavigationMenuLink",$m="navigationMenu.linkSelect",Cf=b.forwardRef((t,a)=>{const{__scopeNavigationMenu:i,active:r,onSelect:c,...l}=t;return g.jsx(kf,{asChild:!0,children:g.jsx(T2.a,{"data-active":r?"":void 0,"aria-current":r?"page":void 0,...l,ref:a,onClick:F2(t.onClick,u=>{const d=u.target,F=new CustomEvent($m,{bubbles:!0,cancelable:!0});if(d.addEventListener($m,p=>c==null?void 0:c(p),{once:!0}),rs(d,F),!F.defaultPrevented&&!u.metaKey){const p=new CustomEvent(os,{bubbles:!0,cancelable:!0});rs(d,p)}},{checkForDefaultPrevented:!1})})})});Cf.displayName=uB;var Ou="NavigationMenuIndicator",dB=b.forwardRef((t,a)=>{const{forceMount:i,...r}=t,c=_e(Ou,t.__scopeNavigationMenu),l=!!c.value;return c.indicatorTrack?ug.createPortal(g.jsx(N0,{present:i||l,children:g.jsx(AB,{...r,ref:a})}),c.indicatorTrack):null});dB.displayName=Ou;var AB=b.forwardRef((t,a)=>{const{__scopeNavigationMenu:i,...r}=t,c=_e(Ou,i),l=uf(i),[u,d]=b.useState(null),[F,p]=b.useState(null),f=c.orientation==="horizontal",m=!!c.value;b.useEffect(()=>{var v;const w=(v=l().find(D=>D.value===c.value))==null?void 0:v.ref.current;w&&d(w)},[l,c.value]);const C=()=>{u&&p({size:f?u.offsetWidth:u.offsetHeight,offset:f?u.offsetLeft:u.offsetTop})};return Yh(u,C),Yh(c.indicatorTrack,C),F?g.jsx(T2.div,{"aria-hidden":!0,"data-state":m?"visible":"hidden","data-orientation":c.orientation,...r,ref:a,style:{position:"absolute",...f?{left:0,width:F.size+"px",transform:`translateX(${F.offset}px)`}:{top:0,height:F.size+"px",transform:`translateY(${F.offset}px)`},...r.style}}):null}),Ia="NavigationMenuContent",yf=b.forwardRef((t,a)=>{const{forceMount:i,...r}=t,c=_e(Ia,t.__scopeNavigationMenu),l=gf(Ia,t.__scopeNavigationMenu),u=n0(l.contentRef,a),d=l.value===c.value,F={value:l.value,triggerRef:l.triggerRef,focusProxyRef:l.focusProxyRef,wasEscapeCloseRef:l.wasEscapeCloseRef,onContentFocusOutside:l.onContentFocusOutside,onRootContentClose:l.onRootContentClose,...r};return c.viewport?g.jsx(pB,{forceMount:i,...F,ref:u}):g.jsx(N0,{present:i||d,children:g.jsx(vf,{"data-state":zu(d),...F,ref:u,onPointerEnter:F2(t.onPointerEnter,c.onContentEnter),onPointerLeave:F2(t.onPointerLeave,ls(c.onContentLeave)),style:{pointerEvents:!d&&c.isRootMenu?"none":void 0,...F.style}})})});yf.displayName=Ia;var pB=b.forwardRef((t,a)=>{const i=_e(Ia,t.__scopeNavigationMenu),{onViewportContentChange:r,onViewportContentRemove:c}=i;return De(()=>{r(t.value,{ref:a,...t})},[t,a,r]),De(()=>()=>c(t.value),[t.value,c]),null}),os="navigationMenu.rootContentDismiss",vf=b.forwardRef((t,a)=>{const{__scopeNavigationMenu:i,value:r,triggerRef:c,focusProxyRef:l,wasEscapeCloseRef:u,onRootContentClose:d,onContentFocusOutside:F,...p}=t,f=_e(Ia,i),m=b.useRef(null),C=n0(m,a),y=Df(f.baseId,r),w=Bf(f.baseId,r),v=uf(i),D=b.useRef(null),{onItemDismiss:B}=f;b.useEffect(()=>{const E=m.current;if(f.isRootMenu&&E){const T=()=>{var P;B(),d(),E.contains(document.activeElement)&&((P=c.current)==null||P.focus())};return E.addEventListener(os,T),()=>E.removeEventListener(os,T)}},[f.isRootMenu,t.value,c,B,d]);const S=b.useMemo(()=>{const T=v().map(n2=>n2.value);f.dir==="rtl"&&T.reverse();const P=T.indexOf(f.value),x=T.indexOf(f.previousValue),L=r===f.value,z=x===T.indexOf(r);if(!L&&!z)return D.current;const U=(()=>{if(P!==x){if(L&&x!==-1)return P>x?"from-end":"from-start";if(z&&P!==-1)return P>x?"to-start":"to-end"}return null})();return D.current=U,U},[f.previousValue,f.value,f.dir,v,r]);return g.jsx(wf,{asChild:!0,children:g.jsx(li,{id:w,"aria-labelledby":y,"data-motion":S,"data-orientation":f.orientation,...p,ref:C,disableOutsidePointerEvents:!1,onDismiss:()=>{var T;const E=new Event(os,{bubbles:!0,cancelable:!0});(T=m.current)==null||T.dispatchEvent(E)},onFocusOutside:F2(t.onFocusOutside,E=>{var P;F();const T=E.target;(P=f.rootNavigationMenu)!=null&&P.contains(T)&&E.preventDefault()}),onPointerDownOutside:F2(t.onPointerDownOutside,E=>{var L;const T=E.target,P=v().some(z=>{var U;return(U=z.ref.current)==null?void 0:U.contains(T)}),x=f.isRootMenu&&((L=f.viewport)==null?void 0:L.contains(T));(P||x||!f.isRootMenu)&&E.preventDefault()}),onKeyDown:F2(t.onKeyDown,E=>{var x;const T=E.altKey||E.ctrlKey||E.metaKey;if(E.key==="Tab"&&!T){const L=Xh(E.currentTarget),z=document.activeElement,U=L.findIndex(s2=>s2===z),u2=E.shiftKey?L.slice(0,U).reverse():L.slice(U+1,L.length);Hu(u2)?E.preventDefault():(x=l.current)==null||x.focus()}}),onEscapeKeyDown:F2(t.onEscapeKeyDown,E=>{u.current=!0})})})}),Nu="NavigationMenuViewport",FB=b.forwardRef((t,a)=>{const{forceMount:i,...r}=t,l=!!_e(Nu,t.__scopeNavigationMenu).value;return g.jsx(N0,{present:i||l,children:g.jsx(mB,{...r,ref:a})})});FB.displayName=Nu;var mB=b.forwardRef((t,a)=>{const{__scopeNavigationMenu:i,children:r,...c}=t,l=_e(Nu,i),u=n0(a,l.onViewportChange),d=cB(Ia,t.__scopeNavigationMenu),[F,p]=b.useState(null),[f,m]=b.useState(null),C=F?(F==null?void 0:F.width)+"px":void 0,y=F?(F==null?void 0:F.height)+"px":void 0,w=!!l.value,v=w?l.value:l.previousValue;return Yh(f,()=>{f&&p({width:f.offsetWidth,height:f.offsetHeight})}),g.jsx(T2.div,{"data-state":zu(w),"data-orientation":l.orientation,...c,ref:u,style:{pointerEvents:!w&&l.isRootMenu?"none":void 0,"--radix-navigation-menu-viewport-width":C,"--radix-navigation-menu-viewport-height":y,...c.style},onPointerEnter:F2(t.onPointerEnter,l.onContentEnter),onPointerLeave:F2(t.onPointerLeave,ls(l.onContentLeave)),children:Array.from(d.items).map(([B,{ref:S,forceMount:E,...T}])=>{const P=v===B;return g.jsx(N0,{present:E||P,children:g.jsx(vf,{...T,ref:ci(S,x=>{P&&x&&m(x)})})},B)})})}),gB="FocusGroup",wf=b.forwardRef((t,a)=>{const{__scopeNavigationMenu:i,...r}=t,c=_e(gB,i);return g.jsx(Gh.Provider,{scope:i,children:g.jsx(Gh.Slot,{scope:i,children:g.jsx(T2.div,{dir:c.dir,...r,ref:a})})})}),e3=["ArrowRight","ArrowLeft","ArrowUp","ArrowDown"],fB="FocusGroupItem",kf=b.forwardRef((t,a)=>{const{__scopeNavigationMenu:i,...r}=t,c=nB(i),l=_e(fB,i);return g.jsx(Gh.ItemSlot,{scope:i,children:g.jsx(T2.button,{...r,ref:a,onKeyDown:F2(t.onKeyDown,u=>{if(["Home","End",...e3].includes(u.key)){let F=c().map(m=>m.ref.current);if([l.dir==="rtl"?"ArrowRight":"ArrowLeft","ArrowUp","End"].includes(u.key)&&F.reverse(),e3.includes(u.key)){const m=F.indexOf(u.currentTarget);F=F.slice(m+1)}setTimeout(()=>Hu(F)),u.preventDefault()}})})})});function Xh(t){const a=[],i=document.createTreeWalker(t,NodeFilter.SHOW_ELEMENT,{acceptNode:r=>{const c=r.tagName==="INPUT"&&r.type==="hidden";return r.disabled||r.hidden||c?NodeFilter.FILTER_SKIP:r.tabIndex>=0?NodeFilter.FILTER_ACCEPT:NodeFilter.FILTER_SKIP}});for(;i.nextNode();)a.push(i.currentNode);return a}function Hu(t){const a=document.activeElement;return t.some(i=>i===a?!0:(i.focus(),document.activeElement!==a))}function bB(t){return t.forEach(a=>{a.dataset.tabindex=a.getAttribute("tabindex")||"",a.setAttribute("tabindex","-1")}),()=>{t.forEach(a=>{const i=a.dataset.tabindex;a.setAttribute("tabindex",i)})}}function Yh(t,a){const i=O0(a);De(()=>{let r=0;if(t){const c=new ResizeObserver(()=>{cancelAnimationFrame(r),r=window.requestAnimationFrame(i)});return c.observe(t),()=>{window.cancelAnimationFrame(r),c.unobserve(t)}}},[t,i])}function zu(t){return t?"open":"closed"}function Df(t,a){return`${t}-trigger-${a}`}function Bf(t,a){return`${t}-content-${a}`}function ls(t){return a=>a.pointerType==="mouse"?t(a):void 0}var CB=df,yB=Ff,vB=ff,wB=bf,kB=Cf,DB=yf,BB="vocs_NavigationMenu",EB="vocs_NavigationMenu_list",_B="vocs_NavigationMenu_link",SB="vocs_NavigationMenu_item",xB="var(--vocs_NavigationMenu_chevronDownIcon)",TB="vocs_NavigationMenu_trigger vocs_NavigationMenu_link",RB="vocs_NavigationMenu_content";const Ef=t=>g.jsx(CB,{...t,className:l2(t.className,BB)}),_f=t=>g.jsx(yB,{...t,className:l2(t.className,EB)}),Ss=({active:t,children:a,className:i,href:r})=>g.jsx(kB,{asChild:!0,children:g.jsx(ke,{"data-active":t,className:l2(i,_B),href:r,variant:"styleless",children:a})}),Sf=t=>g.jsx(vB,{...t,className:l2(t.className,SB)}),xf=({active:t,className:a,...i})=>{const{basePath:r}=m0(),c=r;return g.jsx(wB,{...i,"data-active":t,className:l2(a,TB),style:Me({[xB]:`url(${c}/.vocs/icons/chevron-down.svg)`})})},Tf=t=>g.jsx(DB,{...t,className:l2(t.className,RB)});Jh.Curtain=PB;function Jh(){var r;const t=m0(),{showLogo:a,showSidebar:i}=oo();return g.jsxs("div",{className:l2(z1,a&&!i&&j1),children:[g.jsx(H1,{}),a&&g.jsx("div",{className:G1,children:g.jsx("div",{className:W1,children:g.jsx(Ra,{to:"/",style:{alignItems:"center",display:"flex",height:"56px",marginTop:"4px"},children:g.jsx(Iu,{})})})}),g.jsx("div",{className:Qm}),g.jsx("div",{className:Qm,children:(((r=t.topNav)==null?void 0:r.length)||0)>0&&g.jsx("div",{className:q1,children:g.jsx(IB,{})})})]})}function PB(){return g.jsx("div",{className:U1})}function IB(){const{topNav:t}=m0();if(!t)return null;const{pathname:a}=i0(),i=si({pathname:a,items:t});return g.jsx(Ef,{delayDuration:0,children:g.jsxs(_f,{children:[t.map((r,c)=>r.element?To(r.element):r.link?g.jsx(Ss,{active:i.includes(r.id),className:Jm,href:r.link,children:r.text},c):r.items?g.jsxs(Sf,{className:Jm,children:[g.jsx(xf,{active:i.includes(r.id),children:r.text}),g.jsx(Tf,{className:V1,children:g.jsx(MB,{items:r.items})})]},c):null),g.jsx(Bu,{})]})})}function MB({items:t}){const{pathname:a}=i0(),i=si({pathname:a,items:t});return g.jsx("ul",{children:t==null?void 0:t.map((r,c)=>g.jsx(Ss,{active:i.includes(r.id),href:r.link,children:r.text},c))})}function LB(){const t=to(),a=m0();return b.useMemo(()=>{const{pattern:i="",text:r="Edit page"}=a.editLink??{};let c="";return typeof i=="function"?c="":t.filePath&&(c=i.replace(/:path/g,t.filePath)),{url:c,text:r}},[a.editLink,t.filePath])}function ju(){const[t,a]=b.useState(!1);return b.useEffect(()=>{a(!0)},[]),t}var OB="vocs_Footer",NB="vocs_Footer_container",HB="vocs_Footer_editLink",zB="vocs_Footer_lastUpdated",jB="vocs_Footer_navigation",t3="vocs_Footer_navigationIcon",VB="vocs_Footer_navigationIcon_left",UB="vocs_Footer_navigationIcon_right",o3="vocs_Footer_navigationItem",qB="vocs_Footer_navigationItem_left",WB="vocs_Footer_navigationItem_right",a3="vocs_Footer_navigationText",n3="vocs_Footer_navigationTextInner",Qh="var(--vocs_Icon_size)",GB="vocs_Icon";function V0({className:t,label:a,icon:i,size:r,style:c}){return g.jsx("div",{"aria-label":a,className:l2(GB,t),role:"img",style:{...c,...Me({[Qh]:r})},children:g.jsx(i,{height:r,width:r})})}var KB="vocs_Socials",ZB="vocs_Socials_button",XB="vocs_Socials_icon";function YB(){return g.jsxs("svg",{width:"100%",height:"100%",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 127.14 96.36",children:[g.jsx("title",{children:"Discord"}),g.jsx("g",{id:"图层_2","data-name":"图层 2",children:g.jsx("g",{id:"Discord_Logos","data-name":"Discord Logos",children:g.jsx("g",{id:"Discord_Logo_-_Large_-_White","data-name":"Discord Logo - Large - White",children:g.jsx("path",{d:"M107.7,8.07A105.15,105.15,0,0,0,81.47,0a72.06,72.06,0,0,0-3.36,6.83A97.68,97.68,0,0,0,49,6.83,72.37,72.37,0,0,0,45.64,0,105.89,105.89,0,0,0,19.39,8.09C2.79,32.65-1.71,56.6.54,80.21h0A105.73,105.73,0,0,0,32.71,96.36,77.7,77.7,0,0,0,39.6,85.25a68.42,68.42,0,0,1-10.85-5.18c.91-.66,1.8-1.34,2.66-2a75.57,75.57,0,0,0,64.32,0c.87.71,1.76,1.39,2.66,2a68.68,68.68,0,0,1-10.87,5.19,77,77,0,0,0,6.89,11.1A105.25,105.25,0,0,0,126.6,80.22h0C129.24,52.84,122.09,29.11,107.7,8.07ZM42.45,65.69C36.18,65.69,31,60,31,53s5-12.74,11.43-12.74S54,46,53.89,53,48.84,65.69,42.45,65.69Zm42.24,0C78.41,65.69,73.25,60,73.25,53s5-12.74,11.44-12.74S96.23,46,96.12,53,91.08,65.69,84.69,65.69Z",fill:"currentColor"})})})})]})}function JB(){return g.jsxs("svg",{width:"100%",height:"100%",viewBox:"0 0 98 96",xmlns:"http://www.w3.org/2000/svg",children:[g.jsx("title",{children:"GitHub"}),g.jsx("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M48.854 0C21.839 0 0 22 0 49.217c0 21.756 13.993 40.172 33.405 46.69 2.427.49 3.316-1.059 3.316-2.362 0-1.141-.08-5.052-.08-9.127-13.59 2.934-16.42-5.867-16.42-5.867-2.184-5.704-5.42-7.17-5.42-7.17-4.448-3.015.324-3.015.324-3.015 4.934.326 7.523 5.052 7.523 5.052 4.367 7.496 11.404 5.378 14.235 4.074.404-3.178 1.699-5.378 3.074-6.6-10.839-1.141-22.243-5.378-22.243-24.283 0-5.378 1.94-9.778 5.014-13.2-.485-1.222-2.184-6.275.486-13.038 0 0 4.125-1.304 13.426 5.052a46.97 46.97 0 0 1 12.214-1.63c4.125 0 8.33.571 12.213 1.63 9.302-6.356 13.427-5.052 13.427-5.052 2.67 6.763.97 11.816.485 13.038 3.155 3.422 5.015 7.822 5.015 13.2 0 18.905-11.404 23.06-22.324 24.283 1.78 1.548 3.316 4.481 3.316 9.126 0 6.6-.08 11.897-.08 13.526 0 1.304.89 2.853 3.316 2.364 19.412-6.52 33.405-24.935 33.405-46.691C97.707 22 75.788 0 48.854 0z",fill:"currentColor"})]})}function QB(){return g.jsxs("svg",{xmlns:"http://www.w3.org/2000/svg",width:"100%",height:"100%",viewBox:"0 0 50 50",children:[g.jsx("title",{children:"Telegram"}),g.jsx("path",{d:"M25 2c12.703 0 23 10.297 23 23S37.703 48 25 48 2 37.703 2 25 12.297 2 25 2zm7.934 32.375c.423-1.298 2.405-14.234 2.65-16.783.074-.772-.17-1.285-.648-1.514-.578-.278-1.434-.139-2.427.219-1.362.491-18.774 7.884-19.78 8.312-.954.405-1.856.847-1.856 1.487 0 .45.267.703 1.003.966.766.273 2.695.858 3.834 1.172 1.097.303 2.346.04 3.046-.395.742-.461 9.305-6.191 9.92-6.693.614-.502 1.104.141.602.644-.502.502-6.38 6.207-7.155 6.997-.941.959-.273 1.953.358 2.351.721.454 5.906 3.932 6.687 4.49.781.558 1.573.811 2.298.811.725 0 1.107-.955 1.468-2.064z",fill:"currentColor"})]})}function $B(){return g.jsxs("svg",{width:"32",height:"32",viewBox:"0 0 32 32",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[g.jsx("title",{children:"Warpcast"}),g.jsx("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M7.92028 31.9901H24.0698C28.4371 31.9901 31.9901 28.4373 31.9901 24.0699V7.92053C31.9901 3.55319 28.4371 0.000137329 24.0698 0.000137329H7.92028C3.55304 0.000137329 0 3.55319 0 7.92053V24.0699C0 28.4373 3.55304 31.9901 7.92028 31.9901ZM19.4134 16.048L20.9908 10.124H25.1383L21.2924 23.2218H17.7062L15.9951 17.1397L14.284 23.2218H10.7055L6.85115 10.124H10.999L12.5915 16.0916L14.1891 10.124H17.8309L19.4134 16.048Z",fill:"currentColor"})]})}function eE(){return g.jsxs("svg",{width:"100%",height:"100%",viewBox:"0 0 1200 1227",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[g.jsx("title",{children:"X"}),g.jsx("path",{d:"M714.163 519.284L1160.89 0H1055.03L667.137 450.887L357.328 0H0L468.492 681.821L0 1226.37H105.866L515.491 750.218L842.672 1226.37H1200L714.137 519.284H714.163ZM569.165 687.828L521.697 619.934L144.011 79.6944H306.615L611.412 515.685L658.88 583.579L1055.08 1150.3H892.476L569.165 687.854V687.828Z",fill:"currentColor"})]})}const tE={discord:YB,github:JB,telegram:QB,warpcast:$B,x:eE},oE={discord:"18px",github:"17px",telegram:"17px",warpcast:"17px",x:"16px"};function Vu(){const t=m0();return!t.socials||t.socials.length===0?null:g.jsx("div",{className:KB,children:t.socials.map((a,i)=>g.jsxs(b.Fragment,{children:[i!==0&&g.jsx("div",{style:{width:"1px",marginTop:Qn[4],marginBottom:Qn[4],backgroundColor:Hh.border}}),g.jsx("a",{className:ZB,href:a.link,target:"_blank",rel:"noopener noreferrer",children:g.jsx(V0,{className:XB,label:a.label,icon:tE[a.icon],size:oE[a.icon]||"20px"})})]},i))})}function aE(){return g.jsxs("svg",{width:"100%",height:"100%",viewBox:"0 0 72 60",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[g.jsx("title",{children:"Arrow Left"}),g.jsx("path",{d:"M0.325684 29.7461C0.325684 30.8203 0.813963 31.8457 1.69286 32.6758L26.8882 57.8223C27.7671 58.6524 28.7437 59.043 29.7691 59.043C31.9175 59.043 33.5777 57.4317 33.5777 55.2344C33.5777 54.209 33.2359 53.1836 32.5035 52.5L25.7652 45.5176L9.26126 30.6738L8.38236 32.7734L21.3706 33.7012H67.4644C69.7593 33.7012 71.3706 32.041 71.3706 29.7461C71.3706 27.4512 69.7593 25.791 67.4644 25.791H21.3706L8.38236 26.7188L9.26126 28.8672L25.7652 13.9746L32.5035 6.99221C33.2359 6.30861 33.5777 5.28322 33.5777 4.25782C33.5777 2.06052 31.9175 0.449219 29.7691 0.449219C28.7437 0.449219 27.7671 0.839814 26.8882 1.66991L1.69286 26.8164C0.813963 27.6465 0.325684 28.6719 0.325684 29.7461Z",fill:"currentColor"})]})}function nE(){return g.jsxs("svg",{width:"100%",height:"100%",viewBox:"0 0 72 60",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[g.jsx("title",{children:"Arrow Right"}),g.jsx("path",{d:"M71.3706 29.7461C71.3706 28.6719 70.8824 27.6465 70.0035 26.8164L44.8081 1.66991C43.9292 0.839814 42.9527 0.449219 41.9273 0.449219C39.7789 0.449219 38.1187 2.06052 38.1187 4.25782C38.1187 5.28322 38.4605 6.30861 39.1929 6.99221L45.9312 13.9746L62.4351 28.8672L63.314 26.7188L50.3257 25.791H4.23196C1.93706 25.791 0.325684 27.4512 0.325684 29.7461C0.325684 32.041 1.93706 33.7012 4.23196 33.7012H50.3257L63.314 32.7734L62.4351 30.6738L45.9312 45.5176L39.1929 52.5C38.4605 53.1836 38.1187 54.209 38.1187 55.2344C38.1187 57.4317 39.7789 59.043 41.9273 59.043C42.9527 59.043 43.9292 58.6524 44.8081 57.8223L70.0035 32.6758C70.8824 31.8457 71.3706 30.8203 71.3706 29.7461Z",fill:"currentColor"})]})}function iE(){const{layout:t}=oo(),a=ju(),i=to(),r=b.useMemo(()=>i.lastUpdatedAt?new Date(i.lastUpdatedAt):void 0,[i.lastUpdatedAt]),c=b.useMemo(()=>r==null?void 0:r.toISOString(),[r]);return g.jsxs("footer",{className:OB,"data-layout":t,children:[t==="docs"&&g.jsxs(g.Fragment,{children:[g.jsxs("div",{className:NB,children:[g.jsx(rE,{}),a&&i.lastUpdatedAt&&g.jsxs("div",{className:zB,children:["Last updated:"," ",g.jsx("time",{dateTime:c,children:new Intl.DateTimeFormat(void 0,{dateStyle:"short",timeStyle:"short"}).format(r)})]})]}),g.jsx(sE,{})]}),t!=="docs"&&g.jsx(Vu,{}),g.jsx(mk,{})]})}function rE(){const t=LB();return t.url?g.jsx("div",{children:g.jsxs(ke,{className:HB,href:t.url,children:[g.jsx(dk,{})," ",t.text]})}):null}function sE(){const t=ju(),a=ws(),{pathname:i}=i0(),r=b.useMemo(()=>Rf(a.items||[]).filter(F=>F.link),[a]),c=b.useMemo(()=>r.findIndex(F=>F.link===i),[r,i]),[l,u]=b.useMemo(()=>c<0?[]:c===0?[null,r[c+1]]:c===r.length-1?[r[c-1],null]:[r[c-1],r[c+1]],[c,r]),d=gu();return b.useEffect(()=>{let F=c,p=!1;const f=C=>{if(C.code==="ShiftLeft"&&(p=!0),p){const y=r[F+1],w=r[F-1];C.code==="ArrowRight"&&(y!=null&&y.link)&&(!y.link.match(/^(\.*\/|#)/)?window.open(y.link,"noopener,noreferrer"):d(y.link),F++),C.code==="ArrowLeft"&&(w!=null&&w.link)&&(!w.link.match(/^(\.*\/|#)/)?window.open(w.link,"noopener,noreferrer"):d(w.link),F--)}},m=C=>{C.code==="ShiftLeft"&&(p=!1)};return window.addEventListener("keydown",f),window.addEventListener("keyup",m),()=>{window.removeEventListener("keydown",f),window.removeEventListener("keyup",m)}},[]),t?g.jsxs("div",{className:jB,children:[l?g.jsxs(ke,{className:l2(o3,qB),href:l.link,variant:"styleless",children:[g.jsxs("div",{className:a3,children:[g.jsx("div",{className:l2(t3,VB),style:Me({[Qh]:"0.75em"}),children:g.jsx(V0,{label:"Previous",icon:aE})}),g.jsx("div",{className:n3,children:l.text})]}),g.jsx(_a,{description:"Previous",keys:["shift","←"]})]}):g.jsx("div",{}),u?g.jsxs(ke,{className:l2(o3,WB),href:u.link,variant:"styleless",children:[g.jsxs("div",{className:a3,children:[g.jsx("div",{className:n3,style:{textAlign:"right"},children:u.text}),g.jsx("div",{className:l2(t3,UB),style:Me({[Qh]:"0.75em"}),children:g.jsx(V0,{label:"Next",icon:nE})})]}),g.jsx(_a,{description:"Next",keys:["shift","→"]})]}):g.jsx("div",{})]}):null}function Rf(t){const a=[];for(const i of t)i.link&&a.push(i),i.items&&a.push(...Rf(i.items));return a}var xs="Collapsible",[cE,Pf]=Le(xs),[lE,Uu]=cE(xs),If=b.forwardRef((t,a)=>{const{__scopeCollapsible:i,open:r,defaultOpen:c,disabled:l,onOpenChange:u,...d}=t,[F,p]=Qe({prop:r,defaultProp:c??!1,onChange:u,caller:xs});return g.jsx(lE,{scope:i,disabled:l,contentId:ve(),open:F,onOpenToggle:b.useCallback(()=>p(f=>!f),[p]),children:g.jsx(T2.div,{"data-state":Wu(F),"data-disabled":l?"":void 0,...d,ref:a})})});If.displayName=xs;var Mf="CollapsibleTrigger",Lf=b.forwardRef((t,a)=>{const{__scopeCollapsible:i,...r}=t,c=Uu(Mf,i);return g.jsx(T2.button,{type:"button","aria-controls":c.contentId,"aria-expanded":c.open||!1,"data-state":Wu(c.open),"data-disabled":c.disabled?"":void 0,disabled:c.disabled,...r,ref:a,onClick:F2(t.onClick,c.onOpenToggle)})});Lf.displayName=Mf;var qu="CollapsibleContent",Of=b.forwardRef((t,a)=>{const{forceMount:i,...r}=t,c=Uu(qu,t.__scopeCollapsible);return g.jsx(N0,{present:i||c.open,children:({present:l})=>g.jsx(hE,{...r,ref:a,present:l})})});Of.displayName=qu;var hE=b.forwardRef((t,a)=>{const{__scopeCollapsible:i,present:r,children:c,...l}=t,u=Uu(qu,i),[d,F]=b.useState(r),p=b.useRef(null),f=n0(a,p),m=b.useRef(0),C=m.current,y=b.useRef(0),w=y.current,v=u.open||d,D=b.useRef(v),B=b.useRef(void 0);return b.useEffect(()=>{const S=requestAnimationFrame(()=>D.current=!1);return()=>cancelAnimationFrame(S)},[]),De(()=>{const S=p.current;if(S){B.current=B.current||{transitionDuration:S.style.transitionDuration,animationName:S.style.animationName},S.style.transitionDuration="0s",S.style.animationName="none";const E=S.getBoundingClientRect();m.current=E.height,y.current=E.width,D.current||(S.style.transitionDuration=B.current.transitionDuration,S.style.animationName=B.current.animationName),F(r)}},[u.open,r]),g.jsx(T2.div,{"data-state":Wu(u.open),"data-disabled":u.disabled?"":void 0,id:u.contentId,hidden:!v,...l,ref:f,style:{"--radix-collapsible-content-height":C?`${C}px`:void 0,"--radix-collapsible-content-width":w?`${w}px`:void 0,...t.style},children:v&&c})});function Wu(t){return t?"open":"closed"}var uE=If,dE=Lf,AE=Of,Ne="Accordion",pE=["Home","End","ArrowDown","ArrowUp","ArrowLeft","ArrowRight"],[Gu,FE,mE]=ui(Ne),[Ts,WT]=Le(Ne,[mE,Pf]),Ku=Pf(),Nf=a0.forwardRef((t,a)=>{const{type:i,...r}=t,c=r,l=r;return g.jsx(Gu.Provider,{scope:t.__scopeAccordion,children:i==="multiple"?g.jsx(CE,{...l,ref:a}):g.jsx(bE,{...c,ref:a})})});Nf.displayName=Ne;var[Hf,gE]=Ts(Ne),[zf,fE]=Ts(Ne,{collapsible:!1}),bE=a0.forwardRef((t,a)=>{const{value:i,defaultValue:r,onValueChange:c=()=>{},collapsible:l=!1,...u}=t,[d,F]=Qe({prop:i,defaultProp:r??"",onChange:c,caller:Ne});return g.jsx(Hf,{scope:t.__scopeAccordion,value:a0.useMemo(()=>d?[d]:[],[d]),onItemOpen:F,onItemClose:a0.useCallback(()=>l&&F(""),[l,F]),children:g.jsx(zf,{scope:t.__scopeAccordion,collapsible:l,children:g.jsx(jf,{...u,ref:a})})})}),CE=a0.forwardRef((t,a)=>{const{value:i,defaultValue:r,onValueChange:c=()=>{},...l}=t,[u,d]=Qe({prop:i,defaultProp:r??[],onChange:c,caller:Ne}),F=a0.useCallback(f=>d((m=[])=>[...m,f]),[d]),p=a0.useCallback(f=>d((m=[])=>m.filter(C=>C!==f)),[d]);return g.jsx(Hf,{scope:t.__scopeAccordion,value:u,onItemOpen:F,onItemClose:p,children:g.jsx(zf,{scope:t.__scopeAccordion,collapsible:!0,children:g.jsx(jf,{...l,ref:a})})})}),[yE,Rs]=Ts(Ne),jf=a0.forwardRef((t,a)=>{const{__scopeAccordion:i,disabled:r,dir:c,orientation:l="vertical",...u}=t,d=a0.useRef(null),F=n0(d,a),p=FE(i),m=hi(c)==="ltr",C=F2(t.onKeyDown,y=>{var z;if(!pE.includes(y.key))return;const w=y.target,v=p().filter(U=>{var n2;return!((n2=U.ref.current)!=null&&n2.disabled)}),D=v.findIndex(U=>U.ref.current===w),B=v.length;if(D===-1)return;y.preventDefault();let S=D;const E=0,T=B-1,P=()=>{S=D+1,S>T&&(S=E)},x=()=>{S=D-1,S<E&&(S=T)};switch(y.key){case"Home":S=E;break;case"End":S=T;break;case"ArrowRight":l==="horizontal"&&(m?P():x());break;case"ArrowDown":l==="vertical"&&P();break;case"ArrowLeft":l==="horizontal"&&(m?x():P());break;case"ArrowUp":l==="vertical"&&x();break}const L=S%B;(z=v[L].ref.current)==null||z.focus()});return g.jsx(yE,{scope:i,disabled:r,direction:c,orientation:l,children:g.jsx(Gu.Slot,{scope:i,children:g.jsx(T2.div,{...u,"data-orientation":l,ref:F,onKeyDown:r?void 0:C})})})}),hs="AccordionItem",[vE,Zu]=Ts(hs),Vf=a0.forwardRef((t,a)=>{const{__scopeAccordion:i,value:r,...c}=t,l=Rs(hs,i),u=gE(hs,i),d=Ku(i),F=ve(),p=r&&u.value.includes(r)||!1,f=l.disabled||t.disabled;return g.jsx(vE,{scope:i,open:p,disabled:f,triggerId:F,children:g.jsx(uE,{"data-orientation":l.orientation,"data-state":Kf(p),...d,...c,ref:a,disabled:f,open:p,onOpenChange:m=>{m?u.onItemOpen(r):u.onItemClose(r)}})})});Vf.displayName=hs;var Uf="AccordionHeader",wE=a0.forwardRef((t,a)=>{const{__scopeAccordion:i,...r}=t,c=Rs(Ne,i),l=Zu(Uf,i);return g.jsx(T2.h3,{"data-orientation":c.orientation,"data-state":Kf(l.open),"data-disabled":l.disabled?"":void 0,...r,ref:a})});wE.displayName=Uf;var $h="AccordionTrigger",qf=a0.forwardRef((t,a)=>{const{__scopeAccordion:i,...r}=t,c=Rs(Ne,i),l=Zu($h,i),u=fE($h,i),d=Ku(i);return g.jsx(Gu.ItemSlot,{scope:i,children:g.jsx(dE,{"aria-disabled":l.open&&!u.collapsible||void 0,"data-orientation":c.orientation,id:l.triggerId,...d,...r,ref:a})})});qf.displayName=$h;var Wf="AccordionContent",Gf=a0.forwardRef((t,a)=>{const{__scopeAccordion:i,...r}=t,c=Rs(Ne,i),l=Zu(Wf,i),u=Ku(i);return g.jsx(AE,{role:"region","aria-labelledby":l.triggerId,"data-orientation":c.orientation,...u,...r,ref:a,style:{"--radix-accordion-content-height":"var(--radix-collapsible-content-height)","--radix-accordion-content-width":"var(--radix-collapsible-content-width)",...t.style}})});Gf.displayName=Wf;function Kf(t){return t?"open":"closed"}var kE=Nf,DE=Vf,BE=qf,EE=Gf,_E="vocs_MobileSearch_searchButton";function SE(){const[t,a]=b.useState(!1);return g.jsxs(Xg,{open:t,onOpenChange:a,children:[g.jsx(Yg,{asChild:!0,children:g.jsx("button",{className:_E,type:"button","aria-label":"Search",children:g.jsx(Du,{height:21,width:21})})}),g.jsx(lf,{open:t,onClose:()=>a(!1)})]})}var xE="vocs_MobileTopNav",TE="vocs_MobileTopNav_content",RE="vocs_MobileTopNav_curtain",i3="vocs_MobileTopNav_curtainGroup",Ch="vocs_MobileTopNav_curtainItem",yh="vocs_MobileTopNav_group",PE="vocs_MobileTopNav_item",IE="vocs_MobileTopNav_logo",Zf="vocs_MobileTopNav_menuTrigger",ME="vocs_MobileTopNav_menuTitle",LE="vocs_MobileTopNav_navigation_compact",Xf="vocs_MobileTopNav_navigation",OE="vocs_MobileTopNav_navigationContent",qr="vocs_MobileTopNav_navigationItem",NE="var(--vocs_MobileTopNav_chevronDownIcon)",HE="var(--vocs_MobileTopNav_chevronUpIcon)",zE="vocs_MobileTopNav_trigger",r3="vocs_MobileTopNav_outlineTrigger",jE="vocs_MobileTopNav_outlinePopover",s3="vocs_MobileTopNav_section",VE="vocs_MobileTopNav_separator",UE="vocs_MobileTopNav_sidebarPopover",qE="vocs_MobileTopNav_topNavPopover",WE="vocs_MobileTopNav_topNavPopoverFooter";function GE(t,a){let i=!1;return()=>{i=!0,setTimeout(()=>{i&&t(),i=!1},a)}}function KE(t){const[a,i]=b.useState(void 0);return De(()=>{if(t){i({width:t.offsetWidth,height:t.offsetHeight});const r=new ResizeObserver(c=>{if(!Array.isArray(c)||!c.length)return;const l=c[0];let u,d;if("borderBoxSize"in l){const F=l.borderBoxSize,p=Array.isArray(F)?F[0]:F;u=p.inlineSize,d=p.blockSize}else u=t.offsetWidth,d=t.offsetHeight;i({width:u,height:d})});return r.observe(t,{box:"border-box"}),()=>r.unobserve(t)}else i(void 0)},[t]),a}const ZE=["top","right","bottom","left"],Qt=Math.min,se=Math.max,us=Math.round,Wr=Math.floor,Ye=t=>({x:t,y:t}),XE={left:"right",right:"left",bottom:"top",top:"bottom"},YE={start:"end",end:"start"};function eu(t,a,i){return se(t,Qt(a,i))}function yt(t,a){return typeof t=="function"?t(a):t}function vt(t){return t.split("-")[0]}function ja(t){return t.split("-")[1]}function Xu(t){return t==="x"?"y":"x"}function Yu(t){return t==="y"?"height":"width"}const JE=new Set(["top","bottom"]);function Ze(t){return JE.has(vt(t))?"y":"x"}function Ju(t){return Xu(Ze(t))}function QE(t,a,i){i===void 0&&(i=!1);const r=ja(t),c=Ju(t),l=Yu(c);let u=c==="x"?r===(i?"end":"start")?"right":"left":r==="start"?"bottom":"top";return a.reference[l]>a.floating[l]&&(u=ds(u)),[u,ds(u)]}function $E(t){const a=ds(t);return[tu(t),a,tu(a)]}function tu(t){return t.replace(/start|end/g,a=>YE[a])}const c3=["left","right"],l3=["right","left"],e_=["top","bottom"],t_=["bottom","top"];function o_(t,a,i){switch(t){case"top":case"bottom":return i?a?l3:c3:a?c3:l3;case"left":case"right":return a?e_:t_;default:return[]}}function a_(t,a,i,r){const c=ja(t);let l=o_(vt(t),i==="start",r);return c&&(l=l.map(u=>u+"-"+c),a&&(l=l.concat(l.map(tu)))),l}function ds(t){return t.replace(/left|right|bottom|top/g,a=>XE[a])}function n_(t){return{top:0,right:0,bottom:0,left:0,...t}}function Yf(t){return typeof t!="number"?n_(t):{top:t,right:t,bottom:t,left:t}}function As(t){const{x:a,y:i,width:r,height:c}=t;return{width:r,height:c,top:i,left:a,right:a+r,bottom:i+c,x:a,y:i}}function h3(t,a,i){let{reference:r,floating:c}=t;const l=Ze(a),u=Ju(a),d=Yu(u),F=vt(a),p=l==="y",f=r.x+r.width/2-c.width/2,m=r.y+r.height/2-c.height/2,C=r[d]/2-c[d]/2;let y;switch(F){case"top":y={x:f,y:r.y-c.height};break;case"bottom":y={x:f,y:r.y+r.height};break;case"right":y={x:r.x+r.width,y:m};break;case"left":y={x:r.x-c.width,y:m};break;default:y={x:r.x,y:r.y}}switch(ja(a)){case"start":y[u]-=C*(i&&p?-1:1);break;case"end":y[u]+=C*(i&&p?-1:1);break}return y}const i_=async(t,a,i)=>{const{placement:r="bottom",strategy:c="absolute",middleware:l=[],platform:u}=i,d=l.filter(Boolean),F=await(u.isRTL==null?void 0:u.isRTL(a));let p=await u.getElementRects({reference:t,floating:a,strategy:c}),{x:f,y:m}=h3(p,r,F),C=r,y={},w=0;for(let v=0;v<d.length;v++){const{name:D,fn:B}=d[v],{x:S,y:E,data:T,reset:P}=await B({x:f,y:m,initialPlacement:r,placement:C,strategy:c,middlewareData:y,rects:p,platform:u,elements:{reference:t,floating:a}});f=S??f,m=E??m,y={...y,[D]:{...y[D],...T}},P&&w<=50&&(w++,typeof P=="object"&&(P.placement&&(C=P.placement),P.rects&&(p=P.rects===!0?await u.getElementRects({reference:t,floating:a,strategy:c}):P.rects),{x:f,y:m}=h3(p,C,F)),v=-1)}return{x:f,y:m,placement:C,strategy:c,middlewareData:y}};async function oi(t,a){var i;a===void 0&&(a={});const{x:r,y:c,platform:l,rects:u,elements:d,strategy:F}=t,{boundary:p="clippingAncestors",rootBoundary:f="viewport",elementContext:m="floating",altBoundary:C=!1,padding:y=0}=yt(a,t),w=Yf(y),D=d[C?m==="floating"?"reference":"floating":m],B=As(await l.getClippingRect({element:(i=await(l.isElement==null?void 0:l.isElement(D)))==null||i?D:D.contextElement||await(l.getDocumentElement==null?void 0:l.getDocumentElement(d.floating)),boundary:p,rootBoundary:f,strategy:F})),S=m==="floating"?{x:r,y:c,width:u.floating.width,height:u.floating.height}:u.reference,E=await(l.getOffsetParent==null?void 0:l.getOffsetParent(d.floating)),T=await(l.isElement==null?void 0:l.isElement(E))?await(l.getScale==null?void 0:l.getScale(E))||{x:1,y:1}:{x:1,y:1},P=As(l.convertOffsetParentRelativeRectToViewportRelativeRect?await l.convertOffsetParentRelativeRectToViewportRelativeRect({elements:d,rect:S,offsetParent:E,strategy:F}):S);return{top:(B.top-P.top+w.top)/T.y,bottom:(P.bottom-B.bottom+w.bottom)/T.y,left:(B.left-P.left+w.left)/T.x,right:(P.right-B.right+w.right)/T.x}}const r_=t=>({name:"arrow",options:t,async fn(a){const{x:i,y:r,placement:c,rects:l,platform:u,elements:d,middlewareData:F}=a,{element:p,padding:f=0}=yt(t,a)||{};if(p==null)return{};const m=Yf(f),C={x:i,y:r},y=Ju(c),w=Yu(y),v=await u.getDimensions(p),D=y==="y",B=D?"top":"left",S=D?"bottom":"right",E=D?"clientHeight":"clientWidth",T=l.reference[w]+l.reference[y]-C[y]-l.floating[w],P=C[y]-l.reference[y],x=await(u.getOffsetParent==null?void 0:u.getOffsetParent(p));let L=x?x[E]:0;(!L||!await(u.isElement==null?void 0:u.isElement(x)))&&(L=d.floating[E]||l.floating[w]);const z=T/2-P/2,U=L/2-v[w]/2-1,n2=Qt(m[B],U),u2=Qt(m[S],U),s2=n2,c2=L-v[w]-u2,G=L/2-v[w]/2+z,d2=eu(s2,G,c2),O=!F.arrow&&ja(c)!=null&&G!==d2&&l.reference[w]/2-(G<s2?n2:u2)-v[w]/2<0,W=O?G<s2?G-s2:G-c2:0;return{[y]:C[y]+W,data:{[y]:d2,centerOffset:G-d2-W,...O&&{alignmentOffset:W}},reset:O}}}),s_=function(t){return t===void 0&&(t={}),{name:"flip",options:t,async fn(a){var i,r;const{placement:c,middlewareData:l,rects:u,initialPlacement:d,platform:F,elements:p}=a,{mainAxis:f=!0,crossAxis:m=!0,fallbackPlacements:C,fallbackStrategy:y="bestFit",fallbackAxisSideDirection:w="none",flipAlignment:v=!0,...D}=yt(t,a);if((i=l.arrow)!=null&&i.alignmentOffset)return{};const B=vt(c),S=Ze(d),E=vt(d)===d,T=await(F.isRTL==null?void 0:F.isRTL(p.floating)),P=C||(E||!v?[ds(d)]:$E(d)),x=w!=="none";!C&&x&&P.push(...a_(d,v,w,T));const L=[d,...P],z=await oi(a,D),U=[];let n2=((r=l.flip)==null?void 0:r.overflows)||[];if(f&&U.push(z[B]),m){const G=QE(c,u,T);U.push(z[G[0]],z[G[1]])}if(n2=[...n2,{placement:c,overflows:U}],!U.every(G=>G<=0)){var u2,s2;const G=(((u2=l.flip)==null?void 0:u2.index)||0)+1,d2=L[G];if(d2&&(!(m==="alignment"?S!==Ze(d2):!1)||n2.every(Q=>Q.overflows[0]>0&&Ze(Q.placement)===S)))return{data:{index:G,overflows:n2},reset:{placement:d2}};let O=(s2=n2.filter(W=>W.overflows[0]<=0).sort((W,Q)=>W.overflows[1]-Q.overflows[1])[0])==null?void 0:s2.placement;if(!O)switch(y){case"bestFit":{var c2;const W=(c2=n2.filter(Q=>{if(x){const X=Ze(Q.placement);return X===S||X==="y"}return!0}).map(Q=>[Q.placement,Q.overflows.filter(X=>X>0).reduce((X,R)=>X+R,0)]).sort((Q,X)=>Q[1]-X[1])[0])==null?void 0:c2[0];W&&(O=W);break}case"initialPlacement":O=d;break}if(c!==O)return{reset:{placement:O}}}return{}}}};function u3(t,a){return{top:t.top-a.height,right:t.right-a.width,bottom:t.bottom-a.height,left:t.left-a.width}}function d3(t){return ZE.some(a=>t[a]>=0)}const c_=function(t){return t===void 0&&(t={}),{name:"hide",options:t,async fn(a){const{rects:i}=a,{strategy:r="referenceHidden",...c}=yt(t,a);switch(r){case"referenceHidden":{const l=await oi(a,{...c,elementContext:"reference"}),u=u3(l,i.reference);return{data:{referenceHiddenOffsets:u,referenceHidden:d3(u)}}}case"escaped":{const l=await oi(a,{...c,altBoundary:!0}),u=u3(l,i.floating);return{data:{escapedOffsets:u,escaped:d3(u)}}}default:return{}}}}},Jf=new Set(["left","top"]);async function l_(t,a){const{placement:i,platform:r,elements:c}=t,l=await(r.isRTL==null?void 0:r.isRTL(c.floating)),u=vt(i),d=ja(i),F=Ze(i)==="y",p=Jf.has(u)?-1:1,f=l&&F?-1:1,m=yt(a,t);let{mainAxis:C,crossAxis:y,alignmentAxis:w}=typeof m=="number"?{mainAxis:m,crossAxis:0,alignmentAxis:null}:{mainAxis:m.mainAxis||0,crossAxis:m.crossAxis||0,alignmentAxis:m.alignmentAxis};return d&&typeof w=="number"&&(y=d==="end"?w*-1:w),F?{x:y*f,y:C*p}:{x:C*p,y:y*f}}const h_=function(t){return t===void 0&&(t=0),{name:"offset",options:t,async fn(a){var i,r;const{x:c,y:l,placement:u,middlewareData:d}=a,F=await l_(a,t);return u===((i=d.offset)==null?void 0:i.placement)&&(r=d.arrow)!=null&&r.alignmentOffset?{}:{x:c+F.x,y:l+F.y,data:{...F,placement:u}}}}},u_=function(t){return t===void 0&&(t={}),{name:"shift",options:t,async fn(a){const{x:i,y:r,placement:c}=a,{mainAxis:l=!0,crossAxis:u=!1,limiter:d={fn:D=>{let{x:B,y:S}=D;return{x:B,y:S}}},...F}=yt(t,a),p={x:i,y:r},f=await oi(a,F),m=Ze(vt(c)),C=Xu(m);let y=p[C],w=p[m];if(l){const D=C==="y"?"top":"left",B=C==="y"?"bottom":"right",S=y+f[D],E=y-f[B];y=eu(S,y,E)}if(u){const D=m==="y"?"top":"left",B=m==="y"?"bottom":"right",S=w+f[D],E=w-f[B];w=eu(S,w,E)}const v=d.fn({...a,[C]:y,[m]:w});return{...v,data:{x:v.x-i,y:v.y-r,enabled:{[C]:l,[m]:u}}}}}},d_=function(t){return t===void 0&&(t={}),{options:t,fn(a){const{x:i,y:r,placement:c,rects:l,middlewareData:u}=a,{offset:d=0,mainAxis:F=!0,crossAxis:p=!0}=yt(t,a),f={x:i,y:r},m=Ze(c),C=Xu(m);let y=f[C],w=f[m];const v=yt(d,a),D=typeof v=="number"?{mainAxis:v,crossAxis:0}:{mainAxis:0,crossAxis:0,...v};if(F){const E=C==="y"?"height":"width",T=l.reference[C]-l.floating[E]+D.mainAxis,P=l.reference[C]+l.reference[E]-D.mainAxis;y<T?y=T:y>P&&(y=P)}if(p){var B,S;const E=C==="y"?"width":"height",T=Jf.has(vt(c)),P=l.reference[m]-l.floating[E]+(T&&((B=u.offset)==null?void 0:B[m])||0)+(T?0:D.crossAxis),x=l.reference[m]+l.reference[E]+(T?0:((S=u.offset)==null?void 0:S[m])||0)-(T?D.crossAxis:0);w<P?w=P:w>x&&(w=x)}return{[C]:y,[m]:w}}}},A_=function(t){return t===void 0&&(t={}),{name:"size",options:t,async fn(a){var i,r;const{placement:c,rects:l,platform:u,elements:d}=a,{apply:F=()=>{},...p}=yt(t,a),f=await oi(a,p),m=vt(c),C=ja(c),y=Ze(c)==="y",{width:w,height:v}=l.floating;let D,B;m==="top"||m==="bottom"?(D=m,B=C===(await(u.isRTL==null?void 0:u.isRTL(d.floating))?"start":"end")?"left":"right"):(B=m,D=C==="end"?"top":"bottom");const S=v-f.top-f.bottom,E=w-f.left-f.right,T=Qt(v-f[D],S),P=Qt(w-f[B],E),x=!a.middlewareData.shift;let L=T,z=P;if((i=a.middlewareData.shift)!=null&&i.enabled.x&&(z=E),(r=a.middlewareData.shift)!=null&&r.enabled.y&&(L=S),x&&!C){const n2=se(f.left,0),u2=se(f.right,0),s2=se(f.top,0),c2=se(f.bottom,0);y?z=w-2*(n2!==0||u2!==0?n2+u2:se(f.left,f.right)):L=v-2*(s2!==0||c2!==0?s2+c2:se(f.top,f.bottom))}await F({...a,availableWidth:z,availableHeight:L});const U=await u.getDimensions(d.floating);return w!==U.width||v!==U.height?{reset:{rects:!0}}:{}}}};function Ps(){return typeof window<"u"}function Va(t){return Qf(t)?(t.nodeName||"").toLowerCase():"#document"}function ce(t){var a;return(t==null||(a=t.ownerDocument)==null?void 0:a.defaultView)||window}function $e(t){var a;return(a=(Qf(t)?t.ownerDocument:t.document)||window.document)==null?void 0:a.documentElement}function Qf(t){return Ps()?t instanceof Node||t instanceof ce(t).Node:!1}function _0(t){return Ps()?t instanceof Element||t instanceof ce(t).Element:!1}function Je(t){return Ps()?t instanceof HTMLElement||t instanceof ce(t).HTMLElement:!1}function ps(t){return!Ps()||typeof ShadowRoot>"u"?!1:t instanceof ShadowRoot||t instanceof ce(t).ShadowRoot}const p_=new Set(["inline","contents"]);function di(t){const{overflow:a,overflowX:i,overflowY:r,display:c}=Be(t);return/auto|scroll|overlay|hidden|clip/.test(a+r+i)&&!p_.has(c)}const F_=new Set(["table","td","th"]);function m_(t){return F_.has(Va(t))}const g_=[":popover-open",":modal"];function Is(t){return g_.some(a=>{try{return t.matches(a)}catch{return!1}})}const f_=["transform","translate","scale","rotate","perspective"],b_=["transform","translate","scale","rotate","perspective","filter"],C_=["paint","layout","strict","content"];function Qu(t){const a=$u(),i=_0(t)?Be(t):t;return f_.some(r=>i[r]?i[r]!=="none":!1)||(i.containerType?i.containerType!=="normal":!1)||!a&&(i.backdropFilter?i.backdropFilter!=="none":!1)||!a&&(i.filter?i.filter!=="none":!1)||b_.some(r=>(i.willChange||"").includes(r))||C_.some(r=>(i.contain||"").includes(r))}function y_(t){let a=$t(t);for(;Je(a)&&!Ma(a);){if(Qu(a))return a;if(Is(a))return null;a=$t(a)}return null}function $u(){return typeof CSS>"u"||!CSS.supports?!1:CSS.supports("-webkit-backdrop-filter","none")}const v_=new Set(["html","body","#document"]);function Ma(t){return v_.has(Va(t))}function Be(t){return ce(t).getComputedStyle(t)}function Ms(t){return _0(t)?{scrollLeft:t.scrollLeft,scrollTop:t.scrollTop}:{scrollLeft:t.scrollX,scrollTop:t.scrollY}}function $t(t){if(Va(t)==="html")return t;const a=t.assignedSlot||t.parentNode||ps(t)&&t.host||$e(t);return ps(a)?a.host:a}function $f(t){const a=$t(t);return Ma(a)?t.ownerDocument?t.ownerDocument.body:t.body:Je(a)&&di(a)?a:$f(a)}function ai(t,a,i){var r;a===void 0&&(a=[]),i===void 0&&(i=!0);const c=$f(t),l=c===((r=t.ownerDocument)==null?void 0:r.body),u=ce(c);if(l){const d=ou(u);return a.concat(u,u.visualViewport||[],di(c)?c:[],d&&i?ai(d):[])}return a.concat(c,ai(c,[],i))}function ou(t){return t.parent&&Object.getPrototypeOf(t.parent)?t.frameElement:null}function eb(t){const a=Be(t);let i=parseFloat(a.width)||0,r=parseFloat(a.height)||0;const c=Je(t),l=c?t.offsetWidth:i,u=c?t.offsetHeight:r,d=us(i)!==l||us(r)!==u;return d&&(i=l,r=u),{width:i,height:r,$:d}}function ed(t){return _0(t)?t:t.contextElement}function Ta(t){const a=ed(t);if(!Je(a))return Ye(1);const i=a.getBoundingClientRect(),{width:r,height:c,$:l}=eb(a);let u=(l?us(i.width):i.width)/r,d=(l?us(i.height):i.height)/c;return(!u||!Number.isFinite(u))&&(u=1),(!d||!Number.isFinite(d))&&(d=1),{x:u,y:d}}const w_=Ye(0);function tb(t){const a=ce(t);return!$u()||!a.visualViewport?w_:{x:a.visualViewport.offsetLeft,y:a.visualViewport.offsetTop}}function k_(t,a,i){return a===void 0&&(a=!1),!i||a&&i!==ce(t)?!1:a}function Po(t,a,i,r){a===void 0&&(a=!1),i===void 0&&(i=!1);const c=t.getBoundingClientRect(),l=ed(t);let u=Ye(1);a&&(r?_0(r)&&(u=Ta(r)):u=Ta(t));const d=k_(l,i,r)?tb(l):Ye(0);let F=(c.left+d.x)/u.x,p=(c.top+d.y)/u.y,f=c.width/u.x,m=c.height/u.y;if(l){const C=ce(l),y=r&&_0(r)?ce(r):r;let w=C,v=ou(w);for(;v&&r&&y!==w;){const D=Ta(v),B=v.getBoundingClientRect(),S=Be(v),E=B.left+(v.clientLeft+parseFloat(S.paddingLeft))*D.x,T=B.top+(v.clientTop+parseFloat(S.paddingTop))*D.y;F*=D.x,p*=D.y,f*=D.x,m*=D.y,F+=E,p+=T,w=ce(v),v=ou(w)}}return As({width:f,height:m,x:F,y:p})}function td(t,a){const i=Ms(t).scrollLeft;return a?a.left+i:Po($e(t)).left+i}function ob(t,a,i){i===void 0&&(i=!1);const r=t.getBoundingClientRect(),c=r.left+a.scrollLeft-(i?0:td(t,r)),l=r.top+a.scrollTop;return{x:c,y:l}}function D_(t){let{elements:a,rect:i,offsetParent:r,strategy:c}=t;const l=c==="fixed",u=$e(r),d=a?Is(a.floating):!1;if(r===u||d&&l)return i;let F={scrollLeft:0,scrollTop:0},p=Ye(1);const f=Ye(0),m=Je(r);if((m||!m&&!l)&&((Va(r)!=="body"||di(u))&&(F=Ms(r)),Je(r))){const y=Po(r);p=Ta(r),f.x=y.x+r.clientLeft,f.y=y.y+r.clientTop}const C=u&&!m&&!l?ob(u,F,!0):Ye(0);return{width:i.width*p.x,height:i.height*p.y,x:i.x*p.x-F.scrollLeft*p.x+f.x+C.x,y:i.y*p.y-F.scrollTop*p.y+f.y+C.y}}function B_(t){return Array.from(t.getClientRects())}function E_(t){const a=$e(t),i=Ms(t),r=t.ownerDocument.body,c=se(a.scrollWidth,a.clientWidth,r.scrollWidth,r.clientWidth),l=se(a.scrollHeight,a.clientHeight,r.scrollHeight,r.clientHeight);let u=-i.scrollLeft+td(t);const d=-i.scrollTop;return Be(r).direction==="rtl"&&(u+=se(a.clientWidth,r.clientWidth)-c),{width:c,height:l,x:u,y:d}}function __(t,a){const i=ce(t),r=$e(t),c=i.visualViewport;let l=r.clientWidth,u=r.clientHeight,d=0,F=0;if(c){l=c.width,u=c.height;const p=$u();(!p||p&&a==="fixed")&&(d=c.offsetLeft,F=c.offsetTop)}return{width:l,height:u,x:d,y:F}}const S_=new Set(["absolute","fixed"]);function x_(t,a){const i=Po(t,!0,a==="fixed"),r=i.top+t.clientTop,c=i.left+t.clientLeft,l=Je(t)?Ta(t):Ye(1),u=t.clientWidth*l.x,d=t.clientHeight*l.y,F=c*l.x,p=r*l.y;return{width:u,height:d,x:F,y:p}}function A3(t,a,i){let r;if(a==="viewport")r=__(t,i);else if(a==="document")r=E_($e(t));else if(_0(a))r=x_(a,i);else{const c=tb(t);r={x:a.x-c.x,y:a.y-c.y,width:a.width,height:a.height}}return As(r)}function ab(t,a){const i=$t(t);return i===a||!_0(i)||Ma(i)?!1:Be(i).position==="fixed"||ab(i,a)}function T_(t,a){const i=a.get(t);if(i)return i;let r=ai(t,[],!1).filter(d=>_0(d)&&Va(d)!=="body"),c=null;const l=Be(t).position==="fixed";let u=l?$t(t):t;for(;_0(u)&&!Ma(u);){const d=Be(u),F=Qu(u);!F&&d.position==="fixed"&&(c=null),(l?!F&&!c:!F&&d.position==="static"&&!!c&&S_.has(c.position)||di(u)&&!F&&ab(t,u))?r=r.filter(f=>f!==u):c=d,u=$t(u)}return a.set(t,r),r}function R_(t){let{element:a,boundary:i,rootBoundary:r,strategy:c}=t;const u=[...i==="clippingAncestors"?Is(a)?[]:T_(a,this._c):[].concat(i),r],d=u[0],F=u.reduce((p,f)=>{const m=A3(a,f,c);return p.top=se(m.top,p.top),p.right=Qt(m.right,p.right),p.bottom=Qt(m.bottom,p.bottom),p.left=se(m.left,p.left),p},A3(a,d,c));return{width:F.right-F.left,height:F.bottom-F.top,x:F.left,y:F.top}}function P_(t){const{width:a,height:i}=eb(t);return{width:a,height:i}}function I_(t,a,i){const r=Je(a),c=$e(a),l=i==="fixed",u=Po(t,!0,l,a);let d={scrollLeft:0,scrollTop:0};const F=Ye(0);function p(){F.x=td(c)}if(r||!r&&!l)if((Va(a)!=="body"||di(c))&&(d=Ms(a)),r){const y=Po(a,!0,l,a);F.x=y.x+a.clientLeft,F.y=y.y+a.clientTop}else c&&p();l&&!r&&c&&p();const f=c&&!r&&!l?ob(c,d):Ye(0),m=u.left+d.scrollLeft-F.x-f.x,C=u.top+d.scrollTop-F.y-f.y;return{x:m,y:C,width:u.width,height:u.height}}function vh(t){return Be(t).position==="static"}function p3(t,a){if(!Je(t)||Be(t).position==="fixed")return null;if(a)return a(t);let i=t.offsetParent;return $e(t)===i&&(i=i.ownerDocument.body),i}function nb(t,a){const i=ce(t);if(Is(t))return i;if(!Je(t)){let c=$t(t);for(;c&&!Ma(c);){if(_0(c)&&!vh(c))return c;c=$t(c)}return i}let r=p3(t,a);for(;r&&m_(r)&&vh(r);)r=p3(r,a);return r&&Ma(r)&&vh(r)&&!Qu(r)?i:r||y_(t)||i}const M_=async function(t){const a=this.getOffsetParent||nb,i=this.getDimensions,r=await i(t.floating);return{reference:I_(t.reference,await a(t.floating),t.strategy),floating:{x:0,y:0,width:r.width,height:r.height}}};function L_(t){return Be(t).direction==="rtl"}const O_={convertOffsetParentRelativeRectToViewportRelativeRect:D_,getDocumentElement:$e,getClippingRect:R_,getOffsetParent:nb,getElementRects:M_,getClientRects:B_,getDimensions:P_,getScale:Ta,isElement:_0,isRTL:L_};function ib(t,a){return t.x===a.x&&t.y===a.y&&t.width===a.width&&t.height===a.height}function N_(t,a){let i=null,r;const c=$e(t);function l(){var d;clearTimeout(r),(d=i)==null||d.disconnect(),i=null}function u(d,F){d===void 0&&(d=!1),F===void 0&&(F=1),l();const p=t.getBoundingClientRect(),{left:f,top:m,width:C,height:y}=p;if(d||a(),!C||!y)return;const w=Wr(m),v=Wr(c.clientWidth-(f+C)),D=Wr(c.clientHeight-(m+y)),B=Wr(f),E={rootMargin:-w+"px "+-v+"px "+-D+"px "+-B+"px",threshold:se(0,Qt(1,F))||1};let T=!0;function P(x){const L=x[0].intersectionRatio;if(L!==F){if(!T)return u();L?u(!1,L):r=setTimeout(()=>{u(!1,1e-7)},1e3)}L===1&&!ib(p,t.getBoundingClientRect())&&u(),T=!1}try{i=new IntersectionObserver(P,{...E,root:c.ownerDocument})}catch{i=new IntersectionObserver(P,E)}i.observe(t)}return u(!0),l}function H_(t,a,i,r){r===void 0&&(r={});const{ancestorScroll:c=!0,ancestorResize:l=!0,elementResize:u=typeof ResizeObserver=="function",layoutShift:d=typeof IntersectionObserver=="function",animationFrame:F=!1}=r,p=ed(t),f=c||l?[...p?ai(p):[],...ai(a)]:[];f.forEach(B=>{c&&B.addEventListener("scroll",i,{passive:!0}),l&&B.addEventListener("resize",i)});const m=p&&d?N_(p,i):null;let C=-1,y=null;u&&(y=new ResizeObserver(B=>{let[S]=B;S&&S.target===p&&y&&(y.unobserve(a),cancelAnimationFrame(C),C=requestAnimationFrame(()=>{var E;(E=y)==null||E.observe(a)})),i()}),p&&!F&&y.observe(p),y.observe(a));let w,v=F?Po(t):null;F&&D();function D(){const B=Po(t);v&&!ib(v,B)&&i(),v=B,w=requestAnimationFrame(D)}return i(),()=>{var B;f.forEach(S=>{c&&S.removeEventListener("scroll",i),l&&S.removeEventListener("resize",i)}),m==null||m(),(B=y)==null||B.disconnect(),y=null,F&&cancelAnimationFrame(w)}}const z_=h_,j_=u_,V_=s_,U_=A_,q_=c_,F3=r_,W_=d_,G_=(t,a,i)=>{const r=new Map,c={platform:O_,...i},l={...c.platform,_c:r};return i_(t,a,{...c,platform:l})};var K_=typeof document<"u",Z_=function(){},as=K_?b.useLayoutEffect:Z_;function Fs(t,a){if(t===a)return!0;if(typeof t!=typeof a)return!1;if(typeof t=="function"&&t.toString()===a.toString())return!0;let i,r,c;if(t&&a&&typeof t=="object"){if(Array.isArray(t)){if(i=t.length,i!==a.length)return!1;for(r=i;r--!==0;)if(!Fs(t[r],a[r]))return!1;return!0}if(c=Object.keys(t),i=c.length,i!==Object.keys(a).length)return!1;for(r=i;r--!==0;)if(!{}.hasOwnProperty.call(a,c[r]))return!1;for(r=i;r--!==0;){const l=c[r];if(!(l==="_owner"&&t.$$typeof)&&!Fs(t[l],a[l]))return!1}return!0}return t!==t&&a!==a}function rb(t){return typeof window>"u"?1:(t.ownerDocument.defaultView||window).devicePixelRatio||1}function m3(t,a){const i=rb(t);return Math.round(a*i)/i}function wh(t){const a=b.useRef(t);return as(()=>{a.current=t}),a}function sb(t){t===void 0&&(t={});const{placement:a="bottom",strategy:i="absolute",middleware:r=[],platform:c,elements:{reference:l,floating:u}={},transform:d=!0,whileElementsMounted:F,open:p}=t,[f,m]=b.useState({x:0,y:0,strategy:i,placement:a,middlewareData:{},isPositioned:!1}),[C,y]=b.useState(r);Fs(C,r)||y(r);const[w,v]=b.useState(null),[D,B]=b.useState(null),S=b.useCallback(Q=>{Q!==x.current&&(x.current=Q,v(Q))},[]),E=b.useCallback(Q=>{Q!==L.current&&(L.current=Q,B(Q))},[]),T=l||w,P=u||D,x=b.useRef(null),L=b.useRef(null),z=b.useRef(f),U=F!=null,n2=wh(F),u2=wh(c),s2=wh(p),c2=b.useCallback(()=>{if(!x.current||!L.current)return;const Q={placement:a,strategy:i,middleware:C};u2.current&&(Q.platform=u2.current),G_(x.current,L.current,Q).then(X=>{const R={...X,isPositioned:s2.current!==!1};G.current&&!Fs(z.current,R)&&(z.current=R,wu.flushSync(()=>{m(R)}))})},[C,a,i,u2,s2]);as(()=>{p===!1&&z.current.isPositioned&&(z.current.isPositioned=!1,m(Q=>({...Q,isPositioned:!1})))},[p]);const G=b.useRef(!1);as(()=>(G.current=!0,()=>{G.current=!1}),[]),as(()=>{if(T&&(x.current=T),P&&(L.current=P),T&&P){if(n2.current)return n2.current(T,P,c2);c2()}},[T,P,c2,n2,U]);const d2=b.useMemo(()=>({reference:x,floating:L,setReference:S,setFloating:E}),[S,E]),O=b.useMemo(()=>({reference:T,floating:P}),[T,P]),W=b.useMemo(()=>{const Q={position:i,left:0,top:0};if(!O.floating)return Q;const X=m3(O.floating,f.x),R=m3(O.floating,f.y);return d?{...Q,transform:"translate("+X+"px, "+R+"px)",...rb(O.floating)>=1.5&&{willChange:"transform"}}:{position:i,left:X,top:R}},[i,d,O.floating,f.x,f.y]);return b.useMemo(()=>({...f,update:c2,refs:d2,elements:O,floatingStyles:W}),[f,c2,d2,O,W])}const X_=t=>{function a(i){return{}.hasOwnProperty.call(i,"current")}return{name:"arrow",options:t,fn(i){const{element:r,padding:c}=typeof t=="function"?t(i):t;return r&&a(r)?r.current!=null?F3({element:r.current,padding:c}).fn(i):{}:r?F3({element:r,padding:c}).fn(i):{}}}},cb=(t,a)=>({...z_(t),options:[t,a]}),lb=(t,a)=>({...j_(t),options:[t,a]}),Y_=(t,a)=>({...W_(t),options:[t,a]}),J_=(t,a)=>({...V_(t),options:[t,a]}),Q_=(t,a)=>({...U_(t),options:[t,a]}),$_=(t,a)=>({...q_(t),options:[t,a]}),hb=(t,a)=>({...X_(t),options:[t,a]});var e7="Arrow",ub=b.forwardRef((t,a)=>{const{children:i,width:r=10,height:c=5,...l}=t;return g.jsx(T2.svg,{...l,ref:a,width:r,height:c,viewBox:"0 0 30 10",preserveAspectRatio:"none",children:t.asChild?i:g.jsx("polygon",{points:"0,0 30,0 15,10"})})});ub.displayName=e7;var t7=ub,od="Popper",[db,Ls]=Le(od),[o7,Ab]=db(od),pb=t=>{const{__scopePopper:a,children:i}=t,[r,c]=b.useState(null);return g.jsx(o7,{scope:a,anchor:r,onAnchorChange:c,children:i})};pb.displayName=od;var Fb="PopperAnchor",mb=b.forwardRef((t,a)=>{const{__scopePopper:i,virtualRef:r,...c}=t,l=Ab(Fb,i),u=b.useRef(null),d=n0(a,u);return b.useEffect(()=>{l.onAnchorChange((r==null?void 0:r.current)||u.current)}),r?null:g.jsx(T2.div,{...c,ref:d})});mb.displayName=Fb;var ad="PopperContent",[a7,n7]=db(ad),gb=b.forwardRef((t,a)=>{var K2,E2,I2,V2,h0,I0;const{__scopePopper:i,side:r="bottom",sideOffset:c=0,align:l="center",alignOffset:u=0,arrowPadding:d=0,avoidCollisions:F=!0,collisionBoundary:p=[],collisionPadding:f=0,sticky:m="partial",hideWhenDetached:C=!1,updatePositionStrategy:y="optimized",onPlaced:w,...v}=t,D=Ab(ad,i),[B,S]=b.useState(null),E=n0(a,Se=>S(Se)),[T,P]=b.useState(null),x=KE(T),L=(x==null?void 0:x.width)??0,z=(x==null?void 0:x.height)??0,U=r+(l!=="center"?"-"+l:""),n2=typeof f=="number"?f:{top:0,right:0,bottom:0,left:0,...f},u2=Array.isArray(p)?p:[p],s2=u2.length>0,c2={padding:n2,boundary:u2.filter(r7),altBoundary:s2},{refs:G,floatingStyles:d2,placement:O,isPositioned:W,middlewareData:Q}=sb({strategy:"fixed",placement:U,whileElementsMounted:(...Se)=>H_(...Se,{animationFrame:y==="always"}),elements:{reference:D.anchor},middleware:[cb({mainAxis:c+z,alignmentAxis:u}),F&&lb({mainAxis:!0,crossAxis:!1,limiter:m==="partial"?Y_():void 0,...c2}),F&&J_({...c2}),Q_({...c2,apply:({elements:Se,rects:q0,availableWidth:Ua,availableHeight:qa})=>{const{width:H0,height:Wa}=q0.reference,et=Se.floating.style;et.setProperty("--radix-popper-available-width",`${Ua}px`),et.setProperty("--radix-popper-available-height",`${qa}px`),et.setProperty("--radix-popper-anchor-width",`${H0}px`),et.setProperty("--radix-popper-anchor-height",`${Wa}px`)}}),T&&hb({element:T,padding:d}),s7({arrowWidth:L,arrowHeight:z}),C&&$_({strategy:"referenceHidden",...c2})]}),[X,R]=Cb(O),$=O0(w);De(()=>{W&&($==null||$())},[W,$]);const e2=(K2=Q.arrow)==null?void 0:K2.x,a2=(E2=Q.arrow)==null?void 0:E2.y,A2=((I2=Q.arrow)==null?void 0:I2.centerOffset)!==0,[k2,g2]=b.useState();return De(()=>{B&&g2(window.getComputedStyle(B).zIndex)},[B]),g.jsx("div",{ref:G.setFloating,"data-radix-popper-content-wrapper":"",style:{...d2,transform:W?d2.transform:"translate(0, -200%)",minWidth:"max-content",zIndex:k2,"--radix-popper-transform-origin":[(V2=Q.transformOrigin)==null?void 0:V2.x,(h0=Q.transformOrigin)==null?void 0:h0.y].join(" "),...((I0=Q.hide)==null?void 0:I0.referenceHidden)&&{visibility:"hidden",pointerEvents:"none"}},dir:t.dir,children:g.jsx(a7,{scope:i,placedSide:X,onArrowChange:P,arrowX:e2,arrowY:a2,shouldHideArrow:A2,children:g.jsx(T2.div,{"data-side":X,"data-align":R,...v,ref:E,style:{...v.style,animation:W?void 0:"none"}})})})});gb.displayName=ad;var fb="PopperArrow",i7={top:"bottom",right:"left",bottom:"top",left:"right"},bb=b.forwardRef(function(a,i){const{__scopePopper:r,...c}=a,l=n7(fb,r),u=i7[l.placedSide];return g.jsx("span",{ref:l.onArrowChange,style:{position:"absolute",left:l.arrowX,top:l.arrowY,[u]:0,transformOrigin:{top:"",right:"0 0",bottom:"center 0",left:"100% 0"}[l.placedSide],transform:{top:"translateY(100%)",right:"translateY(50%) rotate(90deg) translateX(-50%)",bottom:"rotate(180deg)",left:"translateY(50%) rotate(-90deg) translateX(50%)"}[l.placedSide],visibility:l.shouldHideArrow?"hidden":void 0},children:g.jsx(t7,{...c,ref:i,style:{...c.style,display:"block"}})})});bb.displayName=fb;function r7(t){return t!==null}var s7=t=>({name:"transformOrigin",options:t,fn(a){var D,B,S;const{placement:i,rects:r,middlewareData:c}=a,u=((D=c.arrow)==null?void 0:D.centerOffset)!==0,d=u?0:t.arrowWidth,F=u?0:t.arrowHeight,[p,f]=Cb(i),m={start:"0%",center:"50%",end:"100%"}[f],C=(((B=c.arrow)==null?void 0:B.x)??0)+d/2,y=(((S=c.arrow)==null?void 0:S.y)??0)+F/2;let w="",v="";return p==="bottom"?(w=u?m:`${C}px`,v=`${-F}px`):p==="top"?(w=u?m:`${C}px`,v=`${r.floating.height+F}px`):p==="right"?(w=`${-F}px`,v=u?m:`${y}px`):p==="left"&&(w=`${r.floating.width+F}px`,v=u?m:`${y}px`),{data:{x:w,y:v}}}});function Cb(t){const[a,i="center"]=t.split("-");return[a,i]}var yb=pb,nd=mb,vb=gb,wb=bb,kh="rovingFocusGroup.onEntryFocus",c7={bubbles:!1,cancelable:!0},Ai="RovingFocusGroup",[au,kb,l7]=ui(Ai),[h7,Os]=Le(Ai,[l7]),[u7,d7]=h7(Ai),Db=b.forwardRef((t,a)=>g.jsx(au.Provider,{scope:t.__scopeRovingFocusGroup,children:g.jsx(au.Slot,{scope:t.__scopeRovingFocusGroup,children:g.jsx(A7,{...t,ref:a})})}));Db.displayName=Ai;var A7=b.forwardRef((t,a)=>{const{__scopeRovingFocusGroup:i,orientation:r,loop:c=!1,dir:l,currentTabStopId:u,defaultCurrentTabStopId:d,onCurrentTabStopIdChange:F,onEntryFocus:p,preventScrollOnEntryFocus:f=!1,...m}=t,C=b.useRef(null),y=n0(a,C),w=hi(l),[v,D]=Qe({prop:u,defaultProp:d??null,onChange:F,caller:Ai}),[B,S]=b.useState(!1),E=O0(p),T=kb(i),P=b.useRef(!1),[x,L]=b.useState(0);return b.useEffect(()=>{const z=C.current;if(z)return z.addEventListener(kh,E),()=>z.removeEventListener(kh,E)},[E]),g.jsx(u7,{scope:i,orientation:r,dir:w,loop:c,currentTabStopId:v,onItemFocus:b.useCallback(z=>D(z),[D]),onItemShiftTab:b.useCallback(()=>S(!0),[]),onFocusableItemAdd:b.useCallback(()=>L(z=>z+1),[]),onFocusableItemRemove:b.useCallback(()=>L(z=>z-1),[]),children:g.jsx(T2.div,{tabIndex:B||x===0?-1:0,"data-orientation":r,...m,ref:y,style:{outline:"none",...t.style},onMouseDown:F2(t.onMouseDown,()=>{P.current=!0}),onFocus:F2(t.onFocus,z=>{const U=!P.current;if(z.target===z.currentTarget&&U&&!B){const n2=new CustomEvent(kh,c7);if(z.currentTarget.dispatchEvent(n2),!n2.defaultPrevented){const u2=T().filter(O=>O.focusable),s2=u2.find(O=>O.active),c2=u2.find(O=>O.id===v),d2=[s2,c2,...u2].filter(Boolean).map(O=>O.ref.current);_b(d2,f)}}P.current=!1}),onBlur:F2(t.onBlur,()=>S(!1))})})}),Bb="RovingFocusGroupItem",Eb=b.forwardRef((t,a)=>{const{__scopeRovingFocusGroup:i,focusable:r=!0,active:c=!1,tabStopId:l,children:u,...d}=t,F=ve(),p=l||F,f=d7(Bb,i),m=f.currentTabStopId===p,C=kb(i),{onFocusableItemAdd:y,onFocusableItemRemove:w,currentTabStopId:v}=f;return b.useEffect(()=>{if(r)return y(),()=>w()},[r,y,w]),g.jsx(au.ItemSlot,{scope:i,id:p,focusable:r,active:c,children:g.jsx(T2.span,{tabIndex:m?0:-1,"data-orientation":f.orientation,...d,ref:a,onMouseDown:F2(t.onMouseDown,D=>{r?f.onItemFocus(p):D.preventDefault()}),onFocus:F2(t.onFocus,()=>f.onItemFocus(p)),onKeyDown:F2(t.onKeyDown,D=>{if(D.key==="Tab"&&D.shiftKey){f.onItemShiftTab();return}if(D.target!==D.currentTarget)return;const B=m7(D,f.orientation,f.dir);if(B!==void 0){if(D.metaKey||D.ctrlKey||D.altKey||D.shiftKey)return;D.preventDefault();let E=C().filter(T=>T.focusable).map(T=>T.ref.current);if(B==="last")E.reverse();else if(B==="prev"||B==="next"){B==="prev"&&E.reverse();const T=E.indexOf(D.currentTarget);E=f.loop?g7(E,T+1):E.slice(T+1)}setTimeout(()=>_b(E))}}),children:typeof u=="function"?u({isCurrentTabStop:m,hasTabStop:v!=null}):u})})});Eb.displayName=Bb;var p7={ArrowLeft:"prev",ArrowUp:"prev",ArrowRight:"next",ArrowDown:"next",PageUp:"first",Home:"first",PageDown:"last",End:"last"};function F7(t,a){return a!=="rtl"?t:t==="ArrowLeft"?"ArrowRight":t==="ArrowRight"?"ArrowLeft":t}function m7(t,a,i){const r=F7(t.key,i);if(!(a==="vertical"&&["ArrowLeft","ArrowRight"].includes(r))&&!(a==="horizontal"&&["ArrowUp","ArrowDown"].includes(r)))return p7[r]}function _b(t,a=!1){const i=document.activeElement;for(const r of t)if(r===i||(r.focus({preventScroll:a}),document.activeElement!==i))return}function g7(t,a){return t.map((i,r)=>t[(a+r)%t.length])}var Sb=Db,xb=Eb,nu=["Enter"," "],f7=["ArrowDown","PageUp","Home"],Tb=["ArrowUp","PageDown","End"],b7=[...f7,...Tb],C7={ltr:[...nu,"ArrowRight"],rtl:[...nu,"ArrowLeft"]},y7={ltr:["ArrowLeft"],rtl:["ArrowRight"]},pi="Menu",[ni,v7,w7]=ui(pi),[No,Rb]=Le(pi,[w7,Ls,Os]),Ns=Ls(),Pb=Os(),[k7,Ho]=No(pi),[D7,Fi]=No(pi),Ib=t=>{const{__scopeMenu:a,open:i=!1,children:r,dir:c,onOpenChange:l,modal:u=!0}=t,d=Ns(a),[F,p]=b.useState(null),f=b.useRef(!1),m=O0(l),C=hi(c);return b.useEffect(()=>{const y=()=>{f.current=!0,document.addEventListener("pointerdown",w,{capture:!0,once:!0}),document.addEventListener("pointermove",w,{capture:!0,once:!0})},w=()=>f.current=!1;return document.addEventListener("keydown",y,{capture:!0}),()=>{document.removeEventListener("keydown",y,{capture:!0}),document.removeEventListener("pointerdown",w,{capture:!0}),document.removeEventListener("pointermove",w,{capture:!0})}},[]),g.jsx(yb,{...d,children:g.jsx(k7,{scope:a,open:i,onOpenChange:m,content:F,onContentChange:p,children:g.jsx(D7,{scope:a,onClose:b.useCallback(()=>m(!1),[m]),isUsingKeyboardRef:f,dir:C,modal:u,children:r})})})};Ib.displayName=pi;var B7="MenuAnchor",id=b.forwardRef((t,a)=>{const{__scopeMenu:i,...r}=t,c=Ns(i);return g.jsx(nd,{...c,...r,ref:a})});id.displayName=B7;var rd="MenuPortal",[E7,Mb]=No(rd,{forceMount:void 0}),Lb=t=>{const{__scopeMenu:a,forceMount:i,children:r,container:c}=t,l=Ho(rd,a);return g.jsx(E7,{scope:a,forceMount:i,children:g.jsx(N0,{present:i||l.open,children:g.jsx(Ds,{asChild:!0,container:c,children:r})})})};Lb.displayName=rd;var we="MenuContent",[_7,sd]=No(we),Ob=b.forwardRef((t,a)=>{const i=Mb(we,t.__scopeMenu),{forceMount:r=i.forceMount,...c}=t,l=Ho(we,t.__scopeMenu),u=Fi(we,t.__scopeMenu);return g.jsx(ni.Provider,{scope:t.__scopeMenu,children:g.jsx(N0,{present:r||l.open,children:g.jsx(ni.Slot,{scope:t.__scopeMenu,children:u.modal?g.jsx(S7,{...c,ref:a}):g.jsx(x7,{...c,ref:a})})})})}),S7=b.forwardRef((t,a)=>{const i=Ho(we,t.__scopeMenu),r=b.useRef(null),c=n0(a,r);return b.useEffect(()=>{const l=r.current;if(l)return _u(l)},[]),g.jsx(cd,{...t,ref:c,trapFocus:i.open,disableOutsidePointerEvents:i.open,disableOutsideScroll:!0,onFocusOutside:F2(t.onFocusOutside,l=>l.preventDefault(),{checkForDefaultPrevented:!1}),onDismiss:()=>i.onOpenChange(!1)})}),x7=b.forwardRef((t,a)=>{const i=Ho(we,t.__scopeMenu);return g.jsx(cd,{...t,ref:a,trapFocus:!1,disableOutsidePointerEvents:!1,disableOutsideScroll:!1,onDismiss:()=>i.onOpenChange(!1)})}),T7=Pa("MenuContent.ScrollLock"),cd=b.forwardRef((t,a)=>{const{__scopeMenu:i,loop:r=!1,trapFocus:c,onOpenAutoFocus:l,onCloseAutoFocus:u,disableOutsidePointerEvents:d,onEntryFocus:F,onEscapeKeyDown:p,onPointerDownOutside:f,onFocusOutside:m,onInteractOutside:C,onDismiss:y,disableOutsideScroll:w,...v}=t,D=Ho(we,i),B=Fi(we,i),S=Ns(i),E=Pb(i),T=v7(i),[P,x]=b.useState(null),L=b.useRef(null),z=n0(a,L,D.onContentChange),U=b.useRef(0),n2=b.useRef(""),u2=b.useRef(0),s2=b.useRef(null),c2=b.useRef("right"),G=b.useRef(0),d2=w?Es:b.Fragment,O=w?{as:T7,allowPinchZoom:!0}:void 0,W=X=>{var K2,E2;const R=n2.current+X,$=T().filter(I2=>!I2.disabled),e2=document.activeElement,a2=(K2=$.find(I2=>I2.ref.current===e2))==null?void 0:K2.textValue,A2=$.map(I2=>I2.textValue),k2=U7(A2,R,a2),g2=(E2=$.find(I2=>I2.textValue===k2))==null?void 0:E2.ref.current;(function I2(V2){n2.current=V2,window.clearTimeout(U.current),V2!==""&&(U.current=window.setTimeout(()=>I2(""),1e3))})(R),g2&&setTimeout(()=>g2.focus())};b.useEffect(()=>()=>window.clearTimeout(U.current),[]),Eu();const Q=b.useCallback(X=>{var $,e2;return c2.current===(($=s2.current)==null?void 0:$.side)&&W7(X,(e2=s2.current)==null?void 0:e2.area)},[]);return g.jsx(_7,{scope:i,searchRef:n2,onItemEnter:b.useCallback(X=>{Q(X)&&X.preventDefault()},[Q]),onItemLeave:b.useCallback(X=>{var R;Q(X)||((R=L.current)==null||R.focus(),x(null))},[Q]),onTriggerLeave:b.useCallback(X=>{Q(X)&&X.preventDefault()},[Q]),pointerGraceTimerRef:u2,onPointerGraceIntentChange:b.useCallback(X=>{s2.current=X},[]),children:g.jsx(d2,{...O,children:g.jsx(ks,{asChild:!0,trapped:c,onMountAutoFocus:F2(l,X=>{var R;X.preventDefault(),(R=L.current)==null||R.focus({preventScroll:!0})}),onUnmountAutoFocus:u,children:g.jsx(li,{asChild:!0,disableOutsidePointerEvents:d,onEscapeKeyDown:p,onPointerDownOutside:f,onFocusOutside:m,onInteractOutside:C,onDismiss:y,children:g.jsx(Sb,{asChild:!0,...E,dir:B.dir,orientation:"vertical",loop:r,currentTabStopId:P,onCurrentTabStopIdChange:x,onEntryFocus:F2(F,X=>{B.isUsingKeyboardRef.current||X.preventDefault()}),preventScrollOnEntryFocus:!0,children:g.jsx(vb,{role:"menu","aria-orientation":"vertical","data-state":$b(D.open),"data-radix-menu-content":"",dir:B.dir,...S,...v,ref:z,style:{outline:"none",...v.style},onKeyDown:F2(v.onKeyDown,X=>{const $=X.target.closest("[data-radix-menu-content]")===X.currentTarget,e2=X.ctrlKey||X.altKey||X.metaKey,a2=X.key.length===1;$&&(X.key==="Tab"&&X.preventDefault(),!e2&&a2&&W(X.key));const A2=L.current;if(X.target!==A2||!b7.includes(X.key))return;X.preventDefault();const g2=T().filter(K2=>!K2.disabled).map(K2=>K2.ref.current);Tb.includes(X.key)&&g2.reverse(),j7(g2)}),onBlur:F2(t.onBlur,X=>{X.currentTarget.contains(X.target)||(window.clearTimeout(U.current),n2.current="")}),onPointerMove:F2(t.onPointerMove,ii(X=>{const R=X.target,$=G.current!==X.clientX;if(X.currentTarget.contains(R)&&$){const e2=X.clientX>G.current?"right":"left";c2.current=e2,G.current=X.clientX}}))})})})})})})});Ob.displayName=we;var R7="MenuGroup",ld=b.forwardRef((t,a)=>{const{__scopeMenu:i,...r}=t;return g.jsx(T2.div,{role:"group",...r,ref:a})});ld.displayName=R7;var P7="MenuLabel",Nb=b.forwardRef((t,a)=>{const{__scopeMenu:i,...r}=t;return g.jsx(T2.div,{...r,ref:a})});Nb.displayName=P7;var ms="MenuItem",g3="menu.itemSelect",Hs=b.forwardRef((t,a)=>{const{disabled:i=!1,onSelect:r,...c}=t,l=b.useRef(null),u=Fi(ms,t.__scopeMenu),d=sd(ms,t.__scopeMenu),F=n0(a,l),p=b.useRef(!1),f=()=>{const m=l.current;if(!i&&m){const C=new CustomEvent(g3,{bubbles:!0,cancelable:!0});m.addEventListener(g3,y=>r==null?void 0:r(y),{once:!0}),rs(m,C),C.defaultPrevented?p.current=!1:u.onClose()}};return g.jsx(Hb,{...c,ref:F,disabled:i,onClick:F2(t.onClick,f),onPointerDown:m=>{var C;(C=t.onPointerDown)==null||C.call(t,m),p.current=!0},onPointerUp:F2(t.onPointerUp,m=>{var C;p.current||(C=m.currentTarget)==null||C.click()}),onKeyDown:F2(t.onKeyDown,m=>{const C=d.searchRef.current!=="";i||C&&m.key===" "||nu.includes(m.key)&&(m.currentTarget.click(),m.preventDefault())})})});Hs.displayName=ms;var Hb=b.forwardRef((t,a)=>{const{__scopeMenu:i,disabled:r=!1,textValue:c,...l}=t,u=sd(ms,i),d=Pb(i),F=b.useRef(null),p=n0(a,F),[f,m]=b.useState(!1),[C,y]=b.useState("");return b.useEffect(()=>{const w=F.current;w&&y((w.textContent??"").trim())},[l.children]),g.jsx(ni.ItemSlot,{scope:i,disabled:r,textValue:c??C,children:g.jsx(xb,{asChild:!0,...d,focusable:!r,children:g.jsx(T2.div,{role:"menuitem","data-highlighted":f?"":void 0,"aria-disabled":r||void 0,"data-disabled":r?"":void 0,...l,ref:p,onPointerMove:F2(t.onPointerMove,ii(w=>{r?u.onItemLeave(w):(u.onItemEnter(w),w.defaultPrevented||w.currentTarget.focus({preventScroll:!0}))})),onPointerLeave:F2(t.onPointerLeave,ii(w=>u.onItemLeave(w))),onFocus:F2(t.onFocus,()=>m(!0)),onBlur:F2(t.onBlur,()=>m(!1))})})})}),I7="MenuCheckboxItem",zb=b.forwardRef((t,a)=>{const{checked:i=!1,onCheckedChange:r,...c}=t;return g.jsx(Wb,{scope:t.__scopeMenu,checked:i,children:g.jsx(Hs,{role:"menuitemcheckbox","aria-checked":gs(i)?"mixed":i,...c,ref:a,"data-state":ud(i),onSelect:F2(c.onSelect,()=>r==null?void 0:r(gs(i)?!0:!i),{checkForDefaultPrevented:!1})})})});zb.displayName=I7;var jb="MenuRadioGroup",[M7,L7]=No(jb,{value:void 0,onValueChange:()=>{}}),Vb=b.forwardRef((t,a)=>{const{value:i,onValueChange:r,...c}=t,l=O0(r);return g.jsx(M7,{scope:t.__scopeMenu,value:i,onValueChange:l,children:g.jsx(ld,{...c,ref:a})})});Vb.displayName=jb;var Ub="MenuRadioItem",qb=b.forwardRef((t,a)=>{const{value:i,...r}=t,c=L7(Ub,t.__scopeMenu),l=i===c.value;return g.jsx(Wb,{scope:t.__scopeMenu,checked:l,children:g.jsx(Hs,{role:"menuitemradio","aria-checked":l,...r,ref:a,"data-state":ud(l),onSelect:F2(r.onSelect,()=>{var u;return(u=c.onValueChange)==null?void 0:u.call(c,i)},{checkForDefaultPrevented:!1})})})});qb.displayName=Ub;var hd="MenuItemIndicator",[Wb,O7]=No(hd,{checked:!1}),Gb=b.forwardRef((t,a)=>{const{__scopeMenu:i,forceMount:r,...c}=t,l=O7(hd,i);return g.jsx(N0,{present:r||gs(l.checked)||l.checked===!0,children:g.jsx(T2.span,{...c,ref:a,"data-state":ud(l.checked)})})});Gb.displayName=hd;var N7="MenuSeparator",Kb=b.forwardRef((t,a)=>{const{__scopeMenu:i,...r}=t;return g.jsx(T2.div,{role:"separator","aria-orientation":"horizontal",...r,ref:a})});Kb.displayName=N7;var H7="MenuArrow",Zb=b.forwardRef((t,a)=>{const{__scopeMenu:i,...r}=t,c=Ns(i);return g.jsx(wb,{...c,...r,ref:a})});Zb.displayName=H7;var z7="MenuSub",[GT,Xb]=No(z7),Xn="MenuSubTrigger",Yb=b.forwardRef((t,a)=>{const i=Ho(Xn,t.__scopeMenu),r=Fi(Xn,t.__scopeMenu),c=Xb(Xn,t.__scopeMenu),l=sd(Xn,t.__scopeMenu),u=b.useRef(null),{pointerGraceTimerRef:d,onPointerGraceIntentChange:F}=l,p={__scopeMenu:t.__scopeMenu},f=b.useCallback(()=>{u.current&&window.clearTimeout(u.current),u.current=null},[]);return b.useEffect(()=>f,[f]),b.useEffect(()=>{const m=d.current;return()=>{window.clearTimeout(m),F(null)}},[d,F]),g.jsx(id,{asChild:!0,...p,children:g.jsx(Hb,{id:c.triggerId,"aria-haspopup":"menu","aria-expanded":i.open,"aria-controls":c.contentId,"data-state":$b(i.open),...t,ref:ci(a,c.onTriggerChange),onClick:m=>{var C;(C=t.onClick)==null||C.call(t,m),!(t.disabled||m.defaultPrevented)&&(m.currentTarget.focus(),i.open||i.onOpenChange(!0))},onPointerMove:F2(t.onPointerMove,ii(m=>{l.onItemEnter(m),!m.defaultPrevented&&!t.disabled&&!i.open&&!u.current&&(l.onPointerGraceIntentChange(null),u.current=window.setTimeout(()=>{i.onOpenChange(!0),f()},100))})),onPointerLeave:F2(t.onPointerLeave,ii(m=>{var y,w;f();const C=(y=i.content)==null?void 0:y.getBoundingClientRect();if(C){const v=(w=i.content)==null?void 0:w.dataset.side,D=v==="right",B=D?-5:5,S=C[D?"left":"right"],E=C[D?"right":"left"];l.onPointerGraceIntentChange({area:[{x:m.clientX+B,y:m.clientY},{x:S,y:C.top},{x:E,y:C.top},{x:E,y:C.bottom},{x:S,y:C.bottom}],side:v}),window.clearTimeout(d.current),d.current=window.setTimeout(()=>l.onPointerGraceIntentChange(null),300)}else{if(l.onTriggerLeave(m),m.defaultPrevented)return;l.onPointerGraceIntentChange(null)}})),onKeyDown:F2(t.onKeyDown,m=>{var y;const C=l.searchRef.current!=="";t.disabled||C&&m.key===" "||C7[r.dir].includes(m.key)&&(i.onOpenChange(!0),(y=i.content)==null||y.focus(),m.preventDefault())})})})});Yb.displayName=Xn;var Jb="MenuSubContent",Qb=b.forwardRef((t,a)=>{const i=Mb(we,t.__scopeMenu),{forceMount:r=i.forceMount,...c}=t,l=Ho(we,t.__scopeMenu),u=Fi(we,t.__scopeMenu),d=Xb(Jb,t.__scopeMenu),F=b.useRef(null),p=n0(a,F);return g.jsx(ni.Provider,{scope:t.__scopeMenu,children:g.jsx(N0,{present:r||l.open,children:g.jsx(ni.Slot,{scope:t.__scopeMenu,children:g.jsx(cd,{id:d.contentId,"aria-labelledby":d.triggerId,...c,ref:p,align:"start",side:u.dir==="rtl"?"left":"right",disableOutsidePointerEvents:!1,disableOutsideScroll:!1,trapFocus:!1,onOpenAutoFocus:f=>{var m;u.isUsingKeyboardRef.current&&((m=F.current)==null||m.focus()),f.preventDefault()},onCloseAutoFocus:f=>f.preventDefault(),onFocusOutside:F2(t.onFocusOutside,f=>{f.target!==d.trigger&&l.onOpenChange(!1)}),onEscapeKeyDown:F2(t.onEscapeKeyDown,f=>{u.onClose(),f.preventDefault()}),onKeyDown:F2(t.onKeyDown,f=>{var y;const m=f.currentTarget.contains(f.target),C=y7[u.dir].includes(f.key);m&&C&&(l.onOpenChange(!1),(y=d.trigger)==null||y.focus(),f.preventDefault())})})})})})});Qb.displayName=Jb;function $b(t){return t?"open":"closed"}function gs(t){return t==="indeterminate"}function ud(t){return gs(t)?"indeterminate":t?"checked":"unchecked"}function j7(t){const a=document.activeElement;for(const i of t)if(i===a||(i.focus(),document.activeElement!==a))return}function V7(t,a){return t.map((i,r)=>t[(a+r)%t.length])}function U7(t,a,i){const c=a.length>1&&Array.from(a).every(p=>p===a[0])?a[0]:a,l=i?t.indexOf(i):-1;let u=V7(t,Math.max(l,0));c.length===1&&(u=u.filter(p=>p!==i));const F=u.find(p=>p.toLowerCase().startsWith(c.toLowerCase()));return F!==i?F:void 0}function q7(t,a){const{x:i,y:r}=t;let c=!1;for(let l=0,u=a.length-1;l<a.length;u=l++){const d=a[l],F=a[u],p=d.x,f=d.y,m=F.x,C=F.y;f>r!=C>r&&i<(m-p)*(r-f)/(C-f)+p&&(c=!c)}return c}function W7(t,a){if(!a)return!1;const i={x:t.clientX,y:t.clientY};return q7(i,a)}function ii(t){return a=>a.pointerType==="mouse"?t(a):void 0}var G7=Ib,K7=id,Z7=Lb,X7=Ob,Y7=ld,J7=Nb,Q7=Hs,$7=zb,e4=Vb,t4=qb,o4=Gb,a4=Kb,n4=Zb,i4=Yb,r4=Qb,zs="DropdownMenu",[s4,KT]=Le(zs,[Rb]),U0=Rb(),[c4,e5]=s4(zs),t5=t=>{const{__scopeDropdownMenu:a,children:i,dir:r,open:c,defaultOpen:l,onOpenChange:u,modal:d=!0}=t,F=U0(a),p=b.useRef(null),[f,m]=Qe({prop:c,defaultProp:l??!1,onChange:u,caller:zs});return g.jsx(c4,{scope:a,triggerId:ve(),triggerRef:p,contentId:ve(),open:f,onOpenChange:m,onOpenToggle:b.useCallback(()=>m(C=>!C),[m]),modal:d,children:g.jsx(G7,{...F,open:f,onOpenChange:m,dir:r,modal:d,children:i})})};t5.displayName=zs;var o5="DropdownMenuTrigger",a5=b.forwardRef((t,a)=>{const{__scopeDropdownMenu:i,disabled:r=!1,...c}=t,l=e5(o5,i),u=U0(i);return g.jsx(K7,{asChild:!0,...u,children:g.jsx(T2.button,{type:"button",id:l.triggerId,"aria-haspopup":"menu","aria-expanded":l.open,"aria-controls":l.open?l.contentId:void 0,"data-state":l.open?"open":"closed","data-disabled":r?"":void 0,disabled:r,...c,ref:ci(a,l.triggerRef),onPointerDown:F2(t.onPointerDown,d=>{!r&&d.button===0&&d.ctrlKey===!1&&(l.onOpenToggle(),l.open||d.preventDefault())}),onKeyDown:F2(t.onKeyDown,d=>{r||(["Enter"," "].includes(d.key)&&l.onOpenToggle(),d.key==="ArrowDown"&&l.onOpenChange(!0),["Enter"," ","ArrowDown"].includes(d.key)&&d.preventDefault())})})})});a5.displayName=o5;var l4="DropdownMenuPortal",n5=t=>{const{__scopeDropdownMenu:a,...i}=t,r=U0(a);return g.jsx(Z7,{...r,...i})};n5.displayName=l4;var i5="DropdownMenuContent",r5=b.forwardRef((t,a)=>{const{__scopeDropdownMenu:i,...r}=t,c=e5(i5,i),l=U0(i),u=b.useRef(!1);return g.jsx(X7,{id:c.contentId,"aria-labelledby":c.triggerId,...l,...r,ref:a,onCloseAutoFocus:F2(t.onCloseAutoFocus,d=>{var F;u.current||(F=c.triggerRef.current)==null||F.focus(),u.current=!1,d.preventDefault()}),onInteractOutside:F2(t.onInteractOutside,d=>{const F=d.detail.originalEvent,p=F.button===0&&F.ctrlKey===!0,f=F.button===2||p;(!c.modal||f)&&(u.current=!0)}),style:{...t.style,"--radix-dropdown-menu-content-transform-origin":"var(--radix-popper-transform-origin)","--radix-dropdown-menu-content-available-width":"var(--radix-popper-available-width)","--radix-dropdown-menu-content-available-height":"var(--radix-popper-available-height)","--radix-dropdown-menu-trigger-width":"var(--radix-popper-anchor-width)","--radix-dropdown-menu-trigger-height":"var(--radix-popper-anchor-height)"}})});r5.displayName=i5;var h4="DropdownMenuGroup",u4=b.forwardRef((t,a)=>{const{__scopeDropdownMenu:i,...r}=t,c=U0(i);return g.jsx(Y7,{...c,...r,ref:a})});u4.displayName=h4;var d4="DropdownMenuLabel",A4=b.forwardRef((t,a)=>{const{__scopeDropdownMenu:i,...r}=t,c=U0(i);return g.jsx(J7,{...c,...r,ref:a})});A4.displayName=d4;var p4="DropdownMenuItem",s5=b.forwardRef((t,a)=>{const{__scopeDropdownMenu:i,...r}=t,c=U0(i);return g.jsx(Q7,{...c,...r,ref:a})});s5.displayName=p4;var F4="DropdownMenuCheckboxItem",m4=b.forwardRef((t,a)=>{const{__scopeDropdownMenu:i,...r}=t,c=U0(i);return g.jsx($7,{...c,...r,ref:a})});m4.displayName=F4;var g4="DropdownMenuRadioGroup",f4=b.forwardRef((t,a)=>{const{__scopeDropdownMenu:i,...r}=t,c=U0(i);return g.jsx(e4,{...c,...r,ref:a})});f4.displayName=g4;var b4="DropdownMenuRadioItem",C4=b.forwardRef((t,a)=>{const{__scopeDropdownMenu:i,...r}=t,c=U0(i);return g.jsx(t4,{...c,...r,ref:a})});C4.displayName=b4;var y4="DropdownMenuItemIndicator",v4=b.forwardRef((t,a)=>{const{__scopeDropdownMenu:i,...r}=t,c=U0(i);return g.jsx(o4,{...c,...r,ref:a})});v4.displayName=y4;var w4="DropdownMenuSeparator",k4=b.forwardRef((t,a)=>{const{__scopeDropdownMenu:i,...r}=t,c=U0(i);return g.jsx(a4,{...c,...r,ref:a})});k4.displayName=w4;var D4="DropdownMenuArrow",B4=b.forwardRef((t,a)=>{const{__scopeDropdownMenu:i,...r}=t,c=U0(i);return g.jsx(n4,{...c,...r,ref:a})});B4.displayName=D4;var E4="DropdownMenuSubTrigger",_4=b.forwardRef((t,a)=>{const{__scopeDropdownMenu:i,...r}=t,c=U0(i);return g.jsx(i4,{...c,...r,ref:a})});_4.displayName=E4;var S4="DropdownMenuSubContent",x4=b.forwardRef((t,a)=>{const{__scopeDropdownMenu:i,...r}=t,c=U0(i);return g.jsx(r4,{...c,...r,ref:a,style:{...t.style,"--radix-dropdown-menu-content-transform-origin":"var(--radix-popper-transform-origin)","--radix-dropdown-menu-content-available-width":"var(--radix-popper-available-width)","--radix-dropdown-menu-content-available-height":"var(--radix-popper-available-height)","--radix-dropdown-menu-trigger-width":"var(--radix-popper-anchor-width)","--radix-dropdown-menu-trigger-height":"var(--radix-popper-anchor-height)"}})});x4.displayName=S4;var T4=t5,R4=a5,P4=n5,I4=r5,M4=s5,js="Popover",[c5,ZT]=Le(js,[Ls]),mi=Ls(),[L4,ao]=c5(js),l5=t=>{const{__scopePopover:a,children:i,open:r,defaultOpen:c,onOpenChange:l,modal:u=!1}=t,d=mi(a),F=b.useRef(null),[p,f]=b.useState(!1),[m,C]=Qe({prop:r,defaultProp:c??!1,onChange:l,caller:js});return g.jsx(yb,{...d,children:g.jsx(L4,{scope:a,contentId:ve(),triggerRef:F,open:m,onOpenChange:C,onOpenToggle:b.useCallback(()=>C(y=>!y),[C]),hasCustomAnchor:p,onCustomAnchorAdd:b.useCallback(()=>f(!0),[]),onCustomAnchorRemove:b.useCallback(()=>f(!1),[]),modal:u,children:i})})};l5.displayName=js;var h5="PopoverAnchor",O4=b.forwardRef((t,a)=>{const{__scopePopover:i,...r}=t,c=ao(h5,i),l=mi(i),{onCustomAnchorAdd:u,onCustomAnchorRemove:d}=c;return b.useEffect(()=>(u(),()=>d()),[u,d]),g.jsx(nd,{...l,...r,ref:a})});O4.displayName=h5;var u5="PopoverTrigger",d5=b.forwardRef((t,a)=>{const{__scopePopover:i,...r}=t,c=ao(u5,i),l=mi(i),u=n0(a,c.triggerRef),d=g.jsx(T2.button,{type:"button","aria-haspopup":"dialog","aria-expanded":c.open,"aria-controls":c.contentId,"data-state":g5(c.open),...r,ref:u,onClick:F2(t.onClick,c.onOpenToggle)});return c.hasCustomAnchor?d:g.jsx(nd,{asChild:!0,...l,children:d})});d5.displayName=u5;var dd="PopoverPortal",[N4,H4]=c5(dd,{forceMount:void 0}),A5=t=>{const{__scopePopover:a,forceMount:i,children:r,container:c}=t,l=ao(dd,a);return g.jsx(N4,{scope:a,forceMount:i,children:g.jsx(N0,{present:i||l.open,children:g.jsx(Ds,{asChild:!0,container:c,children:r})})})};A5.displayName=dd;var La="PopoverContent",p5=b.forwardRef((t,a)=>{const i=H4(La,t.__scopePopover),{forceMount:r=i.forceMount,...c}=t,l=ao(La,t.__scopePopover);return g.jsx(N0,{present:r||l.open,children:l.modal?g.jsx(j4,{...c,ref:a}):g.jsx(V4,{...c,ref:a})})});p5.displayName=La;var z4=Pa("PopoverContent.RemoveScroll"),j4=b.forwardRef((t,a)=>{const i=ao(La,t.__scopePopover),r=b.useRef(null),c=n0(a,r),l=b.useRef(!1);return b.useEffect(()=>{const u=r.current;if(u)return _u(u)},[]),g.jsx(Es,{as:z4,allowPinchZoom:!0,children:g.jsx(F5,{...t,ref:c,trapFocus:i.open,disableOutsidePointerEvents:!0,onCloseAutoFocus:F2(t.onCloseAutoFocus,u=>{var d;u.preventDefault(),l.current||(d=i.triggerRef.current)==null||d.focus()}),onPointerDownOutside:F2(t.onPointerDownOutside,u=>{const d=u.detail.originalEvent,F=d.button===0&&d.ctrlKey===!0,p=d.button===2||F;l.current=p},{checkForDefaultPrevented:!1}),onFocusOutside:F2(t.onFocusOutside,u=>u.preventDefault(),{checkForDefaultPrevented:!1})})})}),V4=b.forwardRef((t,a)=>{const i=ao(La,t.__scopePopover),r=b.useRef(!1),c=b.useRef(!1);return g.jsx(F5,{...t,ref:a,trapFocus:!1,disableOutsidePointerEvents:!1,onCloseAutoFocus:l=>{var u,d;(u=t.onCloseAutoFocus)==null||u.call(t,l),l.defaultPrevented||(r.current||(d=i.triggerRef.current)==null||d.focus(),l.preventDefault()),r.current=!1,c.current=!1},onInteractOutside:l=>{var F,p;(F=t.onInteractOutside)==null||F.call(t,l),l.defaultPrevented||(r.current=!0,l.detail.originalEvent.type==="pointerdown"&&(c.current=!0));const u=l.target;((p=i.triggerRef.current)==null?void 0:p.contains(u))&&l.preventDefault(),l.detail.originalEvent.type==="focusin"&&c.current&&l.preventDefault()}})}),F5=b.forwardRef((t,a)=>{const{__scopePopover:i,trapFocus:r,onOpenAutoFocus:c,onCloseAutoFocus:l,disableOutsidePointerEvents:u,onEscapeKeyDown:d,onPointerDownOutside:F,onFocusOutside:p,onInteractOutside:f,...m}=t,C=ao(La,i),y=mi(i);return Eu(),g.jsx(ks,{asChild:!0,loop:!0,trapped:r,onMountAutoFocus:c,onUnmountAutoFocus:l,children:g.jsx(li,{asChild:!0,disableOutsidePointerEvents:u,onInteractOutside:f,onEscapeKeyDown:d,onPointerDownOutside:F,onFocusOutside:p,onDismiss:()=>C.onOpenChange(!1),children:g.jsx(vb,{"data-state":g5(C.open),role:"dialog",id:C.contentId,...y,...m,ref:a,style:{...m.style,"--radix-popover-content-transform-origin":"var(--radix-popper-transform-origin)","--radix-popover-content-available-width":"var(--radix-popper-available-width)","--radix-popover-content-available-height":"var(--radix-popper-available-height)","--radix-popover-trigger-width":"var(--radix-popper-anchor-width)","--radix-popover-trigger-height":"var(--radix-popper-anchor-height)"}})})})}),m5="PopoverClose",U4=b.forwardRef((t,a)=>{const{__scopePopover:i,...r}=t,c=ao(m5,i);return g.jsx(T2.button,{type:"button",...r,ref:a,onClick:F2(t.onClick,()=>c.onOpenChange(!1))})});U4.displayName=m5;var q4="PopoverArrow",W4=b.forwardRef((t,a)=>{const{__scopePopover:i,...r}=t,c=mi(i);return g.jsx(wb,{...c,...r,ref:a})});W4.displayName=q4;function g5(t){return t?"open":"closed"}var G4=l5,K4=d5,Z4=A5,X4=p5,Vs="Tabs",[Y4,XT]=Le(Vs,[Os]),f5=Os(),[J4,Ad]=Y4(Vs),b5=b.forwardRef((t,a)=>{const{__scopeTabs:i,value:r,onValueChange:c,defaultValue:l,orientation:u="horizontal",dir:d,activationMode:F="automatic",...p}=t,f=hi(d),[m,C]=Qe({prop:r,onChange:c,defaultProp:l??"",caller:Vs});return g.jsx(J4,{scope:i,baseId:ve(),value:m,onValueChange:C,orientation:u,dir:f,activationMode:F,children:g.jsx(T2.div,{dir:f,"data-orientation":u,...p,ref:a})})});b5.displayName=Vs;var C5="TabsList",y5=b.forwardRef((t,a)=>{const{__scopeTabs:i,loop:r=!0,...c}=t,l=Ad(C5,i),u=f5(i);return g.jsx(Sb,{asChild:!0,...u,orientation:l.orientation,dir:l.dir,loop:r,children:g.jsx(T2.div,{role:"tablist","aria-orientation":l.orientation,...c,ref:a})})});y5.displayName=C5;var v5="TabsTrigger",w5=b.forwardRef((t,a)=>{const{__scopeTabs:i,value:r,disabled:c=!1,...l}=t,u=Ad(v5,i),d=f5(i),F=B5(u.baseId,r),p=E5(u.baseId,r),f=r===u.value;return g.jsx(xb,{asChild:!0,...d,focusable:!c,active:f,children:g.jsx(T2.button,{type:"button",role:"tab","aria-selected":f,"aria-controls":p,"data-state":f?"active":"inactive","data-disabled":c?"":void 0,disabled:c,id:F,...l,ref:a,onMouseDown:F2(t.onMouseDown,m=>{!c&&m.button===0&&m.ctrlKey===!1?u.onValueChange(r):m.preventDefault()}),onKeyDown:F2(t.onKeyDown,m=>{[" ","Enter"].includes(m.key)&&u.onValueChange(r)}),onFocus:F2(t.onFocus,()=>{const m=u.activationMode!=="manual";!f&&!c&&m&&u.onValueChange(r)})})})});w5.displayName=v5;var k5="TabsContent",D5=b.forwardRef((t,a)=>{const{__scopeTabs:i,value:r,forceMount:c,children:l,...u}=t,d=Ad(k5,i),F=B5(d.baseId,r),p=E5(d.baseId,r),f=r===d.value,m=b.useRef(f);return b.useEffect(()=>{const C=requestAnimationFrame(()=>m.current=!1);return()=>cancelAnimationFrame(C)},[]),g.jsx(N0,{present:c||f,children:({present:C})=>g.jsx(T2.div,{"data-state":f?"active":"inactive","data-orientation":d.orientation,role:"tabpanel","aria-labelledby":F,hidden:!C,id:p,tabIndex:0,...u,ref:a,style:{...t.style,animationDuration:m.current?"0s":void 0},children:C&&l})})});D5.displayName=k5;function B5(t,a){return`${t}-trigger-${a}`}function E5(t,a){return`${t}-content-${a}`}var Q4=b5,$4=y5,eS=w5,tS=D5,oS="vocs_AiCtaDropdown",f3="vocs_AiCtaDropdown_buttonLeft vocs_AiCtaDropdown_button vocs_Button_button",aS="vocs_AiCtaDropdown_buttonRight vocs_AiCtaDropdown_button vocs_Button_button",nS="vocs_AiCtaDropdown_dropdownMenuContent",iS="vocs_AiCtaDropdown_dropdownMenuItem",Dh="vocs_Button_button",YT="vocs_Button_button_accent";function _5(){return g.jsxs("svg",{width:"100%",height:"100%",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[g.jsx("title",{children:"Check"}),g.jsx("path",{d:"M7.49991 0.877045C3.84222 0.877045 0.877075 3.84219 0.877075 7.49988C0.877075 11.1575 3.84222 14.1227 7.49991 14.1227C11.1576 14.1227 14.1227 11.1575 14.1227 7.49988C14.1227 3.84219 11.1576 0.877045 7.49991 0.877045ZM1.82708 7.49988C1.82708 4.36686 4.36689 1.82704 7.49991 1.82704C10.6329 1.82704 13.1727 4.36686 13.1727 7.49988C13.1727 10.6329 10.6329 13.1727 7.49991 13.1727C4.36689 13.1727 1.82708 10.6329 1.82708 7.49988ZM10.1589 5.53774C10.3178 5.31191 10.2636 5.00001 10.0378 4.84109C9.81194 4.68217 9.50004 4.73642 9.34112 4.96225L6.51977 8.97154L5.35681 7.78706C5.16334 7.59002 4.84677 7.58711 4.64973 7.78058C4.45268 7.97404 4.44978 8.29061 4.64325 8.48765L6.22658 10.1003C6.33054 10.2062 6.47617 10.2604 6.62407 10.2483C6.77197 10.2363 6.90686 10.1591 6.99226 10.0377L10.1589 5.53774Z",fill:"currentColor",fillRule:"evenodd",clipRule:"evenodd"})]})}function S5(){return g.jsxs("svg",{width:"100%",height:"100%",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[g.jsx("title",{children:"Chevron Down"}),g.jsx("path",{d:"M3.13523 6.15803C3.3241 5.95657 3.64052 5.94637 3.84197 6.13523L7.5 9.56464L11.158 6.13523C11.3595 5.94637 11.6759 5.95657 11.8648 6.15803C12.0536 6.35949 12.0434 6.67591 11.842 6.86477L7.84197 10.6148C7.64964 10.7951 7.35036 10.7951 7.15803 10.6148L3.15803 6.86477C2.95657 6.67591 2.94637 6.35949 3.13523 6.15803Z",fill:"currentColor",fillRule:"evenodd",clipRule:"evenodd"})]})}function x5(){return g.jsxs("svg",{width:"100%",height:"100%",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[g.jsx("title",{children:"Copy"}),g.jsx("path",{d:"M5 2V1H10V2H5ZM4.75 0C4.33579 0 4 0.335786 4 0.75V1H3.5C2.67157 1 2 1.67157 2 2.5V12.5C2 13.3284 2.67157 14 3.5 14H7V13H3.5C3.22386 13 3 12.7761 3 12.5V2.5C3 2.22386 3.22386 2 3.5 2H4V2.25C4 2.66421 4.33579 3 4.75 3H10.25C10.6642 3 11 2.66421 11 2.25V2H11.5C11.7761 2 12 2.22386 12 2.5V7H13V2.5C13 1.67157 12.3284 1 11.5 1H11V0.75C11 0.335786 10.6642 0 10.25 0H4.75ZM9 8.5C9 8.77614 8.77614 9 8.5 9C8.22386 9 8 8.77614 8 8.5C8 8.22386 8.22386 8 8.5 8C8.77614 8 9 8.22386 9 8.5ZM10.5 9C10.7761 9 11 8.77614 11 8.5C11 8.22386 10.7761 8 10.5 8C10.2239 8 10 8.22386 10 8.5C10 8.77614 10.2239 9 10.5 9ZM13 8.5C13 8.77614 12.7761 9 12.5 9C12.2239 9 12 8.77614 12 8.5C12 8.22386 12.2239 8 12.5 8C12.7761 8 13 8.22386 13 8.5ZM14.5 9C14.7761 9 15 8.77614 15 8.5C15 8.22386 14.7761 8 14.5 8C14.2239 8 14 8.22386 14 8.5C14 8.77614 14.2239 9 14.5 9ZM15 10.5C15 10.7761 14.7761 11 14.5 11C14.2239 11 14 10.7761 14 10.5C14 10.2239 14.2239 10 14.5 10C14.7761 10 15 10.2239 15 10.5ZM14.5 13C14.7761 13 15 12.7761 15 12.5C15 12.2239 14.7761 12 14.5 12C14.2239 12 14 12.2239 14 12.5C14 12.7761 14.2239 13 14.5 13ZM14.5 15C14.7761 15 15 14.7761 15 14.5C15 14.2239 14.7761 14 14.5 14C14.2239 14 14 14.2239 14 14.5C14 14.7761 14.2239 15 14.5 15ZM8.5 11C8.77614 11 9 10.7761 9 10.5C9 10.2239 8.77614 10 8.5 10C8.22386 10 8 10.2239 8 10.5C8 10.7761 8.22386 11 8.5 11ZM9 12.5C9 12.7761 8.77614 13 8.5 13C8.22386 13 8 12.7761 8 12.5C8 12.2239 8.22386 12 8.5 12C8.77614 12 9 12.2239 9 12.5ZM8.5 15C8.77614 15 9 14.7761 9 14.5C9 14.2239 8.77614 14 8.5 14C8.22386 14 8 14.2239 8 14.5C8 14.7761 8.22386 15 8.5 15ZM11 14.5C11 14.7761 10.7761 15 10.5 15C10.2239 15 10 14.7761 10 14.5C10 14.2239 10.2239 14 10.5 14C10.7761 14 11 14.2239 11 14.5ZM12.5 15C12.7761 15 13 14.7761 13 14.5C13 14.2239 12.7761 14 12.5 14C12.2239 14 12 14.2239 12 14.5C12 14.7761 12.2239 15 12.5 15Z",fill:"currentColor",fillRule:"evenodd",clipRule:"evenodd"})]})}function rS(){return g.jsxs("svg",{xmlns:"http://www.w3.org/2000/svg",width:"100%",height:"100%",viewBox:"0 0 24 24",children:[g.jsx("title",{children:"OpenAI"}),g.jsx("path",{fill:"currentColor",d:"M22.282 9.821a6 6 0 0 0-.516-4.91a6.05 6.05 0 0 0-6.51-2.9A6.065 6.065 0 0 0 4.981 4.18a6 6 0 0 0-3.998 2.9a6.05 6.05 0 0 0 .743 7.097a5.98 5.98 0 0 0 .51 4.911a6.05 6.05 0 0 0 6.515 2.9A6 6 0 0 0 13.26 24a6.06 6.06 0 0 0 5.772-4.206a6 6 0 0 0 3.997-2.9a6.06 6.06 0 0 0-.747-7.073M13.26 22.43a4.48 4.48 0 0 1-2.876-1.04l.141-.081l4.779-2.758a.8.8 0 0 0 .392-.681v-6.737l2.02 1.168a.07.07 0 0 1 .038.052v5.583a4.504 4.504 0 0 1-4.494 4.494M3.6 18.304a4.47 4.47 0 0 1-.535-3.014l.142.085l4.783 2.759a.77.77 0 0 0 .78 0l5.843-3.369v2.332a.08.08 0 0 1-.033.062L9.74 19.95a4.5 4.5 0 0 1-6.14-1.646M2.34 7.896a4.5 4.5 0 0 1 2.366-1.973V11.6a.77.77 0 0 0 .388.677l5.815 3.354l-2.02 1.168a.08.08 0 0 1-.071 0l-4.83-2.786A4.504 4.504 0 0 1 2.34 7.872zm16.597 3.855l-5.833-3.387L15.119 7.2a.08.08 0 0 1 .071 0l4.83 2.791a4.494 4.494 0 0 1-.676 8.105v-5.678a.79.79 0 0 0-.407-.667m2.01-3.023l-.141-.085l-4.774-2.782a.78.78 0 0 0-.785 0L9.409 9.23V6.897a.07.07 0 0 1 .028-.061l4.83-2.787a4.5 4.5 0 0 1 6.68 4.66zm-12.64 4.135l-2.02-1.164a.08.08 0 0 1-.038-.057V6.075a4.5 4.5 0 0 1 7.375-3.453l-.142.08L8.704 5.46a.8.8 0 0 0-.393.681zm1.097-2.365l2.602-1.5l2.607 1.5v2.999l-2.597 1.5l-2.607-1.5Z"})]})}function sS(){const{content:t}=to(),{aiCta:a}=m0(),i=i0(),[r,c]=b.useState(!1);b.useEffect(()=>{if(!r)return;const d=setTimeout(()=>c(!1),1e3);return()=>clearTimeout(d)},[r]);const l=b.useCallback(()=>{c(!0),navigator.clipboard.writeText(t??"")},[t]),u=b.useMemo(()=>{const d=window.location.origin+i.pathname;return typeof a=="object"?a.query({location:d}):`Please research and analyze this page: ${d} so I can ask you questions about it. Once you have read it, prompt me with any questions I have. Do not post content from the page in your response. Any of my follow up questions must reference the site I gave you.`},[a,i.pathname]);return g.jsxs("div",{className:oS,children:[r?g.jsxs("div",{className:l2(Dh,f3),children:[g.jsx("div",{style:{width:"14px",height:"14px"},children:g.jsx(_5,{})}),"Copied"]}):g.jsxs(ke,{className:l2(Dh,f3),href:`https://chatgpt.com?hints=search&q=${encodeURIComponent(u)}`,variant:"styleless",children:[g.jsx("div",{style:{width:"14px",height:"14px"},children:g.jsx(rS,{})}),"Ask in ChatGPT"]}),g.jsxs(T4,{children:[g.jsx(R4,{asChild:!0,children:g.jsx("button",{className:l2(Dh,aS),type:"button",children:g.jsx("div",{style:{width:"14px",height:"14px"},children:g.jsx(S5,{})})})}),g.jsx(P4,{children:g.jsx(I4,{align:"end",className:nS,sideOffset:4,children:g.jsxs(M4,{className:iS,onClick:l,children:[g.jsx("div",{style:{width:"14px",height:"14px"},children:g.jsx(x5,{})}),"Copy page for LLMs"]})})})]})]})}var cS="vocs_Outline",lS="vocs_Outline_nav",hS="vocs_Outline_heading",uS="vocs_Outline_items",dS="vocs_Outline_item",AS="vocs_Outline_link";function T5({minLevel:t=2,maxLevel:a=3,highlightActive:i=!0,onClickItem:r,showTitle:c=!0}={}){const{outlineFooter:l}=m0(),{showOutline:u,showAiCta:d}=oo(),F=typeof u=="number"?t+u-1:a,p=b.useRef(!0),{pathname:f,hash:m}=i0(),[C,y]=b.useState([]);b.useEffect(()=>{if(typeof window>"u")return;const S=Array.from(document.querySelectorAll(`.${gg}`));y(S)},[f]);const w=b.useMemo(()=>C?C.map(S=>{const E=S.querySelector(`.${fg}`);if(!E)return null;const T=E.getBoundingClientRect(),P=E.id,x=Number(S.tagName[1]),L=S.textContent,z=window.scrollY+T.top;return x<t||x>F?null:{id:P,level:x,slugTargetElement:E,text:L,topOffset:z}}).filter(Boolean):[],[C,F,t]),[v,D]=b.useState(m.replace("#",""));if(b.useEffect(()=>{if(typeof window>"u")return;const S=new IntersectionObserver(([E])=>{var P;if(!p.current)return;const T=E.target.id;if(E.isIntersecting)D(T);else{if(!(E.target.getBoundingClientRect().top>0))return;const z=w.findIndex(n2=>n2.id===v),U=(P=w[z-1])==null?void 0:P.id;D(U)}},{rootMargin:"0px 0px -95% 0px"});for(const E of w)S.observe(E.slugTargetElement);return()=>S.disconnect()},[v,w]),b.useEffect(()=>{if(typeof window>"u")return;const S=new IntersectionObserver(([E])=>{var P;if(!p.current)return;const T=(P=w[w.length-1])==null?void 0:P.id;E.isIntersecting?D(T):v===T&&D(w[w.length-2].id)});return S.observe(document.querySelector("[data-bottom-observer]")),()=>S.disconnect()},[v,w]),b.useEffect(()=>{if(typeof window>"u")return;const S=GE(()=>{var E,T,P;if(p.current){if(window.scrollY===0){D((E=w[0])==null?void 0:E.id);return}if(window.scrollY+document.documentElement.clientHeight>=document.documentElement.scrollHeight){D((T=w[w.length-1])==null?void 0:T.id);return}for(let x=0;x<w.length;x++){const L=w[x];if(window.scrollY<L.topOffset){D((P=w[x-1])==null?void 0:P.id);break}}}},100);return window.addEventListener("scroll",S),()=>window.removeEventListener("scroll",S)},[w]),w.length===0)return null;const B=w.filter(S=>S.level===t);return g.jsxs("aside",{className:cS,children:[d&&g.jsx(sS,{}),g.jsxs("nav",{className:lS,children:[c&&g.jsx("h2",{className:hS,children:"On this page"}),g.jsx(R5,{activeId:i?v:null,items:w,onClickItem:()=>{r==null||r(),p.current=!1,setTimeout(()=>{p.current=!0},500)},levelItems:B,setActiveId:D})]}),To(l)]})}function R5({activeId:t,items:a,levelItems:i,onClickItem:r,setActiveId:c}){return g.jsx("ul",{className:uS,children:i.map(({id:l,level:u,text:d})=>{const F=`#${l}`,p=t===l,f=(()=>{var v;const C=a.findIndex(D=>D.id===l)+1,y=(v=a[C])==null?void 0:v.level;if(y<=u)return null;const w=[];for(let D=C;D<a.length;D++){const B=a[D];if(B.level!==y)break;w.push(B)}return w})();return g.jsxs(b.Fragment,{children:[g.jsx("li",{className:dS,children:g.jsx(Ha,{"data-active":p,to:F,onClick:()=>{r==null||r(),c(l)},className:AS,children:d})}),f&&g.jsx(R5,{activeId:t,levelItems:f,items:a,onClickItem:r,setActiveId:c})]},l)})})}var pS="vocs_Popover";Ie.Root=G4;Ie.Trigger=K4;function Ie({children:t,className:a}){return g.jsx(Z4,{children:g.jsx(X4,{className:l2(pS,a),sideOffset:12,children:t})})}var FS="vocs_Sidebar",mS="vocs_Sidebar_backLink",gS="vocs_Sidebar_divider",fS="vocs_Sidebar_navigation",bS="vocs_Sidebar_group",CS="vocs_Sidebar_logo",yS="vocs_Sidebar_logoWrapper",P5="vocs_Sidebar_section",vS="vocs_Sidebar_level",wS="vocs_Sidebar_levelCollapsed",kS="vocs_Sidebar_levelInset",DS="vocs_Sidebar_footer",BS="vocs_Sidebar_footerContent",ES="vocs_Sidebar_footerCurtain",I5="vocs_Sidebar_items",Yn="vocs_Sidebar_item",Gr="vocs_Sidebar_disabledItem",_S="vocs_Sidebar_sectionHeader",SS="vocs_Sidebar_sectionHeaderActive",b3="vocs_Sidebar_sectionTitle",xS="vocs_Sidebar_sectionTitleLink",TS="vocs_Sidebar_sectionCollapse",RS="vocs_Sidebar_sectionCollapseActive";function PS(){const[t,a]=b.useState(()=>{if(!(typeof window>"u")){if(localStorage.getItem("vocs.theme")){const i=localStorage.getItem("vocs.theme");if(i)return i}return window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light"}});return b.useEffect(()=>{t&&localStorage.setItem("vocs.theme",t),t==="dark"?document.documentElement.classList.add("dark"):document.documentElement.classList.remove("dark")},[t]),{setTheme:a,theme:t,toggle(){a(i=>i==="light"?"dark":"light")}}}var IS="vocs_ThemeToggle",C3="vocs_ThemeToggle_themeToggleButton";function MS(){return g.jsxs("svg",{width:"100%",height:"100%",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[g.jsx("title",{children:"Moon"}),g.jsx("path",{d:"M2.89998 0.499976C2.89998 0.279062 2.72089 0.0999756 2.49998 0.0999756C2.27906 0.0999756 2.09998 0.279062 2.09998 0.499976V1.09998H1.49998C1.27906 1.09998 1.09998 1.27906 1.09998 1.49998C1.09998 1.72089 1.27906 1.89998 1.49998 1.89998H2.09998V2.49998C2.09998 2.72089 2.27906 2.89998 2.49998 2.89998C2.72089 2.89998 2.89998 2.72089 2.89998 2.49998V1.89998H3.49998C3.72089 1.89998 3.89998 1.72089 3.89998 1.49998C3.89998 1.27906 3.72089 1.09998 3.49998 1.09998H2.89998V0.499976ZM5.89998 3.49998C5.89998 3.27906 5.72089 3.09998 5.49998 3.09998C5.27906 3.09998 5.09998 3.27906 5.09998 3.49998V4.09998H4.49998C4.27906 4.09998 4.09998 4.27906 4.09998 4.49998C4.09998 4.72089 4.27906 4.89998 4.49998 4.89998H5.09998V5.49998C5.09998 5.72089 5.27906 5.89998 5.49998 5.89998C5.72089 5.89998 5.89998 5.72089 5.89998 5.49998V4.89998H6.49998C6.72089 4.89998 6.89998 4.72089 6.89998 4.49998C6.89998 4.27906 6.72089 4.09998 6.49998 4.09998H5.89998V3.49998ZM1.89998 6.49998C1.89998 6.27906 1.72089 6.09998 1.49998 6.09998C1.27906 6.09998 1.09998 6.27906 1.09998 6.49998V7.09998H0.499976C0.279062 7.09998 0.0999756 7.27906 0.0999756 7.49998C0.0999756 7.72089 0.279062 7.89998 0.499976 7.89998H1.09998V8.49998C1.09998 8.72089 1.27906 8.89997 1.49998 8.89997C1.72089 8.89997 1.89998 8.72089 1.89998 8.49998V7.89998H2.49998C2.72089 7.89998 2.89998 7.72089 2.89998 7.49998C2.89998 7.27906 2.72089 7.09998 2.49998 7.09998H1.89998V6.49998ZM8.54406 0.98184L8.24618 0.941586C8.03275 0.917676 7.90692 1.1655 8.02936 1.34194C8.17013 1.54479 8.29981 1.75592 8.41754 1.97445C8.91878 2.90485 9.20322 3.96932 9.20322 5.10022C9.20322 8.37201 6.82247 11.0878 3.69887 11.6097C3.45736 11.65 3.20988 11.6772 2.96008 11.6906C2.74563 11.702 2.62729 11.9535 2.77721 12.1072C2.84551 12.1773 2.91535 12.2458 2.98667 12.3128L3.05883 12.3795L3.31883 12.6045L3.50684 12.7532L3.62796 12.8433L3.81491 12.9742L3.99079 13.089C4.11175 13.1651 4.23536 13.2375 4.36157 13.3059L4.62496 13.4412L4.88553 13.5607L5.18837 13.6828L5.43169 13.7686C5.56564 13.8128 5.70149 13.8529 5.83857 13.8885C5.94262 13.9155 6.04767 13.9401 6.15405 13.9622C6.27993 13.9883 6.40713 14.0109 6.53544 14.0298L6.85241 14.0685L7.11934 14.0892C7.24637 14.0965 7.37436 14.1002 7.50322 14.1002C11.1483 14.1002 14.1032 11.1453 14.1032 7.50023C14.1032 7.25044 14.0893 7.00389 14.0623 6.76131L14.0255 6.48407C13.991 6.26083 13.9453 6.04129 13.8891 5.82642C13.8213 5.56709 13.7382 5.31398 13.6409 5.06881L13.5279 4.80132L13.4507 4.63542L13.3766 4.48666C13.2178 4.17773 13.0353 3.88295 12.8312 3.60423L12.6782 3.40352L12.4793 3.16432L12.3157 2.98361L12.1961 2.85951L12.0355 2.70246L11.8134 2.50184L11.4925 2.24191L11.2483 2.06498L10.9562 1.87446L10.6346 1.68894L10.3073 1.52378L10.1938 1.47176L9.95488 1.3706L9.67791 1.2669L9.42566 1.1846L9.10075 1.09489L8.83599 1.03486L8.54406 0.98184ZM10.4032 5.30023C10.4032 4.27588 10.2002 3.29829 9.83244 2.40604C11.7623 3.28995 13.1032 5.23862 13.1032 7.50023C13.1032 10.593 10.596 13.1002 7.50322 13.1002C6.63646 13.1002 5.81597 12.9036 5.08355 12.5522C6.5419 12.0941 7.81081 11.2082 8.74322 10.0416C8.87963 10.2284 9.10028 10.3497 9.34928 10.3497C9.76349 10.3497 10.0993 10.0139 10.0993 9.59971C10.0993 9.24256 9.84965 8.94373 9.51535 8.86816C9.57741 8.75165 9.63653 8.63334 9.6926 8.51332C9.88358 8.63163 10.1088 8.69993 10.35 8.69993C11.0403 8.69993 11.6 8.14028 11.6 7.44993C11.6 6.75976 11.0406 6.20024 10.3505 6.19993C10.3853 5.90487 10.4032 5.60464 10.4032 5.30023Z",fill:"currentColor",fillRule:"evenodd",clipRule:"evenodd"})]})}function LS(){return g.jsxs("svg",{width:"100%",height:"100%",viewBox:"0 0 15 15",fill:"none",children:[g.jsx("title",{children:"Sun"}),g.jsx("path",{d:"M7.5 0C7.77614 0 8 0.223858 8 0.5V2.5C8 2.77614 7.77614 3 7.5 3C7.22386 3 7 2.77614 7 2.5V0.5C7 0.223858 7.22386 0 7.5 0ZM2.1967 2.1967C2.39196 2.00144 2.70854 2.00144 2.90381 2.1967L4.31802 3.61091C4.51328 3.80617 4.51328 4.12276 4.31802 4.31802C4.12276 4.51328 3.80617 4.51328 3.61091 4.31802L2.1967 2.90381C2.00144 2.70854 2.00144 2.39196 2.1967 2.1967ZM0.5 7C0.223858 7 0 7.22386 0 7.5C0 7.77614 0.223858 8 0.5 8H2.5C2.77614 8 3 7.77614 3 7.5C3 7.22386 2.77614 7 2.5 7H0.5ZM2.1967 12.8033C2.00144 12.608 2.00144 12.2915 2.1967 12.0962L3.61091 10.682C3.80617 10.4867 4.12276 10.4867 4.31802 10.682C4.51328 10.8772 4.51328 11.1938 4.31802 11.3891L2.90381 12.8033C2.70854 12.9986 2.39196 12.9986 2.1967 12.8033ZM12.5 7C12.2239 7 12 7.22386 12 7.5C12 7.77614 12.2239 8 12.5 8H14.5C14.7761 8 15 7.77614 15 7.5C15 7.22386 14.7761 7 14.5 7H12.5ZM10.682 4.31802C10.4867 4.12276 10.4867 3.80617 10.682 3.61091L12.0962 2.1967C12.2915 2.00144 12.608 2.00144 12.8033 2.1967C12.9986 2.39196 12.9986 2.70854 12.8033 2.90381L11.3891 4.31802C11.1938 4.51328 10.8772 4.51328 10.682 4.31802ZM8 12.5C8 12.2239 7.77614 12 7.5 12C7.22386 12 7 12.2239 7 12.5V14.5C7 14.7761 7.22386 15 7.5 15C7.77614 15 8 14.7761 8 14.5V12.5ZM10.682 10.682C10.8772 10.4867 11.1938 10.4867 11.3891 10.682L12.8033 12.0962C12.9986 12.2915 12.9986 12.608 12.8033 12.8033C12.608 12.9986 12.2915 12.9986 12.0962 12.8033L10.682 11.3891C10.4867 11.1938 10.4867 10.8772 10.682 10.682ZM5.5 7.5C5.5 6.39543 6.39543 5.5 7.5 5.5C8.60457 5.5 9.5 6.39543 9.5 7.5C9.5 8.60457 8.60457 9.5 7.5 9.5C6.39543 9.5 5.5 8.60457 5.5 7.5ZM7.5 4.5C5.84315 4.5 4.5 5.84315 4.5 7.5C4.5 9.15685 5.84315 10.5 7.5 10.5C9.15685 10.5 10.5 9.15685 10.5 7.5C10.5 5.84315 9.15685 4.5 7.5 4.5Z",fill:"currentColor",fillRule:"evenodd",clipRule:"evenodd"})]})}function M5(){const{theme:t,setTheme:a}=PS();return!ju()||!t?null:g.jsxs("div",{className:IS,children:[g.jsx("button",{"data-active":t==="light",type:"button",className:C3,onClick:()=>a("light"),children:g.jsx(V0,{label:"Light Mode",icon:LS,size:"16px"})}),g.jsx("button",{"data-active":t==="dark",type:"button",className:C3,onClick:()=>a("dark"),children:g.jsx(V0,{label:"Dark Mode",icon:MS,size:"16px"})})]})}function L5(){return g.jsxs("svg",{width:"100%",height:"100%",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[g.jsx("title",{children:"Chevron Right"}),g.jsx("path",{d:"M6.1584 3.13508C6.35985 2.94621 6.67627 2.95642 6.86514 3.15788L10.6151 7.15788C10.7954 7.3502 10.7954 7.64949 10.6151 7.84182L6.86514 11.8418C6.67627 12.0433 6.35985 12.0535 6.1584 11.8646C5.95694 11.6757 5.94673 11.3593 6.1356 11.1579L9.565 7.49985L6.1356 3.84182C5.94673 3.64036 5.95694 3.32394 6.1584 3.13508Z",fill:"currentColor",fillRule:"evenodd",clipRule:"evenodd"})]})}function O5(t){var f;const{className:a,onClickItem:i}=t,{theme:r}=m0(),{previousPath:c}=to(),l=b.useRef(null),u=ws(),[d,F]=b.useState("/");if(b.useEffect(()=>{typeof window>"u"||c&&F(c)},[u.key,u.backLink]),!u)return null;const p=OS(u.items);return g.jsxs("aside",{ref:l,className:l2(FS,a),children:[g.jsxs("div",{children:[g.jsxs("div",{className:yS,children:[g.jsx("div",{className:CS,children:g.jsx(Ra,{to:"/",style:{alignItems:"center",display:"flex",height:"100%"},children:g.jsx(Iu,{})})}),g.jsx("div",{className:gS})]}),g.jsx("nav",{className:fS,children:g.jsxs("div",{className:bS,children:[u.backLink&&g.jsx("section",{className:P5,children:g.jsx("div",{className:I5,children:g.jsxs(Ra,{className:l2(Yn,mS),to:d,children:["←"," ",typeof history<"u"&&((f=history.state)!=null&&f.key)&&d!=="/"?"Back":"Home"]})})}),p.map((m,C)=>g.jsx(H5,{depth:0,item:m,onClick:i,sidebarRef:l},`${m.text}${C}`))]})})]}),g.jsxs("div",{className:DS,children:[g.jsx("div",{className:ES}),g.jsxs("div",{className:BS,children:[g.jsx(Vu,{}),r!=null&&r.colorScheme?null:g.jsx(M5,{})]})]})]},u.key)}function OS(t){const a=[];let i=0;for(const r of t){if(r.items){i=a.push(r);continue}a[i]?a[i].items.push(r):a.push({text:"",items:[r]})}return a}function N5(t,a){return t.find(i=>xo(a,i.link??"")||i.link===a?!0:i.items?N5(i.items,a):!1)}function H5(t){const{depth:a,item:i,onClick:r,sidebarRef:c}=t,l=b.useRef(null),{pathname:u}=i0(),d=vv(i.link||""),F=b.useMemo(()=>i.items?!!N5(i.items,u):!1,[i.items,u]),[p,f]=b.useState(()=>i.link&&d||!i.items||F?!1:!!i.collapsed),m=i.collapsed!==void 0&&i.items!==void 0,C=b.useCallback(v=>{"key"in v&&v.key!=="Enter"||f(D=>!D)},[]),y=b.useCallback(v=>{"key"in v&&v.key!=="Enter"||f(D=>!D)},[]),w=b.useRef(!0);return b.useEffect(()=>{!w.current||(w.current=!1,!xo(u,i.link??""))||requestAnimationFrame(()=>{var S,E,T;const D=((S=l.current)==null?void 0:S.offsetTop)??0,B=((E=c==null?void 0:c.current)==null?void 0:E.clientHeight)??0;D<B||(T=c==null?void 0:c.current)==null||T.scrollTo({top:D-100})})},[i,u,c]),i.items?g.jsxs("section",{ref:l,className:l2(P5,a===0&&i.text&&vS,a===0&&i.text&&p&&wS),children:[i.text&&g.jsxs("div",{className:_S,...m&&!i.link?{role:"button",tabIndex:0,onClick:C,onKeyDown:C}:{},children:[i.text&&(i.link?g.jsx(ke,{"data-active":!!d,onClick:v=>{r==null||r(v),C(v)},className:l2(a===0?[b3,xS]:Yn,F&&SS,i.disabled&&Gr),href:i.link,variant:"styleless",children:i.text}):g.jsx("div",{className:l2(a===0?b3:Yn,i.disabled&&Gr),children:i.text})),m&&g.jsx("div",{role:"button",tabIndex:0,onClick:y,onKeyDown:y,children:g.jsx(V0,{className:l2(TS,p&&RS),label:"toggle section",icon:L5,size:"16px"})})]}),!p&&g.jsx("div",{className:l2(I5,a!==0&&kS),children:i.items&&i.items.length>0&&a<5&&i.items.map((v,D)=>g.jsx(H5,{depth:a+1,item:v,onClick:r,sidebarRef:c},`${v.text}${D}`))})]}):g.jsx(g.Fragment,{children:i.link?g.jsx(ke,{ref:l,"data-active":!!d,onClick:r,className:l2(Yn,i.disabled&&Gr),href:i.link,variant:"styleless",children:i.text}):g.jsx("div",{className:l2(Yn,i.disabled&&Gr),children:i.text})})}function NS(){return g.jsxs("svg",{width:"100%",height:"100%",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[g.jsx("title",{children:"Chevron Up"}),g.jsx("path",{d:"M3.13523 8.84197C3.3241 9.04343 3.64052 9.05363 3.84197 8.86477L7.5 5.43536L11.158 8.86477C11.3595 9.05363 11.6759 9.04343 11.8648 8.84197C12.0536 8.64051 12.0434 8.32409 11.842 8.13523L7.84197 4.38523C7.64964 4.20492 7.35036 4.20492 7.15803 4.38523L3.15803 8.13523C2.95657 8.32409 2.94637 8.64051 3.13523 8.84197Z",fill:"currentColor",fillRule:"evenodd",clipRule:"evenodd"})]})}function z5(){return g.jsxs("svg",{width:"100%",height:"100%",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 79 48",fill:"none",children:[g.jsx("title",{children:"Menu"}),g.jsx("path",{fill:"currentColor",d:"M19.528 47.232h40.87c1.952 0 3.515-1.562 3.515-3.564a3.5 3.5 0 0 0-3.516-3.516H19.528a3.501 3.501 0 0 0-3.515 3.516c0 2.002 1.562 3.564 3.515 3.564ZM12.057 27.262h55.81a3.501 3.501 0 0 0 3.516-3.516 3.501 3.501 0 0 0-3.515-3.515h-55.81a3.501 3.501 0 0 0-3.516 3.515 3.501 3.501 0 0 0 3.515 3.516ZM4.391 7.34H75.29c2.002 0 3.515-1.563 3.515-3.516 0-2.002-1.513-3.564-3.515-3.564H4.39C2.438.26.876 1.822.876 3.824A3.501 3.501 0 0 0 4.39 7.34Z"})]})}iu.Curtain=VS;function iu(){const t=m0(),{showLogo:a}=oo();return g.jsxs("div",{className:xE,children:[g.jsxs("div",{className:s3,children:[a&&g.jsx("div",{className:yh,children:g.jsx("div",{className:IE,children:g.jsx(Ra,{to:"/",style:{alignItems:"center",display:"flex",height:"100%"},children:g.jsx(Iu,{})})})}),t.topNav&&g.jsxs("div",{className:yh,children:[g.jsx(HS,{items:t.topNav}),g.jsx(jS,{items:t.topNav})]})]}),g.jsx("div",{className:s3,children:g.jsx("div",{className:yh,style:{marginRight:"-8px"},children:g.jsx(SE,{})})})]})}function HS({items:t}){const{pathname:a}=i0(),i=si({pathname:a,items:t});return g.jsx(Ef,{className:Xf,children:g.jsxs(_f,{children:[t.map((r,c)=>r.element?To(r.element):r.link?g.jsx(Ss,{active:i==null?void 0:i.includes(r.id),href:r.link,children:r.text},c):g.jsxs(Sf,{className:PE,children:[g.jsx(xf,{active:i==null?void 0:i.includes(r.id),children:r.text}),g.jsx(Tf,{className:TE,children:g.jsx(zS,{items:r.items||[]})})]},c)),g.jsx(Bu,{})]})})}function zS({items:t}){const{pathname:a}=i0(),i=si({pathname:a,items:t});return g.jsx("ul",{children:t==null?void 0:t.map((r,c)=>g.jsx(Ss,{active:i.includes(r.id),href:r.link,children:r.text},c))})}function jS({items:t}){const[a,i]=b.useState(!1),{showSidebar:r}=oo(),{pathname:c}=i0(),l=si({pathname:c,items:t}),u=t.filter(f=>f.id===l[0])[0],{basePath:d,theme:F}=m0(),p=d;return g.jsx("div",{className:l2(Xf,LE),children:g.jsxs(Ie.Root,{modal:!0,open:a,onOpenChange:i,children:[g.jsx(Ie.Trigger,{className:l2(Zf,qr),children:r||u?g.jsxs(g.Fragment,{children:[(u==null?void 0:u.text)??"Menu",g.jsx(V0,{label:"Menu",icon:S5,size:"16px"})]}):g.jsx(V0,{label:"Menu",icon:z5,size:"16px"})}),g.jsxs(Ie,{className:qE,children:[g.jsxs(kE,{type:"single",collapsible:!0,style:{display:"flex",flexDirection:"column"},children:[t.map((f,m)=>{var C;return f.element?To(f.element):f.link?g.jsx(ke,{"data-active":l.includes(f.id),className:qr,href:f.link,onClick:()=>i(!1),variant:"styleless",children:f.text},m):g.jsxs(DE,{value:m.toString(),children:[g.jsx(BE,{className:l2(qr,zE),"data-active":l.includes(f.id),style:Me({[NE]:`url(${p}/.vocs/icons/chevron-down.svg)`,[HE]:`url(${p}/.vocs/icons/chevron-up.svg)`}),children:f.text}),g.jsx(EE,{className:OE,children:(C=f.items)==null?void 0:C.map((y,w)=>g.jsx(ke,{className:qr,href:y.link,onClick:()=>i(!1),variant:"styleless",children:y.text},w))})]},m)}),g.jsx(Bu,{})]}),g.jsxs("div",{className:WE,children:[g.jsx(Vu,{}),F!=null&&F.colorScheme?null:g.jsx(M5,{})]})]})]})})}function VS({enableScrollToTop:t}){const{pathname:a}=i0(),{layout:i,showSidebar:r}=oo(),{frontmatter:c={}}=to(),l=ws(),[u,d]=b.useState(!1),[F,p]=b.useState(!1),f=b.useMemo(()=>{if(!l||i==="minimal")return;const y=j5({sidebarItems:l.items,pathname:a});return y==null?void 0:y.text},[i,a,l]),m=b.useMemo(()=>{var y;if(!(typeof window>"u"))return(y=document.querySelector(".vocs_Content h1"))==null?void 0:y.textContent},[]),C=f||c.title||m;return g.jsxs("div",{className:RE,children:[g.jsx("div",{className:i3,children:g.jsx("div",{className:Ch,children:r?g.jsxs(Ie.Root,{modal:!0,open:F,onOpenChange:p,children:[g.jsxs(Ie.Trigger,{className:Zf,children:[g.jsx(V0,{label:"Menu",icon:z5,size:"13px"}),g.jsx("div",{className:ME,children:C})]}),g.jsx(Ie,{className:UE,children:g.jsx(O5,{onClickItem:()=>p(!1)})})]}):C})}),g.jsxs("div",{className:i3,children:[t&&g.jsxs(g.Fragment,{children:[g.jsx("div",{className:Ch,children:g.jsxs("button",{className:r3,onClick:()=>window.scrollTo({behavior:"smooth",top:0}),type:"button",children:["Top",g.jsx(V0,{label:"Scroll to top",icon:NS,size:"16px"})]})}),g.jsx("div",{className:VE})]}),i==="docs"&&g.jsx("div",{className:Ch,children:g.jsxs(Ie.Root,{modal:!0,open:u,onOpenChange:d,children:[g.jsxs(Ie.Trigger,{className:r3,children:["On this page",g.jsx(V0,{label:"On this page",icon:L5,size:"16px"})]}),g.jsx(Ie,{className:jE,children:g.jsx(T5,{onClickItem:()=>d(!1),showTitle:!1})})]})})]})]})}function j5({sidebarItems:t,pathname:a}){const i=a.replace(/(.+)\/$/,"$1");for(const r of t){if((r==null?void 0:r.link)===i)return r;if(r.items){const c=j5({sidebarItems:r.items,pathname:i});if(c)return c}}}var US="vocs_SkipLink";const V5="vocs-content";function qS(){const{pathname:t}=i0();return g.jsx("a",{className:l2(US,sf),href:`${t}#${V5}`,children:"Skip to content"})}var WS="vocs_DocsLayout",GS="vocs_DocsLayout_content",KS="vocs_DocsLayout_content_withTopNav",ZS="vocs_DocsLayout_content_withSidebar",XS="vocs_DocsLayout_gutterLeft",YS="vocs_DocsLayout_gutterTop",JS="vocs_DocsLayout_gutterTop_offsetLeftGutter",QS="vocs_DocsLayout_gutterTop_sticky",$S="vocs_DocsLayout_gutterTopCurtain",ex="vocs_DocsLayout_gutterTopCurtain_hidden",tx="vocs_DocsLayout_gutterTopCurtain_withSidebar",ox="vocs_DocsLayout_gutterRight",ax="vocs_DocsLayout_gutterRight_withSidebar",nx="vocs_DocsLayout_sidebar";function ru({children:t}){var y,w;const{banner:a,font:i}=m0(),{frontmatter:r={}}=to(),{content:c}=r,{layout:l,showOutline:u,showSidebar:d,showTopNav:F}=oo(),{ref:p,inView:f}=mg({initialInView:!0,rootMargin:"100px 0px 0px 0px"}),[m,C]=rf("banner",!0);return g.jsxs("div",{className:WS,"data-layout":l,style:Me({[Ww]:m?a==null?void 0:a.height:void 0,[Dm.default]:(y=i==null?void 0:i.default)!=null&&y.google?`${i.default.google}, ${km.default}`:void 0,[Dm.mono]:(w=i==null?void 0:i.mono)!=null&&w.google?`${i.mono.google}, ${km.mono}`:void 0}),children:[g.jsx(qS,{}),m&&g.jsx(Ak,{hide:()=>C(!1)}),d&&g.jsx("div",{className:XS,children:g.jsx(O5,{className:nx})}),F&&g.jsxs(g.Fragment,{children:[g.jsxs("div",{ref:p,className:l2(YS,d&&JS,(l==="minimal"||l==="landing")&&QS),children:[g.jsx(Jh,{}),g.jsx(iu,{})]}),g.jsxs("div",{className:l2($S,d&&tx,(l==="minimal"||l==="landing")&&ex),children:[g.jsx(Jh.Curtain,{}),g.jsx(iu.Curtain,{enableScrollToTop:!f})]})]}),u&&g.jsx("div",{className:l2(ox,d&&ax),children:g.jsx(T5,{})}),g.jsxs("div",{id:V5,className:l2(GS,d&&ZS,F&&KS),style:Me({[nh.horizontalPadding]:c==null?void 0:c.horizontalPadding,[nh.width]:c==null?void 0:c.width,[nh.verticalPadding]:c==null?void 0:c.verticalPadding}),children:[g.jsx(yg,{children:t}),g.jsx(iE,{})]}),g.jsx("div",{"data-bottom-observer":!0})]})}const su={},U5=a0.createContext(su);function ix(t){const a=a0.useContext(U5);return a0.useMemo(function(){return typeof t=="function"?t(a):{...a,...t}},[a,t])}function rx(t){let a;return t.disableParentContext?a=typeof t.components=="function"?t.components(su):t.components||su:a=ix(t.components),a0.createElement(U5.Provider,{value:a},t.children)}var Bh="vocs_Anchor",sx="vocs_Autolink";function cx(t){return t.href?g.jsx(Ha,{...t,className:l2(t.className,sx),to:t.href}):null}function lx(t){const{children:a,href:i}=t,{pathname:r}=i0();return a&&typeof a=="object"&&"props"in a&&a.props["data-autolink-icon"]?g.jsx(cx,{className:l2(t.className,Bh),...t}):i!=null&&i.match(/^#/)?g.jsx("a",{className:l2(t.className,Bh),...t,href:`${r}${i}`}):g.jsx(ke,{className:l2(t.className,Bh),...t,hideExternalIcon:!0})}var q5="vocs_Callout",W5="vocs_Callout_content",G5="vocs_Callout_icon",hx="vocs_Callout_note",ux="vocs_Callout_info",dx="vocs_Callout_warning",Ax="vocs_Callout_danger",px="vocs_Callout_tip",Fx="vocs_Callout_success";const mx=Object.freeze(Object.defineProperty({__proto__:null,content:W5,danger:Ax,icon:G5,info:ux,note:hx,root:q5,success:Fx,tip:px,warning:dx},Symbol.toStringTag,{value:"Module"}));function y3(){return g.jsxs("svg",{width:"100%",height:"100%",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[g.jsx("title",{children:"Exclamation"}),g.jsx("path",{d:"M8.4449 0.608765C8.0183 -0.107015 6.9817 -0.107015 6.55509 0.608766L0.161178 11.3368C-0.275824 12.07 0.252503 13 1.10608 13H13.8939C14.7475 13 15.2758 12.07 14.8388 11.3368L8.4449 0.608765ZM7.4141 1.12073C7.45288 1.05566 7.54712 1.05566 7.5859 1.12073L13.9798 11.8488C14.0196 11.9154 13.9715 12 13.8939 12H1.10608C1.02849 12 0.980454 11.9154 1.02018 11.8488L7.4141 1.12073ZM6.8269 4.48611C6.81221 4.10423 7.11783 3.78663 7.5 3.78663C7.88217 3.78663 8.18778 4.10423 8.1731 4.48612L8.01921 8.48701C8.00848 8.766 7.7792 8.98664 7.5 8.98664C7.2208 8.98664 6.99151 8.766 6.98078 8.48701L6.8269 4.48611ZM8.24989 10.476C8.24989 10.8902 7.9141 11.226 7.49989 11.226C7.08567 11.226 6.74989 10.8902 6.74989 10.476C6.74989 10.0618 7.08567 9.72599 7.49989 9.72599C7.9141 9.72599 8.24989 10.0618 8.24989 10.476Z",fill:"currentColor",fillRule:"evenodd",clipRule:"evenodd"})]})}function v3(){return g.jsxs("svg",{width:"100%",height:"100%",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[g.jsx("title",{children:"Info"}),g.jsx("path",{d:"M7.49991 0.876892C3.84222 0.876892 0.877075 3.84204 0.877075 7.49972C0.877075 11.1574 3.84222 14.1226 7.49991 14.1226C11.1576 14.1226 14.1227 11.1574 14.1227 7.49972C14.1227 3.84204 11.1576 0.876892 7.49991 0.876892ZM1.82707 7.49972C1.82707 4.36671 4.36689 1.82689 7.49991 1.82689C10.6329 1.82689 13.1727 4.36671 13.1727 7.49972C13.1727 10.6327 10.6329 13.1726 7.49991 13.1726C4.36689 13.1726 1.82707 10.6327 1.82707 7.49972ZM8.24992 4.49999C8.24992 4.9142 7.91413 5.24999 7.49992 5.24999C7.08571 5.24999 6.74992 4.9142 6.74992 4.49999C6.74992 4.08577 7.08571 3.74999 7.49992 3.74999C7.91413 3.74999 8.24992 4.08577 8.24992 4.49999ZM6.00003 5.99999H6.50003H7.50003C7.77618 5.99999 8.00003 6.22384 8.00003 6.49999V9.99999H8.50003H9.00003V11H8.50003H7.50003H6.50003H6.00003V9.99999H6.50003H7.00003V6.99999H6.50003H6.00003V5.99999Z",fill:"currentColor",fillRule:"evenodd",clipRule:"evenodd"})]})}function gx(){return g.jsxs("svg",{width:"100%",height:"100%",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[g.jsx("title",{children:"Lightning Bolt"}),g.jsx("path",{d:"M8.69667 0.0403541C8.90859 0.131038 9.03106 0.354857 8.99316 0.582235L8.0902 6.00001H12.5C12.6893 6.00001 12.8625 6.10701 12.9472 6.27641C13.0319 6.4458 13.0136 6.6485 12.8999 6.80001L6.89997 14.8C6.76167 14.9844 6.51521 15.0503 6.30328 14.9597C6.09135 14.869 5.96888 14.6452 6.00678 14.4178L6.90974 9H2.49999C2.31061 9 2.13748 8.893 2.05278 8.72361C1.96809 8.55422 1.98636 8.35151 2.09999 8.2L8.09997 0.200038C8.23828 0.0156255 8.48474 -0.0503301 8.69667 0.0403541ZM3.49999 8.00001H7.49997C7.64695 8.00001 7.78648 8.06467 7.88148 8.17682C7.97648 8.28896 8.01733 8.43723 7.99317 8.5822L7.33027 12.5596L11.5 7.00001H7.49997C7.353 7.00001 7.21347 6.93534 7.11846 6.8232C7.02346 6.71105 6.98261 6.56279 7.00678 6.41781L7.66968 2.44042L3.49999 8.00001Z",fill:"currentColor",fillRule:"evenodd",clipRule:"evenodd"})]})}function fx({className:t,children:a,type:i}){return g.jsxs("aside",{className:l2(t,q5,mx[i]),children:[g.jsxs("div",{className:G5,children:[i==="note"&&g.jsx(v3,{}),i==="info"&&g.jsx(v3,{}),i==="warning"&&g.jsx(y3,{}),i==="danger"&&g.jsx(y3,{}),i==="tip"&&g.jsx(gx,{}),i==="success"&&g.jsx(_5,{})]}),g.jsx("div",{className:W5,children:a})]})}var bx="vocs_Aside";function Cx(t){const a=l2(t.className,bx);return"data-callout"in t?g.jsx(fx,{className:a,type:t["data-callout"],children:t.children}):g.jsx("aside",{...t,className:a})}var yx="vocs_Blockquote";function vx(t){return g.jsx("blockquote",{...t,className:l2(t.className,yx)})}var wx="vocs_Code";function kx(t){const a=Dx(t.children);return g.jsx("code",{...t,className:l2(t.className,wx),children:a})}function Dx(t){return Array.isArray(t)?t.map((a,i)=>{var r,c,l;return a.props&&"data-line"in a.props&&typeof a.props.children=="string"&&a.props.children.trim()===""&&((l=(c=(r=t[i+1])==null?void 0:r.props)==null?void 0:c.className)!=null&&l.includes("twoslash-tag-line"))?null:a}).filter(Boolean):t}var Bx="vocs_Details";function Ex(t){return g.jsx("details",{...t,className:l2(t.className,Bx)})}var _x="vocs_Authors",Sx="vocs_Authors_authors",xx="vocs_Authors_link",w3="vocs_Authors_separator";function K5(t){const{frontmatter:a}=to(),{authors:i=a==null?void 0:a.authors,date:r=a==null?void 0:a.date}=t,c=b.useMemo(()=>{if(i)return Array.isArray(i)?i:i.split(",").map(u=>u.trim())},[i]),l=b.useMemo(()=>r?new Date(r).toLocaleDateString("en-US",{year:"numeric",month:"long",day:"numeric"}):null,[r]);return g.jsxs("div",{className:_x,children:[l,c&&(l?" by ":"By "),g.jsx("span",{className:Sx,children:c==null?void 0:c.map((u,d)=>{const{text:F,url:p}=Tx(u);return g.jsxs(b.Fragment,{children:[p?g.jsx("a",{className:xx,href:p,target:"_blank",rel:"noopener noreferrer",children:F}):F,d<c.length-2&&g.jsx("span",{className:w3,children:", "}),d<c.length-1&&g.jsx("span",{className:w3,children:" & "})]},d)})})]})}function Tx(t){const a=t.match(/\[(.+)\]\((.+)\)/);return a?{text:a[1],url:a[2]}:{text:t,url:void 0}}const k3=[];var Rx="vocs_BlogPosts",Px="vocs_BlogPosts_description",Ix="vocs_BlogPosts_divider",Mx="vocs_BlogPosts_post",Lx="vocs_BlogPosts_readMore",Ox="vocs_BlogPosts_title";function Nx(){return g.jsx("div",{className:Rx,children:k3.map((t,a)=>g.jsxs(b.Fragment,{children:[g.jsx("div",{className:Mx,children:g.jsxs(Ra,{to:t.path,children:[g.jsx("h2",{className:Ox,children:t.title}),g.jsx(K5,{authors:t.authors,date:t.date}),g.jsxs("p",{className:Px,children:[t.description," ",g.jsx("span",{className:Lx,children:"[→]"})]})]})}),a<k3.length-1&&g.jsx("hr",{className:Ix})]},a))})}var Hx="var(--vocs_Sponsors_columns)",zx="var(--vocs_Sponsors_height)",jx="vocs_Sponsors",Vx="vocs_Sponsors_title",Ux="vocs_Sponsors_row",qx="vocs_Sponsors_column",Wx="vocs_Sponsors_sponsor",Gx="vocs_Sponsors_image";function Kx(){const{sponsors:t}=m0();return g.jsx("div",{className:jx,children:t==null?void 0:t.map((a,i)=>g.jsxs(b.Fragment,{children:[g.jsx("div",{className:Vx,children:a.name}),a.items.map((r,c)=>{var l;return g.jsx("div",{className:Ux,style:Me({[Hx]:r.length.toString(),[zx]:`${((l=a.height)==null?void 0:l.toString())??"40"}px`}),children:r.map((u,d)=>g.jsx(ke,{className:l2(qx,u?Wx:void 0),href:u==null?void 0:u.link,hideExternalIcon:!0,variant:"styleless",children:(u==null?void 0:u.image)&&g.jsx("img",{className:Gx,src:u==null?void 0:u.image,alt:u==null?void 0:u.name})},d))},c)})]},i))})}var Zx="var(--vocs_AutolinkIcon_iconUrl)",Xx="vocs_AutolinkIcon";function Yx(t){const{basePath:a}=m0(),i=a;return g.jsx("div",{...t,className:l2(t.className,Xx),style:Me({[Zx]:`url(${i}/.vocs/icons/link.svg)`})})}var Jx="vocs_Tabs",Qx="vocs_Tabs_list",$x="vocs_Tabs_trigger",e9="vocs_Tabs_content";function t9(t){return g.jsx(Q4,{...t,className:l2(t.className,Jx)})}function o9(t){return g.jsx($4,{...t,className:l2(t.className,Qx)})}function a9(t){return g.jsx(eS,{...t,className:l2(t.className,$x)})}function n9(t){return g.jsx(tS,{...t,className:l2(t.className,e9)})}var i9="vocs_CodeGroup";function r9({children:t}){if(!Array.isArray(t))return null;const a=t.map(i=>{const r=i.props["data-title"]?i:i.props.children,{props:c}=r,l=c["data-title"],u=c.children;return{title:l,content:u}});return g.jsxs(t9,{className:i9,defaultValue:a[0].title,children:[g.jsx(o9,{"aria-label":"Code group",children:a.map(({title:i},r)=>g.jsx(a9,{value:i||r.toString(),children:i},i||r.toString()))}),a.map(({title:i,content:r},c)=>{var u,d,F,p;const l=(p=(F=(d=(u=r.props)==null?void 0:u.children)==null?void 0:d.props)==null?void 0:F.className)==null?void 0:p.includes("shiki");return g.jsx(n9,{"data-shiki":l,value:i||c.toString(),children:r},i||c.toString())})]})}var s9="vocs_Div",c9="vocs_Step",Z5="vocs_Step_title",l9="vocs_Step_content",h9="vocs_H2";function X5(t){return g.jsx(za,{...t,className:l2(t.className,h9),level:2})}var u9="vocs_H3";function Y5(t){return g.jsx(za,{...t,className:l2(t.className,u9),level:3})}var d9="vocs_H4";function J5(t){return g.jsx(za,{...t,className:l2(t.className,d9),level:4})}var A9="vocs_H5";function Q5(t){return g.jsx(za,{...t,className:l2(t.className,A9),level:5})}var p9="vocs_H6";function $5(t){return g.jsx(za,{...t,className:l2(t.className,p9),level:6})}function F9({children:t,className:a,title:i,titleLevel:r=2}){const c=(()=>{if(r===2)return X5;if(r===3)return Y5;if(r===4)return J5;if(r===5)return Q5;if(r===6)return $5;throw new Error("Invalid.")})();return g.jsxs("div",{className:l2(a,c9),children:[typeof i=="string"?g.jsx(c,{className:Z5,children:i}):i,g.jsx("div",{className:l9,children:t})]})}var m9="vocs_Steps";function g9({children:t,className:a}){return g.jsx("div",{className:l2(a,m9),children:t})}function f9({children:t}){return Array.isArray(t)?g.jsx(g9,{children:t.map(({props:a},i)=>{const[r,...c]=Array.isArray(a.children)?a.children:[a.children];return g.jsx(F9,{title:b.cloneElement(r,{className:Z5}),children:c},i)})}):null}var b9="vocs_Subtitle";function C9({children:t}){return g.jsx("div",{className:b9,children:t})}function y9(t){const{layout:a}=oo(),i=l2(t.className,s9);return t.className==="code-group"?g.jsx(r9,{...t,className:i}):"data-authors"in t?g.jsx(K5,{}):"data-blog-posts"in t?g.jsx(Nx,{}):"data-sponsors"in t?g.jsx(Kx,{}):"data-autolink-icon"in t&&a==="docs"?g.jsx(Yx,{...t,className:i}):"data-vocs-steps"in t?g.jsx(f9,{...t,className:i}):t.role==="doc-subtitle"?g.jsx(C9,{...t}):g.jsx("div",{...t,className:i})}var v9="vocs_Figcaption";function w9(t){const a=l2(t.className,v9);return g.jsx("figcaption",{...t,className:a})}var k9="vocs_Figure";function D9(t){const a=l2(t.className,k9);return g.jsx("figure",{...t,className:a})}var B9="vocs_Header";function E9(t){return g.jsx("header",{...t,className:l2(t.className,B9)})}var _9="vocs_HorizontalRule";function S9(t){return g.jsx("hr",{...t,className:l2(t.className,_9)})}var x9="vocs_List",T9="vocs_List_ordered",R9="vocs_List_unordered";function D3({ordered:t,...a}){const i=t?"ol":"ul";return g.jsx(i,{...a,className:l2(a.className,x9,t?T9:R9)})}var P9="vocs_ListItem";function I9(t){return g.jsx("li",{...t,className:l2(t.className,P9)})}function M9(){const t=b.useRef(null),[a,i]=b.useState(!1);b.useEffect(()=>{if(!a)return;const c=setTimeout(()=>i(!1),1e3);return()=>clearTimeout(c)},[a]);function r(){var u;i(!0);const c=(u=t.current)==null?void 0:u.cloneNode(!0),l=c==null?void 0:c.querySelectorAll("button,.line.diff.remove,.twoslash-popup-info-hover,.twoslash-popup-info,.twoslash-meta-line,.twoslash-tag-line");for(const d of l??[])d.remove();navigator.clipboard.writeText(c==null?void 0:c.textContent)}return{copied:a,copy:r,ref:t}}var L9="vocs_CopyButton",O9="vocs_CopyButton_copied";function N9(){return g.jsxs("svg",{width:"100%",height:"100%",xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 68 67",children:[g.jsx("title",{children:"Checkmark"}),g.jsx("path",{fill:"currentColor",d:"M26.175 66.121c1.904 0 3.418-.83 4.492-2.49L66.263 7.332c.83-1.27 1.123-2.295 1.123-3.32 0-2.393-1.563-4.004-4.004-4.004-1.758 0-2.734.586-3.809 2.295L25.98 56.209 8.304 32.381c-1.123-1.514-2.198-2.149-3.809-2.149-2.441 0-4.2 1.71-4.2 4.15 0 1.026.44 2.15 1.27 3.224l19.971 25.927c1.367 1.758 2.734 2.588 4.639 2.588Z"})]})}function H9({copy:t,copied:a}){return g.jsx("button",{className:L9,"data-copied":a,onClick:t,type:"button",children:a?g.jsx(V0,{label:"Copied",size:"14px",className:O9,icon:N9}):g.jsx(V0,{label:"Copy",size:"18px",icon:x5})})}var z9="vocs_CodeBlock";function j9(t){return g.jsx("div",{...t,className:l2(t.className,z9)})}function V9(){return g.jsxs("svg",{width:"100%",height:"100%",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[g.jsx("title",{children:"File"}),g.jsx("path",{d:"M4.2 1H4.17741H4.1774C3.86936 0.999988 3.60368 0.999978 3.38609 1.02067C3.15576 1.04257 2.92825 1.09113 2.71625 1.22104C2.51442 1.34472 2.34473 1.51442 2.22104 1.71625C2.09113 1.92825 2.04257 2.15576 2.02067 2.38609C1.99998 2.60367 1.99999 2.86935 2 3.17738V3.1774V3.2V11.8V11.8226V11.8226C1.99999 12.1307 1.99998 12.3963 2.02067 12.6139C2.04257 12.8442 2.09113 13.0717 2.22104 13.2837C2.34473 13.4856 2.51442 13.6553 2.71625 13.779C2.92825 13.9089 3.15576 13.9574 3.38609 13.9793C3.60368 14 3.86937 14 4.17741 14H4.2H10.8H10.8226C11.1306 14 11.3963 14 11.6139 13.9793C11.8442 13.9574 12.0717 13.9089 12.2837 13.779C12.4856 13.6553 12.6553 13.4856 12.779 13.2837C12.9089 13.0717 12.9574 12.8442 12.9793 12.6139C13 12.3963 13 12.1306 13 11.8226V11.8V3.2V3.17741C13 2.86936 13 2.60368 12.9793 2.38609C12.9574 2.15576 12.9089 1.92825 12.779 1.71625C12.6553 1.51442 12.4856 1.34472 12.2837 1.22104C12.0717 1.09113 11.8442 1.04257 11.6139 1.02067C11.3963 0.999978 11.1306 0.999988 10.8226 1H10.8H4.2ZM3.23875 2.07368C3.26722 2.05623 3.32362 2.03112 3.48075 2.01618C3.64532 2.00053 3.86298 2 4.2 2H10.8C11.137 2 11.3547 2.00053 11.5193 2.01618C11.6764 2.03112 11.7328 2.05623 11.7613 2.07368C11.8285 2.11491 11.8851 2.17147 11.9263 2.23875C11.9438 2.26722 11.9689 2.32362 11.9838 2.48075C11.9995 2.64532 12 2.86298 12 3.2V11.8C12 12.137 11.9995 12.3547 11.9838 12.5193C11.9689 12.6764 11.9438 12.7328 11.9263 12.7613C11.8851 12.8285 11.8285 12.8851 11.7613 12.9263C11.7328 12.9438 11.6764 12.9689 11.5193 12.9838C11.3547 12.9995 11.137 13 10.8 13H4.2C3.86298 13 3.64532 12.9995 3.48075 12.9838C3.32362 12.9689 3.26722 12.9438 3.23875 12.9263C3.17147 12.8851 3.11491 12.8285 3.07368 12.7613C3.05624 12.7328 3.03112 12.6764 3.01618 12.5193C3.00053 12.3547 3 12.137 3 11.8V3.2C3 2.86298 3.00053 2.64532 3.01618 2.48075C3.03112 2.32362 3.05624 2.26722 3.07368 2.23875C3.11491 2.17147 3.17147 2.11491 3.23875 2.07368ZM5 10C4.72386 10 4.5 10.2239 4.5 10.5C4.5 10.7761 4.72386 11 5 11H8C8.27614 11 8.5 10.7761 8.5 10.5C8.5 10.2239 8.27614 10 8 10H5ZM4.5 7.5C4.5 7.22386 4.72386 7 5 7H10C10.2761 7 10.5 7.22386 10.5 7.5C10.5 7.77614 10.2761 8 10 8H5C4.72386 8 4.5 7.77614 4.5 7.5ZM5 4C4.72386 4 4.5 4.22386 4.5 4.5C4.5 4.77614 4.72386 5 5 5H10C10.2761 5 10.5 4.77614 10.5 4.5C10.5 4.22386 10.2761 4 10 4H5Z",fill:"currentColor",fillRule:"evenodd",clipRule:"evenodd"})]})}function U9(){return g.jsxs("svg",{width:"100%",height:"100%",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 79 95",fill:"none",children:[g.jsx("title",{children:"Terminal"}),g.jsx("path",{fill:"currentColor",d:"M38.281 34.033c0-1.074-.39-2.05-1.22-2.88L6.885 1.171C6.152.39 5.175 0 4.053 0 1.758 0 0 1.709 0 4.004c0 1.074.488 2.1 1.172 2.88l27.295 27.15L1.172 61.181C.488 61.962 0 62.939 0 64.062c0 2.295 1.758 4.004 4.053 4.004 1.123 0 2.1-.39 2.832-1.172l30.176-29.98c.83-.83 1.22-1.807 1.22-2.88Z"}),g.jsx("path",{stroke:"currentColor",strokeLinecap:"round",strokeWidth:"8px",d:"M36 75h55"})]})}var q9="vocs_CodeTitle";function W9({children:t,className:a,language:i,...r}){return g.jsxs("div",{...r,className:l2(a,q9),children:[i==="bash"?g.jsx(V0,{label:"Terminal",size:"14px",icon:U9,style:{marginTop:3}}):t.match(/\.(.*)$/)?g.jsx(V0,{label:"File",size:"14px",icon:V9,style:{marginTop:1}}):null,t]})}var G9="vocs_Pre",K9="vocs_Pre_wrapper";function Z9({children:t,className:a,...i}){const{copied:r,copy:c,ref:l}=M9();function u(p){return!p||typeof p!="object"?p:"props"in p?{...p,props:{...p.props,children:Array.isArray(p.props.children)?p.props.children.map(u):u(p.props.children)}}:p}const d=b.useMemo(()=>u(t),[t]);return(p=>a!=null&&a.includes("shiki")?g.jsxs(j9,{children:[i["data-title"]&&g.jsx(W9,{language:i["data-lang"],children:i["data-title"]}),p]}):p)(g.jsx("div",{className:l2(K9),children:g.jsxs("pre",{ref:l,...i,className:l2(a,G9),children:[g.jsx(H9,{copied:r,copy:c}),d]})}))}var X9="vocs_Footnotes";function Y9(t){return g.jsx("section",{...t,className:l2(t.className,X9)})}var B3="vocs_Section";function J9(t){return"data-footnotes"in t?g.jsx(Y9,{...t,className:l2(t.className,B3)}):g.jsx("section",{...t,className:l2(t.className,B3)})}var E3="vocs_Span";function Q9(t,a){if(!t||!a)return!1;const i=a.getRootNode==null?void 0:a.getRootNode();if(t.contains(a))return!0;if(i&&ps(i)){let r=a;for(;r;){if(t===r)return!0;r=r.parentNode||r.host}}return!1}function Kr(t){return(t==null?void 0:t.ownerDocument)||document}function cu(t,a){const i=["mouse","pen"];return i.push("",void 0),i.includes(t)}var $9=typeof document<"u",eT=function(){},Io=$9?b.useLayoutEffect:eT;const tT={...bs};function Zr(t){const a=b.useRef(t);return Io(()=>{a.current=t}),a}const oT=tT.useInsertionEffect,aT=oT||(t=>t());function Jn(t){const a=b.useRef(()=>{});return aT(()=>{a.current=t}),b.useCallback(function(){for(var i=arguments.length,r=new Array(i),c=0;c<i;c++)r[c]=arguments[c];return a.current==null?void 0:a.current(...r)},[])}const nT="data-floating-ui-focusable",_3="active",S3="selected",iT={...bs};let x3=!1,rT=0;const T3=()=>"floating-ui-"+Math.random().toString(36).slice(2,6)+rT++;function sT(){const[t,a]=b.useState(()=>x3?T3():void 0);return Io(()=>{t==null&&a(T3())},[]),b.useEffect(()=>{x3=!0},[]),t}const cT=iT.useId,eC=cT||sT,lT=b.forwardRef(function(a,i){const{context:{placement:r,elements:{floating:c},middlewareData:{arrow:l,shift:u}},width:d=14,height:F=7,tipRadius:p=0,strokeWidth:f=0,staticOffset:m,stroke:C,d:y,style:{transform:w,...v}={},...D}=a,B=eC(),[S,E]=b.useState(!1);if(Io(()=>{if(!c)return;Be(c).direction==="rtl"&&E(!0)},[c]),!c)return null;const[T,P]=r.split("-"),x=T==="top"||T==="bottom";let L=m;(x&&u!=null&&u.x||!x&&u!=null&&u.y)&&(L=null);const z=f*2,U=z/2,n2=d/2*(p/-8+1),u2=F/2*p/4,s2=!!y,c2=L&&P==="end"?"bottom":"top";let G=L&&P==="end"?"right":"left";L&&S&&(G=P==="end"?"left":"right");const d2=(l==null?void 0:l.x)!=null?L||l.x:"",O=(l==null?void 0:l.y)!=null?L||l.y:"",W=y||"M0,0"+(" H"+d)+(" L"+(d-n2)+","+(F-u2))+(" Q"+d/2+","+F+" "+n2+","+(F-u2))+" Z",Q={top:s2?"rotate(180deg)":"",left:s2?"rotate(90deg)":"rotate(-90deg)",bottom:s2?"":"rotate(180deg)",right:s2?"rotate(-90deg)":"rotate(90deg)"}[T];return g.jsxs("svg",{...D,"aria-hidden":!0,ref:i,width:s2?d:d+z,height:d,viewBox:"0 0 "+d+" "+(F>d?F:d),style:{position:"absolute",pointerEvents:"none",[G]:d2,[c2]:O,[T]:x||s2?"100%":"calc(100% - "+z/2+"px)",transform:[Q,w].filter(X=>!!X).join(" "),...v},children:[z>0&&g.jsx("path",{clipPath:"url(#"+B+")",fill:"none",stroke:C,strokeWidth:z+(y?0:1),d:W}),g.jsx("path",{stroke:z&&!y?D.fill:"none",d:W}),g.jsx("clipPath",{id:B,children:g.jsx("rect",{x:-U,y:U*(s2?-1:1),width:d+z,height:d})})]})});function hT(){const t=new Map;return{emit(a,i){var r;(r=t.get(a))==null||r.forEach(c=>c(i))},on(a,i){t.has(a)||t.set(a,new Set),t.get(a).add(i)},off(a,i){var r;(r=t.get(a))==null||r.delete(i)}}}const uT=b.createContext(null),dT=b.createContext(null),tC=()=>{var t;return((t=b.useContext(uT))==null?void 0:t.id)||null},oC=()=>b.useContext(dT);function AT(t){return"data-floating-ui-"+t}function ie(t){t.current!==-1&&(clearTimeout(t.current),t.current=-1)}const R3=AT("safe-polygon");function Eh(t,a,i){if(i&&!cu(i))return 0;if(typeof t=="number")return t;if(typeof t=="function"){const r=t();return typeof r=="number"?r:r==null?void 0:r[a]}return t==null?void 0:t[a]}function _h(t){return typeof t=="function"?t():t}function pT(t,a){a===void 0&&(a={});const{open:i,onOpenChange:r,dataRef:c,events:l,elements:u}=t,{enabled:d=!0,delay:F=0,handleClose:p=null,mouseOnly:f=!1,restMs:m=0,move:C=!0}=a,y=oC(),w=tC(),v=Zr(p),D=Zr(F),B=Zr(i),S=Zr(m),E=b.useRef(),T=b.useRef(-1),P=b.useRef(),x=b.useRef(-1),L=b.useRef(!0),z=b.useRef(!1),U=b.useRef(()=>{}),n2=b.useRef(!1),u2=Jn(()=>{var W;const Q=(W=c.current.openEvent)==null?void 0:W.type;return(Q==null?void 0:Q.includes("mouse"))&&Q!=="mousedown"});b.useEffect(()=>{if(!d)return;function W(Q){let{open:X}=Q;X||(ie(T),ie(x),L.current=!0,n2.current=!1)}return l.on("openchange",W),()=>{l.off("openchange",W)}},[d,l]),b.useEffect(()=>{if(!d||!v.current||!i)return;function W(X){u2()&&r(!1,X,"hover")}const Q=Kr(u.floating).documentElement;return Q.addEventListener("mouseleave",W),()=>{Q.removeEventListener("mouseleave",W)}},[u.floating,i,r,d,v,u2]);const s2=b.useCallback(function(W,Q,X){Q===void 0&&(Q=!0),X===void 0&&(X="hover");const R=Eh(D.current,"close",E.current);R&&!P.current?(ie(T),T.current=window.setTimeout(()=>r(!1,W,X),R)):Q&&(ie(T),r(!1,W,X))},[D,r]),c2=Jn(()=>{U.current(),P.current=void 0}),G=Jn(()=>{if(z.current){const W=Kr(u.floating).body;W.style.pointerEvents="",W.removeAttribute(R3),z.current=!1}}),d2=Jn(()=>c.current.openEvent?["click","mousedown"].includes(c.current.openEvent.type):!1);b.useEffect(()=>{if(!d)return;function W(e2){if(ie(T),L.current=!1,f&&!cu(E.current)||_h(S.current)>0&&!Eh(D.current,"open"))return;const a2=Eh(D.current,"open",E.current);a2?T.current=window.setTimeout(()=>{B.current||r(!0,e2,"hover")},a2):i||r(!0,e2,"hover")}function Q(e2){if(d2()){G();return}U.current();const a2=Kr(u.floating);if(ie(x),n2.current=!1,v.current&&c.current.floatingContext){i||ie(T),P.current=v.current({...c.current.floatingContext,tree:y,x:e2.clientX,y:e2.clientY,onClose(){G(),c2(),d2()||s2(e2,!0,"safe-polygon")}});const k2=P.current;a2.addEventListener("mousemove",k2),U.current=()=>{a2.removeEventListener("mousemove",k2)};return}(E.current==="touch"?!Q9(u.floating,e2.relatedTarget):!0)&&s2(e2)}function X(e2){d2()||c.current.floatingContext&&(v.current==null||v.current({...c.current.floatingContext,tree:y,x:e2.clientX,y:e2.clientY,onClose(){G(),c2(),d2()||s2(e2)}})(e2))}function R(){ie(T)}function $(e2){d2()||s2(e2,!1)}if(_0(u.domReference)){const e2=u.domReference,a2=u.floating;return i&&e2.addEventListener("mouseleave",X),C&&e2.addEventListener("mousemove",W,{once:!0}),e2.addEventListener("mouseenter",W),e2.addEventListener("mouseleave",Q),a2&&(a2.addEventListener("mouseleave",X),a2.addEventListener("mouseenter",R),a2.addEventListener("mouseleave",$)),()=>{i&&e2.removeEventListener("mouseleave",X),C&&e2.removeEventListener("mousemove",W),e2.removeEventListener("mouseenter",W),e2.removeEventListener("mouseleave",Q),a2&&(a2.removeEventListener("mouseleave",X),a2.removeEventListener("mouseenter",R),a2.removeEventListener("mouseleave",$))}}},[u,d,t,f,C,s2,c2,G,r,i,B,y,D,v,c,d2,S]),Io(()=>{var W;if(d&&i&&(W=v.current)!=null&&(W=W.__options)!=null&&W.blockPointerEvents&&u2()){z.current=!0;const X=u.floating;if(_0(u.domReference)&&X){var Q;const R=Kr(u.floating).body;R.setAttribute(R3,"");const $=u.domReference,e2=y==null||(Q=y.nodesRef.current.find(a2=>a2.id===w))==null||(Q=Q.context)==null?void 0:Q.elements.floating;return e2&&(e2.style.pointerEvents=""),R.style.pointerEvents="none",$.style.pointerEvents="auto",X.style.pointerEvents="auto",()=>{R.style.pointerEvents="",$.style.pointerEvents="",X.style.pointerEvents=""}}}},[d,i,w,u,y,v,u2]),Io(()=>{i||(E.current=void 0,n2.current=!1,c2(),G())},[i,c2,G]),b.useEffect(()=>()=>{c2(),ie(T),ie(x),G()},[d,u.domReference,c2,G]);const O=b.useMemo(()=>{function W(Q){E.current=Q.pointerType}return{onPointerDown:W,onPointerEnter:W,onMouseMove(Q){const{nativeEvent:X}=Q;function R(){!L.current&&!B.current&&r(!0,X,"hover")}f&&!cu(E.current)||i||_h(S.current)===0||n2.current&&Q.movementX**2+Q.movementY**2<2||(ie(x),E.current==="touch"?R():(n2.current=!0,x.current=window.setTimeout(R,_h(S.current))))}}},[f,r,i,B,S]);return b.useMemo(()=>d?{reference:O}:{},[d,O])}function Sh(t,a){if(!t||!a)return!1;const i=a.getRootNode==null?void 0:a.getRootNode();if(t.contains(a))return!0;if(i&&ps(i)){let r=a;for(;r;){if(t===r)return!0;r=r.parentNode||r.host}}return!1}function FT(t){return"composedPath"in t?t.composedPath()[0]:t.target}function mT(t){const{open:a=!1,onOpenChange:i,elements:r}=t,c=eC(),l=b.useRef({}),[u]=b.useState(()=>hT()),d=tC()!=null,[F,p]=b.useState(r.reference),f=Jn((y,w,v)=>{l.current.openEvent=y?w:void 0,u.emit("openchange",{open:y,event:w,reason:v,nested:d}),i==null||i(y,w,v)}),m=b.useMemo(()=>({setPositionReference:p}),[]),C=b.useMemo(()=>({reference:F||r.reference||null,floating:r.floating||null,domReference:r.reference}),[F,r.reference,r.floating]);return b.useMemo(()=>({dataRef:l,open:a,onOpenChange:f,elements:C,events:u,floatingId:c,refs:m}),[a,f,C,u,c,m])}function gT(t){t===void 0&&(t={});const{nodeId:a}=t,i=mT({...t,elements:{reference:null,floating:null,...t.elements}}),r=t.rootContext||i,c=r.elements,[l,u]=b.useState(null),[d,F]=b.useState(null),f=(c==null?void 0:c.domReference)||l,m=b.useRef(null),C=oC();Io(()=>{f&&(m.current=f)},[f]);const y=sb({...t,elements:{...c,...d&&{reference:d}}}),w=b.useCallback(E=>{const T=_0(E)?{getBoundingClientRect:()=>E.getBoundingClientRect(),getClientRects:()=>E.getClientRects(),contextElement:E}:E;F(T),y.refs.setReference(T)},[y.refs]),v=b.useCallback(E=>{(_0(E)||E===null)&&(m.current=E,u(E)),(_0(y.refs.reference.current)||y.refs.reference.current===null||E!==null&&!_0(E))&&y.refs.setReference(E)},[y.refs]),D=b.useMemo(()=>({...y.refs,setReference:v,setPositionReference:w,domReference:m}),[y.refs,v,w]),B=b.useMemo(()=>({...y.elements,domReference:f}),[y.elements,f]),S=b.useMemo(()=>({...y,...r,refs:D,elements:B,nodeId:a}),[y,D,B,a,r]);return Io(()=>{r.dataRef.current.floatingContext=S;const E=C==null?void 0:C.nodesRef.current.find(T=>T.id===a);E&&(E.context=S)}),b.useMemo(()=>({...y,context:S,refs:D,elements:B}),[y,D,B,S])}function xh(t,a,i){const r=new Map,c=i==="item";let l=t;if(c&&t){const{[_3]:u,[S3]:d,...F}=t;l=F}return{...i==="floating"&&{tabIndex:-1,[nT]:""},...l,...a.map(u=>{const d=u?u[i]:null;return typeof d=="function"?t?d(t):null:d}).concat(t).reduce((u,d)=>(d&&Object.entries(d).forEach(F=>{let[p,f]=F;if(!(c&&[_3,S3].includes(p)))if(p.indexOf("on")===0){if(r.has(p)||r.set(p,[]),typeof f=="function"){var m;(m=r.get(p))==null||m.push(f),u[p]=function(){for(var C,y=arguments.length,w=new Array(y),v=0;v<y;v++)w[v]=arguments[v];return(C=r.get(p))==null?void 0:C.map(D=>D(...w)).find(D=>D!==void 0)}}}else u[p]=f}),u),{})}}function fT(t){t===void 0&&(t=[]);const a=t.map(d=>d==null?void 0:d.reference),i=t.map(d=>d==null?void 0:d.floating),r=t.map(d=>d==null?void 0:d.item),c=b.useCallback(d=>xh(d,t,"reference"),a),l=b.useCallback(d=>xh(d,t,"floating"),i),u=b.useCallback(d=>xh(d,t,"item"),r);return b.useMemo(()=>({getReferenceProps:c,getFloatingProps:l,getItemProps:u}),[c,l,u])}function aC(t,a,i){return i===void 0&&(i=!0),t.filter(c=>{var l;return c.parentId===a&&(!i||((l=c.context)==null?void 0:l.open))}).flatMap(c=>[c,...aC(t,c.id,i)])}function P3(t,a){const[i,r]=t;let c=!1;const l=a.length;for(let u=0,d=l-1;u<l;d=u++){const[F,p]=a[u]||[0,0],[f,m]=a[d]||[0,0];p>=r!=m>=r&&i<=(f-F)*(r-p)/(m-p)+F&&(c=!c)}return c}function bT(t,a){return t[0]>=a.x&&t[0]<=a.x+a.width&&t[1]>=a.y&&t[1]<=a.y+a.height}function CT(t){t===void 0&&(t={});const{buffer:a=.5,blockPointerEvents:i=!1,requireIntent:r=!0}=t,c={current:-1};let l=!1,u=null,d=null,F=performance.now();function p(m,C){const y=performance.now(),w=y-F;if(u===null||d===null||w===0)return u=m,d=C,F=y,null;const v=m-u,D=C-d,S=Math.sqrt(v*v+D*D)/w;return u=m,d=C,F=y,S}const f=m=>{let{x:C,y,placement:w,elements:v,onClose:D,nodeId:B,tree:S}=m;return function(T){function P(){ie(c),D()}if(ie(c),!v.domReference||!v.floating||w==null||C==null||y==null)return;const{clientX:x,clientY:L}=T,z=[x,L],U=FT(T),n2=T.type==="mouseleave",u2=Sh(v.floating,U),s2=Sh(v.domReference,U),c2=v.domReference.getBoundingClientRect(),G=v.floating.getBoundingClientRect(),d2=w.split("-")[0],O=C>G.right-G.width/2,W=y>G.bottom-G.height/2,Q=bT(z,c2),X=G.width>c2.width,R=G.height>c2.height,$=(X?c2:G).left,e2=(X?c2:G).right,a2=(R?c2:G).top,A2=(R?c2:G).bottom;if(u2&&(l=!0,!n2))return;if(s2&&(l=!1),s2&&!n2){l=!0;return}if(n2&&_0(T.relatedTarget)&&Sh(v.floating,T.relatedTarget)||S&&aC(S.nodesRef.current,B).length)return;if(d2==="top"&&y>=c2.bottom-1||d2==="bottom"&&y<=c2.top+1||d2==="left"&&C>=c2.right-1||d2==="right"&&C<=c2.left+1)return P();let k2=[];switch(d2){case"top":k2=[[$,c2.top+1],[$,G.bottom-1],[e2,G.bottom-1],[e2,c2.top+1]];break;case"bottom":k2=[[$,G.top+1],[$,c2.bottom-1],[e2,c2.bottom-1],[e2,G.top+1]];break;case"left":k2=[[G.right-1,A2],[G.right-1,a2],[c2.left+1,a2],[c2.left+1,A2]];break;case"right":k2=[[c2.right-1,A2],[c2.right-1,a2],[G.left+1,a2],[G.left+1,A2]];break}function g2(K2){let[E2,I2]=K2;switch(d2){case"top":{const V2=[X?E2+a/2:O?E2+a*4:E2-a*4,I2+a+1],h0=[X?E2-a/2:O?E2+a*4:E2-a*4,I2+a+1],I0=[[G.left,O||X?G.bottom-a:G.top],[G.right,O?X?G.bottom-a:G.top:G.bottom-a]];return[V2,h0,...I0]}case"bottom":{const V2=[X?E2+a/2:O?E2+a*4:E2-a*4,I2-a],h0=[X?E2-a/2:O?E2+a*4:E2-a*4,I2-a],I0=[[G.left,O||X?G.top+a:G.bottom],[G.right,O?X?G.top+a:G.bottom:G.top+a]];return[V2,h0,...I0]}case"left":{const V2=[E2+a+1,R?I2+a/2:W?I2+a*4:I2-a*4],h0=[E2+a+1,R?I2-a/2:W?I2+a*4:I2-a*4];return[...[[W||R?G.right-a:G.left,G.top],[W?R?G.right-a:G.left:G.right-a,G.bottom]],V2,h0]}case"right":{const V2=[E2-a,R?I2+a/2:W?I2+a*4:I2-a*4],h0=[E2-a,R?I2-a/2:W?I2+a*4:I2-a*4],I0=[[W||R?G.left+a:G.right,G.top],[W?R?G.left+a:G.right:G.left+a,G.bottom]];return[V2,h0,...I0]}}}if(!P3([x,L],k2)){if(l&&!Q)return P();if(!n2&&r){const K2=p(T.clientX,T.clientY);if(K2!==null&&K2<.1)return P()}P3([x,L],g2([C,y]))?!l&&r&&(c.current=window.setTimeout(P,40)):P()}}};return f.__options={blockPointerEvents:i},f}function yT({children:t,...a}){const[i,r]=t,c=b.useRef(null),[l,u]=b.useState(!1),{context:d,refs:F,floatingStyles:p}=gT({middleware:[hb({element:c}),cb(8),lb()],open:l,onOpenChange:u,placement:"bottom-start"}),f=pT(d,{handleClose:CT()}),{getReferenceProps:m,getFloatingProps:C}=fT([f]),y=r.props.children,w=i.props.children;return g.jsxs("span",{...a,children:[g.jsx("span",{className:"twoslash-target",ref:F.setReference,...m(),children:y}),l&&g.jsxs("div",{className:"twoslash-popup-info-hover",ref:F.setFloating,style:p,...C(),children:[g.jsx(lT,{ref:c,context:d,fill:Hh.background5,height:3,stroke:Hh.border2,strokeWidth:1,width:7}),g.jsx("div",{className:"twoslash-popup-scroll-container",children:w})]})]})}function vT(t){var i;const a=l2(t.className,E3);return(i=t.className)!=null&&i.includes("twoslash-hover")?g.jsx(yT,{...t,className:a}):g.jsx("span",{...t,className:l2(t.className,E3)})}var wT="vocs_Strong";function kT(t){return g.jsx("strong",{...t,className:l2(t.className,wT)})}var DT="vocs_Summary";function BT(t){return g.jsx("summary",{...t,className:l2(t.className,DT)})}var ET="vocs_Table";function _T(t){return g.jsx("table",{...t,className:l2(t.className,ET)})}var ST="vocs_TableCell";function xT(t){return g.jsx("td",{...t,className:l2(t.className,ST)})}var TT="vocs_TableHeader";function RT(t){return g.jsx("th",{...t,className:l2(t.className,TT)})}var PT="vocs_TableRow";function IT(t){return g.jsx("tr",{...t,className:l2(t.className,PT)})}const MT={a:lx,aside:Cx,blockquote:vx,code:kx,details:Ex,div:y9,pre:Z9,header:E9,figcaption:w9,figure:D9,h1:bg,h2:X5,h3:Y5,h4:J5,h5:Q5,h6:$5,hr:S9,kd:cf,li:I9,ol:t=>g.jsx(D3,{ordered:!0,...t}),p:Cg,section:J9,span:vT,strong:kT,summary:BT,table:_T,td:xT,th:RT,tr:IT,ul:t=>g.jsx(D3,{ordered:!1,...t})};function LT(){const{pathname:t}=i0(),a=m0(),{ogImageUrl:i}=a;if(!i)return;if(typeof i=="string")return i;const r=b.useMemo(()=>{const c=Object.keys(i).filter(l=>t.startsWith(l));return c[c.length-1]},[i,t]);if(r)return i[r]}function lu(t){const{children:a,content:i,filePath:r,frontmatter:c,lastUpdatedAt:l,path:u}=t,{pathname:d}=i0(),F=b.useRef(void 0);return b.useEffect(()=>{F.current=d}),g.jsxs(g.Fragment,{children:[g.jsx(OT,{frontmatter:c}),typeof window<"u"&&g.jsx(lg,{}),g.jsx(rx,{components:MT,children:g.jsx(Fk,{frontmatter:c,path:u,children:g.jsx(wg.Provider,{value:{content:i,filePath:r,frontmatter:c,lastUpdatedAt:l,previousPath:F.current},children:a})})})]})}function OT({frontmatter:t}){var C,y,w,v,D,B;const a=m0(),i=LT(),{baseUrl:r,font:c,iconUrl:l,logoUrl:u}=a,d=(t==null?void 0:t.description)??a.description,F=(t==null?void 0:t.title)??a.title,p=(()=>{if(a.title&&!F.includes(a.title))return a.titleTemplate})(),f=typeof window<"u"&&window.location.hostname==="localhost",m=p?p.replace("%s",F):F;return g.jsxs(g.Fragment,{children:[m&&g.jsx("title",{children:m}),r&&!0&&!f&&g.jsx("base",{href:r}),d!=="undefined"&&g.jsx("meta",{name:"description",content:d}),l&&typeof l=="string"&&g.jsx("link",{rel:"icon",href:l,type:Th(l)}),l&&typeof l!="string"&&g.jsx("link",{rel:"icon",href:l.light,type:Th(l.light)}),l&&typeof l!="string"&&g.jsx("link",{rel:"icon",href:l.dark,type:Th(l.dark),media:"(prefers-color-scheme: dark)"}),g.jsx("meta",{property:"og:type",content:"website"}),g.jsx("meta",{property:"og:title",content:F||a.title}),r&&g.jsx("meta",{property:"og:url",content:r}),d!=="undefined"&&g.jsx("meta",{property:"og:description",content:d}),i&&g.jsx("meta",{property:"og:image",content:i.replace("%logo",`${r||""}${typeof u=="string"?u:(u==null?void 0:u.dark)||""}`).replace("%title",F||"").replace("%description",(d!=="undefined"?d:"")||"")}),(((C=c==null?void 0:c.default)==null?void 0:C.google)||((y=c==null?void 0:c.mono)==null?void 0:y.google))&&g.jsx("link",{rel:"preconnect",href:"https://fonts.googleapis.com"}),(((w=c==null?void 0:c.default)==null?void 0:w.google)||((v=c==null?void 0:c.mono)==null?void 0:v.google))&&g.jsx("link",{rel:"preconnect",href:"https://fonts.gstatic.com",crossOrigin:""}),((D=c==null?void 0:c.default)==null?void 0:D.google)&&g.jsx("link",{href:`https://fonts.googleapis.com/css2?family=${c.default.google}:wght@300;400;500&display=swap`,rel:"stylesheet"}),((B=c==null?void 0:c.mono)==null?void 0:B.google)&&g.jsx("link",{href:`https://fonts.googleapis.com/css2?family=${c.mono.google}:wght@300;400;500&display=swap`,rel:"stylesheet"}),g.jsx("meta",{name:"twitter:card",content:"summary_large_image"}),i&&g.jsx("meta",{property:"twitter:image",content:i.replace("%logo",`${r||""}${typeof u=="string"?u:(u==null?void 0:u.dark)||""}`).replace("%title",F?encodeURIComponent(F):"").replace("%description",d?encodeURIComponent(d):"")})]})}function Th(t){if(t.endsWith(".svg"))return"image/svg+xml";if(t.endsWith(".png"))return"image/png";if(t.endsWith(".jpg"))return"image/jpeg";if(t.endsWith(".ico"))return"image/x-icon";if(t.endsWith(".webp"))return"image/webp"}const NT=(()=>{const t=ku.find(({path:a})=>a==="*");return t?{path:t.path,lazy:async()=>{const{frontmatter:a,...i}=await t.lazy();return{...i,element:g.jsx(lu,{frontmatter:a,path:t.path,children:g.jsx(ru,{children:g.jsx(i.default,{})})})}}}:{path:"*",lazy:void 0,element:g.jsx(lu,{frontmatter:{layout:"minimal"},path:"*",children:g.jsx(ru,{children:g.jsx(Uw,{})})})}})(),I3=[...ku.filter(({path:t})=>t!=="*").map(t=>({path:t.path,lazy:async()=>{const{frontmatter:a,...i}=await t.lazy();return{...i,element:g.jsx(lu,{content:decodeURIComponent(t.content??""),filePath:t.filePath,frontmatter:a,lastUpdatedAt:t.lastUpdatedAt,path:t.path,children:g.jsx(ru,{children:g.jsx(i.default,{})})})}}})),NT];async function HT(t,a){var r;const i=(r=Ct(t,window.location,a))==null?void 0:r.filter(c=>c.route.lazy);i&&(i==null?void 0:i.length)>0&&await Promise.all(i.map(async c=>{const l=await c.route.lazy();Object.assign(c.route,{...l,lazy:void 0})}))}function zT(){const t=document.querySelectorAll('style[data-vocs-temp-style="true"]');for(const a of t)a.remove()}jT();async function jT(){const t=pg().basePath;await HT(I3,t),zT();const a=uw(I3,{basename:t});by.hydrateRoot(document.getElementById("app"),g.jsx(Ew,{children:g.jsx(Hv,{router:a})}))}export{n9 as C,ke as L,t9 as R,a9 as T,YT as a,Dh as b,l2 as c,X1 as d,o9 as e,ix as f,a0 as g,ug as h,g as j,m0 as u};
